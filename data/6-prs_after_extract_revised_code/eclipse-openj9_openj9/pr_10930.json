{"pr_number": 10930, "pr_title": "Cache Class#getSimpleName and Class#getCanonicalName", "pr_createdAt": "2020-10-19T21:59:41Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10930", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzOTI3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r508139270", "bodyText": "@pshipton are you familiar with the rationale behind the naming scheme for CacheKey's using the .X or /X format?  These names seem fine to me but I'm not sure if they fit the existing schema.", "author": "DanHeidinga", "createdAt": "2020-10-20T00:34:11Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -4060,6 +4066,9 @@ static CacheKey newDeclaredPublicMethodsKey(String methodName, Class<?>[] parame\n \t\treturn new CacheKey(\"#m\" + methodName, parameterTypes, null);\t//$NON-NLS-1$\n \t}\n \n+\tstatic final CacheKey ClassCanonicalNameKey = new CacheKey(\"CanonicalName\", EmptyParameters, null); //$NON-NLS-1$\n+\tstatic final CacheKey ClassSimpleNameKey = new CacheKey(\"SimpleName\", EmptyParameters, null); //$NON-NLS-1$", "originalCommit": "27eedb12add1912713382b61946cdbcc6126e345", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NjExOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r508856118", "bodyText": "The names shouldn't conflict with names of any possible methods, otherwise the method and cached name will conflict in the cache. i.e. the current names do conflict. The special characters are used to avoid conflicts. The different characters distinguish between different types of reflect data. Any special character can be used to avoid conflicts, as long as the chosen name isn't already used in the cache.\nThe cache uses SoftReference to store the values, so the cached names will disappear after some time if not referenced. This seems like desirable behavior though, just pointing it out.\nThis change could result in a significant footprint increase due to creating a ConcurrentHashMap to hold the cached values. Many classes may not be accessed via reflection, but have their simple or canonical name accessed. The ConcurrentHashMap will be null'ed once the cached values are collected.", "author": "pshipton", "createdAt": "2020-10-20T21:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzOTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2NjgyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r508866829", "bodyText": "With regards to the CacheKey I can add just a special symbol at the beginning to make it unique.\nAs for the memory footprint I think it makes sense. ConcurrentHashMap is pretty heavy actually. But I can suggest using something more lightweight, like HashMap. In this case multiple threads can set the same value but I don't think this is a big problem.\nAs an alternative, these values can be stored lazily (on demand) in a couple of SoftReferences.", "author": "alexey-anufriev", "createdAt": "2020-10-20T22:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzOTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMzg3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r509323873", "bodyText": "I had proposed reusing the reflect cache to avoid growing the default footprint of j.l.Class but as pointed out, the CHM is a lot of overhead here.  Looking at the j.l.Class, there are a number of existing caches:\n* private transient AnnotationCache annotationCache;\n* private transient AnnotationVars annotationVars;\n* private transient ClassRepositoryHolder classRepoHolder;\n* private transient ReflectCache reflectCache;\n* private transient Class<?> cachedDeclaringClass;\n* private transient Class<?> cachedEnclosingClass;  // getting enclosingClass also caches declaringClass\n* private transient Class<?>[] cachedInterfaces;\n* private transient Object methodHandleCache;\n\nAn alternative would be to add a new cache that holds the {cachedDeclaringClass, cachedEnclosingClass, cachedInterfaces} & the new two SoftReferences for cached names.\nThis would require more performance and footprint results to validate it doesn't regress startup / throughput / footprint.\nThoughts?", "author": "DanHeidinga", "createdAt": "2020-10-21T14:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzOTI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTA4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r510429082", "bodyText": "I did a draft implementation of this proposal. It would be nice if it can be checked.\nAnd I have also updated the description with new benchmark results.", "author": "alexey-anufriev", "createdAt": "2020-10-22T20:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzOTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "609a33f7b5dfc0572a58aaf746b2a42fb63e9a21", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex e3719bda8..2939d0ea2 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -4066,9 +4144,6 @@ private static final class CacheKey {\n \t\treturn new CacheKey(\"#m\" + methodName, parameterTypes, null);\t//$NON-NLS-1$\n \t}\n \n-\tstatic final CacheKey ClassCanonicalNameKey = new CacheKey(\"CanonicalName\", EmptyParameters, null); //$NON-NLS-1$\n-\tstatic final CacheKey ClassSimpleNameKey = new CacheKey(\"SimpleName\", EmptyParameters, null); //$NON-NLS-1$\n-\n \tstatic final CacheKey PublicConstructorsKey = new CacheKey(\"/c\", EmptyParameters, null); //$NON-NLS-1$\n \tstatic final CacheKey PublicFieldsKey = newFieldKey(\"/f\", null); //$NON-NLS-1$\n \tstatic final CacheKey PublicMethodsKey = new CacheKey(\"/m\", EmptyParameters, null); //$NON-NLS-1$\n"}}, {"oid": "609a33f7b5dfc0572a58aaf746b2a42fb63e9a21", "url": "https://github.com/eclipse-openj9/openj9/commit/609a33f7b5dfc0572a58aaf746b2a42fb63e9a21", "message": "Cache Class#getSimpleName and Class#getCanonicalName\n\nThis patch introduces cache for Class#getSimpleName and Class#getCanonicalName\n\nFixes #9963\n\nSigned-off-by: Alexey Anufriev <contact@alexey-anufriev.com>", "committedDate": "2020-10-22T19:37:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NDg1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r510874857", "bodyText": "what happens when the SoftReference gets cleared?", "author": "DanHeidinga", "createdAt": "2020-10-23T13:14:27Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3579,6 +3631,11 @@ public Method getEnclosingMethod() throws SecurityException {\n  * @see #isAnonymousClass()\n  */\n public String getSimpleName() {\n+\tMetadataCache cache = getMetadataCache();\n+\tif (cache.cachedSimpleName != null) {\n+\t\treturn cache.cachedSimpleName.get();", "originalCommit": "609a33f7b5dfc0572a58aaf746b2a42fb63e9a21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwNDQ5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r510904498", "bodyText": "oh, sorry, missed this, we need to check the referent existence as well, will fix that", "author": "alexey-anufriev", "createdAt": "2020-10-23T14:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NDg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "afbace5d925a71e0ff1a164c842c8121e007ca64", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 2939d0ea2..71ba67ec7 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -3632,7 +3632,7 @@ private native String getSimpleNameImpl();\n  */\n public String getSimpleName() {\n \tMetadataCache cache = getMetadataCache();\n-\tif (cache.cachedSimpleName != null) {\n+\tif (cache.cachedSimpleName != null && cache.cachedSimpleName.get() != null) {\n \t\treturn cache.cachedSimpleName.get();\n \t}\n \n"}}, {"oid": "afbace5d925a71e0ff1a164c842c8121e007ca64", "url": "https://github.com/eclipse-openj9/openj9/commit/afbace5d925a71e0ff1a164c842c8121e007ca64", "message": "Cache Class#getSimpleName and Class#getCanonicalName\n\nThis patch introduces cache for Class#getSimpleName and Class#getCanonicalName\n\nFixes #9963\n\nSigned-off-by: Alexey Anufriev <contact@alexey-anufriev.com>", "committedDate": "2020-10-23T19:54:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMzMxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511133317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMetadataCache.cachedSimpleNameOffset = getFieldOffset(\n          \n          \n            \n            \t\t\t\tMetadataCache.class, \"cachedSimpleName\", MetadataCache.cachedSimpleNameOffset); //$NON-NLS-1$\n          \n          \n            \n            \t\tif (-1 == MetadataCache.cachedSimpleNameOffset) {\n          \n          \n            \n            \t\t\t/* Only lookup the offset if we haven't found it already */\n          \n          \n            \n            \t\t\tMetadataCache.cachedSimpleNameOffset = getFieldOffset(\n          \n          \n            \n            \t\t\t\tMetadataCache.class, \"cachedSimpleName\", MetadataCache.cachedSimpleNameOffset); //$NON-NLS-1$\n          \n          \n            \n            \t\t}", "author": "DanHeidinga", "createdAt": "2020-10-23T20:11:15Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3029,6 +3015,72 @@ public MethodHandle run() {\n \treturn valueMethod;\n }\n \n+private MetadataCache getMetadataCache() {\n+\tif (metadataCache == null) {\n+\t\tmetadataCacheOffset = getFieldOffset(\"metadataCache\"); //$NON-NLS-1$\n+\t\twriteFieldValue(metadataCacheOffset, new MetadataCache());\n+\t}\n+\treturn metadataCache;\n+}\n+\n+private String cacheSimpleName(String simpleName) {\n+\tMetadataCache cache = getMetadataCache();\n+\n+\tif (cache.cachedSimpleName == null || cache.cachedSimpleName.get() == null) {\n+\t\tMetadataCache.cachedSimpleNameOffset = getFieldOffset(\n+\t\t\t\tMetadataCache.class, \"cachedSimpleName\", MetadataCache.cachedSimpleNameOffset); //$NON-NLS-1$", "originalCommit": "afbace5d925a71e0ff1a164c842c8121e007ca64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NDU1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511984552", "bodyText": "As discussed, getFieldOffset has this check already, so I will leave it as is.", "author": "alexey-anufriev", "createdAt": "2020-10-26T14:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMzMxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMzY4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511133680", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tMetadataCache.cachedCanonicalNameOffset = getFieldOffset(\n          \n          \n            \n            \t\t\t\tMetadataCache.class, \"cachedCanonicalName\", MetadataCache.cachedCanonicalNameOffset); //$NON-NLS-1$\n          \n          \n            \n            \t\tif (-1 == MetadataCache.cachedCanonicalNameOffset) {\n          \n          \n            \n            \t\t\tMetadataCache.cachedCanonicalNameOffset = getFieldOffset(\n          \n          \n            \n            \t\t\t\t\tMetadataCache.class, \"cachedCanonicalName\", MetadataCache.cachedCanonicalNameOffset); //$NON-NLS-1$\n          \n          \n            \n            \t\t}", "author": "DanHeidinga", "createdAt": "2020-10-23T20:12:18Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3029,6 +3015,72 @@ public MethodHandle run() {\n \treturn valueMethod;\n }\n \n+private MetadataCache getMetadataCache() {\n+\tif (metadataCache == null) {\n+\t\tmetadataCacheOffset = getFieldOffset(\"metadataCache\"); //$NON-NLS-1$\n+\t\twriteFieldValue(metadataCacheOffset, new MetadataCache());\n+\t}\n+\treturn metadataCache;\n+}\n+\n+private String cacheSimpleName(String simpleName) {\n+\tMetadataCache cache = getMetadataCache();\n+\n+\tif (cache.cachedSimpleName == null || cache.cachedSimpleName.get() == null) {\n+\t\tMetadataCache.cachedSimpleNameOffset = getFieldOffset(\n+\t\t\t\tMetadataCache.class, \"cachedSimpleName\", MetadataCache.cachedSimpleNameOffset); //$NON-NLS-1$\n+\n+\t\twriteFieldValue(cache, MetadataCache.cachedSimpleNameOffset, new SoftReference<>(simpleName));\n+\t}\n+\n+\treturn simpleName;\n+}\n+\n+private String cacheCanonicalName(String canonicalName) {\n+\tMetadataCache cache = getMetadataCache();\n+\n+\tif (cache.cachedCanonicalName == null || cache.cachedCanonicalName.get() == null) {\n+\t\tMetadataCache.cachedCanonicalNameOffset = getFieldOffset(\n+\t\t\t\tMetadataCache.class, \"cachedCanonicalName\", MetadataCache.cachedCanonicalNameOffset); //$NON-NLS-1$", "originalCommit": "afbace5d925a71e0ff1a164c842c8121e007ca64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NDY1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511984650", "bodyText": "As discussed, getFieldOffset has this check already, so I will leave it as is.", "author": "alexey-anufriev", "createdAt": "2020-10-26T14:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMzY4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDk0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511134947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tMetadataCache cache = getMetadataCache();\n          \n          \n            \n            \tif (cache.cachedSimpleName != null && cache.cachedSimpleName.get() != null) {\n          \n          \n            \n            \t\treturn cache.cachedSimpleName.get();\n          \n          \n            \n            \tMetadataCache cache = getMetadataCache();\n          \n          \n            \n            \tif (cache.cachedSimpleName != null) {\n          \n          \n            \n            \t\t/* Get a strong ref to the cached name so it can't be gc'd out from under us */\t\n          \n          \n            \n            \t\tString cachedSimpleName = cache.cachedSimpleName.get();\n          \n          \n            \n            \t\tif (cachedSimpleName != null) {\n          \n          \n            \n            \t\t\treturn cache.cachedSimpleName.get();\n          \n          \n            \n            \t\t}", "author": "DanHeidinga", "createdAt": "2020-10-23T20:15:21Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3579,6 +3631,11 @@ public Method getEnclosingMethod() throws SecurityException {\n  * @see #isAnonymousClass()\n  */\n public String getSimpleName() {\n+\tMetadataCache cache = getMetadataCache();\n+\tif (cache.cachedSimpleName != null && cache.cachedSimpleName.get() != null) {\n+\t\treturn cache.cachedSimpleName.get();", "originalCommit": "afbace5d925a71e0ff1a164c842c8121e007ca64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNTM1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511135359", "bodyText": "For strict correctness, we should probably also get a local reference to cache.cachedSimpleName so we're dealing with consistent data.", "author": "DanHeidinga", "createdAt": "2020-10-23T20:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2NzE4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511167180", "bodyText": "Maybe in this case, instead of return cache.cachedSimpleName.get(); we need to return cachedSimpleName? Otherwise there is still a chance that cache.cachedSimpleName.get() can be cleaned before return.", "author": "alexey-anufriev", "createdAt": "2020-10-23T21:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NjcwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511946706", "bodyText": "Once we have a strong reference to the referent, the SoftReference won't be cleared.", "author": "DanHeidinga", "createdAt": "2020-10-26T13:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNDk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "46759b866caac72669ca9fb6964d4238f079fdca", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 71ba67ec7..c6634b646 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -3632,8 +3632,11 @@ private native String getSimpleNameImpl();\n  */\n public String getSimpleName() {\n \tMetadataCache cache = getMetadataCache();\n-\tif (cache.cachedSimpleName != null && cache.cachedSimpleName.get() != null) {\n-\t\treturn cache.cachedSimpleName.get();\n+\tif (cache.cachedSimpleName != null) {\n+\t\tString cachedSimpleName = cache.cachedSimpleName.get();\n+\t\tif (cachedSimpleName != null) {\n+\t\t\treturn cachedSimpleName;\n+\t\t}\n \t}\n \n \tint arrayCount = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzNTQ4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10930#discussion_r511135485", "bodyText": "Same transform needed here", "author": "DanHeidinga", "createdAt": "2020-10-23T20:16:33Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3659,6 +3716,11 @@ else if (!fullName.endsWith(simpleName)) {\n  * @see #isLocalClass()\n  */\n public String getCanonicalName() {\n+\tMetadataCache cache = getMetadataCache();\n+\tif (cache.cachedCanonicalName != null && cache.cachedCanonicalName.get() != null) {", "originalCommit": "afbace5d925a71e0ff1a164c842c8121e007ca64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46759b866caac72669ca9fb6964d4238f079fdca", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 71ba67ec7..c6634b646 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -3717,8 +3720,11 @@ public String getSimpleName() {\n  */\n public String getCanonicalName() {\n \tMetadataCache cache = getMetadataCache();\n-\tif (cache.cachedCanonicalName != null && cache.cachedCanonicalName.get() != null) {\n-\t\treturn cache.cachedCanonicalName.get();\n+\tif (cache.cachedCanonicalName != null) {\n+\t\tString cachedCanonicalName = cache.cachedCanonicalName.get();\n+\t\tif (cachedCanonicalName != null) {\n+\t\t\treturn cachedCanonicalName;\n+\t\t}\n \t}\n \n \tint arrayCount = 0;\n"}}, {"oid": "46759b866caac72669ca9fb6964d4238f079fdca", "url": "https://github.com/eclipse-openj9/openj9/commit/46759b866caac72669ca9fb6964d4238f079fdca", "message": "Cache Class#getSimpleName and Class#getCanonicalName\n\nThis patch introduces cache for Class#getSimpleName and Class#getCanonicalName\n\nFixes #9963\n\nSigned-off-by: Alexey Anufriev <contact@alexey-anufriev.com>", "committedDate": "2020-10-26T21:22:29Z", "type": "commit"}, {"oid": "46759b866caac72669ca9fb6964d4238f079fdca", "url": "https://github.com/eclipse-openj9/openj9/commit/46759b866caac72669ca9fb6964d4238f079fdca", "message": "Cache Class#getSimpleName and Class#getCanonicalName\n\nThis patch introduces cache for Class#getSimpleName and Class#getCanonicalName\n\nFixes #9963\n\nSigned-off-by: Alexey Anufriev <contact@alexey-anufriev.com>", "committedDate": "2020-10-26T21:22:29Z", "type": "forcePushed"}]}