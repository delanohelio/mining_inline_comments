{"pr_number": 11061, "pr_title": "Support surrogate pairs in case insensitive string comparison", "pr_createdAt": "2020-10-30T18:35:02Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11061", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515334948", "bodyText": "I expect the compareValue(int codepoint) code should be the same logic as compareValue(char c). It should either compare with 128, or the check against 128 should be removed here.\n@fjeremic  any JIT opinions?", "author": "pshipton", "createdAt": "2020-10-30T19:39:54Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1429,6 +1429,14 @@ public int compareTo(String string) {\n \t\treturn s1len - s2len;\n \t}\n \n+\tprivate int compareValue(int codepoint) {\n+\t\tif ('A' <= codepoint && codepoint <= 'Z') {\n+\t\t\treturn codepoint + ('a' - 'A');\n+\t\t}\n+\n+\t\treturn Character.toLowerCase(Character.toUpperCase(codepoint));\n+\t}\n+\n \tprivate char compareValue(char c) {\n \t\tif (c < 128) {", "originalCommit": "6f5c2fdec582bcf352041c912c5c999028ba5596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzODIxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515338213", "bodyText": "Int is signed vs char which is unsigned, so you'd have to check greater than 0 too, at which point you have two checks already, which is the same number as the 'A' <= codepoint && codepoint <= 'Z' check below. That was my reasoning for removing it for compareValue(int codepoint).", "author": "mikezhang1234567890", "createdAt": "2020-10-30T19:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mjc4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515342788", "bodyText": "I think we should remove the if (c < 128) check in this API. The JIT will fold it away anyways since the if ('A' <= c && c <= 'Z') { is a stronger condition, but the method size will be inflated to the inliner, so getting rid of it in code is the best thing we can do.", "author": "fjeremic", "createdAt": "2020-10-30T19:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNDk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "7eda4861d5f4c2766d45337a102d43f7afeebf89", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 19a0343d8..aa3497ed2 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1438,10 +1438,8 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t}\n \n \tprivate char compareValue(char c) {\n-\t\tif (c < 128) {\n-\t\t\tif ('A' <= c && c <= 'Z') {\n-\t\t\t\treturn (char) (c + ('a' - 'A'));\n-\t\t\t}\n+\t\tif ('A' <= c && c <= 'Z') {\n+\t\t\treturn (char) (c + ('a' - 'A'));\n \t\t}\n \n \t\treturn Character.toLowerCase(Character.toUpperCase(c));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mzc1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515343756", "bodyText": "Shouldn't this be doing Character.toUpperCase(Character.toLowerCase(codepoint)) similarly to compareValue()?", "author": "pshipton", "createdAt": "2020-10-30T19:51:32Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1793,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tchar charAtO1 = s1.charAtInternal(o1++, s1Value);\n \t\t\t\tchar charAtO2 = s2.charAtInternal(o2++, s2Value);\n \n+\t\t\t\t/*[IF Java16]*/\n+\t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2)) {\n+\t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n+\t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n+\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (Character.toUpperCase(codepointAtO1) != Character.toUpperCase(codepointAtO2))) {", "originalCommit": "6f5c2fdec582bcf352041c912c5c999028ba5596", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MjY4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r515352684", "bodyText": "Yes, will fix here and in regionMatches.", "author": "mikezhang1234567890", "createdAt": "2020-10-30T20:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Mzc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ccc0a3b35910433db36cd5f026d065dd661ec84d", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 19a0343d8..184c31f91 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1806,7 +1806,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2)) {\n \t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n \t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n-\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (Character.toUpperCase(codepointAtO1) != Character.toUpperCase(codepointAtO2))) {\n+\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (compareValue(codepointAtO1) != compareValue(codepointAtO2))) {\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n"}}, {"oid": "ccc0a3b35910433db36cd5f026d065dd661ec84d", "url": "https://github.com/eclipse-openj9/openj9/commit/ccc0a3b35910433db36cd5f026d065dd661ec84d", "message": "Tests for case insensitive string comparison on surrogate pairs\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-02T17:55:52Z", "type": "forcePushed"}, {"oid": "786adc3dadc562610b03f8426315a8b5b78cb594", "url": "https://github.com/eclipse-openj9/openj9/commit/786adc3dadc562610b03f8426315a8b5b78cb594", "message": "Tests for case insensitive string comparison on surrogate pairs\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-02T18:41:01Z", "type": "forcePushed"}, {"oid": "7eda4861d5f4c2766d45337a102d43f7afeebf89", "url": "https://github.com/eclipse-openj9/openj9/commit/7eda4861d5f4c2766d45337a102d43f7afeebf89", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-02T18:44:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521692241", "bodyText": "I think this should be included for Java16+ only.", "author": "pshipton", "createdAt": "2020-11-11T23:09:43Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1771,14 +1791,25 @@ public boolean equalsIgnoreCase(String string) {\n \n \t\t\tif (charAtO1Last != charAtO2Last &&\n \t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n+\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {", "originalCommit": "7eda4861d5f4c2766d45337a102d43f7afeebf89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDUxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521694514", "bodyText": "I think there is a problem here for Java 16+. If the last character is a low surrogate, then it's not checked for equality here. If the character proceeding it isn't a high surrogate, true can be returned even when the characters are different.", "author": "pshipton", "createdAt": "2020-11-11T23:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc0NDc4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r521744787", "bodyText": "Pls create a test case for this case, which should fail with this code, and pass once the problem is fixed.", "author": "pshipton", "createdAt": "2020-11-12T00:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNDc5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522414796", "bodyText": "Updated method and included a test with low surrogate half only at the end of a string/region.", "author": "mikezhang1234567890", "createdAt": "2020-11-12T20:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c68d088304674e09400e60cd798fead3de0668db", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex aa3497ed2..d9405a208 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1789,23 +1789,28 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last &&\n-\t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)) &&\n-\t\t\t\t\t(!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))) {\n+\t\t\tif (charAtO1Last != charAtO2Last\n+\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n+\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\t\t\t/*[IF Java16]*/\n+\t\t\t\t\t&& (!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))\n+\t\t\t\t\t/*[ENDIF] Java16 */\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\twhile (o1 < end - 1) {\n+\t\t\twhile (o1 < end) {\n \t\t\t\tchar charAtO1 = s1.charAtInternal(o1++, s1Value);\n \t\t\t\tchar charAtO2 = s2.charAtInternal(o2++, s2Value);\n \n \t\t\t\t/*[IF Java16]*/\n-\t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2)) {\n+\t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2) && (o1 < end)) {\n \t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n \t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n \t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (compareValue(codepointAtO1) != compareValue(codepointAtO2))) {\n \t\t\t\t\t\treturn false;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t/*[ENDIF] Java16 */\n"}}, {"oid": "c68d088304674e09400e60cd798fead3de0668db", "url": "https://github.com/eclipse-openj9/openj9/commit/c68d088304674e09400e60cd798fead3de0668db", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-12T20:40:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMDA5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522420093", "bodyText": "Pls make the change for jdk16 only to avoid changing perf for older versions.", "author": "pshipton", "createdAt": "2020-11-12T20:54:36Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1769,16 +1789,32 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last &&\n-\t\t\t\t\ttoUpperCase(charAtO1Last) != toUpperCase(charAtO2Last) &&\n-\t\t\t\t\t((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))) {\n+\t\t\tif (charAtO1Last != charAtO2Last\n+\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n+\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\t\t\t/*[IF Java16]*/\n+\t\t\t\t\t&& (!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))\n+\t\t\t\t\t/*[ENDIF] Java16 */\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\twhile (o1 < end - 1) {\n+\t\t\twhile (o1 < end) {", "originalCommit": "c68d088304674e09400e60cd798fead3de0668db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MDc5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11061#discussion_r522440798", "bodyText": "Updated so it's for Java 16 only.", "author": "mikezhang1234567890", "createdAt": "2020-11-12T21:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMDA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "493d12e61f28131f1919c6f33294064ccf165894", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex d9405a208..46828088c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1799,7 +1799,11 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t\treturn false;\n \t\t\t}\n \n+\t\t\t/*[IF Java16]*/\n \t\t\twhile (o1 < end) {\n+\t\t\t/*[ELSE]*/\n+\t\t\twhile (o1 < end - 1) {\n+\t\t\t/*[ENDIF] Java16 */\n \t\t\t\tchar charAtO1 = s1.charAtInternal(o1++, s1Value);\n \t\t\t\tchar charAtO2 = s2.charAtInternal(o2++, s2Value);\n \n"}}, {"oid": "493d12e61f28131f1919c6f33294064ccf165894", "url": "https://github.com/eclipse-openj9/openj9/commit/493d12e61f28131f1919c6f33294064ccf165894", "message": "Support surrogate pairs in case insensitive string comparison\n\nChanged for the following methods:\nequalsIgnoreCase\ncompareToIgnoreCase\nregionMatches with ignoreCase parameter set to true\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-12T21:23:42Z", "type": "commit"}, {"oid": "727d232565d6554f4fb73e098733ee0b694a4f02", "url": "https://github.com/eclipse-openj9/openj9/commit/727d232565d6554f4fb73e098733ee0b694a4f02", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-12T21:23:42Z", "type": "forcePushed"}, {"oid": "62e882a392ebad0b63b757e8b3e99e56d40649b7", "url": "https://github.com/eclipse-openj9/openj9/commit/62e882a392ebad0b63b757e8b3e99e56d40649b7", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-13T15:22:06Z", "type": "forcePushed"}, {"oid": "0fd6050326e3eeca457a7f82f97d2e1c8b58c2d2", "url": "https://github.com/eclipse-openj9/openj9/commit/0fd6050326e3eeca457a7f82f97d2e1c8b58c2d2", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-13T18:06:01Z", "type": "commit"}, {"oid": "0fd6050326e3eeca457a7f82f97d2e1c8b58c2d2", "url": "https://github.com/eclipse-openj9/openj9/commit/0fd6050326e3eeca457a7f82f97d2e1c8b58c2d2", "message": "Tests for case insensitive string comparison on surrogate pairs\n\n[ci skip]\n\nSigned-off-by: Mike Zhang <mike.h.zhang@ibm.com>", "committedDate": "2020-11-13T18:06:01Z", "type": "forcePushed"}]}