{"pr_number": 11016, "pr_title": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests", "pr_createdAt": "2020-10-27T22:24:33Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11016", "timeline": [{"oid": "68f585856eac962c2ec89ba374d3636b09294ed1", "url": "https://github.com/eclipse-openj9/openj9/commit/68f585856eac962c2ec89ba374d3636b09294ed1", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-27T22:30:59Z", "type": "forcePushed"}, {"oid": "1e70ba9df7a37d807366567bb2e80fc22b4aff36", "url": "https://github.com/eclipse-openj9/openj9/commit/1e70ba9df7a37d807366567bb2e80fc22b4aff36", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-27T22:34:34Z", "type": "forcePushed"}, {"oid": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "url": "https://github.com/eclipse-openj9/openj9/commit/3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-27T22:56:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514213814", "bodyText": "The possibility of InvalidOptionException should be documented.\nBetter, just remove it from the throws clause - it doesn't appear to be possible.", "author": "keithc-ca", "createdAt": "2020-10-29T12:18:01Z", "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -68,10 +68,20 @@\n \t */\n \tpublic void resetDumpOptions() throws ConfigurationUnavailableException;\n \n+\t/**\n+\t * Returns the current dump configuration as an array of Strings.\n+\t * The syntax of the option Strings is the same as the -Xdump command-line option,\n+\t * with the initial -Xdump: omitted. See the -Xdump option section on dump agents in\n+\t * the documentation for the OpenJ9 JVM.\n+\t *\n+\t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to read the dump settings\n+\t */\n+\tpublic String[] queryDumpOptions() throws InvalidOptionException, ConfigurationUnavailableException;", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzNjMyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514236324", "bodyText": "Actually, neither exception can be thrown (the implementation has no throws clause).", "author": "keithc-ca", "createdAt": "2020-10-29T12:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MTU5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514361598", "bodyText": "I forgot to remove these.", "author": "pshipton", "createdAt": "2020-10-29T15:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxMzgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java b/jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java\nindex 506d691cc..a2f8d8497 100644\n--- a/jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java\n+++ b/jcl/src/jdk.management/share/classes/openj9/lang/management/OpenJ9DiagnosticsMXBean.java\n\n@@ -69,14 +69,14 @@ public interface OpenJ9DiagnosticsMXBean extends PlatformManagedObject {\n \tpublic void resetDumpOptions() throws ConfigurationUnavailableException;\n \n \t/**\n-\t * Returns the current dump configuration as an array of Strings.\n+\t * Returns the current dump configuration as an array of Strings, or null if an internal error occurs.\n \t * The syntax of the option Strings is the same as the -Xdump command-line option,\n \t * with the initial -Xdump: omitted. See the -Xdump option section on dump agents in\n \t * the documentation for the OpenJ9 JVM.\n \t *\n \t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to read the dump settings\n \t */\n-\tpublic String[] queryDumpOptions() throws InvalidOptionException, ConfigurationUnavailableException;\n+\tpublic String[] queryDumpOptions();\n \n \t/**\n \t * This function sets options for the dump subsystem.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIxNzA1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514217055", "bodyText": "While you're fixing inconsistencies in indentation, please fix all of them.", "author": "keithc-ca", "createdAt": "2020-10-29T12:24:07Z", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -627,10 +627,10 @@ public static void setDumpOptions(String dumpOptions) throws InvalidDumpOptionEx\n     }\n     \n     /**", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\nindex 40151aa25..03071c2e8 100644\n--- a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n+++ b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n\n@@ -626,7 +626,7 @@ public class Dump {\n \t\t}\n     }\n     \n-    /**\n+\t/**\n \t * Returns the current dump configuration as an array of Strings.\n \t * The syntax of the option Strings is the same as the -Xdump command-line option,\n \t * with the initial -Xdump: omitted. See the -Xdump option\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTA4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514229086", "bodyText": "This might return null which is not documented.", "author": "keithc-ca", "createdAt": "2020-10-29T12:44:30Z", "path": "jcl/src/jdk.management/share/classes/openj9/lang/management/internal/OpenJ9DiagnosticsMXBeanImpl.java", "diffHunk": "@@ -111,6 +112,23 @@ public void resetDumpOptions() throws ConfigurationUnavailableException {\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic String[] queryDumpOptions() {\n+\t\tcheckManagementSecurityPermission();\n+\t\ttry {\n+\t\t\t/*[IF Sidecar19-SE]*/ if (2 > 1) {\n+\t\t\treturn (String[])dump_queryDumpOptions.invoke(null);", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MzkxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514363912", "bodyText": "It shouldn't ever return null, I think that only occurs if there is a programming error. Added , or null if an internal error occurs. to cover that case.", "author": "pshipton", "createdAt": "2020-10-29T15:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyOTA4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzODYyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514238627", "bodyText": "No trailing whitespace, please (lines 264 & 270).", "author": "keithc-ca", "createdAt": "2020-10-29T12:59:41Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -252,8 +252,38 @@ private void testLocal_setDumpOptions() throws InvalidOptionException, Configura\n \t\tString dir = \".\" + File.separator + \"local\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBean.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBean.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n+\t\t\t}\n+\t\t}\n+\t\t\n \t\tdiagBean.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n+\n+\t\tboolean optionFound = false;\n+\t\tString[] options = diagBean.queryDumpOptions();\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately ", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\nindex 79d8ac4d1..80c9abe0b 100644\n--- a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n+++ b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n\n@@ -261,13 +261,13 @@ public class TestOpenJ9DiagnosticsMXBean {\n \t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tdiagBean.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \n \t\tboolean optionFound = false;\n \t\tString[] options = diagBean.queryDumpOptions();\n \t\tfor (String option : options) {\n-\t\t\t// The options get reordered and defaults added, check parts separately \n+\t\t\t// The options get reordered and defaults added, check parts separately\n \t\t\tif (option.startsWith(\"java:events=allocation,\") &&\n \t\t\t\toption.contains(\",filter=#1k\") &&\n \t\t\t\toption.contains(\",range=1..1\") &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0MzIwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514243204", "bodyText": "nit: space after :", "author": "keithc-ca", "createdAt": "2020-10-29T13:06:57Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\nindex 79d8ac4d1..80c9abe0b 100644\n--- a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n+++ b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n\n@@ -375,7 +375,7 @@ public class TestOpenJ9DiagnosticsMXBean {\n \t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n \t\tfor (String option : resetOptions) {\n \t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n-\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0Mzk2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514243961", "bodyText": "trailing whitespace", "author": "keithc-ca", "createdAt": "2020-10-29T13:08:10Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately ", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\nindex 79d8ac4d1..80c9abe0b 100644\n--- a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n+++ b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n\n@@ -375,7 +375,7 @@ public class TestOpenJ9DiagnosticsMXBean {\n \t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n \t\tfor (String option : resetOptions) {\n \t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n-\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0NDUxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514244516", "bodyText": "Please indent consistently (like 392-399, above).", "author": "keithc-ca", "createdAt": "2020-10-29T13:09:05Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately \n+\t\t\tif (option.startsWith(\"java:events=allocation,\") &&\n+\t\t\t\toption.contains(\",filter=#1k\") &&\n+\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\toption.contains(dumpFilePath)\n+\t\t\t) {\n+\t\t\t\tallocOptionFound = true;\n+\t\t\t\tif (catchOptionFound) break;\n+\t\t\t}\n+\t\t\tif (option.startsWith(\"java:events=catch,\") &&\n+\t\t\t\t\toption.contains(\",filter=java/io/UnsupportedEncodingException\") &&\n+\t\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\t\toption.contains(catchDumpFilePath)\n+\t\t\t\t) {\n+\t\t\t\t\tcatchOptionFound = true;\n+\t\t\t\t\tif (allocOptionFound) break;\n+\t\t\t\t}", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\nindex 79d8ac4d1..80c9abe0b 100644\n--- a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n+++ b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n\n@@ -375,7 +375,7 @@ public class TestOpenJ9DiagnosticsMXBean {\n \t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n \t\tfor (String option : resetOptions) {\n \t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n-\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI0NDY1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514244659", "bodyText": "trailing whitespace", "author": "keithc-ca", "createdAt": "2020-10-29T13:09:18Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java", "diffHunk": "@@ -339,11 +369,50 @@ private void testRemote_setDumpOptions() throws InvalidOptionException, Configur\n \t\tString dir = \".\" + File.separator + \"remote\";\n \t\tString dumpFileName = \"javacore_alloc.txt\";\n \t\tString dumpFilePath = dir + File.separator + dumpFileName;\n+\n \t\tdiagBeanRemote.resetDumpOptions();\n+\n+\t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n+\t\tfor (String option : resetOptions) {\n+\t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n+\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t}\n+\t\t}\n+\n \t\tdiagBeanRemote.setDumpOptions(\"java:events=allocation,filter=#1k,range=1..1,file=\" + dumpFilePath);\n \t\tdumpFileName = \"javacore_unsupported.txt\";\n-\t\tdumpFilePath = dir + File.separator + dumpFileName;\n-\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + dumpFilePath);\n+\t\tString catchDumpFilePath = dir + File.separator + dumpFileName;\n+\t\tdiagBeanRemote.setDumpOptions(\"java:events=catch,filter=java/io/UnsupportedEncodingException,range=1..1,file=\" + catchDumpFilePath);\n+\n+\t\tString[] options = diagBeanRemote.queryDumpOptions();\n+\t\tboolean allocOptionFound = false;\n+\t\tboolean catchOptionFound = false;\n+\t\tfor (String option : options) {\n+\t\t\t// The options get reordered and defaults added, check parts separately \n+\t\t\tif (option.startsWith(\"java:events=allocation,\") &&\n+\t\t\t\toption.contains(\",filter=#1k\") &&\n+\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\toption.contains(dumpFilePath)\n+\t\t\t) {\n+\t\t\t\tallocOptionFound = true;\n+\t\t\t\tif (catchOptionFound) break;\n+\t\t\t}\n+\t\t\tif (option.startsWith(\"java:events=catch,\") &&\n+\t\t\t\t\toption.contains(\",filter=java/io/UnsupportedEncodingException\") &&\n+\t\t\t\t\toption.contains(\",range=1..1\") &&\n+\t\t\t\t\toption.contains(catchDumpFilePath)\n+\t\t\t\t) {\n+\t\t\t\t\tcatchOptionFound = true;\n+\t\t\t\t\tif (allocOptionFound) break;\n+\t\t\t\t}\n+\t\t}\n+\t\tif (!allocOptionFound || !catchOptionFound) {\n+\t\t\tfor (String option : options) {\n+\t\t\t\tSystem.out.println(option);\n+\t\t\t}\n+\t\t\tAssert.fail(\"Failed to find expected dump options\");\n+\t\t}\n+\t\t", "originalCommit": "3ad56b3958fc19b352ad7cbe243047e7aeadaf54", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "chunk": "diff --git a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\nindex 79d8ac4d1..80c9abe0b 100644\n--- a/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n+++ b/test/functional/JLM_Tests/src/org/openj9/test/java/lang/management/TestOpenJ9DiagnosticsMXBean.java\n\n@@ -375,7 +375,7 @@ public class TestOpenJ9DiagnosticsMXBean {\n \t\tString[] resetOptions = diagBeanRemote.queryDumpOptions();\n \t\tfor (String option : resetOptions) {\n \t\t\tif (option.startsWith(\"java:events=allocation\") || option.startsWith(\"java:events=catch\")) {\n-\t\t\t\tAssert.fail(\"Found unexpected dump option:\" + option);\n+\t\t\t\tAssert.fail(\"Found unexpected dump option: \" + option);\n \t\t\t}\n \t\t}\n \n"}}, {"oid": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "url": "https://github.com/eclipse-openj9/openj9/commit/1f5615bb77f7b59f34dda8c092cfec5ec8251183", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-29T15:47:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NjQ2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514396463", "bodyText": "I'm not sure why you modified these two lines, but there's a strange mix of indentation styles:\n\n384 starts with 4 spaces and a tab\n385 & 386 start with a tab, a space and a tab\n\nMaybe we should defer cleaning up that mess?", "author": "keithc-ca", "createdAt": "2020-10-29T16:28:06Z", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -382,8 +382,8 @@ public static String systemDumpToFile(String fileNamePattern) throws InvalidDump\n     \t\trequest = \"system\"; //$NON-NLS-1$\n     \t}\n     \tString dump = null;\n-       \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n-       \treturn dump;\n+\t \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n+\t \treturn dump;", "originalCommit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMDY3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514420675", "bodyText": "Tried again, please see the latest update.", "author": "pshipton", "createdAt": "2020-10-29T17:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5NjQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8b20918e8446da8500959a4a1d44872ff1b771c5", "chunk": "diff --git a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\nindex 03071c2e8..2c7f803a5 100644\n--- a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n+++ b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n\n@@ -359,67 +359,67 @@ public class Dump {\n \t *  to write the dump to another location, unless -Xdump:nofailover was specified on\n \t *  the command line.</li>\n \t * </ul>\n-\t * \n+\t *\n \t * If a security manager exists a permission check for com.ibm.jvm.DumpPermission will be\n \t * made, if this fails a SecurityException will be thrown.\n-\t * \n+\t *\n \t * @param fileNamePattern the file name to write to, which may be null, empty or include replacement tokens\n \t * @return the file name that the dump was actually written to\n \t * @throws InvalidDumpOptionException if the filename was invalid\n \t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to trigger this dump\n \t */\n-    public static String systemDumpToFile(String fileNamePattern) throws InvalidDumpOptionException {\n-    \tString request = null;\n-    \tif( \"\".equals(fileNamePattern) ) { //$NON-NLS-1$\n-    \t\tfileNamePattern = null;\n-    \t}\n-    \tif( fileNamePattern != null ) {\n-    \t\t// Check no-one has tried to sneak options onto the end.\n-    \t\tcheckForExtraOptions(fileNamePattern);\n-    \t\trequest = SystemRequestPrefix + fileNamePattern;\n-    \t} else {\n-    \t\t// This is equivalent the to SystemDump() call.\n-    \t\trequest = \"system\"; //$NON-NLS-1$\n-    \t}\n-    \tString dump = null;\n-\t \tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n-\t \treturn dump;\n-    }\n-    \n+\tpublic static String systemDumpToFile(String fileNamePattern) throws InvalidDumpOptionException {\n+\t\tString request = null;\n+\t\tif( \"\".equals(fileNamePattern) ) { //$NON-NLS-1$\n+\t\t\tfileNamePattern = null;\n+\t\t}\n+\t\tif( fileNamePattern != null ) {\n+\t\t\t// Check no-one has tried to sneak options onto the end.\n+\t\t\tcheckForExtraOptions(fileNamePattern);\n+\t\t\trequest = SystemRequestPrefix + fileNamePattern;\n+\t\t} else {\n+\t\t\t// This is equivalent the to SystemDump() call.\n+\t\t\trequest = \"system\"; //$NON-NLS-1$\n+\t\t}\n+\t\tString dump = null;\n+\t\tdump = triggerDump(request, \"systemDumpToFile\"); //$NON-NLS-1$\n+\t\treturn dump;\n+\t}\n+\n \t/**\n \t * Trigger a system dump. A system dump is a platform-specific\n \t * file that contains information about the active processes, threads, and\n \t * system memory. System dumps are usually large.\n-\t * \n+\t *\n \t * The JVM will attempt to write the file to the default location.\n-\t * \n+\t *\n \t * A string containing the actual file name written to is returned.\n-\t * \n+\t *\n \t * If a security manager exists a permission check for com.ibm.jvm.DumpPermission will be\n \t * made, if this fails a SecurityException will be thrown.\n-\t * \n+\t *\n \t * @return the file name that the dump was actually written to\n \t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to trigger this dump\n \t */\n-    public static String systemDumpToFile() {\n-     \ttry {\n-    \t\treturn triggerDump(\"system\", \"systemDumpToFile\"); //$NON-NLS-1$ //$NON-NLS-2$\n-    \t} catch (InvalidDumpOptionException e) {\n-    \t\t// Cannot actually be thrown, since we aren't specifying anything other than a known dump type.\n-    \t\t// Prevent the user having to add a catch block to their call.\n-    \t\treturn null;\n-    \t}\n-    }\n-    \n-    /**\n-     * Trigger a snap dump. The snap dump format is not human-readable\n-     * and must be processed using the trace formatting tool supplied\n-     * with the OpenJ9 JVM.\n-\t * \n+\tpublic static String systemDumpToFile() {\n+\t\ttry {\n+\t\t\treturn triggerDump(\"system\", \"systemDumpToFile\"); //$NON-NLS-1$ //$NON-NLS-2$\n+\t\t} catch (InvalidDumpOptionException e) {\n+\t\t\t// Cannot actually be thrown, since we aren't specifying anything other than a known dump type.\n+\t\t\t// Prevent the user having to add a catch block to their call.\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Trigger a snap dump. The snap dump format is not human-readable\n+\t * and must be processed using the trace formatting tool supplied\n+\t * with the OpenJ9 JVM.\n+\t *\n \t * The JVM will attempt to write the file to the specified file name. This may\n \t * include replacement tokens as documented in the section on dump agents\n \t * in the documentation for the OpenJ9 JVM.\n-\t * \n+\t *\n \t * A string containing the actual file name written to is returned. This may not\n \t * be the same as the requested filename for several reasons:\n \t * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5Njg5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514396891", "bodyText": "nit: double space before 'the'", "author": "keithc-ca", "createdAt": "2020-10-29T16:28:39Z", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java", "diffHunk": "@@ -575,10 +575,10 @@ private static String triggerDump(String dumpSettings, String event) throws Inva\n \t}\n \n \t/**\n-     * Sets options for the dump subsystem.\n-     * The dump option is passed in as an String.\n-     * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n-     * See Using the -Xdump option as described in the section on dump agents\n+\t * Sets options for the dump subsystem.\n+\t * The dump option is passed in as an String.\n+\t * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n+\t * See  the -Xdump option section on dump agents", "originalCommit": "1f5615bb77f7b59f34dda8c092cfec5ec8251183", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMDc0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11016#discussion_r514420742", "bodyText": "Fixed.", "author": "pshipton", "createdAt": "2020-10-29T17:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5Njg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b20918e8446da8500959a4a1d44872ff1b771c5", "chunk": "diff --git a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\nindex 03071c2e8..2c7f803a5 100644\n--- a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n+++ b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Dump.java\n\n@@ -578,41 +578,41 @@ public class Dump {\n \t * Sets options for the dump subsystem.\n \t * The dump option is passed in as an String.\n \t * Use the same syntax as the -Xdump command-line option, with the initial -Xdump: omitted.\n-\t * See  the -Xdump option section on dump agents\n+\t * See the -Xdump option section on dump agents\n \t * in the documentation for the OpenJ9 JVM.\n-\t * \n+\t *\n \t * This method may throw a DumpConfigurationUnavailableException if the dump configuration\n-\t * cannot be altered. If this occurs it will usually be because a dump event is currently \n+\t * cannot be altered. If this occurs it will usually be because a dump event is currently\n \t * being handled. As this can take some time depending on the dumps being generated an\n \t * exception is thrown rather than this call blocking the calling thread potentially for\n-\t * minutes. \n-\t * \n+\t * minutes.\n+\t *\n \t * If a security manager exists a permission check for com.ibm.jvm.DumpPermission will be\n \t * made, if this fails a SecurityException will be thrown. If a \"tool\" dump is specified an\n \t * additional check for com.ibm.jvm.ToolDumpPermission will also be made.\n-\t * \n-     * @param dumpOptions the options string to set \n-     * @throws InvalidDumpOptionException if the specified option cannot be set or is incorrect\n-     * @throws DumpConfigurationUnavailableException If the dump configuration cannot be changed because a dump is currently in progress\n-     * @throws SecurityException if there is a security manager and it doesn't allow the checks required to change the dump settings\n-     * @throws NullPointerException if options is null\n-     */\n-    public static void setDumpOptions(String dumpOptions) throws InvalidDumpOptionException, DumpConfigurationUnavailableException {\t\n+\t *\n+\t * @param dumpOptions the options string to set\n+\t * @throws InvalidDumpOptionException if the specified option cannot be set or is incorrect\n+\t * @throws DumpConfigurationUnavailableException If the dump configuration cannot be changed because a dump is currently in progress\n+\t * @throws SecurityException if there is a security manager and it doesn't allow the checks required to change the dump settings\n+\t * @throws NullPointerException if options is null\n+\t */\n+\tpublic static void setDumpOptions(String dumpOptions) throws InvalidDumpOptionException, DumpConfigurationUnavailableException {\n \n \t\t/* Check the caller is allowed to trigger a dump. */\n-    \tcheckDumpSecurityPermssion();\n-    \t\n+\t\tcheckDumpSecurityPermssion();\n+\n \t\tif (isToolDump(dumpOptions)) {\n \t\t\tcheckToolSecurityPermssion();\n \t\t}\n-\t\t\n+\n \t\tif( dumpOptions == null ) {\n \t\t\tthrow new NullPointerException();\n \t\t}\n-\t\t\n+\n \t\t/* Synchronised to prevent two Java threads trying to set/reset dump settings at once.\n \t\t * resetDumpOptionsImpl is also synchronised in this way.\n-\t\t * A DumpConfigurationUnavailableException can still be thrown if a dump was in \n+\t\t * A DumpConfigurationUnavailableException can still be thrown if a dump was in\n \t\t * progress and the dump configuration could not be updated.\n \t\t */\n \t\ttry {\n"}}, {"oid": "8b20918e8446da8500959a4a1d44872ff1b771c5", "url": "https://github.com/eclipse-openj9/openj9/commit/8b20918e8446da8500959a4a1d44872ff1b771c5", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-29T17:00:28Z", "type": "forcePushed"}, {"oid": "b724b244b7d1fee83af8099ef5fcded3725805f7", "url": "https://github.com/eclipse-openj9/openj9/commit/b724b244b7d1fee83af8099ef5fcded3725805f7", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-29T17:03:36Z", "type": "commit"}, {"oid": "b724b244b7d1fee83af8099ef5fcded3725805f7", "url": "https://github.com/eclipse-openj9/openj9/commit/b724b244b7d1fee83af8099ef5fcded3725805f7", "message": "Add OpenJ9DiagnosticsMXBean queryDumpOptions() and tests\n\nReplace test modes Mode100, Mode101 with NoOptions, otherwise the test\nonly runs in XL mode. Using these modes is historic and unnecessary.\n\nMy original plan was to add a getter to correspond with\nsetDumpOptions(), however the Dump.queryDumpOptions() API returns a\nString[] containing the entire -Xdump configuration, like follows. Using\nthe name getDumpOptions() in the MXBean results in\n`javax.management.NotCompliantMBeanException: Getter and setter for\nDumpOptions have inconsistent types`.\n```\nsystem:events=gpf+abort+traceassert+corruptcache,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..0,priority=999,request=serial\nsystem:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/core.%Y%m%d.%H%M%S.%pid.%seq.dmp,range=1..1,priority=999,request=exclusive+compact+prepwalk\nheap:events=systhrow,filter=java/lang/OutOfMemoryError,file=/home/peter/heapdump.%Y%m%d.%H%M%S.%pid.%seq.phd,range=1..4,priority=500,request=exclusive+compact+prepwalk,opts=PHD\netc.\n```\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-29T17:03:36Z", "type": "forcePushed"}]}