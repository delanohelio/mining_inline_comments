{"pr_number": 11251, "pr_title": "Rewrite opt for combining consecutive byte loads", "pr_createdAt": "2020-11-23T21:33:42Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11251", "timeline": [{"oid": "9f671e8df35fda1f9bbe965b4342651d8d26adcd", "url": "https://github.com/eclipse-openj9/openj9/commit/9f671e8df35fda1f9bbe965b4342651d8d26adcd", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nMoved sequentialStoreSimplification out of Optimizations.enum to OMR where it\nis used for the tracing option.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2020-11-23T21:35:42Z", "type": "forcePushed"}, {"oid": "33ba8dd8987396ac4824237c0e44a340db9f7ec0", "url": "https://github.com/eclipse-openj9/openj9/commit/33ba8dd8987396ac4824237c0e44a340db9f7ec0", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nMoved sequentialStoreSimplification out of Optimizations.enum to OMR where it\nis used for the tracing option.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2020-11-23T21:38:49Z", "type": "forcePushed"}, {"oid": "f9fdc3f62f8d471f3b9d6d479cbfdb6c25f8694b", "url": "https://github.com/eclipse-openj9/openj9/commit/f9fdc3f62f8d471f3b9d6d479cbfdb6c25f8694b", "message": "Changed handling of multValue\n\nChanged getMultValueForSeqLoad to getShiftValueForSeqLoad.\n\nLoop that looks for duplicate multValues and orders the loaded bytes is no\nlonger a loop and is now based on shiftValue.\n\nAdded more comments.\nCleaned up the code.", "committedDate": "2020-12-16T21:24:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzNjgyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11251#discussion_r545436823", "bodyText": "Does this need to be in its own directory? Do we envision adding more files here? If not we should move it out.\nGreat set of tests by the way! Readers take note.", "author": "fjeremic", "createdAt": "2020-12-17T22:11:57Z", "path": "test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplification/SeqLoadSimplificationTest.java", "diffHunk": "@@ -0,0 +1,935 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package jit.test.tr.SeqLoadSimplification;", "originalCommit": "a618a71d2d0500f0c10d984a3a8d5cbb906937a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0MzA3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11251#discussion_r546043075", "bodyText": "Thanks.\nI don't expect to add more files here. However, I don't really see a better place to put it. I tried looking at other tests to see how they organize their files but a lot of them are single files in a directory as well.", "author": "IBMJimmyk", "createdAt": "2020-12-18T19:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzNjgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDAzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11251#discussion_r551564030", "bodyText": "Can we simply move SeqLoadSimplificationTest.java into test/functional/JIT_Test/src/jit/test/tr/?", "author": "fjeremic", "createdAt": "2021-01-04T20:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzNjgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2OTY2Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11251#discussion_r552169662", "bodyText": "Yes, that's possible. In my latest changed I've now moved it out.", "author": "IBMJimmyk", "createdAt": "2021-01-05T20:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQzNjgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0de68e1a4d0bd713784dd10190c623674f5a443b", "chunk": "diff --git a/test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplification/SeqLoadSimplificationTest.java b/test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplificationTest.java\nsimilarity index 99%\nrename from test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplification/SeqLoadSimplificationTest.java\nrename to test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplificationTest.java\nindex e39215fc9..46b80776e 100644\n--- a/test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplification/SeqLoadSimplificationTest.java\n+++ b/test/functional/JIT_Test/src/jit/test/tr/SeqLoadSimplificationTest.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2020, 2020 IBM Corp. and others\n+ * Copyright (c) 2021, 2021 IBM Corp. and others\n  *\n  * This program and the accompanying materials are made available under\n  * the terms of the Eclipse Public License 2.0 which accompanies this\n"}}, {"oid": "0de68e1a4d0bd713784dd10190c623674f5a443b", "url": "https://github.com/eclipse-openj9/openj9/commit/0de68e1a4d0bd713784dd10190c623674f5a443b", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nAdded tests to exercise the combining of sequential byte loads in the\nsequentialStoreSimplification optimization.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2021-02-23T20:02:23Z", "type": "forcePushed"}, {"oid": "dcf375449c199e2e464d22eb032b5a004affe284", "url": "https://github.com/eclipse-openj9/openj9/commit/dcf375449c199e2e464d22eb032b5a004affe284", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nAdded tests to exercise the combining of sequential byte loads in the\nsequentialStoreSimplification optimization.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2021-04-12T14:21:00Z", "type": "forcePushed"}, {"oid": "82c9e09932a5fd11b5d9fd327545ddbdf31f8b90", "url": "https://github.com/eclipse-openj9/openj9/commit/82c9e09932a5fd11b5d9fd327545ddbdf31f8b90", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nAdded tests to exercise the combining of sequential byte loads in the\nsequentialStoreSimplification optimization.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2021-04-22T03:42:43Z", "type": "forcePushed"}, {"oid": "a88a744eaea97913c5361585bf24f7bd4c9d0217", "url": "https://github.com/eclipse-openj9/openj9/commit/a88a744eaea97913c5361585bf24f7bd4c9d0217", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nAdded tests to exercise the combining of sequential byte loads in the\nsequentialStoreSimplification optimization.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2021-05-13T16:56:43Z", "type": "commit"}, {"oid": "a88a744eaea97913c5361585bf24f7bd4c9d0217", "url": "https://github.com/eclipse-openj9/openj9/commit/a88a744eaea97913c5361585bf24f7bd4c9d0217", "message": "Rewrite opt for combining consecutive byte loads\n\nChanges were made inside the sequentialStoreSimplification. Despite the name\nof the optimization, the changes are targeted at sequential loads.\n\nRewrote the optimization that identifies byte loads from conseuctive memory\naddresses and replaces them with a wider load such as an iload or lload. The\nnew version greatly expands the number of tree patterns indentified by the\noptimization. The new wide load optimization works with 2-8 consecutive byte\nloads and in both big and little endian order.\n\nThe original version of the opt is still available under the env var\nTR_UseOldSeqLoadOpt.\n\nMoved sequentialStoreSimplificationGroup later in the optimization order so\nthat the trees are more likely to be in the right shape for the optimization.\n\nAdded tests to exercise the combining of sequential byte loads in the\nsequentialStoreSimplification optimization.\n\nCloses: #11250\nSigned-off-by: jimmyk <jimmyk@ca.ibm.com>", "committedDate": "2021-05-13T16:56:43Z", "type": "forcePushed"}]}