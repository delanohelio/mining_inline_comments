{"pr_number": 9813, "pr_title": "DDR Back compatible for TLH enable/disable change", "pr_createdAt": "2020-06-05T23:27:39Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9813", "timeline": [{"oid": "cc658117b3a0f879cd002654bb3744c82137b04f", "url": "https://github.com/eclipse-openj9/openj9/commit/cc658117b3a0f879cd002654bb3744c82137b04f", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-08T19:58:36Z", "type": "forcePushed"}, {"oid": "71f3b340e61f9831696435d446c898d7bc0bb50e", "url": "https://github.com/eclipse-openj9/openj9/commit/71f3b340e61f9831696435d446c898d7bc0bb50e", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-08T20:01:45Z", "type": "forcePushed"}, {"oid": "dcd1241ac373cd30ea7818a74fb98f1db7dd4da8", "url": "https://github.com/eclipse-openj9/openj9/commit/dcd1241ac373cd30ea7818a74fb98f1db7dd4da8", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-08T20:20:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMDM4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437010380", "bodyText": "This won't compile: there's no (generated) method named realHeapAlloc in current builds.", "author": "keithc-ca", "createdAt": "2020-06-08T21:25:25Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -137,7 +131,20 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;\n+\t\tif (nonZeroTLH) {\n+\t\t\trealHeapAlloc = adjustedToRange(vmThread.nonZeroAllocateThreadLocalHeap().realHeapAlloc(), base, top);\n+\t\t} else {\n+\t\t\trealHeapAlloc = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapAlloc(), base, top);", "originalCommit": "dcd1241ac373cd30ea7818a74fb98f1db7dd4da8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab6a3c1a3e2e7e1e97e76e81d9d8883002376d7a", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 4e9334391..8d328a577 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -132,16 +134,26 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapAlloc = null;\n-\t\tif (nonZeroTLH) {\n-\t\t\trealHeapAlloc = adjustedToRange(vmThread.nonZeroAllocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t} else {\n-\t\t\trealHeapAlloc = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t}\n-\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\tMethod method = null;\n+\t\ttry {\n+\t\t\tif (nonZeroTLH) {\n+\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange(method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n+\t\t\t} else {\n+\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange(method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n+\t\t\t}\n+\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n+\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\t}\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t} catch (CorruptDataException e5) {\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMTY2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437011661", "bodyText": "This must declare that it throws CorruptDataException.", "author": "keithc-ca", "createdAt": "2020-06-08T21:28:13Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -137,7 +131,20 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)", "originalCommit": "dcd1241ac373cd30ea7818a74fb98f1db7dd4da8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab6a3c1a3e2e7e1e97e76e81d9d8883002376d7a", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 4e9334391..8d328a577 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -132,16 +134,26 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapAlloc = null;\n-\t\tif (nonZeroTLH) {\n-\t\t\trealHeapAlloc = adjustedToRange(vmThread.nonZeroAllocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t} else {\n-\t\t\trealHeapAlloc = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapAlloc(), base, top);\n-\t\t}\n-\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\tMethod method = null;\n+\t\ttry {\n+\t\t\tif (nonZeroTLH) {\n+\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange(method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n+\t\t\t} else {\n+\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange(method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n+\t\t\t}\n+\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n+\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\t}\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t} catch (CorruptDataException e5) {\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMjM2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437012364", "bodyText": "This must declare that it throws CorruptDataException.", "author": "keithc-ca", "createdAt": "2020-06-08T21:29:54Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 1991, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package com.ibm.j9ddr.vm29.j9.gc;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.vm29.pointer.U8Pointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9VMThreadPointer;\n+\n+import java.util.ArrayList;\n+\n+class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddressOrderedList_V1 {\n+\n+\tprotected GCObjectHeapIteratorAddressOrderedList_V2(U8Pointer base, U8Pointer top, boolean includeLiveObjects, boolean includeDeadObjects) throws CorruptDataException\n+\t{\n+\t\tsuper(base, top, includeLiveObjects, includeDeadObjects);\n+\t}\n+\n+\t@Override\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)", "originalCommit": "dcd1241ac373cd30ea7818a74fb98f1db7dd4da8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab6a3c1a3e2e7e1e97e76e81d9d8883002376d7a", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\nindex d0006ddae..d4670840d 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n\n@@ -35,7 +35,7 @@ class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddr\n \t}\n \n \t@Override\n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList)\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapTop = null;\n \t\tif (nonZeroTLH) {\n"}}, {"oid": "ab6a3c1a3e2e7e1e97e76e81d9d8883002376d7a", "url": "https://github.com/eclipse-openj9/openj9/commit/ab6a3c1a3e2e7e1e97e76e81d9d8883002376d7a", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-08T22:31:37Z", "type": "forcePushed"}, {"oid": "447d3598915f312d770dffea739c119bf4ad55cc", "url": "https://github.com/eclipse-openj9/openj9/commit/447d3598915f312d770dffea739c119bf4ad55cc", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T13:37:16Z", "type": "forcePushed"}, {"oid": "69163e412aec7b386c75577c3062ebde7991bc69", "url": "https://github.com/eclipse-openj9/openj9/commit/69163e412aec7b386c75577c3062ebde7991bc69", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T14:35:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MDMxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437540313", "bodyText": "I suggest the first two parameters be replaced by J9ModronThreadLocalHeapPointer heap and the callers can\nprovide  vmThread.nonZeroAllocateThreadLocalHeap() or vmThread.allocateThreadLocalHeap() as appropriate.\nEven better, extract (and only override) a method that only accesses realHeapAlloc or realHeapTop as appropriate: the call to adjustedToRange and all that follows is common to both cases.", "author": "keithc-ca", "createdAt": "2020-06-09T15:53:58Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -137,8 +133,31 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException", "originalCommit": "69163e412aec7b386c75577c3062ebde7991bc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0844cf54c4de5883c98814ccd2a605c4d8307477", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 2b8832a90..b80c32298 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -134,27 +144,29 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapAlloc = null;\n-\t\tMethod method = null;\n \t\ttry {\n-\t\t\tif (nonZeroTLH) {\n-\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n-\t\t\t} else {\n-\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n-\t\t\t}\n-\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n+\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n \t\t} catch (NoSuchMethodException e1) {\n+\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n \t\t} catch (IllegalAccessException e2) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n \t\t} catch (IllegalArgumentException e3) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n \t\t} catch (InvocationTargetException e4) {\n-\t\t} catch (CorruptDataException e5) {\n+\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n \t\t}\n+\t\treturn realHeapAlloc;\n \t}\n \n \tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MTAyNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437541025", "bodyText": "This should cache the method rather than query for it each time.", "author": "keithc-ca", "createdAt": "2020-06-09T15:55:02Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -137,8 +133,31 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;\n+\t\tMethod method = null;\n+\t\ttry {\n+\t\t\tif (nonZeroTLH) {\n+\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n+\t\t\t} else {\n+\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");", "originalCommit": "69163e412aec7b386c75577c3062ebde7991bc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0844cf54c4de5883c98814ccd2a605c4d8307477", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 2b8832a90..b80c32298 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -134,27 +144,29 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapAlloc = null;\n-\t\tMethod method = null;\n \t\ttry {\n-\t\t\tif (nonZeroTLH) {\n-\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n-\t\t\t} else {\n-\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n-\t\t\t}\n-\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n+\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n \t\t} catch (NoSuchMethodException e1) {\n+\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n \t\t} catch (IllegalAccessException e2) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n \t\t} catch (IllegalArgumentException e3) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n \t\t} catch (InvocationTargetException e4) {\n-\t\t} catch (CorruptDataException e5) {\n+\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n \t\t}\n+\t\treturn realHeapAlloc;\n \t}\n \n \tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MjA5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437542099", "bodyText": "None of these exceptions should be ignored.\nCorruptDataException should not be caught.\nInvocationTargetException should be handled by throwing the target exception (which might be CorruptDataException).", "author": "keithc-ca", "createdAt": "2020-06-09T15:56:36Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -137,8 +133,31 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;\n+\t\tMethod method = null;\n+\t\ttry {\n+\t\t\tif (nonZeroTLH) {\n+\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n+\t\t\t} else {\n+\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n+\t\t\t}\n+\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n+\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\t}\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t} catch (CorruptDataException e5) {", "originalCommit": "69163e412aec7b386c75577c3062ebde7991bc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0844cf54c4de5883c98814ccd2a605c4d8307477", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 2b8832a90..b80c32298 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -134,27 +144,29 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n \t{\n \t\tU8Pointer realHeapAlloc = null;\n-\t\tMethod method = null;\n \t\ttry {\n-\t\t\tif (nonZeroTLH) {\n-\t\t\t\tmethod = vmThread.nonZeroAllocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.nonZeroAllocateThreadLocalHeap()), base, top);\n-\t\t\t} else {\n-\t\t\t\tmethod = vmThread.allocateThreadLocalHeap().getClass().getMethod(\"realHeapAlloc\");\n-\t\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(vmThread.allocateThreadLocalHeap()), base, top);\n-\t\t\t}\n-\t\t\tif(realHeapAlloc.notNull() && isSomethingToAdd(realHeapAlloc, heapTop)) {\n-\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, heapTop});\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n+\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n \t\t} catch (NoSuchMethodException e1) {\n+\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n \t\t} catch (IllegalAccessException e2) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n \t\t} catch (IllegalArgumentException e3) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n \t\t} catch (InvocationTargetException e4) {\n-\t\t} catch (CorruptDataException e5) {\n+\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n \t\t}\n+\t\treturn realHeapAlloc;\n \t}\n \n \tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0NDUyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437544521", "bodyText": "This change is not needed if the changes suggested above are implemented.", "author": "keithc-ca", "createdAt": "2020-06-09T16:00:02Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -150,8 +169,8 @@ private U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n \t\t}\n \t\treturn result;\n \t}\n-\n-\tprivate boolean isSomethingToAdd (U8Pointer start, U8Pointer end) throws CorruptDataException\n+\t\n+\tprotected boolean isSomethingToAdd (U8Pointer start, U8Pointer end) throws CorruptDataException", "originalCommit": "69163e412aec7b386c75577c3062ebde7991bc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0844cf54c4de5883c98814ccd2a605c4d8307477", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 2b8832a90..b80c32298 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -170,7 +182,7 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\treturn result;\n \t}\n \t\n-\tprotected boolean isSomethingToAdd (U8Pointer start, U8Pointer end) throws CorruptDataException\n+\tprivate boolean isSomethingToAdd (U8Pointer start, U8Pointer end) throws CorruptDataException\n \t{\n \t\tboolean result = false;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1MzIzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437553237", "bodyText": "Based on the suggestions above, this should simplify to:\n\t@Override\n\tprotected U8Pointer getHeapTop(J9ModronThreadLocalHeapPointer heap) throws CorruptDataException\n\t{\n\t\treturn heap.realHeapTop();\n\t}", "author": "keithc-ca", "createdAt": "2020-06-09T16:13:11Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 1991, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package com.ibm.j9ddr.vm29.j9.gc;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.vm29.pointer.U8Pointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9VMThreadPointer;\n+\n+import java.util.ArrayList;\n+\n+class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddressOrderedList_V1 {\n+\n+\tprotected GCObjectHeapIteratorAddressOrderedList_V2(U8Pointer base, U8Pointer top, boolean includeLiveObjects, boolean includeDeadObjects) throws CorruptDataException\n+\t{\n+\t\tsuper(base, top, includeLiveObjects, includeDeadObjects);\n+\t}\n+\n+\t@Override\n+\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapTop = null;\n+\t\tif (nonZeroTLH) {\n+\t\t\trealHeapTop = adjustedToRange(vmThread.nonZeroAllocateThreadLocalHeap().realHeapTop(), base, top);\n+\t\t} else {\n+\t\t\trealHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);\n+\t\t}\n+\t\tif(realHeapTop.notNull() && isSomethingToAdd(heapAlloc, realHeapTop)) {\n+\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, realHeapTop});\n+\t\t}\n+\t}", "originalCommit": "69163e412aec7b386c75577c3062ebde7991bc69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0844cf54c4de5883c98814ccd2a605c4d8307477", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\nindex d4670840d..14078ceec 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n\n@@ -35,17 +35,14 @@ class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddr\n \t}\n \n \t@Override\n-\tprotected void addExcludedRangeForDisablingTLHOrSamplingCase(boolean nonZeroTLH, J9VMThreadPointer vmThread, U8Pointer base, U8Pointer top, U8Pointer heapAlloc, U8Pointer heapTop, ArrayList<U8Pointer[]> excludedRangeList) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n \t{\n-\t\tU8Pointer realHeapTop = null;\n-\t\tif (nonZeroTLH) {\n-\t\t\trealHeapTop = adjustedToRange(vmThread.nonZeroAllocateThreadLocalHeap().realHeapTop(), base, top);\n-\t\t} else {\n-\t\t\trealHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);\n-\t\t}\n-\t\tif(realHeapTop.notNull() && isSomethingToAdd(heapAlloc, realHeapTop)) {\n-\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, realHeapTop});\n-\t\t}\n+\t\treturn adjustedToRange(threadLocalHeap.realHeapTop(), base, top);\n+\t}\n+\n+\t@Override\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapAlloc;\n \t}\n-\t\n }\n"}}, {"oid": "0844cf54c4de5883c98814ccd2a605c4d8307477", "url": "https://github.com/eclipse-openj9/openj9/commit/0844cf54c4de5883c98814ccd2a605c4d8307477", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T19:04:41Z", "type": "forcePushed"}, {"oid": "6be263e7c9b11260666ea6623ba2ba6f3a840bb6", "url": "https://github.com/eclipse-openj9/openj9/commit/6be263e7c9b11260666ea6623ba2ba6f3a840bb6", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T19:25:01Z", "type": "forcePushed"}, {"oid": "b737875f5a2e00c90c316b23305666aa21231142", "url": "https://github.com/eclipse-openj9/openj9/commit/b737875f5a2e00c90c316b23305666aa21231142", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T19:28:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NjEwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437676105", "bodyText": "Why does this need both realHeapAlloc and realHeapTop? Only one will be present except in a very small number of interim builds that I think we can safely ignore.", "author": "keithc-ca", "createdAt": "2020-06-09T19:45:44Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -75,9 +80,10 @@ protected GCObjectHeapIteratorAddressOrderedList_V1(U8Pointer base, U8Pointer to\n \t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, heapTop});\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/* Might be an instrumented VM */\n-\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);\n-\t\t\t\t\t\tif(realHeapTop.notNull() && isSomethingToAdd(heapAlloc, realHeapTop)) {\n-\t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, realHeapTop});\n+\t\t\t\t\t\tU8Pointer realHeapAlloc = getRealHeapAlloc(vmThread.allocateThreadLocalHeap(), heapAlloc, base, top);\n+\t\t\t\t\t\tU8Pointer realHeapTop = getRealHeapTop(vmThread.allocateThreadLocalHeap(), heapTop, base, top);", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxMjU0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437812547", "bodyText": "we fake heapAlloc for disabling inline cache in old core file and fake heapTop in new core file, in case we scan the TLH for gccheck during disabling inline TLH, we need to skip scanning between realHeapAlloc to heapTop for old core and skip scanning between heapAlloc and realHeapTop for new core, in order to make most code transparent between old core(V1) and new core(V2), getRealHeapAlloc() and getRealHeapTop() return realHeapAlloc and HeapTop in V1 and return heapAlloc and realHeapTop in V2.", "author": "LinHu2016", "createdAt": "2020-06-10T01:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NjEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4MDUyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438280520", "bodyText": "It took me a while, but I think I get it now. Thanks.", "author": "keithc-ca", "createdAt": "2020-06-10T17:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NjEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex f20baf93e..c6c3a84e2 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -80,8 +80,8 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, heapTop});\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/* Might be an instrumented VM */\n-\t\t\t\t\t\tU8Pointer realHeapAlloc = getRealHeapAlloc(vmThread.allocateThreadLocalHeap(), heapAlloc, base, top);\n-\t\t\t\t\t\tU8Pointer realHeapTop = getRealHeapTop(vmThread.allocateThreadLocalHeap(), heapTop, base, top);\n+\t\t\t\t\t\tU8Pointer realHeapAlloc = adjustedToRange(getRealHeapAlloc(vmThread.allocateThreadLocalHeap(), heapAlloc), base, top);\n+\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(getRealHeapTop(vmThread.allocateThreadLocalHeap(), heapTop), base, top);\n \t\t\t\t\t\tif(realHeapAlloc.notNull() && realHeapTop.notNull() && isSomethingToAdd(realHeapAlloc, realHeapTop)) {\n \t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, realHeapTop});\n \t\t\t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NjgyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437676829", "bodyText": "The default should be U8Pointer.NULL (callers are not expecting null to be returned).", "author": "keithc-ca", "createdAt": "2020-06-09T19:47:09Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,12 +140,37 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex f20baf93e..c6c3a84e2 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -145,32 +145,43 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n \t{\n \t\treturn heapTop;\n \t}\n \n-\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n \t{\n-\t\tU8Pointer realHeapAlloc = null;\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n \t\ttry {\n \t\t\tif (null == method) {\n \t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n \t\t} catch (NoSuchMethodException e1) {\n-\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n+\t\t\texception = e1;\n \t\t} catch (IllegalAccessException e2) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n+\t\t\texception = e2;\n \t\t} catch (IllegalArgumentException e3) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n+\t\t\texception = e3;\n \t\t} catch (InvocationTargetException e4) {\n-\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n+\t\t\tThrowable cause = e4.getCause();\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t\t}\n+\t\t\texception = e4;\n \t\t}\n+\t\t\n+\t\t// unexpected exception using reflection\n+\t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n+\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\n \t\treturn realHeapAlloc;\n \t}\n \n-\tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n \t{\n \t\tU8Pointer result = ptr;\n \t\tif (result.notNull()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NzQ0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437677442", "bodyText": "It's not reasonable to classify these as CorruptDataException.", "author": "keithc-ca", "createdAt": "2020-06-09T19:48:21Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,12 +140,37 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;\n+\t\ttry {\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MzkxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438383911", "bodyText": "On second thought, perhaps CorruptDataException is the right response. If the core file says it's the old variety, but doesn't have the corresponding field (which would lead to NoSuchMethodException here), then it is, in fact, corrupt.", "author": "keithc-ca", "createdAt": "2020-06-10T20:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NzQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex f20baf93e..c6c3a84e2 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -145,32 +145,43 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n \t{\n \t\treturn heapTop;\n \t}\n \n-\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n \t{\n-\t\tU8Pointer realHeapAlloc = null;\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n \t\ttry {\n \t\t\tif (null == method) {\n \t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n \t\t} catch (NoSuchMethodException e1) {\n-\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n+\t\t\texception = e1;\n \t\t} catch (IllegalAccessException e2) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n+\t\t\texception = e2;\n \t\t} catch (IllegalArgumentException e3) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n+\t\t\texception = e3;\n \t\t} catch (InvocationTargetException e4) {\n-\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n+\t\t\tThrowable cause = e4.getCause();\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t\t}\n+\t\t\texception = e4;\n \t\t}\n+\t\t\n+\t\t// unexpected exception using reflection\n+\t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n+\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\n \t\treturn realHeapAlloc;\n \t}\n \n-\tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n \t{\n \t\tU8Pointer result = ptr;\n \t\tif (result.notNull()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODI1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437678253", "bodyText": "If e4.getTargetException() is a CorruptDataException or a RuntimeException, that should be thrown instead.", "author": "keithc-ca", "createdAt": "2020-06-09T19:49:49Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,12 +140,37 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n-\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = null;\n+\t\ttry {\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex f20baf93e..c6c3a84e2 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -145,32 +145,43 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tcurrentExcludedRange = 0;\n \t}\n \n-\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n \t{\n \t\treturn heapTop;\n \t}\n \n-\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n \t{\n-\t\tU8Pointer realHeapAlloc = null;\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n \t\ttry {\n \t\t\tif (null == method) {\n \t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = adjustedToRange((U8Pointer)method.invoke(threadLocalHeap), base, top);\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n \t\t} catch (NoSuchMethodException e1) {\n-\t\t\tthrow new CorruptDataException(\"caused by NoSuchMethodException: \" + e1.getMessage());\n+\t\t\texception = e1;\n \t\t} catch (IllegalAccessException e2) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalAccessException: \" + e2.getMessage());\n+\t\t\texception = e2;\n \t\t} catch (IllegalArgumentException e3) {\n-\t\t\tthrow new CorruptDataException(\"caused by IllegalArgumentException: \" + e3.getMessage());\n+\t\t\texception = e3;\n \t\t} catch (InvocationTargetException e4) {\n-\t\t\tthrow new CorruptDataException(\"caused by InvocationTargetException: \" + e4.getMessage());\n+\t\t\tThrowable cause = e4.getCause();\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t\t}\n+\t\t\texception = e4;\n \t\t}\n+\t\t\n+\t\t// unexpected exception using reflection\n+\t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n+\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\n \t\treturn realHeapAlloc;\n \t}\n \n-\tprotected U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n+\tprivate U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n \t{\n \t\tU8Pointer result = ptr;\n \t\tif (result.notNull()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODU1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437678552", "bodyText": "Please don't add trailing whitespace (in fact, I support removing it elsewhere).", "author": "keithc-ca", "createdAt": "2020-06-09T19:50:21Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -150,7 +182,7 @@ private U8Pointer adjustedToRange(U8Pointer ptr, U8Pointer base, U8Pointer top)\n \t\t}\n \t\treturn result;\n \t}\n-\n+\t", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex f20baf93e..c6c3a84e2 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -182,7 +193,7 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\t}\n \t\treturn result;\n \t}\n-\t\n+\n \tprivate boolean isSomethingToAdd (U8Pointer start, U8Pointer end) throws CorruptDataException\n \t{\n \t\tboolean result = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3OTI2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r437679263", "bodyText": "I suggest the call to adjustedToRange should occur in the caller.", "author": "keithc-ca", "createdAt": "2020-06-09T19:51:41Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * Copyright (c) 1991, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+package com.ibm.j9ddr.vm29.j9.gc;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.vm29.pointer.U8Pointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9ModronThreadLocalHeapPointer;\n+\n+import java.util.ArrayList;\n+\n+class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddressOrderedList_V1 {\n+\n+\tprotected GCObjectHeapIteratorAddressOrderedList_V2(U8Pointer base, U8Pointer top, boolean includeLiveObjects, boolean includeDeadObjects) throws CorruptDataException\n+\t{\n+\t\tsuper(base, top, includeLiveObjects, includeDeadObjects);\n+\t}\n+\n+\t@Override\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\t{\n+\t\treturn adjustedToRange(threadLocalHeap.realHeapTop(), base, top);", "originalCommit": "b737875f5a2e00c90c316b23305666aa21231142", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\nindex 50d973915..9f0461f50 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V2.java\n\n@@ -35,13 +35,13 @@ class GCObjectHeapIteratorAddressOrderedList_V2 extends GCObjectHeapIteratorAddr\n \t}\n \n \t@Override\n-\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n \t{\n-\t\treturn adjustedToRange(threadLocalHeap.realHeapTop(), base, top);\n+\t\treturn threadLocalHeap.realHeapTop();\n \t}\n \n \t@Override\n-\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc, U8Pointer base, U8Pointer top) throws CorruptDataException\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n \t{\n \t\treturn heapAlloc;\n \t}\n"}}, {"oid": "d107cad5c8857680593a28f00bd82da65a9dfcfc", "url": "https://github.com/eclipse-openj9/openj9/commit/d107cad5c8857680593a28f00bd82da65a9dfcfc", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T22:12:52Z", "type": "forcePushed"}, {"oid": "4d72a3e53a91bdb035278af8c168f4da1ad13803", "url": "https://github.com/eclipse-openj9/openj9/commit/4d72a3e53a91bdb035278af8c168f4da1ad13803", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-09T22:16:07Z", "type": "forcePushed"}, {"oid": "f5e3c399409fc035ff4880894043303dbf69e8a9", "url": "https://github.com/eclipse-openj9/openj9/commit/f5e3c399409fc035ff4880894043303dbf69e8a9", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T12:47:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4MTk1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438281952", "bodyText": "I think this deserves a better name: perhaps realHeapAllocMethod?", "author": "keithc-ca", "createdAt": "2020-06-10T17:11:00Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -36,11 +38,14 @@\n import com.ibm.j9ddr.vm29.pointer.generated.J9VMThreadPointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_CopyScanCachePointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_EnvironmentStandardPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9ModronThreadLocalHeapPointer;\n import com.ibm.j9ddr.vm29.types.UDATA;\n \n \n class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n {\n+\tprivate static Method method = null;", "originalCommit": "f5e3c399409fc035ff4880894043303dbf69e8a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 7f1b5e4c3..ff1588839 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -44,7 +44,7 @@ import com.ibm.j9ddr.vm29.types.UDATA;\n \n class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n {\n-\tprivate static Method method = null;\n+\tprivate static Method realHeapAllocMethod = null;\n \n \tprotected J9ObjectPointer currentObject;\n \tprotected U8Pointer  scanPtr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4MzExOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438283118", "bodyText": "If cause is a RuntimeException or an Error, it should be thrown instead.", "author": "keithc-ca", "createdAt": "2020-06-10T17:13:04Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +140,47 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n+\t\ttry {\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t\texception = e1;\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\texception = e2;\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t\texception = e3;\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t\tThrowable cause = e4.getCause();\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t\t}", "originalCommit": "f5e3c399409fc035ff4880894043303dbf69e8a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 7f1b5e4c3..ff1588839 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -155,28 +157,24 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n \t\tException exception;\n \t\ttry {\n-\t\t\tif (null == method) {\n-\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\tif (null == realHeapAllocMethod) {\n+\t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n \t\t\treturn realHeapAlloc;\n-\t\t} catch (NoSuchMethodException e1) {\n-\t\t\texception = e1;\n-\t\t} catch (IllegalAccessException e2) {\n-\t\t\texception = e2;\n-\t\t} catch (IllegalArgumentException e3) {\n-\t\t\texception = e3;\n-\t\t} catch (InvocationTargetException e4) {\n-\t\t\tThrowable cause = e4.getCause();\n-\t\t\tif (cause instanceof CorruptDataException) {\n-\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n+\t\t\texception = e;\n+\t\t} catch (InvocationTargetException e1) {\n+\t\t\tThrowable cause = e1.getCause();\n+\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n+\t\t\t\tthrow cause;\n \t\t\t}\n-\t\t\texception = e4;\n+\t\t\texception = e1;\n \t\t}\n \t\t\n \t\t/* unexpected exception using reflection */\n \t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n-\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\t\tthrow cd;\n \n \t\treturn realHeapAlloc;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NDQ0MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438284440", "bodyText": "These can be merged:\n    } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException e) {\n        exception = e;", "author": "keithc-ca", "createdAt": "2020-06-10T17:15:23Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +140,47 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n+\t\ttry {\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t\texception = e1;\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\texception = e2;\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t\texception = e3;", "originalCommit": "f5e3c399409fc035ff4880894043303dbf69e8a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 7f1b5e4c3..ff1588839 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -155,28 +157,24 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n \t\tException exception;\n \t\ttry {\n-\t\t\tif (null == method) {\n-\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\tif (null == realHeapAllocMethod) {\n+\t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n \t\t\treturn realHeapAlloc;\n-\t\t} catch (NoSuchMethodException e1) {\n-\t\t\texception = e1;\n-\t\t} catch (IllegalAccessException e2) {\n-\t\t\texception = e2;\n-\t\t} catch (IllegalArgumentException e3) {\n-\t\t\texception = e3;\n-\t\t} catch (InvocationTargetException e4) {\n-\t\t\tThrowable cause = e4.getCause();\n-\t\t\tif (cause instanceof CorruptDataException) {\n-\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n+\t\t\texception = e;\n+\t\t} catch (InvocationTargetException e1) {\n+\t\t\tThrowable cause = e1.getCause();\n+\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n+\t\t\t\tthrow cause;\n \t\t\t}\n-\t\t\texception = e4;\n+\t\t\texception = e1;\n \t\t}\n \t\t\n \t\t/* unexpected exception using reflection */\n \t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n-\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\t\tthrow cd;\n \n \t\treturn realHeapAlloc;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI5NjIxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438296218", "bodyText": "This should just throw cd; instead of calling raiseCorruptDataEvent().", "author": "keithc-ca", "createdAt": "2020-06-10T17:35:00Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +140,47 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n+\t\ttry {\n+\t\t\tif (null == method) {\n+\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n+\t\t} catch (NoSuchMethodException e1) {\n+\t\t\texception = e1;\n+\t\t} catch (IllegalAccessException e2) {\n+\t\t\texception = e2;\n+\t\t} catch (IllegalArgumentException e3) {\n+\t\t\texception = e3;\n+\t\t} catch (InvocationTargetException e4) {\n+\t\t\tThrowable cause = e4.getCause();\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t\t}\n+\t\t\texception = e4;\n+\t\t}\n+\t\t\n+\t\t/* unexpected exception using reflection */\n+\t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n+\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);", "originalCommit": "f5e3c399409fc035ff4880894043303dbf69e8a9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 7f1b5e4c3..ff1588839 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -155,28 +157,24 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n \t\tException exception;\n \t\ttry {\n-\t\t\tif (null == method) {\n-\t\t\t\tmethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\tif (null == realHeapAllocMethod) {\n+\t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = (U8Pointer) method.invoke(threadLocalHeap);\n+\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n \t\t\treturn realHeapAlloc;\n-\t\t} catch (NoSuchMethodException e1) {\n-\t\t\texception = e1;\n-\t\t} catch (IllegalAccessException e2) {\n-\t\t\texception = e2;\n-\t\t} catch (IllegalArgumentException e3) {\n-\t\t\texception = e3;\n-\t\t} catch (InvocationTargetException e4) {\n-\t\t\tThrowable cause = e4.getCause();\n-\t\t\tif (cause instanceof CorruptDataException) {\n-\t\t\t\tthrow (CorruptDataException) cause;\n+\t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n+\t\t\texception = e;\n+\t\t} catch (InvocationTargetException e1) {\n+\t\t\tThrowable cause = e1.getCause();\n+\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n+\t\t\t\tthrow cause;\n \t\t\t}\n-\t\t\texception = e4;\n+\t\t\texception = e1;\n \t\t}\n \t\t\n \t\t/* unexpected exception using reflection */\n \t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n-\t\traiseCorruptDataEvent(\"Error accessing J9ModronThreadLocalHeapPointer\", cd, true);\n+\t\tthrow cd;\n \n \t\treturn realHeapAlloc;\n \t}\n"}}, {"oid": "55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "url": "https://github.com/eclipse-openj9/openj9/commit/55f4a018c7f3c9bc5583dd6fe67ba777b714610c", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T18:57:37Z", "type": "forcePushed"}, {"oid": "3eed55880d18662d4c302f6502e5b403ffa906de", "url": "https://github.com/eclipse-openj9/openj9/commit/3eed55880d18662d4c302f6502e5b403ffa906de", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T18:58:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1NTc1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438355758", "bodyText": "The added comments are helpful. I suggest this block be extracted to a method rather than be repeated below (without the comments).", "author": "keithc-ca", "createdAt": "2020-06-10T19:22:40Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -75,9 +80,12 @@ protected GCObjectHeapIteratorAddressOrderedList_V1(U8Pointer base, U8Pointer to\n \t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, heapTop});\n \t\t\t\t\t} else {\n \t\t\t\t\t\t/* Might be an instrumented VM */\n-\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(vmThread.allocateThreadLocalHeap().realHeapTop(), base, top);\n-\t\t\t\t\t\tif(realHeapTop.notNull() && isSomethingToAdd(heapAlloc, realHeapTop)) {\n-\t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {heapAlloc, realHeapTop});\n+\t\t\t\t\t\t/* realHeapAlloc = allocateThreadLocalHeap.realHeapAlloc in V1, = heapAlloc in V2 */\n+\t\t\t\t\t\tU8Pointer realHeapAlloc = adjustedToRange(getRealHeapAlloc(vmThread.allocateThreadLocalHeap(), heapAlloc), base, top);\n+\t\t\t\t\t\t/* realHeapTop = heapTop in V1, = allocateThreadLocalHeap.realHeapTop in V2 */\n+\t\t\t\t\t\tU8Pointer realHeapTop = adjustedToRange(getRealHeapTop(vmThread.allocateThreadLocalHeap(), heapTop), base, top);\n+\t\t\t\t\t\tif(realHeapAlloc.notNull() && realHeapTop.notNull() && isSomethingToAdd(realHeapAlloc, realHeapTop)) {\n+\t\t\t\t\t\t\texcludedRangeList.add(new U8Pointer[] {realHeapAlloc, realHeapTop});", "originalCommit": "3eed55880d18662d4c302f6502e5b403ffa906de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MDIzMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438370233", "bodyText": "This does not compile; it must be expressed as:\nif (cause instanceof CorruptDataException) {\n\tthrow (CorruptDataException) cause;\n} else if (cause instanceof RuntimeException) {\n\tthrow (RuntimeException) cause;\n} else if (cause instanceof Error) {\n\tthrow (Error) cause;\n}", "author": "keithc-ca", "createdAt": "2020-06-10T19:50:37Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +142,43 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n+\t\ttry {\n+\t\t\tif (null == realHeapAllocMethod) {\n+\t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n+\t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n+\t\t\texception = e;\n+\t\t} catch (InvocationTargetException e1) {\n+\t\t\tThrowable cause = e1.getCause();\n+\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n+\t\t\t\tthrow cause;", "originalCommit": "3eed55880d18662d4c302f6502e5b403ffa906de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex ff1588839..019007069 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -166,8 +166,12 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\t\texception = e;\n \t\t} catch (InvocationTargetException e1) {\n \t\t\tThrowable cause = e1.getCause();\n-\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n-\t\t\t\tthrow cause;\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException)cause;\n+\t\t\t} else if (cause instanceof RuntimeException) {\n+\t\t\t\tthrow (RuntimeException)cause;\n+\t\t\t} else if (cause instanceof Error) {\n+\t\t\t\tthrow (Error)cause;\n \t\t\t}\n \t\t\texception = e1;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MDUwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438370503", "bodyText": "This does not compile: the code is unreachable.", "author": "keithc-ca", "createdAt": "2020-06-10T19:51:06Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +142,43 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n+\t\tException exception;\n+\t\ttry {\n+\t\t\tif (null == realHeapAllocMethod) {\n+\t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n+\t\t\t}\n+\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n+\t\t\treturn realHeapAlloc;\n+\t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n+\t\t\texception = e;\n+\t\t} catch (InvocationTargetException e1) {\n+\t\t\tThrowable cause = e1.getCause();\n+\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n+\t\t\t\tthrow cause;\n+\t\t\t}\n+\t\t\texception = e1;\n+\t\t}\n+\t\t\n+\t\t/* unexpected exception using reflection */\n+\t\tCorruptDataException cd = new CorruptDataException(exception.toString(), exception);\n+\t\tthrow cd;\n+\n+\t\treturn realHeapAlloc;", "originalCommit": "3eed55880d18662d4c302f6502e5b403ffa906de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex ff1588839..019007069 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -166,8 +166,12 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \t\t\texception = e;\n \t\t} catch (InvocationTargetException e1) {\n \t\t\tThrowable cause = e1.getCause();\n-\t\t\tif ((cause instanceof CorruptDataException) || (cause instanceof RuntimeException) || (cause instanceof Error)) {\n-\t\t\t\tthrow cause;\n+\t\t\tif (cause instanceof CorruptDataException) {\n+\t\t\t\tthrow (CorruptDataException)cause;\n+\t\t\t} else if (cause instanceof RuntimeException) {\n+\t\t\t\tthrow (RuntimeException)cause;\n+\t\t\t} else if (cause instanceof Error) {\n+\t\t\t\tthrow (Error)cause;\n \t\t\t}\n \t\t\texception = e1;\n \t\t}\n"}}, {"oid": "5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "url": "https://github.com/eclipse-openj9/openj9/commit/5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T20:10:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzIyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438387222", "bodyText": "Please move this up so imports remain sorted.", "author": "keithc-ca", "createdAt": "2020-06-10T20:24:22Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -36,11 +38,14 @@\n import com.ibm.j9ddr.vm29.pointer.generated.J9VMThreadPointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_CopyScanCachePointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_EnvironmentStandardPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9ModronThreadLocalHeapPointer;", "originalCommit": "5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwNjUxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438406519", "bodyText": "J9ModronThreadLocalHeapPointer comes after J9BuildFlags, but I won't ask you to fix that unless there's something else that needs to change.", "author": "keithc-ca", "createdAt": "2020-06-10T21:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "268d21f3cee39d86e92ab1bdae83f0e75aae150a", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 019007069..e6552d229 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -33,12 +33,12 @@ import java.util.NoSuchElementException;\n import com.ibm.j9ddr.CorruptDataException;\n import com.ibm.j9ddr.vm29.j9.ObjectModel;\n import com.ibm.j9ddr.vm29.pointer.U8Pointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9ModronThreadLocalHeapPointer;\n import com.ibm.j9ddr.vm29.pointer.generated.J9BuildFlags;\n import com.ibm.j9ddr.vm29.pointer.generated.J9ObjectPointer;\n import com.ibm.j9ddr.vm29.pointer.generated.J9VMThreadPointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_CopyScanCachePointer;\n import com.ibm.j9ddr.vm29.pointer.generated.MM_EnvironmentStandardPointer;\n-import com.ibm.j9ddr.vm29.pointer.generated.J9ModronThreadLocalHeapPointer;\n import com.ibm.j9ddr.vm29.types.UDATA;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODA3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9813#discussion_r438388074", "bodyText": "This local variable is no longer useful; please just inline into the return statement:\n  return (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);", "author": "keithc-ca", "createdAt": "2020-06-10T20:26:04Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java", "diffHunk": "@@ -133,11 +142,45 @@ public int compare(U8Pointer[] o1, U8Pointer[] o2)\n \t\t\t\t\treturn o1[0].compare(o2[0]);\n \t\t\t\t}\n \t\t\t});\n-\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][2];\n+\t\texcludedRanges = new U8Pointer[excludedRangeList.size()][];\n \t\texcludedRangeList.toArray(excludedRanges);\n \t\tcurrentExcludedRange = 0;\n \t}\n-\t\n+\n+\tprotected U8Pointer getRealHeapTop(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapTop) throws CorruptDataException\n+\t{\n+\t\treturn heapTop;\n+\t}\n+\n+\tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n+\t{\n+\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;", "originalCommit": "5143b84f65bea4bf89ad0dd80e4a8cdeb8de13f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "268d21f3cee39d86e92ab1bdae83f0e75aae150a", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\nindex 019007069..e6552d229 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/gc/GCObjectHeapIteratorAddressOrderedList_V1.java\n\n@@ -154,14 +154,12 @@ class GCObjectHeapIteratorAddressOrderedList_V1 extends GCObjectHeapIterator\n \n \tprotected U8Pointer getRealHeapAlloc(J9ModronThreadLocalHeapPointer threadLocalHeap, U8Pointer heapAlloc) throws CorruptDataException\n \t{\n-\t\tU8Pointer realHeapAlloc = U8Pointer.NULL;\n \t\tException exception;\n \t\ttry {\n \t\t\tif (null == realHeapAllocMethod) {\n \t\t\t\trealHeapAllocMethod = threadLocalHeap.getClass().getMethod(\"realHeapAlloc\");\n \t\t\t}\n-\t\t\trealHeapAlloc = (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n-\t\t\treturn realHeapAlloc;\n+\t\t\treturn (U8Pointer) realHeapAllocMethod.invoke(threadLocalHeap);\n \t\t} catch (NoSuchMethodException | IllegalAccessException | IllegalArgumentException e) {\n \t\t\texception = e;\n \t\t} catch (InvocationTargetException e1) {\n"}}, {"oid": "268d21f3cee39d86e92ab1bdae83f0e75aae150a", "url": "https://github.com/eclipse-openj9/openj9/commit/268d21f3cee39d86e92ab1bdae83f0e75aae150a", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T20:42:59Z", "type": "commit"}, {"oid": "268d21f3cee39d86e92ab1bdae83f0e75aae150a", "url": "https://github.com/eclipse-openj9/openj9/commit/268d21f3cee39d86e92ab1bdae83f0e75aae150a", "message": "DDR Back compatible for TLH enable/disable change\n\n\tTLH enabling/disabling has been changed by using realHeapTop\n\tinstead of realHeapAlloc for faking TLH full, so old core file\n\tonly contains realHeapAlloc and new core file only contains\n\trealHeapTop. Update DDR to support analyzing old core file too.\n\n\tGCObjectHeapIteratorAddressOrderedList_V1 for old core support\n\tGCObjectHeapIteratorAddressOrderedList_V2 for the latest core support\n\nSigned-off-by: Lin Hu <linhu@ca.ibm.com>", "committedDate": "2020-06-10T20:42:59Z", "type": "forcePushed"}]}