{"pr_number": 9151, "pr_title": "AArch64: DDR: Implement StackWalker.java and MethodMetaData.java", "pr_createdAt": "2020-04-07T09:00:52Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9151", "timeline": [{"oid": "bb9f4d74ea6426869fcdedae21d4d08b72401725", "url": "https://github.com/eclipse-openj9/openj9/commit/bb9f4d74ea6426869fcdedae21d4d08b72401725", "message": "AArch64: DDR: Implement StackWalker.java and MethodMetaData.java\n\nThis commit implements aarch64 specific code for StackWalker.java and MethodMetaData.java.\n\nCo-authored-by: KONNO Kazuhiro <konno@jp.ibm.com>\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-04-07T03:01:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTc3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405531775", "bodyText": "What is the intent here? If the goal is to select just 16 bits, the constant must change to 0xFFFF0000L.\nsavedGPRs = registerSaveDescription.bitAnd(0xFFFF0000L);\n\nIf we want 24 bits, the mask should be 0xFFFFFFFFFFFF0000L.\nsavedGPRs = registerSaveDescription.bitAnd(0xFFFFFFFFFFFF0000L);\n\nAlso notice there's no need to construct the intermediate UDATA object.", "author": "keithc-ca", "createdAt": "2020-04-08T13:38:46Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java", "diffHunk": "@@ -516,6 +516,27 @@ public void jitAddSpilledRegisters(WalkState walkState, VoidPointer stackMap) th\n \t\t\t\t\t}\n \t\t\t\t\twhile (! savedGPRs.eq(0));\n \t\t\t\t}\n+\t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n+\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(new UDATA(0xFFFF0000));", "originalCommit": "bb9f4d74ea6426869fcdedae21d4d08b72401725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NTQ2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405895469", "bodyText": "I changed the constant to 0xFFFF0000L as we need 16bit.", "author": "Akira1Saitoh", "createdAt": "2020-04-09T00:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\nindex 0a3725980..fdd9a414f 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n\n@@ -517,25 +517,19 @@ public class MethodMetaData\n \t\t\t\t\twhile (! savedGPRs.eq(0));\n \t\t\t\t}\n \t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n-\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(new UDATA(0xFFFF0000));\n+\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(0xFFFF0000L);\n \n-\t\t\t\tif (! savedGPRs.eq(0))\n-\t\t\t\t{\n-\t\t\t\t\tsaveOffset = registerSaveDescription.bitAnd(new UDATA(0xFFFF));\n+\t\t\t\tif (! savedGPRs.eq(0)) {\n+\t\t\t\t\tsaveOffset = registerSaveDescription.bitAnd(0xFFFF);\n \t\t\t\t\tsaveCursor = walkState.bp.subOffset(saveOffset);\n-\t\t\t\t\tU8 i = new U8(1);\n-\t\t\t\t\tdo\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif (savedGPRs.anyBitsIn(1))\n-\t\t\t\t\t\t{\n+\t\t\t\t\tdo {\n+\t\t\t\t\t\tif (savedGPRs.anyBitsIn(1)) {\n \t\t\t\t\t\t\twalkState.registerEAs[mapCursor] = saveCursor;\n \t\t\t\t\t\t\tsaveCursor = saveCursor.add(1);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\ti = i.add(1);\n \t\t\t\t\t\t++mapCursor;\n \t\t\t\t\t\tsavedGPRs = savedGPRs.rightShift(1);\n-\t\t\t\t\t}\n-\t\t\t\t\twhile (! savedGPRs.eq(0));\n+\t\t\t\t\t} while (! savedGPRs.eq(0));\n \t\t\t\t}\n \t\t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjYxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405536618", "bodyText": "It doesn't appear that i is needed.\nAlso, please fix formatting:\n\tif (!savedGPRs.eq(0)) {\n\t\tsaveOffset = registerSaveDescription.bitAnd(0xFFFF);\n\t\tsaveCursor = walkState.bp.subOffset(saveOffset);\n\t\tdo {\n\t\t\tif (savedGPRs.anyBitsIn(1)) {\n\t\t\t\twalkState.registerEAs[mapCursor] = saveCursor;\n\t\t\t\tsaveCursor = saveCursor.add(1);\n\t\t\t}\n\t\t\t++mapCursor;\n\t\t\tsavedGPRs = savedGPRs.rightShift(1);\n\t\t} while (!savedGPRs.eq(0));\n\t}", "author": "keithc-ca", "createdAt": "2020-04-08T13:45:34Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java", "diffHunk": "@@ -516,6 +516,27 @@ public void jitAddSpilledRegisters(WalkState walkState, VoidPointer stackMap) th\n \t\t\t\t\t}\n \t\t\t\t\twhile (! savedGPRs.eq(0));\n \t\t\t\t}\n+\t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n+\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(new UDATA(0xFFFF0000));\n+\n+\t\t\t\tif (! savedGPRs.eq(0))\n+\t\t\t\t{\n+\t\t\t\t\tsaveOffset = registerSaveDescription.bitAnd(new UDATA(0xFFFF));\n+\t\t\t\t\tsaveCursor = walkState.bp.subOffset(saveOffset);\n+\t\t\t\t\tU8 i = new U8(1);\n+\t\t\t\t\tdo\n+\t\t\t\t\t{\n+\t\t\t\t\t\tif (savedGPRs.anyBitsIn(1))\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\twalkState.registerEAs[mapCursor] = saveCursor;\n+\t\t\t\t\t\t\tsaveCursor = saveCursor.add(1);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ti = i.add(1);\n+\t\t\t\t\t\t++mapCursor;\n+\t\t\t\t\t\tsavedGPRs = savedGPRs.rightShift(1);\n+\t\t\t\t\t}\n+\t\t\t\t\twhile (! savedGPRs.eq(0));\n+\t\t\t\t}", "originalCommit": "bb9f4d74ea6426869fcdedae21d4d08b72401725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NTYyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405895621", "bodyText": "Removed i and fixed formatting.", "author": "Akira1Saitoh", "createdAt": "2020-04-09T00:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\nindex 0a3725980..fdd9a414f 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n\n@@ -517,25 +517,19 @@ public class MethodMetaData\n \t\t\t\t\twhile (! savedGPRs.eq(0));\n \t\t\t\t}\n \t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n-\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(new UDATA(0xFFFF0000));\n+\t\t\t\tsavedGPRs = registerSaveDescription.bitAnd(0xFFFF0000L);\n \n-\t\t\t\tif (! savedGPRs.eq(0))\n-\t\t\t\t{\n-\t\t\t\t\tsaveOffset = registerSaveDescription.bitAnd(new UDATA(0xFFFF));\n+\t\t\t\tif (! savedGPRs.eq(0)) {\n+\t\t\t\t\tsaveOffset = registerSaveDescription.bitAnd(0xFFFF);\n \t\t\t\t\tsaveCursor = walkState.bp.subOffset(saveOffset);\n-\t\t\t\t\tU8 i = new U8(1);\n-\t\t\t\t\tdo\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif (savedGPRs.anyBitsIn(1))\n-\t\t\t\t\t\t{\n+\t\t\t\t\tdo {\n+\t\t\t\t\t\tif (savedGPRs.anyBitsIn(1)) {\n \t\t\t\t\t\t\twalkState.registerEAs[mapCursor] = saveCursor;\n \t\t\t\t\t\t\tsaveCursor = saveCursor.add(1);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\ti = i.add(1);\n \t\t\t\t\t\t++mapCursor;\n \t\t\t\t\t\tsavedGPRs = savedGPRs.rightShift(1);\n-\t\t\t\t\t}\n-\t\t\t\t\twhile (! savedGPRs.eq(0));\n+\t\t\t\t\t} while (! savedGPRs.eq(0));\n \t\t\t\t}\n \t\t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzk3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405537970", "bodyText": "Please format comment with * beginning the second and subsequent lines.\n\t/* AArch64 data resolve shape\n\t * 29 integer registers (not saving x29/x30/x31)\n\t */", "author": "keithc-ca", "createdAt": "2020-04-08T13:47:26Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java", "diffHunk": "@@ -569,6 +590,11 @@ public UDATA getJitDataResolvePushes() throws CorruptDataException {\n \t\t\t\t   12 slots saved integer registers\n \t\t\t\t*/\n \t\t\t\treturn new UDATA(12);\n+\t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n+\t\t\t\t/* AArch64 data resolve shape\n+\t\t\t\t   29 integer registers (not saving x29/x30/x31)\n+\t\t\t\t*/", "originalCommit": "bb9f4d74ea6426869fcdedae21d4d08b72401725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5NTc2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9151#discussion_r405895764", "bodyText": "Fixed format of the comment.", "author": "Akira1Saitoh", "createdAt": "2020-04-09T00:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "chunk": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\nindex 0a3725980..fdd9a414f 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/stackwalker/MethodMetaData.java\n\n@@ -592,8 +586,8 @@ public class MethodMetaData\n \t\t\t\treturn new UDATA(12);\n \t\t\t} else if (J9ConfigFlags.arch_aarch64) {\n \t\t\t\t/* AArch64 data resolve shape\n-\t\t\t\t   29 integer registers (not saving x29/x30/x31)\n-\t\t\t\t*/\n+\t\t\t\t * 29 integer registers (not saving x29/x30/x31)\n+\t\t\t\t */\n \t\t\t\treturn new UDATA(29);\n \t\t\t} else if (J9ConfigFlags.arch_s390) {\n \t\t\t\t/* 390 data resolve shape\n"}}, {"oid": "dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "url": "https://github.com/eclipse-openj9/openj9/commit/dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "message": "AArch64: DDR: Implement StackWalker.java and MethodMetaData.java\n\nThis commit implements aarch64 specific code for StackWalker.java and MethodMetaData.java.\n\nCo-authored-by: KONNO Kazuhiro <konno@jp.ibm.com>\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-04-09T00:41:38Z", "type": "commit"}, {"oid": "dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "url": "https://github.com/eclipse-openj9/openj9/commit/dc7aef7d86c7ad6820cf0c77f82491ba831b92df", "message": "AArch64: DDR: Implement StackWalker.java and MethodMetaData.java\n\nThis commit implements aarch64 specific code for StackWalker.java and MethodMetaData.java.\n\nCo-authored-by: KONNO Kazuhiro <konno@jp.ibm.com>\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-04-09T00:41:38Z", "type": "forcePushed"}]}