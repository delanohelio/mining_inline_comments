{"pr_number": 11182, "pr_title": "JDK16 VarHandle Support", "pr_createdAt": "2020-11-13T17:29:16Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11182", "timeline": [{"oid": "ce31783860936f9ccac65a816023b032fe2d21ee", "url": "https://github.com/eclipse-openj9/openj9/commit/ce31783860936f9ccac65a816023b032fe2d21ee", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-13T17:33:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523265779", "bodyText": "Is this need for 14+ or just 16+?", "author": "tajila", "createdAt": "2020-11-13T22:27:07Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -343,6 +343,7 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n+\tfinal boolean exact;", "originalCommit": "ce31783860936f9ccac65a816023b032fe2d21ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODAyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523298021", "bodyText": "The addition of the exact field impacts a constructor [VarHandle(VarForm varForm)] which was introduced in Java 14. In order to avoid duplication of the constructor (100+ lines of code), the field is surrounded using the Java14 flag.", "author": "babsingh", "createdAt": "2020-11-14T00:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMTY1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523301651", "bodyText": "Now, all the new changes are only enabled for Java16.", "author": "babsingh", "createdAt": "2020-11-14T00:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NTc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\nindex 15d562613..9c1d3fe25 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n\n@@ -343,7 +343,6 @@ public abstract class VarHandle extends VarHandleInternal\n /*[IF Java14]*/\n \tstatic final BiFunction<String, List<Integer>, ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER = null;\n \tVarForm vform = null;\n-\tfinal boolean exact;\n /*[ENDIF] Java14 */\n \t\n /*[IF Java15]*/\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523267045", "bodyText": "Java 14 is out of service, I would suggest use Java15 instead. The block containing final boolean exact; can be decorated with /*[IF Java15]*/ as well and combined with the immediate following /*[IF Java15]*/ block.", "author": "JasonFengJ9", "createdAt": "2020-11-13T22:30:59Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -371,6 +372,9 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n+/*[IF Java14]*/\n+\t\tthis.exact = false;\n+/*[ENDIF] Java14 */", "originalCommit": "ce31783860936f9ccac65a816023b032fe2d21ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODA1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523298050", "bodyText": "Refer to #11182 (comment).", "author": "babsingh", "createdAt": "2020-11-14T00:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMTY1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523301659", "bodyText": "Now, all the new changes are only enabled for Java16.", "author": "babsingh", "createdAt": "2020-11-14T00:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NzA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\nindex 15d562613..9c1d3fe25 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n\n@@ -372,9 +374,9 @@ public abstract class VarHandle extends VarHandleInternal\n \t\tthis.coordinateTypes = coordinateTypes;\n \t\tthis.handleTable = handleTable;\n \t\tthis.modifiers = modifiers;\n-/*[IF Java14]*/\n+/*[IF Java16]*/\n \t\tthis.exact = false;\n-/*[ENDIF] Java14 */\n+/*[ENDIF] Java16 */\n \t}\n \n /*[IF Java14]*/\n"}}, {"oid": "1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "url": "https://github.com/eclipse-openj9/openj9/commit/1e5b8db03c2a929aafa99e9dc374f2f6b0db8414", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-14T00:27:17Z", "type": "forcePushed"}, {"oid": "fc25ede2598036746db00090f5a8013ad6769d59", "url": "https://github.com/eclipse-openj9/openj9/commit/fc25ede2598036746db00090f5a8013ad6769d59", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-14T00:30:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMTk2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523821963", "bodyText": "The method name isn't changed, just the argument type which can be JPP decorated instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \tpublic MethodType accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n                       AccessType type\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            \t   AccessMode accessMode\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            \t) {\n          \n          \n            \n            \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n          \n          \n            \n            \t}\n          \n      \n    \n    \n  \n\nCan this be moved into java.lang.invoke.VarHandle to avoid duplicate code within FieldVarHandle and ViewVarHandle?", "author": "JasonFengJ9", "createdAt": "2020-11-15T22:17:06Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */", "originalCommit": "fc25ede2598036746db00090f5a8013ad6769d59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59999e84614b7f2c56bf740b56a227b54b6b120f", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\nindex 50702d0ef..cdc823fe9 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n\n@@ -119,26 +119,6 @@ final class ArrayVarHandle extends VarHandle {\n \t}\n /*[ENDIF] Java12 */\n \n-/*[IF Java16]*/\n-\tpublic MethodType accessModeTypeUncached(AccessType type) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ELSE]*/\n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ENDIF] Java16 */\n-\n-/*[IF Java16]*/\n-\tpublic VarHandle withInvokeExactBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-\n-\tpublic VarHandle withInvokeBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ENDIF] Java16 */\n-\n \t/**\n \t * Type specific methods used by array element VarHandle methods.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjAxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822019", "bodyText": "Similarly can this code block be moved into java.lang.invoke.VarHandle as well?", "author": "JasonFengJ9", "createdAt": "2020-11-15T22:17:34Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,9 +119,25 @@\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n \tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n \t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n \t}\n+/*[ENDIF] Java16 */\n+\n+/*[IF Java16]*/\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ENDIF] Java16 */", "originalCommit": "fc25ede2598036746db00090f5a8013ad6769d59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59999e84614b7f2c56bf740b56a227b54b6b120f", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\nindex 50702d0ef..cdc823fe9 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n\n@@ -119,26 +119,6 @@ final class ArrayVarHandle extends VarHandle {\n \t}\n /*[ENDIF] Java12 */\n \n-/*[IF Java16]*/\n-\tpublic MethodType accessModeTypeUncached(AccessType type) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ELSE]*/\n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ENDIF] Java16 */\n-\n-/*[IF Java16]*/\n-\tpublic VarHandle withInvokeExactBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-\n-\tpublic VarHandle withInvokeBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n-/*[ENDIF] Java16 */\n-\n \t/**\n \t * Type specific methods used by array element VarHandle methods.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMjA0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r523822047", "bodyText": "Considering the difference is the argument, I would suggest\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            Class<?> receiverActual = accessModeTypeUncached(\n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n              AccessMode.GET.at\n          \n          \n            \n            /*[ELSE]*/\n          \n          \n            \n            AccessMode.GET\n          \n          \n            \n            /*[ENDIF] Java16 */\n          \n          \n            \n            ).parameterType(0);", "author": "JasonFengJ9", "createdAt": "2020-11-15T22:17:50Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -394,7 +414,11 @@ MethodType accessModeType(Class<?> receiver, Class<?> type, Class<?>... args) {\n \t\t\tint numAccessModes = accessModes.length;\n \t\n \t\t\t/* The first argument in AccessType.GET MethodType is the receiver class. */\n+/*[IF Java16]*/\n+\t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET.at).parameterType(0);\n+/*[ELSE]*/\n \t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET).parameterType(0);\n+/*[ENDIF] Java16 */", "originalCommit": "fc25ede2598036746db00090f5a8013ad6769d59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "59999e84614b7f2c56bf740b56a227b54b6b120f", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\nindex d54d5e24d..1933c8cff 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n\n@@ -414,11 +414,14 @@ public abstract class VarHandle extends VarHandleInternal\n \t\t\tint numAccessModes = accessModes.length;\n \t\n \t\t\t/* The first argument in AccessType.GET MethodType is the receiver class. */\n-/*[IF Java16]*/\n-\t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET.at).parameterType(0);\n-/*[ELSE]*/\n-\t\t\tClass<?> receiverActual = accessModeTypeUncached(AccessMode.GET).parameterType(0);\n-/*[ENDIF] Java16 */\n+\t\t\tClass<?> receiverActual = accessModeTypeUncached(\n+\t\t\t\t\t/*[IF Java16]*/\n+\t\t\t\t\tAccessMode.GET.at\n+\t\t\t\t\t/*[ELSE]*/\n+\t\t\t\t\tAccessMode.GET\n+\t\t\t\t\t/*[ENDIF] Java16 */\n+\t\t\t\t).parameterType(0);\n+\n \t\t\tClass<?> receiverVarForm = varForm.methodType_table[AccessType.GET.ordinal()].parameterType(0);\n \t\t\t\n \t\t\t/* Specify the exact operation method types if the actual receiver doesn't match the\n"}}, {"oid": "59999e84614b7f2c56bf740b56a227b54b6b120f", "url": "https://github.com/eclipse-openj9/openj9/commit/59999e84614b7f2c56bf740b56a227b54b6b120f", "message": "Jason Feng's Feedback for #11182\n\nhttps://github.com/eclipse/openj9/pull/11182\n\n- Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n- Use the preprocessor flags to target only the impacted code.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-16T15:27:33Z", "type": "forcePushed"}, {"oid": "6b98cfcde476c5257c615fc418d42ecf34f02269", "url": "https://github.com/eclipse-openj9/openj9/commit/6b98cfcde476c5257c615fc418d42ecf34f02269", "message": "Jason Feng's Feedback for #11182\n\n1. Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n2. Use the preprocessor flags to target only the impacted code.\n\nRelated: https://github.com/eclipse/openj9/pull/11182\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-16T15:29:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NjIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524446217", "bodyText": "This is changed from public to package access which might be problematic.", "author": "JasonFengJ9", "createdAt": "2020-11-16T17:29:00Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java", "diffHunk": "@@ -119,10 +119,6 @@\n \t}\n /*[ENDIF] Java12 */\n \n-\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}", "originalCommit": "6b98cfcde476c5257c615fc418d42ecf34f02269", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY1ODcxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524658713", "bodyText": "https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/invoke/VarHandle.html\nAccording to the above Java doc, VarHandle.accessModeTypeUncached is not public. OpenJ9 classes, which extend the abstract Varhandle class, made it public but those OpenJ9 classes are not subject to the compliance (signature) test. Making accessModeTypeUncached public in the abstract VarHandle class will break the compliance (signature) test. So, we should keep VarHandle.accessModeTypeUncached package-protected as per the current changes.", "author": "babsingh", "createdAt": "2020-11-16T22:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\nindex cdc823fe9..50702d0ef 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/ArrayVarHandle.java\n\n@@ -119,6 +119,26 @@ final class ArrayVarHandle extends VarHandle {\n \t}\n /*[ENDIF] Java12 */\n \n+/*[IF Java16]*/\n+\tpublic MethodType accessModeTypeUncached(AccessType type) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ELSE]*/\n+\tpublic MethodType accessModeTypeUncached(AccessMode accessMode) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ENDIF] Java16 */\n+\n+/*[IF Java16]*/\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+/*[ENDIF] Java16 */\n+\n \t/**\n \t * Type specific methods used by array element VarHandle methods.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzI1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524493252", "bodyText": "withInvokeExactBehavior & withInvokeBehavior are public API, they are abstract as per https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/invoke/VarHandle.html#withInvokeBehavior()", "author": "JasonFengJ9", "createdAt": "2020-11-16T18:44:39Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java", "diffHunk": "@@ -1692,5 +1733,32 @@ MethodHandle getMethodHandle(int i) {\n \t}\n /*[ENDIF] Java15 | OPENJDK_METHODHANDLES */\n \n-\tabstract MethodType accessModeTypeUncached(AccessMode accessMode);\n+\tMethodType accessModeTypeUncached(\n+\t\t/*[IF Java16]*/\n+\t\tAccessType type\n+\t\t/*[ELSE]*/\n+\t\tAccessMode accessMode\n+\t\t/*[ENDIF] Java16 */\n+\t) {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+/*[IF Java16]*/\n+\tfinal MethodType accessModeTypeUncached(int index) {\n+\t\treturn accessModeTypeUncached(AccessType.values()[index]);\n+\t}\n+\n+\tpublic VarHandle withInvokeExactBehavior() {\n+\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n+\t}\n+\n+\tpublic VarHandle withInvokeBehavior() {", "originalCommit": "6b98cfcde476c5257c615fc418d42ecf34f02269", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY1MTIzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11182#discussion_r524651234", "bodyText": "Java 16 builds are not fully supported yet. So, it is not possible to verify the impact of changing abstract methods to concrete methods in the VarHandle class. These changes should not break any OpenJ9 testing so they can be accepted in its current state. Any other issues can be addressed once Java 16 builds are fully functional.", "author": "babsingh", "createdAt": "2020-11-16T22:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\nindex 1933c8cff..d54d5e24d 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/VarHandle.java\n\n@@ -1733,28 +1724,20 @@ public abstract class VarHandle extends VarHandleInternal\n \t}\n /*[ENDIF] Java15 | OPENJDK_METHODHANDLES */\n \n-\tMethodType accessModeTypeUncached(\n-\t\t/*[IF Java16]*/\n-\t\tAccessType type\n-\t\t/*[ELSE]*/\n-\t\tAccessMode accessMode\n-\t\t/*[ENDIF] Java16 */\n-\t) {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n+/*[IF Java16]*/\n+\tabstract MethodType accessModeTypeUncached(AccessType type);\n+/*[ELSE]*/\n+\tabstract MethodType accessModeTypeUncached(AccessMode accessMode);\n+/*[ENDIF] Java16 */\n \n /*[IF Java16]*/\n \tfinal MethodType accessModeTypeUncached(int index) {\n \t\treturn accessModeTypeUncached(AccessType.values()[index]);\n \t}\n \n-\tpublic VarHandle withInvokeExactBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n+\tpublic abstract VarHandle withInvokeExactBehavior();\n \n-\tpublic VarHandle withInvokeBehavior() {\n-\t\tthrow OpenJDKCompileStub.OpenJDKCompileStubThrowError();\n-\t}\n+\tpublic abstract VarHandle withInvokeBehavior();\n \n \tpublic boolean hasInvokeExactBehavior() {\n \t\treturn exact;\n"}}, {"oid": "6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "url": "https://github.com/eclipse-openj9/openj9/commit/6c48be07065985d6cef29d1b15dd3afc1d3a4a33", "message": "JDK16 VarHandle Support\n\n1. abstract MethodType accessModeTypeUncached(...)\naccessModeTypeUncached accepts an AccessType instance instead of an\nAccessMode instance as an input argument.\n\n2. final MethodType accessModeTypeUncached(int index)\ndirects a call to\nabstract MethodType accessModeTypeUncached(...)\n\n3. public abstract VarHandle withInvokeExactBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n4. public abstract VarHandle withInvokeBehavior()\nand its implementation in concrete classes that extend the abstract\nVarHandle.\n\n5. public boolean hasInvokeExactBehavior()\nreturns true if the VarHandle has invokeExact behaviour. Otherwise, it\nreturns false.\n\nFixes: https://github.com/eclipse/openj9/issues/11149\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:13:29Z", "type": "commit"}, {"oid": "554fc798deccf712c92544b2885d651a7668fb3c", "url": "https://github.com/eclipse-openj9/openj9/commit/554fc798deccf712c92544b2885d651a7668fb3c", "message": "Jason Feng's Feedback for #11182\n\n1. Convert VarHandle abstract methods into concrete methods in order to\navoid duplication in classes that extend the abstract VarHandle class.\n\n2. Use the preprocessor flags to target only the impacted code.\n\nRelated: https://github.com/eclipse/openj9/pull/11182\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:13:29Z", "type": "commit"}, {"oid": "b8081e5ec1a79a82e88342e6f77880af8e76bac5", "url": "https://github.com/eclipse-openj9/openj9/commit/b8081e5ec1a79a82e88342e6f77880af8e76bac5", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:13:29Z", "type": "forcePushed"}, {"oid": "91464a7e7969ee8991b3d165ba8afec54f004582", "url": "https://github.com/eclipse-openj9/openj9/commit/91464a7e7969ee8991b3d165ba8afec54f004582", "message": "VarHandle.AIOOBE_SUPPLIER's second argument changes in JDK16\n\nVarHandle.AIOOBE_SUPPLIER's second argument changes from List<Integer>\nto List<Number> in JDK16.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:19:39Z", "type": "commit"}, {"oid": "1048de3cea75a7c89fee1cdce16d8555747991ef", "url": "https://github.com/eclipse-openj9/openj9/commit/1048de3cea75a7c89fee1cdce16d8555747991ef", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:19:41Z", "type": "forcePushed"}, {"oid": "2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "url": "https://github.com/eclipse-openj9/openj9/commit/2d36ccbf31bdb7c40831a2f4dbf4d4485ee79f26", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T17:27:57Z", "type": "forcePushed"}, {"oid": "0b815b2e9d0525eed994ff206f843f4ea3f28d51", "url": "https://github.com/eclipse-openj9/openj9/commit/0b815b2e9d0525eed994ff206f843f4ea3f28d51", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T19:21:44Z", "type": "forcePushed"}, {"oid": "d453278e753c0b2e99a57b79183a656d60cb11f4", "url": "https://github.com/eclipse-openj9/openj9/commit/d453278e753c0b2e99a57b79183a656d60cb11f4", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-19T19:33:14Z", "type": "forcePushed"}, {"oid": "afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "url": "https://github.com/eclipse-openj9/openj9/commit/afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-20T04:39:18Z", "type": "commit"}, {"oid": "afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "url": "https://github.com/eclipse-openj9/openj9/commit/afc71a5f8f3c9b71ee5ef40282d2e9043efc2a38", "message": "Add stubs for the ScopedMemoryAccess native methods [JDK16]\n\nNative methods:\n1. private static native void registerNatives();\n2. native boolean closeScope0(Scope scope, Scope.ScopedAccessError\nexception);\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-11-20T04:39:18Z", "type": "forcePushed"}]}