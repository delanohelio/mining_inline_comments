{"pr_number": 10175, "pr_title": "Read JAVA_OPTIONS env var before OPENJ9_JAVA_OPTIONS", "pr_createdAt": "2020-07-15T17:59:52Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10175", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTkxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463815919", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\tMap<String, String> env = pb.environment();\n          \n          \n            \n            \t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n          \n          \n            \n            \t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n          \n          \n            \n            \t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n          \n          \n            \n            \t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n          \n          \n            \n            \t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n          \n          \n            \n            \t\t/* environment variables should come after implicit arguments */\n          \n          \n            \n            \t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n          \n          \n            \n            \t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue()); \n          \n          \n            \n            \t}\n          \n          \n            \n            \t\tif (!isIbm)\n          \n          \n            \n            \t\t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\t\tMap<String, String> env = pb.environment();\n          \n          \n            \n            \t\t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n          \n          \n            \n            \t\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n          \n          \n            \n            \t\t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n          \n          \n            \n            \t\t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n          \n          \n            \n            \t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n          \n          \n            \n            \t\t\t/* environment variables should come after implicit arguments */\n          \n          \n            \n            \t\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n          \n          \n            \n            \t\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > \targumentPositions.get(DJAVA_HOME).intValue());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t}", "author": "DanHeidinga", "createdAt": "2020-07-31T20:18:15Z", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -334,7 +335,23 @@ public void testArgEncodingInIbmJavaOptions() {\n \t\tassertTrue(IBM_JAVA_OPTIONS+ \" should come last\", argumentPositions.get(ibmJavaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue());\n \t}\n \n-\t/* test OPENJ9_JAVA_OPTIONS environment variableS */\n+\t/* test JAVA_OPTIONS environment variable */\n+\t@Test\n+\tpublic void testJavaOptions() {\n+\t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n+\t\tMap<String, String> env = pb.environment();\n+\t\tString javaOptionsArg = \"-Dtest.name=testJavaOptions\"; //$NON-NLS-1$\n+\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n+\t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n+\t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n+\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n+\t\t/* environment variables should come after implicit arguments */\n+\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n+\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue()); \n+\t}", "originalCommit": "bbd52ba7b13931b4662b00a64e6897fdc318640e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7721381277fba6d09a51452d4eefda438b4b5d39", "chunk": "diff --git a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\nindex 1ab001a96..d65fdccdd 100644\n--- a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n+++ b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n\n@@ -344,10 +345,14 @@ public class VmArgumentTests {\n \t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n \t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n \t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, new String[] {javaOptionsArg});\n-\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n-\t\t/* environment variables should come after implicit arguments */\n-\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n-\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue()); \n+\t\tif (!isJava8 || !isIBM) {\n+\t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n+\t\t\t/* environment variables should come after implicit arguments */\n+\t\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+DJAVA_HOME, \n+\t\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(DJAVA_HOME).intValue());\n+\t\t} else {\n+\t\t\tassertFalse(\"Unexpected: \" + javaOptionsArg, argumentPositions.containsKey(javaOptionsArg));\n+\t\t}\n \t}\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNjUzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r463816537", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n          \n          \n            \n            \t\tif (isIbm) {\n          \n          \n            \n            \t\t\t/* disable this test for IBM builds */\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);", "author": "DanHeidinga", "createdAt": "2020-07-31T20:19:51Z", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -666,30 +683,36 @@ public void testCommandlineArgumentsWithLeadingAndTrailingSpaces() {\n \t\t}\n \t}\n \n-\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS */\n+\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS, and JAVA_OPTIONS */\n \t@Test\n \tpublic void testEnvironmentVariableOrdering() {\n \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);", "originalCommit": "bbd52ba7b13931b4662b00a64e6897fdc318640e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7721381277fba6d09a51452d4eefda438b4b5d39", "chunk": "diff --git a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\nindex 1ab001a96..d65fdccdd 100644\n--- a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n+++ b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n\n@@ -701,18 +706,28 @@ public class VmArgumentTests {\n \t\t\t\tnew String[] {ibmJavaOptionsArg, javaOptionsArg, javaToolOptionsArg, openJ9JavaOptionsArg});\n \t\tassertTrue(MISSING_ARGUMENT+ibmJavaOptionsArg, \n \t\t\t\targumentPositions.containsKey(ibmJavaOptionsArg));\n-\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, \n-\t\t\t\targumentPositions.containsKey(javaOptionsArg));\n+\t\tif (!isJava8 || !isIBM) {\n+\t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, \n+\t\t\t\t\targumentPositions.containsKey(javaOptionsArg));\n+\t\t} else {\n+\t\t\tassertFalse(\"unexpected: \" + javaOptionsArg, \n+\t\t\t\t\targumentPositions.containsKey(javaOptionsArg));\n+\t\t}\n \t\tassertTrue(MISSING_ARGUMENT+javaToolOptionsArg, \n \t\t\t\targumentPositions.containsKey(javaToolOptionsArg));\n \t\tassertTrue(MISSING_ARGUMENT+openJ9JavaOptionsArg, \n \t\t\t\targumentPositions.containsKey(openJ9JavaOptionsArg));\n \t\tassertTrue(IBM_JAVA_OPTIONS+ SHOULD_COME_AFTER+OPENJ9_JAVA_OPTIONS, \n \t\t\t\targumentPositions.get(ibmJavaOptionsArg).intValue() > argumentPositions.get(openJ9JavaOptionsArg).intValue());\n-\t\tassertTrue(OPENJ9_JAVA_OPTIONS+ SHOULD_COME_AFTER+JAVA_OPTIONS, \n-\t\t\t\targumentPositions.get(openJ9JavaOptionsArg).intValue() > argumentPositions.get(javaOptionsArg).intValue());\n-\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+JAVA_TOOL_OPTIONS, \n-\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(javaToolOptionsArg).intValue());\n+\t\tif (!isJava8 || !isIBM) {\n+\t\t\tassertTrue(OPENJ9_JAVA_OPTIONS+ SHOULD_COME_AFTER+JAVA_OPTIONS, \n+\t\t\t\t\targumentPositions.get(openJ9JavaOptionsArg).intValue() > argumentPositions.get(javaOptionsArg).intValue());\n+\t\t\tassertTrue(JAVA_OPTIONS+ SHOULD_COME_AFTER+JAVA_TOOL_OPTIONS, \n+\t\t\t\t\targumentPositions.get(javaOptionsArg).intValue() > argumentPositions.get(javaToolOptionsArg).intValue());\n+\t\t} else {\n+\t\t\tassertTrue(OPENJ9_JAVA_OPTIONS+ SHOULD_COME_AFTER+JAVA_TOOL_OPTIONS, \n+\t\t\t\t\targumentPositions.get(openJ9JavaOptionsArg).intValue() > argumentPositions.get(javaToolOptionsArg).intValue());\n+\t\t}\n \t}\n \n \t/*\n"}}, {"oid": "7721381277fba6d09a51452d4eefda438b4b5d39", "url": "https://github.com/eclipse-openj9/openj9/commit/7721381277fba6d09a51452d4eefda438b4b5d39", "message": "Fix review comments", "committedDate": "2020-10-02T02:04:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NTc5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498795793", "bodyText": "nit: spaces missing around ? and : (here and on line 153).", "author": "keithc-ca", "createdAt": "2020-10-02T12:40:48Z", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -130,9 +132,9 @@\n \tprotected static Logger logger = Logger.getLogger(VmArgumentTests.class);\n \n \tstatic {\n-\t\tboolean isIbm = System.getProperty(\"java.vm.vendor\").equals(\"IBM Corporation\");\n+\t\tisIBM = System.getProperty(\"java.vm.vendor\").equals(\"IBM Corporation\");\n \t\tmandatoryArgumentsJava8 = new String[] {\n-\t\t\t\tisIbm?XOPTIONSFILE:null,\n+\t\t\t\tisIBM?XOPTIONSFILE:null,", "originalCommit": "3149bd71a608a9f4d747863692f7e92bb0b84388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "735e52d4eea492c7d205c56817790c6f7981d3b6", "chunk": "diff --git a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\nindex d65fdccdd..76fa69811 100644\n--- a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n+++ b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n\n@@ -134,7 +134,7 @@ public class VmArgumentTests {\n \tstatic {\n \t\tisIBM = System.getProperty(\"java.vm.vendor\").equals(\"IBM Corporation\");\n \t\tmandatoryArgumentsJava8 = new String[] {\n-\t\t\t\tisIBM?XOPTIONSFILE:null,\n+\t\t\t\tisIBM ? XOPTIONSFILE : null,\n \t\t\t\t\t\t\"-Xlockword:mode\",\n \t\t\t\t\t\t\"-Xjcl:\",\n \t\t\t\t\t\t\"-Dcom.ibm.oti.vm.bootstrap.library.path\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NjI2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10175#discussion_r498796264", "bodyText": "nit: spaces missing around + (here and several places below).", "author": "keithc-ca", "createdAt": "2020-10-02T12:41:44Z", "path": "test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java", "diffHunk": "@@ -666,30 +688,46 @@ public void testCommandlineArgumentsWithLeadingAndTrailingSpaces() {\n \t\t}\n \t}\n \n-\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS */\n+\t/* IBM_JAVA_OPTIONS should take priority over JAVA_TOOL_OPTIONS, and JAVA_OPTIONS */\n \t@Test\n \tpublic void testEnvironmentVariableOrdering() {\n \t\tProcessBuilder pb = makeProcessBuilder(new String[] {}, CLASSPATH);\n \t\tMap<String, String> env = pb.environment();\n-\t\tString javaToolOptionsArg = \"-Dtest.name1=javaToolOptionsArg\";\n-\t\tString ibmJavaOptionsArg = \"-Dtest.name2=ibmJavaOptionsArg\";\n-\t\tString openJ9JavaOptionsArg = \"-Dtest.name2=openJ9JavaOptionsArg\";\n-\t\tenv.put(JAVA_TOOL_OPTIONS, javaToolOptionsArg);\n+\t\tString ibmJavaOptionsArg = \"-Dtest.name1=ibmJavaOptionsArg\";\n+\t\tString javaOptionsArg = \"-Dtest.name2=javaOptionsArg\";\n+\t\tString javaToolOptionsArg = \"-Dtest.name3=javaToolOptionsArg\";\n+\t\tString openJ9JavaOptionsArg = \"-Dtest.name4=openJ9JavaOptionsArg\";\n \t\tenv.put(IBM_JAVA_OPTIONS, ibmJavaOptionsArg);\n+\t\tenv.put(JAVA_OPTIONS, javaOptionsArg);\n+\t\tenv.put(JAVA_TOOL_OPTIONS, javaToolOptionsArg);\n \t\tenv.put(OPENJ9_JAVA_OPTIONS, openJ9JavaOptionsArg);\n \t\tArrayList<String> actualArguments = runAndGetArgumentList(pb);\n \t\tHashMap<String, Integer> argumentPositions = checkArguments(actualArguments, \n-\t\t\t\tnew String[] {ibmJavaOptionsArg, javaToolOptionsArg, openJ9JavaOptionsArg});\n+\t\t\t\tnew String[] {ibmJavaOptionsArg, javaOptionsArg, javaToolOptionsArg, openJ9JavaOptionsArg});\n \t\tassertTrue(MISSING_ARGUMENT+ibmJavaOptionsArg, \n \t\t\t\targumentPositions.containsKey(ibmJavaOptionsArg));\n+\t\tif (!isJava8 || !isIBM) {\n+\t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, ", "originalCommit": "3149bd71a608a9f4d747863692f7e92bb0b84388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "735e52d4eea492c7d205c56817790c6f7981d3b6", "chunk": "diff --git a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\nindex d65fdccdd..76fa69811 100644\n--- a/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n+++ b/test/functional/Java8andUp/src/org/openj9/test/vmArguments/VmArgumentTests.java\n\n@@ -707,7 +707,7 @@ public class VmArgumentTests {\n \t\tassertTrue(MISSING_ARGUMENT+ibmJavaOptionsArg, \n \t\t\t\targumentPositions.containsKey(ibmJavaOptionsArg));\n \t\tif (!isJava8 || !isIBM) {\n-\t\t\tassertTrue(MISSING_ARGUMENT+javaOptionsArg, \n+\t\t\tassertTrue(MISSING_ARGUMENT + javaOptionsArg, \n \t\t\t\t\targumentPositions.containsKey(javaOptionsArg));\n \t\t} else {\n \t\t\tassertFalse(\"unexpected: \" + javaOptionsArg, \n"}}, {"oid": "735e52d4eea492c7d205c56817790c6f7981d3b6", "url": "https://github.com/eclipse-openj9/openj9/commit/735e52d4eea492c7d205c56817790c6f7981d3b6", "message": "Read JAVA_OPTIONS env var before OPENJ9_JAVA_OPTIONS\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-02T14:53:42Z", "type": "commit"}, {"oid": "d08926385bc373a10d2874fd9b2b0d167900be16", "url": "https://github.com/eclipse-openj9/openj9/commit/d08926385bc373a10d2874fd9b2b0d167900be16", "message": "Fix bug when -XX:+UseNoGC used in environment variable\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-02T14:53:43Z", "type": "commit"}, {"oid": "d08926385bc373a10d2874fd9b2b0d167900be16", "url": "https://github.com/eclipse-openj9/openj9/commit/d08926385bc373a10d2874fd9b2b0d167900be16", "message": "Fix bug when -XX:+UseNoGC used in environment variable\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-10-02T14:53:43Z", "type": "forcePushed"}]}