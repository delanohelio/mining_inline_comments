{"pr_number": 10450, "pr_title": "Add explicit default constructors", "pr_createdAt": "2020-08-25T13:48:47Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10450", "timeline": [{"oid": "e1ee78e06c1ac5b699379cded2e1ec62af57b353", "url": "https://github.com/eclipse-openj9/openj9/commit/e1ee78e06c1ac5b699379cded2e1ec62af57b353", "message": "Add explicit default constructors\n\nFixes new warnings in jdk16:\n  warning: [missing-explicit-ctor] class in exported package declares\n  no explicit constructors, thereby exposing a default constructor to\n  clients of module\n\nAlso fix javadoc of Stats class.\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-08-25T17:02:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwMDU4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r477700587", "bodyText": "I only see static methods on this class.  Why provide a public constructor?  I'd be tempted to make the class final as well.", "author": "DanHeidinga", "createdAt": "2020-08-26T23:47:43Z", "path": "jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java", "diffHunk": "@@ -32,6 +32,13 @@\n  */\n public class Maths {\n \n+\t/**\n+\t * Construct a new instance.\n+\t */\n+\tpublic Maths() {", "originalCommit": "e1ee78e06c1ac5b699379cded2e1ec62af57b353", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "chunk": "diff --git a/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java b/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java\nindex b59141b1e..40ffbc0f6 100644\n--- a/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java\n+++ b/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java\n\n@@ -30,14 +30,15 @@ import java.util.Objects;\n  * on any connected CUDA GPU. A successful sort operation\n  * results in the array being sorted in ascending order.\n  */\n-public class Maths {\n+/*[IF Java16]*/\n+public final class Maths {\n \n-\t/**\n-\t * Construct a new instance.\n-\t */\n-\tpublic Maths() {\n+\tprivate Maths() {\n \t\tsuper();\n \t}\n+/*[ELSE] Java16\n+public class Maths {\n+/*[ENDIF] Java16*/\n \n \tprivate static int getDefaultDevice() {\n \t\treturn CUDAManager.instanceInternal().getDefaultDevice();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwMjQ4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r477702488", "bodyText": "Is there a reason to have a public constructor?  I also wonder about making this final", "author": "DanHeidinga", "createdAt": "2020-08-26T23:49:01Z", "path": "jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java", "diffHunk": "@@ -29,6 +29,13 @@\n  */\n public class Version {\n \n+\t/**\n+\t * Construct a new instance.\n+\t */\n+\tpublic Version() {", "originalCommit": "e1ee78e06c1ac5b699379cded2e1ec62af57b353", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "chunk": "diff --git a/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java b/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java\nindex 906e7d306..026a51d88 100644\n--- a/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java\n+++ b/jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java\n\n@@ -27,14 +27,15 @@ package com.ibm.gpu;\n  * The main method can be launched from the command line, which will print\n  * the current level to stdout.\n  */\n-public class Version {\n+/*[IF Java16]*/\n+public final class Version {\n \n-\t/**\n-\t * Construct a new instance.\n-\t */\n-\tpublic Version() {\n+\tprivate Version() {\n \t\tsuper();\n \t}\n+/*[ELSE] Java16\n+public class Version {\n+/*[ENDIF] Java16*/\n \n \t/**\n \t * The current build level of this package.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxODk2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r478418966", "bodyText": "The variables are automatically initialized to zero without adding the bytecodes to explicitly do this. We've removed code like this from other places in the past to (slightly) reduce the code size and improve execution speed.", "author": "pshipton", "createdAt": "2020-08-27T13:28:30Z", "path": "jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Stats.java", "diffHunk": "@@ -21,33 +20,49 @@\n  *\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n  *******************************************************************************/\n-\n package com.ibm.jvm;\n \n /**\n  * This class is used provide the following java heap and system statistics:\n- * <ul> committed heap memory\n- * <ul> used heap memory\n- * <ul> max heap memory\n- * <ul> softmx heap memory\n- * <ul> free physical memory\n- * <ul> total physical memory\n- * All this info is retrieved without any allocation of new objects\n+ * <ul>\n+ * <li>committed heap memory</li>\n+ * <li>used heap memory</li>\n+ * <li>max heap memory</li>\n+ * <li>softmx heap memory</li>\n+ * <li>free physical memory</li>\n+ * <li>total physical memory</li>\n+ * </ul>\n+ * All this info is retrieved without any allocation of new objects.\n  */\n public class Stats {\n-\tprivate long committedHeap = 0L;\n-\tprivate long usedHeap = 0L;\n-\tprivate long maxHeap = 0L;\n-\tprivate long softmxHeap = 0L;\n-\tprivate long freePhysicalMem = 0L;\n-\tprivate long totPhysicalMem = 0L;\n-\tprivate double sysLoadAvg = 0.0;\n-\tprivate long cpuTime = 0L;\n+\tprivate long committedHeap;\n+\tprivate long usedHeap;\n+\tprivate long maxHeap;\n+\tprivate long softmxHeap;\n+\tprivate long freePhysicalMem;\n+\tprivate long totPhysicalMem;\n+\tprivate double sysLoadAvg;\n+\tprivate long cpuTime;\n+\n+\t/**\n+\t * Construct a new instance.\n+\t */\n+\tpublic Stats() {\n+\t\tsuper();\n+\t\tthis.committedHeap = 0;", "originalCommit": "e1ee78e06c1ac5b699379cded2e1ec62af57b353", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "chunk": "diff --git a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Stats.java b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Stats.java\nindex c54321fa1..7a8ee7078 100644\n--- a/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Stats.java\n+++ b/jcl/src/openj9.jvm/share/classes/com/ibm/jvm/Stats.java\n\n@@ -49,14 +49,6 @@ public class Stats {\n \t */\n \tpublic Stats() {\n \t\tsuper();\n-\t\tthis.committedHeap = 0;\n-\t\tthis.usedHeap = 0;\n-\t\tthis.maxHeap = 0;\n-\t\tthis.softmxHeap = 0;\n-\t\tthis.freePhysicalMem = 0;\n-\t\tthis.totPhysicalMem = 0;\n-\t\tthis.sysLoadAvg = 0.0;\n-\t\tthis.cpuTime = 0;\n \t}\n \n \t/** To avoid allocating new objects, this function merely sets\n"}}, {"oid": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "url": "https://github.com/eclipse-openj9/openj9/commit/027af0651c4789e9b2f9d7cfb6d46e9df3271408", "message": "Add explicit default constructors\n\nFixes new warnings in jdk16:\n  warning: [missing-explicit-ctor] class in exported package declares\n  no explicit constructors, thereby exposing a default constructor to\n  clients of module\n\nIn openj9.gpu for jdk16, make constructors private and classes final.\n\nAlso fix javadoc of Stats class.\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-08-27T14:35:43Z", "type": "commit"}, {"oid": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "url": "https://github.com/eclipse-openj9/openj9/commit/027af0651c4789e9b2f9d7cfb6d46e9df3271408", "message": "Add explicit default constructors\n\nFixes new warnings in jdk16:\n  warning: [missing-explicit-ctor] class in exported package declares\n  no explicit constructors, thereby exposing a default constructor to\n  clients of module\n\nIn openj9.gpu for jdk16, make constructors private and classes final.\n\nAlso fix javadoc of Stats class.\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-08-27T14:35:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NDQ4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r478474488", "bodyText": "I'm iffy on duplicating the class definition.  How do you feel about something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n            public final class Maths {\n          \n          \n            \n            \n          \n          \n            \n            \tprivate Maths() {\n          \n          \n            \n            \t\tsuper();\n          \n          \n            \n            \t}\n          \n          \n            \n            /*[ELSE] Java16\n          \n          \n            \n            public class Maths {\n          \n          \n            \n            /*[ENDIF] Java16*/\n          \n          \n            \n            public \n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n            final \n          \n          \n            \n            /*[ENDIF] Java16*/\n          \n          \n            \n            class Maths {\n          \n          \n            \n            \n          \n          \n            \n            /*[IF Java16]*/\n          \n          \n            \n            \tprivate Maths() {\n          \n          \n            \n            \t\tsuper();\n          \n          \n            \n            \t}\n          \n          \n            \n            /*[ENDIF] Java16*/", "author": "DanHeidinga", "createdAt": "2020-08-27T14:45:13Z", "path": "jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Maths.java", "diffHunk": "@@ -30,7 +30,15 @@\n  * on any connected CUDA GPU. A successful sort operation\n  * results in the array being sorted in ascending order.\n  */\n+/*[IF Java16]*/\n+public final class Maths {\n+\n+\tprivate Maths() {\n+\t\tsuper();\n+\t}\n+/*[ELSE] Java16\n public class Maths {\n+/*[ENDIF] Java16*/", "originalCommit": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4MzczMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r478483732", "bodyText": "I tried that first but rejected it for two reasons:\n\nit involves repeating the condition\nI didn't like the formatted result (which ends up in src.zip):\n\npublic\nfinal\nclass Maths {", "author": "keithc-ca", "createdAt": "2020-08-27T14:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NDQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzNTAwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r478535004", "bodyText": "Neither is great.   I don't have a firm objection.", "author": "DanHeidinga", "createdAt": "2020-08-27T16:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NDQ4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NTU0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10450#discussion_r478475547", "bodyText": "Same question about formatting as above.  I won't repeat it here but we should do the same with all copies of the pattern", "author": "DanHeidinga", "createdAt": "2020-08-27T14:46:37Z", "path": "jcl/src/openj9.gpu/share/classes/com/ibm/gpu/Version.java", "diffHunk": "@@ -27,7 +27,15 @@\n  * The main method can be launched from the command line, which will print\n  * the current level to stdout.\n  */\n+/*[IF Java16]*/", "originalCommit": "027af0651c4789e9b2f9d7cfb6d46e9df3271408", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}