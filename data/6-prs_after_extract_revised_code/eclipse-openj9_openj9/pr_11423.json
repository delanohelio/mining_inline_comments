{"pr_number": 11423, "pr_title": "Fix implementation of String equalsIgnoreCase() and regionMatches()", "pr_createdAt": "2020-12-09T19:00:06Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MTgzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539661830", "bodyText": "As per https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#equalsIgnoreCase(java.lang.String),\nTwo characters c1 and c2 are considered the same ignoring case if at least one of the following is true:\n\nThe two characters are the same (as compared by the == operator)\nCalling Character.toLowerCase(Character.toUpperCase(char)) on each character produces the same result\n\nCharacter.toLowerCase(Character.toUpperCase(char)) can be used instead of String. toUpperCase().", "author": "JasonFengJ9", "createdAt": "2020-12-09T21:29:39Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1815,8 +1815,8 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n \t\t\tif (charAtO1Last != charAtO2Last\n-\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n-\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\t\t\t&& (Character.toLowerCase(toUpperCase(charAtO1Last)) != Character.toLowerCase(toUpperCase(charAtO2Last)))", "originalCommit": "a2d453c7d5ec2bf1c712af69ac78546fee9f8446", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3b46a4f8fddf03a378e9e3b65466eda0e74f3be", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 695d4a098..d00a0690c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1803,19 +1804,22 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t\tbyte byteAtO1 = helpers.getByteFromArrayByIndex(s1Value, o1++);\n \t\t\t\tbyte byteAtO2 = helpers.getByteFromArrayByIndex(s2Value, o2++);\n \n-\t\t\t\tif (byteAtO1 != byteAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2))) {\n+\t\t\t\tif (byteAtO1 != byteAtO2\n+\t\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2)))\n+\t\t\t\t) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n+\t\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n \t\t\tif (charAtO1Last != charAtO2Last\n-\t\t\t\t\t&& (Character.toLowerCase(toUpperCase(charAtO1Last)) != Character.toLowerCase(toUpperCase(charAtO2Last)))\n+\t\t\t\t\t&& (Character.toLowerCase(Character.toUpperCase(charAtO1Last)) != Character.toLowerCase(Character.toUpperCase(charAtO2Last)))\n \t\t\t\t\t&& (charAtO1Last <= 255 && charAtO2Last <= 255)\n \t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 16]*/\n \t\t\t\t\t&& (!Character.isLowSurrogate(charAtO1Last) || !Character.isLowSurrogate(charAtO2Last))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MzA1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539663051", "bodyText": "There are two public boolean equalsIgnoreCase(String string) within String.java, Java 8 version seems missing the fix.", "author": "JasonFengJ9", "createdAt": "2020-12-09T21:31:39Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1844,9 +1844,10 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\t\t}\n \t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 16 */\n \n-\t\t\t\tif (charAtO1 != charAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(charAtO1) != toUpperCase(charAtO2) &&\n-\t\t\t\t\t\t((charAtO1 <= 255 && charAtO2 <= 255) || Character.toLowerCase(charAtO1) != Character.toLowerCase(charAtO2))) {\n+\t\t\t\tif (charAtO1 != charAtO2\n+\t\t\t\t\t\t&& (Character.toLowerCase(toUpperCase(charAtO1)) != Character.toLowerCase(toUpperCase(charAtO2)))\n+\t\t\t\t\t\t&& (charAtO1 <= 255 && charAtO2 <= 255)\n+\t\t\t\t) {", "originalCommit": "a2d453c7d5ec2bf1c712af69ac78546fee9f8446", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDI3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539664279", "bodyText": "Please add the testcase supplied within the issue to Test_String.java.", "author": "JasonFengJ9", "createdAt": "2020-12-09T21:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MzA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MzkxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539683919", "bodyText": "There is special handling in the code for the last character. When adding tests, it can test for the turkish i as the only character (which is also the last), and also when something else is the last character.", "author": "pshipton", "createdAt": "2020-12-09T22:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MzA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3b46a4f8fddf03a378e9e3b65466eda0e74f3be", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 695d4a098..d00a0690c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1845,7 +1849,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 16 */\n \n \t\t\t\tif (charAtO1 != charAtO2\n-\t\t\t\t\t\t&& (Character.toLowerCase(toUpperCase(charAtO1)) != Character.toLowerCase(toUpperCase(charAtO2)))\n+\t\t\t\t\t\t&& (Character.toLowerCase(Character.toUpperCase(charAtO1)) != Character.toLowerCase(Character.toUpperCase(charAtO2)))\n \t\t\t\t\t\t&& (charAtO1 <= 255 && charAtO2 <= 255)\n \t\t\t\t) {\n \t\t\t\t\treturn false;\n"}}, {"oid": "a3b46a4f8fddf03a378e9e3b65466eda0e74f3be", "url": "https://github.com/eclipse-openj9/openj9/commit/a3b46a4f8fddf03a378e9e3b65466eda0e74f3be", "message": "Fix implementation of String.equalsIgnoreCase()\n\nAccording to the javadoc, compareToIgnoreCase() involves calling\nCharacter.toLowerCase(Character.toUpperCase(character)) on each\ncharacter in the string.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-09T22:23:57Z", "type": "forcePushed"}, {"oid": "027813231a0044009f45064633c2f8337b007c77", "url": "https://github.com/eclipse-openj9/openj9/commit/027813231a0044009f45064633c2f8337b007c77", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, compareToIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-09T22:57:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDgyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539724827", "bodyText": "Please add a few more testcases such as \\u0131 & \\u0130 are at middle or end of a string instead of just a single character string.\nIn addition, could you verify all test cases also pass with -XX:+CompactStrings?", "author": "JasonFengJ9", "createdAt": "2020-12-09T23:27:15Z", "path": "test/functional/Java8andUp/src/org/openj9/test/java/lang/Test_String.java", "diffHunk": "@@ -585,6 +585,8 @@ public void test_equals() {\n \t@Test\n \tpublic void test_equalsIgnoreCase() {\n \t\tAssertJUnit.assertTrue(\"lc version returned unequal to uc\", hwlc.equalsIgnoreCase(hwuc));\n+\t\tAssertJUnit.assertTrue(\"Turkish '\u0131' lc version returned unequal to '\u0130' uc\", \"\\u0131\".equalsIgnoreCase(\"\\u0130\"));\n+\t\tAssertJUnit.assertTrue(\"Turkish 'i's with 'j' lc version returned unequal to uc\", \"\\u0131\\u0049j\".equalsIgnoreCase(\"\\u0069\\u0049J\"));", "originalCommit": "027813231a0044009f45064633c2f8337b007c77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcbd73d4ae572d517af458bce687cf807eef3ccc", "chunk": "diff --git a/test/functional/Java8andUp/src/org/openj9/test/java/lang/Test_String.java b/test/functional/Java8andUp/src/org/openj9/test/java/lang/Test_String.java\nindex 043392810..b815235f0 100644\n--- a/test/functional/Java8andUp/src/org/openj9/test/java/lang/Test_String.java\n+++ b/test/functional/Java8andUp/src/org/openj9/test/java/lang/Test_String.java\n\n@@ -585,8 +585,9 @@ public class Test_String {\n \t@Test\n \tpublic void test_equalsIgnoreCase() {\n \t\tAssertJUnit.assertTrue(\"lc version returned unequal to uc\", hwlc.equalsIgnoreCase(hwuc));\n-\t\tAssertJUnit.assertTrue(\"Turkish '\u0131' lc version returned unequal to '\u0130' uc\", \"\\u0131\".equalsIgnoreCase(\"\\u0130\"));\n-\t\tAssertJUnit.assertTrue(\"Turkish 'i's with 'j' lc version returned unequal to uc\", \"\\u0131\\u0049j\".equalsIgnoreCase(\"\\u0069\\u0049J\"));\n+\t\tAssertJUnit.assertTrue(\"Turkish 'i's at beginning of string lc version returned unequal to uc\", \"\\u0131\\u0130j\".equalsIgnoreCase(\"\\u0069\\u0049J\"));\n+\t\tAssertJUnit.assertTrue(\"Turkish '\u0131' in middle of string lc version returned unequal to uc\", \"J\\u0131j\".equalsIgnoreCase(\"j\\u0130J\"));\n+\t\tAssertJUnit.assertTrue(\"Turkish '\u0131' at end of string lc version returned unequal to uc\", \"j\\u0131\".equalsIgnoreCase(\"J\\u0130\"));\n \t\tif (VersionCheck.major() >= 16) {\n \t\t\tAssertJUnit.assertTrue(\"DESERET CAPITAL LETTER LONG I returned unequal to DESERET SMALL LETTER LONG I\",\n \t\t\t\t\"\\ud801\\udc00\".equalsIgnoreCase(\"\\ud801\\udc28\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTg2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r539725864", "bodyText": "nitpick: please add parentheses for this condition, same for following similar conditions.", "author": "JasonFengJ9", "createdAt": "2020-12-09T23:29:40Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1794,29 +1794,33 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif (byteAtO1Last != byteAtO2Last", "originalCommit": "027813231a0044009f45064633c2f8337b007c77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcbd73d4ae572d517af458bce687cf807eef3ccc", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 954d2d0ac..ad5aba37e 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1818,7 +1818,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last\n+\t\t\tif ((charAtO1Last != charAtO2Last)\n \t\t\t\t\t&& (Character.toLowerCase(Character.toUpperCase(charAtO1Last)) != Character.toLowerCase(Character.toUpperCase(charAtO2Last)))\n \t\t\t\t\t&& (charAtO1Last <= 255 && charAtO2Last <= 255)\n \t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 16]*/\n"}}, {"oid": "fcbd73d4ae572d517af458bce687cf807eef3ccc", "url": "https://github.com/eclipse-openj9/openj9/commit/fcbd73d4ae572d517af458bce687cf807eef3ccc", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, compareToIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T00:07:18Z", "type": "forcePushed"}, {"oid": "4899053081b5b91862a366ced60576e426efdb08", "url": "https://github.com/eclipse-openj9/openj9/commit/4899053081b5b91862a366ced60576e426efdb08", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, compareToIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T00:07:40Z", "type": "forcePushed"}, {"oid": "0d017f1e95cd7a5bd2eee0930686e46f0e19efa6", "url": "https://github.com/eclipse-openj9/openj9/commit/0d017f1e95cd7a5bd2eee0930686e46f0e19efa6", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, compareToIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T00:13:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzkwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540167901", "bodyText": "Is this change introduced to fix an existing equalsIgnoreCase problem?\nprivate static int toUpperCase(int codePoint) invokes Character.toUpperCase() internally but avoid it for case codePoint < 128 apparently for performance reason.", "author": "JasonFengJ9", "createdAt": "2020-12-10T13:28:28Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1794,29 +1794,33 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif ((byteAtO1Last != byteAtO2Last)\n+\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))", "originalCommit": "0d017f1e95cd7a5bd2eee0930686e46f0e19efa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxOTk2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540319966", "bodyText": "I tested locally with toUpperCase(int codePoint) and Character.toUpperCase() and the simple test case results were the same. So it seems it would be better to keep the existing toUpperCase(int codePoint) usage, for performance purposes.\nThis makes me think that we should use Character.toLowerCase(toUpperCase(int codePoint)) in the spots where we're now using Character.toLowerCase(Character.toUpperCase()).", "author": "sharon-wang", "createdAt": "2020-12-10T16:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMTU1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540331554", "bodyText": "This makes me think that we should use Character.toLowerCase(toUpperCase(int codePoint)) in the spots where we're now using Character.toLowerCase(Character.toUpperCase()).\n\nYup, probably can go toLowerCase(toUpperCase(int codePoint)).", "author": "JasonFengJ9", "createdAt": "2020-12-10T16:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNjExMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540336110", "bodyText": "In addition, it seems String.compareToIgnoreCase() is doing the right thing, but could you add a test for it against the Turkish characters reported as well?", "author": "JasonFengJ9", "createdAt": "2020-12-10T16:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NzkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f905c41037187db1169c4bac2d609ce1f17051e", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 2d3694415..0ba6b4375 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1795,7 +1795,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n \t\t\tif ((byteAtO1Last != byteAtO2Last)\n-\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n \t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3ODU5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540178593", "bodyText": "Existing code checks (charAtO1Last <= 255 && charAtO2Last <= 255) along with || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last)), now it is required alone as one of conditions, it doesn't seem right.\nDoes this change pass a personal build test suite like sanity.functional?", "author": "JasonFengJ9", "createdAt": "2020-12-10T13:43:57Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1794,29 +1794,33 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif ((byteAtO1Last != byteAtO2Last)\n+\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tbyte byteAtO1 = helpers.getByteFromArrayByIndex(s1Value, o1++);\n \t\t\t\tbyte byteAtO2 = helpers.getByteFromArrayByIndex(s2Value, o2++);\n \n-\t\t\t\tif (byteAtO1 != byteAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2))) {\n+\t\t\t\tif ((byteAtO1 != byteAtO2)\n+\t\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2)))\n+\t\t\t\t) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n+\t\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last\n-\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n-\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))\n+\t\t\tif ((charAtO1Last != charAtO2Last)\n+\t\t\t\t\t&& (Character.toLowerCase(Character.toUpperCase(charAtO1Last)) != Character.toLowerCase(Character.toUpperCase(charAtO2Last)))\n+\t\t\t\t\t&& (charAtO1Last <= 255 && charAtO2Last <= 255)", "originalCommit": "0d017f1e95cd7a5bd2eee0930686e46f0e19efa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM0MDk4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540340983", "bodyText": "Currently waiting on the results of my personal build test suite with the current pushed changes, will update once available.\nIn the meantime, I tested locally using (char1 != char2) && (compareValue(char1) != compareValue(char2) (removed (charAtO1Last <= 255 && charAtO2Last <= 255) and swapped Character.toLowerCase(Character.toUpperCase() with compareValue()), and the expected behaviour was seen. This logic is currently being used here on line 1839:\nhttps://github.com/eclipse/openj9/blob/f2e8dfa4346808869c9e47822f725a10678ac97d/jcl/src/java.base/share/classes/java/lang/String.java#L1836-L1841\ncompareValue(char/int/byte) internally calls Character.toLowerCase(Character.toUpperCase(char/int/byte))\nhttps://github.com/eclipse/openj9/blob/f2e8dfa4346808869c9e47822f725a10678ac97d/jcl/src/java.base/share/classes/java/lang/String.java#L1457-L1478\nI'll run another build with these changes to confirm if it's functionally correct.", "author": "sharon-wang", "createdAt": "2020-12-10T17:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3ODU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUxMTIzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540511231", "bodyText": "Both the build with the currently pushed code and the build with my local changes passed sanity.functional. Will be pushing my local changes, which contain the modifications discussed in the review comments.", "author": "sharon-wang", "createdAt": "2020-12-10T21:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3ODU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8f905c41037187db1169c4bac2d609ce1f17051e", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 2d3694415..0ba6b4375 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1795,7 +1795,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n \t\t\tif ((byteAtO1Last != byteAtO2Last)\n-\t\t\t\t\t&& (Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != Character.toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n \t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n"}}, {"oid": "8f905c41037187db1169c4bac2d609ce1f17051e", "url": "https://github.com/eclipse-openj9/openj9/commit/8f905c41037187db1169c4bac2d609ce1f17051e", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, compareToIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for compareToIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>\n\nUse compareValue and add test for compareToIgnoreCase\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T21:32:05Z", "type": "forcePushed"}, {"oid": "84407042cb3ff41759de3ad4278dcca19db4d14f", "url": "https://github.com/eclipse-openj9/openj9/commit/84407042cb3ff41759de3ad4278dcca19db4d14f", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>\n\nUse compareValue and add test for compareToIgnoreCase\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T21:36:41Z", "type": "forcePushed"}, {"oid": "e3cbba5afe91a074cb47dfa42102600facd7b82d", "url": "https://github.com/eclipse-openj9/openj9/commit/e3cbba5afe91a074cb47dfa42102600facd7b82d", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>\n\nUse compareValue and add test for compareToIgnoreCase\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-10T21:40:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MTc2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540651761", "bodyText": "Pls fix the comment, which mentions lower case although the code uses upper case.", "author": "pshipton", "createdAt": "2020-12-11T02:52:10Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1794,29 +1794,32 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);", "originalCommit": "e3cbba5afe91a074cb47dfa42102600facd7b82d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91c9e0a2a8f3271695dd804980641ba26d1316f6", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 0ba6b4375..71c6ee45c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1789,8 +1789,10 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\tbyte[] s2Value = s2.value;\n \n \t\tif (enableCompression && (null == compressionFlag || (s1.coder | s2.coder) == LATIN1)) {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// Under string compression, the compressible char set obeys 1-1 mapping for upper/lower case,\n+\t\t\t// converting to upper cases then compare should be sufficient.\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1MjkwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540652900", "bodyText": "Pls fix comment here as well.", "author": "pshipton", "createdAt": "2020-12-11T02:55:34Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -5811,17 +5818,19 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);", "originalCommit": "e3cbba5afe91a074cb47dfa42102600facd7b82d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91c9e0a2a8f3271695dd804980641ba26d1316f6", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 0ba6b4375..71c6ee45c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -5814,7 +5816,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t// Compare the last chars.\n \t\t\t// In order to tell 2 chars are different:\n \t\t\t// Under string compression, the compressible char set obeys 1-1 mapping for upper/lower case,\n-\t\t\t// converting to lower cases then compare should be sufficient.\n+\t\t\t// converting to upper cases then compare should be sufficient.\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1Njk0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540656948", "bodyText": "@fjeremic fyi. We're losing the <= 256 optimization here, do you think it's worth putting this into compareValue()?", "author": "pshipton", "createdAt": "2020-12-11T03:07:37Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1794,29 +1794,32 @@ public boolean equalsIgnoreCase(String string) {\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif ((byteAtO1Last != byteAtO2Last)\n+\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tbyte byteAtO1 = helpers.getByteFromArrayByIndex(s1Value, o1++);\n \t\t\t\tbyte byteAtO2 = helpers.getByteFromArrayByIndex(s2Value, o2++);\n \n-\t\t\t\tif (byteAtO1 != byteAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2))) {\n+\t\t\t\tif ((byteAtO1 != byteAtO2)\n+\t\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2)))\n+\t\t\t\t) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n+\t\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n \t\t\tchar charAtO1Last = s1.charAtInternal(s1len - 1, s1Value);\n \t\t\tchar charAtO2Last = s2.charAtInternal(s1len - 1, s2Value);\n \n-\t\t\tif (charAtO1Last != charAtO2Last\n-\t\t\t\t\t&& toUpperCase(charAtO1Last) != toUpperCase(charAtO2Last)\n-\t\t\t\t\t&& ((charAtO1Last <= 255 && charAtO2Last <= 255) || Character.toLowerCase(charAtO1Last) != Character.toLowerCase(charAtO2Last))", "originalCommit": "e3cbba5afe91a074cb47dfa42102600facd7b82d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1NzMzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540657336", "bodyText": "I guess that doesn't work as is, we'll have to create a new helper function that takes both chars.", "author": "pshipton", "createdAt": "2020-12-11T03:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1Njk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4Nzc4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541087783", "bodyText": "Yeah should be fine as the check has moved into charValuesEqualIgnoreCase.", "author": "fjeremic", "createdAt": "2020-12-11T16:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY1Njk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "91c9e0a2a8f3271695dd804980641ba26d1316f6", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 0ba6b4375..71c6ee45c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1789,8 +1789,10 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\tbyte[] s2Value = s2.value;\n \n \t\tif (enableCompression && (null == compressionFlag || (s1.coder | s2.coder) == LATIN1)) {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// Under string compression, the compressible char set obeys 1-1 mapping for upper/lower case,\n+\t\t\t// converting to upper cases then compare should be sufficient.\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n"}}, {"oid": "91c9e0a2a8f3271695dd804980641ba26d1316f6", "url": "https://github.com/eclipse-openj9/openj9/commit/91c9e0a2a8f3271695dd804980641ba26d1316f6", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>\n\nUse compareValue and add test for compareToIgnoreCase\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-11T04:59:24Z", "type": "forcePushed"}, {"oid": "c51e721bbb40290fd647a0da64a22d05a26aec49", "url": "https://github.com/eclipse-openj9/openj9/commit/c51e721bbb40290fd647a0da64a22d05a26aec49", "message": "Use new helper charValuesEqual() for case insensitive char compare\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-11T07:15:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczOTY0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540739642", "bodyText": "@pshipton Here's the new helper. This is now being used anytime we are checking equality for two chars in equalsIgnoreCase() and regionMatches().\nI've locally tested against the test cases in this PR (expected results are seen), but can run a sanity.functional test build if preferred.", "author": "sharon-wang", "createdAt": "2020-12-11T07:20:42Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1477,6 +1477,27 @@ private char compareValue(byte b) {\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n+\tprivate boolean charValuesEqual(char c1, char c2) {\n+\t\tboolean charValuesEqual = false;\n+\n+\t\tif (c1 == c2) {\n+\t\t\tcharValuesEqual = true;\n+\t\t} else {\n+\t\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n+\t\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n+\t\t\tchar c1upper = (char) toUpperCase(c1);\n+\t\t\tchar c2upper = (char) toUpperCase(c2);\n+\n+\t\t\tif (((c1 <= 255 || c2 <= 255) && (c1upper == c2upper))\n+\t\t\t\t\t|| (toLowerCase(c1upper) == toLowerCase(c2upper))\n+\t\t\t) {\n+\t\t\t\tcharValuesEqual = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn charValuesEqual;\n+\t}\n+", "originalCommit": "c51e721bbb40290fd647a0da64a22d05a26aec49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NzgzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r540987839", "bodyText": "Local testing is fine. I'll be running PR testing anyway.", "author": "pshipton", "createdAt": "2020-12-11T14:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczOTY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex a2cdbabe0..1bb56c9b6 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1477,7 +1477,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n-\tprivate boolean charValuesEqual(char c1, char c2) {\n+\tprivate boolean charValuesEqualIgnoreCase(char c1, char c2) {\n \t\tboolean charValuesEqual = false;\n \n \t\tif (c1 == c2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNDQzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541034430", "bodyText": "Is this change required for functional correctness at enableCompression cases? i.e., does the testcase failed with -XX:+CompactStrings as well? Otherwise, additional toLowerCase() checking is being introduced here.", "author": "JasonFengJ9", "createdAt": "2020-12-11T15:37:16Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1789,34 +1810,38 @@ public boolean equalsIgnoreCase(String string) {\n \t\tbyte[] s2Value = s2.value;\n \n \t\tif (enableCompression && (null == compressionFlag || (s1.coder | s2.coder) == LATIN1)) {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// Under string compression, the compressible char set obeys 1-1 mapping for upper/lower case,\n+\t\t\t// converting to upper cases then compare should be sufficient.\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif ((byteAtO1Last != byteAtO2Last)\n+\t\t\t\t\t&& (!charValuesEqual(helpers.byteToCharUnsigned(byteAtO1Last), helpers.byteToCharUnsigned(byteAtO2Last)))", "originalCommit": "c51e721bbb40290fd647a0da64a22d05a26aec49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3MzcyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541073724", "bodyText": "The testcase from the issue fails with -XX:+CompactStrings, but the failure is not occurring in the enableCompression code. The failure is still in the \"regular\" equalsIgnoreCase()/regionMatches() code when -XX:+CompactStrings is used.\nSo functionally, charValuesEqual() is not necessary for enableCompression cases (does an extra toLowerCase() check) -- I'll revert to the original.", "author": "sharon-wang", "createdAt": "2020-12-11T16:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex a2cdbabe0..1bb56c9b6 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1818,7 +1818,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n \t\t\tif ((byteAtO1Last != byteAtO2Last)\n-\t\t\t\t\t&& (!charValuesEqual(helpers.byteToCharUnsigned(byteAtO1Last), helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n \t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNTM1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541035350", "bodyText": "Similar question here and also for later enableCompression cases.", "author": "JasonFengJ9", "createdAt": "2020-12-11T15:38:28Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1789,34 +1810,38 @@ public boolean equalsIgnoreCase(String string) {\n \t\tbyte[] s2Value = s2.value;\n \n \t\tif (enableCompression && (null == compressionFlag || (s1.coder | s2.coder) == LATIN1)) {\n-\t\t\t// Compare the last chars. Under string compression, the compressible char set obeys 1-1 mapping for upper/lower\n-\t\t\t// case, converting to lower cases then compare should be sufficient.\n+\t\t\t// Compare the last chars.\n+\t\t\t// In order to tell 2 chars are different:\n+\t\t\t// Under string compression, the compressible char set obeys 1-1 mapping for upper/lower case,\n+\t\t\t// converting to upper cases then compare should be sufficient.\n \t\t\tbyte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len - 1);\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n-\t\t\tif (byteAtO1Last != byteAtO2Last &&\n-\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last))) {\n+\t\t\tif ((byteAtO1Last != byteAtO2Last)\n+\t\t\t\t\t&& (!charValuesEqual(helpers.byteToCharUnsigned(byteAtO1Last), helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n \n \t\t\twhile (o1 < end - 1) {\n \t\t\t\tbyte byteAtO1 = helpers.getByteFromArrayByIndex(s1Value, o1++);\n \t\t\t\tbyte byteAtO2 = helpers.getByteFromArrayByIndex(s2Value, o2++);\n \n-\t\t\t\tif (byteAtO1 != byteAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(helpers.byteToCharUnsigned(byteAtO1)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2))) {\n+\t\t\t\tif ((byteAtO1 != byteAtO2)\n+\t\t\t\t\t\t&& (!charValuesEqual(helpers.byteToCharUnsigned(byteAtO1), helpers.byteToCharUnsigned(byteAtO2)))", "originalCommit": "c51e721bbb40290fd647a0da64a22d05a26aec49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex a2cdbabe0..1bb56c9b6 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1818,7 +1818,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\tbyte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len - 1);\n \n \t\t\tif ((byteAtO1Last != byteAtO2Last)\n-\t\t\t\t\t&& (!charValuesEqual(helpers.byteToCharUnsigned(byteAtO1Last), helpers.byteToCharUnsigned(byteAtO2Last)))\n+\t\t\t\t\t&& (toUpperCase(helpers.byteToCharUnsigned(byteAtO1Last)) != toUpperCase(helpers.byteToCharUnsigned(byteAtO2Last)))\n \t\t\t) {\n \t\t\t\treturn false;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541040531", "bodyText": "This method name might be mis-leading, it really means charValuesEqualIgnoreCase, right?", "author": "JasonFengJ9", "createdAt": "2020-12-11T15:45:31Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1477,6 +1477,27 @@ private char compareValue(byte b) {\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n+\tprivate boolean charValuesEqual(char c1, char c2) {", "originalCommit": "c51e721bbb40290fd647a0da64a22d05a26aec49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4NDQ0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541084442", "bodyText": "This method should also be static as it does not use any fields.", "author": "fjeremic", "createdAt": "2020-12-11T16:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTMxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541091312", "bodyText": "This method is missing in Java 8 pConfig.", "author": "JasonFengJ9", "createdAt": "2020-12-11T17:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNjg1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541336855", "bodyText": "Added this method to the Java 8 section of String; made compareValue(int/char/byte) in Java 9+ section static as well, since they do not use any non-static fields (the Java 8 versions are already static).", "author": "sharon-wang", "createdAt": "2020-12-11T21:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex a2cdbabe0..1bb56c9b6 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1477,7 +1477,7 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n-\tprivate boolean charValuesEqual(char c1, char c2) {\n+\tprivate boolean charValuesEqualIgnoreCase(char c1, char c2) {\n \t\tboolean charValuesEqual = false;\n \n \t\tif (c1 == c2) {\n"}}, {"oid": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "url": "https://github.com/eclipse-openj9/openj9/commit/823e1c6296b9aca33f215c2e088c37d502ecc6da", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\nUse new helper charValuesEqualIgnoreCase() to compare if two\ncharacters are equal (case insensitive).\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-11T16:46:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODEzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541088132", "bodyText": "Is it possible to change this to static?", "author": "fjeremic", "createdAt": "2020-12-11T16:55:31Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -1477,6 +1477,27 @@ private char compareValue(byte b) {\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n+\tprivate boolean charValuesEqualIgnoreCase(char c1, char c2) {", "originalCommit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NzEyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541267123", "bodyText": "Yes, updated", "author": "sharon-wang", "createdAt": "2020-12-11T20:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "7a3bd0284c8488baf64703647b57ec5572c78a5e", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 1bb56c9b6..5fcf4949c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -1477,22 +1477,17 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\treturn Character.toLowerCase(Character.toUpperCase(helpers.byteToCharUnsigned(b)));\n \t}\n \n-\tprivate boolean charValuesEqualIgnoreCase(char c1, char c2) {\n+\tprivate static boolean charValuesEqualIgnoreCase(char c1, char c2) {\n \t\tboolean charValuesEqual = false;\n-\n-\t\tif (c1 == c2) {\n+\t\tchar c1upper = (char) toUpperCase(c1);\n+\t\tchar c2upper = (char) toUpperCase(c2);\n+\n+\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n+\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n+\t\tif (((c1 <= 255 || c2 <= 255) && (c1upper == c2upper))\n+\t\t\t\t|| (toLowerCase(c1upper) == toLowerCase(c2upper))\n+\t\t) {\n \t\t\tcharValuesEqual = true;\n-\t\t} else {\n-\t\t\t// If at least one char is ASCII, converting to upper cases then compare should be sufficient.\n-\t\t\t// If both chars are not in ASCII char set, need to convert to lower case and compare as well.\n-\t\t\tchar c1upper = (char) toUpperCase(c1);\n-\t\t\tchar c2upper = (char) toUpperCase(c2);\n-\n-\t\t\tif (((c1 <= 255 || c2 <= 255) && (c1upper == c2upper))\n-\t\t\t\t\t|| (toLowerCase(c1upper) == toLowerCase(c2upper))\n-\t\t\t) {\n-\t\t\t\tcharValuesEqual = true;\n-\t\t\t}\n \t\t}\n \n \t\treturn charValuesEqual;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTAwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541091002", "bodyText": "I think we may be missing the charAtO1 != charAtO2 check here. I see the check is duplicated in charValuesEqualIgnoreCase which seems suboptimal. I think we should take the check out of charValuesEqualIgnoreCase and always perform it upfront before calling charValuesEqualIgnoreCase, otherwise performance will suck.", "author": "fjeremic", "createdAt": "2020-12-11T16:59:42Z", "path": "jcl/src/java.base/share/classes/java/lang/String.java", "diffHunk": "@@ -2485,15 +2510,15 @@ public boolean regionMatches(boolean ignoreCase, int thisStart, String string, i\n \t\t\t\tif (Character.isHighSurrogate(charAtO1) && Character.isHighSurrogate(charAtO2) && (o1 < end)) {\n \t\t\t\t\tint codepointAtO1 = Character.toCodePoint(charAtO1, s1.charAtInternal(o1++, s1Value));\n \t\t\t\t\tint codepointAtO2 = Character.toCodePoint(charAtO2, s2.charAtInternal(o2++, s2Value));\n-\t\t\t\t\tif ((codepointAtO1 != codepointAtO2) && (compareValue(codepointAtO1) != compareValue(codepointAtO2))) {\n+\t\t\t\t\tif ((codepointAtO1 != codepointAtO2)\n+\t\t\t\t\t\t\t&& (compareValue(codepointAtO1) != compareValue(codepointAtO2))\n+\t\t\t\t\t) {\n \t\t\t\t\t\treturn false;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 16 */\n \n-\t\t\t\tif (charAtO1 != charAtO2 &&\n-\t\t\t\t\t\ttoUpperCase(charAtO1) != toUpperCase(charAtO2) &&\n-\t\t\t\t\t\ttoLowerCase(charAtO1) != toLowerCase(charAtO2)) {\n+\t\t\t\tif (!charValuesEqualIgnoreCase(charAtO1, charAtO2)) {", "originalCommit": "823e1c6296b9aca33f215c2e088c37d502ecc6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2Nzk1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11423#discussion_r541267950", "bodyText": "Moved the char1 != char2 check back outside of charValuesEqualIgnoreCase()", "author": "sharon-wang", "createdAt": "2020-12-11T20:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "7a3bd0284c8488baf64703647b57ec5572c78a5e", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/String.java b/jcl/src/java.base/share/classes/java/lang/String.java\nindex 1bb56c9b6..5fcf4949c 100644\n--- a/jcl/src/java.base/share/classes/java/lang/String.java\n+++ b/jcl/src/java.base/share/classes/java/lang/String.java\n\n@@ -2518,7 +2516,9 @@ public final class String implements Serializable, Comparable<String>, CharSeque\n \t\t\t\t}\n \t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 16 */\n \n-\t\t\t\tif (!charValuesEqualIgnoreCase(charAtO1, charAtO2)) {\n+\t\t\t\tif ((charAtO1 != charAtO2)\n+\t\t\t\t\t\t&& (!charValuesEqualIgnoreCase(charAtO1, charAtO2))\n+\t\t\t\t) {\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t}\n"}}, {"oid": "7a3bd0284c8488baf64703647b57ec5572c78a5e", "url": "https://github.com/eclipse-openj9/openj9/commit/7a3bd0284c8488baf64703647b57ec5572c78a5e", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\nUse new helper charValuesEqualIgnoreCase() to compare if two\ncharacters are equal (case insensitive).\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-11T20:39:41Z", "type": "forcePushed"}, {"oid": "ce0fa8c09f6673df8afe67deab9ec223df74f726", "url": "https://github.com/eclipse-openj9/openj9/commit/ce0fa8c09f6673df8afe67deab9ec223df74f726", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\nUse new helper charValuesEqualIgnoreCase() to compare if two\ncharacters are equal (case insensitive).\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-11T21:53:07Z", "type": "forcePushed"}, {"oid": "093e96f2a37564b2cf261d9df40d98b5fe468d42", "url": "https://github.com/eclipse-openj9/openj9/commit/093e96f2a37564b2cf261d9df40d98b5fe468d42", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\nUse new helper charValuesEqualIgnoreCase() to compare if two\ncharacters are equal (case insensitive).\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-14T16:47:14Z", "type": "commit"}, {"oid": "093e96f2a37564b2cf261d9df40d98b5fe468d42", "url": "https://github.com/eclipse-openj9/openj9/commit/093e96f2a37564b2cf261d9df40d98b5fe468d42", "message": "Fix String equalsIgnoreCase() and regionMatches() implementations\n\nAccording to the javadoc, equalsIgnoreCase() and regionMatches()\nboth involve calling\n    `Character.toLowerCase(Character.toUpperCase(character))`\non each character in the string.\n\nAdd tests with Turkish characters for equalsIgnoreCase(),\nregionMatches() and compareToIgnoreCase().\n\nUse new helper charValuesEqualIgnoreCase() to compare if two\ncharacters are equal (case insensitive).\n\n[skip ci]\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-12-14T16:47:14Z", "type": "forcePushed"}]}