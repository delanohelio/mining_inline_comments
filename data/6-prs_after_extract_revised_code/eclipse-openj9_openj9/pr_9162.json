{"pr_number": 9162, "pr_title": "Assume java.base for the module of a null caller class", "pr_createdAt": "2020-04-07T19:22:28Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9162", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NzQ5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9162#discussion_r405097494", "bodyText": "Why add the new API in VM?  Wouldn't doing Class.class.getModule() here work?", "author": "DanHeidinga", "createdAt": "2020-04-07T20:38:37Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -2019,7 +2019,9 @@ private boolean useModularSearch(String absoluteResName, Module thisModule, Clas\n \tboolean visible = false;\n \n \tif (thisModule.isNamed()) {\n-\t\tfinal Module callerModule = callerClass.getModule();\n+\t\t// when the caller class is null, assuming it is loaded by module java.base\n+\t\t// See https://github.com/eclipse/openj9/issues/8993 for more info\n+\t\tfinal Module callerModule = callerClass == null ? VM.getJavabaseModule() : callerClass.getModule();", "originalCommit": "d0ebfe650e436c9fac3a4a3c714ecfd74b560654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNTUzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9162#discussion_r405125532", "bodyText": "Class.class.getModule() works as well. VM.getJavabaseModule() intended to cache the java.base module and avoid repetition of Class.class.getModule().\nDepending on the number of calls j.l.Class.useModularSearch(), the saving might vary.\nIf it is not preferred to add a new API in VM,  Class.class.getModule() can be used instead.", "author": "JasonFengJ9", "createdAt": "2020-04-07T21:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NzQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxMzg5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9162#discussion_r405213890", "bodyText": "getModule() is a simple getter, so it's faster than the cache code anyway. Only a final static would be faster, and that only by a few bytecodes.", "author": "gacholio", "createdAt": "2020-04-08T01:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NzQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxOTQxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9162#discussion_r405219412", "bodyText": "Agreed, PR updated.\n@DanHeidinga @gacholio please have another look.", "author": "JasonFengJ9", "createdAt": "2020-04-08T02:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "530fa285185d07431a4d78df9c94ba6954ff17cd", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 99eba0206..3b6390551 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -2021,7 +2021,7 @@ private boolean useModularSearch(String absoluteResName, Module thisModule, Clas\n \tif (thisModule.isNamed()) {\n \t\t// when the caller class is null, assuming it is loaded by module java.base\n \t\t// See https://github.com/eclipse/openj9/issues/8993 for more info\n-\t\tfinal Module callerModule = callerClass == null ? VM.getJavabaseModule() : callerClass.getModule();\n+\t\tfinal Module callerModule = callerClass == null ? Class.class.getModule() : callerClass.getModule();\n \t\tvisible = (thisModule == callerModule);\n \t\tif (!visible) {\n \t\t\tvisible = absoluteResName.endsWith(\".class\"); //$NON-NLS-1$\n"}}, {"oid": "530fa285185d07431a4d78df9c94ba6954ff17cd", "url": "https://github.com/eclipse-openj9/openj9/commit/530fa285185d07431a4d78df9c94ba6954ff17cd", "message": "Assume java.base for the module of a null caller class\n\nSystem.getCallerClass() might return a null caller class for a caller\nwithin a JVMTI callback function when\nwalkStackFrames()/cInterpGetStackClassJEP176Iterator() walked off the\nend of the stack. Refer #8993 for more info;\nIn such case, assume java.base for the module of such callers.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-04-08T02:10:33Z", "type": "forcePushed"}, {"oid": "540eb30673d1b84e8c5efbf400e70e98da710fd0", "url": "https://github.com/eclipse-openj9/openj9/commit/540eb30673d1b84e8c5efbf400e70e98da710fd0", "message": "Assume java.base for the module of a null caller class\n\nSystem.getCallerClass() might return a null caller class for a caller\nwithin a JVMTI callback function when\nwalkStackFrames()/cInterpGetStackClassJEP176Iterator() walked off the\nend of the stack. Refer #8993 for more info;\nIn such case, assume java.base for the module of such callers.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-04-08T02:14:04Z", "type": "commit"}, {"oid": "540eb30673d1b84e8c5efbf400e70e98da710fd0", "url": "https://github.com/eclipse-openj9/openj9/commit/540eb30673d1b84e8c5efbf400e70e98da710fd0", "message": "Assume java.base for the module of a null caller class\n\nSystem.getCallerClass() might return a null caller class for a caller\nwithin a JVMTI callback function when\nwalkStackFrames()/cInterpGetStackClassJEP176Iterator() walked off the\nend of the stack. Refer #8993 for more info;\nIn such case, assume java.base for the module of such callers.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-04-08T02:14:04Z", "type": "forcePushed"}]}