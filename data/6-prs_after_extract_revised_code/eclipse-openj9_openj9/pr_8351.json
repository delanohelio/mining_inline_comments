{"pr_number": 8351, "pr_title": "JEP 359 Part 2: Class.getRecordComponents", "pr_createdAt": "2020-01-20T21:49:10Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8351", "timeline": [{"oid": "3a8f486d2f634f4fcd2135fc84e6ee01115dd452", "url": "https://github.com/eclipse-openj9/openj9/commit/3a8f486d2f634f4fcd2135fc84e6ee01115dd452", "message": "JEP 359 Class.getRecordComponents\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-01-20T22:01:06Z", "type": "forcePushed"}, {"oid": "ab79d5f5a953145a9eab5d3d060425ca65e952d3", "url": "https://github.com/eclipse-openj9/openj9/commit/ab79d5f5a953145a9eab5d3d060425ca65e952d3", "message": "JEP 359 Class.getRecordComponents\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-01-20T22:02:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8351#discussion_r375210404", "bodyText": "Is the For a class that is not a record, null is returned. case handled in the native?  Wouldn't it be easier (and faster) to do the isRecord() before calling the native?", "author": "DanHeidinga", "createdAt": "2020-02-05T11:48:46Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -4707,11 +4711,22 @@ public boolean isRecord() {\n \t * Returns an array of RecordComponent objects for a record class.\n \t * \n \t * @return array of RecordComponent objects, one for each component in the record.\n-\t * For a class that is not a record an empty array is returned.\n+\t * For a class that is not a record, null is returned.\n \t * For a record with no components an empty array is returned.\n+\t * \n+\t * @throws SecurityException \n \t */\n+\t@CallerSensitive\n \tpublic RecordComponent[] getRecordComponents() {\n-\t\tthrow new InternalError(\"Compile stub invoked! For JEP 359 support see https://github.com/eclipse/openj9/pull/7946\"); //$NON-NLS-1$\n+\t\tSecurityManager security = System.getSecurityManager();\n+\t\tif (security != null) {\n+\t\t\tClassLoader callerClassLoader = ClassLoader.getStackClassLoader(1);\n+\t\t\tcheckMemberAccess(security, callerClassLoader, Member.DECLARED);\n+\t\t}\n+\n+\t\treturn getRecordComponentsImpl();", "originalCommit": "ab79d5f5a953145a9eab5d3d060425ca65e952d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NzM1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8351#discussion_r375367355", "bodyText": "Yes that case is handled in getRecordComponentsImpl. My thought was since isRecord() is also a native it would make more sense to have only one native call here instead of two.", "author": "theresa-m", "createdAt": "2020-02-05T16:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4ODcxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8351#discussion_r375388714", "bodyText": "It's, after jitting, a FastJNI that will run quickly.  Much cheaper than the getRecordComponentsImpl JNI call", "author": "DanHeidinga", "createdAt": "2020-02-05T17:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "951d4e9955f51183de08fea5cccedd4631f301ef", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 08dff3a05..ab51dc838 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -4724,6 +4724,10 @@ public Class<?>[] getNestMembers() throws LinkageError, SecurityException {\n \t\t\tcheckMemberAccess(security, callerClassLoader, Member.DECLARED);\n \t\t}\n \n+\t\tif (!isRecord()) {\n+\t\t\treturn null;\n+\t\t}\n+\n \t\treturn getRecordComponentsImpl();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NzY5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8351#discussion_r375297699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String signature, Class annotationsClass, Class typeAnnotationsClass) throws Throwable {\n          \n          \n            \n                                String signature, Class<?> annotationsClass, Class<?> typeAnnotationsClass) throws Throwable {", "author": "DanHeidinga", "createdAt": "2020-02-05T14:45:45Z", "path": "test/functional/Java14andUp/src/org/openj9/test/java/lang/Test_Class.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package org.openj9.test.java.lang;\n+\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+import org.testng.annotations.Test;\n+import org.testng.log4testng.Logger;\n+\n+import org.testng.AssertJUnit;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.AnnotatedType;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.RecordComponent;\n+\n+import org.openj9.test.utilities.RecordClassGenerator;\n+import org.openj9.test.utilities.CustomClassLoader;\n+\n+/**\n+ * Test JCL additions to java.lang.Class from JEP 359: Records preview.\n+ * \n+ * New methods include:\n+ * - boolean isRecord()\n+ * - Object[] getRecordComponents()\n+ */\n+\n+ @Test(groups = { \"level.sanity\" })\n+ public class Test_Class {\n+    /* annotations */\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Inherited()\n+    @interface TestAnnotation {}\n+\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE_USE)\n+    @interface TestTypeAnnotation {}\n+\n+    /* Test classes and records */\n+    class TestClass {}\n+    record TestRecordEmpty() {}\n+    record TestRecordPrim(int x, long y) {}\n+    record TestRecordObj(String x, Double y, Object[] z) {}\n+    record TestRecordWithAnnotation(@TestAnnotation int x) {}\n+    record TestRecordWithTypeAnnotation(@TestTypeAnnotation int x) {}\n+    record TestRecordWithMultipleAnnotations(@TestAnnotation @TestTypeAnnotation int x) {}\n+\n+    /* constants for asm tests */\n+    String name = \"TestRecordComponents\";\n+    String rcName = \"x\";\n+    String rcType = \"I\";\n+    String rcSignature = \"I\";\n+\n+    @Test\n+    public void test_isRecord() {\n+        AssertJUnit.assertTrue(\"TestRecordEmpty is a record\", TestRecordEmpty.class.isRecord());\n+        AssertJUnit.assertTrue(\"TestClass is not a record\", !TestClass.class.isRecord());\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_nonRecordClass() throws Throwable {\n+        RecordComponent[] rc = TestClass.class.getRecordComponents();\n+        AssertJUnit.assertNull(rc);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_recordWithNoComponents() throws Throwable {\n+        /* record with no components */\n+        RecordComponent[] rc1 = TestRecordEmpty.class.getRecordComponents();\n+        AssertJUnit.assertEquals(0, rc1.length);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_noOptionalAttributes() throws Throwable {\n+        /* record with primitive type components */\n+        RecordComponent[] rc2 = TestRecordPrim.class.getRecordComponents();\n+        AssertJUnit.assertEquals(2, rc2.length);\n+        test_RecordComponentContents_noAttributes(rc2[0], TestRecordPrim.class, \"x\", int.class);\n+        test_RecordComponentContents_noAttributes(rc2[1], TestRecordPrim.class, \"y\", long.class);\n+\n+        /* record with Object components */\n+        RecordComponent[] rc3 = TestRecordObj.class.getRecordComponents();\n+        AssertJUnit.assertEquals(3, rc3.length);\n+        test_RecordComponentContents_noAttributes(rc3[0], TestRecordObj.class, \"x\", String.class);\n+        test_RecordComponentContents_noAttributes(rc3[1], TestRecordObj.class, \"y\", Double.class);\n+        test_RecordComponentContents_noAttributes(rc3[2], TestRecordObj.class, \"z\", Object[].class);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_signatureAttribute() throws Throwable {\n+        CustomClassLoader classloader = new CustomClassLoader();\n+        byte[] bytes = RecordClassGenerator.generateRecordAttributes(name, rcName, rcType, rcSignature);\n+        Class<?> clazz = classloader.getClass(name, bytes);\n+\n+        RecordComponent[] rc = clazz.getRecordComponents();\n+        AssertJUnit.assertEquals(1, rc.length);\n+        test_RecordComponentContents(rc[0], clazz, rcName, int.class, rcSignature, null, null);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_annotationsAttribute() throws Throwable {\n+        RecordComponent[] rc = TestRecordWithAnnotation.class.getRecordComponents();\n+        AssertJUnit.assertEquals(1, rc.length);\n+        test_RecordComponentContents(rc[0], TestRecordWithAnnotation.class, rcName, int.class, null, TestAnnotation.class, null);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_typeAnnotationsAttribute() throws Throwable {\n+        RecordComponent[] rc = TestRecordWithTypeAnnotation.class.getRecordComponents();\n+        AssertJUnit.assertEquals(1, rc.length);\n+        test_RecordComponentContents(rc[0], TestRecordWithTypeAnnotation.class, rcName, int.class, null, null, TestTypeAnnotation.class);\n+    }\n+\n+    @Test\n+    public void test_getRecordComponent_multipleAttributes() throws Throwable {\n+        RecordComponent[] rc = TestRecordWithMultipleAnnotations.class.getRecordComponents();\n+        AssertJUnit.assertEquals(1, rc.length);\n+        test_RecordComponentContents(rc[0], TestRecordWithMultipleAnnotations.class, rcName, int.class, null, TestAnnotation.class, TestTypeAnnotation.class);\n+    }\n+\n+    private void test_RecordComponentContents_noAttributes(RecordComponent rc, Class<?> declaringRecord, String name, \n+                    Class<?> type) throws Throwable {\n+        test_RecordComponentContents(rc, declaringRecord, name, type, null, null, null);\n+    }\n+\n+    /* test all fields that are set from record_component_info attribute */\n+    private void test_RecordComponentContents(RecordComponent rc, Class<?> declaringRecord, String name, Class<?> type,\n+                    String signature, Class annotationsClass, Class typeAnnotationsClass) throws Throwable {", "originalCommit": "ab79d5f5a953145a9eab5d3d060425ca65e952d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "951d4e9955f51183de08fea5cccedd4631f301ef", "chunk": "diff --git a/test/functional/Java14andUp/src/org/openj9/test/java/lang/Test_Class.java b/test/functional/Java14andUp/src/org/openj9/test/java/lang/Test_Class.java\nindex 98caa0dd1..2ad8ff024 100644\n--- a/test/functional/Java14andUp/src/org/openj9/test/java/lang/Test_Class.java\n+++ b/test/functional/Java14andUp/src/org/openj9/test/java/lang/Test_Class.java\n\n@@ -63,7 +63,9 @@ import org.openj9.test.utilities.CustomClassLoader;\n     class TestClass {}\n     record TestRecordEmpty() {}\n     record TestRecordPrim(int x, long y) {}\n-    record TestRecordObj(String x, Double y, Object[] z) {}\n+    record TestRecordObj(String x, Double y, Object[] z) {\n+        public void testMethod() {}\n+    }\n     record TestRecordWithAnnotation(@TestAnnotation int x) {}\n     record TestRecordWithTypeAnnotation(@TestTypeAnnotation int x) {}\n     record TestRecordWithMultipleAnnotations(@TestAnnotation @TestTypeAnnotation int x) {}\n"}}, {"oid": "951d4e9955f51183de08fea5cccedd4631f301ef", "url": "https://github.com/eclipse-openj9/openj9/commit/951d4e9955f51183de08fea5cccedd4631f301ef", "message": "Review changes\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-06T16:08:44Z", "type": "forcePushed"}, {"oid": "e3a7c05439ed2b69a2633dc940893a9eb71920ac", "url": "https://github.com/eclipse-openj9/openj9/commit/e3a7c05439ed2b69a2633dc940893a9eb71920ac", "message": "part 2 review", "committedDate": "2020-02-09T07:02:04Z", "type": "forcePushed"}, {"oid": "e0f93cf9ccdcfb34e09eb38982faedd669fb4fc5", "url": "https://github.com/eclipse-openj9/openj9/commit/e0f93cf9ccdcfb34e09eb38982faedd669fb4fc5", "message": "Review changes\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-10T13:53:40Z", "type": "forcePushed"}, {"oid": "b272983b8338ffc97d846b4130b4b2da3523cad1", "url": "https://github.com/eclipse-openj9/openj9/commit/b272983b8338ffc97d846b4130b4b2da3523cad1", "message": "Review changes\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-10T13:56:23Z", "type": "forcePushed"}, {"oid": "65d1ddd611c5f86a496fdb254de4d0b44da0aec2", "url": "https://github.com/eclipse-openj9/openj9/commit/65d1ddd611c5f86a496fdb254de4d0b44da0aec2", "message": "JEP 359 Class.getRecordComponents\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-13T16:43:14Z", "type": "forcePushed"}, {"oid": "73abe46a77130c0bf691907321d7fd3f187b7bdc", "url": "https://github.com/eclipse-openj9/openj9/commit/73abe46a77130c0bf691907321d7fd3f187b7bdc", "message": "JEP 359 Class.getRecordComponents\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-13T16:44:10Z", "type": "commit"}, {"oid": "73abe46a77130c0bf691907321d7fd3f187b7bdc", "url": "https://github.com/eclipse-openj9/openj9/commit/73abe46a77130c0bf691907321d7fd3f187b7bdc", "message": "JEP 359 Class.getRecordComponents\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>", "committedDate": "2020-02-13T16:44:10Z", "type": "forcePushed"}]}