{"pr_number": 10670, "pr_title": "Fix possible NPE in J9VMInternals.getClassInfoStrings()", "pr_createdAt": "2020-09-23T04:04:47Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10670", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493612265", "bodyText": "Would it be better to individually null check each of these items and avoid the exception on this path?  I know this only called for formatting a NoSuchMethod exception message but it seems wasteful to throw an NPE when we could avoid it", "author": "DanHeidinga", "createdAt": "2020-09-23T13:54:55Z", "path": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java", "diffHunk": "@@ -492,25 +492,30 @@ static int fastIdentityHashCode(Object anObject) {\n \t\n \t\n \tprivate static String[] getClassInfoStrings(final Class<?> clazz, String classPath){\n-\t\tString classLoader;\n+\t\tString classLoaderStr = \"<Bootstrap Loader>\"; //$NON-NLS-1$\n+\t\tString cpResult = \"<Unknown>\"; //$NON-NLS-1$\n \t\t\n-\t\tif (classPath != null) {\n-\t\t\tclassLoader = \"<Bootstrap Loader>\";\n-\t\t} else {\n-\t\t\tclassLoader = clazz.getClassLoader().toString();\n-\t\t\tclassPath = (String)AccessController.doPrivileged(new PrivilegedAction() {\n-\t\t\t\tpublic Object run() {\n-\t\t\t\t\tString path = null;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tpath = \"<Unknown>\";\n+\t\tif (classPath == null) {\n+\t\t\tClassLoader classLoader = clazz.getClassLoader();\n+\t\t\tif (classLoader != null) {\n+\t\t\t\tclassLoaderStr = classLoader.toString();\n+\t\t\t\tclassPath = AccessController.doPrivileged(new PrivilegedAction<String>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String run() {\n+\t\t\t\t\t\tString path = null;\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();", "originalCommit": "470fccc8aa618a71e00e551be8fe532242fac289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxODMwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493618306", "bodyText": "The waste is in proportion to the frequency with which it occurs. If it happens only vary rarely, then I'm fine with this the way it is.", "author": "keithc-ca", "createdAt": "2020-09-23T14:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNzcwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493737703", "bodyText": "With the fix I've made to check for the bootstrap loader, this shouldn't normally throw any exception. It would only occur for a custom classloader that doesn't bother to implement protection domains or code source.", "author": "pshipton", "createdAt": "2020-09-23T16:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODczNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493738735", "bodyText": "In terms of frequency, as Dan mentioned this is only used for throwing a NoSuchMethodException, which ideally would never occur.", "author": "pshipton", "createdAt": "2020-09-23T16:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MDI1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493740252", "bodyText": "Although given the issue, apparently the DDR tooling throws it a number of times.", "author": "pshipton", "createdAt": "2020-09-23T16:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NTgyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10670#discussion_r493745821", "bodyText": "Since some things like DDR could throw NoSuchMethodException a number of times, and we don't know if a custom classloader will implement class locations, I've made the suggested change.", "author": "pshipton", "createdAt": "2020-09-23T16:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7bf8cd085a19297523eb0fc74c00cee8c6934d49", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java b/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\nindex 6111967b6..764d683c8 100644\n--- a/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\n+++ b/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\n\n@@ -504,7 +503,16 @@ final class J9VMInternals {\n \t\t\t\t\tpublic String run() {\n \t\t\t\t\t\tString path = null;\n \t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tpath = clazz.getProtectionDomain().getCodeSource().getLocation().toString();\n+\t\t\t\t\t\t\tProtectionDomain pd = clazz.getProtectionDomain();\n+\t\t\t\t\t\t\tif (pd != null) {\n+\t\t\t\t\t\t\t\tCodeSource cs = pd.getCodeSource();\n+\t\t\t\t\t\t\t\tif (cs != null) {\n+\t\t\t\t\t\t\t\t\tURL loc = cs.getLocation();\n+\t\t\t\t\t\t\t\t\tif (loc != null) {\n+\t\t\t\t\t\t\t\t\t\tpath = loc.toString();\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t} catch (Exception e) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn path;\n"}}, {"oid": "7bf8cd085a19297523eb0fc74c00cee8c6934d49", "url": "https://github.com/eclipse-openj9/openj9/commit/7bf8cd085a19297523eb0fc74c00cee8c6934d49", "message": "Fix possible NPE in J9VMInternals.getClassInfoStrings()\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-09-23T16:54:09Z", "type": "commit"}, {"oid": "7bf8cd085a19297523eb0fc74c00cee8c6934d49", "url": "https://github.com/eclipse-openj9/openj9/commit/7bf8cd085a19297523eb0fc74c00cee8c6934d49", "message": "Fix possible NPE in J9VMInternals.getClassInfoStrings()\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-09-23T16:54:09Z", "type": "forcePushed"}]}