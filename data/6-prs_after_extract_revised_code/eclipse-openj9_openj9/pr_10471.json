{"pr_number": 10471, "pr_title": "Hidden class implementation 4", "pr_createdAt": "2020-08-27T15:21:15Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10471", "timeline": [{"oid": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "url": "https://github.com/eclipse-openj9/openj9/commit/d41a1026b661ba8dd66f27bd747bee823d6cc854", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-27T15:27:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzY2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479303669", "bodyText": "This duplicates the walk to get to the base component type.  Could the if (clazz.isHidden()) { check be moved after the existing loop to get the baseType?", "author": "DanHeidinga", "createdAt": "2020-08-28T13:43:50Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3494,7 +3496,14 @@ else if (!fullName.endsWith(simpleName)) {\n  */\n public String getCanonicalName() {\n /*[IF Java15]*/\n-\tif (isHidden()) {\n+\tClass<?> clazz = this;\n+\tif (isArray()) {\n+\t\tclazz = getComponentType();\n+\t\twhile (clazz.isArray()) {\n+\t\t\tclazz = clazz.getComponentType();\n+\t\t}\n+\t}", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjY1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479412651", "bodyText": "Right, I didn't notice the following code is doing the same thing. It is fixed.", "author": "hangshao0", "createdAt": "2020-08-28T16:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "113564943f098dce37da063472d5b5e6d3ec6c11", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 8e31a78e2..1aa9fad44 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -3495,19 +3495,6 @@ public String getSimpleName() {\n  * @see #isLocalClass()\n  */\n public String getCanonicalName() {\n-/*[IF Java15]*/\n-\tClass<?> clazz = this;\n-\tif (isArray()) {\n-\t\tclazz = getComponentType();\n-\t\twhile (clazz.isArray()) {\n-\t\t\tclazz = clazz.getComponentType();\n-\t\t}\n-\t}\n-\tif (clazz.isHidden()) {\n-\t\t/* Canonical name is always null for hidden classes. */\n-\t\treturn null;\n-\t}\n-/*[ENDIF] Java15 */\n \tint arrayCount = 0;\n \tClass<?> baseType = this;\n \tif (isArray()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMzIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479313217", "bodyText": "Can you add a comment to the method overall that indicates this needs to be kept in sync with the version in Class.java?\nEventually we should get rid of the duplication.... but a comment will cover this PR", "author": "DanHeidinga", "createdAt": "2020-08-28T13:54:01Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java", "diffHunk": "@@ -1172,7 +1172,20 @@ static String getBytecodeStringName(Class<?> c){\n \t\t\t\treturn \"S\"; //$NON-NLS-1$\n \t\t\t}\n \t\t}\n+\t\tClass<?> clazz = c;", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzU5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479413595", "bodyText": "Comment added.", "author": "hangshao0", "createdAt": "2020-08-28T16:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMzIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java b/jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java\nindex 8cb5dd70f..2eb5186c4 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java\n\n@@ -1180,11 +1181,13 @@ public final class MethodType implements Serializable\n \t\t\t}\n \t\t}\n \t\tString name = c.getName().replace('.', '/');\n+\t\t/*[IF Java15]*/\n \t\tif (clazz.isHidden()) {\n \t\t\t/* keep the last \".\" before romaddress for hidden classes */\n \t\t\tint index = name.lastIndexOf('/');\n \t\t\tname = name.substring(0, index) + '.' + name.substring(index + 1,name.length());\n \t\t}\n+\t\t/*[ENDIF] Java15 */\n \t\t\n \t\tif (c.isArray()) {\n \t\t\treturn name;\n"}}, {"oid": "113564943f098dce37da063472d5b5e6d3ec6c11", "url": "https://github.com/eclipse-openj9/openj9/commit/113564943f098dce37da063472d5b5e6d3ec6c11", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-28T15:52:09Z", "type": "forcePushed"}, {"oid": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "url": "https://github.com/eclipse-openj9/openj9/commit/82390ddd617cdf5d53fb691d78f6b17661859dcb", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-28T16:29:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479434024", "bodyText": "Why is this being done here rather than in cfreader?  Do we not have the context there?  Could we get it by passing another flag thru?", "author": "DanHeidinga", "createdAt": "2020-08-28T17:13:12Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,107 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n+\t\t\t\n+\t\t}\n+\t\t\n+\t\tprivate static int readShortFromByteArray(byte[] bytes, int offset) {\n+\t\t\tif ((offset + 2) <= bytes.length) {\n+\t\t\t\treturn Short.toUnsignedInt(ByteBuffer.wrap(bytes).getShort(offset));\n+\t\t\t} else {\n+\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tprivate static int readIntFromByteArray(byte[] bytes, int offset) {\n+\t\t\tif ((offset + 4) <= bytes.length) {\n+\t\t\t\treturn ByteBuffer.wrap(bytes).getInt(offset);\n+\t\t\t} else {\n+\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n+\t\t\t}\n+\t\t}\n+\t\tprivate String getClassNameAndCheckClassBytes(byte[] bytes) {", "originalCommit": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzY2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479443667", "bodyText": "The checks added here (and their order) are all forced by hidden class tests, they expect certain type of exception/error. I think ClassReader is doing checks differently (or maybe in different order), using ClassReader results a different type of exception/error, which makes those tests fail.", "author": "hangshao0", "createdAt": "2020-08-28T17:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NzA1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479457050", "bodyText": "I would rather this logic stay in the native cfreader.c implementation then duplicate it here as well.  Even if that means making additional native calls to do the processing with cfreader.", "author": "DanHeidinga", "createdAt": "2020-08-28T18:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1ODA5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479458093", "bodyText": "Ahh, I see. You mean cfreader.c", "author": "hangshao0", "createdAt": "2020-08-28T18:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNTQ3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479505474", "bodyText": "We may move the magicNum and version checks into cfreader.c, and call the native from here. I guess other checks like the descriptor of this class and whether this class is in the same package as the host class can still be here in the java level. All these checks are in java level here in RI.", "author": "hangshao0", "createdAt": "2020-08-28T19:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTU5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480399592", "bodyText": "Moved the magic number and class version checks into cfreader.c.", "author": "hangshao0", "createdAt": "2020-08-31T21:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "e6db633728dd6fbd454e584fcc0114375949c410", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\nindex d7930bc52..2c6569200 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\n\n@@ -2381,63 +2381,14 @@ public class MethodHandles {\n \t\t\tfor (ClassOption opt : classOptions) {\n \t\t\t\tflags |= opt.toFlag();\n \t\t\t}\n-\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);\n+\t\t\tString targetClassName = getClassName(bytes);\n \t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n \t\t\t\n \t\t}\n-\t\t\n-\t\tprivate static int readShortFromByteArray(byte[] bytes, int offset) {\n-\t\t\tif ((offset + 2) <= bytes.length) {\n-\t\t\t\treturn Short.toUnsignedInt(ByteBuffer.wrap(bytes).getShort(offset));\n-\t\t\t} else {\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tprivate static int readIntFromByteArray(byte[] bytes, int offset) {\n-\t\t\tif ((offset + 4) <= bytes.length) {\n-\t\t\t\treturn ByteBuffer.wrap(bytes).getInt(offset);\n-\t\t\t} else {\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\tprivate String getClassNameAndCheckClassBytes(byte[] bytes) {\n-\t\t\tint magicNum = 0;\n-\t\t\tint major = 0;\n-\t\t\tint minor = 0;\n-\t\t\tString targetClassName;\n-\t\t\ttry {\n-\t\t\t\tmagicNum = readIntFromByteArray(bytes, 0);\n-\t\t\t\tminor = readShortFromByteArray(bytes, 4);\n-\t\t\t\tmajor = readShortFromByteArray(bytes, 6);\n-\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t\t\tthrow new ClassFormatError(com.ibm.oti.util.Msg.getString(\"K065Y2\")); //$NON-NLS-1$\n-\t\t\t}\n-\t\t\tif (0xCAFEBABE != magicNum) {\n-\t\t\t\tthrow new ClassFormatError(com.ibm.oti.util.Msg.getString(\"K065Y2\")); //$NON-NLS-1$\n-\t\t\t}\n-\n-\t\t\tint currentMajorVersion = Integer.MAX_VALUE;\n-\t\t\tString version = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-    \t\t\tpublic String run() {\n-    \t\t\t\treturn System.getProperty(\"java.class.version\");\n-    \t\t\t}\n-    \t\t});\n-\t\t\tif (version != null) {\n-\t\t\t\tint index = version.indexOf('.');\n-\t\t\t\tcurrentMajorVersion = Integer.valueOf(version.substring(0,index));\n-\t\t\t}\n \n-\t\t\tif (major < 45) {\n-\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t} else if (major > currentMajorVersion) {\n-\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t} else if (major >= 56) {\n-\t\t\t\tif (0 != minor && 0xffff != minor) {\n-\t\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n+\t\tprivate String getClassName(byte[] bytes) {\n+\t\t\tString targetClassName;\n \t\t\tClassReader cr;\n \t\t\ttry {\n \t\t\t\tcr = new ClassReader(bytes);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjMxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479456311", "bodyText": "Why does this need the name here?  Can we pass the bytes thru to native cfreader.c implementation and let it handle the checks?", "author": "DanHeidinga", "createdAt": "2020-08-28T17:59:57Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,107 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);", "originalCommit": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjY0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480402641", "bodyText": "Why does this need the name here?\n\nBecause the new API JavaLangAccess.defineClass() added by openjdk to define hidden class takes className as a parameter, so we pass className to makeHiddenClassDefiner() which eventually calls JavaLangAccess.defineClass().\nThe checks for magic number and class version are moved into cfreader.c.", "author": "hangshao0", "createdAt": "2020-08-31T21:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjMxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e6db633728dd6fbd454e584fcc0114375949c410", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\nindex d7930bc52..2c6569200 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java\n\n@@ -2381,63 +2381,14 @@ public class MethodHandles {\n \t\t\tfor (ClassOption opt : classOptions) {\n \t\t\t\tflags |= opt.toFlag();\n \t\t\t}\n-\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);\n+\t\t\tString targetClassName = getClassName(bytes);\n \t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n \t\t\t\n \t\t}\n-\t\t\n-\t\tprivate static int readShortFromByteArray(byte[] bytes, int offset) {\n-\t\t\tif ((offset + 2) <= bytes.length) {\n-\t\t\t\treturn Short.toUnsignedInt(ByteBuffer.wrap(bytes).getShort(offset));\n-\t\t\t} else {\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tprivate static int readIntFromByteArray(byte[] bytes, int offset) {\n-\t\t\tif ((offset + 4) <= bytes.length) {\n-\t\t\t\treturn ByteBuffer.wrap(bytes).getInt(offset);\n-\t\t\t} else {\n-\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n-\t\t\t}\n-\t\t}\n-\t\tprivate String getClassNameAndCheckClassBytes(byte[] bytes) {\n-\t\t\tint magicNum = 0;\n-\t\t\tint major = 0;\n-\t\t\tint minor = 0;\n-\t\t\tString targetClassName;\n-\t\t\ttry {\n-\t\t\t\tmagicNum = readIntFromByteArray(bytes, 0);\n-\t\t\t\tminor = readShortFromByteArray(bytes, 4);\n-\t\t\t\tmajor = readShortFromByteArray(bytes, 6);\n-\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n-\t\t\t\tthrow new ClassFormatError(com.ibm.oti.util.Msg.getString(\"K065Y2\")); //$NON-NLS-1$\n-\t\t\t}\n-\t\t\tif (0xCAFEBABE != magicNum) {\n-\t\t\t\tthrow new ClassFormatError(com.ibm.oti.util.Msg.getString(\"K065Y2\")); //$NON-NLS-1$\n-\t\t\t}\n-\n-\t\t\tint currentMajorVersion = Integer.MAX_VALUE;\n-\t\t\tString version = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-    \t\t\tpublic String run() {\n-    \t\t\t\treturn System.getProperty(\"java.class.version\");\n-    \t\t\t}\n-    \t\t});\n-\t\t\tif (version != null) {\n-\t\t\t\tint index = version.indexOf('.');\n-\t\t\t\tcurrentMajorVersion = Integer.valueOf(version.substring(0,index));\n-\t\t\t}\n \n-\t\t\tif (major < 45) {\n-\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t} else if (major > currentMajorVersion) {\n-\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t} else if (major >= 56) {\n-\t\t\t\tif (0 != minor && 0xffff != minor) {\n-\t\t\t\t\tthrow new UnsupportedClassVersionError();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n+\t\tprivate String getClassName(byte[] bytes) {\n+\t\t\tString targetClassName;\n \t\t\tClassReader cr;\n \t\t\ttry {\n \t\t\t\tcr = new ClassReader(bytes);\n"}}, {"oid": "e6db633728dd6fbd454e584fcc0114375949c410", "url": "https://github.com/eclipse-openj9/openj9/commit/e6db633728dd6fbd454e584fcc0114375949c410", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:30:44Z", "type": "forcePushed"}, {"oid": "34a4d698c1c5cc60de27a7eb26f610e6e2274878", "url": "https://github.com/eclipse-openj9/openj9/commit/34a4d698c1c5cc60de27a7eb26f610e6e2274878", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:33:58Z", "type": "forcePushed"}, {"oid": "9f8c15bd9337868541d988b2a0f45cae9c211774", "url": "https://github.com/eclipse-openj9/openj9/commit/9f8c15bd9337868541d988b2a0f45cae9c211774", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:34:58Z", "type": "forcePushed"}, {"oid": "01a427744a8e590491b322ef45e6a107b06974fd", "url": "https://github.com/eclipse-openj9/openj9/commit/01a427744a8e590491b322ef45e6a107b06974fd", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T21:03:48Z", "type": "forcePushed"}, {"oid": "ab6f166d97f2348497da5087a3b0ac64d12829f8", "url": "https://github.com/eclipse-openj9/openj9/commit/ab6f166d97f2348497da5087a3b0ac64d12829f8", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T21:06:09Z", "type": "forcePushed"}, {"oid": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "url": "https://github.com/eclipse-openj9/openj9/commit/9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T22:36:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0MDcyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480640722", "bodyText": "Inconsistent comment formatting - please combine them.", "author": "gacholio", "createdAt": "2020-09-01T02:44:34Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3428,8 +3428,10 @@ public String getSimpleName() {\n \tString simpleName = baseType.getSimpleNameImpl();\n \tString fullName = baseType.getName();\n \tif (simpleName == null) {\n-\t\tClass<?> parent = baseType.getEnclosingObjectClass();\n-\t\t// either a base class, or anonymous class\n+\t\t// either a base class, or anonymous class, or hidden class", "originalCommit": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyODQ3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481228473", "bodyText": "Comments combined.", "author": "hangshao0", "createdAt": "2020-09-01T15:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0MDcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "a3f2ce68cadf46f080d444acdba9c9aaa0c488ba", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/Class.java b/jcl/src/java.base/share/classes/java/lang/Class.java\nindex 1aa9fad44..ef5d9c884 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Class.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Class.java\n\n@@ -3428,9 +3428,11 @@ public String getSimpleName() {\n \tString simpleName = baseType.getSimpleNameImpl();\n \tString fullName = baseType.getName();\n \tif (simpleName == null) {\n-\t\t// either a base class, or anonymous class, or hidden class\n-\t\t/* call getEnclosingClass() instead of getEnclosingObjectClass() to check getDeclaringClass() first. Hidden class test expect\n-\t\t * NoClassDefFoundError from getDeclaringClass() */\n+\t\t/** \n+\t\t * It is a base class, an anonymous class, or a hidden class.\n+\t\t * call getEnclosingClass() instead of getEnclosingObjectClass() to check getDeclaringClass() first. Hidden class test expects\n+\t\t * NoClassDefFoundError from getDeclaringClass(). \n+\t\t */\n \t\tClass<?> parent = baseType.getEnclosingClass();\n \t\tif (parent != null) {\n \t\t\tsimpleName = \"\"; //$NON-NLS-1$\n"}}, {"oid": "a3f2ce68cadf46f080d444acdba9c9aaa0c488ba", "url": "https://github.com/eclipse-openj9/openj9/commit/a3f2ce68cadf46f080d444acdba9c9aaa0c488ba", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T15:22:21Z", "type": "forcePushed"}, {"oid": "5fc4a412b471d86489728ad70f58029344781e43", "url": "https://github.com/eclipse-openj9/openj9/commit/5fc4a412b471d86489728ad70f58029344781e43", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T15:23:56Z", "type": "forcePushed"}, {"oid": "39085ee7ca83d2aa165a9aeb6bddad555cbe6cc0", "url": "https://github.com/eclipse-openj9/openj9/commit/39085ee7ca83d2aa165a9aeb6bddad555cbe6cc0", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T21:55:29Z", "type": "forcePushed"}, {"oid": "5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "url": "https://github.com/eclipse-openj9/openj9/commit/5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T22:23:08Z", "type": "forcePushed"}, {"oid": "6237234c3175d59757e94e665c45c1118e286e64", "url": "https://github.com/eclipse-openj9/openj9/commit/6237234c3175d59757e94e665c45c1118e286e64", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T14:57:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482200709", "bodyText": "Now that there's no real code in the forwarder, would it make sense to just make checkClassBytes native?", "author": "gacholio", "createdAt": "2020-09-02T16:24:06Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java", "diffHunk": "@@ -86,6 +86,12 @@ static boolean refKindIsConstructor(byte kind) {\n \tstatic Object classData(Class<?> c) {\n \t\treturn JLA.classData(c);\n \t}\n+\n+\tprivate native static void checkClassBytesImpl(byte[] bytes);", "originalCommit": "6237234c3175d59757e94e665c45c1118e286e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNDc2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482204766", "bodyText": "On second thought, how about moving the null and size = 0 check into the java wrapper code and remove it from the native code.", "author": "gacholio", "createdAt": "2020-09-02T16:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxNDUzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482214531", "bodyText": "Actually, since you're already fetching the length in the native (for more than just the 0 check), it may as well stay in the native.", "author": "gacholio", "createdAt": "2020-09-02T16:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTQzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482261431", "bodyText": "Changed checkClassBytes to native.", "author": "hangshao0", "createdAt": "2020-09-02T17:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "edd0bfd8514d25e34eac127c82f45f7cf421fe48", "chunk": "diff --git a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java\nindex ed769ee84..880b66ac7 100644\n--- a/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java\n+++ b/jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java\n\n@@ -87,11 +87,7 @@ class MethodHandleNatives {\n \t\treturn JLA.classData(c);\n \t}\n \n-\tprivate native static void checkClassBytesImpl(byte[] bytes);\n-\n-\tstatic void checkClassBytes(byte[] bytes) {\n-\t\tcheckClassBytesImpl(bytes);\n-\t}\n+\tnative static void checkClassBytes(byte[] bytes);\n \t/*[ENDIF] Java15 */\n }\n /*[ENDIF] Java11 */\n"}}, {"oid": "e2c1bd50c9c4f31d2cf08bd93bbcfa3d440d386b", "url": "https://github.com/eclipse-openj9/openj9/commit/e2c1bd50c9c4f31d2cf08bd93bbcfa3d440d386b", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T17:52:03Z", "type": "forcePushed"}, {"oid": "edd0bfd8514d25e34eac127c82f45f7cf421fe48", "url": "https://github.com/eclipse-openj9/openj9/commit/edd0bfd8514d25e34eac127c82f45f7cf421fe48", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T17:58:19Z", "type": "forcePushed"}, {"oid": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "url": "https://github.com/eclipse-openj9/openj9/commit/c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T18:27:01Z", "type": "commit"}, {"oid": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "url": "https://github.com/eclipse-openj9/openj9/commit/c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T18:27:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzM5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482303395", "bodyText": "My proposal was that this method return the classname as a String to avoid partially reparsing the classfile.  The checks in getClassName can still be done in java code after renaming the method to something like validateClassName.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tMethodHandleNatives.checkClassBytes(bytes);\n          \n          \n            \n            \t\t\tString targetClassName = MethodHandleNatives.checkClassBytes(bytes);\n          \n          \n            \n            \t\t\tvalidateClassName(targetClassName, bytes);", "author": "DanHeidinga", "createdAt": "2020-09-02T18:51:16Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,58 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);", "originalCommit": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482304659", "bodyText": "All this code can go away if the native returns the class name string", "author": "DanHeidinga", "createdAt": "2020-09-02T18:52:34Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,58 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);\n+\t\t\tString targetClassName = getClassName(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n+\t\t\t\n+\t\t}\n+\n+\t\tprivate String getClassName(byte[] bytes) {\n+\t\t\tString targetClassName;\n \t\t\tClassReader cr;\n \t\t\ttry {\n \t\t\t\tcr = new ClassReader(bytes);\n+\n+\t\t\t\tint thisClassIndex = cr.readUnsignedShort(cr.header + 2);\n+\t\t\t\tchar[] buffer = new char[cr.getMaxStringLength()];\n+\t\t\t\tObject thisClass = cr.readConst(thisClassIndex, buffer);\n+\t\t\t\tif (!(thisClass instanceof Type)) {\n+\t\t\t\t\tthrow new ClassFormatError();\n+\t\t\t\t}\n+\t\t\t\tType type = (Type)thisClass;\n+\t\t\t\tif (!type.getDescriptor().startsWith(\"L\")) {\n+\t\t\t\t\tthrow new ClassFormatError();\n+\t\t\t\t}\n+\t\t\t\ttargetClassName = type.getClassName();", "originalCommit": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMDI0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482500245", "bodyText": "I have a local change that addressed all the comments here. i.e. make MethodHandleNatives.checkClassBytes() return the class name and with the code above removed. But I am failing some hidden class tests:\n\nThere are test cases that make thisClass not an instance of Type and the descriptor does not start with \"L\", these tests asserts ClassFormatError to be thrown. These checks are not there inside j9bcutil_readClassFileBytes(). So I guess we cannot remove these checks.\n\nif (!(thisClass instanceof Type)) {\n\tthrow new ClassFormatError();\n}\nif (!type.getDescriptor().startsWith(\"L\")) {\n\tthrow new ClassFormatError();\n}\n\n\nAfter adding the above checks back, I am still failing one test.\nBecause I am getting the class name from j9bcutil_readClassFileBytes(), it has to return after constant pool are read and  classfile->thisClass is set. But before setting classfile->thisClass, j9bcutil_readClassFileBytes()\nchecks on CFR_ACC_MODULE and throw ClassFormatError on CFR_ACC_MODULE. Hidden class tests expects an IllegalArgumentException if CFR_ACC_MODULE is set.", "author": "hangshao0", "createdAt": "2020-09-02T21:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482688072", "bodyText": "There are test cases that make thisClass not an instance of Type and the descriptor does not start with \"L\", these tests asserts ClassFormatError to be thrown.\n\nCan you provide examples of the invalid thisClass values?  I can understand the \"L\" case but need clarification on the instanceof Type case and why it wouldn't be caught by the cfreader code (unless maybe we don't check it till staticverify runs?)", "author": "DanHeidinga", "createdAt": "2020-09-03T03:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4NzU3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r483087575", "bodyText": "The test comment basically says this_class may be an invalid index or a valid index pointing to something else rather than Class_Info. For why cfreader does not catch that, I might need to dig into that later. Maybe the case as you said or maybe I was not passing in the correct combination of BCT_XXXX flags in my local change.", "author": "hangshao0", "createdAt": "2020-09-03T15:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}], "type": "inlineReview", "revised_code": null}]}