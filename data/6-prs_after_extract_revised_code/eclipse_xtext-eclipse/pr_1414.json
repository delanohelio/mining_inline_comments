{"pr_number": 1414, "pr_title": "converted xtend code to java", "pr_createdAt": "2020-04-24T16:18:29Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjA0OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306049", "bodyText": "Introduce a local var that is casted?", "author": "szarnekow", "createdAt": "2020-04-26T13:03:06Z", "path": "org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.tests;\n+\n+import org.eclipse.emf.common.util.TreeIterator;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.builder.tests.builderTestLanguage.Element;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGenerator;\n+\n+public class MyGenerator implements IGenerator {\n+\t@Override\n+\tpublic void doGenerate(Resource input, IFileSystemAccess fsa) {\n+\t\tTreeIterator<EObject> allContents = input.getAllContents();\n+\t\twhile (allContents.hasNext()) {\n+\t\t\tEObject next = allContents.next();\n+\t\t\tif (next instanceof Element) {\n+\t\t\t\tElement ele = (Element) next;\n+\t\t\t\tString fileName = ele.getName() + \".txt\";\n+\t\t\t\tif (fsa instanceof IFileSystemAccess2) {\n+\t\t\t\t\tif (((IFileSystemAccess2) fsa).isFile(fileName)) {", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java\nindex 7ed0dad5f..0f7ec8000 100644\n--- a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java\n+++ b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java\n\n@@ -26,8 +26,9 @@ public class MyGenerator implements IGenerator {\n \t\t\t\tElement ele = (Element) next;\n \t\t\t\tString fileName = ele.getName() + \".txt\";\n \t\t\t\tif (fsa instanceof IFileSystemAccess2) {\n-\t\t\t\t\tif (((IFileSystemAccess2) fsa).isFile(fileName)) {\n-\t\t\t\t\t\t((IFileSystemAccess2) fsa).readTextFile(fileName);\n+\t\t\t\t\tIFileSystemAccess2 fileSystemAccess2 = (IFileSystemAccess2) fsa;\n+\t\t\t\t\tif (fileSystemAccess2.isFile(fileName)) {\n+\t\t\t\t\t\tfileSystemAccess2.readTextFile(fileName);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tfsa.generateFile(fileName, \"object \" + ele.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzAyNw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307027", "bodyText": "We have so many places where we convert an input stream to a String ...\norg.eclipse.xtext.ui.testing.util.IResourcesSetupUtil.fileToString(IFile)", "author": "szarnekow", "createdAt": "2020-04-26T13:08:09Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));\n+\t\tAssert.assertTrue(file.exists());\n+\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzA3MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307070", "bodyText": "try-with-resource", "author": "szarnekow", "createdAt": "2020-04-26T13:08:18Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));\n+\t\tAssert.assertTrue(file.exists());\n+\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\t\tbyte[] array = new byte[2048];\n+\t\tint bytesRead = 0;\n+\t\tInputStream inp = file.getContents();\n+\t\twhile ((bytesRead = inp.read(array)) != -1) {\n+\t\t\tbuffer.write(array, 0, bytesRead);\n+\t\t}\n+\t\tinp.close();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxMDI1MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415310250", "bodyText": "obsolte with iresourcesetuputil", "author": "cdietrich", "createdAt": "2020-04-26T13:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzA5NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307094", "bodyText": "inline local var", "author": "szarnekow", "createdAt": "2020-04-26T13:08:28Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));\n+\t\tAssert.assertTrue(file.exists());\n+\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\t\tbyte[] array = new byte[2048];\n+\t\tint bytesRead = 0;\n+\t\tInputStream inp = file.getContents();\n+\t\twhile ((bytesRead = inp.read(array)) != -1) {\n+\t\t\tbuffer.write(array, 0, bytesRead);\n+\t\t}\n+\t\tinp.close();\n+\t\tString text = new String(buffer.toByteArray(), file.getCharset());\n+\t\tAssert.assertEquals(expected, text);\n+\t}\n+\n+\tprotected void performRefactoring(RefactoringDescriptor descriptor) throws Exception {\n+\t\tNullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzIxOQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307219", "bodyText": "Arrays.asList", "author": "szarnekow", "createdAt": "2020-04-26T13:09:05Z", "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/syntaxcoloring/HighlightingPresenterPositionIndexTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.syntaxcoloring;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.ui.editor.syntaxcoloring.AttributedPosition;\n+import org.eclipse.xtext.ui.editor.syntaxcoloring.HighlightingPresenter;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+public class HighlightingPresenterPositionIndexTest extends HighlightingPresenter {\n+\tprivate List<AttributedPosition> positions;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tpositions = Lists.newArrayList(new AttributedPosition(0, 2, null, null), new AttributedPosition(2, 2, null, null));", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/syntaxcoloring/HighlightingPresenterPositionIndexTest.java b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/syntaxcoloring/HighlightingPresenterPositionIndexTest.java\nindex 80449c86f..7cd907a76 100644\n--- a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/syntaxcoloring/HighlightingPresenterPositionIndexTest.java\n+++ b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/syntaxcoloring/HighlightingPresenterPositionIndexTest.java\n\n@@ -8,6 +8,7 @@\n  */\n package org.eclipse.xtext.ui.tests.editor.syntaxcoloring;\n \n+import java.util.Arrays;\n import java.util.List;\n \n import org.eclipse.xtext.ui.editor.syntaxcoloring.AttributedPosition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzU1OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307559", "bodyText": "can add throws Exception instead.", "author": "szarnekow", "createdAt": "2020-04-26T13:11:01Z", "path": "org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java", "diffHunk": "@@ -99,86 +100,94 @@ public void assertLogged(final String expectation) {\n   \n   @Test\n   public void testProgressReportOfRenameCommonDir() {", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\nindex 08b4be44a..e6f202f92 100644\n--- a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\n+++ b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\n\n@@ -99,95 +98,87 @@ public class ProgressReportingTest extends AbstractResourceRelocationTest {\n   }\n   \n   @Test\n-  public void testProgressReportOfRenameCommonDir() {\n-    try {\n-      StringConcatenation _builder = new StringConcatenation();\n-      _builder.append(\"package foo.bar\");\n-      _builder.newLine();\n-      _builder.append(\"element X {\");\n-      _builder.newLine();\n-      _builder.append(\"\\t\");\n-      _builder.append(\"ref X\");\n-      _builder.newLine();\n-      _builder.append(\"}\");\n-      _builder.newLine();\n-      final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n-      StringConcatenation _builder_1 = new StringConcatenation();\n-      _builder_1.append(\"package foo\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"element Y {\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"\\t\");\n-      _builder_1.append(\"ref bar.X\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"}\");\n-      _builder_1.newLine();\n-      final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n-      final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n-      this.performRename(x.getParent(), \"baz\", monitor);\n-      Assert.assertFalse(x.exists());\n-      Assert.assertFalse(y.exists());\n-      StringConcatenation _builder_2 = new StringConcatenation();\n-      _builder_2.append(\"BeginTask (44)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Checking preconditions...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Checking preconditions...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Creating text changes...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"Done\");\n-      _builder_2.newLine();\n-      monitor.assertLogged(_builder_2.toString());\n-    } catch (Throwable _e) {\n-      throw Exceptions.sneakyThrow(_e);\n-    }\n+  public void testProgressReportOfRenameCommonDir() throws Exception {\n+    StringConcatenation _builder = new StringConcatenation();\n+    _builder.append(\"package foo.bar\");\n+    _builder.newLine();\n+    _builder.append(\"element X {\");\n+    _builder.newLine();\n+    _builder.append(\"\\t\");\n+    _builder.append(\"ref X\");\n+    _builder.newLine();\n+    _builder.append(\"}\");\n+    _builder.newLine();\n+    final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n+    StringConcatenation _builder_1 = new StringConcatenation();\n+    _builder_1.append(\"package foo\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"element Y {\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"\\t\");\n+    _builder_1.append(\"ref bar.X\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"}\");\n+    _builder_1.newLine();\n+    final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n+    final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n+    this.performRename(x.getParent(), \"baz\", monitor);\n+    Assert.assertFalse(x.exists());\n+    Assert.assertFalse(y.exists());\n+    StringConcatenation _builder_2 = new StringConcatenation();\n+    _builder_2.append(\"BeginTask (44)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Checking preconditions...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Checking preconditions...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Creating text changes...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"Done\");\n+    _builder_2.newLine();\n+    monitor.assertLogged(_builder_2.toString());\n   }\n   \n-  protected void performRename(final IResource theResource, final String theNewName, final IProgressMonitor monitor) {\n-    try {\n-      RenameResourceDescriptor _renameResourceDescriptor = new RenameResourceDescriptor();\n-      final Procedure1<RenameResourceDescriptor> _function = (RenameResourceDescriptor it) -> {\n-        it.setResourcePath(theResource.getFullPath());\n-        it.setNewName(theNewName);\n-        it.setProject(this.project.getName());\n-      };\n-      RenameResourceDescriptor _doubleArrow = ObjectExtensions.<RenameResourceDescriptor>operator_doubleArrow(_renameResourceDescriptor, _function);\n-      this.performRefactoring(_doubleArrow, monitor);\n-    } catch (Throwable _e) {\n-      throw Exceptions.sneakyThrow(_e);\n-    }\n+  protected void performRename(final IResource theResource, final String theNewName, final IProgressMonitor monitor) throws Exception {\n+    RenameResourceDescriptor _renameResourceDescriptor = new RenameResourceDescriptor();\n+    final Procedure1<RenameResourceDescriptor> _function = (RenameResourceDescriptor it) -> {\n+      it.setResourcePath(theResource.getFullPath());\n+      it.setNewName(theNewName);\n+      it.setProject(this.project.getName());\n+    };\n+    RenameResourceDescriptor _doubleArrow = ObjectExtensions.<RenameResourceDescriptor>operator_doubleArrow(_renameResourceDescriptor, _function);\n+    this.performRefactoring(_doubleArrow, monitor);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzYzMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307631", "bodyText": "throws Exception", "author": "szarnekow", "createdAt": "2020-04-26T13:11:17Z", "path": "org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java", "diffHunk": "@@ -99,86 +100,94 @@ public void assertLogged(final String expectation) {\n   \n   @Test\n   public void testProgressReportOfRenameCommonDir() {\n-    StringConcatenation _builder = new StringConcatenation();\n-    _builder.append(\"package foo.bar\");\n-    _builder.newLine();\n-    _builder.append(\"element X {\");\n-    _builder.newLine();\n-    _builder.append(\"\\t\");\n-    _builder.append(\"ref X\");\n-    _builder.newLine();\n-    _builder.append(\"}\");\n-    _builder.newLine();\n-    final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n-    StringConcatenation _builder_1 = new StringConcatenation();\n-    _builder_1.append(\"package foo\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"element Y {\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"\\t\");\n-    _builder_1.append(\"ref bar.X\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"}\");\n-    _builder_1.newLine();\n-    final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n-    final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n-    this.performRename(x.getParent(), \"baz\", monitor);\n-    Assert.assertFalse(x.exists());\n-    Assert.assertFalse(y.exists());\n-    StringConcatenation _builder_2 = new StringConcatenation();\n-    _builder_2.append(\"BeginTask (44)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"SetTaskName Checking preconditions...\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"SetTaskName Checking preconditions...\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"SetTaskName Creating text changes...\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n-    _builder_2.newLine();\n-    _builder_2.append(\"Done\");\n-    _builder_2.newLine();\n-    monitor.assertLogged(_builder_2.toString());\n+    try {\n+      StringConcatenation _builder = new StringConcatenation();\n+      _builder.append(\"package foo.bar\");\n+      _builder.newLine();\n+      _builder.append(\"element X {\");\n+      _builder.newLine();\n+      _builder.append(\"\\t\");\n+      _builder.append(\"ref X\");\n+      _builder.newLine();\n+      _builder.append(\"}\");\n+      _builder.newLine();\n+      final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n+      StringConcatenation _builder_1 = new StringConcatenation();\n+      _builder_1.append(\"package foo\");\n+      _builder_1.newLine();\n+      _builder_1.append(\"element Y {\");\n+      _builder_1.newLine();\n+      _builder_1.append(\"\\t\");\n+      _builder_1.append(\"ref bar.X\");\n+      _builder_1.newLine();\n+      _builder_1.append(\"}\");\n+      _builder_1.newLine();\n+      final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n+      final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n+      this.performRename(x.getParent(), \"baz\", monitor);\n+      Assert.assertFalse(x.exists());\n+      Assert.assertFalse(y.exists());\n+      StringConcatenation _builder_2 = new StringConcatenation();\n+      _builder_2.append(\"BeginTask (44)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"SetTaskName Checking preconditions...\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"SetTaskName Checking preconditions...\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"SetTaskName Creating text changes...\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n+      _builder_2.newLine();\n+      _builder_2.append(\"Done\");\n+      _builder_2.newLine();\n+      monitor.assertLogged(_builder_2.toString());\n+    } catch (Throwable _e) {\n+      throw Exceptions.sneakyThrow(_e);\n+    }\n   }\n   \n   protected void performRename(final IResource theResource, final String theNewName, final IProgressMonitor monitor) {", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\nindex 08b4be44a..e6f202f92 100644\n--- a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\n+++ b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java\n\n@@ -99,95 +98,87 @@ public class ProgressReportingTest extends AbstractResourceRelocationTest {\n   }\n   \n   @Test\n-  public void testProgressReportOfRenameCommonDir() {\n-    try {\n-      StringConcatenation _builder = new StringConcatenation();\n-      _builder.append(\"package foo.bar\");\n-      _builder.newLine();\n-      _builder.append(\"element X {\");\n-      _builder.newLine();\n-      _builder.append(\"\\t\");\n-      _builder.append(\"ref X\");\n-      _builder.newLine();\n-      _builder.append(\"}\");\n-      _builder.newLine();\n-      final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n-      StringConcatenation _builder_1 = new StringConcatenation();\n-      _builder_1.append(\"package foo\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"element Y {\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"\\t\");\n-      _builder_1.append(\"ref bar.X\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"}\");\n-      _builder_1.newLine();\n-      final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n-      final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n-      this.performRename(x.getParent(), \"baz\", monitor);\n-      Assert.assertFalse(x.exists());\n-      Assert.assertFalse(y.exists());\n-      StringConcatenation _builder_2 = new StringConcatenation();\n-      _builder_2.append(\"BeginTask (44)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Checking preconditions...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Checking preconditions...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"SetTaskName Creating text changes...\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n-      _builder_2.newLine();\n-      _builder_2.append(\"Done\");\n-      _builder_2.newLine();\n-      monitor.assertLogged(_builder_2.toString());\n-    } catch (Throwable _e) {\n-      throw Exceptions.sneakyThrow(_e);\n-    }\n+  public void testProgressReportOfRenameCommonDir() throws Exception {\n+    StringConcatenation _builder = new StringConcatenation();\n+    _builder.append(\"package foo.bar\");\n+    _builder.newLine();\n+    _builder.append(\"element X {\");\n+    _builder.newLine();\n+    _builder.append(\"\\t\");\n+    _builder.append(\"ref X\");\n+    _builder.newLine();\n+    _builder.append(\"}\");\n+    _builder.newLine();\n+    final IFile x = this.file(\"foo/X.fileawaretestlanguage\", _builder);\n+    StringConcatenation _builder_1 = new StringConcatenation();\n+    _builder_1.append(\"package foo\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"element Y {\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"\\t\");\n+    _builder_1.append(\"ref bar.X\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"}\");\n+    _builder_1.newLine();\n+    final IFile y = this.file(\"foo/Y.fileawaretestlanguage\", _builder_1);\n+    final ProgressReportingTest.TestProgressMonitor monitor = new ProgressReportingTest.TestProgressMonitor();\n+    this.performRename(x.getParent(), \"baz\", monitor);\n+    Assert.assertFalse(x.exists());\n+    Assert.assertFalse(y.exists());\n+    StringConcatenation _builder_2 = new StringConcatenation();\n+    _builder_2.append(\"BeginTask (44)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Checking preconditions...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 4.0 (4.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Checking preconditions...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 22.22222222222222 (26.22222222222222)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Preparing the refactoring...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 1.777777777777778 (28.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Preparing and applying file changes...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (28.835555555555555)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (29.67111111111111)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.08888888888889)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.506666666666668)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (30.924444444444447)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.4177777777777778 (31.342222222222226)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"SetTaskName Creating text changes...\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 2.088888888888889 (33.431111111111115)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8444444444444444 (34.275555555555556)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 0.8355555555555556 (35.111111111111114)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 2.2222222222222223 (37.333333333333336)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"InternalWorked 6.666666666666664 (44.0)\");\n+    _builder_2.newLine();\n+    _builder_2.append(\"Done\");\n+    _builder_2.newLine();\n+    monitor.assertLogged(_builder_2.toString());\n   }\n   \n-  protected void performRename(final IResource theResource, final String theNewName, final IProgressMonitor monitor) {\n-    try {\n-      RenameResourceDescriptor _renameResourceDescriptor = new RenameResourceDescriptor();\n-      final Procedure1<RenameResourceDescriptor> _function = (RenameResourceDescriptor it) -> {\n-        it.setResourcePath(theResource.getFullPath());\n-        it.setNewName(theNewName);\n-        it.setProject(this.project.getName());\n-      };\n-      RenameResourceDescriptor _doubleArrow = ObjectExtensions.<RenameResourceDescriptor>operator_doubleArrow(_renameResourceDescriptor, _function);\n-      this.performRefactoring(_doubleArrow, monitor);\n-    } catch (Throwable _e) {\n-      throw Exceptions.sneakyThrow(_e);\n-    }\n+  protected void performRename(final IResource theResource, final String theNewName, final IProgressMonitor monitor) throws Exception {\n+    RenameResourceDescriptor _renameResourceDescriptor = new RenameResourceDescriptor();\n+    final Procedure1<RenameResourceDescriptor> _function = (RenameResourceDescriptor it) -> {\n+      it.setResourcePath(theResource.getFullPath());\n+      it.setNewName(theNewName);\n+      it.setProject(this.project.getName());\n+    };\n+    RenameResourceDescriptor _doubleArrow = ObjectExtensions.<RenameResourceDescriptor>operator_doubleArrow(_renameResourceDescriptor, _function);\n+    this.performRefactoring(_doubleArrow, monitor);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzc2NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307765", "bodyText": "Set<GeneratdFile>", "author": "szarnekow", "createdAt": "2020-04-26T13:11:55Z", "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.generator.InMemoryFileSystemAccess;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @noextend This class is not intended to be subclassed by clients.\n+ * @noreference This class is not intended to be referenced by clients.\n+ * \n+ * @since 2.7\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.RegisteringFileSystemAccess instead\n+ */\n+@Deprecated\n+public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n+\t/**\n+\t * @noreference This class is not intended to be referenced by clients.\n+\t */\n+\tpublic static class GeneratedFile {\n+\t\tprivate final String path;\n+\n+\t\tprivate final String javaClassName;\n+\n+\t\tprivate final CharSequence contents;\n+\n+\t\tpublic GeneratedFile(String path, String javaClassName, CharSequence contents) {\n+\t\t\tthis.path = path;\n+\t\t\tthis.javaClassName = javaClassName;\n+\t\t\tthis.contents = contents;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + ((contents == null) ? 0 : contents.hashCode());\n+\t\t\tresult = prime * result + ((javaClassName == null) ? 0 : javaClassName.hashCode());\n+\t\t\tresult = prime * result + ((path == null) ? 0 : path.hashCode());\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null)\n+\t\t\t\treturn false;\n+\t\t\tif (getClass() != obj.getClass())\n+\t\t\t\treturn false;\n+\t\t\tGeneratedFile other = (GeneratedFile) obj;\n+\t\t\tif (contents == null) {\n+\t\t\t\tif (other.contents != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!contents.equals(other.contents))\n+\t\t\t\treturn false;\n+\t\t\tif (javaClassName == null) {\n+\t\t\t\tif (other.javaClassName != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!javaClassName.equals(other.javaClassName))\n+\t\t\t\treturn false;\n+\t\t\tif (path == null) {\n+\t\t\t\tif (other.path != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!path.equals(other.path))\n+\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"path\", this.path);\n+\t\t\tb.add(\"javaClassName\", this.javaClassName);\n+\t\t\tb.add(\"contents\", this.contents);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic String getPath() {\n+\t\t\treturn path;\n+\t\t}\n+\n+\t\tpublic String getJavaClassName() {\n+\t\t\treturn javaClassName;\n+\t\t}\n+\n+\t\tpublic CharSequence getContents() {\n+\t\t\treturn contents;\n+\t\t}\n+\t}\n+\n+\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\nindex 78851c776..aac173ec7 100644\n--- a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n+++ b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n\n@@ -99,7 +99,7 @@ public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n \t\t}\n \t}\n \n-\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\tprivate final Set<GeneratedFile> generatedFiles = new HashSet<>();\n \n \tprivate String projectName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwODAxOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415308018", "bodyText": "staticProject without qualification", "author": "szarnekow", "createdAt": "2020-04-26T13:13:25Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.util.StringInputStream;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\t@Inject\n+\tprivate IHyperlinkHelper hyperlinkHelper;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\nindex 288e3d01f..cb98ef56d 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n\n@@ -40,18 +40,18 @@ public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase i\n \n \t@BeforeClass\n \tpublic static void createTestProject() throws Exception {\n-\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t\tstaticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n \t}\n \n \t@AfterClass\n \tpublic static void deleteTestProject() throws Exception {\n-\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);\n+\t\tJavaProjectSetupUtil.deleteProject(staticProject);\n \t}\n \n \t@Override\n \tpublic XtextResource getResourceFor(InputStream stream) {\n \t\ttry {\n-\t\t\tXtextResource result = ((XtextResource) getResourceSet().createResource(URI.createURI((\"Test.\" + fileExtension))));\n+\t\t\tXtextResource result = (XtextResource) getResourceSet().createResource(URI.createURI(\"Test.\" + fileExtension));\n \t\t\tresult.load(stream, null);\n \t\t\treturn result;\n \t\t} catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjQ0MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306441", "bodyText": "Unneeded parenthesis", "author": "tivervac", "createdAt": "2020-04-26T13:05:06Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjU4Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306582", "bodyText": "I know it's a test but a try with resources is probably better right?", "author": "tivervac", "createdAt": "2020-04-26T13:05:48Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));\n+\t\tAssert.assertTrue(file.exists());\n+\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\t\tbyte[] array = new byte[2048];\n+\t\tint bytesRead = 0;\n+\t\tInputStream inp = file.getContents();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxMDIzOQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415310239", "bodyText": "obsolte with iresourcesetuputil", "author": "cdietrich", "createdAt": "2020-04-26T13:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjU5MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306591", "bodyText": "Inline this", "author": "tivervac", "createdAt": "2020-04-26T13:05:57Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IncrementalProjectBuilder;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.Refactoring;\n+import org.eclipse.ltk.core.refactoring.RefactoringDescriptor;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testlanguages.fileAware.ui.tests.FileAwareTestLanguageUiInjectorProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@InjectWith(FileAwareTestLanguageUiInjectorProvider.class)\n+@RunWith(XtextRunner.class)\n+public abstract class AbstractResourceRelocationTest {\n+\tprotected IProject project;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tIResourcesSetupUtil.setAutobuild(false);\n+\t\tproject = IResourcesSetupUtil.createProject(\"test\");\n+\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\tIResourcesSetupUtil.addBuilder(project, XtextProjectHelper.BUILDER_ID);\n+\t}\n+\n+\t@After\n+\tpublic void teardown() throws Exception {\n+\t\tproject.delete(true, true, new NullProgressMonitor());\n+\t\tIResourcesSetupUtil.setAutobuild(true);\n+\t}\n+\n+\tprotected IFile file(String name, CharSequence content) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFile(project.getName() + \"/\" + name, content.toString());\n+\t}\n+\n+\tprotected IFolder folder(String name) throws Exception {\n+\t\treturn IResourcesSetupUtil.createFolder(project.getName() + \"/\" + name);\n+\t}\n+\n+\tprotected void assertFileContents(String filePath, String expected) throws Exception {\n+\t\tIFile file = ((IFile) project.findMember(filePath));\n+\t\tAssert.assertTrue(file.exists());\n+\t\tByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\t\tbyte[] array = new byte[2048];\n+\t\tint bytesRead = 0;\n+\t\tInputStream inp = file.getContents();\n+\t\twhile ((bytesRead = inp.read(array)) != -1) {\n+\t\t\tbuffer.write(array, 0, bytesRead);\n+\t\t}\n+\t\tinp.close();\n+\t\tString text = new String(buffer.toByteArray(), file.getCharset());\n+\t\tAssert.assertEquals(expected, text);\n+\t}\n+\n+\tprotected void performRefactoring(RefactoringDescriptor descriptor) throws Exception {\n+\t\tNullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\nindex 266ab9a97..0d78ee836 100644\n--- a/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n+++ b/org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/AbstractResourceRelocationTest.java\n\n@@ -8,9 +8,6 @@\n  */\n package org.eclipse.xtext.ui.tests.refactoring;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-\n import org.eclipse.core.resources.IFile;\n import org.eclipse.core.resources.IFolder;\n import org.eclipse.core.resources.IProject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjg0Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306847", "bodyText": "Unneeded this.", "author": "tivervac", "createdAt": "2020-04-26T13:06:54Z", "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/workspace/EclipseWorkspaceConfigurationTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.workspace;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.tests.internal.TestsActivator;\n+import org.eclipse.xtext.ui.workspace.EclipseProjectConfig;\n+import org.eclipse.xtext.ui.workspace.EclipseProjectConfigProvider;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+public class EclipseWorkspaceConfigurationTest {\n+\t@Inject\n+\tprivate EclipseProjectConfigProvider projectConfigProvider;\n+\n+\t@Before\n+\tpublic void setup() {\n+\t\tInjector injector = TestsActivator.getInstance()\n+\t\t\t\t.getInjector(TestsActivator.ORG_ECLIPSE_XTEXT_UI_TESTS_EDITOR_CONTENTASSIST_DOMAINMODELTESTLANGUAGE);\n+\t\tinjector.injectMembers(this);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tIResourcesSetupUtil.cleanWorkspace();\n+\t}\n+\n+\t@Test\n+\tpublic void testConfig() throws Exception {\n+\t\tIWorkspaceRoot wsroot = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tfor (IProject p : wsroot.getProjects()) {\n+\t\t\tp.delete(true, true, null);\n+\t\t}\n+\t\tAssert.assertEquals(0, wsroot.getProjects().length);\n+\t\tIJavaProject project = JavaProjectSetupUtil.createJavaProject(\"projectA\");\n+\t\tJavaProjectSetupUtil.createJavaProject(\"projectB\");\n+\t\tEclipseProjectConfig projectConfig = this.projectConfigProvider.createProjectConfig(project.getProject());", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/workspace/EclipseWorkspaceConfigurationTest.java b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/workspace/EclipseWorkspaceConfigurationTest.java\nindex 31acaff53..6b91b4e92 100644\n--- a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/workspace/EclipseWorkspaceConfigurationTest.java\n+++ b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/workspace/EclipseWorkspaceConfigurationTest.java\n\n@@ -50,7 +50,7 @@ public class EclipseWorkspaceConfigurationTest {\n \t\tAssert.assertEquals(0, wsroot.getProjects().length);\n \t\tIJavaProject project = JavaProjectSetupUtil.createJavaProject(\"projectA\");\n \t\tJavaProjectSetupUtil.createJavaProject(\"projectB\");\n-\t\tEclipseProjectConfig projectConfig = this.projectConfigProvider.createProjectConfig(project.getProject());\n+\t\tEclipseProjectConfig projectConfig = projectConfigProvider.createProjectConfig(project.getProject());\n \t\tAssert.assertNotNull(projectConfig);\n \t\tAssert.assertNotNull(projectConfig.getWorkspaceConfig().findProjectByName(\"projectB\"));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjkwMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415306903", "bodyText": "Unneeded this.", "author": "tivervac", "createdAt": "2020-04-26T13:07:21Z", "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistTests.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.xmleditor;\n+\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.ui.testing.AbstractContentAssistTest;\n+import org.eclipse.xtext.ui.tests.xmleditor.ui.tests.XmlUiInjectorProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(XtextRunner.class)\n+@InjectWith(XmlUiInjectorProvider.class)\n+public class XmlContentAssistTests extends AbstractContentAssistTest {\n+\t@Test\n+\tpublic void test01() throws Exception {\n+\t\tnewBuilder().assertText(\"\");\n+\t}\n+\n+\t@Test\n+\tpublic void test02() throws Exception {\n+\t\tthis.newBuilder().append(\"<a b=\\\"\\\" />\").assertTextAtCursorPosition(6, \"\");", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistTests.java b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistTests.java\nindex b5da70249..0d09d1186 100644\n--- a/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistTests.java\n+++ b/org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistTests.java\n\n@@ -25,6 +25,6 @@ public class XmlContentAssistTests extends AbstractContentAssistTest {\n \n \t@Test\n \tpublic void test02() throws Exception {\n-\t\tthis.newBuilder().append(\"<a b=\\\"\\\" />\").assertTextAtCursorPosition(6, \"\");\n+\t\tnewBuilder().append(\"<a b=\\\"\\\" />\").assertTextAtCursorPosition(6, \"\");\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzM3Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307372", "bodyText": "Unneeded this.", "author": "tivervac", "createdAt": "2020-04-26T13:10:03Z", "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.generator.InMemoryFileSystemAccess;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @noextend This class is not intended to be subclassed by clients.\n+ * @noreference This class is not intended to be referenced by clients.\n+ * \n+ * @since 2.7\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.RegisteringFileSystemAccess instead\n+ */\n+@Deprecated\n+public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n+\t/**\n+\t * @noreference This class is not intended to be referenced by clients.\n+\t */\n+\tpublic static class GeneratedFile {\n+\t\tprivate final String path;\n+\n+\t\tprivate final String javaClassName;\n+\n+\t\tprivate final CharSequence contents;\n+\n+\t\tpublic GeneratedFile(String path, String javaClassName, CharSequence contents) {\n+\t\t\tthis.path = path;\n+\t\t\tthis.javaClassName = javaClassName;\n+\t\t\tthis.contents = contents;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + ((contents == null) ? 0 : contents.hashCode());\n+\t\t\tresult = prime * result + ((javaClassName == null) ? 0 : javaClassName.hashCode());\n+\t\t\tresult = prime * result + ((path == null) ? 0 : path.hashCode());\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null)\n+\t\t\t\treturn false;\n+\t\t\tif (getClass() != obj.getClass())\n+\t\t\t\treturn false;\n+\t\t\tGeneratedFile other = (GeneratedFile) obj;\n+\t\t\tif (contents == null) {\n+\t\t\t\tif (other.contents != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!contents.equals(other.contents))\n+\t\t\t\treturn false;\n+\t\t\tif (javaClassName == null) {\n+\t\t\t\tif (other.javaClassName != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!javaClassName.equals(other.javaClassName))\n+\t\t\t\treturn false;\n+\t\t\tif (path == null) {\n+\t\t\t\tif (other.path != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!path.equals(other.path))\n+\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"path\", this.path);\n+\t\t\tb.add(\"javaClassName\", this.javaClassName);\n+\t\t\tb.add(\"contents\", this.contents);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic String getPath() {\n+\t\t\treturn path;\n+\t\t}\n+\n+\t\tpublic String getJavaClassName() {\n+\t\t\treturn javaClassName;\n+\t\t}\n+\n+\t\tpublic CharSequence getContents() {\n+\t\t\treturn contents;\n+\t\t}\n+\t}\n+\n+\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\n+\tprivate String projectName;\n+\n+\t@Override\n+\tpublic void generateFile(String fileName, String outputConfigurationName, CharSequence contents) {\n+\t\tsuper.generateFile(fileName, outputConfigurationName, contents);\n+\t\tString path = getPath(fileName, outputConfigurationName);\n+\t\tString javaName = null;\n+\t\tif (fileName.endsWith(\".java\")) {\n+\t\t\tjavaName = fileName.substring(0, fileName.length() - 5).replace(\"/\", \".\");\n+\t\t}\n+\t\tgeneratedFiles.add(new RegisteringFileSystemAccess.GeneratedFile(path, javaName, contents));\n+\t}\n+\n+\tprotected String getPath(String fileName, String outputConfigurationName) {\n+\t\tString path = getPathes().get(outputConfigurationName);\n+\t\treturn \"/\" + this.projectName + \"/\" + path + \"/\" + fileName;", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\nindex 78851c776..aac173ec7 100644\n--- a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n+++ b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n\n@@ -99,7 +99,7 @@ public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n \t\t}\n \t}\n \n-\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\tprivate final Set<GeneratedFile> generatedFiles = new HashSet<>();\n \n \tprivate String projectName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzQwNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307406", "bodyText": "Unneeded this", "author": "tivervac", "createdAt": "2020-04-26T13:10:12Z", "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.generator.InMemoryFileSystemAccess;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @noextend This class is not intended to be subclassed by clients.\n+ * @noreference This class is not intended to be referenced by clients.\n+ * \n+ * @since 2.7\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.RegisteringFileSystemAccess instead\n+ */\n+@Deprecated\n+public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n+\t/**\n+\t * @noreference This class is not intended to be referenced by clients.\n+\t */\n+\tpublic static class GeneratedFile {\n+\t\tprivate final String path;\n+\n+\t\tprivate final String javaClassName;\n+\n+\t\tprivate final CharSequence contents;\n+\n+\t\tpublic GeneratedFile(String path, String javaClassName, CharSequence contents) {\n+\t\t\tthis.path = path;\n+\t\t\tthis.javaClassName = javaClassName;\n+\t\t\tthis.contents = contents;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + ((contents == null) ? 0 : contents.hashCode());\n+\t\t\tresult = prime * result + ((javaClassName == null) ? 0 : javaClassName.hashCode());\n+\t\t\tresult = prime * result + ((path == null) ? 0 : path.hashCode());\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null)\n+\t\t\t\treturn false;\n+\t\t\tif (getClass() != obj.getClass())\n+\t\t\t\treturn false;\n+\t\t\tGeneratedFile other = (GeneratedFile) obj;\n+\t\t\tif (contents == null) {\n+\t\t\t\tif (other.contents != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!contents.equals(other.contents))\n+\t\t\t\treturn false;\n+\t\t\tif (javaClassName == null) {\n+\t\t\t\tif (other.javaClassName != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!javaClassName.equals(other.javaClassName))\n+\t\t\t\treturn false;\n+\t\t\tif (path == null) {\n+\t\t\t\tif (other.path != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!path.equals(other.path))\n+\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"path\", this.path);\n+\t\t\tb.add(\"javaClassName\", this.javaClassName);\n+\t\t\tb.add(\"contents\", this.contents);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic String getPath() {\n+\t\t\treturn path;\n+\t\t}\n+\n+\t\tpublic String getJavaClassName() {\n+\t\t\treturn javaClassName;\n+\t\t}\n+\n+\t\tpublic CharSequence getContents() {\n+\t\t\treturn contents;\n+\t\t}\n+\t}\n+\n+\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\n+\tprivate String projectName;\n+\n+\t@Override\n+\tpublic void generateFile(String fileName, String outputConfigurationName, CharSequence contents) {\n+\t\tsuper.generateFile(fileName, outputConfigurationName, contents);\n+\t\tString path = getPath(fileName, outputConfigurationName);\n+\t\tString javaName = null;\n+\t\tif (fileName.endsWith(\".java\")) {\n+\t\t\tjavaName = fileName.substring(0, fileName.length() - 5).replace(\"/\", \".\");\n+\t\t}\n+\t\tgeneratedFiles.add(new RegisteringFileSystemAccess.GeneratedFile(path, javaName, contents));\n+\t}\n+\n+\tprotected String getPath(String fileName, String outputConfigurationName) {\n+\t\tString path = getPathes().get(outputConfigurationName);\n+\t\treturn \"/\" + this.projectName + \"/\" + path + \"/\" + fileName;\n+\t}\n+\n+\tpublic Set<RegisteringFileSystemAccess.GeneratedFile> getGeneratedFiles() {\n+\t\treturn this.generatedFiles;", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\nindex 78851c776..aac173ec7 100644\n--- a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n+++ b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n\n@@ -99,7 +99,7 @@ public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n \t\t}\n \t}\n \n-\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\tprivate final Set<GeneratedFile> generatedFiles = new HashSet<>();\n \n \tprivate String projectName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzU5Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307593", "bodyText": "Since this is noreference and noextend, can the typo be fixed? getPathes() => getPaths()", "author": "tivervac", "createdAt": "2020-04-26T13:11:10Z", "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.generator.InMemoryFileSystemAccess;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @noextend This class is not intended to be subclassed by clients.\n+ * @noreference This class is not intended to be referenced by clients.\n+ * \n+ * @since 2.7\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.RegisteringFileSystemAccess instead\n+ */\n+@Deprecated\n+public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n+\t/**\n+\t * @noreference This class is not intended to be referenced by clients.\n+\t */\n+\tpublic static class GeneratedFile {\n+\t\tprivate final String path;\n+\n+\t\tprivate final String javaClassName;\n+\n+\t\tprivate final CharSequence contents;\n+\n+\t\tpublic GeneratedFile(String path, String javaClassName, CharSequence contents) {\n+\t\t\tthis.path = path;\n+\t\t\tthis.javaClassName = javaClassName;\n+\t\t\tthis.contents = contents;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tfinal int prime = 31;\n+\t\t\tint result = 1;\n+\t\t\tresult = prime * result + ((contents == null) ? 0 : contents.hashCode());\n+\t\t\tresult = prime * result + ((javaClassName == null) ? 0 : javaClassName.hashCode());\n+\t\t\tresult = prime * result + ((path == null) ? 0 : path.hashCode());\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null)\n+\t\t\t\treturn false;\n+\t\t\tif (getClass() != obj.getClass())\n+\t\t\t\treturn false;\n+\t\t\tGeneratedFile other = (GeneratedFile) obj;\n+\t\t\tif (contents == null) {\n+\t\t\t\tif (other.contents != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!contents.equals(other.contents))\n+\t\t\t\treturn false;\n+\t\t\tif (javaClassName == null) {\n+\t\t\t\tif (other.javaClassName != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!javaClassName.equals(other.javaClassName))\n+\t\t\t\treturn false;\n+\t\t\tif (path == null) {\n+\t\t\t\tif (other.path != null)\n+\t\t\t\t\treturn false;\n+\t\t\t} else if (!path.equals(other.path))\n+\t\t\t\treturn false;\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\t\tb.add(\"path\", this.path);\n+\t\t\tb.add(\"javaClassName\", this.javaClassName);\n+\t\t\tb.add(\"contents\", this.contents);\n+\t\t\treturn b.toString();\n+\t\t}\n+\n+\t\tpublic String getPath() {\n+\t\t\treturn path;\n+\t\t}\n+\n+\t\tpublic String getJavaClassName() {\n+\t\t\treturn javaClassName;\n+\t\t}\n+\n+\t\tpublic CharSequence getContents() {\n+\t\t\treturn contents;\n+\t\t}\n+\t}\n+\n+\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\n+\tprivate String projectName;\n+\n+\t@Override\n+\tpublic void generateFile(String fileName, String outputConfigurationName, CharSequence contents) {\n+\t\tsuper.generateFile(fileName, outputConfigurationName, contents);\n+\t\tString path = getPath(fileName, outputConfigurationName);\n+\t\tString javaName = null;\n+\t\tif (fileName.endsWith(\".java\")) {\n+\t\t\tjavaName = fileName.substring(0, fileName.length() - 5).replace(\"/\", \".\");\n+\t\t}\n+\t\tgeneratedFiles.add(new RegisteringFileSystemAccess.GeneratedFile(path, javaName, contents));\n+\t}\n+\n+\tprotected String getPath(String fileName, String outputConfigurationName) {\n+\t\tString path = getPathes().get(outputConfigurationName);", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxMjQwMA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415312400", "bodyText": "inherited, api", "author": "cdietrich", "createdAt": "2020-04-26T13:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\nindex 78851c776..aac173ec7 100644\n--- a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n+++ b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/compiler/RegisteringFileSystemAccess.java\n\n@@ -99,7 +99,7 @@ public class RegisteringFileSystemAccess extends InMemoryFileSystemAccess {\n \t\t}\n \t}\n \n-\tprivate final Set<RegisteringFileSystemAccess.GeneratedFile> generatedFiles = new HashSet<>();\n+\tprivate final Set<GeneratedFile> generatedFiles = new HashSet<>();\n \n \tprivate String projectName;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzY0OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307649", "bodyText": "Unneeded this.", "author": "tivervac", "createdAt": "2020-04-26T13:11:22Z", "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/formatter/AssertingFormatterData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.xbase.junit.formatter;\n+\n+import org.eclipse.xtext.preferences.MapBasedPreferenceValues;\n+import org.eclipse.xtext.xbase.formatting.FormattingPreferenceValues;\n+\n+@Deprecated\n+public class AssertingFormatterData {\n+\tprivate MapBasedPreferenceValues config;\n+\n+\tpublic FormattingPreferenceValues getCfg() {\n+\t\treturn new FormattingPreferenceValues(this.config);", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/formatter/AssertingFormatterData.java b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/formatter/AssertingFormatterData.java\nindex a9d4cfdf0..0999e479e 100644\n--- a/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/formatter/AssertingFormatterData.java\n+++ b/org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/formatter/AssertingFormatterData.java\n\n@@ -16,7 +16,7 @@ public class AssertingFormatterData {\n \tprivate MapBasedPreferenceValues config;\n \n \tpublic FormattingPreferenceValues getCfg() {\n-\t\treturn new FormattingPreferenceValues(this.config);\n+\t\treturn new FormattingPreferenceValues(config);\n \t}\n \n \tprivate CharSequence expectation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNzk3Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415307973", "bodyText": "Unneeded AbstractHyperlinkingTest.", "author": "tivervac", "createdAt": "2020-04-26T13:13:11Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.util.StringInputStream;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\t@Inject\n+\tprivate IHyperlinkHelper hyperlinkHelper;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\nindex 288e3d01f..cb98ef56d 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n\n@@ -40,18 +40,18 @@ public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase i\n \n \t@BeforeClass\n \tpublic static void createTestProject() throws Exception {\n-\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t\tstaticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n \t}\n \n \t@AfterClass\n \tpublic static void deleteTestProject() throws Exception {\n-\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);\n+\t\tJavaProjectSetupUtil.deleteProject(staticProject);\n \t}\n \n \t@Override\n \tpublic XtextResource getResourceFor(InputStream stream) {\n \t\ttry {\n-\t\t\tXtextResource result = ((XtextResource) getResourceSet().createResource(URI.createURI((\"Test.\" + fileExtension))));\n+\t\t\tXtextResource result = (XtextResource) getResourceSet().createResource(URI.createURI(\"Test.\" + fileExtension));\n \t\t\tresult.load(stream, null);\n \t\t\treturn result;\n \t\t} catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwODAwOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415308008", "bodyText": "AbstractHyperlinkingTest.", "author": "tivervac", "createdAt": "2020-04-26T13:13:18Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.util.StringInputStream;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\t@Inject\n+\tprivate IHyperlinkHelper hyperlinkHelper;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void deleteTestProject() throws Exception {\n+\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\nindex 288e3d01f..cb98ef56d 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n\n@@ -40,18 +40,18 @@ public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase i\n \n \t@BeforeClass\n \tpublic static void createTestProject() throws Exception {\n-\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t\tstaticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n \t}\n \n \t@AfterClass\n \tpublic static void deleteTestProject() throws Exception {\n-\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);\n+\t\tJavaProjectSetupUtil.deleteProject(staticProject);\n \t}\n \n \t@Override\n \tpublic XtextResource getResourceFor(InputStream stream) {\n \t\ttry {\n-\t\t\tXtextResource result = ((XtextResource) getResourceSet().createResource(URI.createURI((\"Test.\" + fileExtension))));\n+\t\t\tXtextResource result = (XtextResource) getResourceSet().createResource(URI.createURI(\"Test.\" + fileExtension));\n \t\t\tresult.load(stream, null);\n \t\t\treturn result;\n \t\t} catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwODA0Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415308043", "bodyText": "Unneeded parenthesis", "author": "tivervac", "createdAt": "2020-04-26T13:13:36Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.util.StringInputStream;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\t@Inject\n+\tprivate IHyperlinkHelper hyperlinkHelper;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void deleteTestProject() throws Exception {\n+\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);\n+\t}\n+\n+\t@Override\n+\tpublic XtextResource getResourceFor(InputStream stream) {\n+\t\ttry {\n+\t\t\tXtextResource result = ((XtextResource) getResourceSet().createResource(URI.createURI((\"Test.\" + fileExtension))));", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\nindex 288e3d01f..cb98ef56d 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/AbstractHyperlinkingTest.java\n\n@@ -40,18 +40,18 @@ public abstract class AbstractHyperlinkingTest extends AbstractXbaseUITestCase i\n \n \t@BeforeClass\n \tpublic static void createTestProject() throws Exception {\n-\t\tAbstractHyperlinkingTest.staticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n+\t\tstaticProject = AbstractXbaseUITestCase.createPluginProject(AbstractHyperlinkingTest.class.getName());\n \t}\n \n \t@AfterClass\n \tpublic static void deleteTestProject() throws Exception {\n-\t\tJavaProjectSetupUtil.deleteProject(AbstractHyperlinkingTest.staticProject);\n+\t\tJavaProjectSetupUtil.deleteProject(staticProject);\n \t}\n \n \t@Override\n \tpublic XtextResource getResourceFor(InputStream stream) {\n \t\ttry {\n-\t\t\tXtextResource result = ((XtextResource) getResourceSet().createResource(URI.createURI((\"Test.\" + fileExtension))));\n+\t\t\tXtextResource result = (XtextResource) getResourceSet().createResource(URI.createURI(\"Test.\" + fileExtension));\n \t\t\tresult.load(stream, null);\n \t\t\treturn result;\n \t\t} catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwODEyMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415308121", "bodyText": "Unneeded this.", "author": "tivervac", "createdAt": "2020-04-26T13:13:57Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public class XbaseHyperlinkingTests extends AbstractHyperlinkingTest {\n+\t@Test\n+\tpublic void testBug_454791() throws Exception {\n+\t\tIHyperlink[] hyperlinks = this.getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\nindex d92490b97..29f4ddf14 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\n\n@@ -18,8 +18,8 @@ import org.junit.Test;\n public class XbaseHyperlinkingTests extends AbstractHyperlinkingTest {\n \t@Test\n \tpublic void testBug_454791() throws Exception {\n-\t\tIHyperlink[] hyperlinks = this.getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");\n+\t\tIHyperlink[] hyperlinks = getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");\n \t\tAssert.assertEquals(1, hyperlinks.length);\n-\t\tAssert.assertEquals(\"String\",hyperlinks[0].getHyperlinkText());\n+\t\tAssert.assertEquals(\"String\", hyperlinks[0].getHyperlinkText());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwODE1OA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1414#discussion_r415308158", "bodyText": "Doesn't appear to be formatted", "author": "tivervac", "createdAt": "2020-04-26T13:14:07Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.hyperlinking;\n+\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public class XbaseHyperlinkingTests extends AbstractHyperlinkingTest {\n+\t@Test\n+\tpublic void testBug_454791() throws Exception {\n+\t\tIHyperlink[] hyperlinks = this.getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");\n+\t\tAssert.assertEquals(1, hyperlinks.length);\n+\t\tAssert.assertEquals(\"String\",hyperlinks[0].getHyperlinkText());", "originalCommit": "5383359a8b396981bca84ddd6d1c2c98bdc595f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\nindex d92490b97..29f4ddf14 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/hyperlinking/XbaseHyperlinkingTests.java\n\n@@ -18,8 +18,8 @@ import org.junit.Test;\n public class XbaseHyperlinkingTests extends AbstractHyperlinkingTest {\n \t@Test\n \tpublic void testBug_454791() throws Exception {\n-\t\tIHyperlink[] hyperlinks = this.getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");\n+\t\tIHyperlink[] hyperlinks = getHyperLinks(\"{ val Str|ing value = \\'foo\\' }\");\n \t\tAssert.assertEquals(1, hyperlinks.length);\n-\t\tAssert.assertEquals(\"String\",hyperlinks[0].getHyperlinkText());\n+\t\tAssert.assertEquals(\"String\", hyperlinks[0].getHyperlinkText());\n \t}\n }\n"}}, {"oid": "bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "url": "https://github.com/eclipse/xtext-eclipse/commit/bee9fbcd0e9477e9743250d21ce0f1be06211c9e", "message": "converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T13:41:25Z", "type": "forcePushed"}, {"oid": "5585c36a0250f6fedbd5c9138290a5f4414fd630", "url": "https://github.com/eclipse/xtext-eclipse/commit/5585c36a0250f6fedbd5c9138290a5f4414fd630", "message": "converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T16:35:19Z", "type": "forcePushed"}, {"oid": "01582442a95ebaf41ee450e0d385d313b3fe4cd0", "url": "https://github.com/eclipse/xtext-eclipse/commit/01582442a95ebaf41ee450e0d385d313b3fe4cd0", "message": "converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T16:56:13Z", "type": "commit"}, {"oid": "01582442a95ebaf41ee450e0d385d313b3fe4cd0", "url": "https://github.com/eclipse/xtext-eclipse/commit/01582442a95ebaf41ee450e0d385d313b3fe4cd0", "message": "converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T16:56:13Z", "type": "forcePushed"}]}