{"pr_number": 1420, "pr_title": "[eclipse/xtext#1679]ported more code to java", "pr_createdAt": "2020-04-28T16:57:10Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1420", "timeline": [{"oid": "f2fa953fac474c9847060bf23c79b2a8729c503c", "url": "https://github.com/eclipse/xtext-eclipse/commit/f2fa953fac474c9847060bf23c79b2a8729c503c", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-28T17:08:30Z", "type": "forcePushed"}, {"oid": "25110d1a76c390d941a2d6893788058747e3fc59", "url": "https://github.com/eclipse/xtext-eclipse/commit/25110d1a76c390d941a2d6893788058747e3fc59", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T07:31:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTQ5MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417195490", "bodyText": "I wonder if the try-catch block is needed here.", "author": "nbhusare", "createdAt": "2020-04-29T09:51:15Z", "path": "org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistLexerTests.java", "diffHunk": "@@ -34,22 +35,26 @@\n   \n   @Override\n   public void test022() {\n-    StringConcatenation _builder = new StringConcatenation();\n-    _builder.append(\"<a b=\\\"/>\");\n-    _builder.newLine();\n-    StringConcatenation _builder_1 = new StringConcatenation();\n-    _builder_1.append(\"RULE_TAG_START_OPEN \\'<\\'\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"RULE_ID \\'a\\'\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"RULE_WS \\' \\'\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"RULE_ID \\'b\\'\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"RULE_ATTR_EQ \\'=\\'\");\n-    _builder_1.newLine();\n-    _builder_1.append(\"RULE_TAG_EMPTY_CLOSE \\'/>\\'\");\n-    _builder_1.newLine();\n-    this.assertLexing(_builder, _builder_1);\n+    try {", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNDU1MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417224550", "bodyText": "generated code", "author": "cdietrich", "createdAt": "2020-04-29T10:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "133030deb0f587f6cc7cfebf0b7e637610689e71", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistLexerTests.java b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistLexerTests.java\nindex 733cd5aa9..1b510169a 100644\n--- a/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistLexerTests.java\n+++ b/org.eclipse.xtext.ui.tests/xtend-gen/org/eclipse/xtext/ui/tests/xmleditor/XmlContentAssistLexerTests.java\n\n@@ -34,27 +33,23 @@ public class XmlContentAssistLexerTests extends AbstractXmlLexerTest {\n   }\n   \n   @Override\n-  public void test022() {\n-    try {\n-      StringConcatenation _builder = new StringConcatenation();\n-      _builder.append(\"<a b=\\\"/>\");\n-      _builder.newLine();\n-      StringConcatenation _builder_1 = new StringConcatenation();\n-      _builder_1.append(\"RULE_TAG_START_OPEN \\'<\\'\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"RULE_ID \\'a\\'\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"RULE_WS \\' \\'\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"RULE_ID \\'b\\'\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"RULE_ATTR_EQ \\'=\\'\");\n-      _builder_1.newLine();\n-      _builder_1.append(\"RULE_TAG_EMPTY_CLOSE \\'/>\\'\");\n-      _builder_1.newLine();\n-      this.assertLexing(_builder, _builder_1);\n-    } catch (Throwable _e) {\n-      throw Exceptions.sneakyThrow(_e);\n-    }\n+  public void test022() throws Exception {\n+    StringConcatenation _builder = new StringConcatenation();\n+    _builder.append(\"<a b=\\\"/>\");\n+    _builder.newLine();\n+    StringConcatenation _builder_1 = new StringConcatenation();\n+    _builder_1.append(\"RULE_TAG_START_OPEN \\'<\\'\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"RULE_ID \\'a\\'\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"RULE_WS \\' \\'\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"RULE_ID \\'b\\'\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"RULE_ATTR_EQ \\'=\\'\");\n+    _builder_1.newLine();\n+    _builder_1.append(\"RULE_TAG_EMPTY_CLOSE \\'/>\\'\");\n+    _builder_1.newLine();\n+    this.assertLexing(_builder, _builder_1);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTU1MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417195550", "bodyText": "Please remove Assert.", "author": "nbhusare", "createdAt": "2020-04-29T09:51:21Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug372950Test.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import java.util.List;\n+\n+import org.eclipse.jface.text.contentassist.ICompletionProposal;\n+import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class Bug372950Test extends AbstractXbaseContentAssistBugTest {\n+\t@Ignore\n+\t@Test\n+\tpublic void testProposeStringBuffer_01() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if (o as String != 1 && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Ignore\n+\t@Test\n+\tpublic void testProposeStringBuffer_02() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if (o as String != 1d && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Ignore\n+\t@Test\n+\tpublic void testProposeStringBuffer_03() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if (o as String != 1.1e5 && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Test\n+\tpublic void testProposeStringBuffer_04() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if (o as String != (1) && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Test\n+\tpublic void testProposeStringBuffer_05() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if (o as String != \\\"\\\" && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Test\n+\tpublic void testProposeStringBuffer_06() throws Exception {\n+\t\tshouldPropose(\"if (true) {} else { if ((o as String != 1) && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\t@Test\n+\tpublic void testProposeStringBuffer_07() throws Exception {\n+\t\tshouldPropose(\"if (true) { if (o as String != 1 && o instanceof StringBuff\", StringBuffer.class);\n+\t}\n+\n+\tprotected void shouldPropose(String input, Class<?> proposedType) throws Exception {\n+\t\tContentAssistProcessorTestBuilder tester = newBuilder();\n+\t\tICompletionProposal[] proposals = tester.append(input).computeCompletionProposals();\n+\t\tList<String> proposalStrings = tester.toString(proposals);\n+\t\tAssert.assertTrue(proposalStrings.toString(), proposalStrings.contains(proposedType.getSimpleName()));", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug372950Test.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug372950Test.java\nindex 880eb1c19..522d66c25 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug372950Test.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug372950Test.java\n\n@@ -12,7 +12,6 @@ import java.util.List;\n \n import org.eclipse.jface.text.contentassist.ICompletionProposal;\n import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n-import org.junit.Assert;\n import org.junit.Ignore;\n import org.junit.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTU2NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417195565", "bodyText": "Please remove Assert.", "author": "nbhusare", "createdAt": "2020-04-29T09:51:23Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug379238Test.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.ui.editor.hover.html.XtextBrowserInformationControlInput;\n+import org.eclipse.xtext.xbase.XConstructorCall;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Holger Schill - Initial contribution and API\n+ */\n+public class Bug379238Test extends AbstractXbaseUITestCase {\n+\t@Inject\n+\tprivate ParseHelper<XConstructorCall> parseHelper;\n+\n+\t@Inject\n+\tprivate TestingXbaseHoverProvider hoverProvider;\n+\n+\t@Test\n+\tpublic void testXConstructorWithNullConstructorNoException() throws Exception {\n+\t\tXConstructorCall constructorCall = parseHelper.parse(\"new()\");\n+\t\tXtextBrowserInformationControlInput result = hoverProvider.getHoverInfo(constructorCall);\n+\t\tAssert.assertNull(result);", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug379238Test.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug379238Test.java\nindex f0972435c..7b08fc631 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug379238Test.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/Bug379238Test.java\n\n@@ -12,7 +12,6 @@ import org.eclipse.xtext.testing.util.ParseHelper;\n import org.eclipse.xtext.ui.editor.hover.html.XtextBrowserInformationControlInput;\n import org.eclipse.xtext.xbase.XConstructorCall;\n import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTg1Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417195852", "bodyText": "final", "author": "nbhusare", "createdAt": "2020-04-29T09:51:52Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/ContentAssistTest.java", "diffHunk": "@@ -29,29 +29,29 @@\n  */\n public class ContentAssistTest extends AbstractXbaseContentAssistTest {\n \n-\tprotected static final String PROJECT_NAME = \"ContentAssistTestProject\";\n+\tprotected static String PROJECT_NAME = \"ContentAssistTestProject\";", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/ContentAssistTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/ContentAssistTest.java\nindex f77efbb01..db3a042a0 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/ContentAssistTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/ContentAssistTest.java\n\n@@ -29,7 +29,7 @@ import com.google.inject.Injector;\n  */\n public class ContentAssistTest extends AbstractXbaseContentAssistTest {\n \n-\tprotected static String PROJECT_NAME = \"ContentAssistTestProject\";\n+\tprotected static final String PROJECT_NAME = \"ContentAssistTestProject\";\n \n \tprivate IProject demandCreateProject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NTk2Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417195967", "bodyText": "Duplicate code in this and the following test. You might like to abstract it out into a separate method", "author": "nbhusare", "createdAt": "2020-04-29T09:52:05Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/XbaseResourceForEditorInputFactoryTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IStorage;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.IPackageFragmentRoot;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.xtext.xbase.ui.editor.XbaseResourceForEditorInputFactory;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+public class XbaseResourceForEditorInputFactoryTest extends AbstractXbaseUITestCase {\n+\t@Inject\n+\tprivate XbaseResourceForEditorInputFactory editorInputFactory;\n+\n+\t@Test\n+\tpublic void testValidationIsDisabled_01() throws Exception {\n+\t\tIProject project = workspace.getRoot().getProject(\"simpleProject\");\n+\t\tproject.create(null);\n+\t\tproject.open(null);\n+\t\tIFile file = project.getFile(\"Hello.xtext\");", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c019e1d700d90575130b2f7c0af2c15fce180823", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/XbaseResourceForEditorInputFactoryTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/XbaseResourceForEditorInputFactoryTest.java\nindex c4c098c39..e1b1ae63d 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/XbaseResourceForEditorInputFactoryTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/XbaseResourceForEditorInputFactoryTest.java\n\n@@ -20,7 +20,6 @@ import org.eclipse.jdt.core.IPackageFragmentRoot;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.xtext.xbase.ui.editor.XbaseResourceForEditorInputFactory;\n import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NjA4MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417196080", "bodyText": "((XtextResource) expression.eResource()) -> (XtextResource) expression.eResource()", "author": "nbhusare", "createdAt": "2020-04-29T09:52:18Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.refactoring;\n+\n+import java.util.List;\n+\n+import org.eclipse.jface.text.TextSelection;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.ui.refactoring.ExpressionUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class ExpressionUtilTest extends AbstractXbaseTestCase {\n+\t@Inject\n+\tprivate ExpressionUtil util;\n+\n+\t@Inject\n+\tprivate ParseHelper<XExpression> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\t@Test\n+\tpublic void testSelectedExpression() throws Exception {\n+\t\tassertExpressionSelected(\"$$123+456\", \"123\");\n+\t\tassertExpressionSelected(\"$1$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"$12$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"$123$+456\", \"123\");\n+\t\tassertExpressionSelected(\"1$$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"12$$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"123$$+456\", \"123\");\n+\t\tassertExpressionSelected(\"123+$$456\", \"456\");\n+\t\tassertExpressionSelected(\"123$+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[$it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[it$|$toFirstUpper]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_01() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$true)\", \"true\");\n+\t\tassertExpressionSelected(\"newArrayList($$\\'ru\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList($\\'ru\\'$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru\\'$$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru$$\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'$ru$\\')\", \"\\'ru\\'\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_02() throws Exception {\n+\t\tassertExpressionSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_03() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#[42])\", \"#[42]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_04() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#{42})\", \"#{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_05() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($${42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_06() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($ {$42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testBug401082() throws Exception {\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).toString$ ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).$toString ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String)$.toString ?:\\\"foo\\\") }\", \"x as String\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"$$123+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$1$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$12$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$123$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"1$$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"12$$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123$$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123+$$456\", \"456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) $$null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions_1() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"{ val x=$1 val y=3$ val z=5 }\", \"val x=1 val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1$ val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3$ val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 v$al z=5 }\", \"val y=3 val z=5\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPoint() throws Exception {\n+\t\tassertInsertionPoint(\"{ val x = 1 $2+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2$+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = $1 2+$3 }\", \"val x = 1\");\n+\t\tassertInsertionPoint(\"{ val x = 1$ 2+$3 }\", \"val x = 1\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointIf() throws Exception {\n+\t\tassertInsertionPoint(\"if($1==2.intValue) true\", null);\n+\t\tassertInsertionPoint(\"{ if($1==2.intValue) true }\", \"if(1==2.intValue) true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) $true\", \"true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) true else $false\", \"false\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) { val x = 7 + $8 }\", \"val x = 7 + 8\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointSwitch() throws Exception {\n+\t\tassertInsertionPoint(\"switch 1 { case 1: 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"switch 1 { case 2: true default: 2+$3 }\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointWhile() throws Exception {\n+\t\tassertInsertionPoint(\"while(true) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"while($true) new $String()\", null);\n+\t\tassertInsertionPoint(\"do new $String() while(true)\", \"new String()\");\n+\t\tassertInsertionPoint(\"do new String() while($true)\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointFor() throws Exception {\n+\t\tassertInsertionPoint(\"for(i: 1..2) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"for(i: $1..2) new $String()\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointClosure() throws Exception {\n+\t\tassertInsertionPoint(\"[|2+$3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|2$+3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|$2+3]\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointTry() throws Exception {\n+\t\tassertInsertionPoint(\"try 2+$3 catch(Exception e) true\", \"2+3\");\n+\t\tassertInsertionPoint(\"try true catch(Exception e) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"try true finally new $String()\", \"new String()\");\n+\t}\n+\n+\tprotected void assertExpressionSelected(String modelWithSelectionMarkup, String expectedSelection) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\nindex 38e62b0e5..d4ed7db75 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n\n@@ -195,7 +195,7 @@ public class ExpressionUtilTest extends AbstractXbaseTestCase {\n \t\tXExpression expression = parse(cleanedModel);\n \t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n \t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n-\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\tXExpression selectedExpression = util.findSelectedExpression((XtextResource) expression.eResource(),\n \t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n \t\tITextRegion selectedRegion = locationInFileProvider.getFullTextRegion(selectedExpression);\n \t\tAssert.assertEquals(expectedSelection,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NjExNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417196116", "bodyText": "((XtextResource) expression.eResource()) -> (XtextResource) expression.eResource()", "author": "nbhusare", "createdAt": "2020-04-29T09:52:22Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.refactoring;\n+\n+import java.util.List;\n+\n+import org.eclipse.jface.text.TextSelection;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.ui.refactoring.ExpressionUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class ExpressionUtilTest extends AbstractXbaseTestCase {\n+\t@Inject\n+\tprivate ExpressionUtil util;\n+\n+\t@Inject\n+\tprivate ParseHelper<XExpression> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\t@Test\n+\tpublic void testSelectedExpression() throws Exception {\n+\t\tassertExpressionSelected(\"$$123+456\", \"123\");\n+\t\tassertExpressionSelected(\"$1$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"$12$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"$123$+456\", \"123\");\n+\t\tassertExpressionSelected(\"1$$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"12$$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"123$$+456\", \"123\");\n+\t\tassertExpressionSelected(\"123+$$456\", \"456\");\n+\t\tassertExpressionSelected(\"123$+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[$it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[it$|$toFirstUpper]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_01() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$true)\", \"true\");\n+\t\tassertExpressionSelected(\"newArrayList($$\\'ru\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList($\\'ru\\'$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru\\'$$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru$$\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'$ru$\\')\", \"\\'ru\\'\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_02() throws Exception {\n+\t\tassertExpressionSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_03() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#[42])\", \"#[42]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_04() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#{42})\", \"#{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_05() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($${42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_06() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($ {$42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testBug401082() throws Exception {\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).toString$ ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).$toString ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String)$.toString ?:\\\"foo\\\") }\", \"x as String\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"$$123+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$1$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$12$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$123$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"1$$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"12$$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123$$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123+$$456\", \"456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) $$null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions_1() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"{ val x=$1 val y=3$ val z=5 }\", \"val x=1 val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1$ val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3$ val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 v$al z=5 }\", \"val y=3 val z=5\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPoint() throws Exception {\n+\t\tassertInsertionPoint(\"{ val x = 1 $2+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2$+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = $1 2+$3 }\", \"val x = 1\");\n+\t\tassertInsertionPoint(\"{ val x = 1$ 2+$3 }\", \"val x = 1\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointIf() throws Exception {\n+\t\tassertInsertionPoint(\"if($1==2.intValue) true\", null);\n+\t\tassertInsertionPoint(\"{ if($1==2.intValue) true }\", \"if(1==2.intValue) true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) $true\", \"true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) true else $false\", \"false\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) { val x = 7 + $8 }\", \"val x = 7 + 8\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointSwitch() throws Exception {\n+\t\tassertInsertionPoint(\"switch 1 { case 1: 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"switch 1 { case 2: true default: 2+$3 }\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointWhile() throws Exception {\n+\t\tassertInsertionPoint(\"while(true) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"while($true) new $String()\", null);\n+\t\tassertInsertionPoint(\"do new $String() while(true)\", \"new String()\");\n+\t\tassertInsertionPoint(\"do new String() while($true)\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointFor() throws Exception {\n+\t\tassertInsertionPoint(\"for(i: 1..2) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"for(i: $1..2) new $String()\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointClosure() throws Exception {\n+\t\tassertInsertionPoint(\"[|2+$3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|2$+3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|$2+3]\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointTry() throws Exception {\n+\t\tassertInsertionPoint(\"try 2+$3 catch(Exception e) true\", \"2+3\");\n+\t\tassertInsertionPoint(\"try true catch(Exception e) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"try true finally new $String()\", \"new String()\");\n+\t}\n+\n+\tprotected void assertExpressionSelected(String modelWithSelectionMarkup, String expectedSelection) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n+\t\tITextRegion selectedRegion = locationInFileProvider.getFullTextRegion(selectedExpression);\n+\t\tAssert.assertEquals(expectedSelection,\n+\t\t\t\tcleanedModel.substring(selectedRegion.getOffset(), selectedRegion.getOffset() + selectedRegion.getLength()));\n+\t}\n+\n+\tprotected void assertSiblingExpressionsSelected(String modelWithSelectionMarkup, String expectedSelection) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tList<XExpression> selectedExpressions = util.findSelectedSiblingExpressions(((XtextResource) expression.eResource()),", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\nindex 38e62b0e5..d4ed7db75 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n\n@@ -195,7 +195,7 @@ public class ExpressionUtilTest extends AbstractXbaseTestCase {\n \t\tXExpression expression = parse(cleanedModel);\n \t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n \t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n-\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\tXExpression selectedExpression = util.findSelectedExpression((XtextResource) expression.eResource(),\n \t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n \t\tITextRegion selectedRegion = locationInFileProvider.getFullTextRegion(selectedExpression);\n \t\tAssert.assertEquals(expectedSelection,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NjE0Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417196142", "bodyText": "((XtextResource) expression.eResource()) -> (XtextResource) expression.eResource()", "author": "nbhusare", "createdAt": "2020-04-29T09:52:26Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.refactoring;\n+\n+import java.util.List;\n+\n+import org.eclipse.jface.text.TextSelection;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.ui.refactoring.ExpressionUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class ExpressionUtilTest extends AbstractXbaseTestCase {\n+\t@Inject\n+\tprivate ExpressionUtil util;\n+\n+\t@Inject\n+\tprivate ParseHelper<XExpression> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\t@Test\n+\tpublic void testSelectedExpression() throws Exception {\n+\t\tassertExpressionSelected(\"$$123+456\", \"123\");\n+\t\tassertExpressionSelected(\"$1$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"$12$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"$123$+456\", \"123\");\n+\t\tassertExpressionSelected(\"1$$23+456\", \"123\");\n+\t\tassertExpressionSelected(\"12$$3+456\", \"123\");\n+\t\tassertExpressionSelected(\"123$$+456\", \"123\");\n+\t\tassertExpressionSelected(\"123+$$456\", \"456\");\n+\t\tassertExpressionSelected(\"123$+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertExpressionSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertExpressionSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[$it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map[it$|$toFirstUpper]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper]$\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'jan\\',\\'hein\\',\\'claas\\',\\'pit\\').map$[it|toFirstUpper$]\", \"[it|toFirstUpper]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_01() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$true)\", \"true\");\n+\t\tassertExpressionSelected(\"newArrayList($$\\'ru\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList($\\'ru\\'$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru\\'$$)\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'ru$$\\')\", \"\\'ru\\'\");\n+\t\tassertExpressionSelected(\"newArrayList(\\'$ru$\\')\", \"\\'ru\\'\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_02() throws Exception {\n+\t\tassertExpressionSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_03() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#[42])\", \"#[42]\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_04() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($$#{42})\", \"#{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_05() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($${42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpression_06() throws Exception {\n+\t\tassertExpressionSelected(\"newArrayList($ {$42})\", \"{42}\");\n+\t}\n+\n+\t@Test\n+\tpublic void testBug401082() throws Exception {\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).toString$ ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String).$toString ?:\\\"foo\\\") }\", \"(x as String).toString\");\n+\t\tassertExpressionSelected(\"{ var Object x val result = ($(x as String)$.toString ?:\\\"foo\\\") }\", \"x as String\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"$$123+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$1$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$12$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"$123$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"1$$23+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"12$$3+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123$$+456\", \"123\");\n+\t\tassertSiblingExpressionsSelected(\"123+$$456\", \"456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"12$3+$456\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"123$+4$56\", \"123+456\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.$$TRUE) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE$$) null\", \"Boolean.TRUE\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE)$$ null\", \"if(Boolean.TRUE) null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) $$null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null$$ else null\", \"null\");\n+\t\tassertSiblingExpressionsSelected(\"if(Boolean.TRUE) null $$else null\", \"if(Boolean.TRUE) null else null\");\n+\t}\n+\n+\t@Test\n+\tpublic void testSelectedExpressions_1() throws Exception {\n+\t\tassertSiblingExpressionsSelected(\"{ val x=$1 val y=3$ val z=5 }\", \"val x=1 val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1$ val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3$ val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 $val z=5 }\", \"val y=3\");\n+\t\tassertSiblingExpressionsSelected(\"{ val x=1 $val y=3 v$al z=5 }\", \"val y=3 val z=5\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPoint() throws Exception {\n+\t\tassertInsertionPoint(\"{ val x = 1 $2+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2$+3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = 1 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"{ val x = $1 2+$3 }\", \"val x = 1\");\n+\t\tassertInsertionPoint(\"{ val x = 1$ 2+$3 }\", \"val x = 1\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointIf() throws Exception {\n+\t\tassertInsertionPoint(\"if($1==2.intValue) true\", null);\n+\t\tassertInsertionPoint(\"{ if($1==2.intValue) true }\", \"if(1==2.intValue) true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) $true\", \"true\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) true else $false\", \"false\");\n+\t\tassertInsertionPoint(\"if(1==2.intValue) { val x = 7 + $8 }\", \"val x = 7 + 8\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointSwitch() throws Exception {\n+\t\tassertInsertionPoint(\"switch 1 { case 1: 2+$3 }\", \"2+3\");\n+\t\tassertInsertionPoint(\"switch 1 { case 2: true default: 2+$3 }\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointWhile() throws Exception {\n+\t\tassertInsertionPoint(\"while(true) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"while($true) new $String()\", null);\n+\t\tassertInsertionPoint(\"do new $String() while(true)\", \"new String()\");\n+\t\tassertInsertionPoint(\"do new String() while($true)\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointFor() throws Exception {\n+\t\tassertInsertionPoint(\"for(i: 1..2) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"for(i: $1..2) new $String()\", null);\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointClosure() throws Exception {\n+\t\tassertInsertionPoint(\"[|2+$3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|2$+3]\", \"2+3\");\n+\t\tassertInsertionPoint(\"[|$2+3]\", \"2+3\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInsertionPointTry() throws Exception {\n+\t\tassertInsertionPoint(\"try 2+$3 catch(Exception e) true\", \"2+3\");\n+\t\tassertInsertionPoint(\"try true catch(Exception e) new $String()\", \"new String()\");\n+\t\tassertInsertionPoint(\"try true finally new $String()\", \"new String()\");\n+\t}\n+\n+\tprotected void assertExpressionSelected(String modelWithSelectionMarkup, String expectedSelection) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n+\t\tITextRegion selectedRegion = locationInFileProvider.getFullTextRegion(selectedExpression);\n+\t\tAssert.assertEquals(expectedSelection,\n+\t\t\t\tcleanedModel.substring(selectedRegion.getOffset(), selectedRegion.getOffset() + selectedRegion.getLength()));\n+\t}\n+\n+\tprotected void assertSiblingExpressionsSelected(String modelWithSelectionMarkup, String expectedSelection) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tList<XExpression> selectedExpressions = util.findSelectedSiblingExpressions(((XtextResource) expression.eResource()),\n+\t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n+\t\tList<ITextRegion> regions = ListExtensions.map(selectedExpressions, it -> locationInFileProvider.getFullTextRegion(it));\n+\t\tITextRegion selectedRegion = IterableExtensions.reduce(regions, (a, b) -> a.merge(b));\n+\t\tAssert.assertEquals(expectedSelection,\n+\t\t\t\tcleanedModel.substring(selectedRegion.getOffset(), selectedRegion.getOffset() + selectedRegion.getLength()));\n+\t}\n+\n+\tprotected void assertInsertionPoint(String modelWithInsertionMarkup, String expectedSuccessor) throws Exception {\n+\t\tString cleanedModel = modelWithInsertionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithInsertionMarkup.indexOf(\"$\");\n+\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\nindex 38e62b0e5..d4ed7db75 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/ExpressionUtilTest.java\n\n@@ -195,7 +195,7 @@ public class ExpressionUtilTest extends AbstractXbaseTestCase {\n \t\tXExpression expression = parse(cleanedModel);\n \t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n \t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n-\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\tXExpression selectedExpression = util.findSelectedExpression((XtextResource) expression.eResource(),\n \t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n \t\tITextRegion selectedRegion = locationInFileProvider.getFullTextRegion(selectedExpression);\n \t\tAssert.assertEquals(expectedSelection,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5NjE3NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1420#discussion_r417196175", "bodyText": "((XtextResource) expression.eResource()) -> (XtextResource) expression.eResource()", "author": "nbhusare", "createdAt": "2020-04-29T09:52:31Z", "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/NewFeatureNameUtilTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.refactoring;\n+\n+import org.eclipse.jface.text.TextSelection;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.ui.refactoring.ExpressionUtil;\n+import org.eclipse.xtext.xbase.ui.refactoring.NewFeatureNameUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseTestCase;\n+import org.eclipse.xtext.xbase.ui.tests.XbaseInjectorProviderWithScopeTracking;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+@InjectWith(XbaseInjectorProviderWithScopeTracking.class)\n+@RunWith(XtextRunner.class)\n+public class NewFeatureNameUtilTest extends AbstractXbaseTestCase {\n+\t@Inject\n+\tprivate ExpressionUtil util;\n+\n+\t@Inject\n+\tprivate Provider<NewFeatureNameUtil> nameUtilProvider;\n+\n+\t@Inject\n+\tprivate ParseHelper<XExpression> parseHelper;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationHelper;\n+\n+\t@Test\n+\tpublic void testDefaultNamePrimitive() throws Exception {\n+\t\tassertDefaultName(\"{2+$3}\", \"i\");\n+\t\tassertDefaultName(\"{2+$3f}\", \"f\");\n+\t\tassertDefaultName(\"{2+$3l}\", \"l\");\n+\t\tassertDefaultName(\"{2+$3.0}\", \"d\");\n+\t\tassertDefaultName(\"{$true}\", \"b\");\n+\t}\n+\n+\t@Test\n+\tpublic void testDefaultNameFeatureCall() throws Exception {\n+\t\tassertDefaultName(\"{\\\"\\\".$getBytes}\", \"bytes\");\n+\t\tassertDefaultName(\"{\\\"\\\".$length}\", \"length\");\n+\t}\n+\n+\t@Test\n+\tpublic void testDefaultNameType() throws Exception {\n+\t\tassertDefaultName(\"{$2+3$}\", \"i\");\n+\t\tassertDefaultName(\"{\\\"$\\\"}\", \"string\");\n+\t}\n+\n+\t@Test\n+\tpublic void testDefaultNameAlternate() throws Exception {\n+\t\tassertDefaultName(\"{val i=1 2+$3}\", \"j\");\n+\t\tassertDefaultName(\"{val j=2+$3 val i=1}\", \"k\");\n+\t\tassertDefaultName(\"{val i=1 {val j=2+$3}}\", \"k\");\n+\t\tassertDefaultName(\"{val j=1 {val i=2+$3}}\", \"k\");\n+\t\tassertDefaultName(\"{{val j=2+$3} val i=1 }\", \"i\");\n+\t}\n+\n+\t@Test\n+\tpublic void testDefaultNameClosure() throws Exception {\n+\t\tassertDefaultName(\"{newArrayList(\\\"\\\").map[toFirstUpper]$$}\", \"function\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidNameNull() throws Exception {\n+\t\tassertInvalidName(null, RefactoringStatus.FATAL, \"Choose a name\");\n+\t\tassertInvalidName(\"\", RefactoringStatus.FATAL, \"Choose a name\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidNameSyntax() throws Exception {\n+\t\tassertInvalidName(\"%\", RefactoringStatus.FATAL, \"character\");\n+\t\tassertInvalidName(\"g\ufffdrkenbr\ufffdd\", RefactoringStatus.FATAL, \"character\");\n+\t\tassertInvalidName(\"&\", RefactoringStatus.FATAL, \"character\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidNameKeyword() throws Exception {\n+\t\tassertInvalidName(\"if\", RefactoringStatus.FATAL, \"keyword\");\n+\t\tassertInvalidName(\"else\", RefactoringStatus.FATAL, \"keyword\");\n+\t\tassertInvalidName(\"while\", RefactoringStatus.FATAL, \"keyword\");\n+\t\tassertInvalidName(\"do\", RefactoringStatus.FATAL, \"keyword\");\n+\t\tassertInvalidName(\"switch\", RefactoringStatus.FATAL, \"keyword\");\n+\t\tassertInvalidName(\"case\", RefactoringStatus.FATAL, \"keyword\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidNamePrimitive() throws Exception {\n+\t\tassertInvalidName(\"boolean\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"short\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"char\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"int\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"long\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"float\", RefactoringStatus.FATAL, \"reserved\");\n+\t\tassertInvalidName(\"double\", RefactoringStatus.FATAL, \"reserved\");\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidNameUpperCase() throws Exception {\n+\t\tassertInvalidName(\"CamelCase\", RefactoringStatus.ERROR, \"lowercase\");\n+\t}\n+\n+\tprotected void assertDefaultName(String modelWithSelectionMarkup, String expectedName) throws Exception {\n+\t\tString cleanedModel = modelWithSelectionMarkup.replaceAll(\"\\\\$\", \"\");\n+\t\tXExpression expression = parse(cleanedModel);\n+\t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n+\t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n+\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),", "originalCommit": "25110d1a76c390d941a2d6893788058747e3fc59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "chunk": "diff --git a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/NewFeatureNameUtilTest.java b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/NewFeatureNameUtilTest.java\nindex f6148e50d..7be104ea2 100644\n--- a/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/NewFeatureNameUtilTest.java\n+++ b/org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/refactoring/NewFeatureNameUtilTest.java\n\n@@ -124,7 +124,7 @@ public class NewFeatureNameUtilTest extends AbstractXbaseTestCase {\n \t\tXExpression expression = parse(cleanedModel);\n \t\tint selectionOffset = modelWithSelectionMarkup.indexOf(\"$\");\n \t\tint selectionLength = modelWithSelectionMarkup.lastIndexOf(\"$\") - selectionOffset - 1;\n-\t\tXExpression selectedExpression = util.findSelectedExpression(((XtextResource) expression.eResource()),\n+\t\tXExpression selectedExpression = util.findSelectedExpression((XtextResource) expression.eResource(),\n \t\t\t\tnew TextSelection(selectionOffset, selectionLength));\n \t\tXExpression successor = util.findSuccessorExpressionForVariableDeclaration(selectedExpression);\n \t\tNewFeatureNameUtil nameUtil = nameUtilProvider.get();\n"}}, {"oid": "89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "url": "https://github.com/eclipse/xtext-eclipse/commit/89a58da137b2d7d4e5da813b69b887f7fdd04e2c", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T10:50:02Z", "type": "forcePushed"}, {"oid": "c019e1d700d90575130b2f7c0af2c15fce180823", "url": "https://github.com/eclipse/xtext-eclipse/commit/c019e1d700d90575130b2f7c0af2c15fce180823", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T11:11:14Z", "type": "forcePushed"}, {"oid": "133030deb0f587f6cc7cfebf0b7e637610689e71", "url": "https://github.com/eclipse/xtext-eclipse/commit/133030deb0f587f6cc7cfebf0b7e637610689e71", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T11:15:14Z", "type": "commit"}, {"oid": "133030deb0f587f6cc7cfebf0b7e637610689e71", "url": "https://github.com/eclipse/xtext-eclipse/commit/133030deb0f587f6cc7cfebf0b7e637610689e71", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-29T11:15:14Z", "type": "forcePushed"}]}