{"pr_number": 1432, "pr_title": "[eclipse/xtext#1679]ported test code to java", "pr_createdAt": "2020-05-05T16:57:20Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1432", "timeline": [{"oid": "4c3ce750126fd4becea27289e952d592b3be0d95", "url": "https://github.com/eclipse/xtext-eclipse/commit/4c3ce750126fd4becea27289e952d592b3be0d95", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-05T17:31:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwNDcyOQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1432#discussion_r421304729", "bodyText": "In tests it would be safe to throw new RuntimeException or Assert.fail.\nBut it's only test code, so I'm fine with this.", "author": "szarnekow", "createdAt": "2020-05-07T07:45:53Z", "path": "org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.impl;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ */\n+public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParticipantTest {\n+\tprivate static String PROJECT_NAME = \"myProject\";\n+\n+\tprivate IProject project;\n+\n+\t@Before\n+\tpublic void createJavaProject() throws Exception {\n+\t\tproject = createJavaProject(AbstractFSSynchronizationTest.PROJECT_NAME).getProject();\n+\t\taddNature(project, XtextProjectHelper.NATURE_ID);\n+\t}\n+\n+\t@After\n+\tpublic void forgetProject() throws Exception {\n+\t\tproject = null;\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContent() {\n+\t\ttestUpdateFileContent(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContentWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testUpdateFileContent(project));\n+\t}\n+\n+\tprotected void testUpdateFileContent(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Bar\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFile() {\n+\t\ttestTouchFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testTouchFile(project));\n+\t}\n+\n+\tprotected void testTouchFile(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Foo\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFile() {\n+\t\ttestCreateFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCreateFile(project));\n+\t}\n+\n+\tprotected void testCreateFile(IContainer output) {\n+\t\ttry {\n+\t\t\tIFile file = createFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t\tFile javaIoFile = output.getFile(new Path(\"Foo.txt\")).getLocation().toFile();\n+\t\t\tjavaIoFile.delete();\n+\t\t\tjavaIoFile.getParentFile().delete();\n+\t\t\tfile.touch(monitor());\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t} catch (CoreException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "originalCommit": "4c3ce750126fd4becea27289e952d592b3be0d95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "chunk": "diff --git a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\nindex b4bc21f76..edbbf9e69 100644\n--- a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n+++ b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n\n@@ -410,11 +410,9 @@ public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParti\n \t}\n \n \tprotected void setContent(File javaIoFile, String content) {\n-\t\ttry {\n-\t\t\tFileOutputStream fos = new FileOutputStream(javaIoFile);\n+\t\ttry (FileOutputStream fos = new FileOutputStream(javaIoFile)) {\n \t\t\tfos.write(content.getBytes());\n \t\t\tfos.flush();\n-\t\t\tfos.close();\n \t\t} catch (IOException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwNTE4MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1432#discussion_r421305180", "bodyText": "Some unnecessary final locals in this class, but again not crucial.", "author": "szarnekow", "createdAt": "2020-05-07T07:46:41Z", "path": "org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.impl;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ */\n+public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParticipantTest {\n+\tprivate static String PROJECT_NAME = \"myProject\";\n+\n+\tprivate IProject project;\n+\n+\t@Before\n+\tpublic void createJavaProject() throws Exception {\n+\t\tproject = createJavaProject(AbstractFSSynchronizationTest.PROJECT_NAME).getProject();\n+\t\taddNature(project, XtextProjectHelper.NATURE_ID);\n+\t}\n+\n+\t@After\n+\tpublic void forgetProject() throws Exception {\n+\t\tproject = null;\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContent() {\n+\t\ttestUpdateFileContent(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContentWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testUpdateFileContent(project));\n+\t}\n+\n+\tprotected void testUpdateFileContent(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Bar\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFile() {\n+\t\ttestTouchFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testTouchFile(project));\n+\t}\n+\n+\tprotected void testTouchFile(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Foo\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFile() {\n+\t\ttestCreateFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCreateFile(project));\n+\t}\n+\n+\tprotected void testCreateFile(IContainer output) {\n+\t\ttry {\n+\t\t\tIFile file = createFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t\tFile javaIoFile = output.getFile(new Path(\"Foo.txt\")).getLocation().toFile();\n+\t\t\tjavaIoFile.delete();\n+\t\t\tjavaIoFile.getParentFile().delete();\n+\t\t\tfile.touch(monitor());\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t} catch (CoreException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteTraceFile() {\n+\t\ttestDeleteTraceFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteTraceFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testDeleteTraceFile(project));\n+\t}\n+\n+\tprotected void testDeleteTraceFile(IContainer output) {\n+\t\tFile javaIoFile = createJavaIoFile(output.getFile(new Path(\".Foo.txt._trace\")).getLocation());\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertFalse(javaIoFile.exists());\n+\t\tAssert.assertFalse(output.getFile(new Path(\".Foo.txt._trace\")).exists());\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanOutput_01() {\n+\t\twithOutputConfiguration(it -> {\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile srcGenDirectory = createJavaIoFile(project.getFile(\"src-gen/Lalala.txt\").getLocation()).getParentFile();\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.listFiles().length == 0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanOutput_02() {\n+\t\twithOutputConfiguration(it -> {\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile srcGenDirectory = project.getFolder(\"src-gen\").getLocation().toFile();\n+\t\t\tAssert.assertFalse(srcGenDirectory.exists());\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.exists());\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcreateJavaIoFile(project.getFile(\"src-gen/Lalala.txt\").getLocation());\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.exists());\n+\t\t\tAssert.assertTrue(srcGenDirectory.listFiles().length == 0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanProjectAsOutput() {\n+\t\twithOutputConfiguration((OutputConfiguration it) -> {\n+\t\t\tit.setOutputDirectory(\"./\");\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile projectDirectory = project.getLocation().toFile();\n+\t\t\tint initialSize = projectDirectory.listFiles().length;\n+\t\t\tAssert.assertNotEquals(0, initialSize);\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tint expectedSize = projectDirectory.listFiles().length;\n+\t\t\tAssert.assertNotEquals(initialSize, expectedSize);\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, projectDirectory.listFiles().length);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithCreateBefore() {\n+\t\ttestCleanUpDerivedResourcesWithCreateBefore(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithCreateBetween() {\n+\t\ttestCleanUpDerivedResourcesWithCreateBetween(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithUpdateDerived() {\n+\t\ttestCleanUpDerivedResourcesWithUpdateDerived(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithDeleteDerived() {\n+\t\ttestCleanUpDerivedResourcesWithDeleteDerived(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithCreateBefore() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithCreateBefore(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithCreateBetween() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithCreateBetween(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithUpdateDerived() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithUpdateDerived(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithDeleteDerived() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithDeleteDerived(project));\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithCreateBefore(IContainer output) {\n+\t\tFile ouputDirectory = createJavaIoFile(output.getFile(new Path(\"Lalala.txt\")).getLocation()).getParentFile();\n+\t\tint expectedSize = ouputDirectory.list().length;\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertNotEquals(expectedSize, ouputDirectory.list().length);\n+\t\tdisableAutobuild(() -> {\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, ouputDirectory.list().length);\n+\t\t\tAssert.assertTrue(ArrayExtensions.contains(ouputDirectory.list(), \"Lalala.txt\"));\n+\t\t});\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithCreateBetween(IContainer output) {\n+\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\tfinal int initialSize;", "originalCommit": "4c3ce750126fd4becea27289e952d592b3be0d95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNTQ5MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1432#discussion_r421315491", "bodyText": "Local variable initialSize defined in an enclosing scope must be final or effectively final", "author": "cdietrich", "createdAt": "2020-05-07T08:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwNTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "chunk": "diff --git a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\nindex b4bc21f76..edbbf9e69 100644\n--- a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n+++ b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n\n@@ -410,11 +410,9 @@ public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParti\n \t}\n \n \tprotected void setContent(File javaIoFile, String content) {\n-\t\ttry {\n-\t\t\tFileOutputStream fos = new FileOutputStream(javaIoFile);\n+\t\ttry (FileOutputStream fos = new FileOutputStream(javaIoFile)) {\n \t\t\tfos.write(content.getBytes());\n \t\t\tfos.flush();\n-\t\t\tfos.close();\n \t\t} catch (IOException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMwNTY0OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1432#discussion_r421305649", "bodyText": "try-with-resource", "author": "szarnekow", "createdAt": "2020-05-07T07:47:33Z", "path": "org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java", "diffHunk": "@@ -0,0 +1,427 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.impl;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.WorkspaceJob;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.xbase.lib.ArrayExtensions;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ */\n+public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParticipantTest {\n+\tprivate static String PROJECT_NAME = \"myProject\";\n+\n+\tprivate IProject project;\n+\n+\t@Before\n+\tpublic void createJavaProject() throws Exception {\n+\t\tproject = createJavaProject(AbstractFSSynchronizationTest.PROJECT_NAME).getProject();\n+\t\taddNature(project, XtextProjectHelper.NATURE_ID);\n+\t}\n+\n+\t@After\n+\tpublic void forgetProject() throws Exception {\n+\t\tproject = null;\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContent() {\n+\t\ttestUpdateFileContent(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testUpdateFileContentWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testUpdateFileContent(project));\n+\t}\n+\n+\tprotected void testUpdateFileContent(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Bar\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFile() {\n+\t\ttestTouchFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testTouchFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testTouchFile(project));\n+\t}\n+\n+\tprotected void testTouchFile(IContainer output) {\n+\t\tcreateJavaIoFile(output.getFile(new Path(\"Foo.txt\")).getLocation(), \"object Foo\");\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFile() {\n+\t\ttestCreateFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCreateFile(project));\n+\t}\n+\n+\tprotected void testCreateFile(IContainer output) {\n+\t\ttry {\n+\t\t\tIFile file = createFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t\tFile javaIoFile = output.getFile(new Path(\"Foo.txt\")).getLocation().toFile();\n+\t\t\tjavaIoFile.delete();\n+\t\t\tjavaIoFile.getParentFile().delete();\n+\t\t\tfile.touch(monitor());\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(\"object Foo\", readFile(output.getFile(new Path(\"Foo.txt\"))));\n+\t\t} catch (CoreException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteTraceFile() {\n+\t\ttestDeleteTraceFile(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteTraceFileWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testDeleteTraceFile(project));\n+\t}\n+\n+\tprotected void testDeleteTraceFile(IContainer output) {\n+\t\tFile javaIoFile = createJavaIoFile(output.getFile(new Path(\".Foo.txt._trace\")).getLocation());\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertFalse(javaIoFile.exists());\n+\t\tAssert.assertFalse(output.getFile(new Path(\".Foo.txt._trace\")).exists());\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanOutput_01() {\n+\t\twithOutputConfiguration(it -> {\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile srcGenDirectory = createJavaIoFile(project.getFile(\"src-gen/Lalala.txt\").getLocation()).getParentFile();\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.listFiles().length == 0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanOutput_02() {\n+\t\twithOutputConfiguration(it -> {\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile srcGenDirectory = project.getFolder(\"src-gen\").getLocation().toFile();\n+\t\t\tAssert.assertFalse(srcGenDirectory.exists());\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.exists());\n+\t\t\tAssert.assertFalse(srcGenDirectory.listFiles().length == 0);\n+\t\t\tcreateJavaIoFile(project.getFile(\"src-gen/Lalala.txt\").getLocation());\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertTrue(srcGenDirectory.exists());\n+\t\t\tAssert.assertTrue(srcGenDirectory.listFiles().length == 0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanProjectAsOutput() {\n+\t\twithOutputConfiguration((OutputConfiguration it) -> {\n+\t\t\tit.setOutputDirectory(\"./\");\n+\t\t\tit.setCanClearOutputDirectory(true);\n+\t\t\tit.setCleanUpDerivedResources(false);\n+\t\t}, () -> {\n+\t\t\tFile projectDirectory = project.getLocation().toFile();\n+\t\t\tint initialSize = projectDirectory.listFiles().length;\n+\t\t\tAssert.assertNotEquals(0, initialSize);\n+\t\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tint expectedSize = projectDirectory.listFiles().length;\n+\t\t\tAssert.assertNotEquals(initialSize, expectedSize);\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, projectDirectory.listFiles().length);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithCreateBefore() {\n+\t\ttestCleanUpDerivedResourcesWithCreateBefore(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithCreateBetween() {\n+\t\ttestCleanUpDerivedResourcesWithCreateBetween(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithUpdateDerived() {\n+\t\ttestCleanUpDerivedResourcesWithUpdateDerived(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpDerivedResourcesWithDeleteDerived() {\n+\t\ttestCleanUpDerivedResourcesWithDeleteDerived(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithCreateBefore() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithCreateBefore(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithCreateBetween() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithCreateBetween(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithUpdateDerived() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithUpdateDerived(project));\n+\t}\n+\n+\t@Test\n+\tpublic void testCleanUpProjectDerivedResourcesWithDeleteDerived() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testCleanUpDerivedResourcesWithDeleteDerived(project));\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithCreateBefore(IContainer output) {\n+\t\tFile ouputDirectory = createJavaIoFile(output.getFile(new Path(\"Lalala.txt\")).getLocation()).getParentFile();\n+\t\tint expectedSize = ouputDirectory.list().length;\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertNotEquals(expectedSize, ouputDirectory.list().length);\n+\t\tdisableAutobuild(() -> {\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, ouputDirectory.list().length);\n+\t\t\tAssert.assertTrue(ArrayExtensions.contains(ouputDirectory.list(), \"Lalala.txt\"));\n+\t\t});\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithCreateBetween(IContainer output) {\n+\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\tfinal int initialSize;\n+\t\tif (outputDirectory.exists()) {\n+\t\t\tinitialSize = outputDirectory.list().length;\n+\t\t} else {\n+\t\t\tinitialSize = 0;\n+\t\t}\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertTrue(outputDirectory.exists());\n+\t\tAssert.assertNotEquals(initialSize, outputDirectory.list().length);\n+\t\tdisableAutobuild(() -> {\n+\t\t\tcreateJavaIoFile(output.getFile(new Path(\"Lalala.txt\")).getLocation());\n+\t\t\tint expectedSize = (initialSize + 1);\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, outputDirectory.list().length);\n+\t\t\tAssert.assertTrue(ArrayExtensions.contains(outputDirectory.list(), \"Lalala.txt\"));\n+\t\t});\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithUpdateDerived(IContainer output) {\n+\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\tfinal int expectedSize;\n+\t\tif (outputDirectory.exists()) {\n+\t\t\texpectedSize = outputDirectory.list().length;\n+\t\t} else {\n+\t\t\texpectedSize = 0;\n+\t\t}\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertNotEquals(expectedSize, outputDirectory.list().length);\n+\t\tdisableAutobuild(() -> {\n+\t\t\ttry {\n+\t\t\t\tIFile file = output.getFile(new Path(\"Foo.txt\"));\n+\t\t\t\tfile.setLocalTimeStamp(1L);\n+\t\t\t\tnew WorkspaceJob(\"file.setContent\") {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\t\t\t\t\tsetContent(file.getLocation().toFile(), \"Lalala\");\n+\t\t\t\t\t\tAssert.assertFalse(isSynchronized(file));\n+\t\t\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t\t\t}\n+\t\t\t\t}.run(monitor());\n+\t\t\t\tcleanBuild();\n+\t\t\t\tAssert.assertEquals(expectedSize, outputDirectory.list().length);\n+\t\t\t} catch (CoreException e) {\n+\t\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprotected void testCleanUpDerivedResourcesWithDeleteDerived(IContainer output) {\n+\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\tfinal int expectedSize;\n+\t\tif (outputDirectory.exists()) {\n+\t\t\texpectedSize = outputDirectory.list().length;\n+\t\t} else {\n+\t\t\texpectedSize = 0;\n+\t\t}\n+\t\tcreateFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\tbuild();\n+\t\tAssert.assertNotEquals(expectedSize, outputDirectory.list().length);\n+\t\tdisableAutobuild(() -> {\n+\t\t\tIFile file = output.getFile(new Path(\"Foo.txt\"));\n+\t\t\tnew WorkspaceJob(\"file.delete\") {\n+\t\t\t\t@Override\n+\t\t\t\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\t\t\t\tAssert.assertTrue(file.getLocation().toFile().delete());\n+\t\t\t\t\tAssert.assertFalse(isSynchronized(file));\n+\t\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t\t}\n+\t\t\t}.run(monitor());\n+\t\t\tcleanBuild();\n+\t\t\tAssert.assertEquals(expectedSize, outputDirectory.list().length);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteUpdatedDerivedResource() {\n+\t\ttestDeleteUpdatedDerivedResource(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteUpdatedDerivedResourceWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testDeleteUpdatedDerivedResource(project));\n+\t}\n+\n+\tprotected void testDeleteUpdatedDerivedResource(IContainer output) {\n+\t\ttry {\n+\t\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\t\tfinal int expectedSize;\n+\t\t\tif (outputDirectory.exists()) {\n+\t\t\t\texpectedSize = outputDirectory.list().length;\n+\t\t\t} else {\n+\t\t\t\texpectedSize = 0;\n+\t\t\t}\n+\t\t\tIFile sourceFile = createFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertNotEquals(expectedSize, outputDirectory.list().length);\n+\t\t\tIFile file = output.getFile(new Path(\"Foo.txt\"));\n+\t\t\tfile.setLocalTimeStamp(1L);\n+\t\t\tnew WorkspaceJob(\"file.setContent\") {\n+\t\t\t\t@Override\n+\t\t\t\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\t\t\t\tsetContent(file.getLocation().toFile(), \"Lalala\");\n+\t\t\t\t\tAssert.assertFalse(isSynchronized(file));\n+\t\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t\t}\n+\t\t\t}.run(monitor());\n+\t\t\tsourceFile.delete(false, monitor());\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(expectedSize, outputDirectory.list().length);\n+\t\t} catch (CoreException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteDeletedDerivedResource() {\n+\t\ttestDeleteDeletedDerivedResource(project.getFolder(\"src-gen\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteDeletedDerivedResourceWithProjectAsOutput() {\n+\t\twithOutputConfiguration(it -> it.setOutputDirectory(\"./\"), () -> testDeleteDeletedDerivedResource(project));\n+\t}\n+\n+\tprotected void testDeleteDeletedDerivedResource(IContainer output) {\n+\t\ttry {\n+\t\t\tFile outputDirectory = output.getLocation().toFile();\n+\t\t\tint expectedSize = 0;\n+\t\t\tif (outputDirectory.exists()) {\n+\t\t\t\texpectedSize = outputDirectory.list().length;\n+\t\t\t}\n+\t\t\tIFile sourceFile = createFile(project.getFile((\"src/Foo\" + F_EXT)).getFullPath(), \"object Foo\");\n+\t\t\tbuild();\n+\t\t\tAssert.assertNotEquals(expectedSize, outputDirectory.list().length);\n+\t\t\tIFile file = output.getFile(new Path(\"Foo.txt\"));\n+\t\t\tfile.refreshLocal(0, null);\n+\t\t\tAssert.assertTrue(isSynchronized(file));\n+\t\t\tnew WorkspaceJob(\"file.delete\") {\n+\t\t\t\t@Override\n+\t\t\t\tpublic IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {\n+\t\t\t\t\tAssert.assertTrue(file.getLocation().toFile().delete());\n+\t\t\t\t\tAssert.assertFalse(isSynchronized(file));\n+\t\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t\t}\n+\t\t\t}.run(monitor());\n+\t\t\tsourceFile.delete(false, monitor());\n+\t\t\tbuild();\n+\t\t\tAssert.assertEquals(expectedSize, outputDirectory.list().length);\n+\t\t} catch (CoreException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tprotected File createJavaIoFile(IPath location, String content) {\n+\t\tFile javaIoFile = createJavaIoFile(location);\n+\t\tsetContent(javaIoFile, content);\n+\t\treturn javaIoFile;\n+\t}\n+\n+\tprotected File createJavaIoFile(IPath location) {\n+\t\ttry {\n+\t\t\tFile javaIoFile = location.toFile();\n+\t\t\tjavaIoFile.getParentFile().mkdirs();\n+\t\t\tAssert.assertTrue(javaIoFile.createNewFile());\n+\t\t\treturn javaIoFile;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\tprotected void setContent(File javaIoFile, String content) {\n+\t\ttry {\n+\t\t\tFileOutputStream fos = new FileOutputStream(javaIoFile);", "originalCommit": "4c3ce750126fd4becea27289e952d592b3be0d95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "chunk": "diff --git a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\nindex b4bc21f76..edbbf9e69 100644\n--- a/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n+++ b/org.eclipse.xtext.builder.tests/src/org/eclipse/xtext/builder/impl/AbstractFSSynchronizationTest.java\n\n@@ -410,11 +410,9 @@ public abstract class AbstractFSSynchronizationTest extends AbstractBuilderParti\n \t}\n \n \tprotected void setContent(File javaIoFile, String content) {\n-\t\ttry {\n-\t\t\tFileOutputStream fos = new FileOutputStream(javaIoFile);\n+\t\ttry (FileOutputStream fos = new FileOutputStream(javaIoFile)) {\n \t\t\tfos.write(content.getBytes());\n \t\t\tfos.flush();\n-\t\t\tfos.close();\n \t\t} catch (IOException e) {\n \t\t\tthrow Exceptions.sneakyThrow(e);\n \t\t}\n"}}, {"oid": "2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "url": "https://github.com/eclipse/xtext-eclipse/commit/2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-07T08:05:48Z", "type": "commit"}, {"oid": "2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "url": "https://github.com/eclipse/xtext-eclipse/commit/2e0368c9cfffaf6ecb0a27cfb68a89cb70a90cd3", "message": "[eclipse/xtext#1679]ported test code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-05-07T08:05:48Z", "type": "forcePushed"}]}