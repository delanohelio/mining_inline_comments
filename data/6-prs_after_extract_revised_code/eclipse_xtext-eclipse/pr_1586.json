{"pr_number": 1586, "pr_title": "regenerated languages", "pr_createdAt": "2020-11-16T09:19:42Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1586", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MTQzMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524961432", "bodyText": "@ArneDeutsch Do we miss a formatting rule for the hidden tokens clause? The space shouldn't be there, should it?", "author": "szarnekow", "createdAt": "2020-11-17T08:18:00Z", "path": "org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java", "diffHunk": "@@ -160,15 +161,16 @@\n \t\tprivate final RuleCall cTemplateBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);\n \t\tprivate final Keyword cLessThanSignLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);\n \t\t\n-\t\t//TemplateBodyWithQuotes TemplateBody hidden():\n+\t\t//TemplateBodyWithQuotes TemplateBody hidden ():", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java b/org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java\nindex acbf88c50..02316e7e3 100644\n--- a/org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java\n\n@@ -161,7 +161,7 @@ public class CodetemplatesGrammarAccess extends AbstractElementFinder.AbstractGr\n \t\tprivate final RuleCall cTemplateBodyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);\n \t\tprivate final Keyword cLessThanSignLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);\n \t\t\n-\t\t//TemplateBodyWithQuotes TemplateBody hidden ():\n+\t\t//TemplateBodyWithQuotes TemplateBody hidden():\n \t\t//\tWS? '>>' // EOL\n \t\t//\tTemplateBody\n \t\t//\t'<<' // BOL\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MjQyMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524962422", "bodyText": "I'm aware that this is a known issue, but it's really sad.", "author": "szarnekow", "createdAt": "2020-11-17T08:19:46Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java", "diffHunk": "@@ -778,7 +781,8 @@\n \t\t//\t'::' element=ClassifierRef;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//namespace=Identifier '::' element=ClassifierRef\n+\t\t//namespace=Identifier", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MjcxMA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524962710", "bodyText": "@ArneDeutsch Missing formatting rule for actions? The space around the . is unexpected. Same for the space before current", "author": "szarnekow", "createdAt": "2020-11-17T08:20:18Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java", "diffHunk": "@@ -1112,26 +1121,28 @@\n \t\t\n \t\t//// Follows ., ->, ^\n \t\t//NavigatingExp:\n-\t\t//\tSubNavigatingExp ({InfixExp.source=current} op=('.' | '->') argument=NavigatingExp | {OclMessage.source=current}\n-\t\t//\top=('^^' | '^') messageName=Identifier\n+\t\t//\tSubNavigatingExp ({InfixExp . source= current} op=('.' | '->') argument=NavigatingExp | {OclMessage . source= current} op=(", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java\nindex df9fc9bd7..e507c7740 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/BacktrackingContentAssistTestLanguageGrammarAccess.java\n\n@@ -1121,12 +1121,12 @@ public class BacktrackingContentAssistTestLanguageGrammarAccess extends Abstract\n \t\t\n \t\t//// Follows ., ->, ^\n \t\t//NavigatingExp:\n-\t\t//\tSubNavigatingExp ({InfixExp . source= current} op=('.' | '->') argument=NavigatingExp | {OclMessage . source= current} op=(\n+\t\t//\tSubNavigatingExp ({InfixExp.source=current} op=('.' | '->') argument=NavigatingExp | {OclMessage.source=current} op=(\n \t\t//\t'^^' | '^') messageName=Identifier\n \t\t//\t'(' (arguments+=OclMessageArg (',' arguments+=OclMessageArg)*)? ')')?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//SubNavigatingExp ({InfixExp . source= current} op=('.' | '->') argument=NavigatingExp | {OclMessage . source= current} op=(\n+\t\t//SubNavigatingExp ({InfixExp.source=current} op=('.' | '->') argument=NavigatingExp | {OclMessage.source=current} op=(\n \t\t//'^^' | '^') messageName=Identifier\n \t\t//'(' (arguments+=OclMessageArg (',' arguments+=OclMessageArg)*)? ')')?\n \t\tpublic Group getGroup() { return cGroup; }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NDE3Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524964176", "bodyText": "@ArneDeutsch Missing formatting rule for EnumLiteralDeclaration - the space around the = is unexpected.", "author": "szarnekow", "createdAt": "2020-11-17T08:22:58Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug286935TestLanguageGrammarAccess.java", "diffHunk": "@@ -156,10 +159,10 @@\n \t\tprivate final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);\n \t\t\n \t\t//enum StateType:\n-\t\t//\tNORMAL | PSEUDO='cond' | REFERENCE='reference' | TEXTUAL='textual';\n+\t\t//\tNORMAL | PSEUDO = 'cond' | REFERENCE = 'reference' | TEXTUAL = 'textual';", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug286935TestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug286935TestLanguageGrammarAccess.java\nindex beb8c5864..ba4d809c8 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug286935TestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug286935TestLanguageGrammarAccess.java\n\n@@ -159,10 +159,10 @@ public class Bug286935TestLanguageGrammarAccess extends AbstractElementFinder.Ab\n \t\tprivate final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);\n \t\t\n \t\t//enum StateType:\n-\t\t//\tNORMAL | PSEUDO = 'cond' | REFERENCE = 'reference' | TEXTUAL = 'textual';\n+\t\t//\tNORMAL | PSEUDO='cond' | REFERENCE='reference' | TEXTUAL='textual';\n \t\tpublic EnumRule getRule() { return rule; }\n \t\t\n-\t\t//NORMAL | PSEUDO = 'cond' | REFERENCE = 'reference' | TEXTUAL = 'textual'\n+\t\t//NORMAL | PSEUDO='cond' | REFERENCE='reference' | TEXTUAL='textual'\n \t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n \t\t\n \t\t//NORMAL\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NTUzNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524965534", "bodyText": "Interesting: The return keyword is missing.", "author": "szarnekow", "createdAt": "2020-11-17T08:25:12Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug287941TestLanguageGrammarAccess.java", "diffHunk": "@@ -520,7 +522,7 @@\n \t\tprivate final RuleCall cWhereEntryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);\n \t\tprivate final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);\n \t\t\n-\t\t//ParWhereEntry WhereEntry:\n+\t\t//ParWhereEntry  WhereEntry:", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2Nzk5NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524967995", "bodyText": "Blank line? I see that this is part of the original xtext file, but why do we keep that for groups in the formatter?", "author": "szarnekow", "createdAt": "2020-11-17T08:29:23Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug348199TestLanguageGrammarAccess.java", "diffHunk": "@@ -259,8 +259,10 @@\n \t\t//Timeperiod:\n \t\t//\t{Timeperiod}\n \t\t//\t'define' 'timeperiod' ('1'\n-\t\t//\t'{' (NL+ time+=TimeDef1)* (NL+ 'timeperiod_name' name+=ID (NL+ time+=TimeDef2)* & (NL+ 'otherelement' alias+=ID (NL+\n-\t\t//\ttime+=TimeDef3)*)?) NL+\n+\t\t//\t'{' (NL+ time+=TimeDef1)* ( NL+ 'timeperiod_name' name+=ID (NL+ time+=TimeDef2)* & (NL+ 'otherelement' alias+=ID (NL+\n+\t\t//\ttime+=TimeDef3)*)?\n+\t\t//\t\t", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MTY1MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527751651", "bodyText": "We preserve most newlines because they might be intentionally there. Might be annoying for the user if we remove the newlines inside his rules.", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2Nzk5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTU0Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524969547", "bodyText": "@ArneDeutsch Another thing that is missing for hidden clauses: The space before the , is unexpected.", "author": "szarnekow", "createdAt": "2020-11-17T08:31:45Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug377311TestLanguageGrammarAccess.java", "diffHunk": "@@ -118,7 +118,7 @@ public ParserRule getRootRule() {\n \t\treturn getRootAccess().getRule();\n \t}\n \t\n-\t//Child hidden(WS, ID):\n+\t//Child hidden (WS , ID):", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MDczMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527750733", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTU0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug377311TestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug377311TestLanguageGrammarAccess.java\nindex 8b6359954..de6f2d240 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug377311TestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug377311TestLanguageGrammarAccess.java\n\n@@ -118,7 +118,7 @@ public class Bug377311TestLanguageGrammarAccess extends AbstractElementFinder.Ab\n \t\treturn getRootAccess().getRule();\n \t}\n \t\n-\t//Child hidden (WS , ID):\n+\t//Child hidden(WS, ID):\n \t//\t'child' name=STRING;\n \tpublic ChildElements getChildAccess() {\n \t\treturn pChild;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgxMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524969813", "bodyText": "@ArneDeutsch  The space before the closing parentheses is unexpected.", "author": "szarnekow", "createdAt": "2020-11-17T08:32:10Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug381381TestLanguageGrammarAccess.java", "diffHunk": "@@ -66,18 +66,18 @@\n \t\tprivate final Keyword cREPLACEKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);\n \t\t\n \t\t//CopyFieldNameToVariableStmt:\n-\t\t//\t'FIELD-NAME-TO-VARIABLE' (',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n-\t\t//\t'REPLACE')?);\n+\t\t//\t'FIELD-NAME-TO-VARIABLE' ( ',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n+\t\t//\t'REPLACE')? );", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MDY3Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527750673", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2NDg2Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527764867", "bodyText": "problem still seems to be there", "author": "cdietrich", "createdAt": "2020-11-20T15:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzNDMzMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531534332", "bodyText": "I do not really understand why the issue is still there. I have added a dedicated test case (JavaFormatterGrammarTest.unorderedGroups). It is succeeding, formatting is correct. But on the otehr hand the generated comment is clearly wrong ... it is not only the whitespace, there is a missing parantesis, too.\nOriginal Code: (notice the two openeing parentesis before the ','.\nCopyFieldNameToVariableStmt:\n  'FIELD-NAME-TO-VARIABLE' ((',' 'SCREEN' '=' '(' line=INT ',' column=INT ')') &\n                            (',' 'VAR' '=' name=ID) &\n                            (',' 'TYPE' '=' 'REPLACE')?);\n\nIn my test this is formatted to:\nCopyFieldNameToVariableStmt:\n\t'FIELD-NAME-TO-VARIABLE' ((',' 'SCREEN' '=' '(' line=INT ',' column=INT ')') &\n\t(',' 'VAR' '=' name=ID) &\n\t(',' 'TYPE' '=' 'REPLACE')?);\n\nBut the comment in the end looks like this:\n//CopyFieldNameToVariableStmt:\n//\t'FIELD-NAME-TO-VARIABLE' ( ',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n//\t'REPLACE')? );\n\nFor me it looks like a bug in the serializer, because of the missing parantesis ... am a bit clueless here ...", "author": "ArneDeutsch", "createdAt": "2020-11-27T11:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMzI5Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r536103293", "bodyText": "I created a ticket for this one: eclipse/xtext-core#1641", "author": "ArneDeutsch", "createdAt": "2020-12-04T13:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTgxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTk4MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524969980", "bodyText": "@ArneDeutsch Also the space after the opening parentheses. Is something missing for unordered groups?", "author": "szarnekow", "createdAt": "2020-11-17T08:32:30Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug381381TestLanguageGrammarAccess.java", "diffHunk": "@@ -66,18 +66,18 @@\n \t\tprivate final Keyword cREPLACEKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);\n \t\t\n \t\t//CopyFieldNameToVariableStmt:\n-\t\t//\t'FIELD-NAME-TO-VARIABLE' (',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n-\t\t//\t'REPLACE')?);\n+\t\t//\t'FIELD-NAME-TO-VARIABLE' ( ',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n+\t\t//\t'REPLACE')? );\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//'FIELD-NAME-TO-VARIABLE' (',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n-\t\t//'REPLACE')?)\n+\t\t//'FIELD-NAME-TO-VARIABLE' ( ',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '='\n+\t\t//'REPLACE')? )\n \t\tpublic Group getGroup() { return cGroup; }\n \t\t\n \t\t//'FIELD-NAME-TO-VARIABLE'\n \t\tpublic Keyword getFIELDNAMETOVARIABLEKeyword_0() { return cFIELDNAMETOVARIABLEKeyword_0; }\n \t\t\n-\t\t//(',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '=' 'REPLACE')?)\n+\t\t//( ',' 'SCREEN' '=' '(' line=INT ',' column=INT ')' & ',' 'VAR' '=' name=ID & (',' 'TYPE' '=' 'REPLACE')? )", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MDU4Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527750582", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2NTAzNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527765034", "bodyText": "problem still seems to be there", "author": "cdietrich", "createdAt": "2020-11-20T15:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzNDU5MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531534590", "bodyText": "see above", "author": "ArneDeutsch", "createdAt": "2020-11-27T11:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2OTk4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MTM1Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524971356", "bodyText": "@ArneDeutsch @cdietrich I'm not sure about that one. For wildcard fragments, I've a slight preference towards a space before the * wildcard. What do you think?", "author": "szarnekow", "createdAt": "2020-11-17T08:34:58Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/GH341TestLanguageGrammarAccess.java", "diffHunk": "@@ -274,7 +274,7 @@\n \t\tprivate final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), \"org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.STREAM\");\n \t\tprivate final Keyword cStreamKeyword = (Keyword)rule.eContents().get(0);\n \t\t\n-\t\t//fragment STREAM *:\n+\t\t//fragment STREAM*:", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzNTAzMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531535031", "bodyText": "Would not agree here ... looks ok for me.", "author": "ArneDeutsch", "createdAt": "2020-11-27T11:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MTM1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MTgzOQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524971839", "bodyText": "There is something missing here: I think it should read RootStatement<Yield> returns Statement:", "author": "szarnekow", "createdAt": "2020-11-17T08:35:47Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -31,7 +31,7 @@\n \t\tprivate final RuleCall cLabelledStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);\n \t\tprivate final RuleCall cExpressionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);\n \t\t\n-\t\t//RootStatement <Yield Statement:\n+\t\t//RootStatement <YieldStatement:", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MjIxOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524972218", "bodyText": "@ArneDeutsch Missing formatting rule for parameterized rule calls? I'd expect a space after the , comma", "author": "szarnekow", "createdAt": "2020-11-17T08:36:26Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -61,22 +61,25 @@\n \t\t\n \t\t//FunctionDeclaration <Yield>:\n \t\t//\t=> ({FunctionDeclaration}\n-\t\t//\t-> FunctionImpl <Yield,Yield,Expression=false>) => ';'?;\n+\t\t//\t-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?;", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\nindex dada0afc1..b4112f8ce 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n\n@@ -61,25 +61,25 @@ public class ParameterizedExpressionsTestLanguageGrammarAccess extends AbstractE\n \t\t\n \t\t//FunctionDeclaration <Yield>:\n \t\t//\t=> ({FunctionDeclaration}\n-\t\t//\t-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?;\n+\t\t//\t-> FunctionImpl<Yield, Yield, Expression=false>) => ';'?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n \t\t//=> ({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>) => ';'?\n \t\tpublic Group getGroup() { return cGroup; }\n \t\t\n \t\t//=> ({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>)\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>)\n \t\tpublic Group getGroup_0() { return cGroup_0; }\n \t\t\n \t\t//({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>)\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>)\n \t\tpublic Group getGroup_0_0() { return cGroup_0_0; }\n \t\t\n \t\t//{FunctionDeclaration}\n \t\tpublic Action getFunctionDeclarationAction_0_0_0() { return cFunctionDeclarationAction_0_0_0; }\n \t\t\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>\n \t\tpublic RuleCall getFunctionImplParserRuleCall_0_0_1() { return cFunctionImplParserRuleCall_0_0_1; }\n \t\t\n \t\t//=> ';'?\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3Mjg1Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524972856", "bodyText": "@cdietrich What do you think about the space after the predicates => (..) and -> (..) - I've slight preference towards noSpace for that location.", "author": "szarnekow", "createdAt": "2020-11-17T08:37:27Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -61,22 +61,25 @@\n \t\t\n \t\t//FunctionDeclaration <Yield>:\n \t\t//\t=> ({FunctionDeclaration}\n-\t\t//\t-> FunctionImpl <Yield,Yield,Expression=false>) => ';'?;\n+\t\t//\t-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//=> ({FunctionDeclaration} -> FunctionImpl <Yield,Yield,Expression=false>) => ';'?\n+\t\t//=> ({FunctionDeclaration}", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTM3Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524991372", "bodyText": "me too", "author": "cdietrich", "createdAt": "2020-11-17T09:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3Mjg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\nindex dada0afc1..b4112f8ce 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n\n@@ -61,25 +61,25 @@ public class ParameterizedExpressionsTestLanguageGrammarAccess extends AbstractE\n \t\t\n \t\t//FunctionDeclaration <Yield>:\n \t\t//\t=> ({FunctionDeclaration}\n-\t\t//\t-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?;\n+\t\t//\t-> FunctionImpl<Yield, Yield, Expression=false>) => ';'?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n \t\t//=> ({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>) => ';'?\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>) => ';'?\n \t\tpublic Group getGroup() { return cGroup; }\n \t\t\n \t\t//=> ({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>)\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>)\n \t\tpublic Group getGroup_0() { return cGroup_0; }\n \t\t\n \t\t//({FunctionDeclaration}\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>)\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>)\n \t\tpublic Group getGroup_0_0() { return cGroup_0_0; }\n \t\t\n \t\t//{FunctionDeclaration}\n \t\tpublic Action getFunctionDeclarationAction_0_0_0() { return cFunctionDeclarationAction_0_0_0; }\n \t\t\n-\t\t//-> FunctionImpl<Yield,Yield,Expression=false>\n+\t\t//-> FunctionImpl<Yield, Yield, Expression=false>\n \t\tpublic RuleCall getFunctionImplParserRuleCall_0_0_1() { return cFunctionImplParserRuleCall_0_0_1; }\n \t\t\n \t\t//=> ';'?\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzMzMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524973331", "bodyText": "@ArneDeutsch Missing formatting rule for the parameter declarations. There is a space missing after the ,", "author": "szarnekow", "createdAt": "2020-11-17T08:38:16Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -144,12 +147,13 @@\n \t\tprivate final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);\n \t\tprivate final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);\n \t\t\n-\t\t//fragment FunctionHeader <Yield, Generator> *:\n+\t\t//fragment FunctionHeader <Yield,Generator>*:", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTU5NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527749595", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MzMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\nindex dada0afc1..b4112f8ce 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n\n@@ -147,7 +147,7 @@ public class ParameterizedExpressionsTestLanguageGrammarAccess extends AbstractE\n \t\tprivate final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);\n \t\tprivate final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);\n \t\t\n-\t\t//fragment FunctionHeader <Yield,Generator>*:\n+\t\t//fragment FunctionHeader <Yield, Generator> *:\n \t\t//\tname=Identifier<Yield>?\n \t\t//\t'(' ')';\n \t\t@Override public ParserRule getRule() { return rule; }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NDI2Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524974267", "bodyText": "@ArneDeutsch Unexpected spaces around the ! and for the angular brackets. < and >. Please also check the formatting rules for the boolean operators in argument lists. They should be surrounded by a space & and |", "author": "szarnekow", "createdAt": "2020-11-17T08:39:44Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -174,14 +178,14 @@\n \t\tprivate final Assignment cBodyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);\n \t\tprivate final RuleCall cBodyBlockParserRuleCall_1_0_0 = (RuleCall)cBodyAssignment_1_0.eContents().get(0);\n \t\t\n-\t\t//fragment FunctionBody <Yield, Expression> *:\n-\t\t//\t<Expression> body=Block<Yield> | <!Expression> body=Block<Yield>?;\n+\t\t//fragment FunctionBody <Yield,Expression>*:\n+\t\t//\t< Expression > body=Block<Yield> | < ! Expression > body=Block<Yield>?;", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTQ4MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527749480", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NDI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\nindex dada0afc1..b4112f8ce 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n\n@@ -178,14 +178,14 @@ public class ParameterizedExpressionsTestLanguageGrammarAccess extends AbstractE\n \t\tprivate final Assignment cBodyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);\n \t\tprivate final RuleCall cBodyBlockParserRuleCall_1_0_0 = (RuleCall)cBodyAssignment_1_0.eContents().get(0);\n \t\t\n-\t\t//fragment FunctionBody <Yield,Expression>*:\n-\t\t//\t< Expression > body=Block<Yield> | < ! Expression > body=Block<Yield>?;\n+\t\t//fragment FunctionBody <Yield, Expression> *:\n+\t\t//\t<Expression> body=Block<Yield> | <! Expression> body=Block<Yield>?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//< Expression > body=Block<Yield> | < ! Expression > body=Block<Yield>?\n+\t\t//<Expression> body=Block<Yield> | <! Expression> body=Block<Yield>?\n \t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n \t\t\n-\t\t//< Expression > body=Block<Yield>\n+\t\t//<Expression> body=Block<Yield>\n \t\tpublic Group getGroup_0() { return cGroup_0; }\n \t\t\n \t\t//body=Block<Yield>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NTA3OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r524975079", "bodyText": "@ArneDeutsch Missing formatting config for guard conditions?  There are unexpected spaces here inside the < Yield >", "author": "szarnekow", "createdAt": "2020-11-17T08:41:03Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java", "diffHunk": "@@ -591,37 +596,37 @@\n \t\tprivate final Assignment cRhsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);\n \t\tprivate final RuleCall cRhsAssignmentExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRhsAssignment_1_1_1.eContents().get(0);\n \t\t\n-\t\t//AssignmentExpression <In, Yield Expression:\n-\t\t//\t<Yield> YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression.lhs=current} op='=')\n+\t\t//AssignmentExpression <In,YieldExpression:\n+\t\t//\t< Yield > YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression . lhs= current} op='=')\n \t\t//\trhs=AssignmentExpression<In,Yield>)?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//<Yield> YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression.lhs=current} op='=')\n+\t\t//< Yield > YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression . lhs= current} op='=')\n \t\t//rhs=AssignmentExpression<In,Yield>)?\n \t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n \t\t\n-\t\t//<Yield> YieldExpression<In>\n+\t\t//< Yield > YieldExpression<In>", "originalCommit": "e22d8f453836f7c50f702f9319ba1bcb8c1212bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTM4OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r527749389", "bodyText": "Should be fixed with eclipse/xtext-core#1489", "author": "ArneDeutsch", "createdAt": "2020-11-20T15:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "chunk": "diff --git a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\nindex dada0afc1..b4112f8ce 100644\n--- a/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n+++ b/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/ParameterizedExpressionsTestLanguageGrammarAccess.java\n\n@@ -596,37 +596,37 @@ public class ParameterizedExpressionsTestLanguageGrammarAccess extends AbstractE\n \t\tprivate final Assignment cRhsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);\n \t\tprivate final RuleCall cRhsAssignmentExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRhsAssignment_1_1_1.eContents().get(0);\n \t\t\n-\t\t//AssignmentExpression <In,YieldExpression:\n-\t\t//\t< Yield > YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression . lhs= current} op='=')\n-\t\t//\trhs=AssignmentExpression<In,Yield>)?;\n+\t\t//AssignmentExpression <In, YieldExpression:\n+\t\t//\t<Yield> YieldExpression<In> | RelationalExpression<In, Yield> (=> ({AssignmentExpression.lhs=current} op='=')\n+\t\t//\trhs=AssignmentExpression<In, Yield>)?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//< Yield > YieldExpression<In> | RelationalExpression<In,Yield> (=> ({AssignmentExpression . lhs= current} op='=')\n-\t\t//rhs=AssignmentExpression<In,Yield>)?\n+\t\t//<Yield> YieldExpression<In> | RelationalExpression<In, Yield> (=> ({AssignmentExpression.lhs=current} op='=')\n+\t\t//rhs=AssignmentExpression<In, Yield>)?\n \t\tpublic Alternatives getAlternatives() { return cAlternatives; }\n \t\t\n-\t\t//< Yield > YieldExpression<In>\n+\t\t//<Yield> YieldExpression<In>\n \t\tpublic Group getGroup_0() { return cGroup_0; }\n \t\t\n \t\t//YieldExpression<In>\n \t\tpublic RuleCall getYieldExpressionParserRuleCall_0_0() { return cYieldExpressionParserRuleCall_0_0; }\n \t\t\n-\t\t//RelationalExpression<In,Yield> (=> ({AssignmentExpression . lhs= current} op='=') rhs=AssignmentExpression<In,Yield>)?\n+\t\t//RelationalExpression<In, Yield> (=> ({AssignmentExpression.lhs=current} op='=') rhs=AssignmentExpression<In, Yield>)?\n \t\tpublic Group getGroup_1() { return cGroup_1; }\n \t\t\n-\t\t//RelationalExpression<In,Yield>\n+\t\t//RelationalExpression<In, Yield>\n \t\tpublic RuleCall getRelationalExpressionParserRuleCall_1_0() { return cRelationalExpressionParserRuleCall_1_0; }\n \t\t\n-\t\t//(=> ({AssignmentExpression . lhs= current} op='=') rhs=AssignmentExpression<In,Yield>)?\n+\t\t//(=> ({AssignmentExpression.lhs=current} op='=') rhs=AssignmentExpression<In, Yield>)?\n \t\tpublic Group getGroup_1_1() { return cGroup_1_1; }\n \t\t\n-\t\t//=> ({AssignmentExpression . lhs= current} op='=')\n+\t\t//=> ({AssignmentExpression.lhs=current} op='=')\n \t\tpublic Group getGroup_1_1_0() { return cGroup_1_1_0; }\n \t\t\n-\t\t//({AssignmentExpression . lhs= current} op='=')\n+\t\t//({AssignmentExpression.lhs=current} op='=')\n \t\tpublic Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }\n \t\t\n-\t\t//{AssignmentExpression . lhs= current}\n+\t\t//{AssignmentExpression.lhs=current}\n \t\tpublic Action getAssignmentExpressionLhsAction_1_1_0_0_0() { return cAssignmentExpressionLhsAction_1_1_0_0_0; }\n \t\t\n \t\t//op='='\n"}}, {"oid": "327beda80839d999a0e74e33cc2ad54287c9f29b", "url": "https://github.com/eclipse/xtext-eclipse/commit/327beda80839d999a0e74e33cc2ad54287c9f29b", "message": "regenerated languages\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-11-20T15:22:31Z", "type": "commit"}, {"oid": "327beda80839d999a0e74e33cc2ad54287c9f29b", "url": "https://github.com/eclipse/xtext-eclipse/commit/327beda80839d999a0e74e33cc2ad54287c9f29b", "message": "regenerated languages\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-11-20T15:22:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NjY2Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r528546666", "bodyText": "Weird formatting @ArneDeutsch", "author": "szarnekow", "createdAt": "2020-11-23T08:54:02Z", "path": "org.eclipse.xtext.ui.codetemplates/src-gen/org/eclipse/xtext/ui/codetemplates/services/CodetemplatesGrammarAccess.java", "diffHunk": "@@ -94,8 +95,8 @@\n \t\t//\tkeywordContext=STRING) body=TemplateBodyWithQuotes;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//name=ValidID '(' id=ID ',' description=STRING ')' 'for' (context=[xtext::AbstractRule|ValidID] | keywordContext=STRING)\n-\t\t//body=TemplateBodyWithQuotes\n+\t\t//name=ValidID '(' id=ID ',' description=STRING ')' 'for' (context=[xtext::AbstractRule|ValidID] | keywordContext=STRING\n+\t\t//) body=TemplateBodyWithQuotes", "originalCommit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3ODYxNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531578614", "bodyText": "Ja, in der Tat. Habe es im Unit-Test versucht nachzustellen, da kommt aber raus was man erwarten w\u00fcrde ...", "author": "ArneDeutsch", "createdAt": "2020-11-27T12:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NjY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjAzNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r536096035", "bodyText": "Ich kann mir nur vorstellen, dass da gerade so die maximale Zeichenanzahl erreicht ist und der automatisch umbricht. Wenn ich die Zeichen z\u00e4hle komme ich auf 117 ... bissl Whitespace davor ...", "author": "ArneDeutsch", "createdAt": "2020-12-04T13:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NjY2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NzA2OA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r528547068", "bodyText": "Still an unexpected space after the assignment op @ArneDeutsch", "author": "szarnekow", "createdAt": "2020-11-23T08:54:45Z", "path": "org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/services/Bug287941TestLanguageGrammarAccess.java", "diffHunk": "@@ -411,19 +412,19 @@\n \t\tprivate final RuleCall cEntriesAndWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);\n \t\t\n \t\t//WhereEntry:\n-\t\t//\tAndWhereEntry ({OrWhereEntry.entries+=current} (\"or\" entries+=AndWhereEntry)+)?;\n+\t\t//\tAndWhereEntry ({OrWhereEntry.entries+= current} (\"or\" entries+=AndWhereEntry)+)?;", "originalCommit": "327beda80839d999a0e74e33cc2ad54287c9f29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3ODgxNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531578815", "bodyText": "Created a unit test, but there it works as expected ...", "author": "ArneDeutsch", "createdAt": "2020-11-27T12:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MDcwNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r531580706", "bodyText": "when i format\nAndWhereEntry returns WhereEntry:\n\tConcreteWhereEntry ({AndWhereEntry.entries += current}\n\t(\"and\" entries+=ConcreteWhereEntry)+)?;\n\nspaces dont get removed", "author": "cdietrich", "createdAt": "2020-11-27T12:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NzA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5OTA3Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1586#discussion_r536099077", "bodyText": "Will be fixed with next commit. Only formatted \"=\" but missed \"+=\".", "author": "ArneDeutsch", "createdAt": "2020-12-04T13:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NzA2OA=="}], "type": "inlineReview", "revised_code": null}]}