{"pr_number": 1374, "pr_title": "Migrate the Xtend code from org.eclipse.xtext.ui project to Java", "pr_createdAt": "2020-03-21T11:19:46Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1374", "timeline": [{"oid": "e641dafe6c4affd70a853f245814aae1a031aa8d", "url": "https://github.com/eclipse/xtext-eclipse/commit/e641dafe6c4affd70a853f245814aae1a031aa8d", "message": "Migrated the Xtend code from org.eclipse.xtext.ui project to Java\nAddressed all the review comments\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-21T11:43:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTI5NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395985294", "bodyText": "Style nitpick: a normal for each might be easier for debugging and reading", "author": "tivervac", "createdAt": "2020-03-21T11:36:38Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/bracketmatching/BracePairMatcher.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.editor.bracketmatching;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.source.DefaultCharacterPairMatcher;\n+import org.eclipse.jface.text.source.ICharacterPairMatcher;\n+import org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * \n+ * @since 2.8\n+ */\n+public class BracePairMatcher implements ICharacterPairMatcher {\n+\n+\tprivate DefaultCharacterPairMatcher characterPairMatcher;\n+\n+\t@Inject\n+\tpublic void setBracePairProvider(IBracePairProvider bracePairProvider) {\n+\t\tList<Character> chars = getChars(bracePairProvider);\n+\t\tcharacterPairMatcher = new DefaultCharacterPairMatcher(chars.toString().toCharArray());\n+\t}\n+\n+\tprotected List<Character> getChars(IBracePairProvider bracePairProvider) {\n+\t\tList<Character> chars = new ArrayList<>();\n+\t\tbracePairProvider.getPairs().forEach(pair -> {", "originalCommit": "0ac6e5e73e9dfa62577634a2018b6c3c2b79ee1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/bracketmatching/BracePairMatcher.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/bracketmatching/BracePairMatcher.java\nindex 31e48277a..94597538f 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/bracketmatching/BracePairMatcher.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/bracketmatching/BracePairMatcher.java\n\n@@ -15,6 +15,7 @@ import org.eclipse.jface.text.IDocument;\n import org.eclipse.jface.text.IRegion;\n import org.eclipse.jface.text.source.DefaultCharacterPairMatcher;\n import org.eclipse.jface.text.source.ICharacterPairMatcher;\n+import org.eclipse.xtext.ide.editor.bracketmatching.BracePair;\n import org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider;\n \n import com.google.inject.Inject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTQxNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395985415", "bodyText": "Lists.newArrayList doesn't really have any advantages anymore", "author": "tivervac", "createdAt": "2020-03-21T11:38:22Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/UiToIdeContentProposalProvider.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.contentassist;\n+\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.jface.viewers.ILabelProvider;\n+import org.eclipse.jface.viewers.StyledString;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext.Builder;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IIdeContentProposalAcceptor;\n+import org.eclipse.xtext.ide.editor.contentassist.IdeContentProposalProvider;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.ui.editor.contentassist.AbstractContentProposalProvider.NullSafeCompletionProposalAcceptor;\n+import org.eclipse.xtext.util.TextRegion;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * Delegates to the generic IDE content proposal provider. Use this Implementation to share the same content assist code between Eclipse and\n+ * other editors for your DSL.\n+ * \n+ * @author Titouan Vervack - Initial contribution and API\n+ * \n+ * @since 2.13\n+ */\n+public class UiToIdeContentProposalProvider extends AbstractCompletionProposalFactory implements IContentProposalProvider {\n+\n+\t@Inject\n+\tprivate IdeContentProposalProvider ideProvider;\n+\n+\t@Inject\n+\tprivate Provider<ContentAssistContext.Builder> builderProvider;\n+\n+\t@Inject\n+\t@ContentProposalLabelProvider\n+\tprivate ILabelProvider labelProvider;\n+\n+\t@Override\n+\tpublic void createProposals(org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext context,\n+\t\t\tICompletionProposalAcceptor acceptor) {\n+\t\tArrayList<SimpleEntry<ContentAssistEntry, Integer>> entries = new ArrayList<>();\n+\t\tIIdeContentProposalAcceptor ideAcceptor = new IIdeContentProposalAcceptor() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void accept(ContentAssistEntry entry, int priority) {\n+\t\t\t\tif (entry != null) {\n+\t\t\t\t\tentries.add(new SimpleEntry<ContentAssistEntry, Integer>(entry, priority));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean canAcceptMoreProposals() {\n+\t\t\t\treturn entries.size() < getMaxProposals();\n+\t\t\t}\n+\t\t};\n+\n+\t\tideProvider.createProposals(Lists.newArrayList(getIdeContext(context)), ideAcceptor);", "originalCommit": "0ac6e5e73e9dfa62577634a2018b6c3c2b79ee1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjc4NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396012785", "bodyText": "There are bunch of alternatives that can be used here - new ArrayList() {{add(getIdeContext(context));}};, Arrays.asList(getIdeContext(context));, Stream.of(getIdeContext(context)).collect(Collectors.toList());, and new ArrayList<ContentAssistContext>(Arrays.asList(getIdeContext(context)));.\nI would prefer using Arrays.asList(getIdeContext(context)); as it is less verbose. Would that be ok?", "author": "nbhusare", "createdAt": "2020-03-21T17:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTI4Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396025283", "bodyText": "Oh nevermind I was wrong, keep it as it is", "author": "tivervac", "createdAt": "2020-03-21T20:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/UiToIdeContentProposalProvider.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/UiToIdeContentProposalProvider.java\nindex 7a2285034..f9beb26b5 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/UiToIdeContentProposalProvider.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/contentassist/UiToIdeContentProposalProvider.java\n\n@@ -10,6 +10,7 @@ package org.eclipse.xtext.ui.editor.contentassist;\n \n import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n+import java.util.Arrays;\n \n import org.eclipse.emf.ecore.EObject;\n import org.eclipse.jface.text.Region;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTUxMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395985513", "bodyText": "Not in an IDE right now, shouldn't this be a .equals?", "author": "tivervac", "createdAt": "2020-03-21T11:40:12Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hierarchy/AbstractCallHierarchyViewPart.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.hierarchy;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.viewers.ArrayContentProvider;\n+import org.eclipse.jface.viewers.ColumnLayoutData;\n+import org.eclipse.jface.viewers.ColumnWeightData;\n+import org.eclipse.jface.viewers.IBaseLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.jface.viewers.TableLayout;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.TreeViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder.CallHierarchyType;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNode;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNodeReference;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyRoot;\n+import org.eclipse.xtext.ui.editor.navigation.NavigationService;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public abstract class AbstractCallHierarchyViewPart extends AbstractHierarchyViewPart implements ISelectionChangedListener {\n+\n+\t@Inject\n+\tprivate NavigationService navigationService;\n+\n+\tprivate TableViewer locationViewer;\n+\n+\tprivate TreeViewer callHierarchyViewer;\n+\n+\tprivate final RefreshHierarchyAction refreshAction = new RefreshHierarchyAction(this);\n+\n+\tprivate final SetHierarchyTypeAction[] setHierarchyTypeActions = new SetHierarchyTypeAction[] {\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLER, this), //\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLEE, this) };\n+\n+\tprotected ICallHierarchyBuilder getCallHierarchyBuilder() {\n+\t\treturn getBuilder(ICallHierarchyBuilder.class);\n+\t}\n+\n+\tpublic void setCallHierarchyType(CallHierarchyType hierarchyType) {\n+\t\tICallHierarchyBuilder callHierarchyBuilder = getCallHierarchyBuilder();\n+\t\tif (callHierarchyBuilder != null) {\n+\t\t\tcallHierarchyBuilder.setHierarchyType(hierarchyType);\n+\t\t}\n+\t\trefresh(new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic void refresh(IProgressMonitor monitor) {\n+\t\tCallHierarchyType hierarchyType = getCallHierarchyBuilder() != null ? getCallHierarchyBuilder().getHierarchyType() : null;\n+\t\tfor (SetHierarchyTypeAction setHierarchyTypeAction : setHierarchyTypeActions) {\n+\t\t\tsetHierarchyTypeAction.setChecked(hierarchyType == setHierarchyTypeAction.getHierarchyType());", "originalCommit": "0ac6e5e73e9dfa62577634a2018b6c3c2b79ee1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzkxNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993916", "bodyText": "is an enum.", "author": "cdietrich", "createdAt": "2020-03-21T13:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTUxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTYzOQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395985639", "bodyText": "I think you mentioned this before but this should probably be .equals", "author": "tivervac", "createdAt": "2020-03-21T11:41:56Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hierarchy/AbstractCallHierarchyViewPart.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.hierarchy;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.viewers.ArrayContentProvider;\n+import org.eclipse.jface.viewers.ColumnLayoutData;\n+import org.eclipse.jface.viewers.ColumnWeightData;\n+import org.eclipse.jface.viewers.IBaseLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.jface.viewers.TableLayout;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.TreeViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder.CallHierarchyType;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNode;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNodeReference;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyRoot;\n+import org.eclipse.xtext.ui.editor.navigation.NavigationService;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public abstract class AbstractCallHierarchyViewPart extends AbstractHierarchyViewPart implements ISelectionChangedListener {\n+\n+\t@Inject\n+\tprivate NavigationService navigationService;\n+\n+\tprivate TableViewer locationViewer;\n+\n+\tprivate TreeViewer callHierarchyViewer;\n+\n+\tprivate final RefreshHierarchyAction refreshAction = new RefreshHierarchyAction(this);\n+\n+\tprivate final SetHierarchyTypeAction[] setHierarchyTypeActions = new SetHierarchyTypeAction[] {\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLER, this), //\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLEE, this) };\n+\n+\tprotected ICallHierarchyBuilder getCallHierarchyBuilder() {\n+\t\treturn getBuilder(ICallHierarchyBuilder.class);\n+\t}\n+\n+\tpublic void setCallHierarchyType(CallHierarchyType hierarchyType) {\n+\t\tICallHierarchyBuilder callHierarchyBuilder = getCallHierarchyBuilder();\n+\t\tif (callHierarchyBuilder != null) {\n+\t\t\tcallHierarchyBuilder.setHierarchyType(hierarchyType);\n+\t\t}\n+\t\trefresh(new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic void refresh(IProgressMonitor monitor) {\n+\t\tCallHierarchyType hierarchyType = getCallHierarchyBuilder() != null ? getCallHierarchyBuilder().getHierarchyType() : null;\n+\t\tfor (SetHierarchyTypeAction setHierarchyTypeAction : setHierarchyTypeActions) {\n+\t\t\tsetHierarchyTypeAction.setChecked(hierarchyType == setHierarchyTypeAction.getHierarchyType());\n+\t\t}\n+\t\tsuper.refresh(monitor);\n+\t}\n+\n+\t@Override\n+\tpublic void setRoot(IHierarchyRoot root) {\n+\t\tcallHierarchyViewer.setInput(root);\n+\t\tsetFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tComposite layout = createLayout(parent);\n+\t\tcallHierarchyViewer = createCallHierarchyViewer(layout);\n+\t\tlocationViewer = createLocationViewer(layout);\n+\t\tnavigationService.installNavigationSupport(locationViewer);\n+\t\tnavigationService.installNavigationSupport(callHierarchyViewer);\n+\t\tcallHierarchyViewer.addSelectionChangedListener(this);\n+\t\taddActions(getViewSite().getActionBars().getToolBarManager());\n+\t}\n+\n+\tprotected void addActions(IToolBarManager toolBarManager) {\n+\t\ttoolBarManager.add(refreshAction);\n+\t\tfor (SetHierarchyTypeAction setHierarchyTypeAction : setHierarchyTypeActions) {\n+\t\t\ttoolBarManager.add(setHierarchyTypeAction);\n+\t\t}\n+\t}\n+\n+\tprotected Composite createLayout(Composite parent) {\n+\t\treturn new SashForm(parent, SWT.NONE);\n+\t}\n+\n+\tprotected TreeViewer createCallHierarchyViewer(Composite parent) {\n+\t\tTreeViewer treeViewer = new TreeViewer(parent);\n+\t\ttreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));\n+\t\ttreeViewer.setUseHashlookup(true);\n+\t\ttreeViewer.setAutoExpandLevel(2);\n+\t\ttreeViewer.setLabelProvider(createHierarchyLabelProvider());\n+\t\ttreeViewer.setContentProvider(createHierarchyContentProvider());\n+\t\treturn treeViewer;\n+\t}\n+\n+\tprotected IContentProvider createHierarchyContentProvider() {\n+\t\treturn new HierarchyTreeContentProvider(this);\n+\t}\n+\n+\tprotected abstract IBaseLabelProvider createHierarchyLabelProvider();\n+\n+\tprotected TableViewer createLocationViewer(Composite parent) {\n+\t\tTableViewer locationViewer = new TableViewer(parent);\n+\t\tlocationViewer.setContentProvider(new ArrayContentProvider());\n+\t\tlocationViewer.setLabelProvider(createLocationLabelProvider());\n+\n+\t\tTableLayout layout = new TableLayout();\n+\t\tlocationViewer.getTable().setLayout(layout);\n+\t\tlocationViewer.getTable().setHeaderVisible(true);\n+\n+\t\tPair<String, ColumnLayoutData>[] locationColumnDescriptions = getLocationColumnDescriptions();\n+\t\tIntStream.range(0, locationColumnDescriptions.length).forEach(index -> {\n+\t\t\tlayout.addColumnData(locationColumnDescriptions[index].getValue());\n+\t\t\tcreateColumn(locationViewer.getTable(), locationColumnDescriptions[index], index);\n+\t\t});\n+\n+\t\treturn locationViewer;\n+\t}\n+\n+\tprotected Pair<String, ColumnLayoutData>[] getLocationColumnDescriptions() {\n+\t\treturn new Pair[] { Pair.of(\"Line\", new ColumnWeightData(60)), Pair.of(\"Call\", new ColumnWeightData(300)) };\n+\t}\n+\n+\tprotected void createColumn(Table table, Pair<String, ColumnLayoutData> columnDescription, int index) {\n+\t\tTableColumn column = new TableColumn(table, SWT.NONE, index);\n+\t\tcolumn.setResizable(columnDescription.getValue().resizable);\n+\t\tcolumn.setText(columnDescription.getKey());\n+\t}\n+\n+\tprotected abstract IBaseLabelProvider createLocationLabelProvider();\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tcallHierarchyViewer.getControl().setFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void selectionChanged(SelectionChangedEvent event) {\n+\t\tif (event.getSelectionProvider() == callHierarchyViewer) {", "originalCommit": "0ac6e5e73e9dfa62577634a2018b6c3c2b79ee1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNTUzMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396005531", "bodyText": "It is identity-comparison in the original code. PS - https://bit.ly/2J7otQR", "author": "nbhusare", "createdAt": "2020-03-21T16:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NTYzOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mjg4Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395992886", "bodyText": "I'd prefer a better name such as refactoringStatus or convertedSeverity", "author": "tivervac", "createdAt": "2020-03-21T13:30:35Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/LtkIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2;\n+\n+import com.google.inject.Inject;\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.ui.refactoring.impl.StatusWrapper;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class LtkIssueAcceptor implements RefactoringIssueAcceptor {\n+\n+\t@Inject\n+\tprivate StatusWrapper status;\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\tstatus.add(convert(severity), message, uri, resourceSet);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\tstatus.add(convert(severity), message, resourceUri);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element) {\n+\t\tstatus.add(convert(severity), message, element);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\tstatus.add(convert(severity), message, element, region);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\tstatus.add(convert(severity), message, exc, log);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tstatus.add(convert(severity), message, params);\n+\t}\n+\n+\tpublic RefactoringStatus getRefactoringStatus() {\n+\t\treturn status.getRefactoringStatus();\n+\t}\n+\n+\tprotected int convert(RefactoringIssueAcceptor.Severity severity) {\n+\t\tint switchResult = 0;", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MjkyNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395992925", "bodyText": "Ideally you use a RefactoringStatus constant instead of 0 as well", "author": "tivervac", "createdAt": "2020-03-21T13:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mjg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NDA4Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395994082", "bodyText": "would be an api change !?!", "author": "cdietrich", "createdAt": "2020-03-21T13:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mjg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5NDM3Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395994377", "bodyText": "I don't have an IDE handy, I'd hope one of the RefactoringStatus constants would be set to 0", "author": "tivervac", "createdAt": "2020-03-21T13:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mjg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNDY4Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396004683", "bodyText": "The value of RefactoringStatus.OK is set to 0. I can initialize the local variable refactoringStatus (name changed) to  RefactoringStatus.OK and remove the case OK from the switch block.", "author": "nbhusare", "createdAt": "2020-03-21T16:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mjg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/LtkIssueAcceptor.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/LtkIssueAcceptor.java\nindex e990a3ce2..dd882a9b5 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/LtkIssueAcceptor.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/LtkIssueAcceptor.java\n\n@@ -62,28 +62,25 @@ public class LtkIssueAcceptor implements RefactoringIssueAcceptor {\n \t}\n \n \tprotected int convert(RefactoringIssueAcceptor.Severity severity) {\n-\t\tint switchResult = 0;\n+\t\tint refactoringStatus = RefactoringStatus.OK;\n \t\tif (severity != null) {\n \t\t\tswitch (severity) {\n \t\t\t\tcase FATAL:\n-\t\t\t\t\tswitchResult = RefactoringStatus.FATAL;\n+\t\t\t\t\trefactoringStatus = RefactoringStatus.FATAL;\n \t\t\t\t\tbreak;\n \t\t\t\tcase ERROR:\n-\t\t\t\t\tswitchResult = RefactoringStatus.ERROR;\n+\t\t\t\t\trefactoringStatus = RefactoringStatus.ERROR;\n \t\t\t\t\tbreak;\n \t\t\t\tcase WARNING:\n-\t\t\t\t\tswitchResult = RefactoringStatus.WARNING;\n+\t\t\t\t\trefactoringStatus = RefactoringStatus.WARNING;\n \t\t\t\t\tbreak;\n \t\t\t\tcase INFO:\n-\t\t\t\t\tswitchResult = RefactoringStatus.INFO;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase OK:\n-\t\t\t\t\tswitchResult = RefactoringStatus.OK;\n+\t\t\t\t\trefactoringStatus = RefactoringStatus.INFO;\n \t\t\t\t\tbreak;\n \t\t\t\tdefault:\n \t\t\t\t\tbreak;\n \t\t\t}\n \t\t}\n-\t\treturn switchResult;\n+\t\treturn refactoringStatus;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzA4Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993082", "bodyText": "s/weighting/weighing/", "author": "tivervac", "createdAt": "2020-03-21T13:33:17Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2.participant;\n+\n+import static org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor.Severity.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.resource.MoveResourceChange;\n+import org.eclipse.ltk.core.refactoring.resource.RenameResourceChange;\n+import org.eclipse.xtext.ide.refactoring.IResourceRelocationStrategy;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationChange;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationContext;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.ui.refactoring2.ChangeConverter;\n+import org.eclipse.xtext.ui.refactoring2.LtkIssueAcceptor;\n+import org.eclipse.xtext.ui.refactoring2.ResourceURIConverter;\n+import org.eclipse.xtext.ui.resource.IResourceSetProvider;\n+import org.eclipse.xtext.ui.resource.LiveScopeResourceSetInitializer;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationProcessor {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(ResourceRelocationProcessor.class);\n+\n+\t@Inject\n+\tprivate IResourceSetProvider resourceSetProvider;\n+\n+\t@Inject\n+\tprivate LiveScopeResourceSetInitializer liveScopeResourceSetInitializer;\n+\n+\t@Inject\n+\tprivate LtkIssueAcceptor issues;\n+\n+\t@Inject\n+\tprivate ResourceURIConverter resourceURIConverter;\n+\n+\t@Inject\n+\tprivate Provider<IChangeSerializer> changeSerializerProvider;\n+\n+\t@Inject\n+\tprivate ResourceRelocationStrategyRegistry strategyRegistry;\n+\n+\t@Inject\n+\tprivate ChangeConverter.Factory changeConverterFactory;\n+\n+\tprivate final List<ResourceRelocationChange> uriChanges = new ArrayList<>();\n+\n+\tprivate final Set<IResource> excludedResources = new HashSet<>();\n+\n+\tprivate IProject project;\n+\n+\tpublic Change createChange(String name, ResourceRelocationContext.ChangeType type, IProgressMonitor pm)\n+\t\t\tthrows CoreException, OperationCanceledException {\n+\t\tif (uriChanges.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tSubMonitor subMonitor = SubMonitor.convert(pm);\n+\t\t// Declaring the task and its effort in 'SubMonitor.convert(...)' doesn't yield the expected UI updates\n+\t\t// so let's do it separately; the total effort of '5' is chosen for weighting the subsequent efforts", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3NjAxMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r414376013", "bodyText": "This slipped through.", "author": "szarnekow", "createdAt": "2020-04-24T08:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\nindex 9d02ffa15..5b31f9682 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\n\n@@ -119,8 +119,7 @@ public class ResourceRelocationProcessor {\n \t */\n \tprotected boolean isPersistedIndexUsageRequested(ResourceRelocationContext context) {\n \t\tList<? extends IResourceRelocationStrategy> strategies = strategyRegistry.getStrategies();\n-\t\tboolean persistedIndexUsageRequested = strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));\n-\t\treturn persistedIndexUsageRequested;\n+\t\treturn strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzExOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993118", "bodyText": "Just return immediatly", "author": "tivervac", "createdAt": "2020-03-21T13:33:47Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2.participant;\n+\n+import static org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor.Severity.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.resource.MoveResourceChange;\n+import org.eclipse.ltk.core.refactoring.resource.RenameResourceChange;\n+import org.eclipse.xtext.ide.refactoring.IResourceRelocationStrategy;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationChange;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationContext;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.ui.refactoring2.ChangeConverter;\n+import org.eclipse.xtext.ui.refactoring2.LtkIssueAcceptor;\n+import org.eclipse.xtext.ui.refactoring2.ResourceURIConverter;\n+import org.eclipse.xtext.ui.resource.IResourceSetProvider;\n+import org.eclipse.xtext.ui.resource.LiveScopeResourceSetInitializer;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationProcessor {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(ResourceRelocationProcessor.class);\n+\n+\t@Inject\n+\tprivate IResourceSetProvider resourceSetProvider;\n+\n+\t@Inject\n+\tprivate LiveScopeResourceSetInitializer liveScopeResourceSetInitializer;\n+\n+\t@Inject\n+\tprivate LtkIssueAcceptor issues;\n+\n+\t@Inject\n+\tprivate ResourceURIConverter resourceURIConverter;\n+\n+\t@Inject\n+\tprivate Provider<IChangeSerializer> changeSerializerProvider;\n+\n+\t@Inject\n+\tprivate ResourceRelocationStrategyRegistry strategyRegistry;\n+\n+\t@Inject\n+\tprivate ChangeConverter.Factory changeConverterFactory;\n+\n+\tprivate final List<ResourceRelocationChange> uriChanges = new ArrayList<>();\n+\n+\tprivate final Set<IResource> excludedResources = new HashSet<>();\n+\n+\tprivate IProject project;\n+\n+\tpublic Change createChange(String name, ResourceRelocationContext.ChangeType type, IProgressMonitor pm)\n+\t\t\tthrows CoreException, OperationCanceledException {\n+\t\tif (uriChanges.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tSubMonitor subMonitor = SubMonitor.convert(pm);\n+\t\t// Declaring the task and its effort in 'SubMonitor.convert(...)' doesn't yield the expected UI updates\n+\t\t// so let's do it separately; the total effort of '5' is chosen for weighting the subsequent efforts\n+\t\tsubMonitor.beginTask(\"Preparing the refactoring...\", 5);\n+\n+\t\tIChangeSerializer changeSerializer = changeSerializerProvider.get();\n+\t\tResourceSet resourceSet = resourceSetProvider.get(project);\n+\n+\t\tResourceRelocationContext context = new ResourceRelocationContext(type, uriChanges, issues, changeSerializer, resourceSet);\n+\t\tboolean persistedIndexUsageRequested = isPersistedIndexUsageRequested(context);\n+\n+\t\t// TODO check preconditions like all editors being saved if 'persistedIndexUsageRequested' == true\n+\n+\t\tinitializeResourceSet(persistedIndexUsageRequested, context);\n+\t\texecuteParticipants(context, subMonitor.split(1));\n+\n+\t\tChangeConverter changeConverter = changeConverterFactory.create(name, //\n+\t\t\t\t(it) -> {\n+\t\t\t\t\treturn (!(it instanceof MoveResourceChange || it instanceof RenameResourceChange)\n+\t\t\t\t\t\t\t|| !excludedResources.contains(it.getModifiedElement()));\n+\t\t\t\t}, issues);\n+\n+\t\tSubMonitor modificationApplicationMonitor = subMonitor.split(4); // remaining effort is assigned to 'changeSerializer's work\n+\t\tchangeSerializer.setProgressMonitor(modificationApplicationMonitor);\n+\t\tchangeSerializer.applyModifications(changeConverter);\n+\t\tmodificationApplicationMonitor.done();\n+\t\treturn changeConverter.getChange();\n+\t}\n+\n+\t/**\n+\t * @since 2.18\n+\t */\n+\tprotected boolean isPersistedIndexUsageRequested(ResourceRelocationContext context) {\n+\t\tList<? extends IResourceRelocationStrategy> strategies = strategyRegistry.getStrategies();\n+\t\tboolean persistedIndexUsageRequested = strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\nindex 9d02ffa15..5b31f9682 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java\n\n@@ -119,8 +119,7 @@ public class ResourceRelocationProcessor {\n \t */\n \tprotected boolean isPersistedIndexUsageRequested(ResourceRelocationContext context) {\n \t\tList<? extends IResourceRelocationStrategy> strategies = strategyRegistry.getStrategies();\n-\t\tboolean persistedIndexUsageRequested = strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));\n-\t\treturn persistedIndexUsageRequested;\n+\t\treturn strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzMxNw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993317", "bodyText": "You can just use \"name\".equals()", "author": "tivervac", "createdAt": "2020-03-21T13:36:59Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/ISimpleNameProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2.rename;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EcorePackage;\n+\n+import com.google.inject.ImplementedBy;\n+\n+/**\n+ * Provides the Simple name of the passed {@code EObject} instance. A Simple name is the value that is associated with the attribute having\n+ * name {@code name} and type {@code String}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ */\n+@ImplementedBy(ISimpleNameProvider.DefaultImpl.class)\n+public interface ISimpleNameProvider {\n+\n+\tclass DefaultImpl implements ISimpleNameProvider {\n+\n+\t\t@Override\n+\t\tpublic String getSimpleName(EObject target) {\n+\t\t\tif (target != null) {\n+\t\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\t\tif (nameAttribute != null) {\n+\t\t\t\t\treturn (String) target.eGet(nameAttribute);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean canRename(EObject target) {\n+\t\t\tif (target != null) {\n+\t\t\t\treturn getNameEAttribute(target) != null;\n+\t\t\t}\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {\n+\t\t\tfor (EAttribute eAttribute : target.eClass().getEAllAttributes()) {\n+\t\t\t\tif (Objects.equals(eAttribute.getName(), \"name\") && eAttribute.getEType() == EcorePackage.Literals.ESTRING) {", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/ISimpleNameProvider.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/ISimpleNameProvider.java\nindex 31233f41f..d2a4aaab6 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/ISimpleNameProvider.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/ISimpleNameProvider.java\n\n@@ -48,7 +48,7 @@ public interface ISimpleNameProvider {\n \n \t\tprotected EAttribute getNameEAttribute(EObject target) {\n \t\t\tfor (EAttribute eAttribute : target.eClass().getEAllAttributes()) {\n-\t\t\t\tif (Objects.equals(eAttribute.getName(), \"name\") && eAttribute.getEType() == EcorePackage.Literals.ESTRING) {\n+\t\t\t\tif (\"name\".equals(eAttribute.getName()) && eAttribute.getEType() == EcorePackage.Literals.ESTRING) {\n \t\t\t\t\treturn eAttribute;\n \t\t\t\t}\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzQyNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993424", "bodyText": "No need for Lists.newArrayList", "author": "tivervac", "createdAt": "2020-03-21T13:38:14Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/RenameElementProcessor2.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2.rename;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.RefactoringStatus;\n+import org.eclipse.ltk.core.refactoring.participants.CheckConditionsContext;\n+import org.eclipse.ltk.core.refactoring.participants.ParticipantManager;\n+import org.eclipse.ltk.core.refactoring.participants.RefactoringParticipant;\n+import org.eclipse.ltk.core.refactoring.participants.RenameArguments;\n+import org.eclipse.ltk.core.refactoring.participants.SharableParticipants;\n+import org.eclipse.xtext.Constants;\n+import org.eclipse.xtext.ide.refactoring.IRenameNameValidator;\n+import org.eclipse.xtext.ide.refactoring.IRenameStrategy2;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.ide.refactoring.RenameChange;\n+import org.eclipse.xtext.ide.refactoring.RenameContext;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.refactoring.impl.AbstractRenameProcessor;\n+import org.eclipse.xtext.ui.refactoring.impl.ProjectUtil;\n+import org.eclipse.xtext.ui.refactoring.impl.RefactoringResourceSetProvider;\n+import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;\n+import org.eclipse.xtext.ui.refactoring2.ChangeConverter;\n+import org.eclipse.xtext.ui.refactoring2.LtkIssueAcceptor;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.name.Named;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class RenameElementProcessor2 extends AbstractRenameProcessor {\n+\n+\tprotected static final Logger LOG = Logger.getLogger(RenameElementProcessor2.class);\n+\n+\t@Inject\n+\t@Named(Constants.LANGUAGE_NAME)\n+\tprivate String languageName;\n+\n+\t@Inject\n+\tprivate IRenameNameValidator nameValidator;\n+\n+\t@Inject\n+\tprivate RefactoringResourceSetProvider resourceSetProvider;\n+\n+\t@Inject\n+\tprivate ISimpleNameProvider simpleNameProvider;\n+\n+\t@Inject\n+\tprivate ProjectUtil projectUtil;\n+\n+\t@Inject\n+\tprivate Provider<LtkIssueAcceptor> statusProvider;\n+\n+\t@Inject\n+\tprivate IChangeSerializer changeSerializer;\n+\n+\t@Inject\n+\tprivate IRenameStrategy2 renameStrategy;\n+\n+\t@Inject\n+\tprivate ChangeConverter.Factory changeConverterFactory;\n+\n+\tprivate String newName;\n+\n+\tprivate IRenameElementContext renameElementContext;\n+\n+\tprivate IProject project;\n+\n+\tprivate ResourceSet resourceSet;\n+\n+\tprivate EObject target;\n+\n+\tprivate String originalName;\n+\n+\tprivate LtkIssueAcceptor status;\n+\n+\tprivate Change change;\n+\n+\t@Override\n+\tpublic boolean initialize(IRenameElementContext renameElementContext) {\n+\t\tthis.renameElementContext = renameElementContext;\n+\t\tstatus = statusProvider.get();\n+\t\tproject = projectUtil.getProject(renameElementContext.getTargetElementURI().trimFragment());\n+\n+\t\tif (project == null) {\n+\t\t\tURI targetElementURI = renameElementContext.getTargetElementURI();\n+\t\t\tstatus.add(RefactoringIssueAcceptor.Severity.ERROR, //\n+\t\t\t\t\t\"Cannot determine project from targetURI \" + (targetElementURI != null ? targetElementURI.toString() : null), //\n+\t\t\t\t\trenameElementContext.getTargetElementURI());\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tresourceSet = resourceSetProvider.get(project);\n+\t\tEObject target = resourceSet.getEObject(renameElementContext.getTargetElementURI(), true);\n+\t\tif (target == null) {\n+\t\t\tstatus.add(RefactoringIssueAcceptor.Severity.ERROR, \"Rename target does not exist\", renameElementContext.getTargetElementURI());\n+\t\t} else {\n+\t\t\toriginalName = simpleNameProvider.getSimpleName(target);\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException, OperationCanceledException {\n+\t\treturn status.getRefactoringStatus();\n+\t}\n+\n+\t@Override\n+\tpublic RefactoringStatus checkFinalConditions(IProgressMonitor pm, CheckConditionsContext context)\n+\t\t\tthrows CoreException, OperationCanceledException {\n+\t\tRenameChange renameChange = new RenameChange(newName, renameElementContext.getTargetElementURI());\n+\t\tRenameContext renameContext = new RenameContext(Lists.newArrayList(renameChange), resourceSet, changeSerializer, status);", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/RenameElementProcessor2.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/RenameElementProcessor2.java\nindex dc1dd819a..14b606184 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/RenameElementProcessor2.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/rename/RenameElementProcessor2.java\n\n@@ -8,6 +8,8 @@\n  */\n package org.eclipse.xtext.ui.refactoring2.rename;\n \n+import java.util.Arrays;\n+\n import org.apache.log4j.Logger;\n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzUyMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993523", "bodyText": "unneeded final", "author": "tivervac", "createdAt": "2020-03-21T13:39:27Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/tasks/preferences/TaskTagPreferenceInitializer.java", "diffHunk": "@@ -8,24 +8,19 @@\n  */\n package org.eclipse.xtext.ui.tasks.preferences;\n \n-import java.util.function.Consumer;\n import org.eclipse.jface.preference.IPreferenceStore;\n-import org.eclipse.xtext.preferences.PreferenceKey;\n import org.eclipse.xtext.tasks.PreferenceTaskTagProvider;\n import org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreAccess;\n import org.eclipse.xtext.ui.editor.preferences.IPreferenceStoreInitializer;\n \n /**\n  * @author Stefan Oehme - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public class TaskTagPreferenceInitializer implements IPreferenceStoreInitializer {\n-  @Override\n-  public void initialize(final IPreferenceStoreAccess access) {\n-    final IPreferenceStore store = access.getWritablePreferenceStore();\n-    final Consumer<PreferenceKey> _function = (PreferenceKey it) -> {\n-      store.setDefault(it.getId(), it.getDefaultValue());\n-    };\n-    PreferenceTaskTagProvider.KEYS.forEach(_function);\n-  }\n+\n+\t@Override\n+\tpublic void initialize(IPreferenceStoreAccess access) {\n+\t\tfinal IPreferenceStore store = access.getWritablePreferenceStore();", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/tasks/preferences/TaskTagPreferenceInitializer.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/tasks/preferences/TaskTagPreferenceInitializer.java\nindex 7fa20d63f..45fcd3c0b 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/tasks/preferences/TaskTagPreferenceInitializer.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/tasks/preferences/TaskTagPreferenceInitializer.java\n\n@@ -20,7 +20,7 @@ public class TaskTagPreferenceInitializer implements IPreferenceStoreInitializer\n \n \t@Override\n \tpublic void initialize(IPreferenceStoreAccess access) {\n-\t\tfinal IPreferenceStore store = access.getWritablePreferenceStore();\n+\t\tIPreferenceStore store = access.getWritablePreferenceStore();\n \t\tPreferenceTaskTagProvider.KEYS.forEach(preferenceKey -> store.setDefault(preferenceKey.getId(), preferenceKey.getDefaultValue()));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzU3OA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993578", "bodyText": "Not needed", "author": "tivervac", "createdAt": "2020-03-21T13:40:26Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseSourceFolder.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.workspace;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.workspace.ISourceFolder;\n+\n+public class EclipseSourceFolder implements ISourceFolder {\n+\n+\tprivate final IProject project;\n+\n+\tprivate final String name;\n+\n+\tpublic EclipseSourceFolder(IProject project, String name) {\n+\t\tsuper();", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseSourceFolder.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseSourceFolder.java\nindex 5f7aa87c7..e520f5428 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseSourceFolder.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseSourceFolder.java\n\n@@ -19,10 +19,8 @@ public class EclipseSourceFolder implements ISourceFolder {\n \tprivate final String name;\n \n \tpublic EclipseSourceFolder(IProject project, String name) {\n-\t\tsuper();\n \t\tthis.project = project;\n \t\tthis.name = name;\n-\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5MzYyNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993625", "bodyText": "Not needed", "author": "tivervac", "createdAt": "2020-03-21T13:40:44Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseWorkspaceConfig.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.workspace;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+\n+public class EclipseWorkspaceConfig implements IWorkspaceConfig {\n+\n+\tprivate final IWorkspaceRoot workspaceRoot;\n+\n+\tprivate final EclipseProjectConfigProvider projectConfigProvider;\n+\n+\tpublic EclipseWorkspaceConfig(IWorkspaceRoot workspaceRoot, EclipseProjectConfigProvider projectConfigProvider) {\n+\t\tsuper();", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseWorkspaceConfig.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseWorkspaceConfig.java\nindex 8f8099626..1352556ac 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseWorkspaceConfig.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/EclipseWorkspaceConfig.java\n\n@@ -24,7 +24,6 @@ public class EclipseWorkspaceConfig implements IWorkspaceConfig {\n \tprivate final EclipseProjectConfigProvider projectConfigProvider;\n \n \tpublic EclipseWorkspaceConfig(IWorkspaceRoot workspaceRoot, EclipseProjectConfigProvider projectConfigProvider) {\n-\t\tsuper();\n \t\tthis.workspaceRoot = workspaceRoot;\n \t\tthis.projectConfigProvider = projectConfigProvider;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5Mzc2NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r395993765", "bodyText": "THere's also Arrays.stream or Stream.array or something", "author": "tivervac", "createdAt": "2020-03-21T13:42:42Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/JdtProjectConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.workspace;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.jdt.core.IClasspathEntry;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.jdt.core.JavaModelException;\n+import org.eclipse.xtext.workspace.ISourceFolder;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class JdtProjectConfig extends EclipseProjectConfig {\n+\n+\tpublic JdtProjectConfig(IProject project, EclipseProjectConfigProvider projectConfigProvider) {\n+\t\tsuper(project, projectConfigProvider);\n+\t}\n+\n+\t@Override\n+\tpublic Set<? extends ISourceFolder> getSourceFolders() {\n+\t\tIJavaProject javaProject = JavaCore.create(getProject());\n+\t\tif (!javaProject.exists()) {\n+\t\t\treturn Collections.emptySet();\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn Arrays.asList(javaProject.getRawClasspath()).stream() //", "originalCommit": "e641dafe6c4affd70a853f245814aae1a031aa8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "chunk": "diff --git a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/JdtProjectConfig.java b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/JdtProjectConfig.java\nindex 645acaf57..0074c7e5c 100644\n--- a/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/JdtProjectConfig.java\n+++ b/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/workspace/JdtProjectConfig.java\n\n@@ -35,7 +35,7 @@ public class JdtProjectConfig extends EclipseProjectConfig {\n \t\t}\n \n \t\ttry {\n-\t\t\treturn Arrays.asList(javaProject.getRawClasspath()).stream() //\n+\t\t\treturn Arrays.stream(javaProject.getRawClasspath())//\n \t\t\t\t\t.filter(entry -> entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) //\n \t\t\t\t\t.map(entry -> entry.getPath().removeFirstSegments(1).toString()) //\n \t\t\t\t\t.map(entryName -> new EclipseSourceFolder(getProject(), entryName)) //\t\n"}}, {"oid": "5d5235500e9429820f33bce9ff333e54d5a974fa", "url": "https://github.com/eclipse/xtext-eclipse/commit/5d5235500e9429820f33bce9ff333e54d5a974fa", "message": "Migrated the Xtend code from org.eclipse.xtext.ui project to Java\nAddressed all the review comments\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-21T17:56:00Z", "type": "commit"}, {"oid": "5d5235500e9429820f33bce9ff333e54d5a974fa", "url": "https://github.com/eclipse/xtext-eclipse/commit/5d5235500e9429820f33bce9ff333e54d5a974fa", "message": "Migrated the Xtend code from org.eclipse.xtext.ui project to Java\nAddressed all the review comments\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-21T17:56:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDM0NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396014345", "bodyText": "@tivervac @szarnekow I have added the break here. The original code didn't have it. Please confirm if this is ok.", "author": "nbhusare", "createdAt": "2020-03-21T18:01:33Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/refactoring2/participant/ResourceRelocationProcessor.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.refactoring2.participant;\n+\n+import static org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor.Severity.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.ltk.core.refactoring.Change;\n+import org.eclipse.ltk.core.refactoring.resource.MoveResourceChange;\n+import org.eclipse.ltk.core.refactoring.resource.RenameResourceChange;\n+import org.eclipse.xtext.ide.refactoring.IResourceRelocationStrategy;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationChange;\n+import org.eclipse.xtext.ide.refactoring.ResourceRelocationContext;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider;\n+import org.eclipse.xtext.ui.refactoring2.ChangeConverter;\n+import org.eclipse.xtext.ui.refactoring2.LtkIssueAcceptor;\n+import org.eclipse.xtext.ui.refactoring2.ResourceURIConverter;\n+import org.eclipse.xtext.ui.resource.IResourceSetProvider;\n+import org.eclipse.xtext.ui.resource.LiveScopeResourceSetInitializer;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationProcessor {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(ResourceRelocationProcessor.class);\n+\n+\t@Inject\n+\tprivate IResourceSetProvider resourceSetProvider;\n+\n+\t@Inject\n+\tprivate LiveScopeResourceSetInitializer liveScopeResourceSetInitializer;\n+\n+\t@Inject\n+\tprivate LtkIssueAcceptor issues;\n+\n+\t@Inject\n+\tprivate ResourceURIConverter resourceURIConverter;\n+\n+\t@Inject\n+\tprivate Provider<IChangeSerializer> changeSerializerProvider;\n+\n+\t@Inject\n+\tprivate ResourceRelocationStrategyRegistry strategyRegistry;\n+\n+\t@Inject\n+\tprivate ChangeConverter.Factory changeConverterFactory;\n+\n+\tprivate final List<ResourceRelocationChange> uriChanges = new ArrayList<>();\n+\n+\tprivate final Set<IResource> excludedResources = new HashSet<>();\n+\n+\tprivate IProject project;\n+\n+\tpublic Change createChange(String name, ResourceRelocationContext.ChangeType type, IProgressMonitor pm)\n+\t\t\tthrows CoreException, OperationCanceledException {\n+\t\tif (uriChanges.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tSubMonitor subMonitor = SubMonitor.convert(pm);\n+\t\t// Declaring the task and its effort in 'SubMonitor.convert(...)' doesn't yield the expected UI updates\n+\t\t// so let's do it separately; the total effort of '5' is chosen for weighting the subsequent efforts\n+\t\tsubMonitor.beginTask(\"Preparing the refactoring...\", 5);\n+\n+\t\tIChangeSerializer changeSerializer = changeSerializerProvider.get();\n+\t\tResourceSet resourceSet = resourceSetProvider.get(project);\n+\n+\t\tResourceRelocationContext context = new ResourceRelocationContext(type, uriChanges, issues, changeSerializer, resourceSet);\n+\t\tboolean persistedIndexUsageRequested = isPersistedIndexUsageRequested(context);\n+\n+\t\t// TODO check preconditions like all editors being saved if 'persistedIndexUsageRequested' == true\n+\n+\t\tinitializeResourceSet(persistedIndexUsageRequested, context);\n+\t\texecuteParticipants(context, subMonitor.split(1));\n+\n+\t\tChangeConverter changeConverter = changeConverterFactory.create(name, //\n+\t\t\t\t(it) -> {\n+\t\t\t\t\treturn (!(it instanceof MoveResourceChange || it instanceof RenameResourceChange)\n+\t\t\t\t\t\t\t|| !excludedResources.contains(it.getModifiedElement()));\n+\t\t\t\t}, issues);\n+\n+\t\tSubMonitor modificationApplicationMonitor = subMonitor.split(4); // remaining effort is assigned to 'changeSerializer's work\n+\t\tchangeSerializer.setProgressMonitor(modificationApplicationMonitor);\n+\t\tchangeSerializer.applyModifications(changeConverter);\n+\t\tmodificationApplicationMonitor.done();\n+\t\treturn changeConverter.getChange();\n+\t}\n+\n+\t/**\n+\t * @since 2.18\n+\t */\n+\tprotected boolean isPersistedIndexUsageRequested(ResourceRelocationContext context) {\n+\t\tList<? extends IResourceRelocationStrategy> strategies = strategyRegistry.getStrategies();\n+\t\treturn strategies.stream().anyMatch(strategy -> strategy.requiresUsageOfPersistedIndex(context));\n+\t}\n+\n+\t/**\n+\t * @since 2.18\n+\t */\n+\tprotected void initializeResourceSet(boolean persistedIndexUsageRequested, ResourceRelocationContext context) {\n+\t\tif (persistedIndexUsageRequested) {\n+\t\t\tcontext.getResourceSet().getLoadOptions().put(ResourceDescriptionsProvider.PERSISTED_DESCRIPTIONS, Boolean.TRUE);\n+\t\t} else {\n+\t\t\tliveScopeResourceSetInitializer.initialize(context.getResourceSet());\n+\t\t}\n+\t}\n+\n+\tprotected void executeParticipants(ResourceRelocationContext context, SubMonitor monitor) {\n+\t\tList<? extends IResourceRelocationStrategy> strategies = strategyRegistry.getStrategies();\n+\t\tif (context.getChangeType() == ResourceRelocationContext.ChangeType.COPY) {\n+\t\t\tcontext.getChangeSerializer().setUpdateRelatedFiles(false);\n+\t\t}\n+\n+\t\tmonitor.setWorkRemaining(strategies.size());\n+\n+\t\tfor (IResourceRelocationStrategy strategy : strategies) {\n+\t\t\ttry {\n+\t\t\t\tmonitor.split(1);\n+\t\t\t\tstrategy.applyChange(context);\n+\t\t\t} catch (OperationCanceledException t) {\n+\t\t\t\tissues.add(ERROR, \"Operation was cancelled while applying resource changes\", t);\n+\t\t\t\tLOG.error(t.getMessage(), t);\n+\t\t\t\tbreak;", "originalCommit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTQ2OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396025469", "bodyText": "Seems fine to me", "author": "tivervac", "createdAt": "2020-03-21T20:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDM0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDU1Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396014556", "bodyText": "@szarnekow I have purposefully kept this import as I didn't want to pollute this class with the reflection code.", "author": "nbhusare", "createdAt": "2020-03-21T18:04:23Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hyperlinking/SingleHoverShowingHyperlinkPresenter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.hyperlinking;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.jface.text.AbstractInformationControlManager;\n+import org.eclipse.jface.text.JFaceTextUtil;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.jface.text.hyperlink.IHyperlink;\n+import org.eclipse.jface.text.hyperlink.MultipleHyperlinkPresenter;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;", "originalCommit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDc5NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396014794", "bodyText": "@szarnekow Replacing Pair with a Java equivalent would break the downstream code, which is why I kept it as it is.", "author": "nbhusare", "createdAt": "2020-03-21T18:07:17Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/hierarchy/AbstractCallHierarchyViewPart.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.hierarchy;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.stream.IntStream;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.viewers.ArrayContentProvider;\n+import org.eclipse.jface.viewers.ColumnLayoutData;\n+import org.eclipse.jface.viewers.ColumnWeightData;\n+import org.eclipse.jface.viewers.IBaseLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.jface.viewers.TableLayout;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.TreeViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder;\n+import org.eclipse.xtext.ide.editor.hierarchy.ICallHierarchyBuilder.CallHierarchyType;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNode;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNodeReference;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyRoot;\n+import org.eclipse.xtext.ui.editor.navigation.NavigationService;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public abstract class AbstractCallHierarchyViewPart extends AbstractHierarchyViewPart implements ISelectionChangedListener {\n+\n+\t@Inject\n+\tprivate NavigationService navigationService;\n+\n+\tprivate TableViewer locationViewer;\n+\n+\tprivate TreeViewer callHierarchyViewer;\n+\n+\tprivate final RefreshHierarchyAction refreshAction = new RefreshHierarchyAction(this);\n+\n+\tprivate final SetHierarchyTypeAction[] setHierarchyTypeActions = new SetHierarchyTypeAction[] {\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLER, this), //\n+\t\t\tnew SetHierarchyTypeAction(CallHierarchyType.CALLEE, this) };\n+\n+\tprotected ICallHierarchyBuilder getCallHierarchyBuilder() {\n+\t\treturn getBuilder(ICallHierarchyBuilder.class);\n+\t}\n+\n+\tpublic void setCallHierarchyType(CallHierarchyType hierarchyType) {\n+\t\tICallHierarchyBuilder callHierarchyBuilder = getCallHierarchyBuilder();\n+\t\tif (callHierarchyBuilder != null) {\n+\t\t\tcallHierarchyBuilder.setHierarchyType(hierarchyType);\n+\t\t}\n+\t\trefresh(new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic void refresh(IProgressMonitor monitor) {\n+\t\tCallHierarchyType hierarchyType = getCallHierarchyBuilder() != null ? getCallHierarchyBuilder().getHierarchyType() : null;\n+\t\tfor (SetHierarchyTypeAction setHierarchyTypeAction : setHierarchyTypeActions) {\n+\t\t\tsetHierarchyTypeAction.setChecked(hierarchyType == setHierarchyTypeAction.getHierarchyType());\n+\t\t}\n+\t\tsuper.refresh(monitor);\n+\t}\n+\n+\t@Override\n+\tpublic void setRoot(IHierarchyRoot root) {\n+\t\tcallHierarchyViewer.setInput(root);\n+\t\tsetFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tComposite layout = createLayout(parent);\n+\t\tcallHierarchyViewer = createCallHierarchyViewer(layout);\n+\t\tlocationViewer = createLocationViewer(layout);\n+\t\tnavigationService.installNavigationSupport(locationViewer);\n+\t\tnavigationService.installNavigationSupport(callHierarchyViewer);\n+\t\tcallHierarchyViewer.addSelectionChangedListener(this);\n+\t\taddActions(getViewSite().getActionBars().getToolBarManager());\n+\t}\n+\n+\tprotected void addActions(IToolBarManager toolBarManager) {\n+\t\ttoolBarManager.add(refreshAction);\n+\t\tfor (SetHierarchyTypeAction setHierarchyTypeAction : setHierarchyTypeActions) {\n+\t\t\ttoolBarManager.add(setHierarchyTypeAction);\n+\t\t}\n+\t}\n+\n+\tprotected Composite createLayout(Composite parent) {\n+\t\treturn new SashForm(parent, SWT.NONE);\n+\t}\n+\n+\tprotected TreeViewer createCallHierarchyViewer(Composite parent) {\n+\t\tTreeViewer treeViewer = new TreeViewer(parent);\n+\t\ttreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));\n+\t\ttreeViewer.setUseHashlookup(true);\n+\t\ttreeViewer.setAutoExpandLevel(2);\n+\t\ttreeViewer.setLabelProvider(createHierarchyLabelProvider());\n+\t\ttreeViewer.setContentProvider(createHierarchyContentProvider());\n+\t\treturn treeViewer;\n+\t}\n+\n+\tprotected IContentProvider createHierarchyContentProvider() {\n+\t\treturn new HierarchyTreeContentProvider(this);\n+\t}\n+\n+\tprotected abstract IBaseLabelProvider createHierarchyLabelProvider();\n+\n+\tprotected TableViewer createLocationViewer(Composite parent) {\n+\t\tTableViewer locationViewer = new TableViewer(parent);\n+\t\tlocationViewer.setContentProvider(new ArrayContentProvider());\n+\t\tlocationViewer.setLabelProvider(createLocationLabelProvider());\n+\n+\t\tTableLayout layout = new TableLayout();\n+\t\tlocationViewer.getTable().setLayout(layout);\n+\t\tlocationViewer.getTable().setHeaderVisible(true);\n+\n+\t\tPair<String, ColumnLayoutData>[] locationColumnDescriptions = getLocationColumnDescriptions();\n+\t\tIntStream.range(0, locationColumnDescriptions.length).forEach(index -> {\n+\t\t\tlayout.addColumnData(locationColumnDescriptions[index].getValue());\n+\t\t\tcreateColumn(locationViewer.getTable(), locationColumnDescriptions[index], index);\n+\t\t});\n+\n+\t\treturn locationViewer;\n+\t}\n+\n+\tprotected Pair<String, ColumnLayoutData>[] getLocationColumnDescriptions() {", "originalCommit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDk4Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1374#discussion_r396014982", "bodyText": "@szarnekow Public API. I kept the reference to Procedure1 to avoid breaking the consumer.", "author": "nbhusare", "createdAt": "2020-03-21T18:09:05Z", "path": "org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/editor/navigation/NavigationService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.navigation;\n+\n+import java.util.Iterator;\n+\n+import org.eclipse.jface.util.OpenStrategy;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.OpenEvent;\n+import org.eclipse.jface.viewers.StructuredViewer;\n+import org.eclipse.ui.OpenAndLinkWithEditorHelper;\n+import org.eclipse.xtext.ide.editor.navigation.INavigatable;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.resource.IReferenceDescription;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.ui.editor.IURIEditorOpener;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @since 2.10\n+ * \n+ * @author kosyakov - Initial contribution and API\n+ */\n+@Singleton\n+public class NavigationService {\n+\n+\t@Inject\n+\tprivate IURIEditorOpener uriEditorOpener;\n+\n+\tpublic void open(OpenEvent openEvent) {\n+\t\topen(openEvent, true);\n+\t}\n+\n+\tpublic void open(OpenEvent openEvent, boolean select) {\n+\t\tISelection selection = openEvent.getSelection();\n+\t\tif (selection instanceof IStructuredSelection) {\n+\t\t\tIterator<?> iterator = ((IStructuredSelection) selection).iterator();\n+\t\t\twhile (iterator.hasNext()) {\n+\t\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) iterator.next();\n+\t\t\t\tif (structuredSelection instanceof INavigatable) {\n+\t\t\t\t\topen((INavigatable) structuredSelection, select);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void open(INavigatable navigatable) {\n+\t\topen(navigatable, true);\n+\t}\n+\n+\tpublic void open(INavigatable navigatable, boolean select) {\n+\t\tif (navigatable != null) {\n+\t\t\tObject navigatableElement = navigatable.getNavigationElement();\n+\t\t\tif (navigatableElement instanceof IReferenceDescription) {\n+\t\t\t\tIReferenceDescription referenceDescription = (IReferenceDescription) navigatableElement;\n+\t\t\t\turiEditorOpener.open(referenceDescription.getSourceEObjectUri(), //\n+\t\t\t\t\t\treferenceDescription.getEReference(), //\n+\t\t\t\t\t\treferenceDescription.getIndexInList(), //\n+\t\t\t\t\t\tselect);\n+\t\t\t} else if (navigatableElement instanceof IEObjectDescription) {\n+\t\t\t\turiEditorOpener.open(((IEObjectDescription) navigatableElement).getEObjectURI(), select);\n+\t\t\t} else if (navigatableElement instanceof IResourceDescription) {\n+\t\t\t\turiEditorOpener.open(((IResourceDescription) navigatableElement).getURI(), select);\n+\t\t\t} else if (navigatableElement instanceof INavigatable) {\n+\t\t\t\topen((INavigatable) navigatableElement, select);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic OpenAndLinkWithEditorHelper installNavigationSupport(StructuredViewer viewer) {\n+\t\treturn installNavigationSupport(viewer, true);\n+\t}\n+\n+\tpublic OpenAndLinkWithEditorHelper installNavigationSupport(StructuredViewer viewer, boolean select) {\n+\t\treturn installNavigationSupport(viewer, (OpenEvent openEvent) -> open(openEvent, select));\n+\t}\n+\n+\tpublic OpenAndLinkWithEditorHelper installNavigationSupport(StructuredViewer viewer, Procedure1<? super OpenEvent> opener) {", "originalCommit": "5d5235500e9429820f33bce9ff333e54d5a974fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}