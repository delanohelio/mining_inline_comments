{"pr_number": 1402, "pr_title": "Migrated a subset of Xtend code from the \"org.eclipse.xtext.ui.testing\" project to Java", "pr_createdAt": "2020-04-14T15:15:21Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTE5OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408221199", "bodyText": "Altered the code to throw RuntimeException.", "author": "nbhusare", "createdAt": "2020-04-14T15:18:44Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.ResourceLoadHelper;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.12\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractContentAssistTest implements ResourceLoadHelper, IJavaProjectProvider {\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprivate Injector injector;\n+\n+\tprivate static IJavaProject javaProject;\n+\n+\t@BeforeClass\n+\t@BeforeAll\n+\tpublic static void setUp() throws CoreException {\n+\t\tjavaProject = JavaProjectSetupUtil.createJavaProject(\"contentAssistTest\");\n+\t}\n+\n+\t@AfterClass\n+\t@AfterAll\n+\tpublic static void tearDown() throws CoreException {\n+\t\tIProject project = AbstractContentAssistTest.javaProject.getProject();\n+\t\tproject.delete(true, new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic XtextResource getResourceFor(InputStream stream) {\n+\t\tXtextResourceSet resourceSet = resourceSetProvider.get();\n+\t\tinitializeTypeProvider(resourceSet);\n+\t\ttry {\n+\t\t\tURI resourceUri = URI.createURI(\"Test.\" + fileExtensionProvider.getPrimaryFileExtension());\n+\t\t\tResource resource = resourceSet.createResource(resourceUri);\n+\t\t\tresource.load(stream, null);\n+\t\t\treturn (XtextResource) resource;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\nindex 371f01672..ccb44e652 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n\n@@ -12,6 +12,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTU5NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408221595", "bodyText": "This method now throws a CoreException", "author": "nbhusare", "createdAt": "2020-04-14T15:19:16Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.ResourceLoadHelper;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.12\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractContentAssistTest implements ResourceLoadHelper, IJavaProjectProvider {\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprivate Injector injector;\n+\n+\tprivate static IJavaProject javaProject;\n+\n+\t@BeforeClass\n+\t@BeforeAll\n+\tpublic static void setUp() throws CoreException {\n+\t\tjavaProject = JavaProjectSetupUtil.createJavaProject(\"contentAssistTest\");\n+\t}\n+\n+\t@AfterClass\n+\t@AfterAll\n+\tpublic static void tearDown() throws CoreException {", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\nindex 371f01672..ccb44e652 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n\n@@ -12,6 +12,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTcwNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408221704", "bodyText": "This method now throws a CoreException", "author": "nbhusare", "createdAt": "2020-04-14T15:19:25Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.ResourceLoadHelper;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.12\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractContentAssistTest implements ResourceLoadHelper, IJavaProjectProvider {\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprivate Injector injector;\n+\n+\tprivate static IJavaProject javaProject;\n+\n+\t@BeforeClass\n+\t@BeforeAll\n+\tpublic static void setUp() throws CoreException {", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\nindex 371f01672..ccb44e652 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n\n@@ -12,6 +12,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTA2MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408225060", "bodyText": "Added this line to ensure that the test fails if an exception is thrown, and a proper error message is provided to the user.", "author": "nbhusare", "createdAt": "2020-04-14T15:23:51Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.ITextSelection;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.texteditor.AbstractTextEditor;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.14\n+ */\n+public abstract class AbstractEditorDoubleClickTextSelectionTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the current cursor position.\n+\t */\n+\tpublic String c() {\n+\t\treturn \"|\";\n+\t}\n+\n+\t/**\n+\t * @param charSequence\n+\t *            The editor's input text. The text must contain the {@link #c} special symbol indicating the current cursor position.\n+\t * \n+\t * @param expected\n+\t *            The text that is expected to be selected after double clicking in the Xtext editor on the current cursor position.\n+\t */\n+\tpublic void assertSelectedTextAfterDoubleClicking(CharSequence charSequence, String expected) {\n+\t\tIFile file = createFile(getContent(charSequence));\n+\t\ttry {\n+\t\t\tXtextEditor xtextEditor = openEditor(file);\n+\t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n+\t\t\tassertSelectedText(xtextEditor, expected);\n+\t\t} catch (Exception e) {\n+\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxMzk4Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409313987", "bodyText": "Please propagate the exception as a RuntimeException with the suggested message instead. Otherwise the root cause may get lost.", "author": "szarnekow", "createdAt": "2020-04-16T06:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\nindex 11ac77f7e..d48964ba5 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n\n@@ -56,7 +56,7 @@ public abstract class AbstractEditorDoubleClickTextSelectionTest extends Abstrac\n \t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n \t\t\tassertSelectedText(xtextEditor, expected);\n \t\t} catch (Exception e) {\n-\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());\n+\t\t\tthrow new RuntimeException(\"Error opening editor associated with the file \" + file.getName());\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNTU5Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408225593", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:24:32Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.ITextSelection;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.texteditor.AbstractTextEditor;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.14\n+ */\n+public abstract class AbstractEditorDoubleClickTextSelectionTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the current cursor position.\n+\t */\n+\tpublic String c() {\n+\t\treturn \"|\";\n+\t}\n+\n+\t/**\n+\t * @param charSequence\n+\t *            The editor's input text. The text must contain the {@link #c} special symbol indicating the current cursor position.\n+\t * \n+\t * @param expected\n+\t *            The text that is expected to be selected after double clicking in the Xtext editor on the current cursor position.\n+\t */\n+\tpublic void assertSelectedTextAfterDoubleClicking(CharSequence charSequence, String expected) {\n+\t\tIFile file = createFile(getContent(charSequence));\n+\t\ttry {\n+\t\t\tXtextEditor xtextEditor = openEditor(file);\n+\t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n+\t\t\tassertSelectedText(xtextEditor, expected);\n+\t\t} catch (Exception e) {\n+\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());\n+\t\t}\n+\t}\n+\n+\tprotected void assertSelectedText(AbstractTextEditor textEditor, CharSequence expectedSelectedText) {\n+\t\tISelection selection = textEditor.getSelectionProvider().getSelection();\n+\t\tString actualSelectedText = ((ITextSelection) selection).getText();\n+\t\tassertEquals(expectedSelectedText, actualSelectedText);\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replace(c(), \"\");\n+\t}\n+\n+\tprotected IFile createFile(String content) {\n+\t\ttry {\n+\t\t\treturn IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content);\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\nindex 11ac77f7e..d48964ba5 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n\n@@ -56,7 +56,7 @@ public abstract class AbstractEditorDoubleClickTextSelectionTest extends Abstrac\n \t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n \t\t\tassertSelectedText(xtextEditor, expected);\n \t\t} catch (Exception e) {\n-\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());\n+\t\t\tthrow new RuntimeException(\"Error opening editor associated with the file \" + file.getName());\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNjYxOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408226618", "bodyText": "The TODO was already there. Please suggest if there is a better way to deal with this situation. I'll make the required change.", "author": "nbhusare", "createdAt": "2020-04-14T15:25:54Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tfoldingRegionsArePresent(openInEditor(dslFile(charSequence)), charSequence);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence text) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), getContent(text));\n+\n+\t\t\t/*\n+\t\t\t * TODO: find a better (with good performance) solution", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNTYyMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409315622", "bodyText": "Ok.", "author": "szarnekow", "createdAt": "2020-04-16T06:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 0f2118bb9..d91491f0f 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -8,21 +8,16 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n \n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.jface.text.BadLocationException;\n import org.eclipse.xtext.resource.FileExtensionProvider;\n-import org.eclipse.xtext.ui.XtextProjectHelper;\n import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n-import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Joiner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNzIyNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408227225", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:26:38Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tfoldingRegionsArePresent(openInEditor(dslFile(charSequence)), charSequence);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence text) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), getContent(text));\n+\n+\t\t\t/*\n+\t\t\t * TODO: find a better (with good performance) solution\n+\t\t\t * to set the Xtext nature on the test project.\n+\t\t\t */\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 0f2118bb9..d91491f0f 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -8,21 +8,16 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n \n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.jface.text.BadLocationException;\n import org.eclipse.xtext.resource.FileExtensionProvider;\n-import org.eclipse.xtext.ui.XtextProjectHelper;\n import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n-import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Joiner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNzM1NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408227355", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:26:46Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tfoldingRegionsArePresent(openInEditor(dslFile(charSequence)), charSequence);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence text) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), getContent(text));\n+\n+\t\t\t/*\n+\t\t\t * TODO: find a better (with good performance) solution\n+\t\t\t * to set the Xtext nature on the test project.\n+\t\t\t */\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t}\n+\n+\tprotected IXtextDocument openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIXtextDocument document = openEditor(dslFile).getDocument();\n+\t\t\tassertNotNull(document);\n+\t\t\treturn document;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 0f2118bb9..d91491f0f 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -8,21 +8,16 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n \n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.jface.text.BadLocationException;\n import org.eclipse.xtext.resource.FileExtensionProvider;\n-import org.eclipse.xtext.ui.XtextProjectHelper;\n import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n-import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Joiner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODI1MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408228250", "bodyText": "I believe we should log a message here. @szarnekow what do you think?", "author": "nbhusare", "createdAt": "2020-04-14T15:27:51Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tfoldingRegionsArePresent(openInEditor(dslFile(charSequence)), charSequence);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence text) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), getContent(text));\n+\n+\t\t\t/*\n+\t\t\t * TODO: find a better (with good performance) solution\n+\t\t\t * to set the Xtext nature on the test project.\n+\t\t\t */\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t}\n+\n+\tprotected IXtextDocument openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIXtextDocument document = openEditor(dslFile).getDocument();\n+\t\t\tassertNotNull(document);\n+\t\t\treturn document;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void foldingRegionsArePresent(IXtextDocument document, CharSequence expected) {\n+\t\tassertEquals(expected.toString().trim(), insertFoldingRegionMarkers(document));\n+\t}\n+\n+\tprotected String insertFoldingRegionMarkers(IXtextDocument document) {\n+\t\tString lineSeparator = System.lineSeparator();\n+\t\tList<String> lines = Arrays.asList(document.get().split(lineSeparator));\n+\t\ttry {\n+\t\t\tfor (FoldedPosition foldingRegion : foldingRegionProvider.getFoldingRegions(document)) {\n+\t\t\t\t// Insert the beginning folding region marker at the beginning of the corresponding line\n+\t\t\t\tint startLine = document.getLineOfOffset(foldingRegion.offset);\n+\t\t\t\tlines.set(startLine, b() + lines.get(startLine));\n+\n+\t\t\t\t// Insert the end folding region marker at the end of the corresponding line\n+\t\t\t\tint endLine = document.getLineOfOffset(foldingRegion.offset + foldingRegion.length) - 1;\n+\t\t\t\tlines.set(endLine, lines.get(endLine) + e());\n+\t\t\t}\n+\t\t} catch (BadLocationException e) {\n+\t\t\t//Log an exception here???", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNzI5Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409317293", "bodyText": "The test should fail if the exception is thrown, e.g. throw new RuntimeException(e)", "author": "szarnekow", "createdAt": "2020-04-16T06:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 0f2118bb9..d91491f0f 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -8,21 +8,16 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n \n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.jface.text.BadLocationException;\n import org.eclipse.xtext.resource.FileExtensionProvider;\n-import org.eclipse.xtext.ui.XtextProjectHelper;\n import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n-import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Joiner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODk3NQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408228975", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:28:43Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param it\n+\t *            the initial DSL text.\n+\t * @param hoverRegion\n+\t *            the region you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, IRegion hoverRegion, String hoverContent) {\n+\t\thoverPopupHasContent(hoveringOver(dslFile(charSequence), hoverRegion), hoverContent);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence content) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content.toString());\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxODUzMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409318532", "bodyText": "Duplicated code. Can we extract the common logic to some base class or utitlity?", "author": "szarnekow", "createdAt": "2020-04-16T06:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTI0MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410441240", "bodyText": "PS - https://github.com/eclipse/xtext-eclipse/pull/1402/files#diff-c376f0d7106ef132b9b489fd869fddf1R80", "author": "nbhusare", "createdAt": "2020-04-17T19:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDA0Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408230043", "bodyText": "I am not sure how I could replace the call to #newLineIfNotEmpty(), which is why I have kept this code as it is.", "author": "nbhusare", "createdAt": "2020-04-14T15:30:04Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param it\n+\t *            the initial DSL text.\n+\t * @param hoverRegion\n+\t *            the region you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, IRegion hoverRegion, String hoverContent) {\n+\t\thoverPopupHasContent(hoveringOver(dslFile(charSequence), hoverRegion), hoverContent);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence content) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content.toString());\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"HoverTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"hover\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected XtextEditor openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tsyncUtil.waitForBuild(new NullProgressMonitor());\n+\t\t\treturn openEditor(dslFile);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected BrowserInformationControlInput hoveringOver(IFile dslFile, IRegion hoverRegion) {\n+\t\tXtextEditor editor = openInEditor(dslFile);\n+\t\tObject hoverInfo = ((ITextHoverExtension2) eObjectHover).getHoverInfo2(editor.getInternalSourceViewer(), hoverRegion);\n+\t\treturn (BrowserInformationControlInput) hoverInfo;\n+\t}\n+\n+\tprotected void hoverPopupHasContent(BrowserInformationControlInput info, String expectedHoverContent) {\n+\t\tassertNotNull(\"No hover found!\", info);\n+\n+\t\tString actualHoverContent = info.getHtml();\n+\t\tStringConcatenation builder = new StringConcatenation();", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxOTQzMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409319432", "bodyText": "See suggestion from the other file. String.format(..) should be fine.", "author": "szarnekow", "createdAt": "2020-04-16T06:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDMzOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408230338", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:30:28Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param it\n+\t *            the initial DSL text.\n+\t * @param hoverRegion\n+\t *            the region you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, IRegion hoverRegion, String hoverContent) {\n+\t\thoverPopupHasContent(hoveringOver(dslFile(charSequence), hoverRegion), hoverContent);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence content) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content.toString());\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"HoverTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"hover\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected XtextEditor openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tsyncUtil.waitForBuild(new NullProgressMonitor());\n+\t\t\treturn openEditor(dslFile);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDYwMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408230602", "bodyText": "Throwing a RuntimeException here.", "author": "nbhusare", "createdAt": "2020-04-14T15:30:50Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTA2MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408231061", "bodyText": "I believe we should log a message here. @szarnekow what do you think?", "author": "nbhusare", "createdAt": "2020-04-14T15:31:31Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDgwOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409320808", "bodyText": "throw new RuntimeException", "author": "szarnekow", "createdAt": "2020-04-16T06:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTMxMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r408231313", "bodyText": "I believe we should log a message here, and return a null value. @szarnekow what do you think?", "author": "nbhusare", "createdAt": "2020-04-14T15:31:51Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?\n+\t\t}\n+\t\temptyMessages.add(\"(no markers found)\");\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile(String type, String... attributes) {\n+\t\ttry {\n+\t\t\treturn withMarkers(file.findMarkers(type, true, IResource.DEPTH_INFINITE), attributes);\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception and return null or throw RuntimeException?", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMTI5OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409321299", "bodyText": "throw new RuntimeExceptin", "author": "szarnekow", "createdAt": "2020-04-16T06:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxMzYzMA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409313630", "bodyText": "Return type can be relaxed to List<String>", "author": "szarnekow", "createdAt": "2020-04-16T06:34:28Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.ResourceLoadHelper;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.12\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractContentAssistTest implements ResourceLoadHelper, IJavaProjectProvider {\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprivate Injector injector;\n+\n+\tprivate static IJavaProject javaProject;\n+\n+\t@BeforeClass\n+\t@BeforeAll\n+\tpublic static void setUp() throws CoreException {\n+\t\tjavaProject = JavaProjectSetupUtil.createJavaProject(\"contentAssistTest\");\n+\t}\n+\n+\t@AfterClass\n+\t@AfterAll\n+\tpublic static void tearDown() throws CoreException {\n+\t\tIProject project = AbstractContentAssistTest.javaProject.getProject();\n+\t\tproject.delete(true, new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic XtextResource getResourceFor(InputStream stream) {\n+\t\tXtextResourceSet resourceSet = resourceSetProvider.get();\n+\t\tinitializeTypeProvider(resourceSet);\n+\t\ttry {\n+\t\t\tURI resourceUri = URI.createURI(\"Test.\" + fileExtensionProvider.getPrimaryFileExtension());\n+\t\t\tResource resource = resourceSet.createResource(resourceUri);\n+\t\t\tresource.load(stream, null);\n+\t\t\treturn (XtextResource) resource;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaProject getJavaProject(ResourceSet resourceSet) {\n+\t\treturn javaProject;\n+\t}\n+\n+\tprotected ArrayList<String> expect(String[]... arrays) {", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\nindex 371f01672..ccb44e652 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n\n@@ -12,6 +12,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNDg0Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409314846", "bodyText": "fail(String.format(\"The input text \\n---\\n%s\\n---\\nmust contain the '%s' special symbol ...\", text, c()\"));", "author": "szarnekow", "createdAt": "2020-04-16T06:37:21Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.ITextSelection;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.texteditor.AbstractTextEditor;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.14\n+ */\n+public abstract class AbstractEditorDoubleClickTextSelectionTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the current cursor position.\n+\t */\n+\tpublic String c() {\n+\t\treturn \"|\";\n+\t}\n+\n+\t/**\n+\t * @param charSequence\n+\t *            The editor's input text. The text must contain the {@link #c} special symbol indicating the current cursor position.\n+\t * \n+\t * @param expected\n+\t *            The text that is expected to be selected after double clicking in the Xtext editor on the current cursor position.\n+\t */\n+\tpublic void assertSelectedTextAfterDoubleClicking(CharSequence charSequence, String expected) {\n+\t\tIFile file = createFile(getContent(charSequence));\n+\t\ttry {\n+\t\t\tXtextEditor xtextEditor = openEditor(file);\n+\t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n+\t\t\tassertSelectedText(xtextEditor, expected);\n+\t\t} catch (Exception e) {\n+\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());\n+\t\t}\n+\t}\n+\n+\tprotected void assertSelectedText(AbstractTextEditor textEditor, CharSequence expectedSelectedText) {\n+\t\tISelection selection = textEditor.getSelectionProvider().getSelection();\n+\t\tString actualSelectedText = ((ITextSelection) selection).getText();\n+\t\tassertEquals(expectedSelectedText, actualSelectedText);\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replace(c(), \"\");\n+\t}\n+\n+\tprotected IFile createFile(String content) {\n+\t\ttry {\n+\t\t\treturn IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content);\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"Test\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"Foo\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected int getCursorPosition(CharSequence text) {\n+\t\tint cursorPosition = text.toString().indexOf(c());\n+\t\tif (cursorPosition == -1) {\n+\t\t\tStringConcatenation builder = new StringConcatenation();", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyODY1Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410428656", "bodyText": "Sorry, what does --- mean?", "author": "nbhusare", "createdAt": "2020-04-17T19:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNDg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTMzNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410869334", "bodyText": "I meant this as a delimiter to delimit the model text from the other part of the error message.", "author": "szarnekow", "createdAt": "2020-04-19T10:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNDg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\nindex 11ac77f7e..d48964ba5 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n\n@@ -56,7 +56,7 @@ public abstract class AbstractEditorDoubleClickTextSelectionTest extends Abstrac\n \t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n \t\t\tassertSelectedText(xtextEditor, expected);\n \t\t} catch (Exception e) {\n-\t\t\tfail(\"Error opening editor associated with the file \" + file.getName());\n+\t\t\tthrow new RuntimeException(\"Error opening editor associated with the file \" + file.getName());\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNzAzMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409317031", "bodyText": "This System.lineSeparator can be a source of frustation on windows vs linux. Better use document.getLineDelimiter and if it is null, assume that there is only a single line in the document.\nI think I'd like an overload String insertFoldingRegionMarkers(IXtextDOcument doc, String lineSeparator) { .. } that is used from here with the documents line delimiter as default (if any), and a fallback to document.getLegalLineDelimiters()[0]", "author": "szarnekow", "createdAt": "2020-04-16T06:42:34Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tfoldingRegionsArePresent(openInEditor(dslFile(charSequence)), charSequence);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence text) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), getContent(text));\n+\n+\t\t\t/*\n+\t\t\t * TODO: find a better (with good performance) solution\n+\t\t\t * to set the Xtext nature on the test project.\n+\t\t\t */\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t}\n+\n+\tprotected IXtextDocument openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIXtextDocument document = openEditor(dslFile).getDocument();\n+\t\t\tassertNotNull(document);\n+\t\t\treturn document;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void foldingRegionsArePresent(IXtextDocument document, CharSequence expected) {\n+\t\tassertEquals(expected.toString().trim(), insertFoldingRegionMarkers(document));\n+\t}\n+\n+\tprotected String insertFoldingRegionMarkers(IXtextDocument document) {\n+\t\tString lineSeparator = System.lineSeparator();", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MTQ3OA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410661478", "bodyText": "Added a new method insertFoldingRegionMarkers(IXtextDOcument doc, String lineSeparator). Also checking if the document is empty before calling document.getLineDelimiter(0). Please check.", "author": "nbhusare", "createdAt": "2020-04-18T07:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxNzAzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 0f2118bb9..d91491f0f 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -8,21 +8,16 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Pattern;\n \n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.jface.text.BadLocationException;\n import org.eclipse.xtext.resource.FileExtensionProvider;\n-import org.eclipse.xtext.ui.XtextProjectHelper;\n import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n-import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Joiner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxODM4NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409318384", "bodyText": "There is no it", "author": "szarnekow", "createdAt": "2020-04-16T06:45:48Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param it", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxODc2Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409318762", "bodyText": "Not related to this PR, but SyncUtil is a little nasty.", "author": "szarnekow", "createdAt": "2020-04-16T06:46:45Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjAzMA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410442030", "bodyText": "Removed.", "author": "nbhusare", "createdAt": "2020-04-17T20:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxODc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxOTE0Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409319143", "bodyText": "Use org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil.waitForBuild() instead.", "author": "szarnekow", "createdAt": "2020-04-16T06:47:41Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.XtextProjectHelper;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.refactoring.ui.SyncUtil;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected SyncUtil syncUtil;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param it\n+\t *            the initial DSL text.\n+\t * @param hoverRegion\n+\t *            the region you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, IRegion hoverRegion, String hoverContent) {\n+\t\thoverPopupHasContent(hoveringOver(dslFile(charSequence), hoverRegion), hoverContent);\n+\t}\n+\n+\tprotected IFile dslFile(CharSequence content) {\n+\t\ttry {\n+\t\t\tIFile file = IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content.toString());\n+\t\t\tIProject project = file.getProject();\n+\t\t\tif (!project.hasNature(XtextProjectHelper.NATURE_ID)) {\n+\t\t\t\tIResourcesSetupUtil.addNature(project, XtextProjectHelper.NATURE_ID);\n+\t\t\t}\n+\t\t\treturn file;\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"HoverTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"hover\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected XtextEditor openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tsyncUtil.waitForBuild(new NullProgressMonitor());", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 7bb32a043..b5e4c7df9 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -8,11 +8,7 @@\n  */\n package org.eclipse.xtext.ui.testing;\n \n-import java.lang.reflect.InvocationTargetException;\n-\n import org.eclipse.core.resources.IFile;\n-import org.eclipse.core.resources.IProject;\n-import org.eclipse.core.runtime.CoreException;\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n import org.eclipse.jface.text.IRegion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDAzNw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409320037", "bodyText": "Unnecessary type argument, use diamond op instead.", "author": "szarnekow", "createdAt": "2020-04-16T06:49:40Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDYyNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409320624", "bodyText": "Either String.join(\", \", transformed) or write the text into a StringBuilder directly rather than creating a list of strings to concat that subsequently.", "author": "szarnekow", "createdAt": "2020-04-16T06:51:04Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQzMTg3Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410431872", "bodyText": "Tx for your suggestion. I'll use String.join(\", \", transformed). It is a better alternative to the tedious transformed.stream().collect(Collectors.joining(\", \")).", "author": "nbhusare", "createdAt": "2020-04-17T19:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMTY4NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409321684", "bodyText": "Cosmetics: Comparator.comparing(SimpleEntry::getKey)", "author": "szarnekow", "createdAt": "2020-04-16T06:53:24Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?\n+\t\t}\n+\t\temptyMessages.add(\"(no markers found)\");\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile(String type, String... attributes) {\n+\t\ttry {\n+\t\t\treturn withMarkers(file.findMarkers(type, true, IResource.DEPTH_INFINITE), attributes);\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception and return null or throw RuntimeException?\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile() {\n+\t\treturn withMarkersFromFile(MarkerTypes.FAST_VALIDATION, IMarker.MESSAGE);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tString contents = getContents();\n+\t\tregions.sort(Comparator.comparing((region) -> Integer.valueOf(region.start)));\n+\n+\t\tList<SimpleEntry<Integer, CommentedRegion>> sorted = new ArrayList<>();\n+\t\tfor (int index = 0; index < regions.size(); index++) {\n+\t\t\tsorted.add(new SimpleEntry<Integer, CommentedRegion>(index, regions.get(index)));\n+\t\t}\n+\n+\t\tList<SimpleEntry<Integer, String>> locations = new ArrayList<>();\n+\t\tsorted.stream().forEach(s -> {\n+\t\t\tlocations.add(new SimpleEntry<Integer, String>(s.getValue().start, \"<\" + s.getKey() + \"<\"));\n+\t\t\tlocations.add(new SimpleEntry<Integer, String>(s.getValue().end, \">\" + s.getKey() + \">\"));\n+\t\t});\n+\t\tlocations.sort(Comparator.comparing((location) -> location.getKey()));", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMTg0MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409321841", "bodyText": "Unnecessary type arguments, new SimpleEntry<>(..) should be sufficient.", "author": "szarnekow", "createdAt": "2020-04-16T06:53:44Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?\n+\t\t}\n+\t\temptyMessages.add(\"(no markers found)\");\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile(String type, String... attributes) {\n+\t\ttry {\n+\t\t\treturn withMarkers(file.findMarkers(type, true, IResource.DEPTH_INFINITE), attributes);\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception and return null or throw RuntimeException?\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile() {\n+\t\treturn withMarkersFromFile(MarkerTypes.FAST_VALIDATION, IMarker.MESSAGE);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tString contents = getContents();\n+\t\tregions.sort(Comparator.comparing((region) -> Integer.valueOf(region.start)));\n+\n+\t\tList<SimpleEntry<Integer, CommentedRegion>> sorted = new ArrayList<>();\n+\t\tfor (int index = 0; index < regions.size(); index++) {\n+\t\t\tsorted.add(new SimpleEntry<Integer, CommentedRegion>(index, regions.get(index)));\n+\t\t}\n+\n+\t\tList<SimpleEntry<Integer, String>> locations = new ArrayList<>();\n+\t\tsorted.stream().forEach(s -> {\n+\t\t\tlocations.add(new SimpleEntry<Integer, String>(s.getValue().start, \"<\" + s.getKey() + \"<\"));", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMjIzNA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409322234", "bodyText": "Comparator.comparingInt(region->region.start)", "author": "szarnekow", "createdAt": "2020-04-16T06:54:40Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?\n+\t\t}\n+\t\temptyMessages.add(\"(no markers found)\");\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile(String type, String... attributes) {\n+\t\ttry {\n+\t\t\treturn withMarkers(file.findMarkers(type, true, IResource.DEPTH_INFINITE), attributes);\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception and return null or throw RuntimeException?\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile() {\n+\t\treturn withMarkersFromFile(MarkerTypes.FAST_VALIDATION, IMarker.MESSAGE);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tString contents = getContents();\n+\t\tregions.sort(Comparator.comparing((region) -> Integer.valueOf(region.start)));", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyODM5MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409328391", "bodyText": "Typo: length", "author": "szarnekow", "createdAt": "2020-04-16T07:08:10Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {\n+\t\t\t\treturn contents;\n+\t\t\t}\n+\n+\t\t\tif (file != null) {\n+\t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n+\t\t\t}\n+\n+\t\t\treturn null;\n+\t\t} catch (CoreException | IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tpublic void setContents(String contents) {\n+\t\tthis.contents = contents;\n+\t}\n+\n+\tpublic IFile getFile() {\n+\t\treturn file;\n+\t}\n+\n+\tpublic void setFile(IFile file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\tpublic List<CommentedRegion> getRegions() {\n+\t\treturn regions;\n+\t}\n+\n+\tpublic List<String> getEmptyMessage() {\n+\t\treturn emptyMessages;\n+\t}\n+\n+\tpublic AnnotatedTextToString withFile(IFile file) {\n+\t\tthis.file = file;\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers) {\n+\t\treturn withMarkers(markers, IMarker.MESSAGE);\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkers(IMarker[] markers, String... attributes) {\n+\t\ttry {\n+\t\t\tfor (IMarker marker : markers) {\n+\t\t\t\tList<String> transformed = new ArrayList<String>(attributes.length);\n+\t\t\t\tfor (String attribute : attributes) {\n+\t\t\t\t\ttransformed.add(attribute + \"=\" + marker.getAttribute(attribute));\n+\t\t\t\t}\n+\n+\t\t\t\tString comment = transformed.stream().collect(Collectors.joining(\", \"));\n+\t\t\t\tInteger offset = (Integer) marker.getAttribute(IMarker.CHAR_START);\n+\t\t\t\tInteger length = (Integer) marker.getAttribute(IMarker.CHAR_END);\n+\t\t\t\tregions.add(new CommentedRegion(offset, length, comment));\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception?\n+\t\t}\n+\t\temptyMessages.add(\"(no markers found)\");\n+\t\treturn this;\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile(String type, String... attributes) {\n+\t\ttry {\n+\t\t\treturn withMarkers(file.findMarkers(type, true, IResource.DEPTH_INFINITE), attributes);\n+\t\t} catch (CoreException e) {\n+\t\t\t// Log the exception and return null or throw RuntimeException?\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic AnnotatedTextToString withMarkersFromFile() {\n+\t\treturn withMarkersFromFile(MarkerTypes.FAST_VALIDATION, IMarker.MESSAGE);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tString contents = getContents();\n+\t\tregions.sort(Comparator.comparing((region) -> Integer.valueOf(region.start)));\n+\n+\t\tList<SimpleEntry<Integer, CommentedRegion>> sorted = new ArrayList<>();\n+\t\tfor (int index = 0; index < regions.size(); index++) {\n+\t\t\tsorted.add(new SimpleEntry<Integer, CommentedRegion>(index, regions.get(index)));\n+\t\t}\n+\n+\t\tList<SimpleEntry<Integer, String>> locations = new ArrayList<>();\n+\t\tsorted.stream().forEach(s -> {\n+\t\t\tlocations.add(new SimpleEntry<Integer, String>(s.getValue().start, \"<\" + s.getKey() + \"<\"));\n+\t\t\tlocations.add(new SimpleEntry<Integer, String>(s.getValue().end, \">\" + s.getKey() + \">\"));\n+\t\t});\n+\t\tlocations.sort(Comparator.comparing((location) -> location.getKey()));\n+\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tint lastOffset = 0;\n+\t\tfor (int i = 0; i < locations.size(); i++) {\n+\t\t\tSimpleEntry<Integer, String> location = locations.get(i);\n+\t\t\tInteger offset = location.getKey();\n+\t\t\tString comment = location.getValue();\n+\t\t\tresult.append(contents.substring(lastOffset, offset));\n+\t\t\tresult.append(comment);\n+\t\t\tlastOffset = offset;\n+\t\t}\n+\n+\t\tresult.append(contents.substring(lastOffset, contents.length()));\n+\t\tString[] resultsArray = result.toString().replace(\"\\t\", \"    \").split(\"\\r?\\n\");\n+\t\tint maxLineLenght = Arrays.stream(resultsArray).map(r -> r.length()).reduce(Integer::max).get();", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4MjE1MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409382150", "bodyText": "Use List on the left hand side", "author": "tivervac", "createdAt": "2020-04-16T08:39:10Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.ResourceLoadHelper;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.12\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractContentAssistTest implements ResourceLoadHelper, IJavaProjectProvider {\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprivate Injector injector;\n+\n+\tprivate static IJavaProject javaProject;\n+\n+\t@BeforeClass\n+\t@BeforeAll\n+\tpublic static void setUp() throws CoreException {\n+\t\tjavaProject = JavaProjectSetupUtil.createJavaProject(\"contentAssistTest\");\n+\t}\n+\n+\t@AfterClass\n+\t@AfterAll\n+\tpublic static void tearDown() throws CoreException {\n+\t\tIProject project = AbstractContentAssistTest.javaProject.getProject();\n+\t\tproject.delete(true, new NullProgressMonitor());\n+\t}\n+\n+\t@Override\n+\tpublic XtextResource getResourceFor(InputStream stream) {\n+\t\tXtextResourceSet resourceSet = resourceSetProvider.get();\n+\t\tinitializeTypeProvider(resourceSet);\n+\t\ttry {\n+\t\t\tURI resourceUri = URI.createURI(\"Test.\" + fileExtensionProvider.getPrimaryFileExtension());\n+\t\t\tResource resource = resourceSet.createResource(resourceUri);\n+\t\t\tresource.load(stream, null);\n+\t\t\treturn (XtextResource) resource;\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IJavaProject getJavaProject(ResourceSet resourceSet) {\n+\t\treturn javaProject;\n+\t}\n+\n+\tprotected ArrayList<String> expect(String[]... arrays) {\n+\t\tArrayList<String> expectation = new ArrayList<>();", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\nindex 371f01672..ccb44e652 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractContentAssistTest.java\n\n@@ -12,6 +12,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n import org.eclipse.core.resources.IProject;\n import org.eclipse.core.runtime.CoreException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NDczNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r409384736", "bodyText": "You can move this outside of the the try", "author": "tivervac", "createdAt": "2020-04-16T08:43:23Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing.util;\n+\n+import java.io.IOException;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.xtext.ui.MarkerTypes;\n+\n+import com.google.common.base.Strings;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class AnnotatedTextToString {\n+\n+\tprotected static class CommentedRegion {\n+\n+\t\tprivate final int start;\n+\n+\t\tprivate final int end;\n+\n+\t\tprivate final String text;\n+\n+\t\tpublic CommentedRegion(int start, int end, String text) {\n+\t\t\tthis.start = start;\n+\t\t\tthis.end = end;\n+\t\t\tthis.text = text;\n+\t\t}\n+\t}\n+\n+\tprivate String contents;\n+\n+\tprivate IFile file;\n+\n+\tprivate List<CommentedRegion> regions = new ArrayList<>();\n+\n+\tprivate List<String> emptyMessages = new ArrayList<>();\n+\n+\tpublic String getContents() {\n+\t\ttry {\n+\t\t\tif (contents != null) {", "originalCommit": "029e22fac107ce60942a74d50468e08b88756d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89459af0cc386737b8408c5df7afdebba45d4934", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\nindex e9a485aac..d4e6decfc 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/util/AnnotatedTextToString.java\n\n@@ -53,15 +53,13 @@ public class AnnotatedTextToString {\n \tprivate List<String> emptyMessages = new ArrayList<>();\n \n \tpublic String getContents() {\n+\t\tif (contents != null) {\n+\t\t\treturn contents;\n+\t\t}\n \t\ttry {\n-\t\t\tif (contents != null) {\n-\t\t\t\treturn contents;\n-\t\t\t}\n-\n \t\t\tif (file != null) {\n \t\t\t\treturn IResourcesSetupUtil.fileToString(file);\n \t\t\t}\n-\n \t\t\treturn null;\n \t\t} catch (CoreException | IOException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"oid": "89459af0cc386737b8408c5df7afdebba45d4934", "url": "https://github.com/eclipse/xtext-eclipse/commit/89459af0cc386737b8408c5df7afdebba45d4934", "message": "Migrating the Xtend code from org.eclipse.xtext.ui.testing project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-04-17T19:57:28Z", "type": "forcePushed"}, {"oid": "bc95010dec392f8bfb6b0b9ad4202f0caa92fb6a", "url": "https://github.com/eclipse/xtext-eclipse/commit/bc95010dec392f8bfb6b0b9ad4202f0caa92fb6a", "message": "Migrating the Xtend code from org.eclipse.xtext.ui.testing project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-04-18T07:16:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTc1MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410869751", "bodyText": "getLineDelimiter is document to return null if the line does not have a delimiter. I'd rather fix this here than in the overload below.", "author": "szarnekow", "createdAt": "2020-04-19T10:12:16Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tIFile file = dslFile(getProjectName(), getFileName(), getFileExtension(), charSequence);\n+\t\tfoldingRegionsArePresent(openInEditor(file), charSequence);\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t}\n+\n+\tprotected IXtextDocument openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIXtextDocument document = openEditor(dslFile).getDocument();\n+\t\t\tassertNotNull(document);\n+\t\t\treturn document;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void foldingRegionsArePresent(IXtextDocument document, CharSequence expected) {\n+\t\tassertEquals(expected.toString().trim(), insertFoldingRegionMarkers(document));\n+\t}\n+\n+\tprotected String insertFoldingRegionMarkers(IXtextDocument document) {\n+\t\tif (document.getLength() == 0) { // The document is empty\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tString lineSeparator = document.getLineDelimiter(0);", "originalCommit": "bc95010dec392f8bfb6b0b9ad4202f0caa92fb6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 6b3b95c8f..d9019ba71 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -98,6 +98,9 @@ public abstract class AbstractFoldingTest extends AbstractEditorTest {\n \n \t\ttry {\n \t\t\tString lineSeparator = document.getLineDelimiter(0);\n+\t\t\tif (lineSeparator == null) { // The document contains a single line\n+\t\t\t\tlineSeparator = document.getLegalLineDelimiters()[0];\n+\t\t\t}\n \t\t\treturn insertFoldingRegionMarkers(document, lineSeparator);\n \t\t} catch (BadLocationException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTc5NA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r410869794", "bodyText": "This method should assume that lineSeparator is not null.", "author": "szarnekow", "createdAt": "2020-04-19T10:12:31Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tIFile file = dslFile(getProjectName(), getFileName(), getFileExtension(), charSequence);\n+\t\tfoldingRegionsArePresent(openInEditor(file), charSequence);\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t}\n+\n+\tprotected IXtextDocument openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIXtextDocument document = openEditor(dslFile).getDocument();\n+\t\t\tassertNotNull(document);\n+\t\t\treturn document;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void foldingRegionsArePresent(IXtextDocument document, CharSequence expected) {\n+\t\tassertEquals(expected.toString().trim(), insertFoldingRegionMarkers(document));\n+\t}\n+\n+\tprotected String insertFoldingRegionMarkers(IXtextDocument document) {\n+\t\tif (document.getLength() == 0) { // The document is empty\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tString lineSeparator = document.getLineDelimiter(0);\n+\t\t\treturn insertFoldingRegionMarkers(document, lineSeparator);\n+\t\t} catch (BadLocationException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String insertFoldingRegionMarkers(IXtextDocument document, String lineSeparator) {\n+\t\tif (lineSeparator == null) { // The document contains a single line", "originalCommit": "bc95010dec392f8bfb6b0b9ad4202f0caa92fb6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex 6b3b95c8f..d9019ba71 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -98,6 +98,9 @@ public abstract class AbstractFoldingTest extends AbstractEditorTest {\n \n \t\ttry {\n \t\t\tString lineSeparator = document.getLineDelimiter(0);\n+\t\t\tif (lineSeparator == null) { // The document contains a single line\n+\t\t\t\tlineSeparator = document.getLegalLineDelimiters()[0];\n+\t\t\t}\n \t\t\treturn insertFoldingRegionMarkers(document, lineSeparator);\n \t\t} catch (BadLocationException e) {\n \t\t\tthrow new RuntimeException(e);\n"}}, {"oid": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "url": "https://github.com/eclipse/xtext-eclipse/commit/eb69e4f47a61c536b8af4925a3c596abdf3576c0", "message": "Migrating the Xtend code from org.eclipse.xtext.ui.testing project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-04-20T06:41:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1MTQ3OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r411251479", "bodyText": "Space after newline will be irritating. -> \\n%s\\n would be prefered", "author": "szarnekow", "createdAt": "2020-04-20T10:01:02Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.text.ITextSelection;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.texteditor.AbstractTextEditor;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.14\n+ */\n+public abstract class AbstractEditorDoubleClickTextSelectionTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the current cursor position.\n+\t */\n+\tpublic String c() {\n+\t\treturn \"|\";\n+\t}\n+\n+\t/**\n+\t * @param charSequence\n+\t *            The editor's input text. The text must contain the {@link #c} special symbol indicating the current cursor position.\n+\t * \n+\t * @param expected\n+\t *            The text that is expected to be selected after double clicking in the Xtext editor on the current cursor position.\n+\t */\n+\tpublic void assertSelectedTextAfterDoubleClicking(CharSequence charSequence, String expected) {\n+\t\tIFile file = createFile(getContent(charSequence));\n+\t\ttry {\n+\t\t\tXtextEditor xtextEditor = openEditor(file);\n+\t\t\txtextEditor = doubleClick(xtextEditor, getCursorPosition(charSequence));\n+\t\t\tassertSelectedText(xtextEditor, expected);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(\"Error opening editor associated with the file \" + file.getName());\n+\t\t}\n+\t}\n+\n+\tprotected void assertSelectedText(AbstractTextEditor textEditor, CharSequence expectedSelectedText) {\n+\t\tISelection selection = textEditor.getSelectionProvider().getSelection();\n+\t\tString actualSelectedText = ((ITextSelection) selection).getText();\n+\t\tassertEquals(expectedSelectedText, actualSelectedText);\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replace(c(), \"\");\n+\t}\n+\n+\tprotected IFile createFile(String content) {\n+\t\ttry {\n+\t\t\treturn IResourcesSetupUtil.createFile(getProjectName(), getFileName(), getFileExtension(), content);\n+\t\t} catch (InvocationTargetException | CoreException | InterruptedException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"Test\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"Foo\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected int getCursorPosition(CharSequence text) {\n+\t\tint cursorPosition = text.toString().indexOf(c());\n+\t\tif (cursorPosition == -1) {\n+\t\t\tString message = \"The input text\\n %s \\nmust contain the '%s' special symbol indicating the current cursor position!\\n\";", "originalCommit": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a08ec68273c90e3f918e81f6d14101690c713fd", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\nindex 8e5fa73d3..e1376ad27 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractEditorDoubleClickTextSelectionTest.java\n\n@@ -92,7 +92,7 @@ public abstract class AbstractEditorDoubleClickTextSelectionTest extends Abstrac\n \tprotected int getCursorPosition(CharSequence text) {\n \t\tint cursorPosition = text.toString().indexOf(c());\n \t\tif (cursorPosition == -1) {\n-\t\t\tString message = \"The input text\\n %s \\nmust contain the '%s' special symbol indicating the current cursor position!\\n\";\n+\t\t\tString message = \"The input text\\n%s\\nmust contain the '%s' special symbol indicating the current cursor position!\\n\";\n \t\t\tfail(String.format(message, text, c()));\n \t\t}\n \t\treturn cursorPosition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1MjEyNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r411252126", "bodyText": "\\n \\t -> please use \\n%s\\n instead", "author": "szarnekow", "createdAt": "2020-04-20T10:02:05Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.internal.text.html.BrowserInformationControlInput;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITextHoverExtension2;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+import org.eclipse.xtext.ui.editor.hover.IEObjectHover;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * \n+ * @since 2.16\n+ */\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractHoverTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected IEObjectHover eObjectHover;\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific text in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverText\n+\t *            the text you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, String hoverText, String hoverContent) {\n+\t\tRegion region = new Region(charSequence.toString().indexOf(hoverText), hoverText.length());\n+\t\thasHoverOver(charSequence, region, hoverContent);\n+\t}\n+\n+\t/**\n+\t * Test that the expected text appears in a popup window while hovering over a specific region in a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            the initial DSL text.\n+\t * @param hoverRegion\n+\t *            the region you are hovering over.\n+\t * @param hoverContent\n+\t *            the text that is expected to be part of the hover popup.\n+\t */\n+\tpublic void hasHoverOver(CharSequence charSequence, IRegion hoverRegion, String hoverContent) {\n+\t\tIFile file = dslFile(getProjectName(), getFileName(), getFileExtension(), charSequence);\n+\t\thoverPopupHasContent(hoveringOver(file, hoverRegion), hoverContent);\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"HoverTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"hover\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected XtextEditor openInEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tIResourcesSetupUtil.waitForBuild(new NullProgressMonitor());\n+\t\t\treturn openEditor(dslFile);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected BrowserInformationControlInput hoveringOver(IFile dslFile, IRegion hoverRegion) {\n+\t\tXtextEditor editor = openInEditor(dslFile);\n+\t\tObject hoverInfo = ((ITextHoverExtension2) eObjectHover).getHoverInfo2(editor.getInternalSourceViewer(), hoverRegion);\n+\t\treturn (BrowserInformationControlInput) hoverInfo;\n+\t}\n+\n+\tprotected void hoverPopupHasContent(BrowserInformationControlInput info, String expectedHoverContent) {\n+\t\tassertNotNull(\"No hover found!\", info);\n+\n+\t\tString actualHoverContent = info.getHtml();\n+\t\tString message = \"Could not find the text '%s' in the hover popup:\\n \\t%s\\n\";", "originalCommit": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a08ec68273c90e3f918e81f6d14101690c713fd", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\nindex 297fe28b0..1fb3e93af 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractHoverTest.java\n\n@@ -96,7 +96,7 @@ public abstract class AbstractHoverTest extends AbstractEditorTest {\n \t\tassertNotNull(\"No hover found!\", info);\n \n \t\tString actualHoverContent = info.getHtml();\n-\t\tString message = \"Could not find the text '%s' in the hover popup:\\n \\t%s\\n\";\n+\t\tString message = \"Could not find the text '%s' in the hover popup:\\n%s\\n\";\n \t\tassertTrue(String.format(message, expectedHoverContent, actualHoverContent), actualHoverContent.contains(expectedHoverContent));\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1MjY5OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1402#discussion_r411252699", "bodyText": "Can be simplified to text.replace(b(), \"\").replace(e(), \"\")", "author": "szarnekow", "createdAt": "2020-04-20T10:03:02Z", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Copyright (c) 2019, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.folding.FoldedPosition;\n+import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.common.base.Joiner;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.19\n+ */\n+@Beta\n+public abstract class AbstractFoldingTest extends AbstractEditorTest {\n+\n+\t@Inject\n+\tprotected FileExtensionProvider fileExtensionProvider;\n+\n+\t@Inject\n+\tprotected IFoldingRegionProvider foldingRegionProvider;\n+\n+\t/**\n+\t * @return the special symbol indicating the beginning of a folding region.\n+\t */\n+\tpublic String b() {\n+\t\treturn \"[>\";\n+\t}\n+\n+\t/**\n+\t * @return the special symbol indicating the end of a folding region.\n+\t */\n+\tpublic String e() {\n+\t\treturn \"<]\";\n+\t}\n+\n+\t/**\n+\t * Test that the expected folding regions are present on a given DSL text.\n+\t * \n+\t * @param charSequence\n+\t *            The DSL text where the expected folding regions are enclosed by the {@link #b() b} and {@link #e() e} symbols.\n+\t */\n+\tpublic void testFoldingRegions(CharSequence charSequence) {\n+\t\tIFile file = dslFile(getProjectName(), getFileName(), getFileExtension(), charSequence);\n+\t\tfoldingRegionsArePresent(openInEditor(file), charSequence);\n+\t}\n+\n+\tprotected String getProjectName() {\n+\t\treturn \"FoldingTestProject\";\n+\t}\n+\n+\tprotected String getFileName() {\n+\t\treturn \"folding\";\n+\t}\n+\n+\tprotected String getFileExtension() {\n+\t\treturn fileExtensionProvider.getPrimaryFileExtension();\n+\t}\n+\n+\tprotected String getContent(CharSequence text) {\n+\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");", "originalCommit": "eb69e4f47a61c536b8af4925a3c596abdf3576c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a08ec68273c90e3f918e81f6d14101690c713fd", "chunk": "diff --git a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\nindex d9019ba71..71359bb50 100644\n--- a/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n+++ b/org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractFoldingTest.java\n\n@@ -74,7 +74,7 @@ public abstract class AbstractFoldingTest extends AbstractEditorTest {\n \t}\n \n \tprotected String getContent(CharSequence text) {\n-\t\treturn text.toString().replaceAll(Pattern.quote(b()), \"\").replaceAll(Pattern.quote(e()), \"\");\n+\t\treturn text.toString().replace(b(), \"\").replace(e(), \"\");\n \t}\n \n \tprotected IXtextDocument openInEditor(IFile dslFile) {\n"}}, {"oid": "2a08ec68273c90e3f918e81f6d14101690c713fd", "url": "https://github.com/eclipse/xtext-eclipse/commit/2a08ec68273c90e3f918e81f6d14101690c713fd", "message": "Migrating the Xtend code from org.eclipse.xtext.ui.testing project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-04-20T10:44:59Z", "type": "commit"}, {"oid": "2a08ec68273c90e3f918e81f6d14101690c713fd", "url": "https://github.com/eclipse/xtext-eclipse/commit/2a08ec68273c90e3f918e81f6d14101690c713fd", "message": "Migrating the Xtend code from org.eclipse.xtext.ui.testing project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-04-20T10:44:59Z", "type": "forcePushed"}]}