{"pr_number": 3136, "pr_title": "[ISSUE #2856]Adjust the use of thread pools (naming module)", "pr_createdAt": "2020-06-21T05:46:46Z", "pr_url": "https://github.com/alibaba/nacos/pull/3136", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443212527", "bodyText": "Would chain calls be better?\nfor example\nNamingExecutor.mysqlCheckExecutor().xxx", "author": "chuntaojun", "createdAt": "2020-06-21T12:00:27Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/misc/NamingExecutor.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.naming.misc;\n+\n+import com.alibaba.nacos.common.executor.ExecutorFactory;\n+import com.alibaba.nacos.common.executor.NameThreadFactory;\n+import com.alibaba.nacos.core.utils.ClassUtils;\n+import com.alibaba.nacos.naming.NamingApp;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Global executor for naming\n+ *\n+ * <p>The classes provide the calling method of the thread pool, shielding the visibility of the thread pool itself, so\n+ * that the outside can not operate its life cycle.\n+ *\n+ * @author gagharv\n+ */\n+@SuppressWarnings({\"checkstyle:indentation\", \"PMD.ThreadPoolCreationRule\"})\n+public class NamingExecutor {", "originalCommit": "d15382c60cdf05c2c8f1eaaed35eb82c4cc8e9fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzk2Nw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443217967", "bodyText": "This will cause the thread pool to be exposed to the outside but the user can call shutdown by himself.", "author": "wangweizZZ", "createdAt": "2020-06-21T13:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzODkzMw==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r443238933", "bodyText": "maybe this idea should implemented wrapped for ThreadPoolExecutor", "author": "chuntaojun", "createdAt": "2020-06-21T17:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "5b592013a7562a9b041fb74ed905afe9331b4c67", "chunk": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/misc/NamingExecutor.java b/naming/src/main/java/com/alibaba/nacos/naming/misc/NamingExecutor.java\ndeleted file mode 100644\nindex db43e7f17..000000000\n--- a/naming/src/main/java/com/alibaba/nacos/naming/misc/NamingExecutor.java\n+++ /dev/null\n\n@@ -1,234 +0,0 @@\n-/*\n- * Copyright 1999-2018 Alibaba Group Holding Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.alibaba.nacos.naming.misc;\n-\n-import com.alibaba.nacos.common.executor.ExecutorFactory;\n-import com.alibaba.nacos.common.executor.NameThreadFactory;\n-import com.alibaba.nacos.core.utils.ClassUtils;\n-import com.alibaba.nacos.naming.NamingApp;\n-import com.google.common.collect.ImmutableMap;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-\n-/**\n- * Global executor for naming\n- *\n- * <p>The classes provide the calling method of the thread pool, shielding the visibility of the thread pool itself, so\n- * that the outside can not operate its life cycle.\n- *\n- * @author gagharv\n- */\n-@SuppressWarnings({\"checkstyle:indentation\", \"PMD.ThreadPoolCreationRule\"})\n-public class NamingExecutor {\n-    \n-    private static ImmutableMap<String, ? extends ExecutorService> executorServiceMap;\n-    \n-    static {\n-        final ImmutableMap.Builder<String, ExecutorService> executorServiceMapBuilder = ImmutableMap.builder();\n-        \n-        final GlobalExecutorService[] globalExecutorServices = GlobalExecutorService.values();\n-        for (GlobalExecutorService globalExecutorService : globalExecutorServices) {\n-            executorServiceMapBuilder.put(globalExecutorService.name, globalExecutorService.getExecutor());\n-        }\n-        \n-        executorServiceMap = executorServiceMapBuilder.build();\n-    }\n-    \n-    /**\n-     * Execute global executor execute function {@link Executor#execute(Runnable)}}.\n-     *\n-     * @param executorService executorService name\n-     * @param runnable        the task to execute\n-     * @throws NullPointerException if executorService do not exist\n-     */\n-    public static void execute(String executorService, Runnable runnable) {\n-        getExecutorService(executorService).execute(runnable);\n-    }\n-    \n-    /**\n-     * Execute global executor submit function  {@link ExecutorService#submit(Runnable)}}.\n-     *\n-     * @param executorService executorService name\n-     * @param runnable        the task to execute\n-     * @return a Future representing pending completion of the task\n-     * @throws NullPointerException if executorService do not exist\n-     */\n-    public static Future<?> submit(String executorService, Runnable runnable) {\n-        return getExecutorService(executorService).submit(runnable);\n-    }\n-    \n-    /**\n-     * Execute global executor invokeAll function  {@link ExecutorService#submit(Runnable)}}.\n-     *\n-     * @param executorService executorService name\n-     * @param tasks           the collection of tasks\n-     * @param <T>             the type of the values returned from the tasks\n-     * @return a list of Futures representing the tasks, in the same sequential order as produced by the iterator for\n-     * the given task list, each of which has completed\n-     * @throws NullPointerException if executorService do not exist\n-     * @throws InterruptedException if interrupted while waiting, in which case unfinished tasks are cancelled\n-     */\n-    public static <T> List<Future<T>> invokeAll(String executorService, Collection<? extends Callable<T>> tasks)\n-            throws InterruptedException {\n-        return getExecutorService(executorService).invokeAll(tasks);\n-    }\n-    \n-    /**\n-     * Execute global executor schedule function  {@link ScheduledExecutorService#schedule(Callable, long, TimeUnit)}.\n-     *\n-     * @param executorService executorService name\n-     * @param runnable        the task to execute\n-     * @param delay           the time from now to delay execution\n-     * @param unit            the time unit of the delay parameter\n-     * @return a ScheduledFuture representing pending completion of the task and whose {@code get()} method will return\n-     * {@code null} upon completion\n-     * @throws NullPointerException if executorService do not exist\n-     */\n-    public static ScheduledFuture<?> schedule(String executorService, Runnable runnable, long delay, TimeUnit unit) {\n-        return getScheduledExecutorService(executorService).schedule(runnable, delay, unit);\n-    }\n-    \n-    public static ScheduledFuture<?> schedule(String executorService, Runnable runnable, long delay) {\n-        return schedule(executorService, runnable, delay, TimeUnit.MILLISECONDS);\n-    }\n-    \n-    /**\n-     * Execute global executor scheduleWithFixedDelay function  {@link ScheduledExecutorService#scheduleWithFixedDelay(Runnable,\n-     * long, long, TimeUnit)}.\n-     *\n-     * @param executorService executorService name\n-     * @param runnable        the task to execute\n-     * @param initialDelay    the time to delay first execution\n-     * @param delay           the delay between the termination of one execution and the commencement of the next\n-     * @param unit            the time unit of the initialDelay and delay parameters\n-     * @return a ScheduledFuture representing pending completion of the task, and whose {@code get()} method will throw\n-     * an exception upon cancellation\n-     * @throws NullPointerException if executorService do not exist\n-     */\n-    public static ScheduledFuture<?> scheduleWithFixedDelay(String executorService, Runnable runnable,\n-            long initialDelay, long delay, TimeUnit unit) {\n-        return getScheduledExecutorService(executorService).scheduleWithFixedDelay(runnable, initialDelay, delay, unit);\n-    }\n-    \n-    public static ScheduledFuture<?> scheduleWithFixedDelay(String executorService, Runnable runnable,\n-            long initialDelay, long delay) {\n-        return scheduleWithFixedDelay(executorService, runnable, initialDelay, delay, TimeUnit.MILLISECONDS);\n-    }\n-    \n-    /**\n-     * Execute global executor scheduleAtFixedRate function  {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable,\n-     * long, long, TimeUnit)}.\n-     *\n-     * @param executorService executorService name\n-     * @param runnable        the task to execute\n-     * @param initialDelay    the time to delay first execution\n-     * @param period          the period between successive executions\n-     * @param unit            the time unit of the initialDelay and period parameters\n-     * @return a ScheduledFuture representing pending completion of the task, and whose {@code get()} method will throw\n-     * an exception upon cancellation\n-     * @throws NullPointerException if executorService do not exist\n-     */\n-    public static ScheduledFuture<?> scheduleAtFixedRate(String executorService, Runnable runnable, long initialDelay,\n-            long period, TimeUnit unit) {\n-        return getScheduledExecutorService(executorService).scheduleAtFixedRate(runnable, initialDelay, period, unit);\n-    }\n-    \n-    public static ScheduledFuture<?> scheduleAtFixedRate(String executorService, Runnable runnable, long initialDelay,\n-            long period) {\n-        return scheduleAtFixedRate(executorService, runnable, initialDelay, period, TimeUnit.MICROSECONDS);\n-    }\n-    \n-    private static ExecutorService getExecutorService(String executorServiceName) {\n-        ExecutorService executorService = executorServiceMap.get(executorServiceName);\n-        if (executorService == null) {\n-            throw new NullPointerException(\"global executors does not exist :\" + executorServiceName);\n-        }\n-        return executorService;\n-    }\n-    \n-    private static ScheduledExecutorService getScheduledExecutorService(String executorServiceName) {\n-        ExecutorService executorService = getExecutorService(executorServiceName);\n-        if (executorService instanceof ScheduledExecutorService) {\n-            return ((ScheduledExecutorService) executorService);\n-        }\n-        throw new UnsupportedOperationException(\n-                \"global executor \" + executorServiceName + \" except class ScheduledExecutorService ,actual class \"\n-                        + ClassUtils.getCanonicalName(executorService));\n-    }\n-    \n-    public interface GlobalExecutorNames {\n-        \n-        String TIMER_EXECUTOR = \"TIMER_EXECUTOR\";\n-        \n-        String SERVICE_UPDATE_EXECUTOR = \"SERVICE_UPDATE_EXECUTOR\";\n-        \n-        String MYSQL_CHECKER_EXECUTOR = \"MYSQL_CHECKER_EXECUTOR\";\n-        \n-    }\n-    \n-    private enum GlobalExecutorService {\n-        /**\n-         * service update executor for {@link com.alibaba.nacos.naming.core.ServiceManager}.\n-         */\n-        SERVICE_UPDATE_EXECUTOR(GlobalExecutorNames.SERVICE_UPDATE_EXECUTOR) {\n-            @Override\n-            ExecutorService getExecutor() {\n-                return ExecutorFactory.Managed.newFixedExecutorService(ClassUtils.getCanonicalName(NamingApp.class), 2,\n-                        new NameThreadFactory(\"com.alibaba.nacos.naming.service.update.http.handler\"));\n-            }\n-        },\n-        /**\n-         * mysql checker executor for mysql health check.\n-         */\n-        MYSQL_CHECKER_EXECUTOR(GlobalExecutorNames.MYSQL_CHECKER_EXECUTOR) {\n-            @Override\n-            ExecutorService getExecutor() {\n-                return ExecutorFactory.Managed.newFixedExecutorService(ClassUtils.getCanonicalName(NamingApp.class),\n-                        Runtime.getRuntime().availableProcessors() <= 1 ? 1\n-                                : Runtime.getRuntime().availableProcessors() / 2,\n-                        new NameThreadFactory(\"com.alibaba.nacos.naming.mysql.checker\"));\n-            }\n-        },\n-        /**\n-         * timer executor provides multiple class calls.\n-         */\n-        TIMER_EXECUTOR(GlobalExecutorNames.TIMER_EXECUTOR) {\n-            @Override\n-            ScheduledExecutorService getExecutor() {\n-                return ExecutorFactory.Managed.newScheduledExecutorService(ClassUtils.getCanonicalName(NamingApp.class),\n-                        Runtime.getRuntime().availableProcessors() * 2,\n-                        new NameThreadFactory(\"com.alibaba.nacos.naming.timer\"));\n-            }\n-        };\n-        \n-        private String name;\n-        \n-        GlobalExecutorService(String name) {\n-            this.name = name;\n-        }\n-        \n-        abstract ExecutorService getExecutor();\n-    }\n-}\n"}}, {"oid": "5b592013a7562a9b041fb74ed905afe9331b4c67", "url": "https://github.com/alibaba/nacos/commit/5b592013a7562a9b041fb74ed905afe9331b4c67", "message": "[ISSUE #2856]Adjust the use of thread pools (naming module)\n\nChange-Id: I626179bd9ee8e852d9d51787950ad80744ec71cd", "committedDate": "2020-06-24T08:42:25Z", "type": "commit"}, {"oid": "5b592013a7562a9b041fb74ed905afe9331b4c67", "url": "https://github.com/alibaba/nacos/commit/5b592013a7562a9b041fb74ed905afe9331b4c67", "message": "[ISSUE #2856]Adjust the use of thread pools (naming module)\n\nChange-Id: I626179bd9ee8e852d9d51787950ad80744ec71cd", "committedDate": "2020-06-24T08:42:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDc2Ng==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445930766", "bodyText": "New code style?", "author": "zongtanghu", "createdAt": "2020-06-26T02:06:09Z", "path": "istio/src/main/java/com/alibaba/nacos/istio/mcp/NacosMcpService.java", "diffHunk": "@@ -39,213 +43,202 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n+ * nacos mcp service.\n+ *\n  * @author nkorange\n  * @since 1.1.4\n  */\n @org.springframework.stereotype.Service\n public class NacosMcpService extends ResourceSourceGrpc.ResourceSourceImplBase {\n-\n+    \n     private AtomicInteger connectIdGenerator = new AtomicInteger(0);\n-\n+    \n     private Map<Integer, StreamObserver<Resources>> connnections = new ConcurrentHashMap<>(16);\n-\n+    \n     private Map<String, Resource> resourceMap = new ConcurrentHashMap<>(16);\n-\n+    \n     private Map<String, String> checksumMap = new ConcurrentHashMap<>(16);\n-\n+    \n     private static final String SERVICE_NAME_SPLITTER = \"nacos\";\n-\n+    \n     private static final String MESSAGE_TYPE_URL = \"type.googleapis.com/istio.networking.v1alpha3.ServiceEntry\";\n-\n+    \n     private static final long MCP_PUSH_PERIOD_MILLISECONDS = 10000L;\n-\n+    \n     @Autowired\n     private ServiceManager serviceManager;\n-\n+    \n     @Autowired\n     private IstioConfig istioConfig;\n-", "originalCommit": "5b592013a7562a9b041fb74ed905afe9331b4c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NzU3MA==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445957570", "bodyText": "yes, code format", "author": "wangweizZZ", "createdAt": "2020-06-26T04:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMDc2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTQyNg==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445939426", "bodyText": "Use public final static String variable to represent the const value \"com.alibaba.nacos.naming.timer\" is better? The same is as below.", "author": "zongtanghu", "createdAt": "2020-06-26T02:43:41Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/misc/GlobalExecutor.java", "diffHunk": "@@ -42,141 +50,195 @@\n     \n     private static final long SERVER_STATUS_UPDATE_PERIOD = TimeUnit.SECONDS.toMillis(5);\n     \n-    private static ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors() * 2, registerMaster -> {\n-        Thread t = new Thread(registerMaster);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.timer\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService taskDispatchExecutor = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors(), taskDispatch -> {\n-        Thread t = new Thread(taskDispatch);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.distro.task.dispatcher\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService dataSyncExecutor = new ScheduledThreadPoolExecutor(\n-            Runtime.getRuntime().availableProcessors(), dataSync -> {\n-        Thread t = new Thread(dataSync);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.distro.data.syncer\");\n-        \n-        return t;\n-    });\n-    \n-    private static ScheduledExecutorService notifyServerListExecutor = new ScheduledThreadPoolExecutor(1, notifyServer -> {\n-        Thread t = new Thread(notifyServer);\n-        \n-        t.setDaemon(true);\n-        t.setName(\"com.alibaba.nacos.naming.server.list.notifier\");\n-        \n-        return t;\n-    });\n-    \n-    private static final ScheduledExecutorService SERVER_STATUS_EXECUTOR = new ScheduledThreadPoolExecutor(1, serverStatus -> {\n-        Thread t = new Thread(serverStatus);\n-        t.setName(\"nacos.naming.status.worker\");\n-        t.setDaemon(true);\n-        return t;\n-    });\n+    public static final int DEFAULT_THREAD_COUNT =\n+            Runtime.getRuntime().availableProcessors() <= 1 ? 1 : Runtime.getRuntime().availableProcessors() / 2;\n+    \n+    private static final ScheduledExecutorService NAMING_TIMER_EXECUTOR = ExecutorFactory.Managed\n+            .newScheduledExecutorService(ClassUtils.getCanonicalName(NamingApp.class),\n+                    Runtime.getRuntime().availableProcessors() * 2,\n+                    new NameThreadFactory(\"com.alibaba.nacos.naming.timer\"));", "originalCommit": "5b592013a7562a9b041fb74ed905afe9331b4c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1NzU0MQ==", "url": "https://github.com/alibaba/nacos/pull/3136#discussion_r445957541", "bodyText": "If set to public, there is no need to provide a method", "author": "wangweizZZ", "createdAt": "2020-06-26T04:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzOTQyNg=="}], "type": "inlineReview", "revised_code": null}]}