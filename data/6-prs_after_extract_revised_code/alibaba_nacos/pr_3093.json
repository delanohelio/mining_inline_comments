{"pr_number": 3093, "pr_title": "Instance eliminate module naming optimization", "pr_createdAt": "2020-06-17T08:26:11Z", "pr_url": "https://github.com/alibaba/nacos/pull/3093", "timeline": [{"oid": "488ae6a2511a68b7323cd5d0a5955dd18743b91c", "url": "https://github.com/alibaba/nacos/commit/488ae6a2511a68b7323cd5d0a5955dd18743b91c", "message": "Instance eliminate module naming optimization", "committedDate": "2020-06-17T08:24:02Z", "type": "commit"}, {"oid": "501bc80bc7e8427cb6557256ae09bb2aa6f47709", "url": "https://github.com/alibaba/nacos/commit/501bc80bc7e8427cb6557256ae09bb2aa6f47709", "message": "Solve PMD check failed", "committedDate": "2020-06-17T09:58:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NTY2OA==", "url": "https://github.com/alibaba/nacos/pull/3093#discussion_r441485668", "bodyText": "In this line, I had changed it to a private function. So there is a conflict.\nPlease change it.", "author": "KomachiSion", "createdAt": "2020-06-17T11:49:26Z", "path": "naming/src/main/java/com/alibaba/nacos/naming/core/Cluster.java", "diffHunk": "@@ -300,21 +300,21 @@ public void updateIPs(List<Instance> ips, boolean ephemeral) {\n         return new ArrayList<>(instanceMap.values());\n     }\n \n-    public List<Instance> subtract(Collection<Instance> a, Collection<Instance> b) {\n-        Map<String, Instance> mapa = new HashMap<>(b.size());\n-        for (Instance o : b) {\n-            mapa.put(o.getIp() + \":\" + o.getPort(), o);\n+    public List<Instance> subtract(Collection<Instance> oldIp, Collection<Instance> ips) {", "originalCommit": "501bc80bc7e8427cb6557256ae09bb2aa6f47709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMzY1Mg==", "url": "https://github.com/alibaba/nacos/pull/3093#discussion_r441503652", "bodyText": "@KomachiSion Hello, it has been solved. Please check it", "author": "pengzhengfa", "createdAt": "2020-06-17T12:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "9f4f1c45934bb8bb9a1ea5d4307f4c4450a048e6", "chunk": "diff --git a/naming/src/main/java/com/alibaba/nacos/naming/core/Cluster.java b/naming/src/main/java/com/alibaba/nacos/naming/core/Cluster.java\nindex cd066dac5..3380a34eb 100644\n--- a/naming/src/main/java/com/alibaba/nacos/naming/core/Cluster.java\n+++ b/naming/src/main/java/com/alibaba/nacos/naming/core/Cluster.java\n\n@@ -182,125 +222,133 @@ public class Cluster extends com.alibaba.nacos.api.naming.pojo.Cluster implement\n         cluster.metadata = new HashMap<>(metadata);\n         return cluster;\n     }\n-\n+    \n     public boolean isEmpty() {\n         return ephemeralInstances.isEmpty() && persistentInstances.isEmpty();\n     }\n-\n-    public void updateIPs(List<Instance> ips, boolean ephemeral) {\n-\n+    \n+    /**\n+     * Update instance list.\n+     *\n+     * @param ips       instance list\n+     * @param ephemeral whether these instances are ephemeral\n+     */\n+    public void updateIps(List<Instance> ips, boolean ephemeral) {\n+        \n         Set<Instance> toUpdateInstances = ephemeral ? ephemeralInstances : persistentInstances;\n-\n-        HashMap<String, Instance> oldIPMap = new HashMap<>(toUpdateInstances.size());\n-\n+        \n+        HashMap<String, Instance> oldIpMap = new HashMap<>(toUpdateInstances.size());\n+        \n         for (Instance ip : toUpdateInstances) {\n-            oldIPMap.put(ip.getDatumKey(), ip);\n+            oldIpMap.put(ip.getDatumKey(), ip);\n         }\n-\n-        List<Instance> updatedIPs = updatedIPs(ips, oldIPMap.values());\n+        \n+        List<Instance> updatedIPs = updatedIps(ips, oldIpMap.values());\n         if (updatedIPs.size() > 0) {\n             for (Instance ip : updatedIPs) {\n-                Instance oldIP = oldIPMap.get(ip.getDatumKey());\n-\n+                Instance oldIP = oldIpMap.get(ip.getDatumKey());\n+                \n                 // do not update the ip validation status of updated ips\n                 // because the checker has the most precise result\n                 // Only when ip is not marked, don't we update the health status of IP:\n                 if (!ip.isMarked()) {\n                     ip.setHealthy(oldIP.isHealthy());\n                 }\n-\n+                \n                 if (ip.isHealthy() != oldIP.isHealthy()) {\n                     // ip validation status updated\n-                    Loggers.EVT_LOG.info(\"{} {SYNC} IP-{} {}:{}@{}\",\n-                        getService().getName(), (ip.isHealthy() ? \"ENABLED\" : \"DISABLED\"), ip.getIp(), ip.getPort(), getName());\n+                    Loggers.EVT_LOG.info(\"{} {SYNC} IP-{} {}:{}@{}\", getService().getName(),\n+                            (ip.isHealthy() ? \"ENABLED\" : \"DISABLED\"), ip.getIp(), ip.getPort(), getName());\n                 }\n-\n+                \n                 if (ip.getWeight() != oldIP.getWeight()) {\n                     // ip validation status updated\n-                    Loggers.EVT_LOG.info(\"{} {SYNC} {IP-UPDATED} {}->{}\", getService().getName(), oldIP.toString(), ip.toString());\n+                    Loggers.EVT_LOG.info(\"{} {SYNC} {IP-UPDATED} {}->{}\", getService().getName(), oldIP.toString(),\n+                            ip.toString());\n                 }\n             }\n         }\n-\n-        List<Instance> newIPs = subtract(ips, oldIPMap.values());\n+        \n+        List<Instance> newIPs = subtract(ips, oldIpMap.values());\n         if (newIPs.size() > 0) {\n-            Loggers.EVT_LOG.info(\"{} {SYNC} {IP-NEW} cluster: {}, new ips size: {}, content: {}\",\n-                getService().getName(), getName(), newIPs.size(), newIPs.toString());\n-\n+            Loggers.EVT_LOG\n+                    .info(\"{} {SYNC} {IP-NEW} cluster: {}, new ips size: {}, content: {}\", getService().getName(),\n+                            getName(), newIPs.size(), newIPs.toString());\n+            \n             for (Instance ip : newIPs) {\n                 HealthCheckStatus.reset(ip);\n             }\n         }\n-\n-        List<Instance> deadIPs = subtract(oldIPMap.values(), ips);\n-\n+        \n+        List<Instance> deadIPs = subtract(oldIpMap.values(), ips);\n+        \n         if (deadIPs.size() > 0) {\n-            Loggers.EVT_LOG.info(\"{} {SYNC} {IP-DEAD} cluster: {}, dead ips size: {}, content: {}\",\n-                getService().getName(), getName(), deadIPs.size(), deadIPs.toString());\n-\n+            Loggers.EVT_LOG\n+                    .info(\"{} {SYNC} {IP-DEAD} cluster: {}, dead ips size: {}, content: {}\", getService().getName(),\n+                            getName(), deadIPs.size(), deadIPs.toString());\n+            \n             for (Instance ip : deadIPs) {\n                 HealthCheckStatus.remv(ip);\n             }\n         }\n-\n+        \n         toUpdateInstances = new HashSet<>(ips);\n-\n+        \n         if (ephemeral) {\n             ephemeralInstances = toUpdateInstances;\n         } else {\n             persistentInstances = toUpdateInstances;\n         }\n     }\n-\n-    public List<Instance> updatedIPs(Collection<Instance> a, Collection<Instance> b) {\n-\n-        List<Instance> intersects = (List<Instance>) CollectionUtils.intersection(a, b);\n-        Map<String, Instance> stringIPAddressMap = new ConcurrentHashMap<>(intersects.size());\n-\n+    \n+    private List<Instance> updatedIps(Collection<Instance> newInstance, Collection<Instance> oldInstance) {\n+        \n+        List<Instance> intersects = (List<Instance>) CollectionUtils.intersection(newInstance, oldInstance);\n+        Map<String, Instance> stringIpAddressMap = new ConcurrentHashMap<>(intersects.size());\n+        \n         for (Instance instance : intersects) {\n-            stringIPAddressMap.put(instance.getIp() + \":\" + instance.getPort(), instance);\n+            stringIpAddressMap.put(instance.getIp() + \":\" + instance.getPort(), instance);\n         }\n-\n-        Map<String, Integer> intersectMap = new ConcurrentHashMap<>(a.size() + b.size());\n-        Map<String, Instance> instanceMap = new ConcurrentHashMap<>(a.size());\n-        Map<String, Instance> instanceMap1 = new ConcurrentHashMap<>(a.size());\n-\n-        for (Instance instance : b) {\n-            if (stringIPAddressMap.containsKey(instance.getIp() + \":\" + instance.getPort())) {\n+        \n+        Map<String, Integer> intersectMap = new ConcurrentHashMap<>(newInstance.size() + oldInstance.size());\n+        Map<String, Instance> instanceMap = new ConcurrentHashMap<>(newInstance.size());\n+        Map<String, Instance> instanceMap1 = new ConcurrentHashMap<>(newInstance.size());\n+        \n+        for (Instance instance : oldInstance) {\n+            if (stringIpAddressMap.containsKey(instance.getIp() + \":\" + instance.getPort())) {\n                 intersectMap.put(instance.toString(), 1);\n             }\n         }\n-\n-\n-        for (Instance instance : a) {\n-            if (stringIPAddressMap.containsKey(instance.getIp() + \":\" + instance.getPort())) {\n-\n+        \n+        for (Instance instance : newInstance) {\n+            if (stringIpAddressMap.containsKey(instance.getIp() + \":\" + instance.getPort())) {\n+                \n                 if (intersectMap.containsKey(instance.toString())) {\n                     intersectMap.put(instance.toString(), 2);\n                 } else {\n                     intersectMap.put(instance.toString(), 1);\n                 }\n             }\n-\n+            \n             instanceMap1.put(instance.toString(), instance);\n-\n+            \n         }\n-\n+        \n         for (Map.Entry<String, Integer> entry : intersectMap.entrySet()) {\n             String key = entry.getKey();\n             Integer value = entry.getValue();\n-\n+            \n             if (value == 1) {\n                 if (instanceMap1.containsKey(key)) {\n                     instanceMap.put(key, instanceMap1.get(key));\n                 }\n             }\n         }\n-\n+        \n         return new ArrayList<>(instanceMap.values());\n     }\n-\n-    public List<Instance> subtract(Collection<Instance> oldIp, Collection<Instance> ips) {\n+  \n+    private List<Instance> subtract(Collection<Instance> oldIp, Collection<Instance> ips) {\n         Map<String, Instance> ipsMap = new HashMap<>(ips.size());\n         for (Instance instance : ips) {\n             ipsMap.put(instance.getIp() + \":\" + instance.getPort(), instance);\n"}}, {"oid": "9f4f1c45934bb8bb9a1ea5d4307f4c4450a048e6", "url": "https://github.com/alibaba/nacos/commit/9f4f1c45934bb8bb9a1ea5d4307f4c4450a048e6", "message": "Merge branch 'develop' into develop", "committedDate": "2020-06-17T12:17:10Z", "type": "commit"}]}