{"pr_number": 3060, "pr_title": "Upgrade the database driver version of Mysql to 8 # 3036 #2993 #1868", "pr_createdAt": "2020-06-13T11:16:05Z", "pr_url": "https://github.com/alibaba/nacos/pull/3060", "timeline": [{"oid": "1b55e68fd41972878ff8d823f7dfcea6a23eeb1f", "url": "https://github.com/alibaba/nacos/commit/1b55e68fd41972878ff8d823f7dfcea6a23eeb1f", "message": "Upgrade the database driver version of Mysql to 8 # 3036 #2993 #1868", "committedDate": "2020-06-13T11:05:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDYwNw==", "url": "https://github.com/alibaba/nacos/pull/3060#discussion_r439734607", "bodyText": "\u6211\u89c9\u5f97\u8fd9\u4e2a\u5de5\u5177\u662f\u4e0d\u662f\u53ef\u4ee5\u4e0b\u6c89\u5230CollectionUtils\u91cc\u9762\uff1f", "author": "chuntaojun", "createdAt": "2020-06-13T12:13:31Z", "path": "config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+package com.alibaba.nacos.config.server.service.datasource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.core.env.Environment;\n+\n+import com.google.common.base.Preconditions;\n+import com.zaxxer.hikari.HikariDataSource;\n+\n+/**\n+ * Properties of external DataSource\n+ *\n+ * @author Nacos\n+ */\n+public class ExternalDataSourceProperties {\n+\n+    private final static String JDBC_DRIVER_NAME = \"com.mysql.cj.jdbc.Driver\";\n+    public static final long CONNECTION_TIMEOUT_MS = 3000L;\n+    public static final long VALIDATION_TIMEOUT = 10L;\n+    public static final String TEST_QUERY = \"SELECT 1 FROM dual\";\n+    public static final int DEFAULT_MAX_POOL_SIZE = 20;\n+    public static final int DEFAULT_MINIMUM_IDLE = 50;\n+\n+    private Integer num;\n+    private List<String> url = new ArrayList<>();\n+    private List<String> user = new ArrayList<>();\n+    private List<String> password = new ArrayList<>();\n+    private List<Integer> maxPoolSize = new ArrayList<>();\n+    private List<Integer> minIdle = new ArrayList<>();\n+\n+    public void setNum(Integer num) {\n+        this.num = num;\n+    }\n+\n+    public void setUrl(List<String> url) {\n+        this.url = url;\n+    }\n+\n+    public void setUser(List<String> user) {\n+        this.user = user;\n+    }\n+\n+    public void setPassword(List<String> password) {\n+        this.password = password;\n+    }\n+\n+    public void setMaxPoolSize(List<Integer> maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+    }\n+\n+    public void setMinIdle(List<Integer> minIdle) {\n+        this.minIdle = minIdle;\n+    }\n+\n+    /**\n+     *\n+     * @param environment\n+     *            {@link Environment}\n+     * @param callback\n+     *            Callback function when constructing data source\n+     * @return List of {@link HikariDataSource}\n+     */\n+    List<HikariDataSource> build(Environment environment, Callback<HikariDataSource> callback) {\n+        List<HikariDataSource> dataSources = new ArrayList<>();\n+        Binder.get(environment).bind(\"db\", Bindable.ofInstance(this));\n+        Preconditions.checkArgument(Objects.nonNull(num), \"db.num is null\");\n+        Preconditions.checkArgument(CollectionUtils.isNotEmpty(user), \"db.user or db.user.[index] is null\");\n+        Preconditions.checkArgument(CollectionUtils.isNotEmpty(password), \"db.password or db.password.[index] is null\");\n+        for (int index = 0; index < num; index++) {\n+            int currentSize = index + 1;\n+            Preconditions.checkArgument(url.size() >= currentSize, \"db.url.%s is null\", index);\n+            HikariDataSource ds = new HikariDataSource();\n+            ds.setDriverClassName(JDBC_DRIVER_NAME);\n+            ds.setJdbcUrl(url.get(index).trim());\n+            ds.setUsername(defaultIfNull(user, index, user.get(0)).trim());\n+            ds.setPassword(defaultIfNull(password, index, password.get(0)).trim());\n+            ds.setConnectionTimeout(CONNECTION_TIMEOUT_MS);\n+            ds.setMaximumPoolSize(defaultIfNull(maxPoolSize, index, DEFAULT_MAX_POOL_SIZE));\n+            ds.setMinimumIdle(defaultIfNull(minIdle, index, DEFAULT_MINIMUM_IDLE));\n+            // Check the connection pool every 10 minutes\n+            ds.setValidationTimeout(TimeUnit.MINUTES.toMillis(VALIDATION_TIMEOUT));\n+            ds.setConnectionTestQuery(TEST_QUERY);\n+            dataSources.add(ds);\n+            callback.accept(ds);\n+        }\n+        Preconditions.checkArgument(CollectionUtils.isNotEmpty(dataSources), \"no datasource available\");\n+        return dataSources;\n+    }\n+\n+    static <T> T defaultIfNull(List<T> collection, int index, T defaultValue) {", "originalCommit": "1b55e68fd41972878ff8d823f7dfcea6a23eeb1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczOTA0Nw==", "url": "https://github.com/alibaba/nacos/pull/3060#discussion_r439739047", "bodyText": "\u6211\u770b\u4e0b", "author": "paderlol", "createdAt": "2020-06-13T13:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNDYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "cf6b4c4f0e2837923d583aa207486baaf5085623", "chunk": "diff --git a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java b/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java\nindex e0b7d3afa..896fc7694 100644\n--- a/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java\n+++ b/config/src/main/java/com/alibaba/nacos/config/server/service/datasource/ExternalDataSourceProperties.java\n\n@@ -12,6 +12,8 @@\n  */\n package com.alibaba.nacos.config.server.service.datasource;\n \n+import static com.alibaba.nacos.common.utils.CollectionUtils.getOrDefault;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n"}}, {"oid": "cf6b4c4f0e2837923d583aa207486baaf5085623", "url": "https://github.com/alibaba/nacos/commit/cf6b4c4f0e2837923d583aa207486baaf5085623", "message": "Tool method extract", "committedDate": "2020-06-13T14:06:04Z", "type": "commit"}, {"oid": "768713ec05f7fa9f51a337446184ef47baaba1b4", "url": "https://github.com/alibaba/nacos/commit/768713ec05f7fa9f51a337446184ef47baaba1b4", "message": "Merge branch 'develop' of https://github.com/alibaba/nacos into develop", "committedDate": "2020-06-14T09:18:17Z", "type": "commit"}, {"oid": "8295a3ef96d32de9123e252c6b8bb13215226ee0", "url": "https://github.com/alibaba/nacos/commit/8295a3ef96d32de9123e252c6b8bb13215226ee0", "message": "Add ut for ExternalDataSourceProperties", "committedDate": "2020-06-14T09:55:25Z", "type": "commit"}, {"oid": "477e0ad1f331004d30c2809d3c9106cd3ec005a4", "url": "https://github.com/alibaba/nacos/commit/477e0ad1f331004d30c2809d3c9106cd3ec005a4", "message": "Add license for ExternalDataSourceProperties", "committedDate": "2020-06-14T09:57:33Z", "type": "commit"}, {"oid": "855a637ac5e36fe3abb0bbba19e7e6d871bed16c", "url": "https://github.com/alibaba/nacos/commit/855a637ac5e36fe3abb0bbba19e7e6d871bed16c", "message": "Fix word spelling errors", "committedDate": "2020-06-14T11:11:54Z", "type": "commit"}]}