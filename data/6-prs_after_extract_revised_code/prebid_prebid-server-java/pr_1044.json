{"pr_number": 1044, "pr_title": "Add account CCPA enabled and per-request-type enabled flags", "pr_createdAt": "2020-12-02T13:06:02Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/1044", "timeline": [{"oid": "d15c620a09f8159c03315c08816a772f4c269879", "url": "https://github.com/prebid/prebid-server-java/commit/d15c620a09f8159c03315c08816a772f4c269879", "message": "Add account CCPA enabled and per-request-type enabled flags", "committedDate": "2020-12-02T13:06:56Z", "type": "commit"}, {"oid": "d15c620a09f8159c03315c08816a772f4c269879", "url": "https://github.com/prebid/prebid-server-java/commit/d15c620a09f8159c03315c08816a772f4c269879", "message": "Add account CCPA enabled and per-request-type enabled flags", "committedDate": "2020-12-02T13:06:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MTk1Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535171953", "bodyText": "Use camelCase", "author": "DGarbar", "createdAt": "2020-12-03T12:09:11Z", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {", "originalCommit": "d15c620a09f8159c03315c08816a772f4c269879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\nindex a2cf22293..4026ad05c 100644\n--- a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n+++ b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n\n@@ -212,32 +212,28 @@ public class PrivacyEnforcementService {\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n     private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account, requestType);\n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n-    private Boolean isCCPAEnabled(Account account) {\n+    private Boolean isCcpaEnabled(Account account) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n \n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n-\n-        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+        return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n     }\n \n-    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+    private boolean isCcpaEnabled(Account account, MetricName requestType) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n-\n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n         if (requestType == null) {\n-            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);\n+            return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n         }\n \n         final EnabledForRequestType enabledForRequestType = accountCcpaConfig != null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3MzkxMw==", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535173913", "bodyText": "redundant /n", "author": "DGarbar", "createdAt": "2020-12-03T12:10:55Z", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;", "originalCommit": "d15c620a09f8159c03315c08816a772f4c269879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\nindex a2cf22293..4026ad05c 100644\n--- a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n+++ b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n\n@@ -212,32 +212,28 @@ public class PrivacyEnforcementService {\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n     private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account, requestType);\n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n-    private Boolean isCCPAEnabled(Account account) {\n+    private Boolean isCcpaEnabled(Account account) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n \n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n-\n-        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+        return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n     }\n \n-    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+    private boolean isCcpaEnabled(Account account, MetricName requestType) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n-\n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n         if (requestType == null) {\n-            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);\n+            return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n         }\n \n         final EnabledForRequestType enabledForRequestType = accountCcpaConfig != null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3NDEwOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535174109", "bodyText": "redundant /n", "author": "DGarbar", "createdAt": "2020-12-03T12:11:05Z", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+", "originalCommit": "d15c620a09f8159c03315c08816a772f4c269879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\nindex a2cf22293..4026ad05c 100644\n--- a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n+++ b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n\n@@ -212,32 +212,28 @@ public class PrivacyEnforcementService {\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n     private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account, requestType);\n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n-    private Boolean isCCPAEnabled(Account account) {\n+    private Boolean isCcpaEnabled(Account account) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n \n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n-\n-        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+        return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n     }\n \n-    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+    private boolean isCcpaEnabled(Account account, MetricName requestType) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n-\n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n         if (requestType == null) {\n-            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);\n+            return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n         }\n \n         final EnabledForRequestType enabledForRequestType = accountCcpaConfig != null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3ODE4OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535178189", "bodyText": "redundant /n", "author": "DGarbar", "createdAt": "2020-12-03T12:15:09Z", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+\n+        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+    }\n+\n+    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =", "originalCommit": "d15c620a09f8159c03315c08816a772f4c269879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\nindex a2cf22293..4026ad05c 100644\n--- a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n+++ b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n\n@@ -212,32 +212,28 @@ public class PrivacyEnforcementService {\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n     private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account, requestType);\n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n-    private Boolean isCCPAEnabled(Account account) {\n+    private Boolean isCcpaEnabled(Account account) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n \n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n-\n-        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+        return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n     }\n \n-    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+    private boolean isCcpaEnabled(Account account, MetricName requestType) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n-\n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n         if (requestType == null) {\n-            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);\n+            return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n         }\n \n         final EnabledForRequestType enabledForRequestType = accountCcpaConfig != null\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4MTQ3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/1044#discussion_r535181470", "bodyText": "Missed  eturn ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);", "author": "DGarbar", "createdAt": "2020-12-03T12:18:57Z", "path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "diffHunk": "@@ -199,21 +201,55 @@ private static RequestLogInfo requestLogInfo(MetricName requestType, BidRequest\n                                                         BidderAliases aliases,\n                                                         Device device,\n                                                         Map<String, User> bidderToUser,\n-                                                        Privacy privacy) {\n+                                                        Privacy privacy,\n+                                                        MetricName requestType) {\n \n-        if (isCcpaEnforced(privacy.getCcpa(), account)) {\n+        if (isCcpaEnforced(privacy.getCcpa(), account, requestType)) {\n             return maskCcpa(extractCcpaEnforcedBidders(bidders, bidRequest, aliases), device, bidderToUser);\n         }\n \n         return Collections.emptyMap();\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = BooleanUtils.toBooleanDefaultIfNull(account.getEnforceCcpa(), ccpaEnforce);\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n+    private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n+        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        return shouldEnforceCcpa && ccpa.isEnforced();\n+    }\n+\n+    private Boolean isCCPAEnabled(Account account) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+\n+        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+    }\n+\n+    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+        final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+\n+        final Boolean accountCCPAEnabled =\n+                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        if (requestType == null) {\n+            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);", "originalCommit": "d15c620a09f8159c03315c08816a772f4c269879", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\nindex a2cf22293..4026ad05c 100644\n--- a/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n+++ b/src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java\n\n@@ -212,32 +212,28 @@ public class PrivacyEnforcementService {\n     }\n \n     public boolean isCcpaEnforced(Ccpa ccpa, Account account) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account);\n \n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n     private boolean isCcpaEnforced(Ccpa ccpa, Account account, MetricName requestType) {\n-        final boolean shouldEnforceCcpa = isCCPAEnabled(account, requestType);\n+        final boolean shouldEnforceCcpa = isCcpaEnabled(account, requestType);\n         return shouldEnforceCcpa && ccpa.isEnforced();\n     }\n \n-    private Boolean isCCPAEnabled(Account account) {\n+    private Boolean isCcpaEnabled(Account account) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n \n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n-\n-        return ObjectUtils.firstNonNull(accountCCPAEnabled, account.getEnforceCcpa(), ccpaEnforce);\n+        return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n     }\n \n-    private boolean isCCPAEnabled(Account account, MetricName requestType) {\n+    private boolean isCcpaEnabled(Account account, MetricName requestType) {\n         final AccountCcpaConfig accountCcpaConfig = account.getCcpa();\n-\n-        final Boolean accountCCPAEnabled =\n-                accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n+        final Boolean accountCcpaEnabled = accountCcpaConfig != null ? accountCcpaConfig.getEnabled() : null;\n         if (requestType == null) {\n-            return ObjectUtils.firstNonNull(accountCCPAEnabled, ccpaEnforce);\n+            return ObjectUtils.firstNonNull(accountCcpaEnabled, account.getEnforceCcpa(), ccpaEnforce);\n         }\n \n         final EnabledForRequestType enabledForRequestType = accountCcpaConfig != null\n"}}, {"oid": "ddbe0c172bd598db57bae3468d7b2c16b22c5370", "url": "https://github.com/prebid/prebid-server-java/commit/ddbe0c172bd598db57bae3468d7b2c16b22c5370", "message": "Fixes after review", "committedDate": "2020-12-03T12:56:25Z", "type": "commit"}, {"oid": "aeac0214123b8652c1bedbaf87c086d563a112b4", "url": "https://github.com/prebid/prebid-server-java/commit/aeac0214123b8652c1bedbaf87c086d563a112b4", "message": "Add account CCPA enabled and per-request-type enabled flags", "committedDate": "2021-08-10T07:43:09Z", "type": "commit"}, {"oid": "c354f1275c330befbc4b59e63889cb3bfd4b946e", "url": "https://github.com/prebid/prebid-server-java/commit/c354f1275c330befbc4b59e63889cb3bfd4b946e", "message": "Fixes after review", "committedDate": "2021-08-10T07:43:10Z", "type": "commit"}, {"oid": "b731319a957ce3551d1626e80b3d42f7d8280cb5", "url": "https://github.com/prebid/prebid-server-java/commit/b731319a957ce3551d1626e80b3d42f7d8280cb5", "message": "Merge remote-tracking branch 'remotes/origin/master' into account/ccpa/enabled\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "committedDate": "2021-08-10T07:50:27Z", "type": "commit"}, {"oid": "46b8df3fb862c7ac6618796f6fe3c10a2f42f28d", "url": "https://github.com/prebid/prebid-server-java/commit/46b8df3fb862c7ac6618796f6fe3c10a2f42f28d", "message": "Merge branch 'account/ccpa/enabled_old' into test\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "committedDate": "2021-08-10T07:59:53Z", "type": "commit"}, {"oid": "46b8df3fb862c7ac6618796f6fe3c10a2f42f28d", "url": "https://github.com/prebid/prebid-server-java/commit/46b8df3fb862c7ac6618796f6fe3c10a2f42f28d", "message": "Merge branch 'account/ccpa/enabled_old' into test\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "committedDate": "2021-08-10T07:59:53Z", "type": "forcePushed"}, {"oid": "74db518226cd1f7d7d1b7132bbd461dd1bf9de06", "url": "https://github.com/prebid/prebid-server-java/commit/74db518226cd1f7d7d1b7132bbd461dd1bf9de06", "message": "Merge branch 'master' into account/ccpa/enabled", "committedDate": "2021-08-13T10:32:48Z", "type": "commit"}, {"oid": "b2eee9541b673408b0797465d1598e14b962bbed", "url": "https://github.com/prebid/prebid-server-java/commit/b2eee9541b673408b0797465d1598e14b962bbed", "message": "Add CCPA to AccountConfigurationProperties", "committedDate": "2021-08-13T10:39:39Z", "type": "commit"}]}