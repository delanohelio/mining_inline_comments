{"pr_number": 673, "pr_title": "Add implementation of UcfunnelBidder", "pr_createdAt": "2020-04-15T19:55:04Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/673", "timeline": [{"oid": "69515a6b7434cacf0774eaace4f4274406ec3ed4", "url": "https://github.com/prebid/prebid-server-java/commit/69515a6b7434cacf0774eaace4f4274406ec3ed4", "message": "Add UcfunnelBidder and tests", "committedDate": "2020-04-15T19:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDAwNw==", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409490007", "bodyText": "isEmpty", "author": "DGarbar", "createdAt": "2020-04-16T11:41:49Z", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {", "originalCommit": "69515a6b7434cacf0774eaace4f4274406ec3ed4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\nindex 2c59431f..abde2578 100644\n--- a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n import com.iab.openrtb.response.BidResponse;\n import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MDExNA==", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409490114", "bodyText": "use emptyWIthErrors", "author": "DGarbar", "createdAt": "2020-04-16T11:42:01Z", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);", "originalCommit": "69515a6b7434cacf0774eaace4f4274406ec3ed4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\nindex 2c59431f..abde2578 100644\n--- a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n import com.iab.openrtb.response.BidResponse;\n import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5MjI2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409492262", "bodyText": "use String.format", "author": "DGarbar", "createdAt": "2020-04-16T11:46:09Z", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String partnerId = null;\n+        try {\n+            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().get(0));\n+            final String adUnitId = extImpUcfunnel.getAdunitid();\n+            partnerId = extImpUcfunnel.getPartnerid();\n+            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n+                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(request);\n+        final String requestUrl = endpointUrl + \"/\" + HttpUtil.encodeUrl(partnerId) + \"/request\";", "originalCommit": "69515a6b7434cacf0774eaace4f4274406ec3ed4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\nindex 2c59431f..abde2578 100644\n--- a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n import com.iab.openrtb.response.BidResponse;\n import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ5ODMyOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/673#discussion_r409498329", "bodyText": "bc of validateBidType (btw I'd prefer validatedBidType) you can receive BidderBid with empty bidTupe (null)", "author": "DGarbar", "createdAt": "2020-04-16T11:57:37Z", "path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.prebid.server.bidder.ucfunnel;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ucfunnel.ExtImpUcfunnel;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ucfunnel {@link Bidder} implementation.\n+ */\n+public class UcfunnelBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpUcfunnel>> UCFUNNEL_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpUcfunnel>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public UcfunnelBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (CollectionUtils.sizeIsEmpty(request.getImp())) {\n+            errors.add(BidderError.badInput(\"No valid impressions in the bid request\"));\n+            return Result.of(Collections.emptyList(), errors);\n+        }\n+\n+        String partnerId = null;\n+        try {\n+            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().get(0));\n+            final String adUnitId = extImpUcfunnel.getAdunitid();\n+            partnerId = extImpUcfunnel.getPartnerid();\n+            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n+                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n+                return Result.of(Collections.emptyList(), errors);\n+            }\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String body = mapper.encode(request);\n+        final String requestUrl = endpointUrl + \"/\" + HttpUtil.encodeUrl(partnerId) + \"/request\";\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .body(body)\n+                        .headers(HttpUtil.headers())\n+                        .payload(request)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpUcfunnel parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), UCFUNNEL_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad request\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = decodeBodyToBidResponse(httpCall);\n+            final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                    .filter(Objects::nonNull)\n+                    .map(SeatBid::getBid)\n+                    .filter(Objects::nonNull)\n+                    .flatMap(Collection::stream)\n+                    .map(bid -> BidderBid.of(bid, validateBidType(bid.getImpid(), bidRequest.getImp()),", "originalCommit": "69515a6b7434cacf0774eaace4f4274406ec3ed4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\nindex 2c59431f..abde2578 100644\n--- a/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java\n\n@@ -4,6 +4,7 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n import com.iab.openrtb.response.BidResponse;\n import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n"}}, {"oid": "13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "url": "https://github.com/prebid/prebid-server-java/commit/13c97d3f7af4d9410b9d7c2c6745df64c5a760a4", "message": "Change defining of BidType", "committedDate": "2020-04-16T14:12:33Z", "type": "commit"}, {"oid": "167867561d41fc4daaba14e51462de57d4d57095", "url": "https://github.com/prebid/prebid-server-java/commit/167867561d41fc4daaba14e51462de57d4d57095", "message": "Add buyeruid to test json", "committedDate": "2020-04-21T16:03:15Z", "type": "commit"}, {"oid": "6c06a7ed14af735a5f80258226f0c878819c6ca5", "url": "https://github.com/prebid/prebid-server-java/commit/6c06a7ed14af735a5f80258226f0c878819c6ca5", "message": "Merge branch 'master' into add-ucfunnel-bidder", "committedDate": "2020-04-21T16:52:37Z", "type": "commit"}, {"oid": "db45b7c86c612d4227db53b8d2033b257a2001a8", "url": "https://github.com/prebid/prebid-server-java/commit/db45b7c86c612d4227db53b8d2033b257a2001a8", "message": "Merge branch 'master' into add-ucfunnel-bidder", "committedDate": "2020-06-24T15:20:24Z", "type": "commit"}, {"oid": "c8cc2d33892570781a4f1c1c070870a536393182", "url": "https://github.com/prebid/prebid-server-java/commit/c8cc2d33892570781a4f1c1c070870a536393182", "message": "Add pbs-enforces-ccpa property to ucfunnel.yaml file", "committedDate": "2020-06-24T15:22:57Z", "type": "commit"}]}