{"pr_number": 1069, "pr_title": "Add support for multi-imp requests in ttx bidder", "pr_createdAt": "2020-12-13T23:20:47Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/1069", "timeline": [{"oid": "5802875b409e22e79aa55ff69f5bd9fd9fd44daa", "url": "https://github.com/prebid/prebid-server-java/commit/5802875b409e22e79aa55ff69f5bd9fd9fd44daa", "message": "Add support for multi-imp requests in ttx bidder", "committedDate": "2020-12-13T23:17:59Z", "type": "commit"}, {"oid": "0ed4932231562d31190e4645000fab4e3b78e576", "url": "https://github.com/prebid/prebid-server-java/commit/0ed4932231562d31190e4645000fab4e3b78e576", "message": "Updated position of request ext creating", "committedDate": "2021-01-25T11:53:04Z", "type": "commit"}, {"oid": "0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "url": "https://github.com/prebid/prebid-server-java/commit/0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "message": "Merge branch 'master' into ttx/multi/request", "committedDate": "2021-01-25T11:53:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc2MDY4MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1069#discussion_r563760681", "bodyText": "Catch exception", "author": "DGarbar", "createdAt": "2021-01-25T14:24:35Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -56,44 +60,68 @@ public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final Imp firstImp = request.getImp().get(0);\n         final List<BidderError> errors = new ArrayList<>();\n-        Imp updatedFirstImp = null;\n-        ExtImpTtx extImpTtx = null;\n-        try {\n-            extImpTtx = parseImpExt(firstImp);\n-            updatedFirstImp = updatedImp(firstImp, extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        if (updatedFirstImp != null && updatedFirstImp.getBanner() == null && updatedFirstImp.getVideo() == null) {\n-            return Result.withError(BidderError.badInput(\"At least one of [banner, video] \"\n-                    + \"formats must be defined in Imp. None found\"));\n-        }\n+        final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n \n-        final HttpRequest<BidRequest> httpRequest = createRequest(request, extImpTtx, updatedFirstImp);\n+        final ExtRequest reqExt = updateExtRequest(request.getExt());", "originalCommit": "0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93ac535c623a98ef878b40fe12147b99ac756dd", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\nindex 7bb9f8f44..a04175c13 100644\n--- a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n\n@@ -62,12 +62,21 @@ public class TtxBidder implements Bidder<BidRequest> {\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n         final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n+        ExtRequest reqExt;\n \n-        final ExtRequest reqExt = updateExtRequest(request.getExt());\n+        try {\n+            reqExt = updateExtRequest(request.getExt());\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            reqExt = null;\n+        }\n \n         for (Imp imp : request.getImp()) {\n             try {\n-                requests.add(makeRequest(request, imp, reqExt));\n+                validateImp(imp);\n+                final ExtImpTtx extImpTtx = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, extImpTtx);\n+                requests.add(createRequest(request, updatedImp, reqExt));\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc3MDc5NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1069#discussion_r563770795", "bodyText": "makeRequest seems redundant.\nCould you split it like.\nvalidateImp()\nparseImpExt()\nupdateImp()\ncreateRequest()", "author": "DGarbar", "createdAt": "2021-01-25T14:37:29Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -56,44 +60,68 @@ public TtxBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final Imp firstImp = request.getImp().get(0);\n         final List<BidderError> errors = new ArrayList<>();\n-        Imp updatedFirstImp = null;\n-        ExtImpTtx extImpTtx = null;\n-        try {\n-            extImpTtx = parseImpExt(firstImp);\n-            updatedFirstImp = updatedImp(firstImp, extImpTtx.getProductId(), extImpTtx.getZoneId(), errors);\n-        } catch (PreBidException e) {\n-            errors.add(BidderError.badInput(e.getMessage()));\n-        }\n-\n-        if (updatedFirstImp != null && updatedFirstImp.getBanner() == null && updatedFirstImp.getVideo() == null) {\n-            return Result.withError(BidderError.badInput(\"At least one of [banner, video] \"\n-                    + \"formats must be defined in Imp. None found\"));\n-        }\n+        final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n \n-        final HttpRequest<BidRequest> httpRequest = createRequest(request, extImpTtx, updatedFirstImp);\n+        final ExtRequest reqExt = updateExtRequest(request.getExt());\n \n-        return Result.of(Collections.singletonList(httpRequest), errors);\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                requests.add(makeRequest(request, imp, reqExt));", "originalCommit": "0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93ac535c623a98ef878b40fe12147b99ac756dd", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\nindex 7bb9f8f44..a04175c13 100644\n--- a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n\n@@ -62,12 +62,21 @@ public class TtxBidder implements Bidder<BidRequest> {\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n         final List<HttpRequest<BidRequest>> requests = new ArrayList<>();\n+        ExtRequest reqExt;\n \n-        final ExtRequest reqExt = updateExtRequest(request.getExt());\n+        try {\n+            reqExt = updateExtRequest(request.getExt());\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            reqExt = null;\n+        }\n \n         for (Imp imp : request.getImp()) {\n             try {\n-                requests.add(makeRequest(request, imp, reqExt));\n+                validateImp(imp);\n+                final ExtImpTtx extImpTtx = parseImpExt(imp);\n+                final Imp updatedImp = updateImp(imp, extImpTtx);\n+                requests.add(createRequest(request, updatedImp, reqExt));\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc3MzQ2NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1069#discussion_r563773465", "bodyText": "redundant /n", "author": "DGarbar", "createdAt": "2021-01-25T14:40:50Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -132,14 +159,15 @@ private static Integer resolvePlacement(Integer videoPlacement, String productId\n         return videoPlacement;\n     }\n \n-    private ObjectNode createImpExt(String productId, String zoneId) {\n-        final TtxImpExt ttxImpExt = TtxImpExt.of(TtxImpExtTtx.of(productId, StringUtils.stripToNull(zoneId)));\n+    private ObjectNode createImpExt(String productId, String zoneId, String siteId) {\n+        final TtxImpExt ttxImpExt = TtxImpExt.of(\n+                TtxImpExtTtx.of(productId, StringUtils.isNotEmpty(zoneId) ? zoneId : siteId));\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private HttpRequest<BidRequest> createRequest(BidRequest request, ExtImpTtx extImpTtx, Imp updatedFirstImp) {\n-        final Site updatedSite = extImpTtx != null ? updateSite(request.getSite(), extImpTtx.getSiteId()) : null;\n-        final BidRequest modifiedRequest = updateRequest(request, updatedSite, updatedFirstImp);\n+    private HttpRequest<BidRequest> createRequest(BidRequest request,", "originalCommit": "0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93ac535c623a98ef878b40fe12147b99ac756dd", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\nindex 7bb9f8f44..a04175c13 100644\n--- a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n\n@@ -165,9 +170,11 @@ public class TtxBidder implements Bidder<BidRequest> {\n         return mapper.mapper().valueToTree(ttxImpExt);\n     }\n \n-    private HttpRequest<BidRequest> createRequest(BidRequest request,\n-                                                  Imp requestImp, ExtRequest extRequest) {\n-        final BidRequest modifiedRequest = updateRequest(request, requestImp, extRequest);\n+    private HttpRequest<BidRequest> createRequest(BidRequest request, Imp requestImp, ExtRequest extRequest) {\n+        final BidRequest modifiedRequest = request.toBuilder()\n+                .ext(extRequest)\n+                .imp(Collections.singletonList(requestImp))\n+                .build();\n \n         return HttpRequest.<BidRequest>builder()\n                 .method(HttpMethod.POST)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc3NDI2OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1069#discussion_r563774269", "bodyText": "seems redundant method", "author": "DGarbar", "createdAt": "2021-01-25T14:41:42Z", "path": "src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java", "diffHunk": "@@ -150,27 +178,14 @@ private ObjectNode createImpExt(String productId, String zoneId) {\n                 .build();\n     }\n \n-    private static Site updateSite(Site site, String siteId) {\n-        return site == null ? null : site.toBuilder().id(siteId).build();\n-    }\n+    private static BidRequest updateRequest(BidRequest request, Imp requestImp, ExtRequest extRequest) {", "originalCommit": "0a0edc2cd13a66d7fc96d6eab7a2f710885648c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93ac535c623a98ef878b40fe12147b99ac756dd", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\nindex 7bb9f8f44..a04175c13 100644\n--- a/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/ttx/TtxBidder.java\n\n@@ -178,14 +185,6 @@ public class TtxBidder implements Bidder<BidRequest> {\n                 .build();\n     }\n \n-    private static BidRequest updateRequest(BidRequest request, Imp requestImp, ExtRequest extRequest) {\n-\n-        return request.toBuilder()\n-                .ext(extRequest)\n-                .imp(Collections.singletonList(requestImp))\n-                .build();\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         try {\n"}}, {"oid": "e93ac535c623a98ef878b40fe12147b99ac756dd", "url": "https://github.com/prebid/prebid-server-java/commit/e93ac535c623a98ef878b40fe12147b99ac756dd", "message": "Fixes after review", "committedDate": "2021-01-25T15:09:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgxODEzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1069#discussion_r563818132", "bodyText": "Let's discuss this approach", "author": "DGarbar", "createdAt": "2021-01-25T15:36:13Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/FlexibleExtension.java", "diffHunk": "@@ -19,7 +20,15 @@\n             new TypeReference<Map<String, JsonNode>>() {\n             };\n \n-    private final Map<String, JsonNode> properties = new HashMap<>();\n+    private final Map<String, JsonNode> properties;\n+\n+    protected FlexibleExtension(Map<String, JsonNode> properties) {\n+        this.properties = MapUtils.isNotEmpty(properties) ? new HashMap<>(properties) : new HashMap<>();\n+    }\n+\n+    protected FlexibleExtension() {\n+        this.properties = new HashMap<>();\n+    }", "originalCommit": "e93ac535c623a98ef878b40fe12147b99ac756dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aef3a6eced9072d1e447260436505b447054348", "chunk": "diff --git a/src/main/java/org/prebid/server/proto/openrtb/ext/FlexibleExtension.java b/src/main/java/org/prebid/server/proto/openrtb/ext/FlexibleExtension.java\nindex 8c9f2f32f..7da43c05d 100644\n--- a/src/main/java/org/prebid/server/proto/openrtb/ext/FlexibleExtension.java\n+++ b/src/main/java/org/prebid/server/proto/openrtb/ext/FlexibleExtension.java\n\n@@ -20,15 +19,7 @@ public abstract class FlexibleExtension {\n             new TypeReference<Map<String, JsonNode>>() {\n             };\n \n-    private final Map<String, JsonNode> properties;\n-\n-    protected FlexibleExtension(Map<String, JsonNode> properties) {\n-        this.properties = MapUtils.isNotEmpty(properties) ? new HashMap<>(properties) : new HashMap<>();\n-    }\n-\n-    protected FlexibleExtension() {\n-        this.properties = new HashMap<>();\n-    }\n+    private final Map<String, JsonNode> properties = new HashMap<>();\n \n     public JsonNode getProperty(String property) {\n         return properties.get(property);\n"}}, {"oid": "1aef3a6eced9072d1e447260436505b447054348", "url": "https://github.com/prebid/prebid-server-java/commit/1aef3a6eced9072d1e447260436505b447054348", "message": "Add addProperties instead of constructor creating", "committedDate": "2021-01-27T12:52:54Z", "type": "commit"}, {"oid": "ed48be93d515526d5c7756567656748ad1b7fe10", "url": "https://github.com/prebid/prebid-server-java/commit/ed48be93d515526d5c7756567656748ad1b7fe10", "message": "Remove changes related to core", "committedDate": "2021-01-27T16:13:44Z", "type": "commit"}]}