{"pr_number": 819, "pr_title": "Add Yeahmobi bidder and tests", "pr_createdAt": "2020-07-17T18:54:04Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/819", "timeline": [{"oid": "5c1f2c866550a8863acd0b7e040186e0e8a742b2", "url": "https://github.com/prebid/prebid-server-java/commit/5c1f2c866550a8863acd0b7e040186e0e8a742b2", "message": "Add bidder and tests", "committedDate": "2020-07-17T18:50:57Z", "type": "commit"}, {"oid": "7fc90987e603043e8f95433b832a1deca36699b7", "url": "https://github.com/prebid/prebid-server-java/commit/7fc90987e603043e8f95433b832a1deca36699b7", "message": "Fix impId in test jsons", "committedDate": "2020-07-20T10:02:01Z", "type": "commit"}, {"oid": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "url": "https://github.com/prebid/prebid-server-java/commit/7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "message": "Fix unit test", "committedDate": "2020-07-21T13:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5Njg5OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458796899", "bodyText": "extImpYeahmobi.getZoneId() need to be query escaped", "author": "DGarbar", "createdAt": "2020-07-22T13:36:46Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNTg0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458805844", "bodyText": "They skip injecting if there are any invalid xnative.", "author": "DGarbar", "createdAt": "2020-07-22T13:49:14Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNjQ2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458816464", "bodyText": "They have different logic in GO.\nWe need to work with json that in native.request.\n  \"native\": {\n          \"request\": \"{\\\"native\\\":{}}\\\"\n}\n\nSo if there are no imp.native we do not need to do anything.\nIf there are no imp.native.request JSON NATIVE we need to add this object. You can check their tests to fix our IT tests.", "author": "DGarbar", "createdAt": "2020-07-22T14:03:28Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNjYwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458816603", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-07-22T14:03:41Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxODAzOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458818039", "bodyText": "They do not creating several request. They only creating one", "author": "DGarbar", "createdAt": "2020-07-22T14:05:32Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxODQ2Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458818467", "bodyText": "bug", "author": "DGarbar", "createdAt": "2020-07-22T14:06:10Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDkwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458820902", "bodyText": "In production you'll get  https://{{Host}}/prebid/bidgw-zoneId-bid.yeahtargeter.com\nYou forget to replace {{Host}}, not just add values.", "author": "DGarbar", "createdAt": "2020-07-22T14:09:34Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMjg4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458822887", "bodyText": "just  use return with desirable value", "author": "DGarbar", "createdAt": "2020-07-22T14:12:19Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class YeahmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpYeahmobi>> YEAHMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYeahmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private ExtImpYeahmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YEAHMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+\n+        final String updateNativeRequest;\n+        try {\n+            final JsonNode nativeRequest = imp.getXNative() != null\n+                    ? mapper.mapper().readValue(imp.getXNative().getRequest(), JsonNode.class)\n+                    : null;\n+\n+            final ObjectNode objectNode = mapper.mapper().createObjectNode().set(\"native\", nativeRequest);\n+            updateNativeRequest = nativeRequest != null && nativeRequest.get(\"native\") == null\n+                    ? mapper.mapper().writeValueAsString(objectNode)\n+                    : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+\n+        return updateNativeRequest != null\n+                ? imp.toBuilder().xNative(Native.builder().request(updateNativeRequest).build()).build()\n+                : imp;\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected BidType getBidType(String impId, List<Imp> imps) {\n+        BidType bidType = BidType.banner;\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    break;\n+                } else if (imp.getVideo() != null) {\n+                    bidType = BidType.video;\n+                    break;\n+                } else if (imp.getXNative() != null) {\n+                    bidType = BidType.xNative;\n+                    break;\n+                }", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex cbdf126a9..6263c7080 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -1,6 +1,5 @@\n package org.prebid.server.bidder.yeahmobi;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTYxOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458825619", "bodyText": "changed bc of replacement of host", "author": "DGarbar", "createdAt": "2020-07-22T14:16:05Z", "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\nindex 421df02b0..f52cf914a 100644\n--- a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n\n@@ -36,7 +36,7 @@ import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n \n public class YeahmobiBidderTest extends VertxTest {\n \n-    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/prebid/bid\";\n \n     private YeahmobiBidder yeahmobiBidder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNTkyMw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458825923", "bodyText": "name != what you are testing", "author": "DGarbar", "createdAt": "2020-07-22T14:16:32Z", "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\nindex 421df02b0..f52cf914a 100644\n--- a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n\n@@ -36,7 +36,7 @@ import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n \n public class YeahmobiBidderTest extends VertxTest {\n \n-    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/prebid/bid\";\n \n     private YeahmobiBidder yeahmobiBidder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjQwMA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458826400", "bodyText": "check Go tests, they have different value in there", "author": "DGarbar", "createdAt": "2020-07-22T14:17:08Z", "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        String nativeRequest = \"{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\\\"assets\\\":[{\\\"id\\\":2,\"", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczNTg3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r461735872", "bodyText": "They have the same value, please look carefully imp.native.request", "author": "AndriyPavlyuk", "createdAt": "2020-07-28T17:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1NzE4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463457187", "bodyText": "Ok. This example is working for both GO and current implementation.", "author": "DGarbar", "createdAt": "2020-07-31T07:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\nindex 421df02b0..f52cf914a 100644\n--- a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n\n@@ -36,7 +36,7 @@ import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n \n public class YeahmobiBidderTest extends VertxTest {\n \n-    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/prebid/bid\";\n \n     private YeahmobiBidder yeahmobiBidder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjUzNw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r458826537", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-07-22T14:17:17Z", "path": "src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,274 @@\n+package org.prebid.server.bidder.yeahmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yeahmobi.ExtImpYeahmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class YeahmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private YeahmobiBidder yeahmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        yeahmobiBidder = new YeahmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new YeahmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = yeahmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.comgw-zoneId-bid.yeahtargeter.com\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        String nativeRequest = \"{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\\\"assets\\\":[{\\\"id\\\":2,\"\n+                + \"\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\"\"\n+                + \":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},{\\\"id\\\":7,\"\n+                + \"\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}\";\n+\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build())", "originalCommit": "7dd18c8ecd39ed08174ad125f02ebbd4e1708649", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\nindex 421df02b0..f52cf914a 100644\n--- a/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidderTest.java\n\n@@ -36,7 +36,7 @@ import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n \n public class YeahmobiBidderTest extends VertxTest {\n \n-    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+    private static final String ENDPOINT_URL = \"https://{{Host}}/prebid/bid\";\n \n     private YeahmobiBidder yeahmobiBidder;\n \n"}}, {"oid": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "url": "https://github.com/prebid/prebid-server-java/commit/22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "message": "Change logic of bidder and adding tests", "committedDate": "2020-07-31T08:25:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3ODQ5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463478492", "bodyText": "You need to return error when there are no ExtImpYeahmobi", "author": "DGarbar", "createdAt": "2020-07-31T08:32:48Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -52,20 +52,38 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n \n+        ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                if (extImpYeahmobi == null) {\n+                    extImpYeahmobi = parseImpExt(imp);\n+                }\n                 final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n-                result.add(createSingleRequest(processImp, request, url));\n+                validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n ", "originalCommit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex 6263c7080..6874a6bbf 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -57,9 +57,7 @@ public class YeahmobiBidder implements Bidder<BidRequest> {\n         ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                if (extImpYeahmobi == null) {\n-                    extImpYeahmobi = parseImpExt(imp);\n-                }\n+                extImpYeahmobi = extImpYeahmobi == null ? parseImpExt(imp) : extImpYeahmobi;\n                 final Imp processImp = processImp(imp);\n                 validImps.add(processImp);\n             } catch (PreBidException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MDM2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463480368", "bodyText": "Will be simplified after fix above", "author": "DGarbar", "createdAt": "2020-07-31T08:36:57Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -52,20 +52,38 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n \n+        ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpYeahmobi extImpYeahmobi = parseImpExt(imp);\n+                if (extImpYeahmobi == null) {\n+                    extImpYeahmobi = parseImpExt(imp);\n+                }\n                 final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"gw-\" + extImpYeahmobi.getZoneId() + \"-bid.yeahtargeter.com\";\n-                result.add(createSingleRequest(processImp, request, url));\n+                validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        return Result.of(result, errors);\n+        final String host = extImpYeahmobi != null ? String.format(\"gw-%s-bid.yeahtargeter.com\",\n+                HttpUtil.encodeUrl(extImpYeahmobi.getZoneId())) : null;\n+        final String url = host != null ? endpointUrl.replace(\"{{Host}}\", host) : null;", "originalCommit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex 6263c7080..6874a6bbf 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -57,9 +57,7 @@ public class YeahmobiBidder implements Bidder<BidRequest> {\n         ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                if (extImpYeahmobi == null) {\n-                    extImpYeahmobi = parseImpExt(imp);\n-                }\n+                extImpYeahmobi = extImpYeahmobi == null ? parseImpExt(imp) : extImpYeahmobi;\n                 final Imp processImp = processImp(imp);\n                 validImps.add(processImp);\n             } catch (PreBidException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MTc2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463481768", "bodyText": "gw-sin-bid.yeahtargeter.com\" will be added after above fix", "author": "DGarbar", "createdAt": "2020-07-31T08:39:52Z", "path": "src/test/java/org/prebid/server/it/YeahmobiTest.java", "diffHunk": "@@ -25,7 +25,7 @@\n     public void openrtb2AuctionShouldRespondWithBidsFromYeahmobi() throws IOException, JSONException {\n         // given\n         // AdmixerBidder bid response for imp 001\n-        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/gw-sin-bid.yeahtargeter.com\"))\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/\"))", "originalCommit": "22a0b87096b8c4bc5f26b59fc0b62e174f53bef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "chunk": "diff --git a/src/test/java/org/prebid/server/it/YeahmobiTest.java b/src/test/java/org/prebid/server/it/YeahmobiTest.java\nindex d4b4207d6..f130829b4 100644\n--- a/src/test/java/org/prebid/server/it/YeahmobiTest.java\n+++ b/src/test/java/org/prebid/server/it/YeahmobiTest.java\n\n@@ -24,8 +24,8 @@ public class YeahmobiTest extends IntegrationTest {\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromYeahmobi() throws IOException, JSONException {\n         // given\n-        // AdmixerBidder bid response for imp 001\n-        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/\"))\n+        // YeahmobiBidder bid response for imp 001\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/yeahmobi/test-yeahmobi-bid-request.json\")))\n"}}, {"oid": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "url": "https://github.com/prebid/prebid-server-java/commit/1c735f3c77f826b03db8d3fa27c4cc672ea057da", "message": "Add check for empty value of ExtImpYeahmobi", "committedDate": "2020-07-31T09:12:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDAxMA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463504010", "bodyText": "Use special method. With errors", "author": "DGarbar", "createdAt": "2020-07-31T09:25:09Z", "path": "src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java", "diffHunk": "@@ -57,19 +57,21 @@ public YeahmobiBidder(String endpointUrl, JacksonMapper mapper) {\n         ExtImpYeahmobi extImpYeahmobi = null;\n         for (Imp imp : request.getImp()) {\n             try {\n-                if (extImpYeahmobi == null) {\n-                    extImpYeahmobi = parseImpExt(imp);\n-                }\n+                extImpYeahmobi = extImpYeahmobi == null ? parseImpExt(imp) : extImpYeahmobi;\n                 final Imp processImp = processImp(imp);\n                 validImps.add(processImp);\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        final String host = extImpYeahmobi != null ? String.format(\"gw-%s-bid.yeahtargeter.com\",\n-                HttpUtil.encodeUrl(extImpYeahmobi.getZoneId())) : null;\n-        final String url = host != null ? endpointUrl.replace(\"{{Host}}\", host) : null;\n+        if (extImpYeahmobi == null) {\n+            errors.add(BidderError.badInput(\"Invalid ExtImpYeahmobi value\"));\n+            return Result.of(Collections.emptyList(), errors);", "originalCommit": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65d1ef191c9c3e3b9241e202dd309ac2ea904b63", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\nindex 6874a6bbf..49a82349e 100644\n--- a/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/yeahmobi/YeahmobiBidder.java\n\n@@ -66,8 +66,7 @@ public class YeahmobiBidder implements Bidder<BidRequest> {\n         }\n \n         if (extImpYeahmobi == null) {\n-            errors.add(BidderError.badInput(\"Invalid ExtImpYeahmobi value\"));\n-            return Result.of(Collections.emptyList(), errors);\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid ExtImpYeahmobi value\"));\n         }\n \n         final String host = String.format(\"gw-%s-bid.yeahtargeter.com\", HttpUtil.encodeUrl(extImpYeahmobi.getZoneId()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDQ0MA==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463504440", "bodyText": "Are you sure that /gw-%s-bid.yeahtargeter.com not there ?", "author": "DGarbar", "createdAt": "2020-07-31T09:25:59Z", "path": "src/test/java/org/prebid/server/it/YeahmobiTest.java", "diffHunk": "@@ -24,8 +24,8 @@\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromYeahmobi() throws IOException, JSONException {\n         // given\n-        // AdmixerBidder bid response for imp 001\n-        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange/\"))\n+        // YeahmobiBidder bid response for imp 001\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yeahmobi-exchange\"))", "originalCommit": "1c735f3c77f826b03db8d3fa27c4cc672ea057da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyNDI0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/819#discussion_r463524243", "bodyText": "Not there bc it doesn't override http://localhost:8090/yeahmobi-exchange", "author": "AndriyPavlyuk", "createdAt": "2020-07-31T10:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDQ0MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "65d1ef191c9c3e3b9241e202dd309ac2ea904b63", "url": "https://github.com/prebid/prebid-server-java/commit/65d1ef191c9c3e3b9241e202dd309ac2ea904b63", "message": "Change method of failure", "committedDate": "2020-07-31T10:14:11Z", "type": "commit"}, {"oid": "a277add559ea33a2e13539a7c934e0b2f32159a6", "url": "https://github.com/prebid/prebid-server-java/commit/a277add559ea33a2e13539a7c934e0b2f32159a6", "message": "Merge branch 'master' into add-yeahmobi-bidder", "committedDate": "2020-09-18T07:55:11Z", "type": "commit"}]}