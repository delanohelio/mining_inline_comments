{"pr_number": 908, "pr_title": "Tolerate root fpd fields wrong types", "pr_createdAt": "2020-09-11T14:08:34Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/908", "timeline": [{"oid": "c8343de93bf4e36adea8e16cadc06a62e167de4d", "url": "https://github.com/prebid/prebid-server-java/commit/c8343de93bf4e36adea8e16cadc06a62e167de4d", "message": "Tolerate incorrect fpd types and remove these fields", "committedDate": "2020-09-11T12:30:12Z", "type": "commit"}, {"oid": "80ff48336b43e7c3ebab91aca46ddce684e191e0", "url": "https://github.com/prebid/prebid-server-java/commit/80ff48336b43e7c3ebab91aca46ddce684e191e0", "message": "Fix ortb resolver debug messages and logs", "committedDate": "2020-09-11T14:04:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNDI2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/908#discussion_r487814264", "bodyText": "Pls fix typo.", "author": "rpanchyk", "createdAt": "2020-09-14T10:36:25Z", "path": "src/main/java/org/prebid/server/auction/OrtbTypesResolver.java", "diffHunk": "@@ -95,52 +132,61 @@ void normalizeStandardFpdFields(JsonNode fpdContainerNode, List<String> warnings\n     private void normalizeRequestFpdFields(JsonNode fpdContainerNode, List<String> warnings) {\n         if (fpdContainerNode != null && fpdContainerNode.isObject()) {\n             final ObjectNode fpdContainerObjectNode = (ObjectNode) fpdContainerNode;\n+            final String bidRequestPrefix = BIDREQUEST + \".\";\n             updateWithNormalizedNode(fpdContainerObjectNode, USER, FIRST_ARRAY_ELEMENT_REQUEST_FIELDS,\n-                    COMMA_SEPARATED_ELEMENT_FIELDS, BIDREQUEST_PREFIX, warnings);\n+                    COMMA_SEPARATED_ELEMENT_FIELDS, bidRequestPrefix, warnings);\n             updateWithNormalizedNode(fpdContainerObjectNode, APP, FIRST_ARRAY_ELEMENT_REQUEST_FIELDS,\n-                    COMMA_SEPARATED_ELEMENT_FIELDS, BIDREQUEST_PREFIX, warnings);\n+                    COMMA_SEPARATED_ELEMENT_FIELDS, bidRequestPrefix, warnings);\n             updateWithNormalizedNode(fpdContainerObjectNode, SITE, FIRST_ARRAY_ELEMENT_REQUEST_FIELDS,\n-                    COMMA_SEPARATED_ELEMENT_FIELDS, BIDREQUEST_PREFIX, warnings);\n+                    COMMA_SEPARATED_ELEMENT_FIELDS, bidRequestPrefix, warnings);\n         }\n     }\n \n     private void updateWithNormalizedNode(ObjectNode containerNode, String nodeNameToNormalize,\n                                           Map<String, Set<String>> firstArrayElementsFields,\n                                           Map<String, Set<String>> commaSeparatedElementFields,\n-                                          String nodePrefix,\n-                                          List<String> warnings) {\n+                                          String nodePrefix, List<String> warnings) {\n         final JsonNode normalizedNode = normalizeNode(containerNode.get(nodeNameToNormalize), nodeNameToNormalize,\n                 firstArrayElementsFields, commaSeparatedElementFields, nodePrefix, warnings);\n         if (normalizedNode != null) {\n             containerNode.set(nodeNameToNormalize, normalizedNode);\n+        } else {\n+            containerNode.remove(nodeNameToNormalize);\n         }\n     }\n \n     private JsonNode normalizeNode(JsonNode containerNode, String nodeName,\n                                    Map<String, Set<String>> firstArrayElementsFields,\n                                    Map<String, Set<String>> commaSeparatedElementFields,\n-                                   String nodePrefix,\n-                                   List<String> warnings) {\n-        if (containerNode != null && containerNode.isObject()) {\n-            final ObjectNode containerObjectNode = (ObjectNode) containerNode;\n-\n-            CollectionUtils.emptyIfNull(firstArrayElementsFields.get(nodeName))\n-                    .forEach(fieldName -> updateWithNormalizedField(containerObjectNode, fieldName,\n-                            () -> toFirstElementTextNode(containerObjectNode, fieldName, nodeName, nodePrefix,\n-                                    warnings)));\n-\n-            CollectionUtils.emptyIfNull(commaSeparatedElementFields.get(nodeName))\n-                    .forEach(fieldName -> updateWithNormalizedField(containerObjectNode, fieldName,\n-                            () -> toCommaSeparatedTextNode(containerObjectNode, fieldName, nodeName, nodePrefix,\n-                                    warnings)));\n+                                   String nodePrefix, List<String> warnings) {\n+        if (containerNode != null) {\n+            if (containerNode.isObject()) {\n+                final ObjectNode containerObjectNode = (ObjectNode) containerNode;\n+\n+                CollectionUtils.emptyIfNull(firstArrayElementsFields.get(nodeName))\n+                        .forEach(fieldName -> updateWithNormalizedField(containerObjectNode, fieldName,\n+                                () -> toFirstElementTextNode(containerObjectNode, fieldName, nodeName, nodePrefix,\n+                                        warnings)));\n+\n+                CollectionUtils.emptyIfNull(commaSeparatedElementFields.get(nodeName))\n+                        .forEach(fieldName -> updateWithNormalizedField(containerObjectNode, fieldName,\n+                                () -> toCommaSeparatedTextNode(containerObjectNode, fieldName, nodeName, nodePrefix,\n+                                        warnings)));\n+            } else {\n+                warnings.add(String.format(\"FDP warning: %s%s field ignored. Expected type is object, but was `%s`.\",", "originalCommit": "80ff48336b43e7c3ebab91aca46ddce684e191e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}