{"pr_number": 1053, "pr_title": "Review conversant adapter", "pr_createdAt": "2020-12-04T05:07:53Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/1053", "timeline": [{"oid": "9e8826a204c04b96d2e016bb5771806a85e0fd76", "url": "https://github.com/prebid/prebid-server-java/commit/9e8826a204c04b96d2e016bb5771806a85e0fd76", "message": "Review conversant adapter", "committedDate": "2020-12-04T07:43:20Z", "type": "commit"}, {"oid": "9e8826a204c04b96d2e016bb5771806a85e0fd76", "url": "https://github.com/prebid/prebid-server-java/commit/9e8826a204c04b96d2e016bb5771806a85e0fd76", "message": "Review conversant adapter", "committedDate": "2020-12-04T07:43:20Z", "type": "forcePushed"}, {"oid": "80de8d2ecb6f6438c54a41daa856ea592a68a99b", "url": "https://github.com/prebid/prebid-server-java/commit/80de8d2ecb6f6438c54a41daa856ea592a68a99b", "message": "Pos set logic update", "committedDate": "2020-12-04T10:43:42Z", "type": "commit"}, {"oid": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "url": "https://github.com/prebid/prebid-server-java/commit/967693ad1ef7281a2e161e2c5636cfeee9caf230", "message": "Fixes after review", "committedDate": "2020-12-04T14:40:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MTYzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536151632", "bodyText": "I also noticed that changes, but kept them as it is, bc it was from the start of this bidder.\n@rpanchyk  what you say ?", "author": "DGarbar", "createdAt": "2020-12-04T14:47:45Z", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -130,97 +129,105 @@ private static App updateApp(App app, String siteId) {\n     }\n \n     private static Imp modifyImp(Imp imp, ExtImpConversant impExt) {\n-        final BigDecimal extBidfloor = impExt.getBidfloor();\n-        final String extTagId = impExt.getTagId();\n-        final Integer extSecure = impExt.getSecure();\n-        final boolean shouldChangeSecure = extSecure != null && (imp.getSecure() == null || imp.getSecure() == 0);\n-        final Banner impBanner = imp.getBanner();\n-        final Integer extPosition = impExt.getPosition();\n-        final Video impVideo = imp.getVideo();\n+        final Banner banner = imp.getBanner();\n+        final Video video = imp.getVideo();\n \n         return imp.toBuilder()\n                 .displaymanager(DISPLAY_MANAGER)\n                 .displaymanagerver(DISPLAY_MANAGER_VER)\n-                .banner(modifyBanner(impBanner, extPosition))\n-                .bidfloor(extBidfloor != null ? extBidfloor : imp.getBidfloor())\n-                .tagid(extTagId != null ? extTagId : imp.getTagid())\n-                .secure(shouldChangeSecure ? extSecure : imp.getSecure())\n-                .video(impVideo != null && impBanner == null ? modifyVideo(impVideo, impExt) : impVideo)\n+                .bidfloor(impExt.getBidfloor())\n+                .tagid(impExt.getTagId())", "originalCommit": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDI2Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536980266", "bodyText": "i'd say we should be compatible with original implementation.\nThus, let's apply these two field unconditionally.", "author": "rpanchyk", "createdAt": "2020-12-06T07:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "490c5eae69289b33bb39623cc4a3b56591d7460f", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\nindex 1b96dd56..cae7fcab 100644\n--- a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n\n@@ -203,7 +203,7 @@ public class ConversantBidder implements Bidder<BidRequest> {\n         try {\n             bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n         } catch (DecodeException e) {\n-            throw new PreBidException(String.format(\"bad server response: %s. \", e.getMessage()));\n+            throw new PreBidException(e.getMessage());\n         }\n         if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n             throw new PreBidException(\"Empty bid request\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4OTc0Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536389747", "bodyText": "not necessary. In go the don't have null", "author": "DGarbar", "createdAt": "2020-12-04T21:27:59Z", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -115,7 +114,7 @@ private ExtImpConversant parseImpExt(Imp imp, int impIndex) {\n             throw new PreBidException(String.format(\"Impression[%d] missing ext.bidder object\", impIndex));\n         }\n \n-        if (StringUtils.isBlank(extImp.getSiteId())) {\n+        if (StringUtils.isEmpty(extImp.getSiteId())) {", "originalCommit": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDU4Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536980582", "bodyText": "What if siteId is whitespace?\nFrankly, isBlank should be used only if we really need it but in this case it will make additional logic.", "author": "rpanchyk", "createdAt": "2020-12-06T07:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4OTc0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDk1Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536394952", "bodyText": "Put this method above modify video", "author": "DGarbar", "createdAt": "2020-12-04T21:39:35Z", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -130,97 +129,105 @@ private static App updateApp(App app, String siteId) {\n     }\n \n     private static Imp modifyImp(Imp imp, ExtImpConversant impExt) {\n-        final BigDecimal extBidfloor = impExt.getBidfloor();\n-        final String extTagId = impExt.getTagId();\n-        final Integer extSecure = impExt.getSecure();\n-        final boolean shouldChangeSecure = extSecure != null && (imp.getSecure() == null || imp.getSecure() == 0);\n-        final Banner impBanner = imp.getBanner();\n-        final Integer extPosition = impExt.getPosition();\n-        final Video impVideo = imp.getVideo();\n+        final Banner banner = imp.getBanner();\n+        final Video video = imp.getVideo();\n \n         return imp.toBuilder()\n                 .displaymanager(DISPLAY_MANAGER)\n                 .displaymanagerver(DISPLAY_MANAGER_VER)\n-                .banner(modifyBanner(impBanner, extPosition))\n-                .bidfloor(extBidfloor != null ? extBidfloor : imp.getBidfloor())\n-                .tagid(extTagId != null ? extTagId : imp.getTagid())\n-                .secure(shouldChangeSecure ? extSecure : imp.getSecure())\n-                .video(impVideo != null && impBanner == null ? modifyVideo(impVideo, impExt) : impVideo)\n+                .bidfloor(impExt.getBidfloor())\n+                .tagid(impExt.getTagId())\n+                .secure(getSecure(imp, impExt))\n+                .banner(modifyBanner(banner, impExt.getPosition()))\n+                .video(video != null && banner == null ? modifyVideo(video, impExt) : video)\n                 .build();\n     }\n \n+    private static Integer getSecure(Imp imp, ExtImpConversant impExt) {\n+        final Integer extSecure = impExt.getSecure();\n+        final Integer impSecure = imp.getSecure();\n+\n+        return extSecure != null && (impSecure == null || impSecure == 0) ? extSecure : impSecure;\n+    }\n+\n     private static Banner modifyBanner(Banner impBanner, Integer extPosition) {\n-        return impBanner == null || extPosition == null\n-                ? impBanner\n+        return impBanner == null\n+                ? null\n                 : impBanner.toBuilder()\n-                .pos(AD_POSITIONS.contains(extPosition) ? extPosition : null)\n+                .pos(isValidPosition(extPosition) ? extPosition : null)\n                 .build();\n     }\n \n     private static Video modifyVideo(Video video, ExtImpConversant impExt) {\n         final List<String> extMimes = impExt.getMimes();\n-        final Integer extMaxduration = impExt.getMaxduration();\n+        final Integer extMaxDuration = impExt.getMaxduration();\n         final Integer extPosition = impExt.getPosition();\n-        final List<Integer> extProtocols = impExt.getProtocols();\n-        final List<Integer> extApi = impExt.getApi();\n         return video.toBuilder()\n-                .mimes(extMimes != null ? extMimes : video.getMimes())\n-                .maxduration(extMaxduration != null ? extMaxduration : video.getMaxduration())\n-                .pos(makePosition(extPosition, video.getPos()))\n-                .api(makeApi(extApi, video.getApi()))\n-                .protocols(makeProtocols(extProtocols, video.getProtocols()))\n+                .mimes(CollectionUtils.isNotEmpty(extMimes) ? extMimes : video.getMimes())\n+                .maxduration(extMaxDuration != null ? extMaxDuration : video.getMaxduration())\n+                .pos(isValidPosition(extPosition) ? extPosition : null)\n+                .api(makeApi(impExt.getApi(), video.getApi()))\n+                .protocols(makeProtocols(impExt.getProtocols(), video.getProtocols()))\n                 .build();\n     }\n \n-    private static Integer makePosition(Integer position, Integer videoPos) {\n-        return isValidPosition(position) ? position : isValidPosition(videoPos) ? videoPos : null;\n-    }\n-\n     private static boolean isValidPosition(Integer position) {", "originalCommit": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MzExMA==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536983110", "bodyText": "Not sure in this case.\nWe have two subsequent methods modifyBanner(..) & modifyVideo(..) and the they use common functionality.", "author": "rpanchyk", "createdAt": "2020-12-06T08:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NDk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "490c5eae69289b33bb39623cc4a3b56591d7460f", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\nindex 1b96dd56..cae7fcab 100644\n--- a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n\n@@ -203,7 +203,7 @@ public class ConversantBidder implements Bidder<BidRequest> {\n         try {\n             bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n         } catch (DecodeException e) {\n-            throw new PreBidException(String.format(\"bad server response: %s. \", e.getMessage()));\n+            throw new PreBidException(e.getMessage());\n         }\n         if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n             throw new PreBidException(\"Empty bid request\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5OTI4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536399284", "bodyText": "didn't see that check", "author": "DGarbar", "createdAt": "2020-12-04T21:49:02Z", "path": "src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java", "diffHunk": "@@ -130,97 +129,105 @@ private static App updateApp(App app, String siteId) {\n     }\n \n     private static Imp modifyImp(Imp imp, ExtImpConversant impExt) {\n-        final BigDecimal extBidfloor = impExt.getBidfloor();\n-        final String extTagId = impExt.getTagId();\n-        final Integer extSecure = impExt.getSecure();\n-        final boolean shouldChangeSecure = extSecure != null && (imp.getSecure() == null || imp.getSecure() == 0);\n-        final Banner impBanner = imp.getBanner();\n-        final Integer extPosition = impExt.getPosition();\n-        final Video impVideo = imp.getVideo();\n+        final Banner banner = imp.getBanner();\n+        final Video video = imp.getVideo();\n \n         return imp.toBuilder()\n                 .displaymanager(DISPLAY_MANAGER)\n                 .displaymanagerver(DISPLAY_MANAGER_VER)\n-                .banner(modifyBanner(impBanner, extPosition))\n-                .bidfloor(extBidfloor != null ? extBidfloor : imp.getBidfloor())\n-                .tagid(extTagId != null ? extTagId : imp.getTagid())\n-                .secure(shouldChangeSecure ? extSecure : imp.getSecure())\n-                .video(impVideo != null && impBanner == null ? modifyVideo(impVideo, impExt) : impVideo)\n+                .bidfloor(impExt.getBidfloor())\n+                .tagid(impExt.getTagId())\n+                .secure(getSecure(imp, impExt))\n+                .banner(modifyBanner(banner, impExt.getPosition()))\n+                .video(video != null && banner == null ? modifyVideo(video, impExt) : video)\n                 .build();\n     }\n \n+    private static Integer getSecure(Imp imp, ExtImpConversant impExt) {\n+        final Integer extSecure = impExt.getSecure();\n+        final Integer impSecure = imp.getSecure();\n+\n+        return extSecure != null && (impSecure == null || impSecure == 0) ? extSecure : impSecure;\n+    }\n+\n     private static Banner modifyBanner(Banner impBanner, Integer extPosition) {\n-        return impBanner == null || extPosition == null\n-                ? impBanner\n+        return impBanner == null\n+                ? null\n                 : impBanner.toBuilder()\n-                .pos(AD_POSITIONS.contains(extPosition) ? extPosition : null)\n+                .pos(isValidPosition(extPosition) ? extPosition : null)\n                 .build();\n     }\n \n     private static Video modifyVideo(Video video, ExtImpConversant impExt) {\n         final List<String> extMimes = impExt.getMimes();\n-        final Integer extMaxduration = impExt.getMaxduration();\n+        final Integer extMaxDuration = impExt.getMaxduration();\n         final Integer extPosition = impExt.getPosition();\n-        final List<Integer> extProtocols = impExt.getProtocols();\n-        final List<Integer> extApi = impExt.getApi();\n         return video.toBuilder()\n-                .mimes(extMimes != null ? extMimes : video.getMimes())\n-                .maxduration(extMaxduration != null ? extMaxduration : video.getMaxduration())\n-                .pos(makePosition(extPosition, video.getPos()))\n-                .api(makeApi(extApi, video.getApi()))\n-                .protocols(makeProtocols(extProtocols, video.getProtocols()))\n+                .mimes(CollectionUtils.isNotEmpty(extMimes) ? extMimes : video.getMimes())\n+                .maxduration(extMaxDuration != null ? extMaxDuration : video.getMaxduration())\n+                .pos(isValidPosition(extPosition) ? extPosition : null)\n+                .api(makeApi(impExt.getApi(), video.getApi()))\n+                .protocols(makeProtocols(impExt.getProtocols(), video.getProtocols()))\n                 .build();\n     }\n \n-    private static Integer makePosition(Integer position, Integer videoPos) {\n-        return isValidPosition(position) ? position : isValidPosition(videoPos) ? videoPos : null;\n-    }\n-\n     private static boolean isValidPosition(Integer position) {\n         return position != null && AD_POSITIONS.contains(position);\n     }\n \n     private static List<Integer> makeApi(List<Integer> extApi, List<Integer> videoApi) {\n-        final List<Integer> protocols = CollectionUtils.isNotEmpty(extApi) ? extApi : videoApi;\n-        return CollectionUtils.isNotEmpty(protocols)\n-                ? protocols.stream().filter(APIS::contains).collect(Collectors.toList()) : videoApi;\n+        final List<Integer> api = CollectionUtils.isNotEmpty(extApi) ? extApi : videoApi;\n+        return CollectionUtils.isNotEmpty(api)\n+                ? api.stream().filter(APIS::contains).collect(Collectors.toList())\n+                : videoApi;\n     }\n \n     private static List<Integer> makeProtocols(List<Integer> extProtocols, List<Integer> videoProtocols) {\n         final List<Integer> protocols = CollectionUtils.isNotEmpty(extProtocols) ? extProtocols : videoProtocols;\n         return CollectionUtils.isNotEmpty(protocols)\n-                ? protocols.stream().filter(PROTOCOLS::contains).collect(Collectors.toList()) : videoProtocols;\n+                ? protocols.stream().filter(PROTOCOLS::contains).collect(Collectors.toList())\n+                : videoProtocols;\n     }\n \n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         try {\n-            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-            return Result.withValues(extractBids(httpCall.getRequest().getPayload(), bidResponse));\n-        } catch (DecodeException | PreBidException e) {\n+            return Result.withValues(extractBids(httpCall));\n+        } catch (PreBidException e) {\n             return Result.withError(BidderError.badServerResponse(e.getMessage()));\n         }\n     }\n \n-    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+    private List<BidderBid> extractBids(HttpCall<BidRequest> httpCall) {\n+        final BidResponse bidResponse;\n+        try {\n+            bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(String.format(\"bad server response: %s. \", e.getMessage()));\n+        }\n         if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n             throw new PreBidException(\"Empty bid request\");\n         }\n-        return bidsFromResponse(bidRequest, bidResponse);\n+        return bidsFromResponse(httpCall.getRequest().getPayload(), bidResponse);\n     }\n \n     private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n         final SeatBid firstSeatBid = bidResponse.getSeatbid().get(0);\n-        return firstSeatBid.getBid().stream()\n+        final List<Bid> bids = firstSeatBid.getBid();\n+\n+        if (CollectionUtils.isEmpty(bids)) {\n+            throw new PreBidException(\"Empty bids array\");\n+        }\n+        return bids.stream()", "originalCommit": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MjE5OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536982199", "bodyText": "Rethinking...\nSeems you're right, but this check is very similar to existing one - Empty bid request.\nSo, what we should do if seatbid.bid array is empty?\ni'd say it was for compatibility. What do you think?", "author": "rpanchyk", "createdAt": "2020-12-06T07:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5OTI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "490c5eae69289b33bb39623cc4a3b56591d7460f", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\nindex 1b96dd56..cae7fcab 100644\n--- a/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/conversant/ConversantBidder.java\n\n@@ -203,7 +203,7 @@ public class ConversantBidder implements Bidder<BidRequest> {\n         try {\n             bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n         } catch (DecodeException e) {\n-            throw new PreBidException(String.format(\"bad server response: %s. \", e.getMessage()));\n+            throw new PreBidException(e.getMessage());\n         }\n         if (bidResponse == null || CollectionUtils.isEmpty(bidResponse.getSeatbid())) {\n             throw new PreBidException(\"Empty bid request\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwMjU5NA==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536402594", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-12-04T21:52:18Z", "path": "src/test/java/org/prebid/server/bidder/conversant/ConversantBidderTest.java", "diffHunk": "@@ -449,8 +506,11 @@ public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n         assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);", "originalCommit": "967693ad1ef7281a2e161e2c5636cfeee9caf230", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MDkwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536980908", "bodyText": "You mean we need to keep back the error message?", "author": "rpanchyk", "createdAt": "2020-12-06T07:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwMjU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk4MjQ3Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/1053#discussion_r536982477", "bodyText": "agreed.", "author": "rpanchyk", "createdAt": "2020-12-06T08:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwMjU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "490c5eae69289b33bb39623cc4a3b56591d7460f", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/conversant/ConversantBidderTest.java b/src/test/java/org/prebid/server/bidder/conversant/ConversantBidderTest.java\nindex 159adc83..e87a2506 100644\n--- a/src/test/java/org/prebid/server/bidder/conversant/ConversantBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/conversant/ConversantBidderTest.java\n\n@@ -505,12 +505,11 @@ public class ConversantBidderTest extends VertxTest {\n         final Result<List<BidderBid>> result = conversantBidder.makeBids(httpCall, null);\n \n         // then\n-        assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n-        assertThat(result.getErrors()).allSatisfy(error -> {\n-            assertThat(error.getType()).isEqualTo(BidderError.Type.bad_server_response);\n-            assertThat(error.getMessage()).contains(\"bad server response: Failed to decode: Unrecognized token\");\n-        });\n+        assertThat(result.getErrors()).hasSize(1)\n+                .allSatisfy(error -> {\n+                    assertThat(error.getType()).isEqualTo(BidderError.Type.bad_server_response);\n+                    assertThat(error.getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+                });\n         assertThat(result.getValue()).isEmpty();\n     }\n \n"}}, {"oid": "490c5eae69289b33bb39623cc4a3b56591d7460f", "url": "https://github.com/prebid/prebid-server-java/commit/490c5eae69289b33bb39623cc4a3b56591d7460f", "message": "Fixes after review", "committedDate": "2020-12-06T08:14:53Z", "type": "commit"}]}