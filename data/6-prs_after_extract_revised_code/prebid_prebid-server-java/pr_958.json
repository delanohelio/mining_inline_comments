{"pr_number": 958, "pr_title": "Add krushmedia bidder", "pr_createdAt": "2020-10-15T10:53:20Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/958", "timeline": [{"oid": "8db5a88cbc9d143e7cf753844ed11bf6925753dc", "url": "https://github.com/prebid/prebid-server-java/commit/8db5a88cbc9d143e7cf753844ed11bf6925753dc", "message": "Add krushmedia bidder", "committedDate": "2020-10-15T13:31:25Z", "type": "forcePushed"}, {"oid": "b3456894efa824f6632c8c8c1051205286339231", "url": "https://github.com/prebid/prebid-server-java/commit/b3456894efa824f6632c8c8c1051205286339231", "message": "Add krushmedia bidder", "committedDate": "2020-10-15T22:50:37Z", "type": "commit"}, {"oid": "b3456894efa824f6632c8c8c1051205286339231", "url": "https://github.com/prebid/prebid-server-java/commit/b3456894efa824f6632c8c8c1051205286339231", "message": "Add krushmedia bidder", "committedDate": "2020-10-15T22:50:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NjAyNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506476025", "bodyText": "use PreBidException", "author": "DGarbar", "createdAt": "2020-10-16T14:18:45Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3Njc2Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506476763", "bodyText": "unmarshalling", "author": "DGarbar", "createdAt": "2020-10-16T14:19:41Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3ODA5NA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506478094", "bodyText": "extract into const URI_ACCOUNT_ID_MACRO", "author": "DGarbar", "createdAt": "2020-10-16T14:21:23Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3OTI5Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506479296", "bodyText": "You can omit validation (and check above only for PrebidException)", "author": "DGarbar", "createdAt": "2020-10-16T14:22:44Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4MzEyNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506483125", "bodyText": "/n .build();", "author": "DGarbar", "createdAt": "2020-10-16T14:27:03Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4ODU2NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506488565", "bodyText": "Can be more clear: removeFirstImpExt", "author": "DGarbar", "createdAt": "2020-10-16T14:32:03Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4ODk4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506488988", "bodyText": "use this style\n return IntStream.range(0, imps.size())\n                .mapToObj(impIndex -> impIndex == 0\n                        ? imps.get(impIndex).toBuilder().ext(null).build()\n                        : imps.get(impIndex))\n                .collect(Collectors.toList());", "author": "DGarbar", "createdAt": "2020-10-16T14:32:30Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));\n+    }\n+\n+    private static List<Imp> resolveUpdatedImpList(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build() : imps.get(impIndex))", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MDk3Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506490976", "bodyText": "Prefer to use isNotBlank.\nIn GO they have always default values (\"\") so it is hard to distinguish their meaning of check", "author": "DGarbar", "createdAt": "2020-10-16T14:34:27Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));\n+    }\n+\n+    private static List<Imp> resolveUpdatedImpList(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build() : imps.get(impIndex))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NjM3NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506496375", "bodyText": "prefer this style\n        final SeatBid firstSeatBid = bidResponse.getSeatbid().get(0);\n        return firstSeatBid.getBid().stream()\n                .filter(Objects::nonNull)\n                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), bidResponse.getCur()))\n                .collect(Collectors.toList());", "author": "DGarbar", "createdAt": "2020-10-16T14:39:52Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));\n+    }\n+\n+    private static List<Imp> resolveUpdatedImpList(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build() : imps.get(impIndex))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {\n+                headers.add(\"User-Agent\", device.getUa());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            }\n+            if (StringUtils.isNotEmpty(device.getLanguage())) {\n+                headers.add(\"Accept-Language\", device.getLanguage());\n+            }\n+            if (device.getDnt() != null) {\n+                headers.add(\"Accept-Language\", device.getDnt().toString());\n+            }\n+        }\n+\n+        return headers;\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.empty();\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NzE1NA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506497154", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-10-16T14:40:37Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMDQzOA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506500438", "bodyText": "rename", "author": "DGarbar", "createdAt": "2020-10-16T14:44:08Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error while unmarshaling bidder extension\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.com/prebid/bid&key=accountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMjQxOA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506502418", "bodyText": "Do we really need this test?\nWe can change it to \"ShouldRemoveFirsImpExt\" and test real logic", "author": "DGarbar", "createdAt": "2020-10-16T14:46:22Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error while unmarshaling bidder extension\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.com/prebid/bid&key=accountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMjk2Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506502963", "bodyText": "format is redundant.\nThen it can be 1 line", "author": "DGarbar", "createdAt": "2020-10-16T14:47:00Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error while unmarshaling bidder extension\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwNTM5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506505392", "bodyText": "assertThat(result.getValue()).hasSize(1)\n                .extracting(HttpRequest::getUri)\n                .containsOnly(\"https://test.com/prebid/bid&key=accountId\");", "author": "DGarbar", "createdAt": "2020-10-16T14:50:03Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error while unmarshaling bidder extension\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.com/prebid/bid&key=accountId\");", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwNjY5NA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506506694", "bodyText": "Add test\nmakeBidsShouldReturnEmptyBidderBidsFromFirstSeatBid", "author": "DGarbar", "createdAt": "2020-10-16T14:51:38Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.xNative;\n+\n+public class KrushmediaBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.com/prebid/bid&key={{AccountID}}\";\n+\n+    private KrushmediaBidder krushmediaBidder;\n+\n+    @Before\n+    public void setUp() {\n+        krushmediaBidder = new KrushmediaBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new KrushmediaBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Error while unmarshaling bidder extension\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.com/prebid/bid&key=accountId\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotNativeRequestIfAlreadyExists() {\n+        // given\n+        String nativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\"\n+                + \"\\\"img\\\":{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\"\n+                + \"\\\"image/png\\\"]}},{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder().build())\n+                        .xNative(Native.builder().request(nativeRequest).build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = krushmediaBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        String expectedNativeRequest = \"{\\\"native\\\":{\\\"ver\\\":\\\"1.2\\\",\\\"context\\\":1,\\\"plcmttype\\\":4,\\\"plcmtcnt\\\":1,\"\n+                + \"\\\"assets\\\":[{\\\"id\\\":2,\\\"required\\\":1,\\\"title\\\":{\\\"len\\\":90}},{\\\"id\\\":6,\\\"required\\\":1,\\\"img\\\":\"\n+                + \"{\\\"type\\\":3,\\\"wmin\\\":128,\\\"hmin\\\":128,\\\"mimes\\\":[\\\"image/jpg\\\",\\\"image/jpeg\\\",\\\"image/png\\\"]}},\"\n+                + \"{\\\"id\\\":7,\\\"required\\\":1,\\\"data\\\":{\\\"type\\\":2,\\\"len\\\":120}}]}}\";\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getXNative)\n+                .extracting(Native::getRequest)\n+                .containsOnly(expectedNativeRequest);\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = krushmediaBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = krushmediaBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex a4926165d..1a1f26842 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -3,7 +3,6 @@ package org.prebid.server.bidder.krushmedia;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.iab.openrtb.request.Banner;\n import com.iab.openrtb.request.BidRequest;\n-import com.iab.openrtb.request.Format;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.request.Native;\n import com.iab.openrtb.request.Video;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwODIwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506508204", "bodyText": "Krushmedia or remove", "author": "DGarbar", "createdAt": "2020-10-16T14:52:51Z", "path": "src/test/java/org/prebid/server/it/KrushmediaTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class KrushmediaTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n+        // given\n+        // Logicad bid response for imp", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/it/KrushmediaTest.java b/src/test/java/org/prebid/server/it/KrushmediaTest.java\nindex c3bb5585f..3e8387417 100644\n--- a/src/test/java/org/prebid/server/it/KrushmediaTest.java\n+++ b/src/test/java/org/prebid/server/it/KrushmediaTest.java\n\n@@ -25,19 +25,24 @@ public class KrushmediaTest extends IntegrationTest {\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n         // given\n-        // Logicad bid response for imp\n+        // Krushmedia bid response for imp\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n+                .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Dnt\", equalToIgnoreCase(\"0\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-response.json\"))));\n \n         // pre-bid cache\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-request.json\")))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-response.json\"))));\n \n         // when\n         final Response response = given(SPEC)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxMDI1NA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506510254", "bodyText": "Rename this and files to be for krushmedia", "author": "DGarbar", "createdAt": "2020-10-16T14:54:33Z", "path": "src/test/java/org/prebid/server/it/KrushmediaTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class KrushmediaTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n+        // given\n+        // Logicad bid response for imp\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/it/KrushmediaTest.java b/src/test/java/org/prebid/server/it/KrushmediaTest.java\nindex c3bb5585f..3e8387417 100644\n--- a/src/test/java/org/prebid/server/it/KrushmediaTest.java\n+++ b/src/test/java/org/prebid/server/it/KrushmediaTest.java\n\n@@ -25,19 +25,24 @@ public class KrushmediaTest extends IntegrationTest {\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n         // given\n-        // Logicad bid response for imp\n+        // Krushmedia bid response for imp\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n+                .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Dnt\", equalToIgnoreCase(\"0\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-response.json\"))));\n \n         // pre-bid cache\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-request.json\")))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-response.json\"))));\n \n         // when\n         final Response response = given(SPEC)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxMjU1Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506512557", "bodyText": "Dnt", "author": "DGarbar", "createdAt": "2020-10-16T14:55:58Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(resolveUpdatedImpList(request.getImp())).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshaling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+\n+        return HttpUtil.validateUrl(endpointUrl.replace(\"{{AccountID}}\", accountId));\n+    }\n+\n+    private static List<Imp> resolveUpdatedImpList(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build() : imps.get(impIndex))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotEmpty(device.getUa())) {\n+                headers.add(\"User-Agent\", device.getUa());\n+            }\n+            if (StringUtils.isNotEmpty(device.getIp())) {\n+                headers.add(\"X-Forwarded-For\", device.getIp());\n+            }\n+            if (StringUtils.isNotEmpty(device.getLanguage())) {\n+                headers.add(\"Accept-Language\", device.getLanguage());\n+            }\n+            if (device.getDnt() != null) {\n+                headers.add(\"Accept-Language\", device.getDnt().toString());", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 788f3fd2a..449062e89 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -6,9 +6,11 @@ import com.iab.openrtb.request.BidRequest;\n import com.iab.openrtb.request.Device;\n import com.iab.openrtb.request.Imp;\n import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import io.vertx.core.MultiMap;\n import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.prebid.server.bidder.Bidder;\n import org.prebid.server.bidder.model.BidderBid;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxNDg3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506514874", "bodyText": "Try to make scenario to include more cases.\nFor example add to auction-request device this value and check also for new headers\n   \"ua\": \"userAgent\",\n    \"dnt\": 2,\n    \"ip\": \"193.168.244.1\",\n    \"pxratio\": 4.2,\n    \"language\": \"en\",\n    \"ifa\": \"ifaId\"", "author": "DGarbar", "createdAt": "2020-10-16T14:58:00Z", "path": "src/test/java/org/prebid/server/it/KrushmediaTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class KrushmediaTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n+        // given\n+        // Logicad bid response for imp\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/it/KrushmediaTest.java b/src/test/java/org/prebid/server/it/KrushmediaTest.java\nindex c3bb5585f..3e8387417 100644\n--- a/src/test/java/org/prebid/server/it/KrushmediaTest.java\n+++ b/src/test/java/org/prebid/server/it/KrushmediaTest.java\n\n@@ -25,19 +25,24 @@ public class KrushmediaTest extends IntegrationTest {\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n         // given\n-        // Logicad bid response for imp\n+        // Krushmedia bid response for imp\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n+                .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Dnt\", equalToIgnoreCase(\"0\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-response.json\"))));\n \n         // pre-bid cache\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-request.json\")))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-response.json\"))));\n \n         // when\n         final Response response = given(SPEC)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxNTE3Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r506515173", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-10-16T14:58:13Z", "path": "src/test/java/org/prebid/server/it/KrushmediaTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToIgnoreCase;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class KrushmediaTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n+        // given\n+        // Logicad bid response for imp\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .willReturn(aResponse().withBody(\n+                        jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-response.json\"))));\n+\n+        // pre-bid cache\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-request.json\")))\n+                .willReturn(aResponse().withBody(\n+                        jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-response.json\"))));\n+\n+        // when\n+        final Response response = given(SPEC)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                // this uids cookie value stands for {\"uids\":{\"krushmedia\":\"KM-UID\"}}\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImtydXNobWVkaWEiOiJLTS1VSUQifX0=\")\n+                .body(jsonFrom(\"openrtb2/krushmedia/test-auction-logicad-request.json\"))\n+                .post(\"/openrtb2/auction\");\n+\n+        // then\n+        final String expectedAuctionResponse = openrtbAuctionResponseFrom(\n+                \"openrtb2/krushmedia/test-auction-logicad-response.json\",\n+                response, singletonList(\"krushmedia\"));\n+\n+        JSONAssert.assertEquals(expectedAuctionResponse, response.asString(), JSONCompareMode.NON_EXTENSIBLE);\n+    }\n+}\n+\n+\n+", "originalCommit": "b3456894efa824f6632c8c8c1051205286339231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "chunk": "diff --git a/src/test/java/org/prebid/server/it/KrushmediaTest.java b/src/test/java/org/prebid/server/it/KrushmediaTest.java\nindex c3bb5585f..3e8387417 100644\n--- a/src/test/java/org/prebid/server/it/KrushmediaTest.java\n+++ b/src/test/java/org/prebid/server/it/KrushmediaTest.java\n\n@@ -25,19 +25,24 @@ public class KrushmediaTest extends IntegrationTest {\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n         // given\n-        // Logicad bid response for imp\n+        // Krushmedia bid response for imp\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n+                .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n+                .withHeader(\"Dnt\", equalToIgnoreCase(\"0\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-response.json\"))));\n \n         // pre-bid cache\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-request.json\")))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-request.json\")))\n                 .willReturn(aResponse().withBody(\n-                        jsonFrom(\"openrtb2/krushmedia/test-cache-logicad-response.json\"))));\n+                        jsonFrom(\"openrtb2/krushmedia/test-cache-krushmedia-response.json\"))));\n \n         // when\n         final Response response = given(SPEC)\n"}}, {"oid": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "url": "https://github.com/prebid/prebid-server-java/commit/11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "message": "Fixes after review", "committedDate": "2020-10-19T00:05:05Z", "type": "commit"}, {"oid": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "url": "https://github.com/prebid/prebid-server-java/commit/11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "message": "Fixes after review", "committedDate": "2020-10-19T00:05:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMDkzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r508400933", "bodyText": "redundant", "author": "DGarbar", "createdAt": "2020-10-20T10:49:35Z", "path": "src/test/java/org/prebid/server/it/KrushmediaTest.java", "diffHunk": "@@ -25,19 +25,24 @@\n     @Test\n     public void openrtb2AuctionShouldRespondWithBidsFromKrushmedia() throws IOException, JSONException {\n         // given\n-        // Logicad bid response for imp\n+        // Krushmedia bid response for imp\n         WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/krushmedia-exchange\"))\n                 .withHeader(\"Accept\", equalTo(\"application/json\"))\n                 .withHeader(\"Content-Type\", equalToIgnoreCase(\"application/json;charset=UTF-8\"))\n-                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-logicad-bid-request.json\")))\n+                .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n+                .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n+                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))", "originalCommit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "chunk": "diff --git a/src/test/java/org/prebid/server/it/KrushmediaTest.java b/src/test/java/org/prebid/server/it/KrushmediaTest.java\nindex 3e8387417..ba6f384a7 100644\n--- a/src/test/java/org/prebid/server/it/KrushmediaTest.java\n+++ b/src/test/java/org/prebid/server/it/KrushmediaTest.java\n\n@@ -32,7 +32,6 @@ public class KrushmediaTest extends IntegrationTest {\n                 .withHeader(\"User-Agent\", equalToIgnoreCase(\"test-user-agent\"))\n                 .withHeader(\"X-Forwarded-For\", equalToIgnoreCase(\"123.123.123.123\"))\n                 .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n-                .withHeader(\"Accept-Language\", equalToIgnoreCase(\"en\"))\n                 .withHeader(\"Dnt\", equalToIgnoreCase(\"0\"))\n                 .withRequestBody(equalToJson(jsonFrom(\"openrtb2/krushmedia/test-krushmedia-bid-request.json\")))\n                 .willReturn(aResponse().withBody(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMTM1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r508401350", "bodyText": "just use first and second for names", "author": "DGarbar", "createdAt": "2020-10-20T10:50:16Z", "path": "src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java", "diffHunk": "@@ -176,6 +157,38 @@ public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws\n                 .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n     }\n \n+    @Test\n+    public void makeBidsShouldReturnEmptyBidderBidsFromFirstSeatBid() throws JsonProcessingException {\n+        // given\n+        final SeatBid zeroSeatBid = SeatBid.builder()", "originalCommit": "11ab1d2b6c655f16aa8da9c60319c903235a3a5b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\nindex 1a1f26842..47790fe70 100644\n--- a/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/krushmedia/KrushmediaBidderTest.java\n\n@@ -158,15 +158,15 @@ public class KrushmediaBidderTest extends VertxTest {\n     }\n \n     @Test\n-    public void makeBidsShouldReturnEmptyBidderBidsFromFirstSeatBid() throws JsonProcessingException {\n+    public void makeBidsShouldReturnEmptyBidderBidsFromSecondSeatBid() throws JsonProcessingException {\n         // given\n-        final SeatBid zeroSeatBid = SeatBid.builder()\n+        final SeatBid firstSeatBId = SeatBid.builder()\n                 .bid(singletonList(Bid.builder()\n                         .impid(\"123\")\n                         .build()))\n                 .build();\n \n-        final SeatBid firstSeatBid = SeatBid.builder()\n+        final SeatBid secondSeatBid = SeatBid.builder()\n                 .bid(singletonList(Bid.builder()\n                         .impid(\"456\")\n                         .build()))\n"}}, {"oid": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "url": "https://github.com/prebid/prebid-server-java/commit/047f052dfd54b688188a083c3a5ac9b49115b4fd", "message": "Additional fix", "committedDate": "2020-10-20T12:59:58Z", "type": "commit"}, {"oid": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "url": "https://github.com/prebid/prebid-server-java/commit/047f052dfd54b688188a083c3a5ac9b49115b4fd", "message": "Additional fix", "committedDate": "2020-10-20T12:59:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0ODU3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r512048578", "bodyText": "Please use a solution with addHeader(..) method from here - https://github.com/rubicon-project/prebid-server-java/pull/948/files#diff-a83ec88bc3df7e7d95d1aa1863d63063c93a99e170759a0943d88b5f318cde27R144", "author": "rpanchyk", "createdAt": "2020-10-26T15:26:01Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+    private static final String URI_ACCOUNT_ID_MACRO = \"{{AccountID}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(removeFirstImpExt(request.getImp()))\n+                .build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshalling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, accountId);\n+    }\n+\n+    private static List<Imp> removeFirstImpExt(List<Imp> imps) {\n+        return IntStream.range(0, imps.size())\n+                .mapToObj(impIndex -> impIndex == 0\n+                        ? imps.get(impIndex).toBuilder().ext(null).build()\n+                        : imps.get(impIndex))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers();\n+        headers.add(\"X-Openrtb-Version\", \"2.5\");\n+\n+        if (device != null) {\n+            if (StringUtils.isNotBlank(device.getUa())) {", "originalCommit": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8557b55603a1638b22ee798c88d433c5a075f605", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 449062e89..eae89a001 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -87,7 +87,7 @@ public class KrushmediaBidder implements Bidder<BidRequest> {\n     }\n \n     private String resolveEndpoint(String accountId) {\n-        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, accountId);\n+        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, StringUtils.stripToEmpty(accountId));\n     }\n \n     private static List<Imp> removeFirstImpExt(List<Imp> imps) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzg1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/958#discussion_r512107859", "bodyText": "i'd rather suggest to wrap accountId with StringUtils.stripToEmpty(..) to avoid =null param value in URL.", "author": "rpanchyk", "createdAt": "2020-10-26T16:44:57Z", "path": "src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.prebid.server.bidder.krushmedia;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.krushmedia.ExtImpKrushmedia;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class KrushmediaBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpKrushmedia>> KRUSHMEDIA_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpKrushmedia>>() {\n+            };\n+    private static final String URI_ACCOUNT_ID_MACRO = \"{{AccountID}}\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public KrushmediaBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        final ExtImpKrushmedia extImpKrushmedia;\n+        final String url;\n+\n+        try {\n+            extImpKrushmedia = parseImpExt(request.getImp().get(0));\n+            url = resolveEndpoint(extImpKrushmedia.getAccountId());\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(removeFirstImpExt(request.getImp()))\n+                .build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(url)\n+                        .headers(resolveHeaders(request.getDevice()))\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpKrushmedia parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), KRUSHMEDIA_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(\"Error while unmarshalling bidder extension\");\n+        }\n+    }\n+\n+    private String resolveEndpoint(String accountId) {\n+        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, accountId);", "originalCommit": "047f052dfd54b688188a083c3a5ac9b49115b4fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8557b55603a1638b22ee798c88d433c5a075f605", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\nindex 449062e89..eae89a001 100644\n--- a/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/krushmedia/KrushmediaBidder.java\n\n@@ -87,7 +87,7 @@ public class KrushmediaBidder implements Bidder<BidRequest> {\n     }\n \n     private String resolveEndpoint(String accountId) {\n-        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, accountId);\n+        return endpointUrl.replace(URI_ACCOUNT_ID_MACRO, StringUtils.stripToEmpty(accountId));\n     }\n \n     private static List<Imp> removeFirstImpExt(List<Imp> imps) {\n"}}, {"oid": "8557b55603a1638b22ee798c88d433c5a075f605", "url": "https://github.com/prebid/prebid-server-java/commit/8557b55603a1638b22ee798c88d433c5a075f605", "message": "Fixes after review", "committedDate": "2020-10-26T18:23:00Z", "type": "commit"}, {"oid": "91f6787782be6179dd8040ebc1a2d7cc0da49e92", "url": "https://github.com/prebid/prebid-server-java/commit/91f6787782be6179dd8040ebc1a2d7cc0da49e92", "message": "Merge branch 'master' into krushmedia_bidder/development\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-10-26T18:25:54Z", "type": "commit"}]}