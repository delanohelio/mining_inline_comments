{"pr_number": 797, "pr_title": "Add choosing of the most valuable bid for single imp id", "pr_createdAt": "2020-07-09T10:10:18Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/797", "timeline": [{"oid": "a407ca3f311a6c52ae654a5763349c286ad5a772", "url": "https://github.com/prebid/prebid-server-java/commit/a407ca3f311a6c52ae654a5763349c286ad5a772", "message": "Add choosing most valuable bid that have same imp id", "committedDate": "2020-07-09T09:55:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNjk3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/797#discussion_r452316972", "bodyText": "Pls consider this way:\n        final List<BidderBid> mostValuableBids = impIdToBidderBid.values().stream()\n                .map(BidResponseCreator::mostValuableBid)\n                .collect(Collectors.toList());\n\n        responseBidderBids.retainAll(mostValuableBids);", "author": "rpanchyk", "createdAt": "2020-07-09T15:47:51Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -188,6 +192,35 @@ private ExtBidResponse toExtBidResponse(List<BidderResponse> bidderResponses, Au\n                 ExtBidResponsePrebid.of(auctionTimestamp));\n     }\n \n+    private static void removeRedundantBids(BidderResponse bidderResponse) {\n+        final List<BidderBid> responseBidderBids = bidderResponse.getSeatBid().getBids();\n+        final Map<String, List<BidderBid>> impIdToBidderBid = responseBidderBids.stream()\n+                .collect(Collectors.groupingBy(bidderBid -> bidderBid.getBid().getImpid()));\n+\n+        final List<BidderBid> bidsForRemoval = impIdToBidderBid.values().stream()\n+                .peek(bidderBids -> bidderBids.remove(mostValuableBid(bidderBids)))", "originalCommit": "a407ca3f311a6c52ae654a5763349c286ad5a772", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2456f5da74ecf1ef3b5da0a2b127c274d8a4a804", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex 253dfd22..9d074b23 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n\n@@ -197,12 +197,11 @@ public class BidResponseCreator {\n         final Map<String, List<BidderBid>> impIdToBidderBid = responseBidderBids.stream()\n                 .collect(Collectors.groupingBy(bidderBid -> bidderBid.getBid().getImpid()));\n \n-        final List<BidderBid> bidsForRemoval = impIdToBidderBid.values().stream()\n-                .peek(bidderBids -> bidderBids.remove(mostValuableBid(bidderBids)))\n-                .flatMap(Collection::stream)\n+        final List<BidderBid> mostValuableBids = impIdToBidderBid.values().stream()\n+                .map(BidResponseCreator::mostValuableBid)\n                 .collect(Collectors.toList());\n \n-        responseBidderBids.removeAll(bidsForRemoval);\n+        responseBidderBids.retainAll(mostValuableBids);\n     }\n \n     private static BidderBid mostValuableBid(List<BidderBid> bidderBids) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxODQ2Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/797#discussion_r452318467", "bodyText": "Just a thought. i1 is slightly hard to read ;-)\nUsually we use imp1, etc.", "author": "rpanchyk", "createdAt": "2020-07-09T15:50:16Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -385,7 +386,7 @@ public void shouldSetNbrNullAndPopulateSeatbidWhenAtLeastOneBidIsPresent() {\n         // given\n         final AuctionContext auctionContext = givenAuctionContext(givenBidRequest());\n \n-        final Bid bid = Bid.builder().build();\n+        final Bid bid = Bid.builder().impid(\"i1\").build();", "originalCommit": "a407ca3f311a6c52ae654a5763349c286ad5a772", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2456f5da74ecf1ef3b5da0a2b127c274d8a4a804", "chunk": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 283b1af3..9bc8d02e 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n\n@@ -386,7 +386,7 @@ public class BidResponseCreatorTest extends VertxTest {\n         // given\n         final AuctionContext auctionContext = givenAuctionContext(givenBidRequest());\n \n-        final Bid bid = Bid.builder().impid(\"i1\").build();\n+        final Bid bid = Bid.builder().impid(\"imp1\").build();\n         final List<BidderResponse> bidderResponses = singletonList(BidderResponse.of(\"bidder1\",\n                 givenSeatBid(BidderBid.of(bid, null, null)), 100));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxOTkxNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/797#discussion_r452319915", "bodyText": "Pls fix typo in Equeal.", "author": "rpanchyk", "createdAt": "2020-07-09T15:52:28Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -484,6 +487,47 @@ public void shouldSetExpectedResponseSeatBidAndBidFields() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldFilterByDealsAndPriceBidsWhenImpIdsAreEqueal() {", "originalCommit": "a407ca3f311a6c52ae654a5763349c286ad5a772", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2456f5da74ecf1ef3b5da0a2b127c274d8a4a804", "chunk": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex 283b1af3..9bc8d02e 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n\n@@ -488,7 +488,7 @@ public class BidResponseCreatorTest extends VertxTest {\n     }\n \n     @Test\n-    public void shouldFilterByDealsAndPriceBidsWhenImpIdsAreEqueal() {\n+    public void shouldFilterByDealsAndPriceBidsWhenImpIdsAreEqual() {\n         // given\n         final AuctionContext auctionContext = givenAuctionContext(givenBidRequest());\n         final ExtRequestTargeting targeting = givenTargeting();\n"}}, {"oid": "2456f5da74ecf1ef3b5da0a2b127c274d8a4a804", "url": "https://github.com/prebid/prebid-server-java/commit/2456f5da74ecf1ef3b5da0a2b127c274d8a4a804", "message": "Small fixes after review", "committedDate": "2020-07-16T16:25:16Z", "type": "commit"}]}