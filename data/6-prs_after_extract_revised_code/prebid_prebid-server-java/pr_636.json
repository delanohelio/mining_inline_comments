{"pr_number": 636, "pr_title": "AdminManager class added", "pr_createdAt": "2020-03-12T13:19:26Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/636", "timeline": [{"oid": "d830e729e852c7d26b037f6fa0a81fe6d6335a22", "url": "https://github.com/prebid/prebid-server-java/commit/d830e729e852c7d26b037f6fa0a81fe6d6335a22", "message": "AdminManager class added. Replaced LogModifier with AdminManager", "committedDate": "2020-03-12T13:17:45Z", "type": "commit"}, {"oid": "5068297e9c6521f62cf3cdd7e71bd5f6e6b0d79e", "url": "https://github.com/prebid/prebid-server-java/commit/5068297e9c6521f62cf3cdd7e71bd5f6e6b0d79e", "message": "logging added", "committedDate": "2020-03-12T13:36:32Z", "type": "commit"}, {"oid": "7aefa291859be75b8f481f71713ffcad2510632a", "url": "https://github.com/prebid/prebid-server-java/commit/7aefa291859be75b8f481f71713ffcad2510632a", "message": "Test added", "committedDate": "2020-03-12T16:34:51Z", "type": "commit"}, {"oid": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "url": "https://github.com/prebid/prebid-server-java/commit/5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "message": "Removed LogModifier.java. Adda AdminManagerTest", "committedDate": "2020-03-13T09:16:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMDA4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394220088", "bodyText": "request.getParam(LOGGING_PARAM) could be extracted to a local variable as it is used down below once again", "author": "schernysh", "createdAt": "2020-03-18T09:47:54Z", "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/AdminHandler.java b/src/main/java/org/prebid/server/handler/AdminHandler.java\nindex 8bd83659..4327a451 100644\n--- a/src/main/java/org/prebid/server/handler/AdminHandler.java\n+++ b/src/main/java/org/prebid/server/handler/AdminHandler.java\n\n@@ -28,9 +28,9 @@ public class AdminHandler implements Handler<RoutingContext> {\n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        if (request.getParam(LOGGING_PARAM) != null) {\n+        final String loggingParam = request.getParam(LOGGING_PARAM);\n+        if (loggingParam != null) {\n             final BiConsumer<Logger, String> loggingLevelModifier;\n-            final String loggingParam = request.getParam(LOGGING_PARAM);\n             final String recordsParam = request.getParam(RECORDS_PARAM);\n             final int records;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMzMxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394223314", "bodyText": "Same applies to request.getParam(TIME_PARAM)", "author": "schernysh", "createdAt": "2020-03-18T09:53:13Z", "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/AdminHandler.java b/src/main/java/org/prebid/server/handler/AdminHandler.java\nindex 8bd83659..4327a451 100644\n--- a/src/main/java/org/prebid/server/handler/AdminHandler.java\n+++ b/src/main/java/org/prebid/server/handler/AdminHandler.java\n\n@@ -28,9 +28,9 @@ public class AdminHandler implements Handler<RoutingContext> {\n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        if (request.getParam(LOGGING_PARAM) != null) {\n+        final String loggingParam = request.getParam(LOGGING_PARAM);\n+        if (loggingParam != null) {\n             final BiConsumer<Logger, String> loggingLevelModifier;\n-            final String loggingParam = request.getParam(LOGGING_PARAM);\n             final String recordsParam = request.getParam(RECORDS_PARAM);\n             final int records;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyMzg1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394223859", "bodyText": "What happens if time parameter could not be parsed as Long?", "author": "schernysh", "createdAt": "2020-03-18T09:54:06Z", "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {\n+            final long timeParam = Long.parseLong(request.getParam(TIME_PARAM));", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/AdminHandler.java b/src/main/java/org/prebid/server/handler/AdminHandler.java\nindex 8bd83659..4327a451 100644\n--- a/src/main/java/org/prebid/server/handler/AdminHandler.java\n+++ b/src/main/java/org/prebid/server/handler/AdminHandler.java\n\n@@ -28,9 +28,9 @@ public class AdminHandler implements Handler<RoutingContext> {\n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        if (request.getParam(LOGGING_PARAM) != null) {\n+        final String loggingParam = request.getParam(LOGGING_PARAM);\n+        if (loggingParam != null) {\n             final BiConsumer<Logger, String> loggingLevelModifier;\n-            final String loggingParam = request.getParam(LOGGING_PARAM);\n             final String recordsParam = request.getParam(RECORDS_PARAM);\n             final int records;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMDA2MA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394230060", "bodyText": "Aren't curly braces redundant here?", "author": "schernysh", "createdAt": "2020-03-18T10:03:58Z", "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -16,34 +17,52 @@\n \n     private static final String RECORDS_PARAM = \"records\";\n     private static final String LOGGING_PARAM = \"logging\";\n+    private static final String TIME_PARAM = \"time\";\n \n-    private final LogModifier logModifier;\n+    private final AdminManager adminManager;\n \n-    public AdminHandler(LogModifier logModifier) {\n-        this.logModifier = Objects.requireNonNull(logModifier);\n+    public AdminHandler(AdminManager adminManager) {\n+        this.adminManager = Objects.requireNonNull(adminManager);\n     }\n \n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n-        final int records;\n-\n-        try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n-        } catch (IllegalArgumentException e) {\n+        if (request.getParam(LOGGING_PARAM) != null) {\n+            final BiConsumer<Logger, String> loggingLevelModifier;\n+            final String loggingParam = request.getParam(LOGGING_PARAM);\n+            final String recordsParam = request.getParam(RECORDS_PARAM);\n+            final int records;\n+\n+            try {\n+                loggingLevelModifier = loggingLevel(loggingParam);\n+                records = records(recordsParam);\n+            } catch (IllegalArgumentException e) {\n+                context.response()\n+                        .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n+                        .end(e.getMessage());\n+                return;\n+            }\n+\n+            adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                    (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));\n+            context.response()\n+                    .end(String.format(\"Logging level was changed to %s, for %s requests\", loggingParam, recordsParam));\n+        } else if (request.getParam(TIME_PARAM) != null) {\n+            final long timeParam = Long.parseLong(request.getParam(TIME_PARAM));\n+\n+            adminManager.setupByTime(AdminManager.ADMIN_TIME_KEY, timeParam,\n+                    (BiConsumer<ConditionalLogger, String>) (conditionalLogger, text) -> {", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/AdminHandler.java b/src/main/java/org/prebid/server/handler/AdminHandler.java\nindex 8bd83659..4327a451 100644\n--- a/src/main/java/org/prebid/server/handler/AdminHandler.java\n+++ b/src/main/java/org/prebid/server/handler/AdminHandler.java\n\n@@ -28,9 +28,9 @@ public class AdminHandler implements Handler<RoutingContext> {\n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n-        if (request.getParam(LOGGING_PARAM) != null) {\n+        final String loggingParam = request.getParam(LOGGING_PARAM);\n+        if (loggingParam != null) {\n             final BiConsumer<Logger, String> loggingLevelModifier;\n-            final String loggingParam = request.getParam(LOGGING_PARAM);\n             final String recordsParam = request.getParam(RECORDS_PARAM);\n             final int records;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMjgxOA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394232818", "bodyText": "It's considered a bad practice to catch NPE. Instead of this please check for null wherever it is possible to get one.", "author": "schernysh", "createdAt": "2020-03-18T10:08:42Z", "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();\n+                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n+                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n+                accountIds.add(context.getAccount().getId());\n+                accountIds.addAll(context.getBidRequest().getImp().stream()\n+                        .map(Imp::getExt)\n+                        .map(this::parseExtImpRubicon)\n+                        .filter(Objects::nonNull)\n+                        .map(ExtImpRubicon::getAccountId)\n+                        .map(String::valueOf)\n+                        .collect(Collectors.toList()));\n+\n+                if (accountIds.contains(null)) {\n+                    printLog();\n+                }\n+            } catch (NullPointerException e) {", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\nindex ca13776f..a42dd9f3 100644\n--- a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n+++ b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n\n@@ -150,33 +149,47 @@ public class AmpHandler implements Handler<RoutingContext> {\n     private AuctionContext validateAccount(AuctionContext context) {\n         if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n \n-            try {\n-                final List<String> accountIds = new ArrayList<>();\n-                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n-                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n-                accountIds.add(context.getAccount().getId());\n-                accountIds.addAll(context.getBidRequest().getImp().stream()\n-                        .map(Imp::getExt)\n-                        .map(this::parseExtImpRubicon)\n-                        .filter(Objects::nonNull)\n-                        .map(ExtImpRubicon::getAccountId)\n-                        .map(String::valueOf)\n-                        .collect(Collectors.toList()));\n-\n-                if (accountIds.contains(null)) {\n-                    printLog();\n+            if (context != null) {\n+                if (context.getAccount() != null && StringUtils.isEmpty(context.getAccount().getId())) {\n+                    adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"account.id is null\");\n+                    return context;\n+                }\n+                final BidRequest bidRequest = context.getBidRequest();\n+                if (bidRequest != null) {\n+                    if (bidRequest.getSite() != null && bidRequest.getSite().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getSite().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"site.publisher.id is null\");\n+                        return context;\n+                    }\n+\n+                    if (bidRequest.getApp() != null && bidRequest.getApp().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getApp().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"app.publisher.id is null\");\n+                        return context;\n+                    }\n+                    if (bidRequest.getImp() != null) {\n+                        final List<String> accountIdList = bidRequest.getImp().stream()\n+                                .map(Imp::getExt)\n+                                .map(this::parseExtImpRubicon)\n+                                .filter(Objects::nonNull)\n+                                .map(ExtImpRubicon::getAccountId)\n+                                .map(String::valueOf)\n+                                .collect(Collectors.toList());\n+\n+                        if (accountIdList.contains(null)) {\n+                            adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                    \"imp[].ext.rubicon.accountId is null\");\n+                            return context;\n+                        }\n+                    }\n                 }\n-            } catch (NullPointerException e) {\n-                printLog();\n             }\n         }\n         return context;\n     }\n \n-    private void printLog() {\n-        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"accountId is null\");\n-    }\n-\n     private ExtImpRubicon parseExtImpRubicon(ObjectNode ext) {\n         try {\n             return mapper.decodeValue(ext.get(\"rubicon\").toString(), ExtImpRubicon.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMzMwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394233306", "bodyText": "I'm concerned about the logic of this method.\nWhat are you trying to achieve here and what is the actual requirement?", "author": "schernysh", "createdAt": "2020-03-18T10:09:35Z", "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\nindex ca13776f..a42dd9f3 100644\n--- a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n+++ b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n\n@@ -150,33 +149,47 @@ public class AmpHandler implements Handler<RoutingContext> {\n     private AuctionContext validateAccount(AuctionContext context) {\n         if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n \n-            try {\n-                final List<String> accountIds = new ArrayList<>();\n-                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n-                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n-                accountIds.add(context.getAccount().getId());\n-                accountIds.addAll(context.getBidRequest().getImp().stream()\n-                        .map(Imp::getExt)\n-                        .map(this::parseExtImpRubicon)\n-                        .filter(Objects::nonNull)\n-                        .map(ExtImpRubicon::getAccountId)\n-                        .map(String::valueOf)\n-                        .collect(Collectors.toList()));\n-\n-                if (accountIds.contains(null)) {\n-                    printLog();\n+            if (context != null) {\n+                if (context.getAccount() != null && StringUtils.isEmpty(context.getAccount().getId())) {\n+                    adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"account.id is null\");\n+                    return context;\n+                }\n+                final BidRequest bidRequest = context.getBidRequest();\n+                if (bidRequest != null) {\n+                    if (bidRequest.getSite() != null && bidRequest.getSite().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getSite().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"site.publisher.id is null\");\n+                        return context;\n+                    }\n+\n+                    if (bidRequest.getApp() != null && bidRequest.getApp().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getApp().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"app.publisher.id is null\");\n+                        return context;\n+                    }\n+                    if (bidRequest.getImp() != null) {\n+                        final List<String> accountIdList = bidRequest.getImp().stream()\n+                                .map(Imp::getExt)\n+                                .map(this::parseExtImpRubicon)\n+                                .filter(Objects::nonNull)\n+                                .map(ExtImpRubicon::getAccountId)\n+                                .map(String::valueOf)\n+                                .collect(Collectors.toList());\n+\n+                        if (accountIdList.contains(null)) {\n+                            adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                    \"imp[].ext.rubicon.accountId is null\");\n+                            return context;\n+                        }\n+                    }\n                 }\n-            } catch (NullPointerException e) {\n-                printLog();\n             }\n         }\n         return context;\n     }\n \n-    private void printLog() {\n-        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"accountId is null\");\n-    }\n-\n     private ExtImpRubicon parseExtImpRubicon(ObjectNode ext) {\n         try {\n             return mapper.decodeValue(ext.get(\"rubicon\").toString(), ExtImpRubicon.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNDA4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394234088", "bodyText": "The method name is too generic, please pick a more telling name.", "author": "schernysh", "createdAt": "2020-03-18T10:10:46Z", "path": "src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java", "diffHunk": "@@ -144,6 +147,44 @@ public void handle(RoutingContext routingContext) {\n                 .setHandler(responseResult -> handleResult(responseResult, ampEventBuilder, routingContext, startTime));\n     }\n \n+    private AuctionContext validateAccount(AuctionContext context) {\n+        if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n+\n+            try {\n+                final List<String> accountIds = new ArrayList<>();\n+                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n+                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n+                accountIds.add(context.getAccount().getId());\n+                accountIds.addAll(context.getBidRequest().getImp().stream()\n+                        .map(Imp::getExt)\n+                        .map(this::parseExtImpRubicon)\n+                        .filter(Objects::nonNull)\n+                        .map(ExtImpRubicon::getAccountId)\n+                        .map(String::valueOf)\n+                        .collect(Collectors.toList()));\n+\n+                if (accountIds.contains(null)) {\n+                    printLog();\n+                }\n+            } catch (NullPointerException e) {\n+                printLog();\n+            }\n+        }\n+        return context;\n+    }\n+\n+    private void printLog() {", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\nindex ca13776f..a42dd9f3 100644\n--- a/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n+++ b/src/main/java/org/prebid/server/handler/openrtb2/AmpHandler.java\n\n@@ -150,33 +149,47 @@ public class AmpHandler implements Handler<RoutingContext> {\n     private AuctionContext validateAccount(AuctionContext context) {\n         if (adminManager.contains(AdminManager.ADMIN_TIME_KEY)) {\n \n-            try {\n-                final List<String> accountIds = new ArrayList<>();\n-                accountIds.add(context.getBidRequest().getSite().getPublisher().getId());\n-                accountIds.add(context.getBidRequest().getApp().getPublisher().getId());\n-                accountIds.add(context.getAccount().getId());\n-                accountIds.addAll(context.getBidRequest().getImp().stream()\n-                        .map(Imp::getExt)\n-                        .map(this::parseExtImpRubicon)\n-                        .filter(Objects::nonNull)\n-                        .map(ExtImpRubicon::getAccountId)\n-                        .map(String::valueOf)\n-                        .collect(Collectors.toList()));\n-\n-                if (accountIds.contains(null)) {\n-                    printLog();\n+            if (context != null) {\n+                if (context.getAccount() != null && StringUtils.isEmpty(context.getAccount().getId())) {\n+                    adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"account.id is null\");\n+                    return context;\n+                }\n+                final BidRequest bidRequest = context.getBidRequest();\n+                if (bidRequest != null) {\n+                    if (bidRequest.getSite() != null && bidRequest.getSite().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getSite().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"site.publisher.id is null\");\n+                        return context;\n+                    }\n+\n+                    if (bidRequest.getApp() != null && bidRequest.getApp().getPublisher() != null\n+                            && StringUtils.isEmpty(bidRequest.getApp().getPublisher().getId())) {\n+                        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                \"app.publisher.id is null\");\n+                        return context;\n+                    }\n+                    if (bidRequest.getImp() != null) {\n+                        final List<String> accountIdList = bidRequest.getImp().stream()\n+                                .map(Imp::getExt)\n+                                .map(this::parseExtImpRubicon)\n+                                .filter(Objects::nonNull)\n+                                .map(ExtImpRubicon::getAccountId)\n+                                .map(String::valueOf)\n+                                .collect(Collectors.toList());\n+\n+                        if (accountIdList.contains(null)) {\n+                            adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger,\n+                                    \"imp[].ext.rubicon.accountId is null\");\n+                            return context;\n+                        }\n+                    }\n                 }\n-            } catch (NullPointerException e) {\n-                printLog();\n             }\n         }\n         return context;\n     }\n \n-    private void printLog() {\n-        adminManager.accept(AdminManager.ADMIN_TIME_KEY, conditionalLogger, \"accountId is null\");\n-    }\n-\n     private ExtImpRubicon parseExtImpRubicon(ObjectNode ext) {\n         try {\n             return mapper.decodeValue(ext.get(\"rubicon\").toString(), ExtImpRubicon.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNTMwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394235303", "bodyText": "Please avoid using star imports", "author": "schernysh", "createdAt": "2020-03-18T10:12:47Z", "path": "src/test/java/org/prebid/server/manager/AdminManagerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package org.prebid.server.manager;\n+\n+import io.vertx.core.logging.Logger;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.util.function.BiConsumer;\n+\n+import static org.assertj.core.api.Assertions.*;", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/test/java/org/prebid/server/manager/AdminManagerTest.java b/src/test/java/org/prebid/server/manager/AdminManagerTest.java\nindex 7fe14ad8..9d2768d8 100644\n--- a/src/test/java/org/prebid/server/manager/AdminManagerTest.java\n+++ b/src/test/java/org/prebid/server/manager/AdminManagerTest.java\n\n@@ -10,8 +10,9 @@ import org.mockito.junit.MockitoRule;\n \n import java.util.function.BiConsumer;\n \n-import static org.assertj.core.api.Assertions.*;\n-import static org.mockito.Mockito.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.times;\n \n \n public class AdminManagerTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNjk4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394236984", "bodyText": "Please consider using java.time.Instant instead of java.util.Date throughout this class.", "author": "schernysh", "createdAt": "2020-03-18T10:15:26Z", "path": "src/main/java/org/prebid/server/manager/AdminManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.prebid.server.manager;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.Date;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n+\n+public class AdminManager {\n+\n+    public static final String ADMIN_COUNTER_KEY = \"admin_counter\";\n+    public static final String ADMIN_TIME_KEY = \"admin_time\";\n+\n+    private ConcurrentHashMap<String, Rule<?, ?>> actionMap;\n+\n+    public AdminManager() {\n+        actionMap = new ConcurrentHashMap<>();\n+    }\n+\n+    public void setupByCounter(String key, Integer amount, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new CounterRule(action, onFinish, amount));\n+    }\n+\n+    public void setupByTime(String key, long timeMillis, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new TimeRule(action, onFinish, timeMillis));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T, U> void accept(String key, T t, U u) {\n+        final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n+        rule.applyRule().accept(t, u);\n+    }\n+\n+    public boolean contains(String key) {\n+        return actionMap.containsKey(key);\n+    }\n+\n+    @AllArgsConstructor\n+    private abstract static class Rule<T, U> {\n+\n+        protected BiConsumer<T, U> onRun;\n+\n+        protected BiConsumer<T, U> onFinish;\n+\n+        abstract BiConsumer<T, U> applyRule();\n+    }\n+\n+    private static class TimeRule<T, U> extends Rule<T, U> {\n+\n+        private Long time;\n+\n+        TimeRule(BiConsumer<T, U> onRun, BiConsumer<T, U> onFinish, Long timeMillis) {\n+            super(onRun, onFinish);\n+            this.onFinish = onFinish;\n+            this.time = new Date().getTime() + timeMillis;", "originalCommit": "5cdbda6fc9dbfbc6e95aed1f6e0994ed38d65c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "chunk": "diff --git a/src/main/java/org/prebid/server/manager/AdminManager.java b/src/main/java/org/prebid/server/manager/AdminManager.java\nindex 73ed90d6..7faf28cf 100644\n--- a/src/main/java/org/prebid/server/manager/AdminManager.java\n+++ b/src/main/java/org/prebid/server/manager/AdminManager.java\n\n@@ -2,7 +2,7 @@ package org.prebid.server.manager;\n \n import lombok.AllArgsConstructor;\n \n-import java.util.Date;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.BiConsumer;\n"}}, {"oid": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "url": "https://github.com/prebid/prebid-server-java/commit/7f923685dc85bf3716b01ce85ce2299bdbf2455d", "message": "Fix AdminManager", "committedDate": "2020-03-18T13:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0ODc2Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r394348767", "bodyText": "Actually time could be Instant as well. This will give an opportunity to use nice isBefore or isAfter methods. Also take note of plus method for getting another instant.\nAnother field for improvement: instead of Instance.now() use Instance.now(Clock) - this will ease testing a lot and will allow to get rid of Thread.sleep() (not 100% sure about that though :)).", "author": "schernysh", "createdAt": "2020-03-18T13:34:16Z", "path": "src/main/java/org/prebid/server/manager/AdminManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.prebid.server.manager;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.time.Instant;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.BiConsumer;\n+\n+public class AdminManager {\n+\n+    public static final String ADMIN_COUNTER_KEY = \"admin_counter\";\n+    public static final String ADMIN_TIME_KEY = \"admin_time\";\n+\n+    private ConcurrentHashMap<String, Rule<?, ?>> actionMap;\n+\n+    public AdminManager() {\n+        actionMap = new ConcurrentHashMap<>();\n+    }\n+\n+    public void setupByCounter(String key, Integer amount, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new CounterRule(action, onFinish, amount));\n+    }\n+\n+    public void setupByTime(String key, long timeMillis, BiConsumer<?, ?> action, BiConsumer<?, ?> onFinish) {\n+        actionMap.put(key, new TimeRule(action, onFinish, timeMillis));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T, U> void accept(String key, T t, U u) {\n+        final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n+        rule.applyRule().accept(t, u);\n+    }\n+\n+    public boolean contains(String key) {\n+        return actionMap.containsKey(key);\n+    }\n+\n+    @AllArgsConstructor\n+    private abstract static class Rule<T, U> {\n+\n+        protected BiConsumer<T, U> onRun;\n+\n+        protected BiConsumer<T, U> onFinish;\n+\n+        abstract BiConsumer<T, U> applyRule();\n+    }\n+\n+    private static class TimeRule<T, U> extends Rule<T, U> {\n+\n+        private Long time;\n+\n+        TimeRule(BiConsumer<T, U> onRun, BiConsumer<T, U> onFinish, Long timeMillis) {\n+            super(onRun, onFinish);\n+            this.onFinish = onFinish;\n+            this.time = Instant.now().toEpochMilli() + timeMillis;", "originalCommit": "7f923685dc85bf3716b01ce85ce2299bdbf2455d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfe5c6fcce7d9d7fd3d61d1a98149edb9547d657", "chunk": "diff --git a/src/main/java/org/prebid/server/manager/AdminManager.java b/src/main/java/org/prebid/server/manager/AdminManager.java\nindex 7faf28cf..455ceed0 100644\n--- a/src/main/java/org/prebid/server/manager/AdminManager.java\n+++ b/src/main/java/org/prebid/server/manager/AdminManager.java\n\n@@ -28,14 +28,23 @@ public class AdminManager {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T, U> void accept(String key, T t, U u) {\n-        final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n-        rule.applyRule().accept(t, u);\n+        if (contains(key)) {\n+            final Rule<T, U> rule = (Rule<T, U>) actionMap.get(key);\n+            rule.applyRule().accept(t, u);\n+        }\n     }\n \n     public boolean contains(String key) {\n         return actionMap.containsKey(key);\n     }\n \n+    public boolean isRunning(String key) {\n+        if (!contains(key)) {\n+            return false;\n+        }\n+        return !actionMap.get(key).isFinished;\n+    }\n+\n     @AllArgsConstructor\n     private abstract static class Rule<T, U> {\n \n"}}, {"oid": "bfe5c6fcce7d9d7fd3d61d1a98149edb9547d657", "url": "https://github.com/prebid/prebid-server-java/commit/bfe5c6fcce7d9d7fd3d61d1a98149edb9547d657", "message": "null account logging partly moved to AuctionRequestFactory", "committedDate": "2020-03-19T09:21:58Z", "type": "commit"}, {"oid": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3", "url": "https://github.com/prebid/prebid-server-java/commit/77890c32b6d16f956eafe733d0ecf36f6cfcb0e3", "message": "left only AdminManager needed code", "committedDate": "2020-03-19T12:44:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxMzIwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/636#discussion_r397013203", "bodyText": "I would extract defaultLogModifier(logger) to avoid unnecessary method execution.", "author": "DGarbar", "createdAt": "2020-03-24T09:32:25Z", "path": "src/main/java/org/prebid/server/handler/AdminHandler.java", "diffHunk": "@@ -41,7 +41,8 @@ public void handle(RoutingContext context) {\n             return;\n         }\n \n-        logModifier.set(loggingLevelModifier, records);\n+        adminManager.setupByCounter(AdminManager.ADMIN_COUNTER_KEY, records, loggingLevelModifier,\n+                (BiConsumer<Logger, String>) (logger, text) -> defaultLogModifier(logger).accept(logger, text));", "originalCommit": "77890c32b6d16f956eafe733d0ecf36f6cfcb0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63ee7b369baaa73acdcd1f1b101e16b60e8c7132", "chunk": "diff --git a/src/main/java/org/prebid/server/handler/AdminHandler.java b/src/main/java/org/prebid/server/handler/AdminHandler.java\nindex 6cdb2df2..6400be3e 100644\n--- a/src/main/java/org/prebid/server/handler/AdminHandler.java\n+++ b/src/main/java/org/prebid/server/handler/AdminHandler.java\n\n@@ -26,14 +26,16 @@ public class AdminHandler implements Handler<RoutingContext> {\n     @Override\n     public void handle(RoutingContext context) {\n         final HttpServerRequest request = context.request();\n+\n         final BiConsumer<Logger, String> loggingLevelModifier;\n-        final String loggingParam = request.getParam(LOGGING_PARAM);\n-        final String recordsParam = request.getParam(RECORDS_PARAM);\n         final int records;\n \n+        final String loggingLevel = request.getParam(LOGGING_PARAM);\n+        final String recordsAsString = request.getParam(RECORDS_PARAM);\n+\n         try {\n-            loggingLevelModifier = loggingLevel(loggingParam);\n-            records = records(recordsParam);\n+            loggingLevelModifier = loggingLevel(loggingLevel);\n+            records = records(recordsAsString);\n         } catch (IllegalArgumentException e) {\n             context.response()\n                     .setStatusCode(HttpResponseStatus.BAD_REQUEST.code())\n"}}, {"oid": "19959bd7968be3add30c3441962d89948c8d36a9", "url": "https://github.com/prebid/prebid-server-java/commit/19959bd7968be3add30c3441962d89948c8d36a9", "message": "Merge branch 'master' into admin-manager\n\n# Conflicts:\n#\tsrc/test/java/org/prebid/server/handler/AdminHandlerTest.java", "committedDate": "2020-04-07T06:07:00Z", "type": "commit"}, {"oid": "63ee7b369baaa73acdcd1f1b101e16b60e8c7132", "url": "https://github.com/prebid/prebid-server-java/commit/63ee7b369baaa73acdcd1f1b101e16b60e8c7132", "message": "AdminManager class added - refactored", "committedDate": "2020-04-07T12:39:12Z", "type": "commit"}, {"oid": "4c041e4737e79d199a7aafcaedf1624e456e1026", "url": "https://github.com/prebid/prebid-server-java/commit/4c041e4737e79d199a7aafcaedf1624e456e1026", "message": "AdminManager class added - refactored", "committedDate": "2020-04-07T13:06:00Z", "type": "commit"}, {"oid": "d7e9012a88a1e46e7b803822effab7e4b8e736c2", "url": "https://github.com/prebid/prebid-server-java/commit/d7e9012a88a1e46e7b803822effab7e4b8e736c2", "message": "AdminManager class added - refactored", "committedDate": "2020-04-07T17:54:46Z", "type": "commit"}, {"oid": "7f27c1f1fb675e2b4433411b56575f5fe8a752f5", "url": "https://github.com/prebid/prebid-server-java/commit/7f27c1f1fb675e2b4433411b56575f5fe8a752f5", "message": "AdminManager class added - refactored", "committedDate": "2020-04-07T18:54:08Z", "type": "commit"}]}