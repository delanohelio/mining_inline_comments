{"pr_number": 867, "pr_title": "Add AdtargetBidder and tests", "pr_createdAt": "2020-08-14T17:24:05Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/867", "timeline": [{"oid": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "url": "https://github.com/prebid/prebid-server-java/commit/1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "message": "Add AdtargetBidder and tests", "committedDate": "2020-08-14T17:21:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2OTIxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482069216", "bodyText": "Structure methods in workflow order", "author": "DGarbar", "createdAt": "2020-09-02T13:29:44Z", "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);", "originalCommit": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c7ac8afc328c15596191d19269e70e7bf07653", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\nindex ad298ed95..3f15005a4 100644\n--- a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n\n@@ -19,7 +19,6 @@ import org.prebid.server.bidder.model.HttpRequest;\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.exception.PreBidException;\n import org.prebid.server.json.DecodeException;\n-import org.prebid.server.json.EncodeException;\n import org.prebid.server.json.JacksonMapper;\n import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NTQyOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482075429", "bodyText": "use\nsourceToImps.computeIfAbsent(sourceId, ignored -> new ArrayList<>()).add(updatedImp);", "author": "DGarbar", "createdAt": "2020-09-02T13:38:22Z", "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {", "originalCommit": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c7ac8afc328c15596191d19269e70e7bf07653", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\nindex ad298ed95..3f15005a4 100644\n--- a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n\n@@ -19,7 +19,6 @@ import org.prebid.server.bidder.model.HttpRequest;\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.exception.PreBidException;\n import org.prebid.server.json.DecodeException;\n-import org.prebid.server.json.EncodeException;\n import org.prebid.server.json.JacksonMapper;\n import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NjQ5Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482076493", "bodyText": "extract (inline) this method", "author": "DGarbar", "createdAt": "2020-09-02T13:39:55Z", "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {\n+                sourceToImps.put(sourceId, new ArrayList<>(Collections.singleton(updatedImp)));\n+            } else {\n+                sourceIdImps.add(updatedImp);\n+            }\n+        }\n+        return Result.of(sourceToImps, errors);\n+    }\n+\n+    /**\n+     * Creates {@link HttpRequest}s. One for each source id. Adds source id as url parameter\n+     */\n+    private Result<List<HttpRequest<BidRequest>>> createHttpRequests(Map<Integer, List<Imp>> sourceToImps,", "originalCommit": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c7ac8afc328c15596191d19269e70e7bf07653", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\nindex ad298ed95..3f15005a4 100644\n--- a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n\n@@ -19,7 +19,6 @@ import org.prebid.server.bidder.model.HttpRequest;\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.exception.PreBidException;\n import org.prebid.server.json.DecodeException;\n-import org.prebid.server.json.EncodeException;\n import org.prebid.server.json.JacksonMapper;\n import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NjY0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482076641", "bodyText": "don't use final for for", "author": "DGarbar", "createdAt": "2020-09-02T13:40:08Z", "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {", "originalCommit": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c7ac8afc328c15596191d19269e70e7bf07653", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\nindex ad298ed95..3f15005a4 100644\n--- a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n\n@@ -19,7 +19,6 @@ import org.prebid.server.bidder.model.HttpRequest;\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.exception.PreBidException;\n import org.prebid.server.json.DecodeException;\n-import org.prebid.server.json.EncodeException;\n import org.prebid.server.json.JacksonMapper;\n import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4MDQ3OA==", "url": "https://github.com/prebid/prebid-server-java/pull/867#discussion_r482080478", "bodyText": "You can remove this catch", "author": "DGarbar", "createdAt": "2020-09-02T13:45:24Z", "path": "src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package org.prebid.server.bidder.adtarget;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adtarget.proto.AdtargetImpExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.EncodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Adtarget {@link Bidder} implementation.\n+ */\n+public class AdtargetBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdtarget>> ADTARGET_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdtarget>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    private final MultiMap headers;\n+\n+    public AdtargetBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+        headers = HttpUtil.headers();\n+    }\n+\n+    /**\n+     * Creates POST HTTP requests which should be made to fetch bids.\n+     */\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final Result<Map<Integer, List<Imp>>> sourceIdToImpsResult = mapSourceIdToImp(request.getImp());\n+        return createHttpRequests(sourceIdToImpsResult.getValue(), sourceIdToImpsResult.getErrors(), request);\n+    }\n+\n+    /**\n+     * Converts response to {@link List} of {@link BidderBid}s with {@link List} of errors.\n+     */\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(bidResponse, bidRequest.getImp());\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Validates and creates {@link Map} where sourceId is used as key and {@link List} of {@link Imp} as value.\n+     */\n+    private Result<Map<Integer, List<Imp>>> mapSourceIdToImp(List<Imp> imps) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final Map<Integer, List<Imp>> sourceToImps = new HashMap<>();\n+        for (final Imp imp : imps) {\n+            final ExtImpAdtarget extImpAdtarget;\n+            try {\n+                validateImpression(imp);\n+                extImpAdtarget = parseImpAdtarget(imp);\n+            } catch (PreBidException ex) {\n+                errors.add(BidderError.badInput(ex.getMessage()));\n+                continue;\n+            }\n+            final Imp updatedImp = updateImp(imp, extImpAdtarget);\n+\n+            final Integer sourceId = extImpAdtarget.getSourceId();\n+            final List<Imp> sourceIdImps = sourceToImps.get(sourceId);\n+            if (sourceIdImps == null) {\n+                sourceToImps.put(sourceId, new ArrayList<>(Collections.singleton(updatedImp)));\n+            } else {\n+                sourceIdImps.add(updatedImp);\n+            }\n+        }\n+        return Result.of(sourceToImps, errors);\n+    }\n+\n+    /**\n+     * Creates {@link HttpRequest}s. One for each source id. Adds source id as url parameter\n+     */\n+    private Result<List<HttpRequest<BidRequest>>> createHttpRequests(Map<Integer, List<Imp>> sourceToImps,\n+                                                                     List<BidderError> errors, BidRequest request) {\n+        final List<HttpRequest<BidRequest>> httpRequests = new ArrayList<>();\n+        for (Map.Entry<Integer, List<Imp>> sourceIdToImps : sourceToImps.entrySet()) {\n+            final String url = String.format(\"%s?aid=%d\", endpointUrl, sourceIdToImps.getKey());\n+            final BidRequest bidRequest = request.toBuilder().imp(sourceIdToImps.getValue()).build();\n+            final String bidRequestBody;\n+            try {\n+                bidRequestBody = mapper.encode(bidRequest);\n+            } catch (EncodeException e) {", "originalCommit": "1e403fe5a9690e277bbd7e465114b0bc5bf50f11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75c7ac8afc328c15596191d19269e70e7bf07653", "chunk": "diff --git a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\nindex ad298ed95..3f15005a4 100644\n--- a/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n+++ b/src/main/java/org/prebid/server/bidder/adtarget/AdtargetBidder.java\n\n@@ -19,7 +19,6 @@ import org.prebid.server.bidder.model.HttpRequest;\n import org.prebid.server.bidder.model.Result;\n import org.prebid.server.exception.PreBidException;\n import org.prebid.server.json.DecodeException;\n-import org.prebid.server.json.EncodeException;\n import org.prebid.server.json.JacksonMapper;\n import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n import org.prebid.server.proto.openrtb.ext.request.adtarget.ExtImpAdtarget;\n"}}, {"oid": "75c7ac8afc328c15596191d19269e70e7bf07653", "url": "https://github.com/prebid/prebid-server-java/commit/75c7ac8afc328c15596191d19269e70e7bf07653", "message": "Refactoring methods", "committedDate": "2020-09-03T08:39:50Z", "type": "commit"}, {"oid": "8f9555dd3c939f0569021d00703c8d2f85df3589", "url": "https://github.com/prebid/prebid-server-java/commit/8f9555dd3c939f0569021d00703c8d2f85df3589", "message": "Change defining elements of sourceToImps List", "committedDate": "2020-09-03T08:54:12Z", "type": "commit"}, {"oid": "c97470576fbb37d09d5fb7f6047cc9ea0599d50b", "url": "https://github.com/prebid/prebid-server-java/commit/c97470576fbb37d09d5fb7f6047cc9ea0599d50b", "message": "Merge branch 'master' into add-adtarget-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-09-18T12:20:45Z", "type": "commit"}]}