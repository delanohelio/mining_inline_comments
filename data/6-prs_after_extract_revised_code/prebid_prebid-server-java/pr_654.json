{"pr_number": 654, "pr_title": "Update emit event logic", "pr_createdAt": "2020-04-03T21:16:10Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/654", "timeline": [{"oid": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "url": "https://github.com/prebid/prebid-server-java/commit/f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "message": "Add to bidrequest events", "committedDate": "2020-04-03T21:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5NTUyOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403895529", "bodyText": "Seems we don't really need to pass ExtRequestPrebidEvents object.\nAssume, we can use here eventsEnabled flag instead, based on ExtRequestPrebidEvents and account.getEventsEnabled().\nSo, as following BidResponseCreator can be refactored to rid off the account.getEventsEnabled() usage.", "author": "rpanchyk", "createdAt": "2020-04-06T07:55:55Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -107,7 +108,8 @@ public BidResponseCreator(CacheService cacheService, BidderCatalog bidderCatalog\n      * including processing of winning bids with cache IDs.\n      */\n     Future<BidResponse> create(List<BidderResponse> bidderResponses, BidRequest bidRequest,\n-                               ExtRequestTargeting targeting, BidRequestCacheInfo cacheInfo, Account account,\n+                               ExtRequestPrebidEvents extRequestPrebidEvents, ExtRequestTargeting targeting,", "originalCommit": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1711df83b65b792b0309acefeaefc44ef74f8d59", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex c593154b..a5ce2f02 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n\n@@ -108,9 +107,8 @@ public class BidResponseCreator {\n      * including processing of winning bids with cache IDs.\n      */\n     Future<BidResponse> create(List<BidderResponse> bidderResponses, BidRequest bidRequest,\n-                               ExtRequestPrebidEvents extRequestPrebidEvents, ExtRequestTargeting targeting,\n-                               BidRequestCacheInfo cacheInfo, Account account,\n-                               Timeout timeout, boolean debugEnabled) {\n+                               ExtRequestTargeting targeting, BidRequestCacheInfo cacheInfo, Account account,\n+                               boolean eventsFromRequestEnabled, Timeout timeout, boolean debugEnabled) {\n \n         final Future<BidResponse> result;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwODE3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403908170", "bodyText": "We don't need any fields in this class.\nIt will be used just as marker.", "author": "rpanchyk", "createdAt": "2020-04-06T08:18:22Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.prebid.server.proto.openrtb.ext.request;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+/**\n+ * Defines the contract for bidrequest.ext.prebid.events\n+ */\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtRequestPrebidEvents {\n+\n+    /**\n+     * Defines the contract for bidrequest.ext.prebid.events.win\n+     */\n+    String win;", "originalCommit": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1711df83b65b792b0309acefeaefc44ef74f8d59", "chunk": "diff --git a/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java b/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java\nindex 7c4a43c1..512794af 100644\n--- a/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java\n+++ b/src/main/java/org/prebid/server/proto/openrtb/ext/request/ExtRequestPrebidEvents.java\n\n@@ -1,22 +1,13 @@\n package org.prebid.server.proto.openrtb.ext.request;\n \n-import lombok.AllArgsConstructor;\n+import lombok.NoArgsConstructor;\n import lombok.Value;\n \n /**\n  * Defines the contract for bidrequest.ext.prebid.events\n  */\n-@AllArgsConstructor(staticName = \"of\")\n+@NoArgsConstructor\n @Value\n public class ExtRequestPrebidEvents {\n \n-    /**\n-     * Defines the contract for bidrequest.ext.prebid.events.win\n-     */\n-    String win;\n-\n-    /**\n-     * Defines the contract for bidrequest.ext.prebid.events.imp\n-     */\n-    String imp;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwODc4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403908784", "bodyText": "Do not used.", "author": "rpanchyk", "createdAt": "2020-04-06T08:19:30Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -747,10 +760,40 @@ public void shouldAddExtPrebidEvents() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest();\n+        final ExtRequestTargeting targeting = givenTargeting();\n+\n+        final Bid bid = Bid.builder().id(\"bidId1\").price(BigDecimal.valueOf(5.67)).build();\n+        final List<BidderResponse> bidderResponses = singletonList(BidderResponse.of(\"bidder1\",\n+                givenSeatBid(BidderBid.of(bid, banner, \"USD\")), 100));\n+\n+        final Events events = Events.of(\"http://event-type-win\", \"http://event-type-view\");\n+        given(eventsService.createEvent(anyString(), anyString())).willReturn(events);", "originalCommit": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1711df83b65b792b0309acefeaefc44ef74f8d59", "chunk": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex dc6fe954..ce2fc4e9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n\n@@ -761,7 +748,7 @@ public class BidResponseCreatorTest extends VertxTest {\n     }\n \n     @Test\n-    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {\n+    public void shouldNotAddExtPrebidEventsIfEventsAreNotEnabled() {\n         // given\n         final BidRequest bidRequest = givenBidRequest();\n         final ExtRequestTargeting targeting = givenTargeting();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxMDg4NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r403910885", "bodyText": "Pls rename to shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsIsNull.\nAlso, add the additional unit test when Account has eventsEnabled = false.", "author": "rpanchyk", "createdAt": "2020-04-06T08:23:05Z", "path": "src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java", "diffHunk": "@@ -747,10 +760,40 @@ public void shouldAddExtPrebidEvents() {\n         verify(cacheService, never()).cacheBidsOpenrtb(anyList(), anyList(), any(), any(), any());\n     }\n \n+    @Test\n+    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {", "originalCommit": "f5ee76da9fb2fcd3f8587e48bc67b3729b967cb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1711df83b65b792b0309acefeaefc44ef74f8d59", "chunk": "diff --git a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\nindex dc6fe954..ce2fc4e9 100644\n--- a/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n+++ b/src/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n\n@@ -761,7 +748,7 @@ public class BidResponseCreatorTest extends VertxTest {\n     }\n \n     @Test\n-    public void shouldNotAddExtPrebidEventsIfExtRequestPrebidEventsNull() {\n+    public void shouldNotAddExtPrebidEventsIfEventsAreNotEnabled() {\n         // given\n         final BidRequest bidRequest = givenBidRequest();\n         final ExtRequestTargeting targeting = givenTargeting();\n"}}, {"oid": "1711df83b65b792b0309acefeaefc44ef74f8d59", "url": "https://github.com/prebid/prebid-server-java/commit/1711df83b65b792b0309acefeaefc44ef74f8d59", "message": "Add eventsEnabled flag to ExchangeService", "committedDate": "2020-04-06T21:18:04Z", "type": "commit"}, {"oid": "981410fede4fc891adc1aa1d7fd8114f5061edb4", "url": "https://github.com/prebid/prebid-server-java/commit/981410fede4fc891adc1aa1d7fd8114f5061edb4", "message": "Merge branch 'master' into update-emit-event-logic\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/BidResponseCreator.java\n#\tsrc/main/java/org/prebid/server/auction/ExchangeService.java\n#\tsrc/test/java/org/prebid/server/auction/BidResponseCreatorTest.java\n#\tsrc/test/java/org/prebid/server/auction/ExchangeServiceTest.java\n#\tsrc/test/resources/org/prebid/server/it/openrtb2/rubicon_appnexus/test-auction-rubicon-appnexus-response.json", "committedDate": "2020-04-06T21:35:38Z", "type": "commit"}, {"oid": "14de08687f65311386809422da043b624354f30f", "url": "https://github.com/prebid/prebid-server-java/commit/14de08687f65311386809422da043b624354f30f", "message": "Resolving conflicts", "committedDate": "2020-04-07T12:59:05Z", "type": "commit"}, {"oid": "3cf5f75ff077a10524627acb5683b9812c5274e5", "url": "https://github.com/prebid/prebid-server-java/commit/3cf5f75ff077a10524627acb5683b9812c5274e5", "message": "Merge branch 'master' into update-emit-event-logic\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/ExchangeService.java\n#\tsrc/test/resources/org/prebid/server/it/openrtb2/rubicon_appnexus/test-auction-rubicon-appnexus-response.json", "committedDate": "2020-04-07T13:06:47Z", "type": "commit"}, {"oid": "5a852a7defa32df1a15f99139597c3a324e0aba1", "url": "https://github.com/prebid/prebid-server-java/commit/5a852a7defa32df1a15f99139597c3a324e0aba1", "message": "Resolving conflicts update", "committedDate": "2020-04-07T13:20:28Z", "type": "commit"}, {"oid": "ca5f29871c86d436442c4c4395fb28b8e047b987", "url": "https://github.com/prebid/prebid-server-java/commit/ca5f29871c86d436442c4c4395fb28b8e047b987", "message": "Some refactoring and fixing bug", "committedDate": "2020-04-08T13:00:58Z", "type": "commit"}, {"oid": "2227779203f026f88bb4a5e42131371b774164fd", "url": "https://github.com/prebid/prebid-server-java/commit/2227779203f026f88bb4a5e42131371b774164fd", "message": "Divide on two separate conditions", "committedDate": "2020-04-08T13:43:00Z", "type": "commit"}, {"oid": "ee3d3b5dd9bdd7acceb79d88500b84fbc06e5817", "url": "https://github.com/prebid/prebid-server-java/commit/ee3d3b5dd9bdd7acceb79d88500b84fbc06e5817", "message": "Merge branch 'master' into update-emit-event-logic", "committedDate": "2020-04-08T13:58:54Z", "type": "commit"}, {"oid": "bd0e5baa5c9d011342110107cceb89ca48de7a14", "url": "https://github.com/prebid/prebid-server-java/commit/bd0e5baa5c9d011342110107cceb89ca48de7a14", "message": "Update caching due to new logic of events", "committedDate": "2020-04-08T21:48:51Z", "type": "commit"}, {"oid": "edc11327cb0f354b0e77a3b004c4ee16245f77bf", "url": "https://github.com/prebid/prebid-server-java/commit/edc11327cb0f354b0e77a3b004c4ee16245f77bf", "message": "Changes to pass LGTM checks", "committedDate": "2020-04-09T09:45:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTIyNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406141225", "bodyText": "This check doesn't answer the question \"Is events enabled?\"", "author": "rpanchyk", "createdAt": "2020-04-09T11:33:50Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -391,19 +393,23 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n \n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n-     * Used for OpenRTB auction request. Also, adds win url to result object.\n+     * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 String accountId, Long timestamp) {\n+                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n+\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        biddersToCacheBidIds.entrySet().stream()\n-                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n-                .findFirst()\n-                .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bidId, bidder, accountId,\n-                        timestamp)));\n+        final boolean eventsEnabled = account.getEventsEnabled() != null;", "originalCommit": "edc11327cb0f354b0e77a3b004c4ee16245f77bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd3009711b71b10c6a82639895838151efeff8aa", "chunk": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2847f5b2..27a44670 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n\n@@ -396,13 +394,13 @@ public class CacheService {\n      * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n+                                                 Account account, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n \n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        final boolean eventsEnabled = account.getEventsEnabled() != null;\n-        if (eventsEnabled && eventsAllowedByRequest) {\n+        final boolean eventsEnabled = account.getEventsEnabled() != null && account.getEventsEnabled();\n+        if (eventsEnabled) {\n             biddersToCacheBidIds.entrySet().stream()\n                     .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                     .findFirst()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTYxMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406141611", "bodyText": "According to requirements eventsAllowedByRequest should not be applied to CacheService at all.", "author": "rpanchyk", "createdAt": "2020-04-09T11:34:44Z", "path": "src/main/java/org/prebid/server/cache/CacheService.java", "diffHunk": "@@ -391,19 +393,23 @@ private static PutObject createPutObjectVideoOnly(Bid bid) {\n \n     /**\n      * Makes JSON type {@link PutObject} from {@link com.iab.openrtb.response.Bid}.\n-     * Used for OpenRTB auction request. Also, adds win url to result object.\n+     * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 String accountId, Long timestamp) {\n+                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n+\n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        biddersToCacheBidIds.entrySet().stream()\n-                .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n-                .findFirst()\n-                .map(Map.Entry::getKey)\n-                .ifPresent(bidder -> bidObjectNode.put(\"wurl\", eventsService.winUrl(bidId, bidder, accountId,\n-                        timestamp)));\n+        final boolean eventsEnabled = account.getEventsEnabled() != null;\n+        if (eventsEnabled && eventsAllowedByRequest) {", "originalCommit": "edc11327cb0f354b0e77a3b004c4ee16245f77bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd3009711b71b10c6a82639895838151efeff8aa", "chunk": "diff --git a/src/main/java/org/prebid/server/cache/CacheService.java b/src/main/java/org/prebid/server/cache/CacheService.java\nindex 2847f5b2..27a44670 100644\n--- a/src/main/java/org/prebid/server/cache/CacheService.java\n+++ b/src/main/java/org/prebid/server/cache/CacheService.java\n\n@@ -396,13 +394,13 @@ public class CacheService {\n      * Used for OpenRTB auction request. Also, adds win url to result object if events are enabled.\n      */\n     private PutObject createJsonPutObjectOpenrtb(CacheBid cacheBid, Map<String, List<String>> biddersToCacheBidIds,\n-                                                 Account account, boolean eventsAllowedByRequest, Long timestamp) {\n+                                                 Account account, Long timestamp) {\n         final com.iab.openrtb.response.Bid bid = cacheBid.getBid();\n         final String bidId = bid.getId();\n \n         final ObjectNode bidObjectNode = mapper.mapper().valueToTree(bid);\n-        final boolean eventsEnabled = account.getEventsEnabled() != null;\n-        if (eventsEnabled && eventsAllowedByRequest) {\n+        final boolean eventsEnabled = account.getEventsEnabled() != null && account.getEventsEnabled();\n+        if (eventsEnabled) {\n             biddersToCacheBidIds.entrySet().stream()\n                     .filter(biddersAndBidIds -> biddersAndBidIds.getValue().contains(bidId))\n                     .findFirst()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MzM0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/654#discussion_r406143344", "bodyText": "According to requirements eventsAllowedByRequest should not be applied here.\ni mean it should not affect the hb_winurl & hb_bidid targeting keywords.", "author": "rpanchyk", "createdAt": "2020-04-09T11:38:24Z", "path": "src/main/java/org/prebid/server/auction/BidResponseCreator.java", "diffHunk": "@@ -636,7 +640,7 @@ private Bid toBid(BidderBid bidderBid, String bidder, ExtRequestTargeting target\n             final Map<BidType, TargetingKeywordsCreator> keywordsCreatorByBidType =\n                     keywordsCreatorByBidType(targeting, isApp);\n             final boolean isWinningBid = winningBids.contains(bid);\n-            final String winUrl = eventsEnabled && bidType != BidType.video\n+            final String winUrl = eventsEnabled && eventsAllowedByRequest && bidType != BidType.video", "originalCommit": "edc11327cb0f354b0e77a3b004c4ee16245f77bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd3009711b71b10c6a82639895838151efeff8aa", "chunk": "diff --git a/src/main/java/org/prebid/server/auction/BidResponseCreator.java b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\nindex 96dbea7b..1d1ec4fc 100644\n--- a/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n+++ b/src/main/java/org/prebid/server/auction/BidResponseCreator.java\n\n@@ -640,7 +639,7 @@ public class BidResponseCreator {\n             final Map<BidType, TargetingKeywordsCreator> keywordsCreatorByBidType =\n                     keywordsCreatorByBidType(targeting, isApp);\n             final boolean isWinningBid = winningBids.contains(bid);\n-            final String winUrl = eventsEnabled && eventsAllowedByRequest && bidType != BidType.video\n+            final String winUrl = eventsEnabled && bidType != BidType.video\n                     ? HttpUtil.encodeUrl(eventsService.winUrlTargeting(bidder, account.getId(), auctionTimestamp))\n                     : null;\n             targetingKeywords = keywordsCreatorByBidType.getOrDefault(bidType, keywordsCreator)\n"}}, {"oid": "bd3009711b71b10c6a82639895838151efeff8aa", "url": "https://github.com/prebid/prebid-server-java/commit/bd3009711b71b10c6a82639895838151efeff8aa", "message": "Changes in CacheService", "committedDate": "2020-04-09T14:21:01Z", "type": "commit"}]}