{"pr_number": 879, "pr_title": "Add Adman bidder", "pr_createdAt": "2020-08-26T17:54:01Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/879", "timeline": [{"oid": "14ae7a64dd9a975d7c98f5bcc514c3a3ea327ad9", "url": "https://github.com/prebid/prebid-server-java/commit/14ae7a64dd9a975d7c98f5bcc514c3a3ea327ad9", "message": "Add bidder and tests", "committedDate": "2020-08-26T17:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MDEwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/879#discussion_r481070106", "bodyText": "move it to the line above.", "author": "DGarbar", "createdAt": "2020-09-01T11:33:24Z", "path": "src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.prebid.server.bidder.adman;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.adman.ExtImpAdman;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class AdmanBidderTest extends VertxTest {\n+\n+    public static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private AdmanBidder admanBidder;\n+\n+    @Before\n+    public void setUp() {\n+        admanBidder = new AdmanBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdmanBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnExpectedBidRequest() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(identity());\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = admanBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        final BidRequest expectedRequest = bidRequest.toBuilder()\n+                .imp(singletonList(bidRequest.getImp().get(0).toBuilder()\n+                        .tagid(\"tagidString\").build()))", "originalCommit": "14ae7a64dd9a975d7c98f5bcc514c3a3ea327ad9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b40b74b03020f68afbf3dca2c3564a3f35a5fd60", "chunk": "diff --git a/src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java b/src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java\nindex 25092baf..c25cb15a 100644\n--- a/src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java\n+++ b/src/test/java/org/prebid/server/bidder/adman/AdmanBidderTest.java\n\n@@ -76,8 +76,7 @@ public class AdmanBidderTest extends VertxTest {\n \n         // then\n         final BidRequest expectedRequest = bidRequest.toBuilder()\n-                .imp(singletonList(bidRequest.getImp().get(0).toBuilder()\n-                        .tagid(\"tagidString\").build()))\n+                .imp(singletonList(bidRequest.getImp().get(0).toBuilder().tagid(\"tagidString\").build()))\n                 .build();\n         assertThat(result.getErrors()).isEmpty();\n         assertThat(result.getValue()).hasSize(1)\n"}}, {"oid": "b40b74b03020f68afbf3dca2c3564a3f35a5fd60", "url": "https://github.com/prebid/prebid-server-java/commit/b40b74b03020f68afbf3dca2c3564a3f35a5fd60", "message": "Small refactoring code for better reading", "committedDate": "2020-09-02T09:00:06Z", "type": "commit"}, {"oid": "765bcb661cfeba84f57b46f76ba50a6dba78151a", "url": "https://github.com/prebid/prebid-server-java/commit/765bcb661cfeba84f57b46f76ba50a6dba78151a", "message": "Merge branch 'master' into add-new-adman-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-09-29T12:42:56Z", "type": "commit"}, {"oid": "8df46c9270bd92e0a4b2d6ee86cf5d65ca29a5a5", "url": "https://github.com/prebid/prebid-server-java/commit/8df46c9270bd92e0a4b2d6ee86cf5d65ca29a5a5", "message": "Clean code", "committedDate": "2020-09-29T12:50:49Z", "type": "commit"}, {"oid": "877eabe3a107d9e93455f0cf410ed7cf6869f896", "url": "https://github.com/prebid/prebid-server-java/commit/877eabe3a107d9e93455f0cf410ed7cf6869f896", "message": "Clean code", "committedDate": "2020-09-29T12:53:07Z", "type": "commit"}]}