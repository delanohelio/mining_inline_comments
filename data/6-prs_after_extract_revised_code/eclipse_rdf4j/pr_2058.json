{"pr_number": 2058, "pr_title": "GH-99 allow SailConnection to bypass Query Parser", "pr_createdAt": "2020-04-02T03:02:48Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2058", "timeline": [{"oid": "ac460cd20b381fa10b212a0a9e30681731473d66", "url": "https://github.com/eclipse/rdf4j/commit/ac460cd20b381fa10b212a0a9e30681731473d66", "message": "GH-99 allow SailConnection to bypass Query Parser\n\n- adds new method 'prepareQuery' to SailConnection that gets the raw\n  query string\n- SailConnection can optionally pass back a custom implementation of\n  TupleExpr. If this happens the SailRepository skips parsing the query\n  and will just pass back in the custom TuplExpr when\n  SailConnection.evaluate is called.\n- by default the method does nothing (returns empty optional)", "committedDate": "2020-04-02T03:06:27Z", "type": "commit"}, {"oid": "ac460cd20b381fa10b212a0a9e30681731473d66", "url": "https://github.com/eclipse/rdf4j/commit/ac460cd20b381fa10b212a0a9e30681731473d66", "message": "GH-99 allow SailConnection to bypass Query Parser\n\n- adds new method 'prepareQuery' to SailConnection that gets the raw\n  query string\n- SailConnection can optionally pass back a custom implementation of\n  TupleExpr. If this happens the SailRepository skips parsing the query\n  and will just pass back in the custom TuplExpr when\n  SailConnection.evaluate is called.\n- by default the method does nothing (returns empty optional)", "committedDate": "2020-04-02T03:06:27Z", "type": "forcePushed"}, {"oid": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "url": "https://github.com/eclipse/rdf4j/commit/f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "message": "GH-99 pass query type into SailConnection for bypass\n\n- added new enum for different query types\n- adapted RepositoryConnection.prepareQuery to also use bypass if\npossible", "committedDate": "2020-04-02T04:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0ODcxMw==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402048713", "bodyText": "Fwiw I still haven't come up with a decent convention for this kind of test naming. Using CamelCase just quickly becomes unreadable.", "author": "jeenbroekstra", "createdAt": "2020-04-02T04:45:07Z", "path": "core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+package org.eclipse.rdf4j.repository.sail;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.rdf4j.common.iteration.EmptyIteration;\n+import org.eclipse.rdf4j.query.BooleanQuery;\n+import org.eclipse.rdf4j.query.GraphQuery;\n+import org.eclipse.rdf4j.query.Query;\n+import org.eclipse.rdf4j.query.TupleQuery;\n+import org.eclipse.rdf4j.query.algebra.TupleExpr;\n+import org.eclipse.rdf4j.sail.SailConnection;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link SailRepositoryConnection}\n+ * \n+ * @author Jeen Broekstra\n+ *\n+ */\n+public class SailRepositoryConnectionTest {\n+\n+\tprivate SailRepositoryConnection subject;\n+\tprivate SailConnection sailConnection;\n+\tprivate SailRepository sailRepository;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tsailConnection = mock(SailConnection.class);\n+\t\tsailRepository = mock(SailRepository.class);\n+\n+\t\tsubject = new SailRepositoryConnection(sailRepository, sailConnection);\n+\t}\n+\n+\t@Test\n+\tpublic void testPrepareQuery_not_bypassed() throws Exception {", "originalCommit": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3018cc4d740ba5464875743c853c57c54e412ae0", "chunk": "diff --git a/core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java b/core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java\nindex cffe53606d..149f623431 100644\n--- a/core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java\n+++ b/core/repository/sail/src/test/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnectionTest.java\n\n@@ -49,7 +49,7 @@ public class SailRepositoryConnectionTest {\n \t@Test\n \tpublic void testPrepareQuery_not_bypassed() throws Exception {\n \t\tOptional<TupleExpr> response = Optional.empty();\n-\t\twhen(sailConnection.prepareQuery(any(), eq(Query.Type.TUPLE), any(), any())).thenReturn(response);\n+\t\twhen(sailConnection.prepareQuery(any(), eq(Query.QueryType.TUPLE), any(), any())).thenReturn(response);\n \t\twhen(sailConnection.evaluate(any(), any(), any(), anyBoolean())).thenReturn(new EmptyIteration<>());\n \n \t\tTupleQuery query = (TupleQuery) subject.prepareQuery(\"SELECT * WHERE { ?s ?p ?o }\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMjE0Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402812143", "bodyText": "note to self: rename to QueryType for greater clarity.", "author": "jeenbroekstra", "createdAt": "2020-04-03T08:07:35Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -16,6 +16,17 @@\n  */\n public interface Query extends Operation {\n \n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t * \n+\t * @since 3.2.0\n+\t */\n+\tpublic enum Type {", "originalCommit": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3018cc4d740ba5464875743c853c57c54e412ae0", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 45ecb041a0..e263c2301c 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -21,9 +23,21 @@ public interface Query extends Operation {\n \t * \n \t * @since 3.2.0\n \t */\n-\tpublic enum Type {\n+\tpublic enum QueryType {\n+\t\t/**\n+\t\t * Boolean queries (such as the SPARQL ASK query form) return either {@code true} or {@code false} as the\n+\t\t * result.\n+\t\t */\n \t\tBOOLEAN,\n+\t\t/**\n+\t\t * Graph queries (such as the SPARQL CONSTRUCT and DESCRIBE query form) return a sequence of RDF\n+\t\t * {@link Statement statements} as the result.\n+\t\t */\n \t\tGRAPH,\n+\t\t/**\n+\t\t * Tuple queries (such as the SPARQL SELECT query form) return a sequence of {@link BindingSet sets of variable\n+\t\t * bindings} as the result.\n+\t\t */\n \t\tTUPLE\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MTkyNQ==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402091925", "bodyText": "Is this a general thing you would like to start doing?", "author": "hmottestad", "createdAt": "2020-04-02T07:00:28Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -16,6 +16,17 @@\n  */\n public interface Query extends Operation {\n \n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t * \n+\t * @since 3.2.0", "originalCommit": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDMxMg==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410312", "bodyText": "We've been doing that for a while actually - just not very consistently. But yes, it seems like a good (low-cost) idea.", "author": "jeenbroekstra", "createdAt": "2020-04-04T02:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5MTkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3018cc4d740ba5464875743c853c57c54e412ae0", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 45ecb041a0..e263c2301c 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -21,9 +23,21 @@ public interface Query extends Operation {\n \t * \n \t * @since 3.2.0\n \t */\n-\tpublic enum Type {\n+\tpublic enum QueryType {\n+\t\t/**\n+\t\t * Boolean queries (such as the SPARQL ASK query form) return either {@code true} or {@code false} as the\n+\t\t * result.\n+\t\t */\n \t\tBOOLEAN,\n+\t\t/**\n+\t\t * Graph queries (such as the SPARQL CONSTRUCT and DESCRIBE query form) return a sequence of RDF\n+\t\t * {@link Statement statements} as the result.\n+\t\t */\n \t\tGRAPH,\n+\t\t/**\n+\t\t * Tuple queries (such as the SPARQL SELECT query form) return a sequence of {@link BindingSet sets of variable\n+\t\t * bindings} as the result.\n+\t\t */\n \t\tTUPLE\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402848713", "bodyText": "Does this end up potentially parsing twice? Parsing queries is one of the slowest parts of the SHACL sail, so I think we should avoid parsing twice at all costs.", "author": "hmottestad", "createdAt": "2020-04-03T08:49:36Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -195,10 +199,23 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tif (sailTupleExpr.isPresent()) {\n+\t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n+\t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);", "originalCommit": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1Nzc1OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402857759", "bodyText": "I guess this is more of a legacy method, so we could probably live with having to parse the query twice if we maybe add some documentation to let the user know to prefer the more explicit methods.", "author": "hmottestad", "createdAt": "2020-04-03T08:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDQ3OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410479", "bodyText": "You're right that it parses twice, and of course that is a penalty - but only if the underlying Sail actually chooses to do its own processing (which is not the default case). We could potentially improve it a bit by using some regex matching to determine the type (instead of a full parse) but at this point I didn't want to spend the effort.", "author": "jeenbroekstra", "createdAt": "2020-04-04T02:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMTE2Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403411166", "bodyText": "I'll add something to the javadoc to point to the more explicit methods though - it's a good thing to use those if you can, regardless.", "author": "jeenbroekstra", "createdAt": "2020-04-04T02:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0ODcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "3018cc4d740ba5464875743c853c57c54e412ae0", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\nindex b2735647e1..1e2bfe369b 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n\n@@ -199,19 +199,21 @@ public class SailRepositoryConnection extends AbstractRepositoryConnection imple\n \t\tParsedQuery parsedQuery = QueryParserUtil.parseQuery(ql, queryString, baseURI);\n \n \t\tif (parsedQuery instanceof ParsedTupleQuery) {\n-\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.QueryType.TUPLE, queryString,\n+\t\t\t\t\tbaseURI);\n \t\t\tif (sailTupleExpr.isPresent()) {\n \t\t\t\tparsedQuery = new ParsedTupleQuery(queryString, sailTupleExpr.get());\n \t\t\t}\n \t\t\treturn new SailTupleQuery((ParsedTupleQuery) parsedQuery, this);\n \t\t} else if (parsedQuery instanceof ParsedGraphQuery) {\n-\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.GRAPH, queryString, baseURI);\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.QueryType.GRAPH, queryString,\n+\t\t\t\t\tbaseURI);\n \t\t\tif (sailTupleExpr.isPresent()) {\n \t\t\t\tparsedQuery = new ParsedGraphQuery(queryString, sailTupleExpr.get());\n \t\t\t}\n \t\t\treturn new SailGraphQuery((ParsedGraphQuery) parsedQuery, this);\n \t\t} else if (parsedQuery instanceof ParsedBooleanQuery) {\n-\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.BOOLEAN, queryString,\n+\t\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.QueryType.BOOLEAN, queryString,\n \t\t\t\t\tbaseURI);\n \t\t\tif (sailTupleExpr.isPresent()) {\n \t\t\t\tparsedQuery = new ParsedBooleanQuery(queryString, sailTupleExpr.get());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzgwMw==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r402853803", "bodyText": "This looks like it ends up parsing only once.  Thats good :)\nBtw. Optionals have some rather nice chaining potential in java 8.\n\t\tParsedTupleQuery parsedQuery = sailTupleExpr\n\t\t\t.map(expr -> new ParsedTupleQuery(queryString, expr))\n\t\t\t.orElse(QueryParserUtil.parseTupleQuery(ql, queryString, baseURI));", "author": "hmottestad", "createdAt": "2020-04-03T08:55:13Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -208,21 +225,30 @@ public SailQuery prepareQuery(QueryLanguage ql, String queryString, String baseU\n \t@Override\n \tpublic SailTupleQuery prepareTupleQuery(QueryLanguage ql, String queryString, String baseURI)\n \t\t\tthrows MalformedQueryException {\n-\t\tParsedTupleQuery parsedQuery = QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n+\t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n+\t\tParsedTupleQuery parsedQuery = sailTupleExpr.isPresent()\n+\t\t\t\t? new ParsedTupleQuery(queryString, sailTupleExpr.get())\n+\t\t\t\t: QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n \t\treturn new SailTupleQuery(parsedQuery, this);", "originalCommit": "f3f2d05a1d8cfa25ccddd3a352621bcdf06c6b58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDU2MQ==", "url": "https://github.com/eclipse/rdf4j/pull/2058#discussion_r403410561", "bodyText": "I always forget about Optional.map for some reason. Good call, I'll fix that.", "author": "jeenbroekstra", "createdAt": "2020-04-04T02:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1MzgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "1e41e207b392db5b791a49df2f81eb01cb0f5e61", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\nindex b2735647e1..7f3a7c199a 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n\n@@ -226,9 +226,10 @@ public class SailRepositoryConnection extends AbstractRepositoryConnection imple\n \tpublic SailTupleQuery prepareTupleQuery(QueryLanguage ql, String queryString, String baseURI)\n \t\t\tthrows MalformedQueryException {\n \t\tOptional<TupleExpr> sailTupleExpr = sailConnection.prepareQuery(ql, Query.Type.TUPLE, queryString, baseURI);\n-\t\tParsedTupleQuery parsedQuery = sailTupleExpr.isPresent()\n-\t\t\t\t? new ParsedTupleQuery(queryString, sailTupleExpr.get())\n-\t\t\t\t: QueryParserUtil.parseTupleQuery(ql, queryString, baseURI);\n+\t\t\n+\t\tParsedTupleQuery parsedQuery = sailTupleExpr\n+\t\t\t\t.map(expr -> new ParsedTupleQuery(queryString, expr))\n+\t\t\t\t.orElse(QueryParserUtil.parseTupleQuery(ql, queryString, baseURI));\n \t\treturn new SailTupleQuery(parsedQuery, this);\n \t}\n \n"}}, {"oid": "1e41e207b392db5b791a49df2f81eb01cb0f5e61", "url": "https://github.com/eclipse/rdf4j/commit/1e41e207b392db5b791a49df2f81eb01cb0f5e61", "message": "GH-99 Improved explanation in Javadoc\n\n- also changed to use Optional.map to process sailTupleExpr", "committedDate": "2020-04-04T02:46:43Z", "type": "commit"}, {"oid": "3018cc4d740ba5464875743c853c57c54e412ae0", "url": "https://github.com/eclipse/rdf4j/commit/3018cc4d740ba5464875743c853c57c54e412ae0", "message": "GH-99 renamed enum to QueryType, added javadoc", "committedDate": "2020-04-04T02:59:45Z", "type": "commit"}, {"oid": "3018cc4d740ba5464875743c853c57c54e412ae0", "url": "https://github.com/eclipse/rdf4j/commit/3018cc4d740ba5464875743c853c57c54e412ae0", "message": "GH-99 renamed enum to QueryType, added javadoc", "committedDate": "2020-04-04T02:59:45Z", "type": "forcePushed"}]}