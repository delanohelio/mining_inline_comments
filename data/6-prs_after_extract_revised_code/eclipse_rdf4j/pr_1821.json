{"pr_number": 1821, "pr_title": "GH-1820: fix connection handling in RepositoryFederatedService", "pr_createdAt": "2020-01-09T15:13:49Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/1821", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODA3Nw==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548077", "bodyText": "Could you add a comment here that explains why this test is a good indicator if things are properly closed? I know you explained in the PR description but I'm thinking it would be good to have it as a code comment.", "author": "jeenbroekstra", "createdAt": "2020-01-11T23:44:38Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java", "diffHunk": "@@ -262,6 +265,59 @@ public void test8a_subSelectAll() throws Exception {\n \t\tassertResultEquals(evaluateQuery(query), \"var\", Lists.newArrayList(l(\"val1\")));\n \t}\n \n+\t@Test\n+\tpublic void test9_connectionHandling() throws Exception {\n+\n+\t\tSystem.setProperty(\"org.eclipse.rdf4j.repository.debug\", \"true\");\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tExecutorService executor = Executors.newFixedThreadPool(5);\n+\t\ttry {\n+\t\t\tfor (int i = 0; i < 5; i++) {\n+\t\t\t\texecutor.submit(() -> {\n+\n+\t\t\t\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\t\t\t\tassertResultEquals(evaluateQuery(query), \"var\", values);\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t} finally {\n+\t\t\texecutor.shutdown();\n+\t\t\texecutor.awaitTermination(10, TimeUnit.SECONDS);\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void test10_consumePartially() throws Exception {\n+\n+\t\tList<Value> values = Lists.newArrayList();\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tvalues.add(l(\"value\" + i));\n+\t\t}\n+\t\taddData(serviceRepo,\n+\t\t\t\tvalues.stream()\n+\t\t\t\t\t\t.map(value -> vf.createStatement(iri(\"s1\"), RDFS.LABEL, value))\n+\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\tString query = \"SELECT ?var WHERE { SERVICE <urn:dummy> { ?s ?p ?var  } }\";\n+\t\ttry (RepositoryConnection conn = localRepo.getConnection()) {\n+\t\t\ttry (TupleQueryResult tqr = conn.prepareTupleQuery(query).evaluate()) {\n+\n+\t\t\t\t// consume only two items\n+\t\t\t\ttqr.next();\n+\t\t\t\ttqr.next();", "originalCommit": "ad0e2d457dcdeba383a939e69a14269aecb3527f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTAyNg==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599026", "bodyText": "Added a comment to both tests.", "author": "aschwarte10", "createdAt": "2020-01-12T17:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "587564175f120a2745d177b2b5edf9b1b791c1c9", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java\nindex a6934122a8..c954080ab6 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedServiceIntegrationTest.java\n\n@@ -268,6 +268,12 @@ public class RepositoryFederatedServiceIntegrationTest {\n \t@Test\n \tpublic void test9_connectionHandling() throws Exception {\n \n+\t\t/*\n+\t\t * The purpose of this test is to simulate concurrent access to the RepositoryFederatedService and thus\n+\t\t * demonstrate correct behavior for the connection handling. Particularly, this test should terminate properly,\n+\t\t * and there should not be any hanging connections waiting for the shutdown.\n+\t\t */\n+\n \t\tSystem.setProperty(\"org.eclipse.rdf4j.repository.debug\", \"true\");\n \t\tList<Value> values = Lists.newArrayList();\n \t\tfor (int i = 0; i < 10; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODEzMQ==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548131", "bodyText": "Same here: does this need to be protected? Or can it be made private?", "author": "jeenbroekstra", "createdAt": "2020-01-11T23:46:22Z", "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -419,13 +503,28 @@ public void shutdown() throws QueryEvaluationException {\n \t\t}\n \t}\n \n-\tprotected RepositoryConnection getConnection() throws RepositoryException {\n-\t\t// use a cache connection if possible\n-\t\t// (TODO add mechanism to unset/close connection)\n-\t\tif (conn == null) {\n-\t\t\tconn = rep.getConnection();\n+\t/**\n+\t * Return a fresh {@link RepositoryConnection} from the configured repository.\n+\t * \n+\t * @return\n+\t * @throws RepositoryException\n+\t */\n+\tprotected RepositoryConnection freshConnection() throws RepositoryException {", "originalCommit": "ad0e2d457dcdeba383a939e69a14269aecb3527f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTAzNg==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599036", "bodyText": "done, made to private", "author": "aschwarte10", "createdAt": "2020-01-12T17:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "587564175f120a2745d177b2b5edf9b1b791c1c9", "chunk": "diff --git a/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java b/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\nindex 27412dc733..f775897318 100644\n--- a/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\n+++ b/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\n\n@@ -509,7 +517,7 @@ public class RepositoryFederatedService implements FederatedService {\n \t * @return\n \t * @throws RepositoryException\n \t */\n-\tprotected RepositoryConnection freshConnection() throws RepositoryException {\n+\tprivate RepositoryConnection freshConnection() throws RepositoryException {\n \t\treturn rep.getConnection();\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODE2OQ==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365548169", "bodyText": "Can this be private instead?", "author": "jeenbroekstra", "createdAt": "2020-01-11T23:47:10Z", "path": "core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java", "diffHunk": "@@ -128,10 +172,15 @@ protected void handleBindings() throws Exception {\n \t */\n \tprotected int boundJoinBlockSize = 15;\n \n+\t/**\n+\t * Whether to use a fresh repository connection for individual queries\n+\t */\n+\tprotected boolean useFreshConnection = true;", "originalCommit": "ad0e2d457dcdeba383a939e69a14269aecb3527f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5OTA2Mw==", "url": "https://github.com/eclipse/rdf4j/pull/1821#discussion_r365599063", "bodyText": "Done, see amended commit", "author": "aschwarte10", "createdAt": "2020-01-12T17:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0ODE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "587564175f120a2745d177b2b5edf9b1b791c1c9", "chunk": "diff --git a/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java b/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\nindex 27412dc733..f775897318 100644\n--- a/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\n+++ b/core/repository/sparql/src/main/java/org/eclipse/rdf4j/repository/sparql/federation/RepositoryFederatedService.java\n\n@@ -175,7 +175,7 @@ public class RepositoryFederatedService implements FederatedService {\n \t/**\n \t * Whether to use a fresh repository connection for individual queries\n \t */\n-\tprotected boolean useFreshConnection = true;\n+\tprivate boolean useFreshConnection = true;\n \n \t// flag indicating whether the repository shall be closed in #shutdown()\n \tprotected boolean shutDown = true;\n"}}, {"oid": "587564175f120a2745d177b2b5edf9b1b791c1c9", "url": "https://github.com/eclipse/rdf4j/commit/587564175f120a2745d177b2b5edf9b1b791c1c9", "message": "GH-1820: fix connection handling in RepositoryFederatedService\n\nThis change introduces a mode in RepositoryFederatedService which allows\nto always use a fresh RepositoryConnection for the actual query\ninvocation. In order to properly close the connection, the result\niteration is wrapped in a \"CloseConnectionIteration\"\n\nThe new mode is active by default, i.e. as of this change a fresh\nconnection is used for each SERVICE invocation.\n\nFor the re-use of the managed connection we now made sure to support\nsynchronized access, i.e. avoid to loose the references to created\nconnections.\n\nThe unit tests show that connections are properly closed. If it wasn't\nthe case, we would observe hanging tests for > 30s (i.e. until the\nautomatic timeout occurs)", "committedDate": "2020-01-12T15:04:27Z", "type": "commit"}, {"oid": "587564175f120a2745d177b2b5edf9b1b791c1c9", "url": "https://github.com/eclipse/rdf4j/commit/587564175f120a2745d177b2b5edf9b1b791c1c9", "message": "GH-1820: fix connection handling in RepositoryFederatedService\n\nThis change introduces a mode in RepositoryFederatedService which allows\nto always use a fresh RepositoryConnection for the actual query\ninvocation. In order to properly close the connection, the result\niteration is wrapped in a \"CloseConnectionIteration\"\n\nThe new mode is active by default, i.e. as of this change a fresh\nconnection is used for each SERVICE invocation.\n\nFor the re-use of the managed connection we now made sure to support\nsynchronized access, i.e. avoid to loose the references to created\nconnections.\n\nThe unit tests show that connections are properly closed. If it wasn't\nthe case, we would observe hanging tests for > 30s (i.e. until the\nautomatic timeout occurs)", "committedDate": "2020-01-12T15:04:27Z", "type": "forcePushed"}]}