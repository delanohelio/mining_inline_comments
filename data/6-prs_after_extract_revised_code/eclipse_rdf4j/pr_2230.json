{"pr_number": 2230, "pr_title": "GH-1481 accept graph patterns in DELETE WHERE updates", "pr_createdAt": "2020-05-16T11:23:14Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2230", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNDc4Mg==", "url": "https://github.com/eclipse/rdf4j/pull/2230#discussion_r426204782", "bodyText": "Good start with putting in a test. However, please note that the code in ...rdf4j/sparqlbuilder/examples is not really tests, but just usage examples. There is no checking in any of these tests (including yours) that the SparqlBuilder does what it's supposed to do, and produces the correct output.\nSince what you are testing here is the behavior of a ModifyQuery, I suggest you create a new unit test class in src/test/java: org.eclipse.rdf4j.sparqlbuilder.core.query.ModifyQueryTest, and put your test case in there. You should probably also put a test assertion (assertTrue or assertEquals) in to check that the resulting query string is what you expect it to be.", "author": "jeenbroekstra", "createdAt": "2020-05-17T00:55:27Z", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java", "diffHunk": "@@ -342,4 +342,29 @@ public void example_14() {\n \tpublic void example_15() {\n \t\tp(Queries.ADD().fromDefault().to(iri(\"http://example.org/named\")));\n \t}\n+\n+\t/**\n+\t * DELETE { GRAPH ?g1 { ?subject <http://my-example.com/anyIRI/> ?object . ?subject ?predicate\n+\t * <http://my-example.com/anyIRI/> . } } WHERE { GRAPH ?g1 { OPTIONAL { ?subject ?predicate\n+\t * <http://my-example.com/anyIRI/> . } OPTIONAL { ?subject <http://my-example.com/anyIRI/> ?object . } } }\n+\t */\n+\t@Test\n+\tpublic void example_issue_1481() {\n+\t\tModifyQuery modify = Queries.MODIFY();\n+\t\tIri g1 = () -> \"<g1>\";\n+\n+\t\tVariable subject = SparqlBuilder.var(\"subject\");\n+\t\tVariable obj = SparqlBuilder.var(\"object\");\n+\t\tPrefix pre = SparqlBuilder.prefix(iri(\"http://my-example.com/anyIRI/\"));\n+\t\tVariable predicate = SparqlBuilder.var(\"predicate\");\n+\n+\t\tTriplePattern delTriple1 = subject.has(pre.iri(\"\"), obj);\n+\t\tTriplePattern delTriple2 = subject.has(predicate, pre.iri(\"\"));\n+\t\tTriplePattern whereTriple1 = subject.has(predicate, pre.iri(\"\"));\n+\t\tTriplePattern whereTriple2 = subject.has(pre.iri(\"\"), obj);\n+\n+\t\tmodify.with(g1)\n+\t\t\t\t.delete(delTriple1, delTriple2)\n+\t\t\t\t.where(and(GraphPatterns.optional(whereTriple1), GraphPatterns.optional(whereTriple2)));", "originalCommit": "abf2cbd352aab4667f57f8f067b7c30986889de3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7591cce0b8548ab9ababc063c2c18dfd59d738e4", "chunk": "diff --git a/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java b/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\nindex b56ee93f9d..942def0718 100644\n--- a/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\n+++ b/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\n\n@@ -342,29 +342,4 @@ public class Section3Test extends BaseExamples {\n \tpublic void example_15() {\n \t\tp(Queries.ADD().fromDefault().to(iri(\"http://example.org/named\")));\n \t}\n-\n-\t/**\n-\t * DELETE { GRAPH ?g1 { ?subject <http://my-example.com/anyIRI/> ?object . ?subject ?predicate\n-\t * <http://my-example.com/anyIRI/> . } } WHERE { GRAPH ?g1 { OPTIONAL { ?subject ?predicate\n-\t * <http://my-example.com/anyIRI/> . } OPTIONAL { ?subject <http://my-example.com/anyIRI/> ?object . } } }\n-\t */\n-\t@Test\n-\tpublic void example_issue_1481() {\n-\t\tModifyQuery modify = Queries.MODIFY();\n-\t\tIri g1 = () -> \"<g1>\";\n-\n-\t\tVariable subject = SparqlBuilder.var(\"subject\");\n-\t\tVariable obj = SparqlBuilder.var(\"object\");\n-\t\tPrefix pre = SparqlBuilder.prefix(iri(\"http://my-example.com/anyIRI/\"));\n-\t\tVariable predicate = SparqlBuilder.var(\"predicate\");\n-\n-\t\tTriplePattern delTriple1 = subject.has(pre.iri(\"\"), obj);\n-\t\tTriplePattern delTriple2 = subject.has(predicate, pre.iri(\"\"));\n-\t\tTriplePattern whereTriple1 = subject.has(predicate, pre.iri(\"\"));\n-\t\tTriplePattern whereTriple2 = subject.has(pre.iri(\"\"), obj);\n-\n-\t\tmodify.with(g1)\n-\t\t\t\t.delete(delTriple1, delTriple2)\n-\t\t\t\t.where(and(GraphPatterns.optional(whereTriple1), GraphPatterns.optional(whereTriple2)));\n-\t}\n }\n"}}, {"oid": "7591cce0b8548ab9ababc063c2c18dfd59d738e4", "url": "https://github.com/eclipse/rdf4j/commit/7591cce0b8548ab9ababc063c2c18dfd59d738e4", "message": "Revert \"Formatting\"\n\nThis reverts commit abf2cbd352aab4667f57f8f067b7c30986889de3.\n\nSigned-off-by: Deepali <deepali17043@iiitd.ac.in>\n\nSigned-off-by: Deepali Chawla <<deepali17043@iiitd.ac.in>", "committedDate": "2020-05-17T06:21:22Z", "type": "forcePushed"}, {"oid": "556c8f3bab916aa5d9951fc6a722d6d1f1a815f5", "url": "https://github.com/eclipse/rdf4j/commit/556c8f3bab916aa5d9951fc6a722d6d1f1a815f5", "message": "Merge pull request #2195 from eclipse/releases/3.2.0\n\nnext development iteration: 3.2.1-SNAPSHOT", "committedDate": "2020-05-07T03:31:40Z", "type": "forcePushed"}, {"oid": "8b6bee3287ed5d33856ac4c6feb16817d3346af7", "url": "https://github.com/eclipse/rdf4j/commit/8b6bee3287ed5d33856ac4c6feb16817d3346af7", "message": "1481 Exampletest\n\nSigned-off-by: Deepali <deepali17043@iiitd.ac.in>", "committedDate": "2020-05-17T06:40:04Z", "type": "commit"}, {"oid": "8b6bee3287ed5d33856ac4c6feb16817d3346af7", "url": "https://github.com/eclipse/rdf4j/commit/8b6bee3287ed5d33856ac4c6feb16817d3346af7", "message": "1481 Exampletest\n\nSigned-off-by: Deepali <deepali17043@iiitd.ac.in>", "committedDate": "2020-05-17T06:40:04Z", "type": "forcePushed"}, {"oid": "2296a044676f0036e1526f106fe450b31b1cf79e", "url": "https://github.com/eclipse/rdf4j/commit/2296a044676f0036e1526f106fe450b31b1cf79e", "message": "GH-1481: Added test\n\nSigned-off-by: Kritika <kritika17061@iiitd.ac.in>", "committedDate": "2020-05-19T13:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNTgyNw==", "url": "https://github.com/eclipse/rdf4j/pull/2230#discussion_r429725827", "bodyText": "This has been copied to a new class ModifyQueryTest, which is good, but you still need to remove it from Section3Test again.", "author": "jeenbroekstra", "createdAt": "2020-05-25T04:23:12Z", "path": "core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java", "diffHunk": "@@ -342,4 +342,30 @@ public void example_14() {\n \tpublic void example_15() {\n \t\tp(Queries.ADD().fromDefault().to(iri(\"http://example.org/named\")));\n \t}\n+\n+\t/**\n+\t * DELETE { GRAPH ?g1 { ?subject <http://my-example.com/anyIRI/> ?object . ?subject ?predicate\n+\t * <http://my-example.com/anyIRI/> . } } WHERE { GRAPH ?g1 { OPTIONAL { ?subject ?predicate\n+\t * <http://my-example.com/anyIRI/> . } OPTIONAL { ?subject <http://my-example.com/anyIRI/> ?object . } } }\n+\t */\n+\t@Test\n+\tpublic void example_issue_1481() {", "originalCommit": "2296a044676f0036e1526f106fe450b31b1cf79e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MDkxNw==", "url": "https://github.com/eclipse/rdf4j/pull/2230#discussion_r430990917", "bodyText": "We have made removed the function from Section3Test", "author": "deepali17043", "createdAt": "2020-05-27T09:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNTgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a98e19c50a8c30be87aea6c889c2389f8c2c407f", "chunk": "diff --git a/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java b/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\nindex 037babb23e..659c36786f 100644\n--- a/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\n+++ b/core/sparqlbuilder/src/test/java/org/eclipse/rdf4j/sparqlbuilder/examples/updatespec/Section3Test.java\n\n@@ -343,29 +343,4 @@ public class Section3Test extends BaseExamples {\n \t\tp(Queries.ADD().fromDefault().to(iri(\"http://example.org/named\")));\n \t}\n \n-\t/**\n-\t * DELETE { GRAPH ?g1 { ?subject <http://my-example.com/anyIRI/> ?object . ?subject ?predicate\n-\t * <http://my-example.com/anyIRI/> . } } WHERE { GRAPH ?g1 { OPTIONAL { ?subject ?predicate\n-\t * <http://my-example.com/anyIRI/> . } OPTIONAL { ?subject <http://my-example.com/anyIRI/> ?object . } } }\n-\t */\n-\t@Test\n-\tpublic void example_issue_1481() {\n-\t\tModifyQuery modify = Queries.MODIFY();\n-\t\tIri g1 = () -> \"<g1>\";\n-\n-\t\tVariable subject = SparqlBuilder.var(\"subject\");\n-\t\tVariable obj = SparqlBuilder.var(\"object\");\n-\t\tPrefix pre = SparqlBuilder.prefix(iri(\"http://my-example.com/anyIRI/\"));\n-\t\tVariable predicate = SparqlBuilder.var(\"predicate\");\n-\n-\t\tTriplePattern delTriple1 = subject.has(pre.iri(\"\"), obj);\n-\t\tTriplePattern delTriple2 = subject.has(predicate, pre.iri(\"\"));\n-\t\tTriplePattern whereTriple1 = subject.has(predicate, pre.iri(\"\"));\n-\t\tTriplePattern whereTriple2 = subject.has(pre.iri(\"\"), obj);\n-\n-\t\tmodify.with(g1)\n-\t\t\t\t.delete(delTriple1, delTriple2)\n-\t\t\t\t.where(and(GraphPatterns.optional(whereTriple1), GraphPatterns.optional(whereTriple2)));\n-\t}\n-\n }\n"}}, {"oid": "a98e19c50a8c30be87aea6c889c2389f8c2c407f", "url": "https://github.com/eclipse/rdf4j/commit/a98e19c50a8c30be87aea6c889c2389f8c2c407f", "message": "GH 1481 Removed fn from Section3Test\n\nSigned-off-by: Deepali <deepali17043@iiitd.ac.in>", "committedDate": "2020-05-26T10:10:05Z", "type": "commit"}]}