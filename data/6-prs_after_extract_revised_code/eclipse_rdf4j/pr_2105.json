{"pr_number": 2105, "pr_title": "GH-2104 explain query (query plan) API design and initial implementation", "pr_createdAt": "2020-04-18T09:16:17Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2105", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzE5NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673195", "bodyText": "Is public by definition.", "author": "hmottestad", "createdAt": "2020-04-18T09:16:57Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -12,18 +12,18 @@\n /**\n  * A query on a repository that can be formulated in one of the supported query languages (for example SeRQL or SPARQL).\n  * It allows one to predefine bindings in the query to be able to reuse the same query with different bindings.\n- * \n+ *\n  * @author Arjohn Kampman\n  * @author jeen\n  */\n public interface Query extends Operation {\n \n \t/**\n \t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n-\t * \n+\t *\n \t * @since 3.2.0\n \t */\n-\tpublic enum QueryType {", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4OTU5OA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410789598", "bodyText": "Fwiw we have that in quite a few of our interface. I don't think we've been very consistent with this throughout.", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex ccb755205b..c7b53bf4be 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -7,7 +7,9 @@\n  *******************************************************************************/\n package org.eclipse.rdf4j.query;\n \n+import org.eclipse.rdf4j.common.annotation.Experimental;\n import org.eclipse.rdf4j.model.Statement;\n+import org.eclipse.rdf4j.query.explanation.Explanation;\n \n /**\n  * A query on a repository that can be formulated in one of the supported query languages (for example SeRQL or SPARQL).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzIxNw==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673217", "bodyText": "all interface methods are public by definition", "author": "hmottestad", "createdAt": "2020-04-18T09:17:14Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37c3fcdce2f169017fefe1f0da8f44bba84a4d0f", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex ccb755205b..9f8c4f98bd 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimizaed,\n+\t\tOptimized,\n \t\tExecuted\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzI1Nw==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673257", "bodyText": "New explain method, enums and returned interface.", "author": "hmottestad", "createdAt": "2020-04-18T09:17:38Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);\n \n \t/**\n \t * Returns the maximum query evaluation time.\n-\t * \n+\t *\n \t * @return The maximum query evaluation time, measured in seconds.\n \t * @see #setMaxQueryTime(int)\n \t * @deprecated since 2.0. Use {@link Operation#getMaxExecutionTime()} instead.\n \t */\n \t@Deprecated\n-\tpublic int getMaxQueryTime();\n+\tint getMaxQueryTime();\n+\n+\t// TODO - make default with no-op before merging to develop for backwards compatibility\n+\t// Also wondering if it makes sense to move this up a level to the Operation interface? Since we will be using a\n+\t// default no-op implementation we could move it without affecting backwards compatibility.\n+\tQueryExplainWrapper explain(QueryExplainLevel queryExplainLevel);\n+\n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t *\n+\t * @since 3.2.0\n+\t */\n+\tenum QueryExplainLevel {\n+\t\tUnoptimized,\n+\t\tOptimizaed,\n+\t\tExecuted\n+\t}\n+\n+\tinterface QueryExplainWrapper {\n+\n+\t\tString asHumanReadbleString();\n+\t\t// TupleExpr asTupleExpr(); location in maven hierarchy prevents us from using TupleExpr here\n+\t}", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37c3fcdce2f169017fefe1f0da8f44bba84a4d0f", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex ccb755205b..9f8c4f98bd 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimizaed,\n+\t\tOptimized,\n \t\tExecuted\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzMyNw==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673327", "bodyText": "These are just placeholders for the time being.", "author": "hmottestad", "createdAt": "2020-04-18T09:18:08Z", "path": "core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/AbstractQueryPreparer.java", "diffHunk": "@@ -126,6 +126,11 @@ public boolean evaluate() throws QueryEvaluationException {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic QueryExplainWrapper explain(QueryExplainLevel queryExplainLevel) {\n+\t\t\treturn null;\n+\t\t}", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "chunk": "diff --git a/core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/AbstractQueryPreparer.java b/core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/AbstractQueryPreparer.java\nindex 092f828409..df27844a47 100644\n--- a/core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/AbstractQueryPreparer.java\n+++ b/core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/AbstractQueryPreparer.java\n\n@@ -128,7 +129,7 @@ public abstract class AbstractQueryPreparer implements QueryPreparer {\n \t\t}\n \n \t\t@Override\n-\t\tpublic QueryExplainWrapper explain(QueryExplainLevel queryExplainLevel) {\n+\t\tpublic Explanation explain(Explanation.Level level) {\n \t\t\treturn null;\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzQwNg==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673406", "bodyText": "This pretty much delegates to the sail connection in the same way as eveluate() does.", "author": "hmottestad", "createdAt": "2020-04-18T09:18:51Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailTupleQuery.java", "diffHunk": "@@ -84,4 +85,23 @@ public void evaluate(TupleQueryResultHandler handler)\n \t\tTupleQueryResult queryResult = evaluate();\n \t\tQueryResults.report(queryResult, handler);\n \t}\n+\n+\t@Override\n+\tpublic QueryExplainWrapper explain(QueryExplainLevel queryExplainLevel) {\n+\n+\t\tTupleExpr tupleExpr = getParsedQuery().getTupleExpr();\n+\n+\t\tSailConnection sailCon = getConnection().getSailConnection();\n+\n+\t\tTupleExpr explainedTupleExpr = sailCon.explain(queryExplainLevel, tupleExpr, getActiveDataset(), getBindings(),\n+\t\t\t\tgetIncludeInferred());\n+\n+\t\treturn new QueryExplainWrapper() {\n+\t\t\t@Override\n+\t\t\tpublic String asHumanReadbleString() {\n+\t\t\t\treturn explainedTupleExpr.toString();\n+\t\t\t}\n+\t\t};\n+\n+\t}", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90389075aa529b47d5b90d08b2b12bf1faba040e", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailTupleQuery.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailTupleQuery.java\nindex 615c047252..a19d10ff7e 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailTupleQuery.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailTupleQuery.java\n\n@@ -98,7 +98,7 @@ public class SailTupleQuery extends SailQuery implements TupleQuery {\n \n \t\treturn new QueryExplainWrapper() {\n \t\t\t@Override\n-\t\t\tpublic String asHumanReadbleString() {\n+\t\t\tpublic String toString() {\n \t\t\t\treturn explainedTupleExpr.toString();\n \t\t\t}\n \t\t};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3MzQ3OA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410673478", "bodyText": "interface method for sail connections", "author": "hmottestad", "createdAt": "2020-04-18T09:19:21Z", "path": "core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java", "diffHunk": "@@ -441,4 +441,7 @@ default void removeStatement(UpdateContext op, Resource subj, URI pred, Value ob\n \t@Deprecated\n \tboolean pendingRemovals();\n \n+\t// TODO - make this a default no-op for backwards compatibility\n+\tTupleExpr explain(Query.QueryExplainLevel queryExplainLevel, TupleExpr tupleExpr, Dataset activeDataset,\n+\t\t\tBindingSet bindings, boolean includeInferred);", "originalCommit": "eb5ba381e1e67a9850c7dfc9977a0058be0cd13f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "chunk": "diff --git a/core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java b/core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java\nindex e915483b92..c48bc003a6 100644\n--- a/core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java\n+++ b/core/sail/api/src/main/java/org/eclipse/rdf4j/sail/SailConnection.java\n\n@@ -442,6 +443,6 @@ public interface SailConnection extends AutoCloseable {\n \tboolean pendingRemovals();\n \n \t// TODO - make this a default no-op for backwards compatibility\n-\tTupleExpr explain(Query.QueryExplainLevel queryExplainLevel, TupleExpr tupleExpr, Dataset activeDataset,\n+\tTupleExpr explain(Explanation.Level level, TupleExpr tupleExpr, Dataset activeDataset,\n \t\t\tBindingSet bindings, boolean includeInferred);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDEyNQ==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410674125", "bodyText": "Implementation of getting the query plan.\nA few things to note:\n\nwe use the evaluate() method to run the query instead of duplicating the code. We might need to duplicate it though since we need access to the evaluation strategy to enable tracking of result size when that gets merged in.\nwhen using evaluate() it would clone tupleExpr, that had to be removed if we don't want to duplicate a lot of code\nthe code in Optimized is copied from evaluate, not sure if this is want", "author": "hmottestad", "createdAt": "2020-04-18T09:26:10Z", "path": "core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java", "diffHunk": "@@ -255,6 +253,35 @@ protected EvaluationStrategy getEvaluationStrategy(Dataset dataset, TripleSource\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic TupleExpr explain(Query.QueryExplainLevel queryExplainLevel, TupleExpr tupleExpr, Dataset activeDataset,\n+\t\t\tBindingSet bindings, boolean includeInferred) {\n+\t\tswitch (queryExplainLevel) {\n+\t\tcase Executed:\n+\t\t\ttry (CloseableIteration<? extends BindingSet, QueryEvaluationException> evaluate = evaluate(tupleExpr,\n+\t\t\t\t\tactiveDataset, bindings, includeInferred)) {\n+\t\t\t\twhile (evaluate.hasNext()) {\n+\t\t\t\t\tevaluate.next();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn tupleExpr;\n+\t\tcase Optimized:\n+\t\t\tSailSource branch = branch(IncludeInferred.fromBoolean(includeInferred));\n+\t\t\tSailDataset rdfDataset = branch.dataset(getIsolationLevel());\n+\n+\t\t\tTripleSource tripleSource = new SailDatasetTripleSource(vf, rdfDataset);\n+\t\t\tEvaluationStrategy strategy = getEvaluationStrategy(activeDataset, tripleSource);\n+\n+\t\t\treturn strategy.optimize(tupleExpr, store.getEvaluationStatistics(), bindings);\n+\n+\t\tcase Unoptimized:\n+\t\t\treturn tupleExpr;\n+\t\t}\n+\n+\t\tthrow new UnsupportedOperationException(\"Unsupported queryExplainLevel: \" + queryExplainLevel);\n+\t}\n+", "originalCommit": "2ca7cd280e4346ba513da45e452295538dd1557c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java b/core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java\nindex 52f2abe121..3cee4c0d39 100644\n--- a/core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java\n+++ b/core/sail/base/src/main/java/org/eclipse/rdf4j/sail/base/SailSourceConnection.java\n\n@@ -266,7 +266,7 @@ public abstract class SailSourceConnection extends NotifyingSailConnectionBase\n \t\t\t}\n \n \t\t\treturn tupleExpr;\n-\t\tcase Optimized:\n+\t\tcase Optimizaed:\n \t\t\tSailSource branch = branch(IncludeInferred.fromBoolean(includeInferred));\n \t\t\tSailDataset rdfDataset = branch.dataset(getIsolationLevel());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMjAwOA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410702008", "bodyText": "This is how it would be used.", "author": "hmottestad", "createdAt": "2020-04-18T14:04:03Z", "path": "core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.sail.memory;\n+\n+import org.eclipse.rdf4j.model.vocabulary.RDF;\n+import org.eclipse.rdf4j.model.vocabulary.RDFS;\n+import org.eclipse.rdf4j.query.Query;\n+import org.eclipse.rdf4j.query.TupleQuery;\n+import org.eclipse.rdf4j.repository.sail.SailRepository;\n+import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.junit.Test;\n+\n+public class QueryPlanRetrievalTest {\n+\n+\tpublic static final String TUPLE_QUERY = \"select * where {?a a ?c, ?d}\";\n+\n+\t@Test\n+\tpublic void testTupleQuery() {\n+\t\tSailRepository sailRepository = new SailRepository(new MemoryStore());\n+\t\ttry (SailRepositoryConnection connection = sailRepository.getConnection()) {\n+\t\t\tTupleQuery tupleQuery = connection.prepareTupleQuery(TUPLE_QUERY);\n+\n+\t\t\tString queryPlan1 = tupleQuery.explain(Query.QueryExplainLevel.Unoptimized).asHumanReadbleString();\n+\n+\t\t\tSystem.out.println(queryPlan1);\n+\n+\t\t}\n+\t}", "originalCommit": "104d979e2d9b45a804dde0152f588806fc748042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDUyNA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410790524", "bodyText": "If as I mentioned above we use toString, this would become:\nQueryExplanation explanation = tupleQuery.explain(Query.QueryExplanationLevel.Unoptimized);\nSystem.out.println(explanation);", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwMjAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java b/core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java\nindex 27aaf4dcd9..db8b08659c 100644\n--- a/core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java\n+++ b/core/sail/memory/src/test/java/org/eclipse/rdf4j/sail/memory/QueryPlanRetrievalTest.java\n\n@@ -11,9 +11,12 @@ package org.eclipse.rdf4j.sail.memory;\n import org.eclipse.rdf4j.model.vocabulary.RDF;\n import org.eclipse.rdf4j.model.vocabulary.RDFS;\n import org.eclipse.rdf4j.query.Query;\n+import org.eclipse.rdf4j.query.QueryLanguage;\n import org.eclipse.rdf4j.query.TupleQuery;\n+import org.eclipse.rdf4j.query.algebra.TupleExpr;\n import org.eclipse.rdf4j.repository.sail.SailRepository;\n import org.eclipse.rdf4j.repository.sail.SailRepositoryConnection;\n+import org.eclipse.rdf4j.sail.NotifyingSailConnection;\n import org.junit.Test;\n \n public class QueryPlanRetrievalTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4ODc4NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410788785", "bodyText": "Perhaps just call it QueryExplanation - wrapper is an implementation detail.", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:38:20Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);\n \n \t/**\n \t * Returns the maximum query evaluation time.\n-\t * \n+\t *\n \t * @return The maximum query evaluation time, measured in seconds.\n \t * @see #setMaxQueryTime(int)\n \t * @deprecated since 2.0. Use {@link Operation#getMaxExecutionTime()} instead.\n \t */\n \t@Deprecated\n-\tpublic int getMaxQueryTime();\n+\tint getMaxQueryTime();\n+\n+\t// TODO - make default with no-op before merging to develop for backwards compatibility\n+\t// Also wondering if it makes sense to move this up a level to the Operation interface? Since we will be using a\n+\t// default no-op implementation we could move it without affecting backwards compatibility.\n+\tQueryExplainWrapper explain(QueryExplainLevel queryExplainLevel);\n+\n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t *\n+\t * @since 3.2.0\n+\t */\n+\tenum QueryExplainLevel {\n+\t\tUnoptimized,\n+\t\tOptimized,\n+\t\tExecuted\n+\t}\n+\n+\tinterface QueryExplainWrapper {", "originalCommit": "104d979e2d9b45a804dde0152f588806fc748042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTYwNg==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410791606", "bodyText": "I also think this interface should be top-level rather than nested in the Query interface. If we do that I'd also move the QueryExplanationLevel enum into it.", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4ODc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 9f8c4f98bd..ccb755205b 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimized,\n+\t\tOptimizaed,\n \t\tExecuted\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc4OTAzMg==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410789032", "bodyText": "There is a typo here: asHumanReadableString.\nI think I'd prefer if we just used toString to render the object as a human-readable string, that's what it's for after all. We can add toString to the interface with some javadoc to make it clear that we expect it to provide a concise readable representation of the query plan (without going into detail of what that looks like).", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:39:56Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);\n \n \t/**\n \t * Returns the maximum query evaluation time.\n-\t * \n+\t *\n \t * @return The maximum query evaluation time, measured in seconds.\n \t * @see #setMaxQueryTime(int)\n \t * @deprecated since 2.0. Use {@link Operation#getMaxExecutionTime()} instead.\n \t */\n \t@Deprecated\n-\tpublic int getMaxQueryTime();\n+\tint getMaxQueryTime();\n+\n+\t// TODO - make default with no-op before merging to develop for backwards compatibility\n+\t// Also wondering if it makes sense to move this up a level to the Operation interface? Since we will be using a\n+\t// default no-op implementation we could move it without affecting backwards compatibility.\n+\tQueryExplainWrapper explain(QueryExplainLevel queryExplainLevel);\n+\n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t *\n+\t * @since 3.2.0\n+\t */\n+\tenum QueryExplainLevel {\n+\t\tUnoptimized,\n+\t\tOptimized,\n+\t\tExecuted\n+\t}\n+\n+\tinterface QueryExplainWrapper {\n+\n+\t\tString asHumanReadbleString();", "originalCommit": "104d979e2d9b45a804dde0152f588806fc748042", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 9f8c4f98bd..ccb755205b 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimized,\n+\t\tOptimizaed,\n \t\tExecuted\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDgxOA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410790818", "bodyText": "I'd not want this in here anyway - we should hide the fact that we base it on a TupleExpr.", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:52:36Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);\n \n \t/**\n \t * Returns the maximum query evaluation time.\n-\t * \n+\t *\n \t * @return The maximum query evaluation time, measured in seconds.\n \t * @see #setMaxQueryTime(int)\n \t * @deprecated since 2.0. Use {@link Operation#getMaxExecutionTime()} instead.\n \t */\n \t@Deprecated\n-\tpublic int getMaxQueryTime();\n+\tint getMaxQueryTime();\n+\n+\t// TODO - make default with no-op before merging to develop for backwards compatibility\n+\t// Also wondering if it makes sense to move this up a level to the Operation interface? Since we will be using a\n+\t// default no-op implementation we could move it without affecting backwards compatibility.\n+\tQueryExplainWrapper explain(QueryExplainLevel queryExplainLevel);\n+\n+\t/**\n+\t * The different types of queries that RDF4J recognizes: boolean queries, graph queries, and tuple queries.\n+\t *\n+\t * @since 3.2.0\n+\t */\n+\tenum QueryExplainLevel {\n+\t\tUnoptimized,\n+\t\tOptimized,\n+\t\tExecuted\n+\t}\n+\n+\tinterface QueryExplainWrapper {\n+\n+\t\tString asHumanReadbleString();\n+\t\t// TupleExpr asTupleExpr(); location in maven hierarchy prevents us from using TupleExpr here", "originalCommit": "104d979e2d9b45a804dde0152f588806fc748042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg0NjA1NA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410846054", "bodyText": "I\u2019m trying to consider what we could do in the future to give advanced users more control of their queries.\nAn example is a query I have which takes hours to complete, but it\u2019ll easily run in milliseconds if certain query optimizers are turned off.\nOther databases have query hints that users can add to their sparql queries for this purpose.\nI was playing with the idea of exposing the tupleexpr to facilitate some similar, but on a lower level.\nAlso been thinking about using the resultSizeActual for optimizing a query that gets run frequently.", "author": "hmottestad", "createdAt": "2020-04-19T08:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAxMTgwMw==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r411011803", "bodyText": "Ah I see. I'd treat that as a followup issue, however, I can see that potentially tying it in more closely with TupleExpr is something we might want to keep our options open about. A simple solution would be to move this QueryExplanation interface into the query.algebra package (as part of the rdf4j-queryalgebra-model module). It's defensible to put it there anyway I think, and that way we will have the option in future to expose relevant bits of the query algebra model via this interface.", "author": "jeenbroekstra", "createdAt": "2020-04-19T23:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDYwNw==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r415044607", "bodyText": "", "author": "hmottestad", "createdAt": "2020-04-25T11:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDc3NA==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r415044774", "bodyText": "I cant move the interface from the query package to the queryalgebra package because that would cause this circular dependency. I haven't looked into it yet though.", "author": "hmottestad", "createdAt": "2020-04-25T11:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MDgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 9f8c4f98bd..ccb755205b 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimized,\n+\t\tOptimizaed,\n \t\tExecuted\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MTM1Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2105#discussion_r410791356", "bodyText": "If you move it up, we'll need a more generic name for the return type. We could just call it Explanation I guess, or else OperationExplanation. No real need for subtypes if they all do more or less the same thing anyway.", "author": "jeenbroekstra", "createdAt": "2020-04-19T01:56:37Z", "path": "core/query/src/main/java/org/eclipse/rdf4j/query/Query.java", "diffHunk": "@@ -44,21 +44,44 @@\n \t/**\n \t * Specifies the maximum time that a query is allowed to run. The query will be interrupted when it exceeds the time\n \t * limit. Any consecutive requests to fetch query results will result in {@link QueryInterruptedException}s.\n-\t * \n+\t *\n \t * @param maxQueryTime The maximum query time, measured in seconds. A negative or zero value indicates an unlimited\n \t *                     query time (which is the default).\n \t * @deprecated since 2.0. Use {@link Operation#setMaxExecutionTime(int)} instead.\n \t */\n \t@Deprecated\n-\tpublic void setMaxQueryTime(int maxQueryTime);\n+\tvoid setMaxQueryTime(int maxQueryTime);\n \n \t/**\n \t * Returns the maximum query evaluation time.\n-\t * \n+\t *\n \t * @return The maximum query evaluation time, measured in seconds.\n \t * @see #setMaxQueryTime(int)\n \t * @deprecated since 2.0. Use {@link Operation#getMaxExecutionTime()} instead.\n \t */\n \t@Deprecated\n-\tpublic int getMaxQueryTime();\n+\tint getMaxQueryTime();\n+\n+\t// TODO - make default with no-op before merging to develop for backwards compatibility\n+\t// Also wondering if it makes sense to move this up a level to the Operation interface? Since we will be using a\n+\t// default no-op implementation we could move it without affecting backwards compatibility.", "originalCommit": "104d979e2d9b45a804dde0152f588806fc748042", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "chunk": "diff --git a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\nindex 9f8c4f98bd..ccb755205b 100644\n--- a/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n+++ b/core/query/src/main/java/org/eclipse/rdf4j/query/Query.java\n\n@@ -74,7 +74,7 @@ public interface Query extends Operation {\n \t */\n \tenum QueryExplainLevel {\n \t\tUnoptimized,\n-\t\tOptimized,\n+\t\tOptimizaed,\n \t\tExecuted\n \t}\n \n"}}, {"oid": "a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "url": "https://github.com/eclipse/rdf4j/commit/a5a4fc99e30272141aebca1fe5bd0a68a3e322bc", "message": "GH-2104 initial implementation for tuple queries\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:22:11Z", "type": "commit"}, {"oid": "37c3fcdce2f169017fefe1f0da8f44bba84a4d0f", "url": "https://github.com/eclipse/rdf4j/commit/37c3fcdce2f169017fefe1f0da8f44bba84a4d0f", "message": "fixed typo\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:22:11Z", "type": "commit"}, {"oid": "750b28d69614a30e37685818a6a9ed8d000133d8", "url": "https://github.com/eclipse/rdf4j/commit/750b28d69614a30e37685818a6a9ed8d000133d8", "message": "more null implementations\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:22:11Z", "type": "commit"}, {"oid": "90389075aa529b47d5b90d08b2b12bf1faba040e", "url": "https://github.com/eclipse/rdf4j/commit/90389075aa529b47d5b90d08b2b12bf1faba040e", "message": "GH-2104 switch to toString\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:22:11Z", "type": "commit"}, {"oid": "90389075aa529b47d5b90d08b2b12bf1faba040e", "url": "https://github.com/eclipse/rdf4j/commit/90389075aa529b47d5b90d08b2b12bf1faba040e", "message": "GH-2104 switch to toString\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:22:11Z", "type": "forcePushed"}, {"oid": "d03fb431946fe3a98fd05b35dde08fd8cba12bb7", "url": "https://github.com/eclipse/rdf4j/commit/d03fb431946fe3a98fd05b35dde08fd8cba12bb7", "message": "formatting\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T08:47:34Z", "type": "commit"}, {"oid": "9a60b8991e72bc33a38ab2fffc852ae0729d1914", "url": "https://github.com/eclipse/rdf4j/commit/9a60b8991e72bc33a38ab2fffc852ae0729d1914", "message": "GH-2104 track result size\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T09:01:41Z", "type": "commit"}, {"oid": "ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "url": "https://github.com/eclipse/rdf4j/commit/ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "message": "moved interface\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T11:51:45Z", "type": "commit"}, {"oid": "ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "url": "https://github.com/eclipse/rdf4j/commit/ced4fc9d3cd5dc15752871b703c75834a38fb1f2", "message": "moved interface\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T11:51:45Z", "type": "forcePushed"}, {"oid": "06b0320bfe2c3ea01c681c9c003bd5c2e4436a17", "url": "https://github.com/eclipse/rdf4j/commit/06b0320bfe2c3ea01c681c9c003bd5c2e4436a17", "message": "added our own object structure and json support\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T18:57:11Z", "type": "commit"}, {"oid": "32951ba302620d245e0d92eb3cb9df39f9d49717", "url": "https://github.com/eclipse/rdf4j/commit/32951ba302620d245e0d92eb3cb9df39f9d49717", "message": "support ask and construct queries\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T19:07:05Z", "type": "commit"}, {"oid": "420a578236498e15daebe85033ea6dd20ca4da82", "url": "https://github.com/eclipse/rdf4j/commit/420a578236498e15daebe85033ea6dd20ca4da82", "message": "renamed \"as\" to \"to\" since this is more common\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T20:30:26Z", "type": "commit"}, {"oid": "87a639dbd8594d958fffd88fe394df24e8188ca6", "url": "https://github.com/eclipse/rdf4j/commit/87a639dbd8594d958fffd88fe394df24e8188ca6", "message": "default implementation\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T20:53:08Z", "type": "commit"}, {"oid": "c22c2c2fe0f7b74c8a74dde983f1745a38958d88", "url": "https://github.com/eclipse/rdf4j/commit/c22c2c2fe0f7b74c8a74dde983f1745a38958d88", "message": "updated docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-25T20:54:54Z", "type": "commit"}, {"oid": "3d2a5f739d9b24d8fbb7c7d51bc7fe2ce653fc3e", "url": "https://github.com/eclipse/rdf4j/commit/3d2a5f739d9b24d8fbb7c7d51bc7fe2ce653fc3e", "message": "quick fix for cloned tuple expr and also some cleanup of old code\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T10:27:16Z", "type": "commit"}, {"oid": "000d08034d5a6f786d36f8d79c4770c489ef3d62", "url": "https://github.com/eclipse/rdf4j/commit/000d08034d5a6f786d36f8d79c4770c489ef3d62", "message": "cleaned up some interfaces while we are at it\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T10:34:05Z", "type": "commit"}, {"oid": "51a0c32a376e699cd1a11a635e893f0e8f6fb243", "url": "https://github.com/eclipse/rdf4j/commit/51a0c32a376e699cd1a11a635e893f0e8f6fb243", "message": "timed queries\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T12:32:34Z", "type": "commit"}, {"oid": "0b66bee580640adbea767f9eca2c2aeb918cf109", "url": "https://github.com/eclipse/rdf4j/commit/0b66bee580640adbea767f9eca2c2aeb918cf109", "message": "default implementation\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T16:25:11Z", "type": "commit"}, {"oid": "748bf7096246e7c7fa88584712db351ce5868a84", "url": "https://github.com/eclipse/rdf4j/commit/748bf7096246e7c7fa88584712db351ce5868a84", "message": "various minor changes and also fix for wildcard in memory store stats\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T19:36:07Z", "type": "commit"}, {"oid": "4f25b3f05426660c1dfd8f1c3f83e8fead8a4413", "url": "https://github.com/eclipse/rdf4j/commit/4f25b3f05426660c1dfd8f1c3f83e8fead8a4413", "message": "improved tests\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T19:49:04Z", "type": "commit"}, {"oid": "9138cf3c4dfb42b461e0ce56b9b968fdb17db5b2", "url": "https://github.com/eclipse/rdf4j/commit/9138cf3c4dfb42b461e0ce56b9b968fdb17db5b2", "message": "fix test\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-26T19:53:10Z", "type": "commit"}, {"oid": "0bb0872a3d0217f3685e121352d4661cdf96ef4f", "url": "https://github.com/eclipse/rdf4j/commit/0bb0872a3d0217f3685e121352d4661cdf96ef4f", "message": "timed explanations\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-27T18:32:48Z", "type": "commit"}, {"oid": "34f35adf675b61afd011103c68e131909741620b", "url": "https://github.com/eclipse/rdf4j/commit/34f35adf675b61afd011103c68e131909741620b", "message": "docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-27T18:36:05Z", "type": "commit"}, {"oid": "467811fda47689e2c743a87f27529c4b3b8c2315", "url": "https://github.com/eclipse/rdf4j/commit/467811fda47689e2c743a87f27529c4b3b8c2315", "message": "Merge branch 'develop' into GH-2104-retrieve-query-plan-api\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-27T21:02:20Z", "type": "commit"}, {"oid": "7ca3812ff491ad5c12e443146325d64710c8888f", "url": "https://github.com/eclipse/rdf4j/commit/7ca3812ff491ad5c12e443146325d64710c8888f", "message": "formatting and marking as experimental\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-27T21:11:35Z", "type": "commit"}, {"oid": "737e6c5b927e91bb0ba397c451fb4bfb308a5be6", "url": "https://github.com/eclipse/rdf4j/commit/737e6c5b927e91bb0ba397c451fb4bfb308a5be6", "message": "GH-2104 expose join algorithm\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T08:02:39Z", "type": "commit"}, {"oid": "a6b4c99ffcf11fa6bc12c8e599bffcb9207719fd", "url": "https://github.com/eclipse/rdf4j/commit/a6b4c99ffcf11fa6bc12c8e599bffcb9207719fd", "message": "GH-2104 simple fix for locking issue and make sure we interrupt the interuption thread\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T08:59:30Z", "type": "commit"}, {"oid": "0adaedf9b90f71be087b4a7688007a8fd183685c", "url": "https://github.com/eclipse/rdf4j/commit/0adaedf9b90f71be087b4a7688007a8fd183685c", "message": "more docs\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T10:13:52Z", "type": "commit"}, {"oid": "be6df96ad3348f3ad981f9a5020265cd6c863a9d", "url": "https://github.com/eclipse/rdf4j/commit/be6df96ad3348f3ad981f9a5020265cd6c863a9d", "message": "Merge develop\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T10:16:04Z", "type": "commit"}, {"oid": "91aea1c1438bc5d4c4fa197f1f2a2dbc228327e0", "url": "https://github.com/eclipse/rdf4j/commit/91aea1c1438bc5d4c4fa197f1f2a2dbc228327e0", "message": "more docs and possible fix for timedOut\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T10:38:20Z", "type": "commit"}, {"oid": "cf6ced0ce2990fb0b9fa667c76b55476342d4a20", "url": "https://github.com/eclipse/rdf4j/commit/cf6ced0ce2990fb0b9fa667c76b55476342d4a20", "message": "more docs and cleanup\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T11:18:00Z", "type": "commit"}, {"oid": "b4df977b10c697f31420bd2a9e968061095875ac", "url": "https://github.com/eclipse/rdf4j/commit/b4df977b10c697f31420bd2a9e968061095875ac", "message": "more cleanup\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T11:24:28Z", "type": "commit"}, {"oid": "7bc80ed71810ad483597b687ff45985850d7ddc7", "url": "https://github.com/eclipse/rdf4j/commit/7bc80ed71810ad483597b687ff45985850d7ddc7", "message": "two more tings marked as experimental\n\nSigned-off-by: Ha\u030avard Ottestad <hmottestad@gmail.com>", "committedDate": "2020-04-28T12:15:08Z", "type": "commit"}]}