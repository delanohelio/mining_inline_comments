{"pr_number": 2248, "pr_title": "GH-399 detect invalid INSERT/DELETE on parse", "pr_createdAt": "2020-05-20T20:41:02Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2248", "timeline": [{"oid": "65c6a5bf7953636f6c744293c6b4456baadc24e9", "url": "https://github.com/eclipse/rdf4j/commit/65c6a5bf7953636f6c744293c6b4456baadc24e9", "message": "GH-399 Added code and test for insert query validation\n\nSigned-off-by: ishaanbassi <ishaan16238@iiitd.ac.in>", "committedDate": "2020-05-20T20:21:42Z", "type": "commit"}, {"oid": "9c1faaf6624e70620b7b2799814168db24f38cfd", "url": "https://github.com/eclipse/rdf4j/commit/9c1faaf6624e70620b7b2799814168db24f38cfd", "message": "GH-399 Added Delete query validation code\n\nSigned-off-by: abhishekag03 <abhishek16126@iiitd.ac.in>", "committedDate": "2020-05-20T20:25:01Z", "type": "commit"}, {"oid": "77ad791d1227a5c78671faab2ab78cb629c9cb2a", "url": "https://github.com/eclipse/rdf4j/commit/77ad791d1227a5c78671faab2ab78cb629c9cb2a", "message": "GH-399 Added invalid delete query testcase\n\nSigned-off-by: kaustavvats <kaustav16048@iiitd.ac.in>", "committedDate": "2020-05-20T20:35:18Z", "type": "commit"}, {"oid": "2dedcedda0b4197103c1480669636126697acb33", "url": "https://github.com/eclipse/rdf4j/commit/2dedcedda0b4197103c1480669636126697acb33", "message": "GH-399 Added invalid delete query testcase\n\nSigned-off-by: kaustavvats <kaustav16048@iiitd.ac.in>", "committedDate": "2020-05-20T20:38:14Z", "type": "commit"}, {"oid": "ebd48ad054f9952cd147b187b3f6298480de1818", "url": "https://github.com/eclipse/rdf4j/commit/ebd48ad054f9952cd147b187b3f6298480de1818", "message": "GH-399 fixed formatting\n\nSigned-off-by: kaustavvats <kaustav16048@iiitd.ac.in>", "committedDate": "2020-05-20T20:46:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0NDEwMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428344101", "bodyText": "It shouldn't be necessary to extend TestCase - we use JUnit 4, and TestCase is a JUnit 3 thing.", "author": "jeenbroekstra", "createdAt": "2020-05-20T22:29:12Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0NjgzNA==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428346834", "bodyText": "This exception should be wrapped and rethrown, probably in a MalformedQueryException. Also, I think you should catch RDFParseException and rethrow it wrapped in a MalformedQueryException.", "author": "jeenbroekstra", "createdAt": "2020-05-20T22:36:56Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -262,7 +269,22 @@ public SailBooleanQuery prepareBooleanQuery(QueryLanguage ql, String queryString\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n+\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n+\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n+\t\tfor (UpdateExpr expr : updateExprs) {\n+\t\t\tString datablock = \"\";\n+\t\t\tif (expr instanceof InsertData) {\n+\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n+\t\t\t} else if (expr instanceof DeleteData) {\n+\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tparser.parse(new StringReader(datablock), \"\");\n+\t\t\t} catch (IOException e) {\n+\t\t\t\te.printStackTrace();", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\nindex 4df8261de8..1c63fece4e 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n\n@@ -269,22 +269,6 @@ public class SailRepositoryConnection extends AbstractRepositoryConnection imple\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n-\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n-\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n-\t\tfor (UpdateExpr expr : updateExprs) {\n-\t\t\tString datablock = \"\";\n-\t\t\tif (expr instanceof InsertData) {\n-\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n-\t\t\t} else if (expr instanceof DeleteData) {\n-\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tparser.parse(new StringReader(datablock), \"\");\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\n-\t\t}\n \t\treturn new SailUpdate(parsedUpdate, this);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0OTQ5OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428349499", "bodyText": "I think it should throw a MalformedQueryException rather than an RDFParseException - similar to how other syntactically illegal queries or updates result in a MalformedQueryException. You could wrap the RDFParseException produced by the parser in it so the cause is clear.", "author": "jeenbroekstra", "createdAt": "2020-05-20T22:44:32Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n+\n+\tprivate Repository m_repository;\n+\n+\t@Override\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tm_repository = new SailRepository(new MemoryStore());\n+\t}\n+\n+\t@Override\n+\tprotected void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tm_repository.shutDown();\n+\t}\n+\n+\t// @Test (expected = org.eclipse.rdf4j.rio.RDFParseException.class)\n+\t@Test\n+\tpublic void testInvalidInsertUpdate() {\n+\t\tRepositoryConnection connection = m_repository.getConnection();\n+\t\ttry {\n+\t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n+\t\t} catch (RDFParseException rdfpe) {\n+\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t}\n+\n+\t}\n+\n+\t// @Test (expected = org.eclipse.rdf4j.rio.RDFParseException.class)\n+\t@Test\n+\tpublic void testInvalidDeleteUpdate() {\n+\t\tRepositoryConnection connection = m_repository.getConnection();\n+\t\ttry {\n+\t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"delete data { ?s ?p ?o }\");\n+\t\t} catch (RDFParseException rdfpe) {", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM0OTkxMw==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428349913", "bodyText": "You don't need to do this when the datablock is empty.", "author": "jeenbroekstra", "createdAt": "2020-05-20T22:45:41Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -262,7 +269,22 @@ public SailBooleanQuery prepareBooleanQuery(QueryLanguage ql, String queryString\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n+\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n+\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n+\t\tfor (UpdateExpr expr : updateExprs) {\n+\t\t\tString datablock = \"\";\n+\t\t\tif (expr instanceof InsertData) {\n+\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n+\t\t\t} else if (expr instanceof DeleteData) {\n+\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n+\t\t\t}\n+\t\t\ttry {\n+\t\t\t\tparser.parse(new StringReader(datablock), \"\");", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\nindex 4df8261de8..1c63fece4e 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n\n@@ -269,22 +269,6 @@ public class SailRepositoryConnection extends AbstractRepositoryConnection imple\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n-\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n-\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n-\t\tfor (UpdateExpr expr : updateExprs) {\n-\t\t\tString datablock = \"\";\n-\t\t\tif (expr instanceof InsertData) {\n-\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n-\t\t\t} else if (expr instanceof DeleteData) {\n-\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tparser.parse(new StringReader(datablock), \"\");\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\n-\t\t}\n \t\treturn new SailUpdate(parsedUpdate, this);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NDg1Mw==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428354853", "bodyText": "Perhaps we should move all of this into the SPARQLParser itself. It seems the more logical place to handle it. If you do it here, you will need to duplicate this code in other repository implementations (such as HTTPRepository and SPARQLRepository).\nWhen actually executing the insert/delete, the parser is reconfigured for specific types of errors. For INSERTs, the following config settings are done:\n\tparser.setLineNumberOffset(insertDataExpr.getLineNumberOffset());\n\tparser.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_DATATYPE_VALUES);\n\tparser.getParserConfig().addNonFatalError(BasicParserSettings.FAIL_ON_UNKNOWN_DATATYPES);\n\tparser.getParserConfig().set(BasicParserSettings.SKOLEMIZE_ORIGIN, null);\n\nand for DELETE, the following:\n\tparser.setLineNumberOffset(deleteDataExpr.getLineNumberOffset());\n\tparser.setAllowBlankNodes(false); // no blank nodes allowed in DELETE DATA.\n\nI don't think we need the 'non-fatal error' settings (after all we want a parse exception when an error occurs), but the other settings we should probably duplicate here. The line number offset will hopefully correct the odd line numbers you're currently seeing in the tests.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:00:10Z", "path": "core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java", "diffHunk": "@@ -262,7 +269,22 @@ public SailBooleanQuery prepareBooleanQuery(QueryLanguage ql, String queryString\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n+\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n+\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n+\t\tfor (UpdateExpr expr : updateExprs) {\n+\t\t\tString datablock = \"\";\n+\t\t\tif (expr instanceof InsertData) {\n+\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n+\t\t\t} else if (expr instanceof DeleteData) {\n+\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n+\t\t\t}", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5MzA4MA==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428593080", "bodyText": "Hey @jeenbroekstra, thanks for the valuable feedback. We are facing the following error when adding SPARQLUpdateDataBlockParser in the SPARQLParser.java file -\n\"Adding dependency on module 'rdf4j-repository-sail' will introduce circular dependency between modules 'rdf4j-queryalgebra-evaluation' and 'rdf4j-queryparser-sparql'\" .\nLet us know how to proceed. Meanwhile, we are trying to figure out some other way to parse datablocks.", "author": "ishaanbassi", "createdAt": "2020-05-21T11:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NDg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4ODcyMw==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r429088723", "bodyText": "@ishaanbassi Ah good point, I hadn't thought of that. This will require a bit of refactoring. I suggest you move the SPARQLUpdateDatablockParser class to package org.eclipse.rdf4j.query.parser.sparql, in the rdf4j-queryparser-sparql module. That should solve the circular dependency issue. You will also need to add a new dependency for the trig parser to the pom.xml in the rdf4j-queryparser-sparql module:\n\t<dependency>\n\t\t<groupId>${project.groupId}</groupId>\n\t\t<artifactId>rdf4j-rio-trig</artifactId>\n\t\t<version>${project.version}</version>\n\t</dependency>\n\nTo preserve backward compatibility, leave an empty class with the old name in the old location, marked @deprecated.\nYou know, I was actually doing these change while writing this, to make sure I wasn't making a mistake. I might as well push to your branch, so you can see what I mean.", "author": "jeenbroekstra", "createdAt": "2020-05-22T07:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NDg1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\nindex 4df8261de8..1c63fece4e 100644\n--- a/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n+++ b/core/repository/sail/src/main/java/org/eclipse/rdf4j/repository/sail/SailRepositoryConnection.java\n\n@@ -269,22 +269,6 @@ public class SailRepositoryConnection extends AbstractRepositoryConnection imple\n \tpublic Update prepareUpdate(QueryLanguage ql, String update, String baseURI)\n \t\t\tthrows RepositoryException, MalformedQueryException {\n \t\tParsedUpdate parsedUpdate = QueryParserUtil.parseUpdate(ql, update, baseURI);\n-\t\tList<UpdateExpr> updateExprs = parsedUpdate.getUpdateExprs();\n-\t\tSPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(this.getValueFactory());\n-\t\tfor (UpdateExpr expr : updateExprs) {\n-\t\t\tString datablock = \"\";\n-\t\t\tif (expr instanceof InsertData) {\n-\t\t\t\tdatablock = ((InsertData) expr).getDataBlock();\n-\t\t\t} else if (expr instanceof DeleteData) {\n-\t\t\t\tdatablock = ((DeleteData) expr).getDataBlock();\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tparser.parse(new StringReader(datablock), \"\");\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\n-\t\t}\n \t\treturn new SailUpdate(parsedUpdate, this);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NTEzMA==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428355130", "bodyText": "In JUnit 4, rather than @Override, this should have a @Before annotation.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:00:55Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n+\n+\tprivate Repository m_repository;\n+\n+\t@Override\n+\tprotected void setUp() throws Exception {", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NTI0Ng==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428355246", "bodyText": "Use JUnit 4 @After  instead of overrriding.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:01:22Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n+\n+\tprivate Repository m_repository;\n+\n+\t@Override\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tm_repository = new SailRepository(new MemoryStore());\n+\t}\n+\n+\t@Override", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1NTU3OQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428355579", "bodyText": "Why is it reporting line 7, on a one-line update? That can't be right.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:02:26Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n+\n+\tprivate Repository m_repository;\n+\n+\t@Override\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tm_repository = new SailRepository(new MemoryStore());\n+\t}\n+\n+\t@Override\n+\tprotected void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tm_repository.shutDown();\n+\t}\n+\n+\t// @Test (expected = org.eclipse.rdf4j.rio.RDFParseException.class)\n+\t@Test\n+\tpublic void testInvalidInsertUpdate() {\n+\t\tRepositoryConnection connection = m_repository.getConnection();\n+\t\ttry {\n+\t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n+\t\t} catch (RDFParseException rdfpe) {\n+\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1ODEyNw==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428358127", "bodyText": "Ah, I only just now noticed that this was an existing, commented-out test class that you added your test to. I don't think that's quite right, let me have a closer look and I'll try and give some advice on how to better organize this.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:10:04Z", "path": "compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java", "diffHunk": "@@ -52,3 +64,42 @@\n //\t\tSystem.err.println(\"temporarily disabled testAutoCommitHandling() for HTTPRepository\");\n //\t}\n //}\n+public class SPARQLRepositorySparqlUpdateTest extends TestCase {", "originalCommit": "ebd48ad054f9952cd147b187b3f6298480de1818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2MjU4OA==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r428362588", "bodyText": "Yeah, I think you should undo this, leave this old class commented out, and move your tests to the SPARQLUpdateTest test suite. See my other comment, below, for details.", "author": "jeenbroekstra", "createdAt": "2020-05-20T23:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM1ODEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "chunk": "diff --git a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\nindex 218dd13401..ff2d42a80c 100644\n--- a/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n+++ b/compliance/repository/src/test/java/org/eclipse/rdf4j/repository/sparql/SPARQLRepositorySparqlUpdateTest.java\n\n@@ -86,9 +86,12 @@ public class SPARQLRepositorySparqlUpdateTest extends TestCase {\n \t\tRepositoryConnection connection = m_repository.getConnection();\n \t\ttry {\n \t\t\tUpdate update = connection.prepareUpdate(QueryLanguage.SPARQL, \"insert data { ?s ?p ?o }\");\n-\t\t} catch (RDFParseException rdfpe) {\n-\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+//\t\t\tSystem.out.println(e.printStackTrace());\n+//\t\t\tAssert.assertEquals(7, rdfpe.getLineNumber());\n \t\t}\n+\t\t//RDFParseException rdfpe\n \n \t}\n \n"}}, {"oid": "ff392f4dc644ba7ef0fbda42b8c15a6a2cad654e", "url": "https://github.com/eclipse/rdf4j/commit/ff392f4dc644ba7ef0fbda42b8c15a6a2cad654e", "message": "GH-399 migrate SPARQLUpdateDataBlockParser to sparql parser module", "committedDate": "2020-05-22T07:46:43Z", "type": "commit"}, {"oid": "6abced7872395d62c42ce144412fcafd5d1df112", "url": "https://github.com/eclipse/rdf4j/commit/6abced7872395d62c42ce144412fcafd5d1df112", "message": "GH-399 add constructors to deprecated class for backward compatibility", "committedDate": "2020-05-22T07:51:26Z", "type": "commit"}, {"oid": "a7a7ab7261fdee49e3efb88cc343c562da9021a0", "url": "https://github.com/eclipse/rdf4j/commit/a7a7ab7261fdee49e3efb88cc343c562da9021a0", "message": "GH-399 Added datablock parser to SPARQLParser\n\nSigned-off-by: ishaanbassi <ishaan16238@iiitd.ac.in>", "committedDate": "2020-05-22T11:56:20Z", "type": "commit"}, {"oid": "0b1b4a4afa7b71a898102ba5a8d85352f150f473", "url": "https://github.com/eclipse/rdf4j/commit/0b1b4a4afa7b71a898102ba5a8d85352f150f473", "message": "GH-399 added invalid insert data test case\n\nSigned-off-by: abhishekag03 <abhishek16126@iiitd.ac.in>", "committedDate": "2020-05-22T12:18:13Z", "type": "commit"}, {"oid": "1ab15ccb26a83a91f6818a2cee9488f9375e29a6", "url": "https://github.com/eclipse/rdf4j/commit/1ab15ccb26a83a91f6818a2cee9488f9375e29a6", "message": "GH-399 Added delete update testcase and fixed formatting\n\nSigned-off-by: kaustavvats <kaustav16048@iiitd.ac.in>", "committedDate": "2020-05-22T12:35:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyODUxNg==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r429228516", "bodyText": "Thanks for the help @jeenbroekstra . We have done all the changes suggested above.\nWe also noted one thing in the SPARQLParser.java file. In case the updateNode itself is not null, then do we need to check separately that the datablock is empty? We have kept this condition for now.", "author": "ishaanbassi", "createdAt": "2020-05-22T12:53:54Z", "path": "core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLParser.java", "diffHunk": "@@ -130,23 +130,23 @@ public ParsedUpdate parseUpdate(String updateStr, String baseURI) throws Malform\n \n \t\t\t\t\tString datablock = \"\";\n \t\t\t\t\tif (updateExpr instanceof InsertData) {\n-\t\t\t\t\t\tInsertData insertDataExpr = (InsertData)updateExpr;\n+\t\t\t\t\t\tInsertData insertDataExpr = (InsertData) updateExpr;\n \t\t\t\t\t\tparser.getParserConfig().set(BasicParserSettings.SKOLEMIZE_ORIGIN, null);\n \t\t\t\t\t\tparser.setLineNumberOffset(insertDataExpr.getLineNumberOffset());\n \t\t\t\t\t\tdatablock = insertDataExpr.getDataBlock();\n \t\t\t\t\t} else if (updateExpr instanceof DeleteData) {\n-\t\t\t\t\t\tDeleteData deleteDataExpr = (DeleteData)updateExpr;\n+\t\t\t\t\t\tDeleteData deleteDataExpr = (DeleteData) updateExpr;\n \t\t\t\t\t\tparser.setLineNumberOffset(deleteDataExpr.getLineNumberOffset());\n \t\t\t\t\t\tparser.setAllowBlankNodes(false);\n \t\t\t\t\t\tdatablock = deleteDataExpr.getDataBlock();\n \t\t\t\t\t}\n-\t\t\t\t\tif(!datablock.equals(\"\")){\n+\n+\t\t\t\t\tif (!datablock.equals(\"\")) {", "originalCommit": "1ab15ccb26a83a91f6818a2cee9488f9375e29a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwNDEzNQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r429504135", "bodyText": "Yeah, I think that how you currently have it is correct: you only want to process the datablock if it is not empty. Even if updateNode is not null, it can still be a different type of update, e.g. a  Modify operation, in which case there is no datablock to parse.\nI don't think it matters too much because the parser will return very quickly on an empty string, but I think doing a quick string equality check is marginally more efficient.", "author": "jeenbroekstra", "createdAt": "2020-05-23T01:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyODUxNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c54ab36e3e05c9c7e682f057a99500432dab5c07", "url": "https://github.com/eclipse/rdf4j/commit/c54ab36e3e05c9c7e682f057a99500432dab5c07", "message": "GH-399 Fixed all remaining testcases, Added condition in parseGraph function\n\nSigned-off-by: Kaustav Vats <kaustav16048@iiitd.ac.in>", "committedDate": "2020-05-23T12:50:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzgxMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r429637811", "bodyText": "@jeenbroekstra, we found that the failing testcases in ShaclTest, are due to this condition on readCodePoint function. Hence, we are not sure if these changes are sufficient. Kindly suggest an alternative solution or you can push a fix. Thanks for the help!", "author": "ishaanbassi", "createdAt": "2020-05-24T13:38:51Z", "path": "core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLUpdateDataBlockParser.java", "diffHunk": "@@ -70,7 +72,90 @@ public RDFFormat getRDFFormat() {\n \n \t@Override\n \tprotected void parseGraph() throws RDFParseException, RDFHandlerException, IOException {\n-\t\tsuper.parseGraph();\n+\t\tint c = readCodePoint();\n+\t\tint c2 = peekCodePoint();\n+\t\tResource contextOrSubject = null;\n+\t\tboolean foundContextOrSubject = false;\n+\t\tif (c == '[') {\n+\t\t\tskipWSC();\n+\t\t\tc2 = readCodePoint();\n+\t\t\tif (c2 == ']') {\n+\t\t\t\tcontextOrSubject = createNode();\n+\t\t\t\tfoundContextOrSubject = true;\n+\t\t\t\tskipWSC();\n+\t\t\t} else {\n+\t\t\t\tunread(c2);\n+\t\t\t\tunread(c);\n+\t\t\t}\n+\t\t\tc = readCodePoint();\n+\t\t} else if (c == '<' || TurtleUtil.isPrefixStartChar(c) || (c == ':' && c2 != '-') || (c == '_' && c2 == ':')) {\n+\t\t\tunread(c);\n+\n+\t\t\tValue value = parseValue();\n+\n+\t\t\tif (value instanceof Resource) {\n+\t\t\t\tcontextOrSubject = (Resource) value;\n+\t\t\t\tfoundContextOrSubject = true;\n+\t\t\t} else {\n+\t\t\t\t// NOTE: If a user parses Turtle using TriG, then the following\n+\t\t\t\t// could actually be \"Illegal subject name\", but it should still\n+\t\t\t\t// hold\n+\t\t\t\treportFatalError(\"Illegal graph name: \" + value);\n+\t\t\t}\n+\n+\t\t\tskipWSC();\n+\t\t\tc = readCodePoint();\n+\t\t} else {\n+\t\t\tsetContext(null);\n+\t\t}\n+\n+\t\tif (c == '{') {\n+\t\t\tsetContext(contextOrSubject);\n+\n+\t\t\tc = skipWSC();\n+\n+\t\t\tif (c != '}') {\n+\t\t\t\tparseTriples();\n+\n+\t\t\t\tc = skipWSC();\n+\n+\t\t\t\twhile (c == '.') {\n+\t\t\t\t\treadCodePoint();\n+\n+\t\t\t\t\tc = skipWSC();\n+\n+\t\t\t\t\tif (c == '}') {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tparseTriples();\n+\n+\t\t\t\t\tc = skipWSC();\n+\t\t\t\t}\n+\n+\t\t\t\tverifyCharacterOrFail(c, \"}\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\tsetContext(null);\n+\n+\t\t\t// Did not turn out to be a graph, so assign it to subject instead\n+\t\t\t// and\n+\t\t\t// parse from here to triples\n+\t\t\tif (foundContextOrSubject) {\n+\t\t\t\tsubject = contextOrSubject;\n+\t\t\t\tunread(c);\n+\t\t\t\tparsePredicateObjectList();\n+\t\t\t}\n+\t\t\t// Or if we didn't recognise anything, just parse as Turtle\n+\t\t\telse {\n+\t\t\t\tunread(c);\n+\t\t\t\tparseTriples();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (c == '.' || c == '}') {", "originalCommit": "c54ab36e3e05c9c7e682f057a99500432dab5c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyNDk0NQ==", "url": "https://github.com/eclipse/rdf4j/pull/2248#discussion_r429724945", "bodyText": "The problem is that you are looking at the wrong character. You haven't advanced c yet, so it's still the last processed char - which will never be equal to '.' or '}', so the end char is never read. This is what causes the failures in the SHACL tests.\nTo fix, add this line before your if-condition:\n\tc = peekCodePoint();\n\nThat sets the value of c to the next char to be read, and then we decide to actually read if it is indeed a full stop or a closing bracket. Note that we use peek instead of read so that if the character isn't one we need to skip over, we haven't removed it for future processing yet.", "author": "jeenbroekstra", "createdAt": "2020-05-25T04:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNzgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f0e7cf24c35d1e20903983cc18017e014a7e15a", "chunk": "diff --git a/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLUpdateDataBlockParser.java b/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLUpdateDataBlockParser.java\nindex 415d4aff38..8cf80bd2de 100644\n--- a/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLUpdateDataBlockParser.java\n+++ b/core/queryparser/sparql/src/main/java/org/eclipse/rdf4j/query/parser/sparql/SPARQLUpdateDataBlockParser.java\n\n@@ -153,6 +153,7 @@ public class SPARQLUpdateDataBlockParser extends TriGStarParser {\n \t\t\t}\n \t\t}\n \n+\t\tc = peekCodePoint();\n \t\tif (c == '.' || c == '}') {\n \t\t\treadCodePoint();\n \t\t}\n"}}, {"oid": "5f0e7cf24c35d1e20903983cc18017e014a7e15a", "url": "https://github.com/eclipse/rdf4j/commit/5f0e7cf24c35d1e20903983cc18017e014a7e15a", "message": "GH-399 updated SPARQLUpdateDataBlockParser to read end character\n\nSigned-off-by: ishaanbassi <ishaan16238@iiitd.ac.in>", "committedDate": "2020-05-25T12:26:58Z", "type": "commit"}]}