{"pr_number": 2590, "pr_title": "GH-2589 standalone vocabularies", "pr_createdAt": "2020-10-10T15:43:47Z", "pr_url": "https://github.com/eclipse/rdf4j/pull/2590", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMTAxMQ==", "url": "https://github.com/eclipse/rdf4j/pull/2590#discussion_r503531011", "bodyText": "This shift away from using the SimpleValueFactory might impact performance. We'll need to take a closer look at anything involving IRI object comparison.", "author": "jeenbroekstra", "createdAt": "2020-10-12T21:03:30Z", "path": "core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eclipse RDF4J contributors.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Distribution License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *******************************************************************************/\n+\n+package org.eclipse.rdf4j.model.vocabulary;\n+\n+import org.eclipse.rdf4j.model.IRI;\n+import org.eclipse.rdf4j.model.Namespace;\n+import org.eclipse.rdf4j.model.base.AbstractIRI;\n+import org.eclipse.rdf4j.model.base.AbstractNamespace;\n+\n+/**\n+ * Utility methods related to RDF vocabularies.\n+ *\n+ * @author Alessandro Bollini\n+ * @since 3.5.0\n+ *\n+ * @implNote To be eventually removed or merged with {@code org.eclipse.rdf4j.model.util.Vocabularies}.\n+ */\n+class Vocabularies {\n+\n+\tstatic Namespace createNamespace(String prefix, String namespace) {\n+\t\treturn new AbstractNamespace() {\n+\n+\t\t\t@Override\n+\t\t\tpublic String getPrefix() {\n+\t\t\t\treturn prefix;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String getName() {\n+\t\t\t\treturn namespace;\n+\t\t\t}\n+\n+\t\t};\n+\t}\n+\n+\tstatic IRI createIRI(final String namespace, final String localName) {\n+\t\treturn new AbstractIRI() {", "originalCommit": "8feba36cf8f374fbba38cb86491d0c94a625fe04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNzQ0NA==", "url": "https://github.com/eclipse/rdf4j/pull/2590#discussion_r503737444", "bodyText": "I considered this issue in the design of the current approach and I agree that a closer look is deserved; however, any performance degradation is likely to be traced back to #2546, which factored object equality from SimpleIRI to the shared AbstractIRI base class.\nAs far as I can see, the only relevant difference is in the timing of IRI.toString():\nfailing string object identity, both the original SimpleIRI.equals() and the updated AbstractIRI.equals() methods compare the return value of IRI.toString(), but:\n\nin the case of SimpleIRI the value is precomputed in AbstractValueFactory as\n\npublic IRI createIRI(String namespace, String localName) {\n\treturn createIRI(namespace + localName);\n}\n\nin the case of AbstractIRI the value is computed on demand on the basis of the public API as\n\npublic String stringValue() {\n\treturn getNamespace() + getLocalName();\n}\nBack to you with some hard figures\u2026", "author": "knoan", "createdAt": "2020-10-13T07:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzMTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f298901c0b5d69fbf948037e0cdeb9bb13f12523", "chunk": "diff --git a/core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java b/core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java\nindex ef6ec7e241..a49fee45eb 100644\n--- a/core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java\n+++ b/core/model-vocabulary/src/main/java/org/eclipse/rdf4j/model/vocabulary/Vocabularies.java\n\n@@ -26,6 +26,8 @@ class Vocabularies {\n \tstatic Namespace createNamespace(String prefix, String namespace) {\n \t\treturn new AbstractNamespace() {\n \n+\t\t\tprivate static final long serialVersionUID = 3913851292983866831L;\n+\n \t\t\t@Override\n \t\t\tpublic String getPrefix() {\n \t\t\t\treturn prefix;\n"}}, {"oid": "a604ca39e5fc13cc273bfa7f7656160f4b207781", "url": "https://github.com/eclipse/rdf4j/commit/a604ca39e5fc13cc273bfa7f7656160f4b207781", "message": "GH-2589 Decouple vocabularies from SimpleNamespace/IRI\n\nSigned-off-by: Alessandro Bollini <22@metreeca.com>", "committedDate": "2020-10-15T06:25:56Z", "type": "commit"}, {"oid": "3ca30fdbe575017a53078b59ffbf9a19ff537c43", "url": "https://github.com/eclipse/rdf4j/commit/3ca30fdbe575017a53078b59ffbf9a19ff537c43", "message": "GH-2589 Create rdf4j-model-vocabulary module\n\nSigned-off-by: Alessandro Bollini <22@metreeca.com>", "committedDate": "2020-10-15T06:25:57Z", "type": "commit"}, {"oid": "f298901c0b5d69fbf948037e0cdeb9bb13f12523", "url": "https://github.com/eclipse/rdf4j/commit/f298901c0b5d69fbf948037e0cdeb9bb13f12523", "message": "GH-2589 Migrate o.e.r.model.vocabulary package to rdf4j-model-vocabulary module\n\nSigned-off-by: Alessandro Bollini <22@metreeca.com>", "committedDate": "2020-10-15T06:26:00Z", "type": "commit"}, {"oid": "16ccb5f4b2c1fb328c4d33791e5823f4aebf32d3", "url": "https://github.com/eclipse/rdf4j/commit/16ccb5f4b2c1fb328c4d33791e5823f4aebf32d3", "message": "GH-2589 adapted japicmp config per module to deal with dependency splits\n\nSigned-off-by: Alessandro Bollini <22@metreeca.com>", "committedDate": "2020-10-15T06:26:50Z", "type": "commit"}, {"oid": "16ccb5f4b2c1fb328c4d33791e5823f4aebf32d3", "url": "https://github.com/eclipse/rdf4j/commit/16ccb5f4b2c1fb328c4d33791e5823f4aebf32d3", "message": "GH-2589 adapted japicmp config per module to deal with dependency splits\n\nSigned-off-by: Alessandro Bollini <22@metreeca.com>", "committedDate": "2020-10-15T06:26:50Z", "type": "forcePushed"}]}