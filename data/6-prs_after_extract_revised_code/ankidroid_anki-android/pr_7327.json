{"pr_number": 7327, "pr_title": "Update fonts, fix some lints", "pr_createdAt": "2020-10-01T14:52:20Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/7327", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzg1Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/7327#discussion_r498317857", "bodyText": "I think this may collide with #7186", "author": "mikehardy", "createdAt": "2020-10-01T15:06:53Z", "path": "AnkiDroid/src/main/java/com/ichi2/anim/ActivityTransitionAnimation.java", "diffHunk": "@@ -42,6 +42,6 @@ public static void slide(Activity activity, Direction direction) {\n         UP,\n         DOWN,\n         DIALOG_EXIT,\n-        NONE;", "originalCommit": "4f7242d521ba602f713f91157998817ac5d5f8b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce4c7611f097a61265f7dc038e7009d6ea5657a9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anim/ActivityTransitionAnimation.java b/AnkiDroid/src/main/java/com/ichi2/anim/ActivityTransitionAnimation.java\nindex ad60fb034..96f81af62 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anim/ActivityTransitionAnimation.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anim/ActivityTransitionAnimation.java\n\n@@ -42,6 +42,6 @@ public class ActivityTransitionAnimation {\n         UP,\n         DOWN,\n         DIALOG_EXIT,\n-        NONE\n+        NONE;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxODUyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/7327#discussion_r498318527", "bodyText": "This will collide with #7209 - it was larger so hasn't worked through review yet, @Arthur-Milchior is proposing lint / style fixes just a little faster than we can ingest them", "author": "mikehardy", "createdAt": "2020-10-01T15:07:51Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -1833,105 +1833,125 @@ public void onPostExecute(Payload data) {\n                 Object[] result = (Object[]) data.result;\n                 if (result[0] instanceof String) {\n                     String resultType = (String) result[0];\n-                    if (\"badAuth\".equals(resultType)) {", "originalCommit": "cd97cde4be08471f23f410b712eff353e1682c04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce4c7611f097a61265f7dc038e7009d6ea5657a9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java b/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java\nindex e22bda3db..ebe4bb6d1 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java\n\n@@ -1833,125 +1847,105 @@ public class DeckPicker extends NavigationDrawerActivity implements\n                 Object[] result = (Object[]) data.result;\n                 if (result[0] instanceof String) {\n                     String resultType = (String) result[0];\n-                    switch (resultType) {\n-                        case \"badAuth\":\n-                            // delete old auth information\n-                            SharedPreferences preferences = AnkiDroidApp.getSharedPrefs(getBaseContext());\n-                            Editor editor = preferences.edit();\n-                            editor.putString(\"username\", \"\");\n-                            editor.putString(\"hkey\", \"\");\n-                            editor.apply();\n-                            // then show not logged in dialog\n-                            showSyncErrorDialog(SyncErrorDialog.DIALOG_USER_NOT_LOGGED_IN_SYNC);\n-                            break;\n-                        case \"noChanges\":\n-                            SyncStatus.markSyncCompleted();\n-                            // show no changes message, use false flag so we don't show \"sync error\" as the Dialog title\n-                            showSyncLogMessage(R.string.sync_no_changes_message, \"\");\n-                            break;\n-                        case \"clockOff\":\n-                            long diff = (Long) result[1];\n-                            if (diff >= 86100) {\n-                                // The difference if more than a day minus 5 minutes acceptable by ankiweb error\n-                                dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff,\n-                                        res.getString(R.string.sync_log_clocks_unsynchronized_date));\n-                            } else if (Math.abs((diff % 3600.0) - 1800.0) >= 1500.0) {\n-                                // The difference would be within limit if we adjusted the time by few hours\n-                                // It doesn't work for all timezones, but it covers most and it's a guess anyway\n-                                dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff,\n-                                        res.getString(R.string.sync_log_clocks_unsynchronized_tz));\n-                            } else {\n-                                dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff, \"\");\n-                            }\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"fullSync\":\n-                            if (getCol().isEmpty()) {\n-                                // don't prompt user to resolve sync conflict if local collection empty\n-                                sync(FULL_DOWNLOAD);\n-                                // TODO: Also do reverse check to see if AnkiWeb collection is empty if Anki Desktop\n-                                // implements it\n-                            } else {\n-                                // If can't be resolved then automatically then show conflict resolution dialog\n-                                showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_CONFLICT_RESOLUTION);\n-                            }\n-                            break;\n-                        case \"basicCheckFailed\":\n-                            dialogMessage = res.getString(R.string.sync_basic_check_failed, res.getString(R.string.check_db));\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"dbError\":\n-                            showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_CORRUPT_COLLECTION, syncMessage);\n-                            break;\n-                        case \"overwriteError\":\n-                            dialogMessage = res.getString(R.string.sync_overwrite_error);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"remoteDbError\":\n-                            dialogMessage = res.getString(R.string.sync_remote_db_error);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"sdAccessError\":\n-                            dialogMessage = res.getString(R.string.sync_write_access_error);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"finishError\":\n-                            dialogMessage = res.getString(R.string.sync_log_finish_error);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"connectionError\":\n-                            dialogMessage = res.getString(R.string.sync_connection_error);\n-                            if (result.length >= 1 && result[1] instanceof Exception) {\n-                                dialogMessage += \"\\n\\n\" + ((Exception) result[1]).getLocalizedMessage();\n+                    if (\"badAuth\".equals(resultType)) {\n+                        // delete old auth information\n+                        SharedPreferences preferences = AnkiDroidApp.getSharedPrefs(getBaseContext());\n+                        Editor editor = preferences.edit();\n+                        editor.putString(\"username\", \"\");\n+                        editor.putString(\"hkey\", \"\");\n+                        editor.apply();\n+                        // then show not logged in dialog\n+                        showSyncErrorDialog(SyncErrorDialog.DIALOG_USER_NOT_LOGGED_IN_SYNC);\n+                    } else if (\"noChanges\".equals(resultType)) {\n+                        SyncStatus.markSyncCompleted();\n+                        // show no changes message, use false flag so we don't show \"sync error\" as the Dialog title\n+                        showSyncLogMessage(R.string.sync_no_changes_message, \"\");\n+                    } else if (\"clockOff\".equals(resultType)) {\n+                        long diff = (Long) result[1];\n+                        if (diff >= 86100) {\n+                            // The difference if more than a day minus 5 minutes acceptable by ankiweb error\n+                            dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff,\n+                                    res.getString(R.string.sync_log_clocks_unsynchronized_date));\n+                        } else if (Math.abs((diff % 3600.0) - 1800.0) >= 1500.0) {\n+                            // The difference would be within limit if we adjusted the time by few hours\n+                            // It doesn't work for all timezones, but it covers most and it's a guess anyway\n+                            dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff,\n+                                    res.getString(R.string.sync_log_clocks_unsynchronized_tz));\n+                        } else {\n+                            dialogMessage = res.getString(R.string.sync_log_clocks_unsynchronized, diff, \"\");\n+                        }\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"fullSync\".equals(resultType)) {\n+                        if (getCol().isEmpty()) {\n+                            // don't prompt user to resolve sync conflict if local collection empty\n+                            sync(FULL_DOWNLOAD);\n+                            // TODO: Also do reverse check to see if AnkiWeb collection is empty if Anki Desktop\n+                            // implements it\n+                        } else {\n+                            // If can't be resolved then automatically then show conflict resolution dialog\n+                            showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_CONFLICT_RESOLUTION);\n+                        }\n+                    } else if (\"basicCheckFailed\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_basic_check_failed, res.getString(R.string.check_db));\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"dbError\".equals(resultType)) {\n+                        showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_CORRUPT_COLLECTION, syncMessage);\n+                    } else if (\"overwriteError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_overwrite_error);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"remoteDbError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_remote_db_error);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"sdAccessError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_write_access_error);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"finishError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_log_finish_error);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"connectionError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_connection_error);\n+                        if (result.length >= 1 && result[1] instanceof Exception) {\n+                            dialogMessage += \"\\n\\n\" + ((Exception)result[1]).getLocalizedMessage();\n+                        }\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"IOException\".equals(resultType)) {\n+                        handleDbError();\n+                    } else if (\"genericError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_generic_error);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"OutOfMemoryError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.error_insufficient_memory);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"sanityCheckError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_sanity_failed);\n+                        showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_SANITY_ERROR,\n+                                joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"serverAbort\".equals(resultType)) {\n+                        // syncMsg has already been set above, no need to fetch it here.\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"mediaSyncServerError\".equals(resultType)) {\n+                        dialogMessage = res.getString(R.string.sync_media_error_check);\n+                        showSyncErrorDialog(SyncErrorDialog.DIALOG_MEDIA_SYNC_ERROR,\n+                                joinSyncMessages(dialogMessage, syncMessage));\n+                    } else if (\"customSyncServerUrl\".equals(resultType)) {\n+                        String url = result.length > 1 && result[1] instanceof CustomSyncServerUrlException\n+                                ? ((CustomSyncServerUrlException)result[1]).getUrl() : \"unknown\";\n+                        dialogMessage = res.getString(R.string.sync_error_invalid_sync_server, url);\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n+                    } else {\n+                        if (result.length > 1 && result[1] instanceof Integer) {\n+                            int code = (Integer) result[1];\n+                            dialogMessage = rewriteError(code);\n+                            if (dialogMessage == null) {\n+                                dialogMessage = res.getString(R.string.sync_log_error_specific,\n+                                        Integer.toString(code), result[2]);\n                             }\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"IOException\":\n-                            handleDbError();\n-                            break;\n-                        case \"genericError\":\n+                        } else if (result[0] instanceof String) {\n+                            dialogMessage = res.getString(R.string.sync_log_error_specific, Integer.toString(-1), result[0]);\n+                        } else {\n                             dialogMessage = res.getString(R.string.sync_generic_error);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"OutOfMemoryError\":\n-                            dialogMessage = res.getString(R.string.error_insufficient_memory);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"sanityCheckError\":\n-                            dialogMessage = res.getString(R.string.sync_sanity_failed);\n-                            showSyncErrorDialog(SyncErrorDialog.DIALOG_SYNC_SANITY_ERROR,\n-                                    joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"serverAbort\":\n-                            // syncMsg has already been set above, no need to fetch it here.\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"mediaSyncServerError\":\n-                            dialogMessage = res.getString(R.string.sync_media_error_check);\n-                            showSyncErrorDialog(SyncErrorDialog.DIALOG_MEDIA_SYNC_ERROR,\n-                                    joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        case \"customSyncServerUrl\":\n-                            String url = result.length > 1 && result[1] instanceof CustomSyncServerUrlException\n-                                    ? ((CustomSyncServerUrlException) result[1]).getUrl() : \"unknown\";\n-                            dialogMessage = res.getString(R.string.sync_error_invalid_sync_server, url);\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n-                        default:\n-                            if (result.length > 1 && result[1] instanceof Integer) {\n-                                int code = (Integer) result[1];\n-                                dialogMessage = rewriteError(code);\n-                                if (dialogMessage == null) {\n-                                    dialogMessage = res.getString(R.string.sync_log_error_specific,\n-                                            Integer.toString(code), result[2]);\n-                                }\n-                            } else if (result[0] instanceof String) {\n-                                dialogMessage = res.getString(R.string.sync_log_error_specific, Integer.toString(-1), result[0]);\n-                            } else {\n-                                dialogMessage = res.getString(R.string.sync_generic_error);\n-                            }\n-                            showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n-                            break;\n+                        }\n+                        showSyncErrorMessage(joinSyncMessages(dialogMessage, syncMessage));\n                     }\n                 } else {\n                     dialogMessage = res.getString(R.string.sync_generic_error);\n"}}, {"oid": "ce4c7611f097a61265f7dc038e7009d6ea5657a9", "url": "https://github.com/ankidroid/Anki-Android/commit/ce4c7611f097a61265f7dc038e7009d6ea5657a9", "message": "Update fonts with latest upstream", "committedDate": "2020-10-04T19:53:14Z", "type": "commit"}, {"oid": "30df75012b1c564b70360f411bd015f4f48d05b3", "url": "https://github.com/ankidroid/Anki-Android/commit/30df75012b1c564b70360f411bd015f4f48d05b3", "message": "Lint: Use valueOf instead of new", "committedDate": "2020-10-04T19:53:14Z", "type": "commit"}, {"oid": "a90c519b93c5b348e877b0c2ebb2c85bc01ba34a", "url": "https://github.com/ankidroid/Anki-Android/commit/a90c519b93c5b348e877b0c2ebb2c85bc01ba34a", "message": "Lint: Utilize Java 8 features", "committedDate": "2020-10-04T19:53:34Z", "type": "commit"}, {"oid": "2ad616a689052c800d63642b1df281cb7e975314", "url": "https://github.com/ankidroid/Anki-Android/commit/2ad616a689052c800d63642b1df281cb7e975314", "message": "Lint: if replaceable with switch", "committedDate": "2020-10-04T19:53:34Z", "type": "commit"}, {"oid": "21722bc21b9bb100e9267bffd7c209d4611ee398", "url": "https://github.com/ankidroid/Anki-Android/commit/21722bc21b9bb100e9267bffd7c209d4611ee398", "message": "Lint: Conditional can be pushed inside branch expression", "committedDate": "2020-10-04T19:53:34Z", "type": "commit"}, {"oid": "bdf778868cfbedb8b66f7ddb4e2481f82c30ca8a", "url": "https://github.com/ankidroid/Anki-Android/commit/bdf778868cfbedb8b66f7ddb4e2481f82c30ca8a", "message": "Lint: Mild performance improvements", "committedDate": "2020-10-04T19:53:35Z", "type": "commit"}, {"oid": "2e12fb0b019cd9845956dcc8853504bfa3274fe0", "url": "https://github.com/ankidroid/Anki-Android/commit/2e12fb0b019cd9845956dcc8853504bfa3274fe0", "message": "Lint: Clean up some code style issues", "committedDate": "2020-10-04T19:53:35Z", "type": "commit"}]}