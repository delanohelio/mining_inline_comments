{"pr_number": 6138, "pr_title": "Fix changing the GUI language from the system default", "pr_createdAt": "2020-05-09T20:19:06Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6138", "timeline": [{"oid": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "url": "https://github.com/ankidroid/Anki-Android/commit/39f786826eafe021d6e4725ac64b14ee9f3c82fe", "message": "Refactor code for setting Locale in Application context\n\nResolve timrae warnings", "committedDate": "2020-05-09T20:44:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTY1OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422541658", "bodyText": "Can we check if sInstance is null here to determine whether Application.onCreate has executed?", "author": "david-allison-1", "createdAt": "2020-05-09T20:21:50Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -190,6 +191,14 @@ private void setAcraConfigBuilder(CoreConfigurationBuilder acraCoreConfigBuilder\n         ACRA.init(this, acraCoreConfigBuilder);\n     }\n \n+    @Override\n+    protected void attachBaseContext(Context base) {\n+        //Switch comments below to crash on App start (getSharedPrefs() fails with NullPointerException),\n+        //but theoretically this should set the GUI language for the whole application on startup\n+\n+        //super.attachBaseContext(UpdateContextWithLanguage(base));\n+        super.attachBaseContext(base);", "originalCommit": "2568569142596926d43ec2c37d74e645eb043b5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MzY2Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643663", "bodyText": "Afaik attachBase is always called before onCreate. And it can only be called once.\nI'm not even sure, if this is the best way to do it.\nBy changing line 229 in AnkiStatsTaskHandler.java from\n                Resources res = collection.getContext().getResources();\nto\n                Resources res = AnkiDroidApp.updateContextWithLanguage(collection.getContext()).getResources();\nyou can obviously fix the language of the \"studied_cards_today\" string, but I can'f find out, why the application's context doesn't apply to the collection's context (when is it created, etc)\nSomeone with more experience in the code base might be able fix this faster than me as I still need to understand more of Android's workings. I might stay a while with AnkiDroid and try to use the opportunity to learn Java/Android. But currently even using Anki is taking a considerable amount of my time :)", "author": "Arthus", "createdAt": "2020-05-10T13:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex d222aa1593..fe6015a1dc 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -196,7 +195,7 @@ public class AnkiDroidApp extends Application {\n         //Switch comments below to crash on App start (getSharedPrefs() fails with NullPointerException),\n         //but theoretically this should set the GUI language for the whole application on startup\n \n-        //super.attachBaseContext(UpdateContextWithLanguage(base));\n+        //super.attachBaseContext(updateContextWithLanguage(base));\n         super.attachBaseContext(base);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTY4Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422541687", "bodyText": "Nit: Java uses camelCase for method names", "author": "david-allison-1", "createdAt": "2020-05-09T20:22:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -209,6 +218,8 @@ public void onCreate() {\n         // Get preferences\n         SharedPreferences preferences = getSharedPrefs(this);\n \n+        UpdateContextWithLanguage(getApplicationContext());", "originalCommit": "2568569142596926d43ec2c37d74e645eb043b5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMzg0MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422633841", "bodyText": "Was fixed before you commented. :)", "author": "Arthus", "createdAt": "2020-05-10T11:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex d222aa1593..fe6015a1dc 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -218,7 +217,7 @@ public class AnkiDroidApp extends Application {\n         // Get preferences\n         SharedPreferences preferences = getSharedPrefs(this);\n \n-        UpdateContextWithLanguage(getApplicationContext());\n+        updateContextWithLanguage(getApplicationContext());\n \n         // Setup logging and crash reporting\n         acraCoreConfigBuilder = new CoreConfigurationBuilder(this);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTcxNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422541714", "bodyText": "Might as well remove this", "author": "david-allison-1", "createdAt": "2020-05-09T20:22:29Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -228,7 +239,7 @@ public void onCreate() {\n             UsageAnalytics.setDryRun(true);\n         }\n \n-        setLanguage(preferences.getString(Preferences.LANGUAGE, \"\"));\n+        //setLanguage(preferences.getString(Preferences.LANGUAGE, \"\"));", "originalCommit": "2568569142596926d43ec2c37d74e645eb043b5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MzY5Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643693", "bodyText": "Done", "author": "Arthus", "createdAt": "2020-05-10T13:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "4d930f9f269ce3c2befda67fda899260cef11992", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex d222aa1593..184f4cad2f 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -239,7 +238,6 @@ public class AnkiDroidApp extends Application {\n             UsageAnalytics.setDryRun(true);\n         }\n \n-        //setLanguage(preferences.getString(Preferences.LANGUAGE, \"\"));\n         NotificationChannels.setup(getApplicationContext());\n \n         // Configure WebView to allow file scheme pages to access cookies.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTgzNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422541836", "bodyText": "Nit: these lines are a little too long, could you extract remoteContext.getResources() and remoteContext.getResources().getConfiguration() via Ctrl+Alt+V (extract variable) as it's used by both branches.", "author": "david-allison-1", "createdAt": "2020-05-09T20:23:39Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +347,60 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context UpdateContextWithLanguage(Context remoteContext){\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));", "originalCommit": "2568569142596926d43ec2c37d74e645eb043b5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MzkwMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643901", "bodyText": "Good idea, done.", "author": "Arthus", "createdAt": "2020-05-10T13:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex d222aa1593..fe6015a1dc 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -353,7 +352,7 @@ public class AnkiDroidApp extends Application {\n      * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context UpdateContextWithLanguage(Context remoteContext){\n+    public static Context updateContextWithLanguage(Context remoteContext){\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n             return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTk2Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422541963", "bodyText": "nit: bracket placement is off", "author": "david-allison-1", "createdAt": "2020-05-09T20:24:43Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +347,60 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context UpdateContextWithLanguage(Context remoteContext){\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n+        } else {\n+            remoteContext.getResources().updateConfiguration(getLanguageConfig(remoteContext.getResources().getConfiguration()),remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    public static Configuration getLanguageConfig(Configuration remoteConfig) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(getSharedPrefs(AnkiDroidApp.getInstance()).getString(Preferences.LANGUAGE, \"\"));\n+\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+                String strLocallist;\n+                strLocallist = newLocale.toString()+\",\";\n+                // +Locale.getDefault().toString()+\",\"+\"\";\n+                //strLocallist = \"de,fr,en\";\n+                if (!strLocallist.contains(Locale.getDefault().toString()))\n+                    strLocallist = strLocallist+Locale.getDefault().toString()+\",\";\n+\n+                LocaleList newLocaleList = LocaleList.forLanguageTags(strLocallist);\n+                //first element of setLocales() is automatically setLocal()\n+                newConfig.setLocales(newLocaleList);\n+            } else {\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n+                    //API level >=17 but <24\n+                    newConfig.setLocale(newLocale);\n+                } else {\n+                    //Legacy, API level < 17\n+                    newConfig.locale = newLocale;\n+                    }", "originalCommit": "2568569142596926d43ec2c37d74e645eb043b5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0Mzc3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643776", "bodyText": "In fact, most of the function was indented wrong. Should be fixed all together", "author": "Arthus", "createdAt": "2020-05-10T13:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0MTk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex d222aa1593..fe6015a1dc 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -353,7 +352,7 @@ public class AnkiDroidApp extends Application {\n      * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context UpdateContextWithLanguage(Context remoteContext){\n+    public static Context updateContextWithLanguage(Context remoteContext){\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n             return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NDg0Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422544847", "bodyText": "Spelling: locale", "author": "david-allison-1", "createdAt": "2020-05-09T20:53:31Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +346,60 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n+        } else {\n+            remoteContext.getResources().updateConfiguration(getLanguageConfig(remoteContext.getResources().getConfiguration()),remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    public static Configuration getLanguageConfig(Configuration remoteConfig) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(getSharedPrefs(AnkiDroidApp.getInstance()).getString(Preferences.LANGUAGE, \"\"));\n+\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+                String strLocallist;", "originalCommit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0Mzc5OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643798", "bodyText": "Fixed", "author": "Arthus", "createdAt": "2020-05-10T13:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NDg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4d930f9f269ce3c2befda67fda899260cef11992", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex fe6015a1dc..184f4cad2f 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -353,10 +352,11 @@ public class AnkiDroidApp extends Application {\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n-            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n+            return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(getLanguageConfig(remoteContext.getResources().getConfiguration()),remoteContext.getResources().getDisplayMetrics());\n+            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NTI0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422545243", "bodyText": "This logic is a little complicated to understand, could you either try to simplify the logic, or add a comment explaining why the trailing comma is required.", "author": "david-allison-1", "createdAt": "2020-05-09T20:57:21Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +346,60 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n+        } else {\n+            remoteContext.getResources().updateConfiguration(getLanguageConfig(remoteContext.getResources().getConfiguration()),remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    public static Configuration getLanguageConfig(Configuration remoteConfig) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(getSharedPrefs(AnkiDroidApp.getInstance()).getString(Preferences.LANGUAGE, \"\"));\n+\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+                String strLocallist;\n+                strLocallist = newLocale.toString()+\",\";\n+                // +Locale.getDefault().toString()+\",\"+\"\";\n+                //strLocallist = \"de,fr,en\";\n+                if (!strLocallist.contains(Locale.getDefault().toString()))", "originalCommit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0NDQxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422644419", "bodyText": "Cleaned it up and commented the remaining code.\nI'm not even sure if this is really needed, but doing some \"push_front\" on the default locale instead of completely overwriting it, seemed the right thing to do.", "author": "Arthus", "createdAt": "2020-05-10T13:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4d930f9f269ce3c2befda67fda899260cef11992", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex fe6015a1dc..184f4cad2f 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -353,10 +352,11 @@ public class AnkiDroidApp extends Application {\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n-            return remoteContext.createConfigurationContext(getLanguageConfig(remoteContext.getResources().getConfiguration()));\n+            return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(getLanguageConfig(remoteContext.getResources().getConfiguration()),remoteContext.getResources().getDisplayMetrics());\n+            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NTM4MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422545380", "bodyText": "Could the commented code here be deleted?", "author": "david-allison-1", "createdAt": "2020-05-09T20:58:38Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java", "diffHunk": "@@ -54,12 +54,21 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         // The hardware buttons should control the music volume\n         setVolumeControlStream(AudioManager.STREAM_MUSIC);\n+\n+        AnkiDroidApp.updateContextWithLanguage(this);\n+        //attachBaseContext(AnkiDroidApp.GetBaseContextWithLanguage(getBaseContext()));", "originalCommit": "39f786826eafe021d6e4725ac64b14ee9f3c82fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MzgzNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r422643837", "bodyText": "Yup, done.", "author": "Arthus", "createdAt": "2020-05-10T13:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0NTM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "4d930f9f269ce3c2befda67fda899260cef11992", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\nindex 188230627a..c755679e84 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n\n@@ -54,21 +54,19 @@ public class AnkiActivity extends AppCompatActivity implements SimpleMessageDial\n     protected void onCreate(Bundle savedInstanceState) {\n         // The hardware buttons should control the music volume\n         setVolumeControlStream(AudioManager.STREAM_MUSIC);\n-\n         AnkiDroidApp.updateContextWithLanguage(this);\n-        //attachBaseContext(AnkiDroidApp.GetBaseContextWithLanguage(getBaseContext()));\n         // Set the theme\n         Themes.setTheme(this);\n         super.onCreate(savedInstanceState);\n         mCustomTabActivityHelper = new CustomTabActivityHelper();\n     }\n \n-/*\n+\n     @Override\n     protected void attachBaseContext(Context base) {\n         super.attachBaseContext(AnkiDroidApp.updateContextWithLanguage(base));\n     }\n-*/\n+\n     @Override\n     protected void onStart() {\n         super.onStart();\n"}}, {"oid": "4d930f9f269ce3c2befda67fda899260cef11992", "url": "https://github.com/ankidroid/Anki-Android/commit/4d930f9f269ce3c2befda67fda899260cef11992", "message": "Refactor code for setting Locale in Application context\n\nResolve timrae warnings\n\nremoving unnecessary comments and some cleanups", "committedDate": "2020-05-10T13:04:15Z", "type": "forcePushed"}, {"oid": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "url": "https://github.com/ankidroid/Anki-Android/commit/51748d7d9403b0df96afc7d4339e3d8dadc48978", "message": "Refactor code for setting Locale in Application context\n\nResolve timrae warnings\n\nremoving unnecessary comments and some cleanups\n\nremove some code repetitions\n\ncleanup imports\n\ntranslate studied_cards_today\n\nCollection's resources shouldn't be used. Collection is created/opened in OnCreate of AnkiDroidApp\nAt that time the correct language from the settings can't be loaded.\n\nimprove language methods\n\ntranslate remaining popups (e.g. \"Log in to AnkiWeb\")\nThose use the application context's resources, that can't be changed permanently on attachBaseContext()\nSo we have to switch the correct language's resources on-the-fly\n\nremove unnecessary code\n\ntranslate preferences main title\n\ntranslate preferences title p2\n\nfix for test branch merge\n\ntranslate language dropdown in a correct way", "committedDate": "2020-05-16T14:16:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NjcwNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426186705", "bodyText": "Could you revert these line changes? This is a complex PR that we'll likely need to look at in detail, and it's best to avoid line noise to focus on what matters.", "author": "david-allison-1", "createdAt": "2020-05-16T20:09:19Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -26,26 +26,23 @@\n import android.content.SharedPreferences;\n import android.content.res.Configuration;\n import android.content.res.Resources;\n+import android.os.Build;\n import android.os.Environment;\n+import android.os.LocaleList;", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -30,19 +30,24 @@ import android.os.Build;\n import android.os.Environment;\n import android.os.LocaleList;\n import android.preference.PreferenceManager;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.localbroadcastmanager.content.LocalBroadcastManager;\n+\n import android.util.Log;\n import android.view.ViewConfiguration;\n import android.webkit.CookieManager;\n \n import com.ichi2.anki.analytics.AnkiDroidCrashReportDialog;\n-import com.ichi2.anki.analytics.UsageAnalytics;\n import com.ichi2.anki.exception.ManuallyReportedException;\n import com.ichi2.anki.exception.StorageAccessException;\n import com.ichi2.anki.services.BootService;\n import com.ichi2.anki.services.NotificationService;\n import com.ichi2.compat.CompatHelper;\n import com.ichi2.utils.LanguageUtil;\n+import com.ichi2.anki.analytics.UsageAnalytics;\n import com.ichi2.utils.Permissions;\n+import com.ichi2.utils.WebViewDebugging;\n \n import org.acra.ACRA;\n import org.acra.ReportField;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzA3MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187070", "bodyText": "We can get this working, and probably should as there are references:\n\n  \n    \n      Anki-Android/AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java\n    \n    \n         Line 1066\n      in\n      3858c3f\n    \n    \n    \n    \n\n        \n          \n           Resources res = AnkiDroidApp.getInstance().getBaseContext().getResources(); \n        \n    \n  \n\n\n\nExtract getSharedPrefs(AnkiDroidApp.getInstance()) in getLanguageConfig() to a parameter (Ctrl+Alt+P)\nExtract getSharedPrefs(AnkiDroidApp.getInstance()) in updateContextWithLanguage to a local variable (Ctrl+Alt+V)\nExtract method: updateContextWithLanguage(Context, SharedPreferences) : Ctrl+Alt+M\nCall updateContextWithLanguage(base, getSharedPrefs(base)) here\n\nI think there's slight value in this. as the majority of users will not have updated their preferences.\nIf you decide to do this, do note here about the fact that a language change won't affect this, and that other techniques are used to handle this.", "author": "david-allison-1", "createdAt": "2020-05-16T20:14:00Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -190,6 +190,14 @@ private void setAcraConfigBuilder(CoreConfigurationBuilder acraCoreConfigBuilder\n         ACRA.init(this, acraCoreConfigBuilder);\n     }\n \n+    @Override\n+    protected void attachBaseContext(Context base) {\n+        //Switch comments below to crash on App start (getSharedPrefs() fails with NullPointerException),\n+        //but theoretically this should set the GUI language for the whole application on startup", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -192,11 +194,10 @@ public class AnkiDroidApp extends Application {\n \n     @Override\n     protected void attachBaseContext(Context base) {\n-        //Switch comments below to crash on App start (getSharedPrefs() fails with NullPointerException),\n-        //but theoretically this should set the GUI language for the whole application on startup\n-\n-        //super.attachBaseContext(updateContextWithLanguage(base));\n-        super.attachBaseContext(base);\n+        //update base context with preferred app language before attach\n+        //possible since API 17, only supported way since API 25\n+        //for API < 17 we update the configuration directly\n+        super.attachBaseContext(updateContextWithLanguage(base));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzA5Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187096", "bodyText": "If the above comment is implemented. this line no longer needs to exist", "author": "david-allison-1", "createdAt": "2020-05-16T20:14:29Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -209,6 +217,8 @@ public void onCreate() {\n         // Get preferences\n         SharedPreferences preferences = getSharedPrefs(this);\n \n+        updateContextWithLanguage(getApplicationContext());", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -217,8 +218,6 @@ public class AnkiDroidApp extends Application {\n         // Get preferences\n         SharedPreferences preferences = getSharedPrefs(this);\n \n-        updateContextWithLanguage(getApplicationContext());\n-\n         // Setup logging and crash reporting\n         acraCoreConfigBuilder = new CoreConfigurationBuilder(this);\n         if (BuildConfig.DEBUG) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzMxNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187316", "bodyText": "Probably best to cache here, as it's heavily used and should be fast (profiling was discussed in the comments, but I'd err on the side of speed here.", "author": "david-allison-1", "createdAt": "2020-05-16T20:16:23Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -300,7 +309,7 @@ public static String getCacheStorageDirectory() {\n     }\n \n     public static Resources getAppResources() {\n-        return sInstance.getResources();\n+        return updateContextWithLanguage(sInstance).getResources();", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -309,7 +299,7 @@ public class AnkiDroidApp extends Application {\n     }\n \n     public static Resources getAppResources() {\n-        return updateContextWithLanguage(sInstance).getResources();\n+        return sInstance.getResources();\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzU4Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187587", "bodyText": "Can we wrap this in a try..catch, send an exception report on failure:             AnkiDroidApp.sendExceptionReport(e, [context string]);, and return remoteContext\nExample issue: a user previously had zh_TW in their config, I don't /think/ this would crash, but we should assume that user data is unexpectedly bad.", "author": "david-allison-1", "createdAt": "2020-05-16T20:19:59Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +345,59 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -346,17 +336,30 @@ public class AnkiDroidApp extends Application {\n     }\n \n     /**\n-     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n      *\n-     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n             return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4NzcxNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187714", "bodyText": "Line is too long, and duplicated at the bottom of the PR, could you combine these, extract to LanguageUtil and maybe extract some variables (Ctrl+Alt+V).", "author": "david-allison-1", "createdAt": "2020-05-16T20:21:25Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +345,59 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    private static Configuration getLanguageConfig(Configuration remoteConfig) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(getSharedPrefs(AnkiDroidApp.getInstance()).getString(Preferences.LANGUAGE, \"\"));", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -346,17 +336,30 @@ public class AnkiDroidApp extends Application {\n     }\n \n     /**\n-     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n      *\n-     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n             return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4Nzc1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426187755", "bodyText": "nit; Could you add braces to be consistent with the codebase", "author": "david-allison-1", "createdAt": "2020-05-16T20:21:53Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +345,59 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    private static Configuration getLanguageConfig(Configuration remoteConfig) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(getSharedPrefs(AnkiDroidApp.getInstance()).getString(Preferences.LANGUAGE, \"\"));\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+            //Build list of locale strings, separated by commas: newLocale as first element\n+            String strLocaleList = newLocale.toLanguageTag();\n+            //if Anki locale from settings is no equal to system default, add system default as second item\n+            //LocaleList must not contain language tags twice, will crash otherwise!\n+            if (!strLocaleList.contains(Locale.getDefault().toLanguageTag()))", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -346,17 +336,30 @@ public class AnkiDroidApp extends Application {\n     }\n \n     /**\n-     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n      *\n-     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n             return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODA5NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188094", "bodyText": "nit: Likewise, could these changes be reverted", "author": "david-allison-1", "createdAt": "2020-05-16T20:26:10Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Statistics.java", "diffHunk": "@@ -45,15 +39,18 @@\n import com.ichi2.libanki.Decks;\n import com.ichi2.libanki.Stats;\n import com.ichi2.ui.SlidingTabLayout;\n-\n import com.ichi2.utils.JSONException;\n import com.ichi2.utils.JSONObject;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n import java.util.Locale;\n \n+import androidx.appcompat.app.ActionBar;", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Statistics.java b/AnkiDroid/src/main/java/com/ichi2/anki/Statistics.java\nindex fe04ca675e..2a43a7d2ca 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/Statistics.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Statistics.java\n\n@@ -39,18 +45,15 @@ import com.ichi2.libanki.Collection;\n import com.ichi2.libanki.Decks;\n import com.ichi2.libanki.Stats;\n import com.ichi2.ui.SlidingTabLayout;\n+\n import com.ichi2.utils.JSONException;\n import com.ichi2.utils.JSONObject;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Locale;\n \n-import androidx.appcompat.app.ActionBar;\n-import androidx.appcompat.app.AppCompatActivity;\n-import androidx.fragment.app.Fragment;\n-import androidx.fragment.app.FragmentManager;\n-import androidx.fragment.app.FragmentPagerAdapter;\n-import androidx.viewpager.widget.ViewPager;\n import timber.log.Timber;\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODI0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188243", "bodyText": "Are both of these lines required? I'd have expected we'd only need the attachBaseContext", "author": "david-allison-1", "createdAt": "2020-05-16T20:27:52Z", "path": "AnkiDroid/src/main/java/com/ichi2/ui/AppCompatPreferenceActivity.java", "diffHunk": "@@ -44,6 +47,12 @@ protected void onCreate(Bundle savedInstanceState) {\n         getDelegate().installViewFactory();\n         getDelegate().onCreate(savedInstanceState);\n         super.onCreate(savedInstanceState);\n+        AnkiDroidApp.updateContextWithLanguage(this);", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/ui/AppCompatPreferenceActivity.java b/AnkiDroid/src/main/java/com/ichi2/ui/AppCompatPreferenceActivity.java\nindex c2a8d4302a..ef240e9a02 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/ui/AppCompatPreferenceActivity.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/ui/AppCompatPreferenceActivity.java\n\n@@ -47,7 +47,6 @@ public abstract class AppCompatPreferenceActivity extends PreferenceActivity {\n         getDelegate().installViewFactory();\n         getDelegate().onCreate(savedInstanceState);\n         super.onCreate(savedInstanceState);\n-        AnkiDroidApp.updateContextWithLanguage(this);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODM0MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188341", "bodyText": "(optional) - It would be useful to add a couple of unit tests here (if possible - cultures can be a pain) as the functionality has changed.\nMostly to document the new intent of the code", "author": "david-allison-1", "createdAt": "2020-05-16T20:29:22Z", "path": "AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java", "diffHunk": "@@ -58,9 +58,10 @@ public static Locale getLocale(String localeCode) {\n             // If no code provided use the app language.\n         }\n         if (TextUtils.isEmpty(localeCode)) {\n-            locale = Locale.getDefault();\n             // Fall back to (system) default only if that fails.\n-        } else if (localeCode.length() > 2) {\n+            localeCode = Locale.getDefault().toString();", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java b/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\nindex 12dbfb379d..d2dce9c533 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\n\n@@ -43,18 +44,27 @@ public class LanguageUtil {\n         return getLocale(\"\");\n     }\n \n+    /**\n+     * Returns the {@link Locale} for the given code or the default locale, if no preferences are given.\n+     *\n+     * @return The {@link Locale} for the given code\n+     */\n+    public static Locale getLocale(String localeCode) {\n+        SharedPreferences prefs = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext());\n+        return getLocale(localeCode,prefs);\n+    }\n+\n     /**\n      * Returns the {@link Locale} for the given code or the default locale, if no code is given.\n      *\n      * @param localeCode The locale code of the language\n      * @return The {@link Locale} for the given code\n      */\n-    public static Locale getLocale(String localeCode) {\n+    public static Locale getLocale(String localeCode, SharedPreferences prefs) {\n         Locale locale;\n         if (localeCode == null || TextUtils.isEmpty(localeCode)) {\n \n-            localeCode = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).getString(\n-                    Preferences.LANGUAGE, \"\");\n+            localeCode = prefs.getString(Preferences.LANGUAGE, \"\");\n             // If no code provided use the app language.\n         }\n         if (TextUtils.isEmpty(localeCode)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODUxOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188518", "bodyText": "nitpick: add a space after the comma: langConfig, remoteContext.", "author": "david-allison-1", "createdAt": "2020-05-16T20:31:04Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +345,59 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -346,17 +336,30 @@ public class AnkiDroidApp extends Application {\n     }\n \n     /**\n-     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n      *\n-     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n             return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODU4Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188582", "bodyText": "Likewise, could you revert the import changes", "author": "david-allison-1", "createdAt": "2020-05-16T20:31:58Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java", "diffHunk": "@@ -34,14 +25,21 @@\n import com.ichi2.anki.dialogs.DialogHandler;\n import com.ichi2.anki.dialogs.SimpleMessageDialog;\n import com.ichi2.async.CollectionLoader;\n-import com.ichi2.compat.CompatHelper;\n import com.ichi2.compat.customtabs.CustomTabActivityHelper;\n import com.ichi2.compat.customtabs.CustomTabsFallback;\n import com.ichi2.compat.customtabs.CustomTabsHelper;\n import com.ichi2.libanki.Collection;\n import com.ichi2.themes.Themes;\n import com.ichi2.utils.AdaptionUtil;\n \n+import androidx.appcompat.app.AppCompatActivity;\n+import androidx.browser.customtabs.CustomTabsIntent;\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.content.ContextCompat;\n+import androidx.fragment.app.DialogFragment;", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\nindex 30a569c307..3bce5ab168 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n\n@@ -25,6 +34,7 @@ import com.ichi2.anki.dialogs.AsyncDialogFragment;\n import com.ichi2.anki.dialogs.DialogHandler;\n import com.ichi2.anki.dialogs.SimpleMessageDialog;\n import com.ichi2.async.CollectionLoader;\n+import com.ichi2.compat.CompatHelper;\n import com.ichi2.compat.customtabs.CustomTabActivityHelper;\n import com.ichi2.compat.customtabs.CustomTabsFallback;\n import com.ichi2.compat.customtabs.CustomTabsHelper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODY2NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188665", "bodyText": "Could you explain in attachBaseContext or updateContextWithLanguage if this duplication is necessary, it seems superfluous", "author": "david-allison-1", "createdAt": "2020-05-16T20:32:49Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java", "diffHunk": "@@ -59,12 +57,19 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         // The hardware buttons should control the music volume\n         setVolumeControlStream(AudioManager.STREAM_MUSIC);\n+        AnkiDroidApp.updateContextWithLanguage(this);", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\nindex 30a569c307..3bce5ab168 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java\n\n@@ -57,14 +59,12 @@ public class AnkiActivity extends AppCompatActivity implements SimpleMessageDial\n     protected void onCreate(Bundle savedInstanceState) {\n         // The hardware buttons should control the music volume\n         setVolumeControlStream(AudioManager.STREAM_MUSIC);\n-        AnkiDroidApp.updateContextWithLanguage(this);\n         // Set the theme\n         Themes.setTheme(this);\n         super.onCreate(savedInstanceState);\n         mCustomTabActivityHelper = new CustomTabActivityHelper();\n     }\n \n-\n     @Override\n     protected void attachBaseContext(Context base) {\n         super.attachBaseContext(AnkiDroidApp.updateContextWithLanguage(base));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4ODc3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r426188776", "bodyText": "It would be useful to over-document this method, (reasons for usage, why we sometimes don't use the return value) as it's something that'll confuse people unfamiliar with this matter.", "author": "david-allison-1", "createdAt": "2020-05-16T20:34:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +345,59 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());", "originalCommit": "51748d7d9403b0df96afc7d4339e3d8dadc48978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 09b44586e2..4e4c1bc571 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -346,17 +336,30 @@ public class AnkiDroidApp extends Application {\n     }\n \n     /**\n-     *  Returns a Context with the correct, saved language, to be attached using attachBase(). For old APIs directly sets language using deprecated functions\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n      *\n-     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase(). Can be modified here to set correct GUI language.\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n     public static Context updateContextWithLanguage(Context remoteContext){\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration());\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n             return remoteContext.createConfigurationContext(langConfig);\n         } else {\n-            remoteContext.getResources().updateConfiguration(langConfig,remoteContext.getResources().getDisplayMetrics());\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n             return remoteContext;\n         }\n     }\n"}}, {"oid": "37c0ec9b9fa6308ed923e19a54f9e2170c222721", "url": "https://github.com/ankidroid/Anki-Android/commit/37c0ec9b9fa6308ed923e19a54f9e2170c222721", "message": "Refactor code for setting Locale in Application context\n\nResolve timrae warnings\n\nremoving unnecessary comments and some cleanups\n\nremove some code repetitions\n\ncleanup imports\n\ntranslate studied_cards_today\n\nCollection's resources shouldn't be used. Collection is created/opened in OnCreate of AnkiDroidApp\nAt that time the correct language from the settings can't be loaded.\n\nimprove language methods\n\ntranslate remaining popups (e.g. \"Log in to AnkiWeb\")\nThose use the application context's resources, that can't be changed permanently on attachBaseContext()\nSo we have to switch the correct language's resources on-the-fly\n\nremove unnecessary code\n\ntranslate preferences main title\n\ntranslate preferences title p2\n\nfix for test branch merge\n\ntranslate language dropdown in a correct way", "committedDate": "2020-05-19T00:09:36Z", "type": "forcePushed"}, {"oid": "c2e119b124ddd9c9df25233fed4f454623f423a2", "url": "https://github.com/ankidroid/Anki-Android/commit/c2e119b124ddd9c9df25233fed4f454623f423a2", "message": "fix unnecessarily added/removed lines", "committedDate": "2020-05-19T01:21:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjU3Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427162573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getInstance()  != null) {\n          \n          \n            \n                    if (getInstance() != null) {", "author": "david-allison-1", "createdAt": "2020-05-19T09:30:37Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjcyOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427162728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n          \n          \n            \n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {", "author": "david-allison-1", "createdAt": "2020-05-19T09:30:53Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2Mjk5Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427162997", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Locale newLocale = LanguageUtil.getLocale(prefs.getString(Preferences.LANGUAGE, \"\"),prefs);\n          \n          \n            \n                    Locale newLocale = LanguageUtil.getLocale(prefs.getString(Preferences.LANGUAGE, \"\"), prefs);", "author": "david-allison-1", "createdAt": "2020-05-19T09:31:18Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n+     * @param prefs\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    private static Configuration getLanguageConfig(Configuration remoteConfig, SharedPreferences prefs) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(prefs.getString(Preferences.LANGUAGE, \"\"),prefs);", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzE3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427163172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            strLocaleList = strLocaleList+\",\"+Locale.getDefault().toLanguageTag();\n          \n          \n            \n                            strLocaleList = strLocaleList + \",\" + Locale.getDefault().toLanguageTag();", "author": "david-allison-1", "createdAt": "2020-05-19T09:31:35Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n+     * @param prefs\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    private static Configuration getLanguageConfig(Configuration remoteConfig, SharedPreferences prefs) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(prefs.getString(Preferences.LANGUAGE, \"\"),prefs);\n+        //API level >= 25\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+            //Build list of locale strings, separated by commas: newLocale as first element\n+            String strLocaleList = newLocale.toLanguageTag();\n+            //if Anki locale from settings is no equal to system default, add system default as second item\n+            //LocaleList must not contain language tags twice, will crash otherwise!\n+            if (!strLocaleList.contains(Locale.getDefault().toLanguageTag())) {\n+                strLocaleList = strLocaleList+\",\"+Locale.getDefault().toLanguageTag();", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzMwNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427163304", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n          \n          \n            \n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {", "author": "david-allison-1", "createdAt": "2020-05-19T09:31:50Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;\n+        //sInstance (returned by getInstance() ) set during application OnCreate()\n+        //if getInstance() is null, the method is called during applications attachBaseContext()\n+        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+        if (getInstance()  != null) {\n+            preferences = getSharedPrefs(getInstance().getBaseContext());\n+        } else {\n+            preferences = getSharedPrefs(remoteContext);\n+        }\n+        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+        //API level >= 25: supported since API 17\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n+            return remoteContext.createConfigurationContext(langConfig);\n+        } else {\n+            //API level < 25:\n+            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+            return remoteContext;\n+        }\n+    }\n \n     /**\n-     * Sets the user language.\n+     *  Creates and returns a new configuration with the chosen GUI language that is saved in the preferences\n      *\n-     * @param localeCode The locale code of the language to set, system language if empty\n+     * @param remoteConfig The configuration of the remote context to set the language for\n+     * @param prefs\n      */\n     @SuppressWarnings(\"deprecation\") // Tracked as #4729 in github\n-    public static void setLanguage(String localeCode) {\n-        Configuration config = getInstance().getResources().getConfiguration();\n-        Locale newLocale = LanguageUtil.getLocale(localeCode);\n-        config.locale = newLocale;\n-        getInstance().getResources().updateConfiguration(config, getInstance().getResources().getDisplayMetrics());\n+    private static Configuration getLanguageConfig(Configuration remoteConfig, SharedPreferences prefs) {\n+        Configuration newConfig = new Configuration(remoteConfig);\n+        Locale newLocale = LanguageUtil.getLocale(prefs.getString(Preferences.LANGUAGE, \"\"),prefs);\n+        //API level >= 25\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+            //Build list of locale strings, separated by commas: newLocale as first element\n+            String strLocaleList = newLocale.toLanguageTag();\n+            //if Anki locale from settings is no equal to system default, add system default as second item\n+            //LocaleList must not contain language tags twice, will crash otherwise!\n+            if (!strLocaleList.contains(Locale.getDefault().toLanguageTag())) {\n+                strLocaleList = strLocaleList+\",\"+Locale.getDefault().toLanguageTag();\n+            }\n+\n+            LocaleList newLocaleList = LocaleList.forLanguageTags(strLocaleList);\n+            //first element of setLocales() is automatically setLocal()\n+            newConfig.setLocales(newLocaleList);\n+        } else {\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDQxMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427164410", "bodyText": "(unsure) Is using the AnkiDroidApp resources here better?", "author": "david-allison-1", "createdAt": "2020-05-19T09:33:38Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/stats/AnkiStatsTaskHandler.java", "diffHunk": "@@ -226,7 +226,7 @@ protected String doInBackground(Object... params) {\n                         cur.close();\n                     }\n                 }\n-                Resources res = collection.getContext().getResources();\n+                Resources res = mTextView.getResources();", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwOTU0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429109546", "bodyText": "mTextView is assigned when doInBackground is called from a parameter, and used in onPostExecute without any checks. If there were cases, when it wasn't provided correctly, I think this class would crash all the time, so I think it should be save to use it here.\nAs to why this is better than AnkiDroidApp's resources: mTextView's resources are created/updated with the correct language, when the DeckViewer gets refreshed. So this way we save:\n\nThe import of AnkiDroidApp into the file.\nThe need to update AnkiDroidApp's resources with the correct language during runtime.", "author": "Arthus", "createdAt": "2020-05-22T08:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDQxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDYyMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427164621", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return getLocale(localeCode,prefs);\n          \n          \n            \n                    return getLocale(localeCode, prefs);", "author": "david-allison-1", "createdAt": "2020-05-19T09:34:00Z", "path": "AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java", "diffHunk": "@@ -35,32 +36,42 @@\n \n \n     /**\n-     * Returns the {@link Locale} for the given code or the default locale, if no code is given.\n+     * Returns the {@link Locale} for the given code or the default locale, if no code or preferences are given.\n      *\n      * @return The {@link Locale} for the given code\n      */\n     public static Locale getLocale() {\n         return getLocale(\"\");\n     }\n \n+    /**\n+     * Returns the {@link Locale} for the given code or the default locale, if no preferences are given.\n+     *\n+     * @return The {@link Locale} for the given code\n+     */\n+    public static Locale getLocale(String localeCode) {\n+        SharedPreferences prefs = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext());\n+        return getLocale(localeCode,prefs);", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java b/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\nindex d2dce9c533..f3cd95c584 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java\n\n@@ -24,15 +24,22 @@ import java.text.DateFormat;\n import java.util.Date;\n import java.util.Locale;\n \n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n /**\n  * Utility call for proving language related functionality.\n  */\n public class LanguageUtil {\n \n-    /** A list of all languages supported by AnkiDroid */\n-    public static final String[] APP_LANGUAGES = { \"ar\", \"bg\", \"ca\", \"cs\", \"de\", \"el\", \"en\", \"eo\", \"es-AR\", \"es-ES\", \"et\", \"fa\",\n-            \"fi\", \"fr\", \"got\", \"gl\", \"hi\", \"hu\", \"id\", \"it\", \"ja\", \"ko\", \"lt\", \"nl\", \"nn-NO\", \"no\", \"pl\", \"pt_PT\", \"pt_BR\", \"ro\", \"ru\",\n-            \"sk\", \"sl\", \"sr\", \"sv\", \"th\", \"tr\", \"tt-RU\", \"uk\", \"vi\", \"zh_CN\", \"zh_TW\" };\n+    /** A list of all languages supported by AnkiDroid\n+     * Please modify LanguageUtilsLanguageRegressionTest if changing */\n+    public static final String[] APP_LANGUAGES = {\"af\", \"am\", \"ar\", \"az\", \"be\", \"bg\", \"bn\", \"ca\", \"ckb\", \"cs\", \"da\",\n+            \"de\", \"el\", \"en\", \"eo\", \"es-AR\", \"es-ES\", \"et\", \"eu\", \"fa\", \"fi\", \"fil\", \"fr\", \"fy-NL\", \"ga-IE\", \"gl\", \"got\",\n+            \"gu-IN\", \"he\", \"hi\", \"hr\", \"hu\", \"hy-AM\", \"id\", \"is\", \"it\", \"ja\", \"jv\", \"ka\", \"kk\", \"km\", \"ko\", \"ku\",\n+            \"ky\", \"lt\", \"lv\", \"mk\", \"mn\", \"mr\", \"ms\", \"my\", \"nl\", \"nn-NO\", \"no\", \"pa-IN\", \"pl\", \"pt-BR\", \"pt-PT\",\n+            \"ro\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr\", \"ss\", \"sv-SE\", \"sw\", \"ta\", \"te\", \"tg\", \"th\", \"ti\", \"tl\", \"tn\", \"tr\",\n+            \"ts\", \"tt-RU\", \"uk\", \"ur-PK\", \"uz\", \"ve\", \"vi\", \"wo\", \"xh\", \"yu\", \"zh-CN\", \"zh-TW\", \"zu\" };\n \n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTU2OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r427165568", "bodyText": "My main concern is error handling here, could this method be wrapped in a try..catch..send error report and return the original context if this fails.", "author": "david-allison-1", "createdAt": "2020-05-19T09:35:27Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -336,23 +335,74 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public static Context updateContextWithLanguage(Context remoteContext){\n+        SharedPreferences preferences;", "originalCommit": "c2e119b124ddd9c9df25233fed4f454623f423a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNTUxMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429105513", "bodyText": "Can do that, but I'm unsure, which exceptions we should catch? All? This is (as far as I looked up) considered bad practice. And as long as we don't know, which exceptions might occur, we can't narrow it down.\nDo you have a specific reason why you want a try-catch block here? Do you want it as a temporary measure, so when things get rolled out and it fails for 1% or the users, the impact gets reduced and the block gets removed later on, when no crashes occur?\nIf you want a exception handler here, I can add it.", "author": "Arthus", "createdAt": "2020-05-22T08:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4MTM3MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429181370", "bodyText": "TL;DR: Yes, but discussion is valuable, this is my opinion, and disagreements are more than welcome\n\nJava has a distinction between Exception and Error. Typically, you shouldn't try to catch an Error (OutOfMemoryError for example).\nYou shouldn't catch and ignore exceptions that you can't resolve, so somewhere higher up the stack will handle them\nYou should handle exceptions individually, as you have the most context as to what's gone wrong and can take specific corrective action\nIn this case, we can't easily anticipate all of the exceptions that will be thrown, and the list of exceptions that may be thrown is large.\nIt's unlikely that any of the exceptions that we catch have a specific corrective action to be taken\nThrowing would crash the app, which is a serious issue if it occurs on startup. Even more serious as the base context may be attached before our error handler is initialised\n\n\nIn our case:\n\nWe're at the point in the stack where we have a reasonable default to return on any exception\nThe catch block is very unlikely to be executed\nIf the catch block is executed, we call AnkiDroidApp.sendExceptionReport(e, \"updateContextWithLanguage\");\n\nThis allows us to diagnose the crash, the user will be notified of the problem, or the app will work as normal for them\nThis will do nothing before ACRA is set up, but we'll get an exception report on the second call\n\n\nIt's a lot of effort to enumerate the possible exceptions which can be thrown\n\nEven if we did, it's unlikely that any of them have a reasonable corrective action to take over the generic: \"Return the context that we were provided with\".\n\n\nIt's reasonable for the contract of the method to state that the input will be returned if there is a failure.\n\n\nCounterpoints:\n\nA catch Exception will catch DeadSystemException, but we're dead in the water anyway if this occurs.", "author": "david-allison-1", "createdAt": "2020-05-22T10:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODYxOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429358618", "bodyText": "Catching Exception is not a bad practice, you are reading information from people that have studied a lot I think, but not programmed in the real world.\nIf you don't catch Exception the app will crash here, which is terrible. It's as simple as that.\nFurther, as David mentioned, no one else can handle any errors coming out of here better than we can, so you catch everything and return a reasonable default.\nProgramming is pragmatic not dogmatic. Catching Exception is fine. Catching Error sometimes is fine. Exponential cost algorithms are sometimes fine. Not failing fast is sometimes fine. It all depends on the cost/benefit in the area you are programming in.", "author": "mikehardy", "createdAt": "2020-05-22T17:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 4e4c1bc571..c5fc782761 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n\n@@ -343,23 +344,30 @@ public class AnkiDroidApp extends Application {\n      *                      Can be modified here to set correct GUI language.\n      */\n     @SuppressWarnings(\"deprecation\")\n-    public static Context updateContextWithLanguage(Context remoteContext){\n-        SharedPreferences preferences;\n-        //sInstance (returned by getInstance() ) set during application OnCreate()\n-        //if getInstance() is null, the method is called during applications attachBaseContext()\n-        // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n-        if (getInstance()  != null) {\n-            preferences = getSharedPrefs(getInstance().getBaseContext());\n-        } else {\n-            preferences = getSharedPrefs(remoteContext);\n-        }\n-        Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n-        //API level >= 25: supported since API 17\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n-            return remoteContext.createConfigurationContext(langConfig);\n-        } else {\n-            //API level < 25:\n-            remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\n     }\n"}}, {"oid": "51bc1f601199f0f5748eb5f059b2217b526817e9", "url": "https://github.com/ankidroid/Anki-Android/commit/51bc1f601199f0f5748eb5f059b2217b526817e9", "message": "Refactor code for setting Locale in Application context", "committedDate": "2020-05-23T21:38:08Z", "type": "commit"}, {"oid": "51bc1f601199f0f5748eb5f059b2217b526817e9", "url": "https://github.com/ankidroid/Anki-Android/commit/51bc1f601199f0f5748eb5f059b2217b526817e9", "message": "Refactor code for setting Locale in Application context", "committedDate": "2020-05-23T21:38:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDM4NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429580385", "bodyText": "Issue found: Avoid reassigning parameters such as 'localeCode'", "author": "timrae", "createdAt": "2020-05-23T21:41:10Z", "path": "AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java", "diffHunk": "@@ -51,25 +52,36 @@ public static Locale getLocale() {\n         return getLocale(\"\");\n     }\n \n+    /**\n+     * Returns the {@link Locale} for the given code or the default locale, if no preferences are given.\n+     *\n+     * @return The {@link Locale} for the given code\n+     */\n+    @NonNull\n+    public static Locale getLocale(@Nullable String localeCode) {\n+        SharedPreferences prefs = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext());\n+        return getLocale(localeCode, prefs);\n+    }\n+\n     /**\n      * Returns the {@link Locale} for the given code or the default locale, if no code is given.\n      *\n      * @param localeCode The locale code of the language\n      * @return The {@link Locale} for the given code\n      */\n     @NonNull\n-    public static Locale getLocale(@Nullable String localeCode) {\n+    public static Locale getLocale(@Nullable String localeCode, @NonNull SharedPreferences prefs) {", "originalCommit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDQzOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429580438", "bodyText": "This is not a new issue.", "author": "Arthus", "createdAt": "2020-05-23T21:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDM4NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDYzMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429580630", "bodyText": "This has currently no effect if the exception is thrown during AnkiDroidApp's attachBaseContext() as ACRA is not initialized/configured until AnkiDroidApp.OnCreate()", "author": "Arthus", "createdAt": "2020-05-23T21:45:36Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java", "diffHunk": "@@ -337,23 +336,82 @@ public static void deleteACRALimiterData(Context context) {\n         context.getFileStreamPath(\"ACRA-limiter.json\").delete();\n     }\n \n+    /**\n+     *  Returns a Context with the correct, saved language, to be attached using attachBase().\n+     *  For old APIs directly sets language using deprecated functions\n+     *\n+     * @param remoteContext The base context offered by attachBase() to be passed to super.attachBase().\n+     *                      Can be modified here to set correct GUI language.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    @NonNull\n+    public static Context updateContextWithLanguage(@NonNull Context remoteContext) {\n+        try {\n+            SharedPreferences preferences;\n+            //sInstance (returned by getInstance() ) set during application OnCreate()\n+            //if getInstance() is null, the method is called during applications attachBaseContext()\n+            // and preferences need mBase directly (is provided by remoteContext during attachBaseContext())\n+            if (getInstance() != null) {\n+                preferences = getSharedPrefs(getInstance().getBaseContext());\n+            } else {\n+                preferences = getSharedPrefs(remoteContext);\n+            }\n+            Configuration langConfig = getLanguageConfig(remoteContext.getResources().getConfiguration(), preferences);\n+            //API level >= 25: supported since API 17\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                return remoteContext.createConfigurationContext(langConfig);\n+            } else {\n+                //API level < 25:\n+                remoteContext.getResources().updateConfiguration(langConfig, remoteContext.getResources().getDisplayMetrics());\n+                return remoteContext;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e, \"failed to update context with new language\");\n+            sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");", "originalCommit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTE5Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429581192", "bodyText": "Mentioned this previously:\n\nThis will do nothing before ACRA is set up, but we'll get an exception report on the second call\n\nI'm happy with this. Implementer's choice if you want to comment it", "author": "david-allison-1", "createdAt": "2020-05-23T21:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTUyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429581529", "bodyText": "Interesting - good point on that one. Well, at least we won't crash :-)", "author": "mikehardy", "createdAt": "2020-05-23T22:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MDYzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTQ5OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429581499", "bodyText": "@david-allison-1 separately there is #6252 - seems like we should just put it in here. I understand we're working on sorting that one, I wonder (since the whole area was broken anyway) if we couldn't at least get this functionality in so language switching works at all and then worry about sorting it after? Having this not be in the locale's language means users may become trapped in an accidental but not-decipherable language though, so I'd vote to put loc in here personally\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            items.put(loc.getDisplayName(currentAppLocale), loc.toString());\n          \n          \n            \n                            items.put(loc.getDisplayName(loc), loc.toString());", "author": "mikehardy", "createdAt": "2020-05-23T22:00:09Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java", "diffHunk": "@@ -842,11 +843,13 @@ private String replaceStringIfNumeric(String str, String value) {\n \n     private void initializeLanguageDialog(PreferenceScreen screen) {\n         ListPreference languageSelection = (ListPreference) screen.findPreference(LANGUAGE);\n+        Locale currentAppLocale = LanguageUtil.getLocale(AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance())\n+                .getString(Preferences.LANGUAGE, \"\"));\n         if (languageSelection != null) {\n             Map<String, String> items = new TreeMap<>();\n             for (String localeCode : LanguageUtil.APP_LANGUAGES) {\n                 Locale loc = LanguageUtil.getLocale(localeCode);\n-                items.put(loc.getDisplayName(), loc.toString());\n+                items.put(loc.getDisplayName(currentAppLocale), loc.toString());", "originalCommit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTkzNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429585934", "bodyText": "I already answered @david-allison-1 in this regard. I've seen that PR and I think I know a simple solution for the outstanding sorting part of the language list. I just wanted to finish this PR first before taking on more tasks.", "author": "Arthus", "createdAt": "2020-05-23T23:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NjYxMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429586612", "bodyText": "Okay great - this is going in then, thanks so much for fixing this, it's a big item for a lot of people", "author": "mikehardy", "createdAt": "2020-05-23T23:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTQ5OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTYzMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429581633", "bodyText": "Oh this is interesting - the 'fil' language code is three letters, and there may be others. Man, locale stuff has really moved along since this area of the code saw some attention.\nTo be clear, this is not a regression here. It should not be addressed here. But I'll note it in an issue I have going separately #6256", "author": "mikehardy", "createdAt": "2020-05-23T22:02:18Z", "path": "AnkiDroid/src/main/java/com/ichi2/utils/LanguageUtil.java", "diffHunk": "@@ -51,25 +52,36 @@ public static Locale getLocale() {\n         return getLocale(\"\");\n     }\n \n+    /**\n+     * Returns the {@link Locale} for the given code or the default locale, if no preferences are given.\n+     *\n+     * @return The {@link Locale} for the given code\n+     */\n+    @NonNull\n+    public static Locale getLocale(@Nullable String localeCode) {\n+        SharedPreferences prefs = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext());\n+        return getLocale(localeCode, prefs);\n+    }\n+\n     /**\n      * Returns the {@link Locale} for the given code or the default locale, if no code is given.\n      *\n      * @param localeCode The locale code of the language\n      * @return The {@link Locale} for the given code\n      */\n     @NonNull\n-    public static Locale getLocale(@Nullable String localeCode) {\n+    public static Locale getLocale(@Nullable String localeCode, @NonNull SharedPreferences prefs) {\n         Locale locale;\n         if (localeCode == null || TextUtils.isEmpty(localeCode)) {\n \n-            localeCode = AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).getString(\n-                    Preferences.LANGUAGE, \"\");\n+            localeCode = prefs.getString(Preferences.LANGUAGE, \"\");\n             // If no code provided use the app language.\n         }\n         if (TextUtils.isEmpty(localeCode)) {\n-            locale = Locale.getDefault();\n             // Fall back to (system) default only if that fails.\n-        } else if (localeCode.length() > 2) {\n+            localeCode = Locale.getDefault().toString();\n+        }\n+        if (localeCode.length() > 2) {", "originalCommit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTc5Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429585792", "bodyText": "Yeah, there are a lot \"interesting\" things in Android's locale handling, e.g. the differences in toString() and toLanguageTag().\nThe change here takes into account that the returned string from Locale.getDefault().toString() can also be more than 2 characters long. toString() returns some Android style language code using underscores _. The constructor of Locale expects ISO 639 style language codes (those actually have 3 characters by default) or \"a Language subtag\" (whatever this means, could support the result of toString, could not. Not properly documented in the SDK).", "author": "Arthus", "createdAt": "2020-05-23T23:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTYzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTMzNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429581337", "bodyText": "Just a note: you might want to take a look over #6252, as this will change the functionality here. No action required.", "author": "david-allison-1", "createdAt": "2020-05-23T21:57:29Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java", "diffHunk": "@@ -842,11 +843,13 @@ private String replaceStringIfNumeric(String str, String value) {\n \n     private void initializeLanguageDialog(PreferenceScreen screen) {\n         ListPreference languageSelection = (ListPreference) screen.findPreference(LANGUAGE);\n+        Locale currentAppLocale = LanguageUtil.getLocale(AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance())\n+                .getString(Preferences.LANGUAGE, \"\"));\n         if (languageSelection != null) {\n             Map<String, String> items = new TreeMap<>();\n             for (String localeCode : LanguageUtil.APP_LANGUAGES) {\n                 Locale loc = LanguageUtil.getLocale(localeCode);\n-                items.put(loc.getDisplayName(), loc.toString());\n+                items.put(loc.getDisplayName(currentAppLocale), loc.toString());", "originalCommit": "51bc1f601199f0f5748eb5f059b2217b526817e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NDcxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429584719", "bodyText": "I've already seen that PR and I think I also have a solution for the sorting of the list. It's not as difficult as the post on stackoverflow makes it look. ;)", "author": "Arthus", "createdAt": "2020-05-23T23:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NDg4Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429584882", "bodyText": "@Arthus - do you want to handle that in a follow-on commit right here (quickly, but no pressure you can say no!) or do you want to collaborate on 6252? It's not a regression here, so if you say \"no, I will collaborate on 6252\" (or anything but\n\"yes I'll do it here\") then I'll say this is good to go for now, and I'll merge it in", "author": "mikehardy", "createdAt": "2020-05-23T23:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NzQ5OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429587498", "bodyText": "I have just pushed a new commit, fixing the language list, but you were too fast. :D Should I create a new PR? Or do you want to merge/discuss it in #6252 first and merge from there?", "author": "Arthus", "createdAt": "2020-05-24T00:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzAwNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6138#discussion_r429593007", "bodyText": "Over on 6252 :-)", "author": "mikehardy", "createdAt": "2020-05-24T02:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTMzNw=="}], "type": "inlineReview", "revised_code": null}]}