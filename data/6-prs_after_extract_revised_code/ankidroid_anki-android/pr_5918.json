{"pr_number": 5918, "pr_title": "Move Flag/Mark icons to TopBar and reorder Flag", "pr_createdAt": "2020-04-03T20:32:20Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/5918", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxNjg2OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r403316869", "bodyText": "Name might do with work. CardIcons?", "author": "david-allison-1", "createdAt": "2020-04-03T20:38:28Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/reviewer/CardMarker.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.anki.reviewer;\n+\n+import android.view.View;\n+import android.widget.ImageView;\n+\n+import com.ichi2.anki.R;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+\n+/** Handles the star and flag marker for the card viewer */\n+public class CardMarker {", "originalCommit": "67a2087765a098e92786ab0211b16275d4966e10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1698375a3be0bb6076143d7c6e9d75169a6f4c48", "url": "https://github.com/ankidroid/Anki-Android/commit/1698375a3be0bb6076143d7c6e9d75169a6f4c48", "message": "Hide Flag/Mark if shown in action bar\n\nWe use reflection as a best effort, and fall back to a heuristic if this\nfails.\n\nThis stops duplication of the flag/mark icon in the UI.", "committedDate": "2020-04-07T10:21:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405519877", "bodyText": "This is on the API grey list for Android 9 and 10 (at least) https://android.googlesource.com/platform/frameworks/base/+/pie-release/config/hiddenapi-light-greylist.txt#8509\nHasn't moved to blacklist but it's a warning for the future. Error handling during access needs to be different: https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\nAnd we should have some sort of a test that serves as a canary for this in CI as I expect it will start throwing on higher APIs at some point\nI am unsure how the support libraries are handling graylisting but I expect it may be the same\nPerhaps since the only difference in the 3 blocks are the class name they could be somehow generalized as well, since the error handling will be semi-special having it coded once only would be a plus", "author": "mikehardy", "createdAt": "2020-04-08T13:21:58Z", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "originalCommit": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMzg4NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405523885", "bodyText": "I'll do some reading. I wasn't at all aware of this.", "author": "david-allison-1", "createdAt": "2020-04-08T13:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyNjIxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405526215", "bodyText": "Yeah - semi-new and only for people reflecting on internals. Might actually do with a comment on the source stack overflow post as it's a nice heads up for people, free internet points available. I only know because I have the nerdy habit of reading the entire \"we have a new API!\" notes google releases for each platform (they're quite illuminating actually?). I checked through the app before #4910 and we seemed pretty clean pending upgrades to the androidx dependencies so I just want to make sure that stays the case", "author": "mikehardy", "createdAt": "2020-04-08T13:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyNzUwNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405527506", "bodyText": "The VM on the device will shut you down no matter how you attempt to touch off-limits APIs if they further restrict and I read correctly.", "author": "mikehardy", "createdAt": "2020-04-08T13:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyODExOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405528119", "bodyText": "oh - if you mean to generalize things, that's a preference suggestion only really - nothing compared to handling API limits - falls into my \"implementors choice\" bucket", "author": "mikehardy", "createdAt": "2020-04-08T13:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyODc2Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405528762", "bodyText": "Error handling is all done via catch (Exception), so we're fine on this aspect", "author": "david-allison-1", "createdAt": "2020-04-08T13:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDIwNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405540207", "bodyText": "Nope, the API restrictions throw Errors...they'd bubble out as of now\nI exposed the latest API (R) in CI with #5953 so a test to tickle this just in case although I think it's still fine on R. In the future S might all the sudden be 'S'urprising though, unknown", "author": "mikehardy", "createdAt": "2020-04-08T13:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4NDczMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405584731", "bodyText": "I'll call that an Unknown Unknown until today \ud83d\ude09. Haven't done Java before (sans university projects). That's a massive gotcha, thanks!", "author": "david-allison-1", "createdAt": "2020-04-08T14:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "753d293f1f95e4349441d6bcf8810598428b1f67", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java b/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java\ndeleted file mode 100644\nindex 3ca3d7bf3..000000000\n--- a/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java\n+++ /dev/null\n\n@@ -1,95 +0,0 @@\n-package com.ichi2.ui;\n-\n-import android.annotation.SuppressLint;\n-import android.view.MenuItem;\n-\n-import java.lang.reflect.Method;\n-\n-import androidx.annotation.Nullable;\n-import timber.log.Timber;\n-\n-/**\n- * Detection of whether an item is in the ActionBar overflow\n- * WARN: When making changes to this code, also test with Proguard\n- * */\n-public class ActionBarOverflow {\n-    //Idea from: https://stackoverflow.com/a/29208483\n-\n-    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n-\n-    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n-\n-    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n-\n-    protected static Method sSupportIsActionButton;\n-\n-    protected static Method sNativeIsActionButton;\n-\n-    protected static Method sAndroidXIsActionButton;\n-\n-    static {\n-        //Note: Multiple of these can succeed.\n-        try {\n-            //We know this won't always work, we'll log if this isn't the case.\n-            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(NATIVE_CLASS);\n-            sNativeIsActionButton = MenuItemImpl.getDeclaredMethod(\"isActionButton\");\n-            sNativeIsActionButton.setAccessible(true);\n-            Timber.d(\"Setup ActionBarOverflow: %s\", NATIVE_CLASS);\n-        } catch (Exception ignoreAndLogEx) {\n-            Timber.d(ignoreAndLogEx, \"Failed to obtain: sNativeIsActionButton\");\n-        }\n-        try {\n-            Class<?> MenuItemImpl = Class.forName(SUPPORT_CLASS);\n-            sSupportIsActionButton = MenuItemImpl.getDeclaredMethod(\"isActionButton\");\n-            sSupportIsActionButton.setAccessible(true);\n-            Timber.d(\"Setup ActionBarOverflow: %s\", SUPPORT_CLASS);\n-        } catch (Exception ignoreAndLogEx) {\n-            Timber.d(ignoreAndLogEx, \"Failed to obtain: sSupportIsActionButton\");\n-        }\n-        try {\n-            Class<?> MenuItemImpl = Class.forName(ANDROIDX_CLASS);\n-            sAndroidXIsActionButton = MenuItemImpl.getDeclaredMethod(\"isActionButton\");\n-            sAndroidXIsActionButton.setAccessible(true);\n-            Timber.d(\"Setup ActionBarOverflow: %s\", ANDROIDX_CLASS);\n-        } catch (Exception ignoreAndLogEx) {\n-            Timber.d(ignoreAndLogEx, \"Failed to obtain: sAndroidXIsActionButton\");\n-        }\n-    }\n-\n-// --------------------------------------------------------------------------------------------\n-\n-    /**\n-     * Check if an item is showing (not in the overflow menu).\n-     *\n-     * @param item\n-     *            the MenuItem.\n-     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown)\n-     */\n-    public static @Nullable Boolean isActionButton(MenuItem item) {\n-        //I don't think falling through is the right action here.\n-        String className = item.getClass().getName();\n-        switch (className) {\n-            case SUPPORT_CLASS:\n-                try {\n-                    return (boolean) sSupportIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            case NATIVE_CLASS:\n-                try {\n-                    return (boolean) sNativeIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            case ANDROIDX_CLASS:\n-                try {\n-                    return (boolean) sAndroidXIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            default:\n-                Timber.w(\"Unhandled ActionBar class: %s\", className);\n-                return null;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r406364027", "bodyText": "Yeah - I don't like this structure really either, feels convoluted and fluffy at the same time\nDefinitely not a fall through, and might somehow throw an Error here as well?\nHow is it we will potentially have all 3 of these classes actually? Isn't it the case we will only have one of these classes? I would be curious to see which one of these is actually hit on API16 and API30 emulators as a quick check on the hypothesis that really only one class is ever in play", "author": "mikehardy", "createdAt": "2020-04-09T17:32:05Z", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n+\n+    protected static Method sSupportIsActionButton;\n+\n+    protected static Method sNativeIsActionButton;\n+\n+    protected static Method sAndroidXIsActionButton;\n+\n+    static {\n+        setupMethods(ActionBarOverflow::getPrivateMethodHandleSystemErrors);\n+    }\n+\n+    @VisibleForTesting\n+    static void setupMethods(PrivateMethodAccessor accessor) {\n+        //Note: Multiple of these can succeed.\n+        sNativeIsActionButton = accessor.getPrivateMethod(NATIVE_CLASS, \"isActionButton\");\n+        sSupportIsActionButton = accessor.getPrivateMethod(SUPPORT_CLASS, \"isActionButton\");\n+        sAndroidXIsActionButton = accessor.getPrivateMethod(ANDROIDX_CLASS, \"isActionButton\");\n+    }\n+\n+\n+    @CheckResult\n+    private static Method getPrivateMethodHandleSystemErrors(String className, String methodName) {\n+        Method action = null;\n+        try {\n+            //We know this won't always work, we'll log if this isn't the case.\n+            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n+            action = MenuItemImpl.getDeclaredMethod(methodName);\n+            action.setAccessible(true);\n+            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n+        } catch (Exception | NoSuchFieldError | NoSuchMethodError ignoreAndLogEx) {\n+            //See: #5806. MenuItemImpl;->isActionButton is on the light greylist\n+            //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\n+            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n+        }\n+\n+        return action;\n+    }\n+\n+    /**\n+     * Check if an item is showing (not in the overflow menu).\n+     *\n+     * @param item\n+     *            the MenuItem.\n+     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown}\n+     */\n+    public static @Nullable Boolean isActionButton(MenuItem item) {\n+        //I don't think falling through is the right action here.", "originalCommit": "be386e0a62d44242589074a5bc5ef4fc4b93c3a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyOTkxNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410729916", "bodyText": "Two of the objects above are valid on my Android. I want to say that the support class is legacy and won't ever be loaded since we've moved to AndroidX.\nI expect the other case would be hit if we don't extend AppCompatActivity.\nBut there's no inheritance between either of the MenuImpl classes that I can see (only a shared interface). Both should be impossible.\nHow would you propose a test for this? I'm tempted to go for:\n\nGenerate a new test-only activity\n\nExtend AnkiActivity\nExtend Activity\n\n\nExpand the menu, pass it in, and see if it returns non-null.\n\nDoes that work for you?\n\nI'll also want to change the code to use reflection to check for subclasses, rather than solely working off the type name. We could introduce a bug if we pass in a subclass of MenuItemImpl right now, which isn't typical, but is possible in the future.", "author": "david-allison-1", "createdAt": "2020-04-18T17:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NDc1MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410754750", "bodyText": "That sounds like a plan!", "author": "mikehardy", "createdAt": "2020-04-18T21:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "753d293f1f95e4349441d6bcf8810598428b1f67", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java b/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java\ndeleted file mode 100644\nindex 5ee38a3b8..000000000\n--- a/AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java\n+++ /dev/null\n\n@@ -1,127 +0,0 @@\n-package com.ichi2.ui;\n-\n-import android.annotation.SuppressLint;\n-import android.view.MenuItem;\n-\n-import java.lang.reflect.Method;\n-\n-import androidx.annotation.CheckResult;\n-import androidx.annotation.Nullable;\n-import androidx.annotation.VisibleForTesting;\n-import timber.log.Timber;\n-\n-/**\n- * Detection of whether an item is in the ActionBar overflow\n- * WARN: When making changes to this code, also test with Proguard\n- * */\n-public class ActionBarOverflow {\n-    //Idea from: https://stackoverflow.com/a/29208483\n-\n-    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n-\n-    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n-\n-    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n-\n-    protected static Method sSupportIsActionButton;\n-\n-    protected static Method sNativeIsActionButton;\n-\n-    protected static Method sAndroidXIsActionButton;\n-\n-    static {\n-        setupMethods(ActionBarOverflow::getPrivateMethodHandleSystemErrors);\n-    }\n-\n-    @VisibleForTesting\n-    static void setupMethods(PrivateMethodAccessor accessor) {\n-        //Note: Multiple of these can succeed.\n-        sNativeIsActionButton = accessor.getPrivateMethod(NATIVE_CLASS, \"isActionButton\");\n-        sSupportIsActionButton = accessor.getPrivateMethod(SUPPORT_CLASS, \"isActionButton\");\n-        sAndroidXIsActionButton = accessor.getPrivateMethod(ANDROIDX_CLASS, \"isActionButton\");\n-    }\n-\n-\n-    @CheckResult\n-    private static Method getPrivateMethodHandleSystemErrors(String className, String methodName) {\n-        Method action = null;\n-        try {\n-            //We know this won't always work, we'll log if this isn't the case.\n-            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n-            action = MenuItemImpl.getDeclaredMethod(methodName);\n-            action.setAccessible(true);\n-            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n-        } catch (Exception | NoSuchFieldError | NoSuchMethodError ignoreAndLogEx) {\n-            //See: #5806. MenuItemImpl;->isActionButton is on the light greylist\n-            //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\n-            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n-        }\n-\n-        return action;\n-    }\n-\n-    /**\n-     * Check if an item is showing (not in the overflow menu).\n-     *\n-     * @param item\n-     *            the MenuItem.\n-     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown}\n-     */\n-    public static @Nullable Boolean isActionButton(MenuItem item) {\n-        //I don't think falling through is the right action here.\n-        String className = item.getClass().getName();\n-        switch (className) {\n-            case SUPPORT_CLASS:\n-                try {\n-                    return (boolean) sSupportIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            case NATIVE_CLASS:\n-                try {\n-                    return (boolean) sNativeIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            case ANDROIDX_CLASS:\n-                try {\n-                    return (boolean) sAndroidXIsActionButton.invoke(item, (Object[]) null);\n-                } catch (Exception e) {\n-                    // fall through\n-                }\n-            default:\n-                Timber.w(\"Unhandled ActionBar class: %s\", className);\n-                return null;\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    @FunctionalInterface\n-    interface PrivateMethodAccessor {\n-        Method getPrivateMethod(String className, String methodName);\n-    }\n-\n-    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n-    static boolean hasUsableMethod() {\n-        return  sSupportIsActionButton != null ||\n-                sNativeIsActionButton != null ||\n-                sAndroidXIsActionButton != null;\n-\n-    }\n-\n-    @CheckResult\n-    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n-    static Method getPrivateMethodOnlyHandleExceptions(String className, String methodName) {\n-        Method action = null;\n-        try {\n-            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n-            action = MenuItemImpl.getDeclaredMethod(methodName);\n-            action.setAccessible(true);\n-            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n-        } catch (Exception ignoreAndLogEx) {\n-            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n-        }\n-\n-        return action;\n-    }\n-}\n"}}, {"oid": "753d293f1f95e4349441d6bcf8810598428b1f67", "url": "https://github.com/ankidroid/Anki-Android/commit/753d293f1f95e4349441d6bcf8810598428b1f67", "message": "Move Flag and Mark to top bar\n\nFixes #5806\n\nFlag and mark were previously defined as SVGs in the HTML, this was not\nideal as it changed the layout of he cards when they were shown. Instead\nwe define these in the top bar.", "committedDate": "2020-04-18T22:11:23Z", "type": "commit"}, {"oid": "d4b707817165a08fa401f728dc7e31a99d2ad55c", "url": "https://github.com/ankidroid/Anki-Android/commit/d4b707817165a08fa401f728dc7e31a99d2ad55c", "message": "Display \"Flag\" instead of \"Mark\" by Default\n\nThis default change only affects new users\n\nMenuItem.SHOW_AS_ACTION_IF_ROOM = 1\nMenuItem.SHOW_AS_ACTION_ALWAYS\u00a0 = 2", "committedDate": "2020-04-18T22:11:31Z", "type": "commit"}, {"oid": "f0dc1516ddce62813d5bfbccc0dd38cec4e7b523", "url": "https://github.com/ankidroid/Anki-Android/commit/f0dc1516ddce62813d5bfbccc0dd38cec4e7b523", "message": "Keep \"Edit Note\" as first item in menu\n\nEdit Note should have priority as the first item in the\n\"additional items\" menu.", "committedDate": "2020-04-18T22:11:32Z", "type": "commit"}, {"oid": "9e5e2efcbf26098b5401e0813ffd8b4dc500a458", "url": "https://github.com/ankidroid/Anki-Android/commit/9e5e2efcbf26098b5401e0813ffd8b4dc500a458", "message": "Move \"Mark\" icon to right of card", "committedDate": "2020-04-18T22:11:32Z", "type": "commit"}, {"oid": "bf1fabbc372d3f2b6e7d9427a1b0998352247571", "url": "https://github.com/ankidroid/Anki-Android/commit/bf1fabbc372d3f2b6e7d9427a1b0998352247571", "message": "NF: Extract class: ActionButtonStatus\n\nIt's going to be a useful abstraction in the logic to check whether an\nitem is \"always/ifRoom\" for the top-bar icons, so might as well make the\nlogic more clear.", "committedDate": "2020-04-19T08:44:20Z", "type": "commit"}, {"oid": "65580ecb0289f29c50a3368aca59261cbb4864bd", "url": "https://github.com/ankidroid/Anki-Android/commit/65580ecb0289f29c50a3368aca59261cbb4864bd", "message": "NF: Move mActionButtonStatus to subclass", "committedDate": "2020-04-19T08:44:24Z", "type": "commit"}, {"oid": "21cd6b7a3daef5d4e427fc829d53050da9447452", "url": "https://github.com/ankidroid/Anki-Android/commit/21cd6b7a3daef5d4e427fc829d53050da9447452", "message": "NF: Clean up ActionBarStatus.setup", "committedDate": "2020-04-19T08:44:24Z", "type": "commit"}, {"oid": "80dcc394d6bed0aaa1b60b07c3aa300900ed7880", "url": "https://github.com/ankidroid/Anki-Android/commit/80dcc394d6bed0aaa1b60b07c3aa300900ed7880", "message": "Made flag the default actionItem", "committedDate": "2020-04-19T08:44:25Z", "type": "commit"}, {"oid": "17612d1ca513c8d384b32bf4bf1cfad300098921", "url": "https://github.com/ankidroid/Anki-Android/commit/17612d1ca513c8d384b32bf4bf1cfad300098921", "message": "NF CardViewer: Extract flag/mark data\n\nThis is to be overridden in Reviewer in a later commit", "committedDate": "2020-04-19T08:44:25Z", "type": "commit"}, {"oid": "eb06a2548abf5c7b97defb14e5a01558539f241a", "url": "https://github.com/ankidroid/Anki-Android/commit/eb06a2548abf5c7b97defb14e5a01558539f241a", "message": "NF: Move mActionButtonStatus to subclass", "committedDate": "2020-04-19T08:44:25Z", "type": "commit"}, {"oid": "d98da4a4de10554945009268203a3e5e97beccb3", "url": "https://github.com/ankidroid/Anki-Android/commit/d98da4a4de10554945009268203a3e5e97beccb3", "message": "Hide Flag/Mark if shown in action bar\n\nWe use reflection as a best effort, and fall back to a heuristic if this\nfails.\n\nThis stops duplication of the flag/mark icon in the UI.", "committedDate": "2020-04-19T08:44:25Z", "type": "commit"}, {"oid": "0442955c92eb83443a703b20d119ae6c3aa5ac2c", "url": "https://github.com/ankidroid/Anki-Android/commit/0442955c92eb83443a703b20d119ae6c3aa5ac2c", "message": "Switch Flag and Mark Positions", "committedDate": "2020-04-19T08:44:26Z", "type": "commit"}, {"oid": "d37b5f6f5b950e23c6b563aef3d3814d133a3d0f", "url": "https://github.com/ankidroid/Anki-Android/commit/d37b5f6f5b950e23c6b563aef3d3814d133a3d0f", "message": "NF: ActionBarOverflow - Add debug logging", "committedDate": "2020-04-19T08:44:26Z", "type": "commit"}, {"oid": "dfb3b234b85774022143e6c1213fd44802e16d9f", "url": "https://github.com/ankidroid/Anki-Android/commit/dfb3b234b85774022143e6c1213fd44802e16d9f", "message": "Handled Error and added regression check\n\nWe use a graylisted method, and errors will eventually be thrown", "committedDate": "2020-04-19T08:44:26Z", "type": "commit"}, {"oid": "9b36d395c60c657e9d2e3ca3adbec0d79b624fd1", "url": "https://github.com/ankidroid/Anki-Android/commit/9b36d395c60c657e9d2e3ca3adbec0d79b624fd1", "message": "NF: ActionBarOverflow Fix PrettyPrinting", "committedDate": "2020-04-19T08:44:26Z", "type": "commit"}, {"oid": "e5e1dfdd72c2367dd89fb17b300b7fbe5b2607e1", "url": "https://github.com/ankidroid/Anki-Android/commit/e5e1dfdd72c2367dd89fb17b300b7fbe5b2607e1", "message": "Remove Mark/Flag from CSS\n\nNow in topbar.", "committedDate": "2020-04-19T08:44:26Z", "type": "commit"}, {"oid": "fd4b57a4fe821c523c983a59164a556370fe4844", "url": "https://github.com/ankidroid/Anki-Android/commit/fd4b57a4fe821c523c983a59164a556370fe4844", "message": "Add additional tests to ActionBarOverflow", "committedDate": "2020-04-19T08:44:27Z", "type": "commit"}, {"oid": "0aaf345bfb5aafb64a35af746b7edcf90d3e0b5e", "url": "https://github.com/ankidroid/Anki-Android/commit/0aaf345bfb5aafb64a35af746b7edcf90d3e0b5e", "message": "ActionBarOverflow: Remove support class\nAdd Error handlers for reflection", "committedDate": "2020-04-19T08:44:27Z", "type": "commit"}, {"oid": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b", "url": "https://github.com/ankidroid/Anki-Android/commit/62bcc85d2e1932987225c0d0f2eb9b0eb776270b", "message": "Convert isActionButton to accept subclasses", "committedDate": "2020-04-19T09:27:30Z", "type": "commit"}, {"oid": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b", "url": "https://github.com/ankidroid/Anki-Android/commit/62bcc85d2e1932987225c0d0f2eb9b0eb776270b", "message": "Convert isActionButton to accept subclasses", "committedDate": "2020-04-19T09:27:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410921358", "bodyText": "So the way to get rid of the codacy issue is to put this in a try/catch, and instead of having comments that take you out of the code, you put those in the fail message inside the catch", "author": "mikehardy", "createdAt": "2020-04-19T14:47:18Z", "path": "AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.ui;\n+\n+import android.content.Context;\n+import android.view.MenuItem;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import androidx.appcompat.view.menu.MenuBuilder;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(androidx.test.ext.junit.runners.AndroidJUnit4.class)\n+public class ActionBarOverflowTest {\n+\n+    @Test\n+    public void hasValidActionBarReflectionMethod() {\n+        assertThat(\"Ensures that there is a valid way to obtain a listener\",\n+                ActionBarOverflow.hasUsableMethod(), is(true));\n+    }\n+\n+    @Test\n+    public void errorsAreBeingThrownCanary() {\n+        //See discussion on #5806\n+        //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces\n+        //Once this throws, errors are being thrown on a currently graylisted method\n+        ActionBarOverflow.setupMethods(ActionBarOverflow::getPrivateMethodOnlyHandleExceptions);", "originalCommit": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMjE3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410922172", "bodyText": "Codacy doesn't support my AnkiAssert class which would allow that as an extension.\nWill do anyway.", "author": "david-allison-1", "createdAt": "2020-04-19T14:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMjc2NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410922765", "bodyText": "And done", "author": "david-allison-1", "createdAt": "2020-04-19T14:55:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "823cb8faf577c554f64f06a1cd72feaabc9d0f22", "chunk": "diff --git a/AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java b/AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java\nindex 7260f1760..9855641cb 100644\n--- a/AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java\n+++ b/AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java\n\n@@ -16,6 +16,7 @@ import androidx.test.platform.app.InstrumentationRegistry;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.fail;\n \n @RunWith(androidx.test.ext.junit.runners.AndroidJUnit4.class)\n public class ActionBarOverflowTest {\n"}}, {"oid": "823cb8faf577c554f64f06a1cd72feaabc9d0f22", "url": "https://github.com/ankidroid/Anki-Android/commit/823cb8faf577c554f64f06a1cd72feaabc9d0f22", "message": "NF: Codacy Fix", "committedDate": "2020-04-19T14:54:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMzEyNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410923125", "bodyText": "Issue found: The utility class name 'ActionBarOverflow' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper)'", "author": "timrae", "createdAt": "2020-04-19T14:57:09Z", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.ichi2.ui;\n+\n+import android.util.Pair;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {", "originalCommit": "823cb8faf577c554f64f06a1cd72feaabc9d0f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}