{"pr_number": 6893, "pr_title": "NF: Add test for card generation", "pr_createdAt": "2020-08-15T02:23:32Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6893", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471034418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void  assert_ord(Note note, Integer[] ords) {\n          \n          \n            \n                private void  assertNoteContainsCardOrdinals(Note note, Integer[] ords) {\n          \n      \n    \n    \n  \n\nChanges the really cryptic python-y name to something that means what it does so I don't have to read the method every time", "author": "mikehardy", "createdAt": "2020-08-15T21:12:26Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -114,4 +119,121 @@ public void test_gendeck() {\n         note.flush();\n         assertEquals(newId, note.cards().get(3).getDid());\n     }\n+\n+    @Test\n+    public void test_gen_or() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        models.renameField(model, flds.getJSONObject(0), \"A\");\n+        models.renameField(model, flds.getJSONObject(1), \"B\");\n+        JSONObject fld2 = models.newField(\"C\");\n+        fld2.put(\"ord\", null);\n+        models.addField(model, fld2);\n+\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{A}}{{B}}{{C}}\");\n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        JSONObject tmpl = models.newTemplate(\"AND_OR\");\n+        tmpl.put(\"qfmt\", \"        {{A}}    {{#B}}        {{#C}}            {{B}}        {{/C}}    {{/B}}\");\n+        models.addTemplate(model, tmpl);\n+\n+        models.save(model);\n+        models.setCurrent(model);\n+\n+        Note note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+        // First card is generated if no other card\n+    }\n+\n+    @Test\n+    public void test_gen_not() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+\n+        models.renameField(model, flds.getJSONObject(0), \"First\");\n+        models.renameField(model, flds.getJSONObject(1), \"Front\");\n+        JSONObject fld2 = models.newField(\"AddIfEmpty\");\n+        fld2.put(\"name\", \"AddIfEmpty\");\n+        models.addField(model, fld2);\n+    \n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{AddIfEmpty}}{{Front}}{{First}}\");\n+        JSONObject tmpl = models.newTemplate(\"NOT\");\n+        tmpl.put(\"qfmt\", \"    {{^AddIfEmpty}}        {{Front}}    {{/AddIfEmpty}}    \");\n+    \n+        models.addTemplate(model, tmpl);\n+    \n+        models.save(model);\n+        models.setCurrent(model);\n+    \n+        Note note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\"); // ensure first note generated\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+    }\n+\n+    private void  assert_ord(Note note, Integer[] ords) {", "originalCommit": "e68a451067f536302f57e0b66fab4e85d1f3da84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNTU3MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471035571", "bodyText": "\"assertNoteOrdinalAre\"\nbecause I want to assert that this is the exact set of cards generated, and not only that those ords are contained", "author": "Arthur-Milchior", "createdAt": "2020-08-15T21:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNjAxNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471036016", "bodyText": "I stuck a bit on the wording also, I think you picked well, it's even more accurate", "author": "mikehardy", "createdAt": "2020-08-15T21:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6b487553af9e00742e9f478af97b16fb7fecb992", "chunk": "diff --git a/AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java b/AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java\nindex 3eaf856d9..5c73af0c7 100644\n--- a/AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java\n+++ b/AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java\n\n@@ -146,34 +146,34 @@ public class CardTest extends RobolectricTest {\n         Note note = col.newNote();\n         note.setItem(\"A\", \"foo\");\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0, 1});\n+        assertNoteOrdinalAre(note, new Integer[]{0, 1});\n \n         note = col.newNote();\n         note.setItem(\"B\", \"foo\");\n         note.setItem(\"C\", \"foo\");\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0, 1});\n+        assertNoteOrdinalAre(note, new Integer[]{0, 1});\n \n         note = col.newNote();\n         note.setItem(\"B\", \"foo\");\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0});\n+        assertNoteOrdinalAre(note, new Integer[]{0});\n \n         note = col.newNote();\n         note.setItem(\"C\", \"foo\");\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0});\n+        assertNoteOrdinalAre(note, new Integer[]{0});\n \n         note = col.newNote();\n         note.setItem(\"A\", \"foo\");\n         note.setItem(\"B\", \"foo\");\n         note.setItem(\"C\", \"foo\");\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0, 1});\n+        assertNoteOrdinalAre(note, new Integer[]{0, 1});\n \n         note = col.newNote();\n         col.addNote(note);\n-        assert_ord(note, new Integer[]{0});\n+        assertNoteOrdinalAre(note, new Integer[]{0});\n         // First card is generated if no other card\n     }\n \n"}}, {"oid": "6b487553af9e00742e9f478af97b16fb7fecb992", "url": "https://github.com/ankidroid/Anki-Android/commit/6b487553af9e00742e9f478af97b16fb7fecb992", "message": "NF: Add test for card generation\n\nThose are ported from https://github.com/ankitects/anki/pull/733", "committedDate": "2020-08-15T21:26:35Z", "type": "commit"}, {"oid": "6b487553af9e00742e9f478af97b16fb7fecb992", "url": "https://github.com/ankidroid/Anki-Android/commit/6b487553af9e00742e9f478af97b16fb7fecb992", "message": "NF: Add test for card generation\n\nThose are ported from https://github.com/ankitects/anki/pull/733", "committedDate": "2020-08-15T21:26:35Z", "type": "forcePushed"}]}