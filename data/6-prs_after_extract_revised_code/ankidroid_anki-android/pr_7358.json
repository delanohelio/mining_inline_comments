{"pr_number": 7358, "pr_title": "Help screen: Redesign Proposal", "pr_createdAt": "2020-10-06T23:45:57Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/7358", "timeline": [{"oid": "99f55940d68cedf3fd4572c89c295b82ec79356c", "url": "https://github.com/ankidroid/Anki-Android/commit/99f55940d68cedf3fd4572c89c295b82ec79356c", "message": "Added picture-based help dialog\n\nDesigned to both encourage contributors to improve the app, and to\neasily display the Anki and AnkiDroid manuals to reduce support load", "committedDate": "2020-10-07T00:07:55Z", "type": "forcePushed"}, {"oid": "824f0fd310a8e36e2aaa9e7c7d3cd7e8d378f2fd", "url": "https://github.com/ankidroid/Anki-Android/commit/824f0fd310a8e36e2aaa9e7c7d3cd7e8d378f2fd", "message": "Added picture-based help dialog\n\nDesigned to both encourage contributors to improve the app, and to\neasily display the Anki and AnkiDroid manuals to reduce support load", "committedDate": "2020-10-07T01:21:12Z", "type": "forcePushed"}, {"oid": "b92816afb1dcb8c4d817e64c2856573d7cbcd81c", "url": "https://github.com/ankidroid/Anki-Android/commit/b92816afb1dcb8c4d817e64c2856573d7cbcd81c", "message": "RecursivePictureMenu: Add Breadcrumb header", "committedDate": "2020-10-09T20:30:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzY1OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504763658", "bodyText": "I blew you up with the switch -> if/else change here sorry", "author": "mikehardy", "createdAt": "2020-10-14T15:18:12Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java", "diffHunk": "@@ -327,11 +327,11 @@ public boolean onNavigationItemSelected(final MenuItem item) {\n                     break;\n                 case R.id.nav_help:", "originalCommit": "4dc803a3aa0fbcf5994064c64f1cab1e739af174", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dd56da3901a3675124d8926a1e57ea7365e1a09", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java\nindex 4d4c8633e..42c72128c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java\n\n@@ -296,45 +296,34 @@ public abstract class NavigationDrawerActivity extends AnkiActivity implements N\n          */\n         pendingRunnable = () -> {\n             // Take action if a different item selected\n-            switch (item.getItemId()) {\n-                case R.id.nav_decks: {\n-                    Timber.i(\"Navigating to decks\");\n-                    Intent deckPicker = new Intent(NavigationDrawerActivity.this, DeckPicker.class);\n-                    deckPicker.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    // opening DeckPicker should clear back history\n-                    startActivityWithAnimation(deckPicker, RIGHT);\n-                    break;\n-                }\n-                case R.id.nav_browser:\n-                    Timber.i(\"Navigating to card browser\");\n-                    openCardBrowser();\n-                    break;\n-                case R.id.nav_stats: {\n-                    Timber.i(\"Navigating to stats\");\n-                    Intent intent = new Intent(NavigationDrawerActivity.this, Statistics.class);\n-                    startActivityForResultWithAnimation(intent, REQUEST_STATISTICS, LEFT);\n-                    break;\n-                }\n-                case R.id.nav_night_mode:\n-                    Timber.i(\"Toggling Night Mode\");\n-                    mNightModeSwitch.performClick();\n-                    break;\n-                case R.id.nav_settings:\n-                    Timber.i(\"Navigating to settings\");\n-                    mOldColPath = CollectionHelper.getCurrentAnkiDroidDirectory(NavigationDrawerActivity.this);\n-                    // Remember the theme we started with so we can restart the Activity if it changes\n-                    mOldTheme = Themes.getCurrentTheme(getApplicationContext());\n-                    startActivityForResultWithAnimation(new Intent(NavigationDrawerActivity.this, Preferences.class), REQUEST_PREFERENCES_UPDATE, FADE);\n-                    break;\n-                case R.id.nav_help:\n-                    Timber.i(\"Navigating to help\");\n-                    showDialogFragment(HelpDialog.createInstance(this));\n-                    break;\n-                case R.id.nav_feedback:\n-                    Timber.i(\"Navigating to feedback\");\n-                    openUrl(Uri.parse(getString(R.string.link_help)));\n-                    break;\n-                default:\n-                    break;\n+            int itemId = item.getItemId();\n+            if (itemId == R.id.nav_decks) {\n+                Timber.i(\"Navigating to decks\");\n+                Intent deckPicker = new Intent(NavigationDrawerActivity.this, DeckPicker.class);\n+                deckPicker.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    // opening DeckPicker should clear back history\n+                startActivityWithAnimation(deckPicker, RIGHT);\n+            } else if (itemId == R.id.nav_browser) {\n+                Timber.i(\"Navigating to card browser\");\n+                openCardBrowser();\n+            } else if (itemId == R.id.nav_stats) {\n+                Timber.i(\"Navigating to stats\");\n+                Intent intent = new Intent(NavigationDrawerActivity.this, Statistics.class);\n+                startActivityForResultWithAnimation(intent, REQUEST_STATISTICS, LEFT);\n+            } else if (itemId == R.id.nav_night_mode) {\n+                Timber.i(\"Toggling Night Mode\");\n+                mNightModeSwitch.performClick();\n+            } else if (itemId == R.id.nav_settings) {\n+                Timber.i(\"Navigating to settings\");\n+                mOldColPath = CollectionHelper.getCurrentAnkiDroidDirectory(NavigationDrawerActivity.this);\n+                // Remember the theme we started with so we can restart the Activity if it changes\n+                mOldTheme = Themes.getCurrentTheme(getApplicationContext());\n+                startActivityForResultWithAnimation(new Intent(NavigationDrawerActivity.this, Preferences.class), REQUEST_PREFERENCES_UPDATE, FADE);\n+            } else if (itemId == R.id.nav_help) {\n+                Timber.i(\"Navigating to help\");\n+                openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+            } else if (itemId == R.id.nav_feedback) {\n+                Timber.i(\"Navigating to feedback\");\n+                openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n             }\n         };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDUxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504764519", "bodyText": "just out of curiosity, what is that 1 argument in the lambda?", "author": "mikehardy", "createdAt": "2020-10-14T15:19:22Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));", "originalCommit": "4dc803a3aa0fbcf5994064c64f1cab1e739af174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MzQ2Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504773466", "bodyText": "L, not, 1.\nBut: Should be a discard (sadly unsupported by Java), or \"view\"", "author": "david-allison-1", "createdAt": "2020-10-14T15:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd56da3901a3675124d8926a1e57ea7365e1a09", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java\ndeleted file mode 100644\nindex b2178e64a..000000000\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java\n+++ /dev/null\n\n@@ -1,216 +0,0 @@\n-/*\n- *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n- *\n- *  This program is free software; you can redistribute it and/or modify it under\n- *  the terms of the GNU General Public License as published by the Free Software\n- *  Foundation; either version 3 of the License, or (at your option) any later\n- *  version.\n- *\n- *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License along with\n- *  this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package com.ichi2.anki.dialogs;\n-\n-import android.app.Dialog;\n-import android.os.Build;\n-import android.os.Bundle;\n-import android.os.Parcel;\n-import android.os.Parcelable;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.TextView;\n-\n-import com.afollestad.materialdialogs.MaterialDialog;\n-import com.ichi2.anki.AnkiActivity;\n-import com.ichi2.anki.R;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import androidx.annotation.CheckResult;\n-import androidx.annotation.DrawableRes;\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.annotation.StringRes;\n-import androidx.fragment.app.DialogFragment;\n-import androidx.recyclerview.widget.RecyclerView;\n-\n-/** A Dialog displaying The various options for \"Help\" in a nested structure */\n-public class RecursivePictureMenu extends DialogFragment {\n-\n-    public RecursivePictureMenu() {\n-        // required for a fragment - must be no args\n-    }\n-\n-    @CheckResult\n-    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n-        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n-        Bundle args = new Bundle();\n-        args.putParcelableArrayList(\"bundle\", itemList);\n-        helpDialog.setArguments(args);\n-        return helpDialog;\n-    }\n-\n-\n-    public static void removeFrom(List<Item> allItems, Item toRemove) {\n-        // Note: currently doesn't remove the top-level elements.\n-        for (Item i : allItems) {\n-            i.remove(toRemove);\n-        }\n-    }\n-\n-\n-    @NonNull\n-    @Override\n-    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n-\n-        @NonNull\n-        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n-\n-        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n-\n-\n-            @NonNull\n-            @Override\n-            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n-                return new RecyclerView.ViewHolder(root) { };\n-            }\n-\n-\n-            @Override\n-            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n-                TextView textView = (TextView) holder.itemView;\n-                Item val = items.get(position);\n-                textView.setText(val.mText);\n-                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));\n-                int mIcon = val.mIcon;\n-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n-                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(mIcon, 0, 0, 0);\n-                } else {\n-                    textView.setCompoundDrawablesWithIntrinsicBounds(mIcon, 0, 0, 0);\n-                }\n-            }\n-\n-\n-            @Override\n-            public int getItemCount() {\n-                return items.size();\n-            }\n-        };\n-\n-        return new MaterialDialog.Builder(requireContext())\n-                .adapter(adapter, null)\n-                .show();\n-    }\n-\n-    public abstract static class Item implements Parcelable {\n-\n-        private final @StringRes int mText;\n-        private final @DrawableRes int mIcon;\n-\n-        public Item(@StringRes int titleString, @DrawableRes int iconDrawable) {\n-            this.mText = titleString;\n-            this.mIcon = iconDrawable;\n-        }\n-\n-        public List<Item> getChildren() {\n-            return new ArrayList<>();\n-        }\n-\n-        protected Item(Parcel in) {\n-            mText = in.readInt();\n-            mIcon = in.readInt();\n-        }\n-\n-        @Override\n-        public int describeContents() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public void writeToParcel(Parcel dest, int flags) {\n-            dest.writeInt(mText);\n-            dest.writeInt(mIcon);\n-        }\n-\n-        public abstract void execute(AnkiActivity activity);\n-\n-        public abstract void remove(Item toRemove);\n-    }\n-\n-    public static class ItemHeader extends Item implements Parcelable {\n-\n-        private final List<Item> mChildren;\n-\n-\n-        public ItemHeader(@StringRes int titleString, int i, Item... children) {\n-            super(titleString, i);\n-            mChildren = new ArrayList<>(Arrays.asList(children));\n-        }\n-\n-\n-        @Override\n-        public List<Item> getChildren() {\n-            return new ArrayList<>(mChildren);\n-        }\n-\n-\n-        @Override\n-        public void execute(AnkiActivity activity) {\n-            DialogFragment nextFragment = RecursivePictureMenu.createInstance(new ArrayList<>(this.getChildren()));\n-            activity.showDialogFragment(nextFragment);\n-        }\n-\n-\n-        @Override\n-        public void remove(Item toRemove) {\n-            mChildren.remove(toRemove);\n-            for (Item i : mChildren) {\n-                i.remove(toRemove);\n-            }\n-        }\n-\n-\n-        protected ItemHeader(Parcel in) {\n-            super(in);\n-            if (in.readByte() == 0x01) {\n-                mChildren = new ArrayList<>();\n-                in.readList(mChildren, Item.class.getClassLoader());\n-            } else {\n-                mChildren = new ArrayList<>();\n-            }\n-        }\n-\n-        @Override\n-        public void writeToParcel(Parcel dest, int flags) {\n-            super.writeToParcel(dest, flags);\n-            if (mChildren == null) {\n-                dest.writeByte((byte) (0x00));\n-            } else {\n-                dest.writeByte((byte) (0x01));\n-                dest.writeList(mChildren);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unused\")\n-        public static final Parcelable.Creator<ItemHeader> CREATOR = new Parcelable.Creator<ItemHeader>() {\n-            @Override\n-            public ItemHeader createFromParcel(Parcel in) {\n-                return new ItemHeader(in);\n-            }\n-\n-            @Override\n-            public ItemHeader[] newArray(int size) {\n-                return new ItemHeader[size];\n-            }\n-        };\n-    }\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NTk3OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504765979", "bodyText": "anytime I see parcellable things and Bundles now I'm afraid of size limits \ud83d\ude05  - I don't think that's really a concern here, this is just a request to look carefully one more time and attest \"this is a fixed amount of data going in, and no way it will be more than 1MB\", correct?", "author": "mikehardy", "createdAt": "2020-10-14T15:21:11Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));\n+                int mIcon = val.mIcon;\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                } else {\n+                    textView.setCompoundDrawablesWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                }\n+            }\n+\n+\n+            @Override\n+            public int getItemCount() {\n+                return items.size();\n+            }\n+        };\n+\n+        return new MaterialDialog.Builder(requireContext())\n+                .adapter(adapter, null)\n+                .show();\n+    }\n+\n+    public abstract static class Item implements Parcelable {\n+\n+        private final @StringRes int mText;\n+        private final @DrawableRes int mIcon;\n+\n+        public Item(@StringRes int titleString, @DrawableRes int iconDrawable) {\n+            this.mText = titleString;\n+            this.mIcon = iconDrawable;\n+        }\n+\n+        public List<Item> getChildren() {\n+            return new ArrayList<>();\n+        }\n+\n+        protected Item(Parcel in) {\n+            mText = in.readInt();\n+            mIcon = in.readInt();\n+        }\n+\n+        @Override\n+        public int describeContents() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {\n+            dest.writeInt(mText);\n+            dest.writeInt(mIcon);\n+        }\n+\n+        public abstract void execute(AnkiActivity activity);\n+\n+        public abstract void remove(Item toRemove);\n+    }\n+\n+    public static class ItemHeader extends Item implements Parcelable {\n+\n+        private final List<Item> mChildren;\n+\n+\n+        public ItemHeader(@StringRes int titleString, int i, Item... children) {\n+            super(titleString, i);\n+            mChildren = new ArrayList<>(Arrays.asList(children));\n+        }\n+\n+\n+        @Override\n+        public List<Item> getChildren() {\n+            return new ArrayList<>(mChildren);\n+        }\n+\n+\n+        @Override\n+        public void execute(AnkiActivity activity) {\n+            DialogFragment nextFragment = RecursivePictureMenu.createInstance(new ArrayList<>(this.getChildren()));\n+            activity.showDialogFragment(nextFragment);\n+        }\n+\n+\n+        @Override\n+        public void remove(Item toRemove) {\n+            mChildren.remove(toRemove);\n+            for (Item i : mChildren) {\n+                i.remove(toRemove);\n+            }\n+        }\n+\n+\n+        protected ItemHeader(Parcel in) {\n+            super(in);\n+            if (in.readByte() == 0x01) {\n+                mChildren = new ArrayList<>();\n+                in.readList(mChildren, Item.class.getClassLoader());\n+            } else {\n+                mChildren = new ArrayList<>();\n+            }\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {", "originalCommit": "4dc803a3aa0fbcf5994064c64f1cab1e739af174", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mzg2Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504773867", "bodyText": "Definitely fine - arrayList of < 100 elements.", "author": "david-allison-1", "createdAt": "2020-10-14T15:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NTk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6dd56da3901a3675124d8926a1e57ea7365e1a09", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java\ndeleted file mode 100644\nindex b2178e64a..000000000\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java\n+++ /dev/null\n\n@@ -1,216 +0,0 @@\n-/*\n- *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n- *\n- *  This program is free software; you can redistribute it and/or modify it under\n- *  the terms of the GNU General Public License as published by the Free Software\n- *  Foundation; either version 3 of the License, or (at your option) any later\n- *  version.\n- *\n- *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n- *\n- *  You should have received a copy of the GNU General Public License along with\n- *  this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package com.ichi2.anki.dialogs;\n-\n-import android.app.Dialog;\n-import android.os.Build;\n-import android.os.Bundle;\n-import android.os.Parcel;\n-import android.os.Parcelable;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.TextView;\n-\n-import com.afollestad.materialdialogs.MaterialDialog;\n-import com.ichi2.anki.AnkiActivity;\n-import com.ichi2.anki.R;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import androidx.annotation.CheckResult;\n-import androidx.annotation.DrawableRes;\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-import androidx.annotation.StringRes;\n-import androidx.fragment.app.DialogFragment;\n-import androidx.recyclerview.widget.RecyclerView;\n-\n-/** A Dialog displaying The various options for \"Help\" in a nested structure */\n-public class RecursivePictureMenu extends DialogFragment {\n-\n-    public RecursivePictureMenu() {\n-        // required for a fragment - must be no args\n-    }\n-\n-    @CheckResult\n-    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n-        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n-        Bundle args = new Bundle();\n-        args.putParcelableArrayList(\"bundle\", itemList);\n-        helpDialog.setArguments(args);\n-        return helpDialog;\n-    }\n-\n-\n-    public static void removeFrom(List<Item> allItems, Item toRemove) {\n-        // Note: currently doesn't remove the top-level elements.\n-        for (Item i : allItems) {\n-            i.remove(toRemove);\n-        }\n-    }\n-\n-\n-    @NonNull\n-    @Override\n-    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n-\n-        @NonNull\n-        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n-\n-        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n-\n-\n-            @NonNull\n-            @Override\n-            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n-                return new RecyclerView.ViewHolder(root) { };\n-            }\n-\n-\n-            @Override\n-            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n-                TextView textView = (TextView) holder.itemView;\n-                Item val = items.get(position);\n-                textView.setText(val.mText);\n-                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));\n-                int mIcon = val.mIcon;\n-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n-                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(mIcon, 0, 0, 0);\n-                } else {\n-                    textView.setCompoundDrawablesWithIntrinsicBounds(mIcon, 0, 0, 0);\n-                }\n-            }\n-\n-\n-            @Override\n-            public int getItemCount() {\n-                return items.size();\n-            }\n-        };\n-\n-        return new MaterialDialog.Builder(requireContext())\n-                .adapter(adapter, null)\n-                .show();\n-    }\n-\n-    public abstract static class Item implements Parcelable {\n-\n-        private final @StringRes int mText;\n-        private final @DrawableRes int mIcon;\n-\n-        public Item(@StringRes int titleString, @DrawableRes int iconDrawable) {\n-            this.mText = titleString;\n-            this.mIcon = iconDrawable;\n-        }\n-\n-        public List<Item> getChildren() {\n-            return new ArrayList<>();\n-        }\n-\n-        protected Item(Parcel in) {\n-            mText = in.readInt();\n-            mIcon = in.readInt();\n-        }\n-\n-        @Override\n-        public int describeContents() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public void writeToParcel(Parcel dest, int flags) {\n-            dest.writeInt(mText);\n-            dest.writeInt(mIcon);\n-        }\n-\n-        public abstract void execute(AnkiActivity activity);\n-\n-        public abstract void remove(Item toRemove);\n-    }\n-\n-    public static class ItemHeader extends Item implements Parcelable {\n-\n-        private final List<Item> mChildren;\n-\n-\n-        public ItemHeader(@StringRes int titleString, int i, Item... children) {\n-            super(titleString, i);\n-            mChildren = new ArrayList<>(Arrays.asList(children));\n-        }\n-\n-\n-        @Override\n-        public List<Item> getChildren() {\n-            return new ArrayList<>(mChildren);\n-        }\n-\n-\n-        @Override\n-        public void execute(AnkiActivity activity) {\n-            DialogFragment nextFragment = RecursivePictureMenu.createInstance(new ArrayList<>(this.getChildren()));\n-            activity.showDialogFragment(nextFragment);\n-        }\n-\n-\n-        @Override\n-        public void remove(Item toRemove) {\n-            mChildren.remove(toRemove);\n-            for (Item i : mChildren) {\n-                i.remove(toRemove);\n-            }\n-        }\n-\n-\n-        protected ItemHeader(Parcel in) {\n-            super(in);\n-            if (in.readByte() == 0x01) {\n-                mChildren = new ArrayList<>();\n-                in.readList(mChildren, Item.class.getClassLoader());\n-            } else {\n-                mChildren = new ArrayList<>();\n-            }\n-        }\n-\n-        @Override\n-        public void writeToParcel(Parcel dest, int flags) {\n-            super.writeToParcel(dest, flags);\n-            if (mChildren == null) {\n-                dest.writeByte((byte) (0x00));\n-            } else {\n-                dest.writeByte((byte) (0x01));\n-                dest.writeList(mChildren);\n-            }\n-        }\n-\n-        @SuppressWarnings(\"unused\")\n-        public static final Parcelable.Creator<ItemHeader> CREATOR = new Parcelable.Creator<ItemHeader>() {\n-            @Override\n-            public ItemHeader createFromParcel(Parcel in) {\n-                return new ItemHeader(in);\n-            }\n-\n-            @Override\n-            public ItemHeader[] newArray(int size) {\n-                return new ItemHeader[size];\n-            }\n-        };\n-    }\n-}\n-\n"}}, {"oid": "6dd56da3901a3675124d8926a1e57ea7365e1a09", "url": "https://github.com/ankidroid/Anki-Android/commit/6dd56da3901a3675124d8926a1e57ea7365e1a09", "message": "Converted Images to vector\n\nUseful for new help screen", "committedDate": "2020-10-26T14:11:30Z", "type": "commit"}, {"oid": "1337d7905695de42868eface285e1a43b1dbdbe4", "url": "https://github.com/ankidroid/Anki-Android/commit/1337d7905695de42868eface285e1a43b1dbdbe4", "message": "RecursivePictureMenu: Add Breadcrumb header", "committedDate": "2020-10-26T17:30:25Z", "type": "forcePushed"}, {"oid": "0c8edbf595e76521551ceffdc6c0108f05535e85", "url": "https://github.com/ankidroid/Anki-Android/commit/0c8edbf595e76521551ceffdc6c0108f05535e85", "message": "Added picture-based help dialog\n\nDesigned to both encourage contributors to improve the app, and to\neasily display the Anki and AnkiDroid manuals to reduce support load\n\nRemove \"Send Feedback\" as it's now included in the menu", "committedDate": "2020-10-26T17:34:29Z", "type": "commit"}, {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7", "url": "https://github.com/ankidroid/Anki-Android/commit/c0414fa4147aa308d62f1ea10a1a03cd22d328f7", "message": "RecursivePictureMenu: Add Breadcrumb header", "committedDate": "2020-10-26T17:34:38Z", "type": "commit"}, {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7", "url": "https://github.com/ankidroid/Anki-Android/commit/c0414fa4147aa308d62f1ea10a1a03cd22d328f7", "message": "RecursivePictureMenu: Add Breadcrumb header", "committedDate": "2020-10-26T17:34:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512167143", "bodyText": "Sorry to seemingly waffle on this, I think we should attempt a 'Donate' to https://opencollective.com/ankidroid - silly to have it and not promote at all. Could use a link to the same actually on the contributions/help documents in FAQ / manual, and as a preliminary look it appears finding an SVG should not be hard https://duckduckgo.com/?q=black+24dp+usd+icon+svg&t=ffab&atb=v201-1&iar=images&iax=images&ia=images", "author": "mikehardy", "createdAt": "2020-10-26T18:07:43Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.Item;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.ItemHeader;\n+import com.ichi2.utils.IntentUtil;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+\n+public class HelpDialog {\n+\n+    private static void openManual(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+    }\n+\n+    private static void openFeedback(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n+    }\n+\n+    public static DialogFragment createInstance(Context context) {\n+\n+        RateAppItem rateAppItem = new RateAppItem(R.string.help_item_support_rate_ankidroid, R.drawable.ic_star_black_24);\n+        Item[] allItems = {\n+                new ItemHeader(R.string.help_title_using_ankidroid, R.drawable.ic_manual_black_24dp,\n+                        new FunctionItem(R.string.help_item_ankidroid_manual, R.drawable.ic_manual_black_24dp, HelpDialog::openManual),\n+                        new LinkItem(R.string.help_item_anki_manual, R.drawable.ic_manual_black_24dp, R.string.link_anki_manual),\n+                        new LinkItem(R.string.help_item_ankidroid_faq, R.drawable.ic_help_black_24dp, R.string.link_ankidroid_faq)\n+                ),\n+                new ItemHeader(R.string.help_title_get_help, R.drawable.ic_help_black_24dp,\n+                        new LinkItem(R.string.help_item_mailing_list, R.drawable.ic_email_black_24dp, R.string.link_forum),\n+                        new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n+                ),\n+                new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n+                        new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n+                        rateAppItem,\n+                        new LinkItem(R.string.help_item_support_other_ankidroid, R.drawable.ic_help_black_24dp, R.string.link_contribution),\n+                        new FunctionItem(R.string.send_feedback, R.drawable.ic_email_black_24dp, HelpDialog::openFeedback)", "originalCommit": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2ODU2MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512168560", "bodyText": "I wasn't sure whether we'd confirmed or not - no problem at all", "author": "david-allison-1", "createdAt": "2020-10-26T18:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MTk0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512171945", "bodyText": "SVG is available in the Android Vector Assets", "author": "david-allison-1", "createdAt": "2020-10-26T18:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5ODQ4NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512198485", "bodyText": "yeah I just prodded them for final confirmation since I haven't heard back yet but this is okay to tee up in the meanwhile and I'll mark pending merge", "author": "mikehardy", "createdAt": "2020-10-26T18:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "efac62307d1c955bd2f3b33eaf9a1634d669a368", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java\nindex 67de86f05..f9a23cd14 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java\n\n@@ -60,6 +60,7 @@ public class HelpDialog {\n                         new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n                 ),\n                 new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_opencollective_donate, R.drawable.ic_donate_black_24dp, R.string.link_opencollective_donate),\n                         new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n                         new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n                         rateAppItem,\n"}}, {"oid": "efac62307d1c955bd2f3b33eaf9a1634d669a368", "url": "https://github.com/ankidroid/Anki-Android/commit/efac62307d1c955bd2f3b33eaf9a1634d669a368", "message": "Help Dialog: Add OpenCollective Donate Link\n\nSeparate commit to allow easy revert", "committedDate": "2020-10-27T03:58:54Z", "type": "commit"}, {"oid": "efac62307d1c955bd2f3b33eaf9a1634d669a368", "url": "https://github.com/ankidroid/Anki-Android/commit/efac62307d1c955bd2f3b33eaf9a1634d669a368", "message": "Help Dialog: Add OpenCollective Donate Link\n\nSeparate commit to allow easy revert", "committedDate": "2020-10-27T03:58:54Z", "type": "forcePushed"}]}