{"pr_number": 6100, "pr_title": "Don't crash Check Database when Database is locked", "pr_createdAt": "2020-05-03T15:05:29Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6100", "timeline": [{"oid": "57e5e9ca25a2a53f96d42c591ff6a5ac13ad6e39", "url": "https://github.com/ankidroid/Anki-Android/commit/57e5e9ca25a2a53f96d42c591ff6a5ac13ad6e39", "message": "Add DEBUG: Lock Database", "committedDate": "2020-05-03T10:36:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNjExMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419126113", "bodyText": "this stuff is touchy, this is not something to fix here / it is not actionable - just as knowledge sharing I have an advanceRobolectricLooper method I use in #5151 and it's basically setting Looper mode to PAUSED in robolectric, then after you do something that twiddles state but before (and after) you twiddle UI you ask robolectric to advance the execution loop, and then I sleep for a moment (since we do async things). Not ideal but that's how to turn the crank as it were in robolectric if you want to play with UI stuff\nnot actionable here because visibility isn't important but maybe useful info going forward", "author": "mikehardy", "createdAt": "2020-05-03T16:23:26Z", "path": "AnkiDroid/src/test/java/com/ichi2/anki/DeckPickerCheckDatabaseListenerTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+import android.content.Intent;\n+\n+import com.ichi2.anki.dialogs.DatabaseErrorDialog;\n+import com.ichi2.async.CollectionTask.TaskData;\n+import com.ichi2.libanki.Collection.CheckDatabaseResult;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.android.controller.ActivityController;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class DeckPickerCheckDatabaseListenerTest extends RobolectricTest {\n+\n+    private DeckPickerTestImpl impl;\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        //.visible() crashes: Layout state should be one of 100 but it is 10", "originalCommit": "e1622d5b07c0a6627066e7488a2947047d6909d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMDE1MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419130150", "bodyText": "I thought I'd replied here, visible works for CardBroser/Viewer. Would you like me to remove the line?\nP.S: Thanks for the info, for now I try to avoid UI testing as it doesn't add much value if the business logic is well structured, and ties us in to an implementation, sometimes before we've really considered whether it was the right move (especially true given the complexity of DeckPicker).", "author": "david-allison-1", "createdAt": "2020-05-03T16:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNjExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzNDc1NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419134754", "bodyText": "Nope - no change needed here - was just knowledge sharing. Agreed testing UI is usually not profitable for our aims and better to focus on making things testable at lower levels", "author": "mikehardy", "createdAt": "2020-05-03T17:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNjExMw=="}], "type": "inlineReview", "revised_code": {"commit": "1e7fb11a75d84dba1ed3e924c7f88711940162f5", "chunk": "diff --git a/AnkiDroid/src/test/java/com/ichi2/anki/DeckPickerCheckDatabaseListenerTest.java b/AnkiDroid/src/test/java/com/ichi2/anki/DeckPickerCheckDatabaseListenerTest.java\ndeleted file mode 100644\nindex 1c6d5a844..000000000\n--- a/AnkiDroid/src/test/java/com/ichi2/anki/DeckPickerCheckDatabaseListenerTest.java\n+++ /dev/null\n\n@@ -1,177 +0,0 @@\n-/*\n- Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n-\n- This program is free software; you can redistribute it and/or modify it under\n- the terms of the GNU General Public License as published by the Free Software\n- Foundation; either version 3 of the License, or (at your option) any later\n- version.\n-\n- This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- PARTICULAR PURPOSE. See the GNU General Public License for more details.\n-\n- You should have received a copy of the GNU General Public License along with\n- this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package com.ichi2.anki;\n-\n-import android.content.Intent;\n-\n-import com.ichi2.anki.dialogs.DatabaseErrorDialog;\n-import com.ichi2.async.CollectionTask.TaskData;\n-import com.ichi2.libanki.Collection.CheckDatabaseResult;\n-\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.Robolectric;\n-import org.robolectric.android.controller.ActivityController;\n-\n-import androidx.annotation.NonNull;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-\n-@RunWith(AndroidJUnit4.class)\n-public class DeckPickerCheckDatabaseListenerTest extends RobolectricTest {\n-\n-    private DeckPickerTestImpl impl;\n-\n-    @Override\n-    public void setUp() {\n-        super.setUp();\n-        //.visible() crashes: Layout state should be one of 100 but it is 10\n-        ActivityController<DeckPickerTestImpl> controller =\n-                Robolectric.buildActivity(DeckPickerTestImpl.class, new Intent())\n-                .create().start().resume();\n-        impl = controller.get();\n-        impl.resetVariables();\n-    }\n-\n-    @Test\n-    public void failedResultWithNoDataWillDisplayFailedDialog() {\n-        TaskData result = failedResultNoData();\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should be shown if no data is supplied\", impl.didDisplayDialogLoadFailed());\n-    }\n-\n-    @Test\n-    public void failedResultWithEmptyDataWillDisplayFailedDialog() {\n-        TaskData result = failedResultWithData();\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should be shown if empty data is supplied\", impl.didDisplayDialogLoadFailed());\n-    }\n-\n-    @Test\n-    public void validResultWithEmptyDataWillDisplayFailedDialog() {\n-        TaskData result = validResultWithData();\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should be shown if empty data is supplied\", impl.didDisplayDialogLoadFailed());\n-    }\n-\n-    @Test\n-    public void failedResultWithInvalidDataWillDisplayFailedDialog() {\n-        TaskData result = failedResultWithData(1);\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should be shown if invalid data is supplied\", impl.didDisplayDialogLoadFailed());\n-    }\n-\n-    @Test\n-    @Ignore(\"Currently failing\")\n-    public void validResultWithInvalidDataWillDisplayFailedDialog() {\n-        TaskData result = validResultWithData(1);\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should be shown if invalid data is supplied\", impl.didDisplayDialogLoadFailed());\n-    }\n-\n-    @Test\n-    public void validResultWithValidDataWillDisplayMessageBox() {\n-        CheckDatabaseResult validData = validData();\n-        TaskData result = validResultWithData(validData);\n-\n-        execute(result);\n-\n-        assertThat(\"Load Failed dialog should not be shown if invalid data is supplied\", !impl.didDisplayDialogLoadFailed());\n-        assertThat(\"Dialog should be displayed\", impl.didDisplayMessage());\n-    }\n-\n-\n-    @NonNull\n-    private CheckDatabaseResult validData() {\n-        return new CheckDatabaseResult(1);\n-    }\n-\n-\n-    @NonNull\n-    private TaskData failedResultWithData(Object... obj) {\n-        return new TaskData(false, obj);\n-    }\n-\n-    @NonNull\n-    private TaskData validResultWithData(Object... obj) {\n-        return new TaskData(true, obj);\n-    }\n-\n-\n-    @NonNull\n-    private TaskData failedResultNoData() {\n-        return new TaskData(false);\n-    }\n-\n-    private void execute(TaskData result) {\n-        DeckPicker.CheckDatabaseListener listener = getInstance(impl);\n-\n-        listener.onPostExecute(result);\n-    }\n-\n-    @NonNull\n-    private DeckPicker.CheckDatabaseListener getInstance(DeckPickerTestImpl test) {\n-        return test.new CheckDatabaseListener();\n-    }\n-\n-    /**COULD_BE_BETTER: Listener is too coupled to this */\n-    protected static class DeckPickerTestImpl extends DeckPicker {\n-\n-        private boolean mDidDisplayDialogLoadFailed;\n-        private boolean mDidDisplayMessage = false;\n-\n-\n-        public boolean didDisplayDialogLoadFailed() {\n-            return mDidDisplayDialogLoadFailed;\n-        }\n-\n-        @Override\n-        public void handleDbError() {\n-            this.mDidDisplayDialogLoadFailed = true;\n-            super.handleDbError();\n-            showDatabaseErrorDialog(DatabaseErrorDialog.DIALOG_LOAD_FAILED);\n-        }\n-\n-        public void resetVariables() {\n-            mDidDisplayMessage = false;\n-            mDidDisplayDialogLoadFailed = false;\n-        }\n-\n-        @Override\n-        protected void showSimpleMessageDialog(String message, boolean reload) {\n-            mDidDisplayMessage = true;\n-            super.showSimpleMessageDialog(message, reload);\n-        }\n-\n-\n-        public boolean didDisplayMessage() {\n-            return mDidDisplayMessage;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNjkwOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419126908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //If the database is locked, all we can do is ask the user t exit.\n          \n          \n            \n                            //If the database is locked, all we can do is ask the user to exit.\n          \n      \n    \n    \n  \n\nAs long as I have one textual nit that's important might as well throw in the other one I would have otherwise ignore ;-)\nI think this was the last commit in the stack, I'd like to rebase not squash so if you could merge this in (ignoring the fact that github makes them committable - it's just a nice presentation to see my suggestion - that'd be <kiwi>legend</kiwi>", "author": "mikehardy", "createdAt": "2020-05-03T16:29:22Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/DatabaseErrorDialog.java", "diffHunk": "@@ -270,12 +272,25 @@ public MaterialDialog onCreateDialog(Bundle savedInstanceState) {\n                         })\n                         .show();\n             }\n+            case DIALOG_DB_LOCKED: {\n+                //If the database is locked, all we can do is ask the user t exit.", "originalCommit": "8fe879dcbaa2b9c8c27d2f5f2f6270ec7f4a8fb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyOTg1NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419129854", "bodyText": "I'm used to rebasing commits in the middle of the stack now, so it's not a bother. Both were at the end", "author": "david-allison-1", "createdAt": "2020-05-03T16:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNjkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "1e7fb11a75d84dba1ed3e924c7f88711940162f5", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/DatabaseErrorDialog.java b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/DatabaseErrorDialog.java\nindex 0822d3123..7c96cbf25 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/DatabaseErrorDialog.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/dialogs/DatabaseErrorDialog.java\n\n@@ -272,25 +270,12 @@ public class DatabaseErrorDialog extends AsyncDialogFragment {\n                         })\n                         .show();\n             }\n-            case DIALOG_DB_LOCKED: {\n-                //If the database is locked, all we can do is ask the user t exit.\n-                return builder.content(getMessage())\n-                        .positiveText(res.getString(R.string.close))\n-                        .cancelable(false)\n-                        .onPositive((inner_dialog, which) -> exit())\n-                        .show();\n-            }\n             default:\n                 return null;\n         }\n     }\n \n \n-    private void exit() {\n-        ((DeckPicker) getActivity()).exit();\n-    }\n-\n-\n     private String getMessage() {\n         switch (getArguments().getInt(\"dialogType\")) {\n             case DIALOG_LOAD_FAILED:\n"}}, {"oid": "1e7fb11a75d84dba1ed3e924c7f88711940162f5", "url": "https://github.com/ankidroid/Anki-Android/commit/1e7fb11a75d84dba1ed3e924c7f88711940162f5", "message": "Don't crash on locked database in Check Database\n\nPreviously, we tried to end a transaction which did not exist, which\ncrashed. Now, we go back to the \"failed to load\" error.\n\nFixes #6067", "committedDate": "2020-05-03T16:50:55Z", "type": "commit"}, {"oid": "1981f73dd4ac0ce52a20c4fcdb70b39ffb1680a0", "url": "https://github.com/ankidroid/Anki-Android/commit/1981f73dd4ac0ce52a20c4fcdb70b39ffb1680a0", "message": "NF: Add tests for CheckDatabaseListener", "committedDate": "2020-05-03T16:50:59Z", "type": "commit"}, {"oid": "9b7ae2a4fbaf9dcfeed516fd365030d38c4f5f5f", "url": "https://github.com/ankidroid/Anki-Android/commit/9b7ae2a4fbaf9dcfeed516fd365030d38c4f5f5f", "message": "NF: DeckPicker: Refactor CheckDatabaseListener\n\nAutomated swap & removal of else block for clarity.", "committedDate": "2020-05-03T16:50:59Z", "type": "commit"}, {"oid": "3e3d42d6c1758fca69b5b4fa255a83431628e095", "url": "https://github.com/ankidroid/Anki-Android/commit/3e3d42d6c1758fca69b5b4fa255a83431628e095", "message": "DeckPicker: Handle DbLocked & change outcomes\n\nIf we got a valid result with no data, treat it as a success", "committedDate": "2020-05-03T16:50:59Z", "type": "commit"}, {"oid": "222c6ec50c0304d676c80752de5cf69371dff543", "url": "https://github.com/ankidroid/Anki-Android/commit/222c6ec50c0304d676c80752de5cf69371dff543", "message": "DatabaseErrorDialog: Handle DB Locked\n\nAdd in a dialog which will handle the database being locked.", "committedDate": "2020-05-03T16:52:31Z", "type": "commit"}, {"oid": "222c6ec50c0304d676c80752de5cf69371dff543", "url": "https://github.com/ankidroid/Anki-Android/commit/222c6ec50c0304d676c80752de5cf69371dff543", "message": "DatabaseErrorDialog: Handle DB Locked\n\nAdd in a dialog which will handle the database being locked.", "committedDate": "2020-05-03T16:52:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMDA2OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419130068", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "timrae", "createdAt": "2020-05-03T16:55:15Z", "path": "AnkiDroid/src/test/java/com/ichi2/async/AbstractCollectionTaskTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.async;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayWithSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public abstract class AbstractCollectionTaskTest extends RobolectricTest {\n+\n+    protected CollectionTask.TaskData execute(int taskType) {\n+        CollectionTask task = CollectionTask.launchCollectionTask(taskType);\n+        try {\n+            return task.execute().get();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);", "originalCommit": "222c6ec50c0304d676c80752de5cf69371dff543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMDA3NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6100#discussion_r419130074", "bodyText": "Issue found: The utility class name 'DatabaseLock' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "author": "timrae", "createdAt": "2020-05-03T16:55:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/debug/DatabaseLock.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.debug;\n+\n+import android.content.Context;\n+\n+import com.ichi2.anki.CollectionHelper;\n+import com.ichi2.libanki.Collection;\n+\n+import timber.log.Timber;\n+\n+/** Debug only class which will lock the database */\n+public class DatabaseLock {", "originalCommit": "222c6ec50c0304d676c80752de5cf69371dff543", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}