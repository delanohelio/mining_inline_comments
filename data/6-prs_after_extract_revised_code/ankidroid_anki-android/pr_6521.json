{"pr_number": 6521, "pr_title": "apiVersioning and developerContact implementation for AnkiDroid functions call from WebView ", "pr_createdAt": "2020-06-21T06:31:22Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6521", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2Nzk0MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r443267941", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HashMap<String, Boolean> jsApiListMap = new HashMap<String, Boolean>();\n          \n          \n            \n                private HashMap<String, Boolean> mJsApiListMap = new HashMap<String, Boolean>();", "author": "david-allison-1", "createdAt": "2020-06-21T23:37:55Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -188,6 +191,13 @@\n \n     // ETA\n     private int eta;\n+    // JavaScript Versioning\n+    protected String mCardSuppliedApiVersion = \"\";\n+    protected String mCardSuppliedDeveloperContact  = \"\";\n+\n+    private static final String sCurrentJsApiVersion = \"1.0.0\";\n+    // JS api list enable/disable status\n+    private HashMap<String, Boolean> jsApiListMap = new HashMap<String, Boolean>();", "originalCommit": "21733244312ba01f7c7eeb38c7ce0e343c601529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODQ5Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r443268492", "bodyText": "Wouldn't a HashSet<String> be better here,", "author": "david-allison-1", "createdAt": "2020-06-21T23:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2Nzk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NTA3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r444645072", "bodyText": "I don't know which one is better. But HashSet can also be implemented.", "author": "infinyte7", "createdAt": "2020-06-24T05:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2Nzk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc30c1dab10e0e8a60623a76817589ad9961c113", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 6d34e3eb62..ed9437ba00 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -191,13 +188,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n \n     // ETA\n     private int eta;\n-    // JavaScript Versioning\n-    protected String mCardSuppliedApiVersion = \"\";\n-    protected String mCardSuppliedDeveloperContact  = \"\";\n-\n-    private static final String sCurrentJsApiVersion = \"1.0.0\";\n-    // JS api list enable/disable status\n-    private HashMap<String, Boolean> jsApiListMap = new HashMap<String, Boolean>();\n \n     private boolean isInFullscreen;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODA3Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r443268073", "bodyText": "nit: invert the if with showDeveloperContact() inside the block, and return early to reduce nesting.", "author": "david-allison-1", "createdAt": "2020-06-21T23:39:35Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3158,27 +3168,35 @@ private boolean filterUrl(String url) {\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                executeCommand(COMMAND_MARK);\n+                if (jsApiListMap.get(\"markCard\")) {\n+                    executeCommand(COMMAND_MARK);\n+                } else {\n+                    showDeveloperContact();\n+                }\n                 return true;\n             }\n             // flag card (blue, green, orange, red) using javascript from AnkiDroid webview\n             if (url.startsWith(\"signal:flag_\")) {\n-                String mFlag = url.replaceFirst(\"signal:flag_\",\"\");\n-                switch (mFlag) {\n-                    case \"none\": executeCommand(COMMAND_UNSET_FLAG);\n-                        return true;\n-                    case \"red\": executeCommand(COMMAND_TOGGLE_FLAG_RED);\n-                        return true;\n-                    case \"orange\": executeCommand(COMMAND_TOGGLE_FLAG_ORANGE);\n-                        return true;\n-                    case \"green\": executeCommand(COMMAND_TOGGLE_FLAG_GREEN);\n-                        return true;\n-                    case \"blue\": executeCommand(COMMAND_TOGGLE_FLAG_BLUE);\n-                        return true;\n-                    default:\n-                        Timber.d(\"No such Flag found.\");\n-                        return true;\n+                if (jsApiListMap.get(\"toggleFlag\")) {", "originalCommit": "21733244312ba01f7c7eeb38c7ce0e343c601529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDU1MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r444644550", "bodyText": "Updated", "author": "infinyte7", "createdAt": "2020-06-24T04:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bc30c1dab10e0e8a60623a76817589ad9961c113", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 6d34e3eb62..ed9437ba00 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3168,35 +3188,27 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                if (jsApiListMap.get(\"markCard\")) {\n-                    executeCommand(COMMAND_MARK);\n-                } else {\n-                    showDeveloperContact();\n-                }\n+                executeCommand(COMMAND_MARK);\n                 return true;\n             }\n             // flag card (blue, green, orange, red) using javascript from AnkiDroid webview\n             if (url.startsWith(\"signal:flag_\")) {\n-                if (jsApiListMap.get(\"toggleFlag\")) {\n-                    String mFlag = url.replaceFirst(\"signal:flag_\",\"\");\n-                    switch (mFlag) {\n-                        case \"none\": executeCommand(COMMAND_UNSET_FLAG);\n-                            return true;\n-                        case \"red\": executeCommand(COMMAND_TOGGLE_FLAG_RED);\n-                            return true;\n-                        case \"orange\": executeCommand(COMMAND_TOGGLE_FLAG_ORANGE);\n-                            return true;\n-                        case \"green\": executeCommand(COMMAND_TOGGLE_FLAG_GREEN);\n-                            return true;\n-                        case \"blue\": executeCommand(COMMAND_TOGGLE_FLAG_BLUE);\n-                            return true;\n-                        default:\n-                            Timber.d(\"No such Flag found.\");\n-                            return true;\n-                    }\n+                String mFlag = url.replaceFirst(\"signal:flag_\",\"\");\n+                switch (mFlag) {\n+                    case \"none\": executeCommand(COMMAND_UNSET_FLAG);\n+                        return true;\n+                    case \"red\": executeCommand(COMMAND_TOGGLE_FLAG_RED);\n+                        return true;\n+                    case \"orange\": executeCommand(COMMAND_TOGGLE_FLAG_ORANGE);\n+                        return true;\n+                    case \"green\": executeCommand(COMMAND_TOGGLE_FLAG_GREEN);\n+                        return true;\n+                    case \"blue\": executeCommand(COMMAND_TOGGLE_FLAG_BLUE);\n+                        return true;\n+                    default:\n+                        Timber.d(\"No such Flag found.\");\n+                        return true;\n                 }\n-                showDeveloperContact();\n-                return true;\n             }\n \n             // Show toast using JS\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODIwOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r443268208", "bodyText": "invert the if and return early to reduce nesting", "author": "david-allison-1", "createdAt": "2020-06-21T23:41:11Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3419,6 +3437,62 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // show developer contact if js api used in card is deprecated\n+    private void showDeveloperContact() {\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n+            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n+        } else {\n+            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n+        }\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    // api version if 1.0.0\n+    private boolean requireApiVersion(String apiVer) {\n+        String[] versionSupplied = apiVer.split(\"\\\\.\");\n+        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+\n+        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n+        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n+        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n+\n+        if (versionSupplied.length <= 2) {\n+            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            return false;\n+        }\n+\n+        if (versionSupplied.length == 3) {", "originalCommit": "21733244312ba01f7c7eeb38c7ce0e343c601529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDUxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r444644515", "bodyText": "I have changed it. May be better than previous one.", "author": "infinyte7", "createdAt": "2020-06-24T04:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "bc30c1dab10e0e8a60623a76817589ad9961c113", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 6d34e3eb62..ed9437ba00 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3437,62 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    // api version if 1.0.0\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n-\n-        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n-        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n-        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n-\n-        if (versionSupplied.length <= 2) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-\n-        if (versionSupplied.length == 3) {\n-            int majorVersionSupplied = Integer.parseInt(versionSupplied[0]);\n-            int minorVersionSupplied = Integer.parseInt(versionSupplied[1]);\n-            int patchVersionSupplied = Integer.parseInt(versionSupplied[2]);\n-\n-            if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied == minorCurrentApiVersion && patchVersionSupplied == patchCurrentApiVersion) {\n-                return true;\n-            } else if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied < minorCurrentApiVersion && patchVersionSupplied < patchCurrentApiVersion) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            }\n-        }\n-        return false;\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODQyMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r443268423", "bodyText": "Might be worth extracting this parsing/logic to a class. Implementer's choice.", "author": "david-allison-1", "createdAt": "2020-06-21T23:43:59Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3419,6 +3437,62 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // show developer contact if js api used in card is deprecated\n+    private void showDeveloperContact() {\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n+            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n+        } else {\n+            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n+        }\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    // api version if 1.0.0\n+    private boolean requireApiVersion(String apiVer) {\n+        String[] versionSupplied = apiVer.split(\"\\\\.\");\n+        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+\n+        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n+        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n+        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n+\n+        if (versionSupplied.length <= 2) {\n+            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            return false;\n+        }\n+\n+        if (versionSupplied.length == 3) {\n+            int majorVersionSupplied = Integer.parseInt(versionSupplied[0]);\n+            int minorVersionSupplied = Integer.parseInt(versionSupplied[1]);\n+            int patchVersionSupplied = Integer.parseInt(versionSupplied[2]);\n+\n+            if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied == minorCurrentApiVersion && patchVersionSupplied == patchCurrentApiVersion) {", "originalCommit": "21733244312ba01f7c7eeb38c7ce0e343c601529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY0NDQxMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r444644413", "bodyText": "Extracted to a class.", "author": "infinyte7", "createdAt": "2020-06-24T04:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI2ODQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "bc30c1dab10e0e8a60623a76817589ad9961c113", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 6d34e3eb62..ed9437ba00 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3437,62 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    // api version if 1.0.0\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n-\n-        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n-        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n-        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n-\n-        if (versionSupplied.length <= 2) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-\n-        if (versionSupplied.length == 3) {\n-            int majorVersionSupplied = Integer.parseInt(versionSupplied[0]);\n-            int minorVersionSupplied = Integer.parseInt(versionSupplied[1]);\n-            int patchVersionSupplied = Integer.parseInt(versionSupplied[2]);\n-\n-            if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied == minorCurrentApiVersion && patchVersionSupplied == patchCurrentApiVersion) {\n-                return true;\n-            } else if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied < minorCurrentApiVersion && patchVersionSupplied < patchCurrentApiVersion) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            }\n-        }\n-        return false;\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"oid": "bc30c1dab10e0e8a60623a76817589ad9961c113", "url": "https://github.com/ankidroid/Anki-Android/commit/bc30c1dab10e0e8a60623a76817589ad9961c113", "message": "Revert \"Fork Update\"", "committedDate": "2020-06-26T03:06:58Z", "type": "commit"}, {"oid": "6a3339cf2689a619dc96747fa51768c24f417c95", "url": "https://github.com/ankidroid/Anki-Android/commit/6a3339cf2689a619dc96747fa51768c24f417c95", "message": "\tUpdate fork", "committedDate": "2020-06-26T03:36:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MjY4Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446172686", "bodyText": "You could extract a lot of the logic in requireApiVersion to here as well.\n\nStatic builder which takes a string, and converts it into a version\nComparable<> or similar, which takes two versions and returns which is larger.\n\nThis would significantly cut down on the logic in requireApiVersion", "author": "david-allison-1", "createdAt": "2020-06-26T13:08:13Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3449,6 +3468,77 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // show developer contact if js api used in card is deprecated\n+    private void showDeveloperContact() {\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n+            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n+        } else {\n+            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n+        }\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /*\n+     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     * major version : 1\n+     * minor version : 2\n+     * patch version : 3\n+     */\n+    private class JsApiVersionClass {", "originalCommit": "072c64837af0048cca3034944dc7c4eb38257a44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MzE4MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446493181", "bodyText": "I implemented using this\nhttps://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752", "author": "infinyte7", "createdAt": "2020-06-27T06:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3MjY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 8612f470fd..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,77 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n-     */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n-\n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n-\n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n-\n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n-\n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n-\n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n-\n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n-                return true;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            }\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODIyMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508222", "bodyText": "If you override .equals, you need to override .getHashCode", "author": "david-allison-1", "createdAt": "2020-06-27T09:59:51Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n+\n+                if (thisPart < thatPart) {\n+                    return -1;\n+                }\n+\n+                if (thisPart > thatPart) {\n+                    return 1;\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            if (this == that) {\n                 return true;", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODMwOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508309", "bodyText": "much nicer - could convert sCurrentJsApiVersion to a Version", "author": "david-allison-1", "createdAt": "2020-06-27T10:00:22Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n+\n+                if (thisPart < thatPart) {\n+                    return -1;\n+                }\n+\n+                if (thisPart > thatPart) {\n+                    return 1;\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            if (this == that) {\n                 return true;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            }\n+\n+            if (that == null) {\n                 return false;\n             }\n+\n+            if (this.getClass() != that.getClass()) {\n+                return false;\n+            }\n+\n+            return this.compareTo((Version) that) == 0;\n+        }\n+    }\n+\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = new Version(sCurrentJsApiVersion);", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODM1Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508356", "bodyText": "What if this throws?", "author": "david-allison-1", "createdAt": "2020-06-27T10:00:46Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n+\n+                if (thisPart < thatPart) {\n+                    return -1;\n+                }\n+\n+                if (thisPart > thatPart) {\n+                    return 1;\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            if (this == that) {\n                 return true;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            }\n+\n+            if (that == null) {\n                 return false;\n             }\n+\n+            if (this.getClass() != that.getClass()) {\n+                return false;\n+            }\n+\n+            return this.compareTo((Version) that) == 0;\n+        }\n+    }\n+\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n+        Version mVersionSupplied = new Version(apiVer);", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODY4Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508686", "bodyText": "Not a member variable - no need for the m prefix\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Version mVersionSupplied = new Version(apiVer);\n          \n          \n            \n                    Version versionSupplied = new Version(apiVer);", "author": "david-allison-1", "createdAt": "2020-06-27T10:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODQxMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508411", "bodyText": "extract the result of compareTo above the ifs, then you only need to call it once", "author": "david-allison-1", "createdAt": "2020-06-27T10:01:38Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n+\n+                if (thisPart < thatPart) {\n+                    return -1;\n+                }\n+\n+                if (thisPart > thatPart) {\n+                    return 1;\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            if (this == that) {\n                 return true;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            }\n+\n+            if (that == null) {\n                 return false;\n             }\n+\n+            if (this.getClass() != that.getClass()) {\n+                return false;\n+            }\n+\n+            return this.compareTo((Version) that) == 0;\n+        }\n+    }\n+\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n+        Version mVersionSupplied = new Version(apiVer);\n+\n+        if (mVersionCurrent.equals(mVersionSupplied)) {", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODQ3MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private String version;\n          \n          \n            \n                    private final String mVersion;", "author": "david-allison-1", "createdAt": "2020-06-27T10:02:37Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODU1Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508556", "bodyText": "turn this into a static factory method createInstance which will return null on failure. This means you get a simple constructor that does no work and doesn't throw.\nMake sure you handle a null return, as the code currently doesn't handle exceptions", "author": "david-allison-1", "createdAt": "2020-06-27T10:04:05Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODU4NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508585", "bodyText": "Might as well move the conversion to an int array into the constructor for speed.", "author": "david-allison-1", "createdAt": "2020-06-27T10:04:34Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODYwMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508600", "bodyText": "This can fail due to overflow", "author": "david-allison-1", "createdAt": "2020-06-27T10:04:46Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODczOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r446508738", "bodyText": "Technically, this should be > 0, and the next should be < 0", "author": "david-allison-1", "createdAt": "2020-06-27T10:06:10Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3493,49 +3493,89 @@ private void showDeveloperContact() {\n     }\n \n     /*\n-     *AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     * major version : 1\n-     * minor version : 2\n-     * patch version : 3\n+     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n+     *  major version : 1\n+     *  minor version : 2\n+     *  patch version : 3\n+     *\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n      */\n-    private class JsApiVersionClass {\n-        int major;\n-        int minor;\n-        int patch;\n-    }\n+    public class Version implements Comparable<Version> {\n \n-    /*\n-     *Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer) {\n-        String[] versionSupplied = apiVer.split(\"\\\\.\");\n-        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n+        private String version;\n \n-        JsApiVersionClass mJsCurrentVersion = new JsApiVersionClass();\n+        public final String get() {\n+            return this.version;\n+        }\n \n-        mJsCurrentVersion.major = Integer.parseInt(currentApiVersion[0]);\n-        mJsCurrentVersion.minor = Integer.parseInt(currentApiVersion[1]);\n-        mJsCurrentVersion.patch = Integer.parseInt(currentApiVersion[2]);\n+        public Version(String version) {\n+            if (version == null) {\n+                throw new IllegalArgumentException(\"Version can not be null\");\n+            }\n+            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                throw new IllegalArgumentException(\"Invalid version format\");\n+            }\n+            this.version = version;\n+        }\n \n-        if (versionSupplied.length < 3 || versionSupplied.length > 4) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            JsApiVersionClass mJsSuppliedVersion = new JsApiVersionClass();\n+        @Override\n+        public int compareTo(Version that) {\n+            if (that == null) {\n+                return 1;\n+            }\n \n-            mJsSuppliedVersion.major = Integer.parseInt(versionSupplied[0]);\n-            mJsSuppliedVersion.minor = Integer.parseInt(versionSupplied[1]);\n-            mJsSuppliedVersion.patch = Integer.parseInt(versionSupplied[2]);\n+            String[] thisParts = this.get().split(\"\\\\.\");\n+            String[] thatParts = that.get().split(\"\\\\.\");\n+            int length = Math.max(thisParts.length, thatParts.length);\n \n-            if (mJsCurrentVersion.major > mJsSuppliedVersion.major || mJsCurrentVersion.minor > mJsSuppliedVersion.minor || mJsCurrentVersion.patch > mJsSuppliedVersion.patch) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-                return false;\n-            } else if (mJsCurrentVersion.major == mJsSuppliedVersion.major && mJsCurrentVersion.minor == mJsSuppliedVersion.minor && mJsCurrentVersion.patch == mJsSuppliedVersion.patch) {\n+            for (int i = 0; i < length; i++) {\n+                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n+                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n+\n+                if (thisPart < thatPart) {\n+                    return -1;\n+                }\n+\n+                if (thisPart > thatPart) {\n+                    return 1;\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object that) {\n+            if (this == that) {\n                 return true;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+            }\n+\n+            if (that == null) {\n                 return false;\n             }\n+\n+            if (this.getClass() != that.getClass()) {\n+                return false;\n+            }\n+\n+            return this.compareTo((Version) that) == 0;\n+        }\n+    }\n+\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n+        Version mVersionSupplied = new Version(apiVer);\n+\n+        if (mVersionCurrent.equals(mVersionSupplied)) {\n+            return true;\n+        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied", "originalCommit": "154910791241df838c69aa721cede43d664c2983", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex cec3a71e55..787524c3c6 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3468,117 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    // show developer contact if js api used in card is deprecated\n-    private void showDeveloperContact() {\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n-            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n-        } else {\n-            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n-        }\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /*\n-     * AnkiDroid JavaScript API Class for major, minor, patch version eg: 1.2.3\n-     *  major version : 1\n-     *  minor version : 2\n-     *  patch version : 3\n-     *\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     * https://stackoverflow.com/questions/198431/how-do-you-compare-two-version-strings-in-java/27891752\n-     */\n-    public class Version implements Comparable<Version> {\n-\n-        private String version;\n-\n-        public final String get() {\n-            return this.version;\n-        }\n-\n-        public Version(String version) {\n-            if (version == null) {\n-                throw new IllegalArgumentException(\"Version can not be null\");\n-            }\n-            if (!version.matches(\"[0-9]+(\\\\.[0-9]+)*\")) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-                throw new IllegalArgumentException(\"Invalid version format\");\n-            }\n-            this.version = version;\n-        }\n-\n-        @Override\n-        public int compareTo(Version that) {\n-            if (that == null) {\n-                return 1;\n-            }\n-\n-            String[] thisParts = this.get().split(\"\\\\.\");\n-            String[] thatParts = that.get().split(\"\\\\.\");\n-            int length = Math.max(thisParts.length, thatParts.length);\n-\n-            for (int i = 0; i < length; i++) {\n-                int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0;\n-                int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0;\n-\n-                if (thisPart < thatPart) {\n-                    return -1;\n-                }\n-\n-                if (thisPart > thatPart) {\n-                    return 1;\n-                }\n-            }\n-            return 0;\n-        }\n-\n-        @Override\n-        public boolean equals(Object that) {\n-            if (this == that) {\n-                return true;\n-            }\n-\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            if (this.getClass() != that.getClass()) {\n-                return false;\n-            }\n-\n-            return this.compareTo((Version) that) == 0;\n-        }\n-    }\n-\n-    private boolean requireApiVersion(String apiVer) {\n-\n-        Version mVersionCurrent = new Version(sCurrentJsApiVersion);\n-        Version mVersionSupplied = new Version(apiVer);\n-\n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.compareTo(mVersionSupplied) == 1) {   // mCurrent > mSupplied\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        }\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"oid": "c8181c37bed26d5324d1fa42943fbb840dc41d3c", "url": "https://github.com/ankidroid/Anki-Android/commit/c8181c37bed26d5324d1fa42943fbb840dc41d3c", "message": "Merge branch 'master' of https://github.com/ankidroid/Anki-Android", "committedDate": "2020-06-28T19:36:41Z", "type": "commit"}, {"oid": "0d37a81fbfb9294f40b7452bb52c598e634ace91", "url": "https://github.com/ankidroid/Anki-Android/commit/0d37a81fbfb9294f40b7452bb52c598e634ace91", "message": "Merge branch 'master' of https://github.com/ankidroid/Anki-Android", "committedDate": "2020-06-30T07:52:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc5Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447737797", "bodyText": "Do you need validation here? What happens with an invalid version?", "author": "david-allison-1", "createdAt": "2020-06-30T14:41:17Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3449,6 +3470,49 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // show developer contact if js api used in card is deprecated\n+    private void showDeveloperContact() {\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n+            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n+        } else {\n+            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n+        }\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /**\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     */\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n+        Version mVersionSupplied = Version.valueOf(apiVer);", "originalCommit": "3cfd5e5ab6a0883080851c24be3d251a4f0af22d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3OTYxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447879615", "bodyText": "I think apiVer passed to valueof so may be Sem Ver library may have internal check for invalid input.", "author": "infinyte7", "createdAt": "2020-06-30T18:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MjA4NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447882084", "bodyText": "What happens? Does it throw an exception? If not, which code path would it take?", "author": "david-allison-1", "createdAt": "2020-06-30T18:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NTAyNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447945026", "bodyText": "Exception handling to be implemented.", "author": "infinyte7", "createdAt": "2020-06-30T20:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNzc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6184befa633ae6c2af28aeb7e027c0a6bf040635", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 3448cf9d89..2af61d533c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3494,23 +3491,36 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         snackbar.show();\n     }\n \n-    /**\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n+    // api version if 1.0.0\n     private boolean requireApiVersion(String apiVer) {\n+        String[] versionSupplied = apiVer.split(\"\\\\.\");\n+        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n \n-        Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n-        Version mVersionSupplied = Version.valueOf(apiVer);\n+        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n+        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n+        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n \n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.greaterThan(mVersionSupplied)) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n+        if (versionSupplied.length <= 2) {\n             UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n             return false;\n         }\n+\n+        if (versionSupplied.length == 3) {\n+            int majorVersionSupplied = Integer.parseInt(versionSupplied[0]);\n+            int minorVersionSupplied = Integer.parseInt(versionSupplied[1]);\n+            int patchVersionSupplied = Integer.parseInt(versionSupplied[2]);\n+\n+            if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied == minorCurrentApiVersion && patchVersionSupplied == patchCurrentApiVersion) {\n+                return true;\n+            } else if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied < minorCurrentApiVersion && patchVersionSupplied < patchCurrentApiVersion) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n+                return false;\n+            } else {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                return false;\n+            }\n+        }\n+        return false;\n     }\n \n     @VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzgxMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447883812", "bodyText": "@mikehardy - I don't know enough about semVer to handle this one. What do we want here? We're going to get a lot of API version increases, and at what point do we want to say \"break all API clients\", and how do we provide a warning, or allow clients to update while keeping the legacy code going.", "author": "david-allison-1", "createdAt": "2020-06-30T18:11:14Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3449,6 +3470,49 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // show developer contact if js api used in card is deprecated\n+    private void showDeveloperContact() {\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        if (TextUtils.isEmpty(mCardSuppliedDeveloperContact)) {\n+            snackbarMsg = getString(R.string.api_version_no_developer_contact);\n+        } else {\n+            snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact );\n+        }\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /**\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     */\n+    private boolean requireApiVersion(String apiVer) {\n+\n+        Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n+        Version mVersionSupplied = Version.valueOf(apiVer);\n+\n+        if (mVersionCurrent.equals(mVersionSupplied)) {", "originalCommit": "3cfd5e5ab6a0883080851c24be3d251a4f0af22d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5ODIxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447898215", "bodyText": "great question. So semVer allows for \"compatible version range specification\".\nYou always assume the requested version range will work\nRanges may be unbounded, saying just \"anything higher than X.Y.Z is good\". In practice most ranges are like that.\nYou just do a quick match and and if the requested API range is within our current API range, it's good to go. If it is not, then you say \"Current AnkiDroid Javascript API is incompatible with the range requested by your template. Contact the author XXX or click here for more info\" (or similar)\nThis link https://nodesource.com/blog/semver-a-primer/ has a good explanation of \"Semver Ranges\" with examples of how they are specified and what they mean.\nSemver by itself is actually not useful without the range specification and comparison.\nThank goodness the library I pointed to implements it already or it would be nasty :-) https://github.com/zafarkhaja/jsemver#semver-expressions-api-ranges", "author": "mikehardy", "createdAt": "2020-06-30T18:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0NDQyMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r447944422", "bodyText": "I will update in between ranges.", "author": "infinyte7", "createdAt": "2020-06-30T19:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6184befa633ae6c2af28aeb7e027c0a6bf040635", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 3448cf9d89..2af61d533c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3494,23 +3491,36 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         snackbar.show();\n     }\n \n-    /**\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n+    // api version if 1.0.0\n     private boolean requireApiVersion(String apiVer) {\n+        String[] versionSupplied = apiVer.split(\"\\\\.\");\n+        String[] currentApiVersion = sCurrentJsApiVersion.split(\"\\\\.\");\n \n-        Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n-        Version mVersionSupplied = Version.valueOf(apiVer);\n+        int majorCurrentApiVersion = Integer.parseInt(currentApiVersion[0]);\n+        int minorCurrentApiVersion = Integer.parseInt(currentApiVersion[1]);\n+        int patchCurrentApiVersion = Integer.parseInt(currentApiVersion[2]);\n \n-        if (mVersionCurrent.equals(mVersionSupplied)) {\n-            return true;\n-        } else if (mVersionCurrent.greaterThan(mVersionSupplied)) {\n-            UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n-            return false;\n-        } else {\n+        if (versionSupplied.length <= 2) {\n             UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n             return false;\n         }\n+\n+        if (versionSupplied.length == 3) {\n+            int majorVersionSupplied = Integer.parseInt(versionSupplied[0]);\n+            int minorVersionSupplied = Integer.parseInt(versionSupplied[1]);\n+            int patchVersionSupplied = Integer.parseInt(versionSupplied[2]);\n+\n+            if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied == minorCurrentApiVersion && patchVersionSupplied == patchCurrentApiVersion) {\n+                return true;\n+            } else if (majorVersionSupplied == majorCurrentApiVersion && minorVersionSupplied < minorCurrentApiVersion && patchVersionSupplied < patchCurrentApiVersion) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, sCurrentJsApiVersion), false);\n+                return false;\n+            } else {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, sCurrentJsApiVersion), false);\n+                return false;\n+            }\n+        }\n+        return false;\n     }\n \n     @VisibleForTesting\n"}}, {"oid": "6184befa633ae6c2af28aeb7e027c0a6bf040635", "url": "https://github.com/ankidroid/Anki-Android/commit/6184befa633ae6c2af28aeb7e027c0a6bf040635", "message": "api versioning", "committedDate": "2020-07-01T21:26:01Z", "type": "commit"}, {"oid": "7254e0be4b85be2c3a0abe41de7578e89af1014a", "url": "https://github.com/ankidroid/Anki-Android/commit/7254e0be4b85be2c3a0abe41de7578e89af1014a", "message": "Updated AbstractFlashcardViewer.java, 02-strings.xml", "committedDate": "2020-07-01T21:26:38Z", "type": "commit"}, {"oid": "939e6c1fb0c8c1409e3950e68174ffba8d0c00c4", "url": "https://github.com/ankidroid/Anki-Android/commit/939e6c1fb0c8c1409e3950e68174ffba8d0c00c4", "message": "\tAdded Vesrion Compare using Comparable", "committedDate": "2020-07-01T21:26:42Z", "type": "commit"}, {"oid": "638512ebf082d1189a36948e2b4f31b4eb15bee9", "url": "https://github.com/ankidroid/Anki-Android/commit/638512ebf082d1189a36948e2b4f31b4eb15bee9", "message": "\tAdded Java SemVer for JS API", "committedDate": "2020-07-01T21:26:42Z", "type": "commit"}, {"oid": "ef8cdcbad005928e738ca21622498a0dd04b6462", "url": "https://github.com/ankidroid/Anki-Android/commit/ef8cdcbad005928e738ca21622498a0dd04b6462", "message": "Updated AbstractFlashcardViewer.java, 02-strings.xml", "committedDate": "2020-07-01T21:27:22Z", "type": "commit"}, {"oid": "ef8cdcbad005928e738ca21622498a0dd04b6462", "url": "https://github.com/ankidroid/Anki-Android/commit/ef8cdcbad005928e738ca21622498a0dd04b6462", "message": "Updated AbstractFlashcardViewer.java, 02-strings.xml", "committedDate": "2020-07-01T21:27:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNzY2OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r448627669", "bodyText": "Need improvements", "author": "infinyte7", "createdAt": "2020-07-01T21:32:54Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3449,6 +3474,99 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    /*\n+     * see 02-strings.xml\n+     * Show Error code when mark card or flag card unsupported\n+     * 1 - mark card\n+     * 2 - flag card\n+     *\n+     * show developer contact if js api used in card is deprecated\n+     */\n+    private void showDeveloperContact(int errorCode) {\n+        String errorMsg = \"\";\n+        switch (errorCode) {\n+            case 1:\n+                errorMsg = getString(R.string.anki_js_mark_card_not_supported);\n+                break;\n+            case 2:\n+                errorMsg = getString(R.string.anki_js_flag_card_not_supported);\n+                break;\n+            default:\n+                errorMsg = getString(R.string.anki_js_unknown_error);\n+                break;\n+        }\n+\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact, errorMsg);\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /**\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     */\n+    private boolean requireApiVersion(String apiVer, String apiDevContact) {\n+        try {\n+\n+            if (TextUtils.isEmpty(apiDevContact)) {\n+                return false;\n+            }\n+\n+            Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n+            Version mVersionSupplied = Version.valueOf(apiVer);\n+\n+            /*\n+            * if api major version equals to supplied major version then return true and also check for minor version and patch version\n+            * show toast for update and contact developer if need updates\n+            * otherwise return false\n+            */\n+            if (mVersionCurrent.equals(mVersionSupplied)) {", "originalCommit": "c51dc2b6fa4aa9215dddfda3b8aa23db2207ed50", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc7537f9054ef75b4c0fe22f8aa625122f71fd2a", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 8401311c56..289b44110c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3474,99 +3449,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n-    /*\n-     * see 02-strings.xml\n-     * Show Error code when mark card or flag card unsupported\n-     * 1 - mark card\n-     * 2 - flag card\n-     *\n-     * show developer contact if js api used in card is deprecated\n-     */\n-    private void showDeveloperContact(int errorCode) {\n-        String errorMsg = \"\";\n-        switch (errorCode) {\n-            case 1:\n-                errorMsg = getString(R.string.anki_js_mark_card_not_supported);\n-                break;\n-            case 2:\n-                errorMsg = getString(R.string.anki_js_flag_card_not_supported);\n-                break;\n-            default:\n-                errorMsg = getString(R.string.anki_js_unknown_error);\n-                break;\n-        }\n-\n-        View parentLayout = findViewById(android.R.id.content);\n-        String snackbarMsg;\n-        snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact, errorMsg);\n-\n-        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n-        View snackbarView = snackbar.getView();\n-        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n-        snackTextView.setTextColor(Color.WHITE);\n-        snackTextView.setMaxLines(3);\n-\n-        snackbar.setActionTextColor(Color.MAGENTA)\n-                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n-                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n-                });\n-\n-        snackbar.show();\n-    }\n-\n-    /**\n-     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n-     */\n-    private boolean requireApiVersion(String apiVer, String apiDevContact) {\n-        try {\n-\n-            if (TextUtils.isEmpty(apiDevContact)) {\n-                return false;\n-            }\n-\n-            Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n-            Version mVersionSupplied = Version.valueOf(apiVer);\n-\n-            /*\n-            * if api major version equals to supplied major version then return true and also check for minor version and patch version\n-            * show toast for update and contact developer if need updates\n-            * otherwise return false\n-            */\n-            if (mVersionCurrent.equals(mVersionSupplied)) {\n-                return true;\n-            } else if (mVersionCurrent.getMajorVersion() == mVersionSupplied.getMajorVersion()) {\n-\n-                if (mVersionCurrent.getMinorVersion() == mVersionSupplied.getMinorVersion()) {\n-\n-                    if (mVersionCurrent.getPatchVersion() > mVersionSupplied.getPatchVersion()) {\n-                        UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_patch_version, mCardSuppliedDeveloperContact), false);\n-                        return true;\n-                    } else {\n-                        UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, mCardSuppliedDeveloperContact), false);\n-                        return false;\n-                    }\n-\n-                } else if (mVersionCurrent.getMinorVersion() > mVersionSupplied.getMinorVersion()) {\n-                    UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_minor_version, mCardSuppliedDeveloperContact), false);\n-                    return true;\n-                } else {\n-                    UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, mCardSuppliedDeveloperContact), false);\n-                    return false;\n-                }\n-\n-            } else if (mVersionCurrent.greaterThan(mVersionSupplied)) {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, mCardSuppliedDeveloperContact), false);\n-                return false;\n-            } else {\n-                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, mCardSuppliedDeveloperContact), false);\n-                return false;\n-            }\n-        } catch (Exception e) {\n-          Timber.i(e, \"requireApiVersion::exception\");\n-        }\n-        return false;\n-    }\n-\n     @VisibleForTesting\n     void loadInitialCard() {\n         CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler(false),\n"}}, {"oid": "dc7537f9054ef75b4c0fe22f8aa625122f71fd2a", "url": "https://github.com/ankidroid/Anki-Android/commit/dc7537f9054ef75b4c0fe22f8aa625122f71fd2a", "message": "Updated 02-strings.xml", "committedDate": "2020-07-04T21:00:13Z", "type": "forcePushed"}, {"oid": "ef8cdcbad005928e738ca21622498a0dd04b6462", "url": "https://github.com/ankidroid/Anki-Android/commit/ef8cdcbad005928e738ca21622498a0dd04b6462", "message": "Updated AbstractFlashcardViewer.java, 02-strings.xml", "committedDate": "2020-07-01T21:27:22Z", "type": "forcePushed"}, {"oid": "474b616715419344251d456644e1344879433f93", "url": "https://github.com/ankidroid/Anki-Android/commit/474b616715419344251d456644e1344879433f93", "message": "Updated 02-strings.xml", "committedDate": "2020-07-04T21:21:36Z", "type": "commit"}, {"oid": "d8b7c41168be05cd40abcbc6a1af6f185d1a3301", "url": "https://github.com/ankidroid/Anki-Android/commit/d8b7c41168be05cd40abcbc6a1af6f185d1a3301", "message": "\tUpdated 02-strings.xml", "committedDate": "2020-07-04T21:29:43Z", "type": "commit"}, {"oid": "6544a1ec2aa4101b47984da4a9ad1146871b77a3", "url": "https://github.com/ankidroid/Anki-Android/commit/6544a1ec2aa4101b47984da4a9ad1146871b77a3", "message": "Updated 02-strings.xml", "committedDate": "2020-07-04T21:30:59Z", "type": "commit"}, {"oid": "e3571aa62b6937694a9002ae36f2ecd7c6d5f5d0", "url": "https://github.com/ankidroid/Anki-Android/commit/e3571aa62b6937694a9002ae36f2ecd7c6d5f5d0", "message": "Merge branch 'master' into js-api-version", "committedDate": "2020-07-04T21:33:29Z", "type": "commit"}, {"oid": "75dc2393e7f7bbe6a1532ba4ab79383f495b683e", "url": "https://github.com/ankidroid/Anki-Android/commit/75dc2393e7f7bbe6a1532ba4ab79383f495b683e", "message": "\tUpdated 02-strings.xml", "committedDate": "2020-07-05T13:59:51Z", "type": "commit"}, {"oid": "e68e5a5b78afade74921b53efa8630c32e2ce0e5", "url": "https://github.com/ankidroid/Anki-Android/commit/e68e5a5b78afade74921b53efa8630c32e2ce0e5", "message": "    Updated AbstractFlashcardViewer.java", "committedDate": "2020-07-05T14:08:39Z", "type": "commit"}, {"oid": "fe482d782d84c94280e7b8dfbd12f3e1fa552d88", "url": "https://github.com/ankidroid/Anki-Android/commit/fe482d782d84c94280e7b8dfbd12f3e1fa552d88", "message": "\tUpdated AbstractFlashcardViewer.java", "committedDate": "2020-07-05T14:19:41Z", "type": "commit"}, {"oid": "80079d9b660589e4d86ffed39e5a958390522f47", "url": "https://github.com/ankidroid/Anki-Android/commit/80079d9b660589e4d86ffed39e5a958390522f47", "message": "\tHandle when API not initialised", "committedDate": "2020-07-05T16:23:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTc5Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459791793", "bodyText": "These are reset on init(), which may not be called by the next card, persisting an old value", "author": "david-allison-1", "createdAt": "2020-07-23T23:59:55Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -189,6 +194,15 @@\n \n     // ETA\n     private int eta;\n+    // JavaScript Versioning\n+    protected String mCardSuppliedApiVersion = \"\";\n+    protected String mCardSuppliedDeveloperContact  = \"\";", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5NTMwNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460395306", "bodyText": "It should be checked on each card because if card edited in middle of deck review and previous persistence data will help to complete the review. But after closing and opening the deck and it will show error.", "author": "infinyte7", "createdAt": "2020-07-25T11:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5NjIzNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460396237", "bodyText": "Also it can be implemented as in javascript by deck developer to stop execution every time of init()\n<script>\nvar apiEnabled = false;\n\nif (!apiEnabled) {\nvar jsApi = {\"version\" : \"0.0.1\", \"developer\" : \"dev@mail.com\"};\n\nvar apiStatus = AnkiDroidJS.init(JSON.stringify(jsApi));\n\nvar api = JSON.parse(apiStatus);\n\nif (api['markCard'] && api['toggleFlag']) {\n       apiEnabled = true;\n}\n\nconsole.log(apiStatus);\n}\n</script>\nAnd storing apiEnabled in persistence data help in stopping again execution of init().", "author": "infinyte7", "createdAt": "2020-07-25T11:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -201,6 +204,11 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n     private static final String sCurrentJsApiVersion = \"0.0.1\";\n     private static final String sMinimumJsApiVersion = \"0.0.1\";\n \n+    // JS API ERROR CODE\n+    private static final int ankiJsErrorCodeDefault = 0;\n+    private static final int ankiJsErrorCodeMarkCard = 1;\n+    private static final int ankiJsErrorCodeFlagCard = 2;\n+\n     // JS api list enable/disable status\n     private HashMap<String, Boolean> mJsApiListMap = new HashMap<String, Boolean>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTk4Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459791983", "bodyText": "ErrorCode would be better behind either an enum or an IntDef", "author": "david-allison-1", "createdAt": "2020-07-24T00:00:33Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3450,6 +3481,87 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    /*\n+     * see 02-strings.xml\n+     * Show Error code when mark card or flag card unsupported\n+     * 1 - mark card\n+     * 2 - flag card\n+     *\n+     * show developer contact if js api used in card is deprecated\n+     */\n+    private void showDeveloperContact(int errorCode) {", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5NjM0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460396346", "bodyText": "This part need help.", "author": "infinyte7", "createdAt": "2020-07-25T11:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzODE0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460438145", "bodyText": "I don't think we need it now we're no longer switching on errorCode", "author": "david-allison-1", "createdAt": "2020-07-25T19:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3481,6 +3489,14 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n+    // Check if value null\n+    private boolean isAnkiApiNull(String api) {\n+        if (mJsApiListMap.get(api) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /*\n      * see 02-strings.xml\n      * Show Error code when mark card or flag card unsupported\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NTczMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459795732", "bodyText": "Can we extract this pattern to a method - it'll cut down on repetition and focus on what we need", "author": "david-allison-1", "createdAt": "2020-07-24T00:14:50Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3189,11 +3203,28 @@ private boolean filterUrl(String url) {\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                executeCommand(COMMAND_MARK);\n+                if (mJsApiListMap.get(\"markCard\") == null) {", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3203,25 +3211,25 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                if (mJsApiListMap.get(\"markCard\") == null) {\n-                    showDeveloperContact(1);\n+                if (isAnkiApiNull(\"markCard\")) {\n+                    showDeveloperContact(ankiJsErrorCodeDefault);\n                     return true;\n                 } else if (mJsApiListMap.get(\"markCard\")) {\n                     executeCommand(COMMAND_MARK);\n                 } else {\n                     // see 02-string.xml\n-                    showDeveloperContact(2);\n+                    showDeveloperContact(ankiJsErrorCodeMarkCard);\n                 }\n                 return true;\n             }\n             // flag card (blue, green, orange, red) using javascript from AnkiDroid webview\n             if (url.startsWith(\"signal:flag_\")) {\n-                if (mJsApiListMap.get(\"toggleFlag\") == null) {\n-                    showDeveloperContact(1);\n+                if (isAnkiApiNull(\"toggleFlag\")) {\n+                    showDeveloperContact(ankiJsErrorCodeDefault);\n                     return true;\n                 } else if (!mJsApiListMap.get(\"toggleFlag\")) {\n                     // see 02-string.xml\n-                    showDeveloperContact(3);\n+                    showDeveloperContact(ankiJsErrorCodeFlagCard);\n                     return true;\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NjYzMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459796631", "bodyText": "Might want to extract this to a method - can significantly cut down on code as you can return without a break", "author": "david-allison-1", "createdAt": "2020-07-24T00:18:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3450,6 +3481,87 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    /*\n+     * see 02-strings.xml\n+     * Show Error code when mark card or flag card unsupported\n+     * 1 - mark card\n+     * 2 - flag card\n+     *\n+     * show developer contact if js api used in card is deprecated\n+     */\n+    private void showDeveloperContact(int errorCode) {\n+        String errorMsg = \"\";\n+        switch (errorCode) {", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzODc1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460438755", "bodyText": "No need - was removed in a later PR", "author": "david-allison-1", "createdAt": "2020-07-25T19:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NjYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3481,6 +3489,14 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n+    // Check if value null\n+    private boolean isAnkiApiNull(String api) {\n+        if (mJsApiListMap.get(api) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /*\n      * see 02-strings.xml\n      * Show Error code when mark card or flag card unsupported\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njc3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459796772", "bodyText": "These throw:\n     * @throws IllegalArgumentException if the input string is {@code NULL} or empty\n     * @throws ParseException when invalid version string is provided\n     * @throws UnexpectedCharacterException is a special case of {@code ParseException}\n\nDo we want to handle any of these explicitly?", "author": "david-allison-1", "createdAt": "2020-07-24T00:18:55Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3450,6 +3481,87 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    /*\n+     * see 02-strings.xml\n+     * Show Error code when mark card or flag card unsupported\n+     * 1 - mark card\n+     * 2 - flag card\n+     *\n+     * show developer contact if js api used in card is deprecated\n+     */\n+    private void showDeveloperContact(int errorCode) {\n+        String errorMsg = \"\";\n+        switch (errorCode) {\n+            case 1:\n+                errorMsg = getString(R.string.anki_js_not_implemented);\n+                break;\n+            case 2:\n+                errorMsg = getString(R.string.anki_js_mark_card_not_supported);\n+                break;\n+            case 3:\n+                errorMsg = getString(R.string.anki_js_flag_card_not_supported);\n+                break;\n+            default:\n+                errorMsg = getString(R.string.anki_js_unknown_error);\n+                break;\n+        }\n+\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact, errorMsg);\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /**\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     */\n+    private boolean requireApiVersion(String apiVer, String apiDevContact) {\n+        try {\n+\n+            if (TextUtils.isEmpty(apiDevContact)) {\n+                return false;\n+            }\n+\n+            Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Njc3OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460396779", "bodyText": "Should it also be put in try catch block?\nBecause sCurrentJsApiVersion and apiVer is set to \"0.0.1\" and \"\".", "author": "infinyte7", "createdAt": "2020-07-25T11:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5NzEyMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460397122", "bodyText": "This part need help.", "author": "infinyte7", "createdAt": "2020-07-25T11:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzODYwOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460438609", "bodyText": "Where we set the value we can guarantee it's not going to crash. We need to ensure we know what we're doing if the user supplies us with invalid values", "author": "david-allison-1", "createdAt": "2020-07-25T19:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxOTUxMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460519513", "bodyText": "In this case the code is wrapped in try catch block twice. So there is still need to check for that?\nAbstractFlashcardViewer.java#L3632\nAbstractFlashcardViewer.java#L3527", "author": "infinyte7", "createdAt": "2020-07-26T12:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3481,6 +3489,14 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         }\n     }\n \n+    // Check if value null\n+    private boolean isAnkiApiNull(String api) {\n+        if (mJsApiListMap.get(api) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /*\n      * see 02-strings.xml\n      * Show Error code when mark card or flag card unsupported\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzA5MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459797091", "bodyText": "Might want to consider extracting the magic constants", "author": "david-allison-1", "createdAt": "2020-07-24T00:20:10Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3189,11 +3203,28 @@ private boolean filterUrl(String url) {\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                executeCommand(COMMAND_MARK);\n+                if (mJsApiListMap.get(\"markCard\") == null) {\n+                    showDeveloperContact(1);\n+                    return true;\n+                } else if (mJsApiListMap.get(\"markCard\")) {", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3203,25 +3211,25 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n             }\n             // mark card using javascript\n             if (url.startsWith(\"signal:mark_current_card\")) {\n-                if (mJsApiListMap.get(\"markCard\") == null) {\n-                    showDeveloperContact(1);\n+                if (isAnkiApiNull(\"markCard\")) {\n+                    showDeveloperContact(ankiJsErrorCodeDefault);\n                     return true;\n                 } else if (mJsApiListMap.get(\"markCard\")) {\n                     executeCommand(COMMAND_MARK);\n                 } else {\n                     // see 02-string.xml\n-                    showDeveloperContact(2);\n+                    showDeveloperContact(ankiJsErrorCodeMarkCard);\n                 }\n                 return true;\n             }\n             // flag card (blue, green, orange, red) using javascript from AnkiDroid webview\n             if (url.startsWith(\"signal:flag_\")) {\n-                if (mJsApiListMap.get(\"toggleFlag\") == null) {\n-                    showDeveloperContact(1);\n+                if (isAnkiApiNull(\"toggleFlag\")) {\n+                    showDeveloperContact(ankiJsErrorCodeDefault);\n                     return true;\n                 } else if (!mJsApiListMap.get(\"toggleFlag\")) {\n                     // see 02-string.xml\n-                    showDeveloperContact(3);\n+                    showDeveloperContact(ankiJsErrorCodeFlagCard);\n                     return true;\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzMwMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459797303", "bodyText": "This uses the previous values if an exception is thrown", "author": "david-allison-1", "createdAt": "2020-07-24T00:21:02Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3498,6 +3610,52 @@ protected void showTagsDialog() {\n  */\n     public class JavaScriptFunction {\n \n+        private final Gson sGson = new Gson();\n+        // list of api that can be accessed\n+        private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n+\n+        // api disabled when valid api version not provided\n+        private void disableJsApi() {\n+            for (int i = 0; i < sApiList.length; i++) {\n+                mJsApiListMap.put(sApiList[i], false);\n+            }\n+        }\n+\n+        // if supplied api version match then enable api\n+        private void enableJsApi() {\n+            for (int i = 0; i < sApiList.length; i++) {\n+                mJsApiListMap.put(sApiList[i], true);\n+            }\n+        }\n+\n+        @JavascriptInterface\n+        public String init(String jsonData) {\n+            JSONObject data;\n+            try {\n+                data = new JSONObject(jsonData);\n+                if (!(data == JSONObject.NULL)) {\n+                    mCardSuppliedApiVersion = data.optString(\"version\", \"\");\n+                    mCardSuppliedDeveloperContact  = data.optString(\"developer\", \"\");\n+                }\n+\n+            } catch (JSONException j) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.invalid_json_data, j.getLocalizedMessage()), false);\n+            }\n+\n+            String apiStatusJson = \"\";\n+\n+            if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUyMDAwNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460520007", "bodyText": "Yes, but also show error that invalid data provided.", "author": "infinyte7", "createdAt": "2020-07-26T12:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3631,28 +3633,25 @@ see card.js for available functions\n         @JavascriptInterface\n         public String init(String jsonData) {\n             JSONObject data;\n+            String apiStatusJson = \"\";\n+\n             try {\n                 data = new JSONObject(jsonData);\n                 if (!(data == JSONObject.NULL)) {\n                     mCardSuppliedApiVersion = data.optString(\"version\", \"\");\n                     mCardSuppliedDeveloperContact  = data.optString(\"developer\", \"\");\n+\n+                    if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {\n+                        enableJsApi();\n+                    } else {\n+                        disableJsApi();\n+                    }\n+                    apiStatusJson = sGson.toJson(mJsApiListMap);\n                 }\n \n             } catch (JSONException j) {\n                 UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.invalid_json_data, j.getLocalizedMessage()), false);\n             }\n-\n-            String apiStatusJson = \"\";\n-\n-            if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {\n-                enableJsApi();\n-                apiStatusJson = sGson.toJson(mJsApiListMap);\n-            } else {\n-                disableJsApi();\n-                apiStatusJson = sGson.toJson(mJsApiListMap);\n-                return String.valueOf(apiStatusJson);\n-            }\n-\n             return String.valueOf(apiStatusJson);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzcxOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r459797718", "bodyText": "Extract the following outside both branches of the if, they're identical on both sides\napiStatusJson = sGson.toJson(mJsApiListMap);\nreturn String.valueOf(apiStatusJson);", "author": "david-allison-1", "createdAt": "2020-07-24T00:22:57Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3498,6 +3610,52 @@ protected void showTagsDialog() {\n  */\n     public class JavaScriptFunction {\n \n+        private final Gson sGson = new Gson();\n+        // list of api that can be accessed\n+        private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n+\n+        // api disabled when valid api version not provided\n+        private void disableJsApi() {\n+            for (int i = 0; i < sApiList.length; i++) {\n+                mJsApiListMap.put(sApiList[i], false);\n+            }\n+        }\n+\n+        // if supplied api version match then enable api\n+        private void enableJsApi() {\n+            for (int i = 0; i < sApiList.length; i++) {\n+                mJsApiListMap.put(sApiList[i], true);\n+            }\n+        }\n+\n+        @JavascriptInterface\n+        public String init(String jsonData) {\n+            JSONObject data;\n+            try {\n+                data = new JSONObject(jsonData);\n+                if (!(data == JSONObject.NULL)) {\n+                    mCardSuppliedApiVersion = data.optString(\"version\", \"\");\n+                    mCardSuppliedDeveloperContact  = data.optString(\"developer\", \"\");\n+                }\n+\n+            } catch (JSONException j) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.invalid_json_data, j.getLocalizedMessage()), false);\n+            }\n+\n+            String apiStatusJson = \"\";\n+\n+            if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {\n+                enableJsApi();\n+                apiStatusJson = sGson.toJson(mJsApiListMap);\n+            } else {\n+                disableJsApi();\n+                apiStatusJson = sGson.toJson(mJsApiListMap);\n+                return String.valueOf(apiStatusJson);\n+            }", "originalCommit": "80079d9b660589e4d86ffed39e5a958390522f47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2f068a48b749c660752f364e50b6748c3e36d33", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 2241373a80..17ca2583a8 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3631,28 +3633,25 @@ see card.js for available functions\n         @JavascriptInterface\n         public String init(String jsonData) {\n             JSONObject data;\n+            String apiStatusJson = \"\";\n+\n             try {\n                 data = new JSONObject(jsonData);\n                 if (!(data == JSONObject.NULL)) {\n                     mCardSuppliedApiVersion = data.optString(\"version\", \"\");\n                     mCardSuppliedDeveloperContact  = data.optString(\"developer\", \"\");\n+\n+                    if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {\n+                        enableJsApi();\n+                    } else {\n+                        disableJsApi();\n+                    }\n+                    apiStatusJson = sGson.toJson(mJsApiListMap);\n                 }\n \n             } catch (JSONException j) {\n                 UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.invalid_json_data, j.getLocalizedMessage()), false);\n             }\n-\n-            String apiStatusJson = \"\";\n-\n-            if (requireApiVersion(mCardSuppliedApiVersion, mCardSuppliedDeveloperContact)) {\n-                enableJsApi();\n-                apiStatusJson = sGson.toJson(mJsApiListMap);\n-            } else {\n-                disableJsApi();\n-                apiStatusJson = sGson.toJson(mJsApiListMap);\n-                return String.valueOf(apiStatusJson);\n-            }\n-\n             return String.valueOf(apiStatusJson);\n         }\n \n"}}, {"oid": "e2f068a48b749c660752f364e50b6748c3e36d33", "url": "https://github.com/ankidroid/Anki-Android/commit/e2f068a48b749c660752f364e50b6748c3e36d33", "message": "Update JS API", "committedDate": "2020-07-25T11:21:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNzkyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r460437927", "bodyText": "return mJsApiListMap.get(api) == null;", "author": "david-allison-1", "createdAt": "2020-07-25T19:46:19Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3481,6 +3489,14 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // Check if value null\n+    private boolean isAnkiApiNull(String api) {\n+        if (mJsApiListMap.get(api) == null) {", "originalCommit": "e2f068a48b749c660752f364e50b6748c3e36d33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "401cddc3e3b263d56fdc356270be221056016516", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 17ca2583a8..402f6cbfb2 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3491,10 +3488,7 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n \n     // Check if value null\n     private boolean isAnkiApiNull(String api) {\n-        if (mJsApiListMap.get(api) == null) {\n-            return true;\n-        }\n-        return false;\n+        return mJsApiListMap.get(api) == null;\n     }\n \n     /*\n"}}, {"oid": "401cddc3e3b263d56fdc356270be221056016516", "url": "https://github.com/ankidroid/Anki-Android/commit/401cddc3e3b263d56fdc356270be221056016516", "message": "Update js api", "committedDate": "2020-07-26T12:04:34Z", "type": "commit"}, {"oid": "1399b90b264b8259224d0490851a6d60c6ccab0c", "url": "https://github.com/ankidroid/Anki-Android/commit/1399b90b264b8259224d0490851a6d60c6ccab0c", "message": "Merge branch 'master' of https://github.com/ankidroid/Anki-Android into js-api-version", "committedDate": "2020-08-04T20:49:08Z", "type": "commit"}, {"oid": "7204912660e6d4982e6fb10b5aedd61e615ab8f1", "url": "https://github.com/ankidroid/Anki-Android/commit/7204912660e6d4982e6fb10b5aedd61e615ab8f1", "message": "Update 02-strings.xml", "committedDate": "2020-08-04T20:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNjg0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465326846", "bodyText": "This isn't reset between cards.", "author": "david-allison-1", "createdAt": "2020-08-04T20:59:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -193,6 +198,20 @@\n \n     // ETA\n     private int eta;\n+    // JavaScript Versioning\n+    protected String mCardSuppliedApiVersion = \"\";\n+    protected String mCardSuppliedDeveloperContact  = \"\";\n+\n+    private static final String sCurrentJsApiVersion = \"0.0.1\";\n+    private static final String sMinimumJsApiVersion = \"0.0.1\";\n+\n+    // JS API ERROR CODE\n+    private static final int ankiJsErrorCodeDefault = 0;\n+    private static final int ankiJsErrorCodeMarkCard = 1;\n+    private static final int ankiJsErrorCodeFlagCard = 2;\n+\n+    // JS api list enable/disable status\n+    private HashMap<String, Boolean> mJsApiListMap = new HashMap<String, Boolean>();", "originalCommit": "1399b90b264b8259224d0490851a6d60c6ccab0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "793063e81af21e3d07c217e69962b0b206f8c9d6", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 77c749f0e2..b70d40fc28 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -198,9 +198,9 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n \n     // ETA\n     private int eta;\n-    // JavaScript Versioning\n-    protected String mCardSuppliedApiVersion = \"\";\n-    protected String mCardSuppliedDeveloperContact  = \"\";\n+\n+    // js api developer contact\n+    private String mCardSuppliedDeveloperContact  = \"\";\n \n     private static final String sCurrentJsApiVersion = \"0.0.1\";\n     private static final String sMinimumJsApiVersion = \"0.0.1\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNzM4MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465327381", "bodyText": "I think this can be a local variable", "author": "david-allison-1", "createdAt": "2020-08-04T21:00:14Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -193,6 +198,20 @@\n \n     // ETA\n     private int eta;\n+    // JavaScript Versioning\n+    protected String mCardSuppliedApiVersion = \"\";", "originalCommit": "1399b90b264b8259224d0490851a6d60c6ccab0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "793063e81af21e3d07c217e69962b0b206f8c9d6", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 77c749f0e2..b70d40fc28 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -198,9 +198,9 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n \n     // ETA\n     private int eta;\n-    // JavaScript Versioning\n-    protected String mCardSuppliedApiVersion = \"\";\n-    protected String mCardSuppliedDeveloperContact  = \"\";\n+\n+    // js api developer contact\n+    private String mCardSuppliedDeveloperContact  = \"\";\n \n     private static final String sCurrentJsApiVersion = \"0.0.1\";\n     private static final String sMinimumJsApiVersion = \"0.0.1\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNzQ5NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465327495", "bodyText": "This isn't reset when a new card is shown", "author": "david-allison-1", "createdAt": "2020-08-04T21:00:28Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -193,6 +198,20 @@\n \n     // ETA\n     private int eta;\n+    // JavaScript Versioning\n+    protected String mCardSuppliedApiVersion = \"\";\n+    protected String mCardSuppliedDeveloperContact  = \"\";", "originalCommit": "1399b90b264b8259224d0490851a6d60c6ccab0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "793063e81af21e3d07c217e69962b0b206f8c9d6", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 77c749f0e2..b70d40fc28 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -198,9 +198,9 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n \n     // ETA\n     private int eta;\n-    // JavaScript Versioning\n-    protected String mCardSuppliedApiVersion = \"\";\n-    protected String mCardSuppliedDeveloperContact  = \"\";\n+\n+    // js api developer contact\n+    private String mCardSuppliedDeveloperContact  = \"\";\n \n     private static final String sCurrentJsApiVersion = \"0.0.1\";\n     private static final String sMinimumJsApiVersion = \"0.0.1\";\n"}}, {"oid": "793063e81af21e3d07c217e69962b0b206f8c9d6", "url": "https://github.com/ankidroid/Anki-Android/commit/793063e81af21e3d07c217e69962b0b206f8c9d6", "message": "Update AbstractFlashcardViewer.java", "committedDate": "2020-08-04T21:18:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4NDkwMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465484902", "bodyText": "The problem is that init isn't guaranteed to be called by the next card, could this also be called on displayCardQuestion (or a more appropriate hook)", "author": "david-allison-1", "createdAt": "2020-08-05T05:39:57Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3665,6 +3670,9 @@ private void enableJsApi() {\n \n         @JavascriptInterface\n         public String init(String jsonData) {\n+            // initialize api\n+            initJsApi();", "originalCommit": "793063e81af21e3d07c217e69962b0b206f8c9d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NTkwNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465565905", "bodyText": "Updated,\ninit() in displayCardQuestion will be called even it not needed.\nShould one option added to reviewer to toggle api init?", "author": "infinyte7", "createdAt": "2020-08-05T08:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4NDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2MTk2MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r465961960", "bodyText": "I'm not sure that I understand, but what's currently there looks good from an implementation perspective.", "author": "david-allison-1", "createdAt": "2020-08-05T19:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4NDkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c055f95d3facd46b778b423e08dd000cb7eb56bc", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex b70d40fc28..144c17fe1c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3670,9 +3673,6 @@ see card.js for available functions\n \n         @JavascriptInterface\n         public String init(String jsonData) {\n-            // initialize api\n-            initJsApi();\n-\n             JSONObject data;\n             String apiStatusJson = \"\";\n \n"}}, {"oid": "c055f95d3facd46b778b423e08dd000cb7eb56bc", "url": "https://github.com/ankidroid/Anki-Android/commit/c055f95d3facd46b778b423e08dd000cb7eb56bc", "message": "init js api", "committedDate": "2020-08-05T08:35:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NzM0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r466397346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      Timber.i(e, \"requireApiVersion::exception\");\n          \n          \n            \n                      Timber.w(e, \"requireApiVersion::exception\");", "author": "david-allison-1", "createdAt": "2020-08-06T13:06:17Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3489,6 +3529,78 @@ void handleUrlFromJavascript(String url) {\n         }\n     }\n \n+    // Check if value null\n+    private boolean isAnkiApiNull(String api) {\n+        return mJsApiListMap.get(api) == null;\n+    }\n+\n+    /*\n+     * see 02-strings.xml\n+     * Show Error code when mark card or flag card unsupported\n+     * 1 - mark card\n+     * 2 - flag card\n+     *\n+     * show developer contact if js api used in card is deprecated\n+     */\n+    private void showDeveloperContact(int errorCode) {\n+        String errorMsg = getString(R.string.anki_js_error_code, errorCode);\n+\n+        View parentLayout = findViewById(android.R.id.content);\n+        String snackbarMsg;\n+        snackbarMsg = getString(R.string.api_version_developer_contact, mCardSuppliedDeveloperContact, errorMsg);\n+\n+        Snackbar snackbar = Snackbar.make(parentLayout, snackbarMsg, Snackbar.LENGTH_LONG);\n+        View snackbarView = snackbar.getView();\n+        TextView snackTextView = snackbarView.findViewById(com.google.android.material.R.id.snackbar_text);\n+        snackTextView.setTextColor(Color.WHITE);\n+        snackTextView.setMaxLines(3);\n+\n+        snackbar.setActionTextColor(Color.MAGENTA)\n+                .setAction(getString(R.string.reviewer_invalid_api_version_visit_documentation), view -> {\n+                    openUrl(Uri.parse(\"https://github.com/ankidroid/Anki-Android/wiki\"));\n+                });\n+\n+        snackbar.show();\n+    }\n+\n+    /**\n+     * Supplied api version must be equal to current api version to call mark card, toggle flag functions etc.\n+     */\n+    private boolean requireApiVersion(String apiVer, String apiDevContact) {\n+        try {\n+\n+            if (TextUtils.isEmpty(apiDevContact)) {\n+                return false;\n+            }\n+\n+            Version mVersionCurrent = Version.valueOf(sCurrentJsApiVersion);\n+            Version mVersionSupplied = Version.valueOf(apiVer);\n+\n+            /*\n+            * if api major version equals to supplied major version then return true and also check for minor version and patch version\n+            * show toast for update and contact developer if need updates\n+            * otherwise return false\n+            */\n+            if (mVersionSupplied.equals(mVersionCurrent)) {\n+                return true;\n+            } else if (mVersionSupplied.lessThan(mVersionCurrent)) {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.update_js_api_version, mCardSuppliedDeveloperContact), false);\n+\n+                if (mVersionSupplied.greaterThanOrEqualTo(Version.valueOf(sMinimumJsApiVersion))) {\n+                    return true;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, getString(R.string.valid_js_api_version, mCardSuppliedDeveloperContact), false);\n+                return false;\n+            }\n+        } catch (Exception e) {\n+          Timber.i(e, \"requireApiVersion::exception\");", "originalCommit": "c055f95d3facd46b778b423e08dd000cb7eb56bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 144c17fe1c..26097b8d5d 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3596,7 +3596,7 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n                 return false;\n             }\n         } catch (Exception e) {\n-          Timber.i(e, \"requireApiVersion::exception\");\n+          Timber.w(e, \"requireApiVersion::exception\");\n         }\n         return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NzYyNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r466397626", "bodyText": "Would be better at the top of the class", "author": "david-allison-1", "createdAt": "2020-08-06T13:06:45Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3531,12 +3643,58 @@ protected void showTagsDialog() {\n         showDialogFragment(dialog);\n     }\n \n+    // list of api that can be accessed\n+    private final String[] sApiList = {\"toggleFlag\", \"markCard\"};", "originalCommit": "c055f95d3facd46b778b423e08dd000cb7eb56bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 144c17fe1c..26097b8d5d 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3643,9 +3643,6 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         showDialogFragment(dialog);\n     }\n \n-    // list of api that can be accessed\n-    private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n-\n     // init or reset api list\n     private void jsApiInit() {\n         mCardSuppliedApiVersion = \"\";\n"}}, {"oid": "6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "url": "https://github.com/ankidroid/Anki-Android/commit/6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "message": "Updated", "committedDate": "2020-08-06T19:39:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NzQyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r467097427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n          \n          \n            \n                private final String[] mApiList = {\"toggleFlag\", \"markCard\"};\n          \n      \n    \n    \n  \n\nThis isn't static and though Hungarian Notation isn't great we are at consistent at the moment, should be member variable (and then all usage will need change to match)", "author": "mikehardy", "createdAt": "2020-08-07T15:03:21Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3531,12 +3643,58 @@ protected void showTagsDialog() {\n         showDialogFragment(dialog);\n     }\n \n+    // init or reset api list\n+    private void jsApiInit() {\n+        mCardSuppliedApiVersion = \"\";\n+        mCardSuppliedDeveloperContact = \"\";\n+\n+        for (int i = 0; i < sApiList.length; i++) {\n+            mJsApiListMap.put(sApiList[i], false);\n+        }\n+    }\n+\n  /*\n  Javascript Interface class for calling Java function from AnkiDroid WebView\n see card.js for available functions\n  */\n+    // list of api that can be accessed\n+    private final String[] sApiList = {\"toggleFlag\", \"markCard\"};", "originalCommit": "6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0ff6c31679b5a1b7aff68094ee2ded596735f5e", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 26097b8d5d..1344af84cb 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3648,8 +3648,8 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         mCardSuppliedApiVersion = \"\";\n         mCardSuppliedDeveloperContact = \"\";\n \n-        for (int i = 0; i < sApiList.length; i++) {\n-            mJsApiListMap.put(sApiList[i], false);\n+        for (int i = 0; i < mApiList.length; i++) {\n+            mJsApiListMap.put(mApiList[i], false);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NzY4NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r467097684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final Gson sGson = new Gson();\n          \n          \n            \n                    private final Gson mGson = new Gson();\n          \n      \n    \n    \n  \n\nSame notation comment as above - should be marked as member variable and usage altered to match", "author": "mikehardy", "createdAt": "2020-08-07T15:03:48Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3531,12 +3643,58 @@ protected void showTagsDialog() {\n         showDialogFragment(dialog);\n     }\n \n+    // init or reset api list\n+    private void jsApiInit() {\n+        mCardSuppliedApiVersion = \"\";\n+        mCardSuppliedDeveloperContact = \"\";\n+\n+        for (int i = 0; i < sApiList.length; i++) {\n+            mJsApiListMap.put(sApiList[i], false);\n+        }\n+    }\n+\n  /*\n  Javascript Interface class for calling Java function from AnkiDroid WebView\n see card.js for available functions\n  */\n+    // list of api that can be accessed\n+    private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n+\n     public class JavaScriptFunction {\n \n+        private final Gson sGson = new Gson();", "originalCommit": "6a2b548f28b32dc57337e8d997ac5db7fe7c3853", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0ff6c31679b5a1b7aff68094ee2ded596735f5e", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex 26097b8d5d..1344af84cb 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3648,8 +3648,8 @@ public abstract class AbstractFlashcardViewer extends NavigationDrawerActivity i\n         mCardSuppliedApiVersion = \"\";\n         mCardSuppliedDeveloperContact = \"\";\n \n-        for (int i = 0; i < sApiList.length; i++) {\n-            mJsApiListMap.put(sApiList[i], false);\n+        for (int i = 0; i < mApiList.length; i++) {\n+            mJsApiListMap.put(mApiList[i], false);\n         }\n     }\n \n"}}, {"oid": "c0ff6c31679b5a1b7aff68094ee2ded596735f5e", "url": "https://github.com/ankidroid/Anki-Android/commit/c0ff6c31679b5a1b7aff68094ee2ded596735f5e", "message": "Updated", "committedDate": "2020-08-07T16:57:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjA0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r467162046", "bodyText": "Wouldn't be a problem with making this static", "author": "david-allison-1", "createdAt": "2020-08-07T17:04:09Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3658,16 +3658,16 @@ private void jsApiInit() {\n see card.js for available functions\n  */\n     // list of api that can be accessed\n-    private final String[] sApiList = {\"toggleFlag\", \"markCard\"};\n+    private final String[] mApiList = {\"toggleFlag\", \"markCard\"};\n \n     public class JavaScriptFunction {\n \n-        private final Gson sGson = new Gson();\n+        private final Gson mGson = new Gson();", "originalCommit": "c0ff6c31679b5a1b7aff68094ee2ded596735f5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDU5MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r467164590", "bodyText": "Android Studio is suggesting to make JavaScriptFunction static.", "author": "infinyte7", "createdAt": "2020-08-07T17:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2ODA3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6521#discussion_r467168076", "bodyText": "If it works either way (static or member) that's fine, so long as it's consistent one way or another.\nI prefer non-static as it's easier to test it if we need/want to later to inspect something. Static makes\ntesting hard in my experience, so I'll merge it like this", "author": "mikehardy", "createdAt": "2020-08-07T17:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjA0Ng=="}], "type": "inlineReview", "revised_code": null}]}