{"pr_number": 6706, "pr_title": "Undo class", "pr_createdAt": "2020-07-21T04:10:22Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6706", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458402043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DismissType getDt() {\n          \n          \n            \n                public DismissType getDismissType() {", "author": "david-allison-1", "createdAt": "2020-07-21T21:34:53Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java", "diffHunk": "@@ -0,0 +1,314 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.CardUtils;\n+import com.ichi2.anki.R;\n+import com.ichi2.libanki.Collection.DismissType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.Collection.DismissType.*;\n+\n+public abstract class Undo {\n+    private final DismissType mDt;\n+\n+    public Undo(DismissType dt) {\n+        mDt = dt;\n+    }\n+\n+    public String name(Resources res) {\n+        return res.getString(mDt.undoNameId);\n+    }\n+\n+    public DismissType getDt() {", "originalCommit": "6f2f5d41b4f22ef5e3ad6003aa9193647bb410f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTQzNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458459437", "bodyText": "Done", "author": "Arthur-Milchior", "createdAt": "2020-07-22T00:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nsimilarity index 77%\nrename from AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\nrename to AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nindex 8fe9071d3..6f2417e5a 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\n\n@@ -1,10 +1,8 @@\n package com.ichi2.libanki;\n \n import android.content.res.Resources;\n-import android.util.Pair;\n \n import com.ichi2.anki.CardUtils;\n-import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection.DismissType;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjc0Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458402742", "bodyText": "It's a little unusual to have an undo without a \"do\", as having the \"undo\" close to the \"do\" means that there's additional mental context when changes to the \"do\" are made.\nI'm not requesting a change now, but would this direction be possible in the future?", "author": "david-allison-1", "createdAt": "2020-07-21T21:36:17Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java", "diffHunk": "@@ -0,0 +1,314 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.CardUtils;\n+import com.ichi2.anki.R;\n+import com.ichi2.libanki.Collection.DismissType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.Collection.DismissType.*;\n+\n+public abstract class Undo {", "originalCommit": "6f2f5d41b4f22ef5e3ad6003aa9193647bb410f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDkwMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458454903", "bodyText": "I thought about it, but I don't really see how to do it. The trouble is that usually, an \"undo\" may cancel multiple \"undo\". E.g. undoing some burying can cancel the burying of a note from the reviewer. It can also undo the burying of multiple selection done in the card browser.", "author": "Arthur-Milchior", "createdAt": "2020-07-21T23:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nsimilarity index 77%\nrename from AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\nrename to AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nindex 8fe9071d3..6f2417e5a 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\n\n@@ -1,10 +1,8 @@\n package com.ichi2.libanki;\n \n import android.content.res.Resources;\n-import android.util.Pair;\n \n import com.ichi2.anki.CardUtils;\n-import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection.DismissType;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU3Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458403577", "bodyText": "Does this need to be copied? Ditto for the other instances", "author": "david-allison-1", "createdAt": "2020-07-21T21:38:06Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java", "diffHunk": "@@ -0,0 +1,314 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.CardUtils;\n+import com.ichi2.anki.R;\n+import com.ichi2.libanki.Collection.DismissType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.Collection.DismissType.*;\n+\n+public abstract class Undo {\n+    private final DismissType mDt;\n+\n+    public Undo(DismissType dt) {\n+        mDt = dt;\n+    }\n+\n+    public String name(Resources res) {\n+        return res.getString(mDt.undoNameId);\n+    }\n+\n+    public DismissType getDt() {\n+        return mDt;\n+    }\n+\n+    public abstract long undo(Collection col);\n+\n+    public static class UndoReview extends Undo {\n+        private final Card mCard;\n+        private final boolean mWasLeech;\n+        public UndoReview(Card card, boolean wasLeach) {\n+            super(REVIEW);\n+            mCard = card.clone();\n+            mWasLeech = wasLeach;\n+        }\n+\n+        public long undo(Collection col) {\n+            // remove leech tag if it didn't have it before\n+            if (!mWasLeech && mCard.note().hasTag(\"leech\")) {\n+                mCard.note().delTag(\"leech\");\n+                mCard.note().flush();\n+            }\n+            Timber.i(\"Undo Review of card %d, leech: %b\", mCard.getId(), mWasLeech);\n+            // write old data\n+            mCard.flush(false);\n+            // and delete revlog entry\n+            long last = col.getDb().queryLongScalar(\"SELECT id FROM revlog WHERE cid = ? ORDER BY id DESC LIMIT 1\", new Object [] {mCard.getId()});\n+            col.getDb().execute(\"DELETE FROM revlog WHERE id = \" + last);\n+            // restore any siblings\n+            col.getDb().execute(\"update cards set queue=type,mod=?,usn=? where queue=\" + Consts.QUEUE_TYPE_SIBLING_BURIED + \" and nid=?\",\n+                        new Object[]{Utils.intTime(), col.usn(), mCard.getNid()});\n+            // and finally, update daily count\n+            @Consts.CARD_QUEUE int n = mCard.getQueue() == Consts.QUEUE_TYPE_DAY_LEARN_RELEARN ? Consts.QUEUE_TYPE_LRN : mCard.getQueue();\n+            String type = (new String[]{\"new\", \"lrn\", \"rev\"})[n];\n+            col.getSched()._updateStats(mCard, type, -1);\n+            col.getSched().setReps(col.getSched().getReps() - 1);\n+            return mCard.getId();\n+        }\n+    }\n+\n+    public static class UndoBuryCard extends Undo {\n+        private final List<Card> mCards;\n+        private final long mCid;\n+        public UndoBuryCard(List<Card> cards, long cid) {\n+            super(BURY_CARD);\n+            mCards = cards;", "originalCommit": "6f2f5d41b4f22ef5e3ad6003aa9193647bb410f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzU1MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458453551", "bodyText": "What is \"this\" ? the list of cards ? The card of the list ?\nThe list was not copied before so I assumed it was not needed here, I tried to stay close to previous code.\nThe reason why some card are cloned and the list does not need to be cloned/copied is that the card object may potentially evolve, while the list may not. Indeed, the list is is created when UndoBuryCard is called, and the calling code does not even have access to the code anyway.\nI guess it may be relevant to request that caller does not change the value sent to the Undoable action, remove the cloning from the Undo classes and move it to their callers, that would make thing more consistent", "author": "Arthur-Milchior", "createdAt": "2020-07-21T23:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODI1Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458458256", "bodyText": "\"This\" meaning either the list or the cards in the list.\nPresumably it wasn't cloned previously, so it should be fine, but it'd be unintuitive if the collection was mutated after the class was created.", "author": "david-allison-1", "createdAt": "2020-07-22T00:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1OTczNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458459736", "bodyText": "I added a comment to require that elements sent to constructor are never mutated later. That's usually the case, and the cases where the element may be mutated are the exceptions right now. Cloning everything would be uselessly costly.\nOf course, that assumes the next programmer will read comments...", "author": "Arthur-Milchior", "createdAt": "2020-07-22T00:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczOTM2OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458739369", "bodyText": "Constants used.", "author": "Arthur-Milchior", "createdAt": "2020-07-22T12:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nsimilarity index 77%\nrename from AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\nrename to AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nindex 8fe9071d3..6f2417e5a 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\n\n@@ -1,10 +1,8 @@\n package com.ichi2.libanki;\n \n import android.content.res.Resources;\n-import android.util.Pair;\n \n import com.ichi2.anki.CardUtils;\n-import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection.DismissType;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzgyMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458403821", "bodyText": "Maybe \"Undoable\"", "author": "david-allison-1", "createdAt": "2020-07-21T21:38:40Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java", "diffHunk": "@@ -0,0 +1,314 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.CardUtils;\n+import com.ichi2.anki.R;\n+import com.ichi2.libanki.Collection.DismissType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.Collection.DismissType.*;\n+\n+public abstract class Undo {", "originalCommit": "6f2f5d41b4f22ef5e3ad6003aa9193647bb410f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MTA1OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458451058", "bodyText": "Ok.", "author": "Arthur-Milchior", "createdAt": "2020-07-21T23:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMzgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nsimilarity index 77%\nrename from AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\nrename to AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nindex 8fe9071d3..6f2417e5a 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\n\n@@ -1,10 +1,8 @@\n package com.ichi2.libanki;\n \n import android.content.res.Resources;\n-import android.util.Pair;\n \n import com.ichi2.anki.CardUtils;\n-import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection.DismissType;\n \n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDQ1Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458404453", "bodyText": "Could we change the -1 to a const/enum if we're doing a lot of work here", "author": "david-allison-1", "createdAt": "2020-07-21T21:39:59Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java", "diffHunk": "@@ -0,0 +1,314 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.CardUtils;\n+import com.ichi2.anki.R;\n+import com.ichi2.libanki.Collection.DismissType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.Collection.DismissType.*;\n+\n+public abstract class Undo {\n+    private final DismissType mDt;\n+\n+    public Undo(DismissType dt) {\n+        mDt = dt;\n+    }\n+\n+    public String name(Resources res) {\n+        return res.getString(mDt.undoNameId);\n+    }\n+\n+    public DismissType getDt() {\n+        return mDt;\n+    }\n+\n+    public abstract long undo(Collection col);\n+\n+    public static class UndoReview extends Undo {\n+        private final Card mCard;\n+        private final boolean mWasLeech;\n+        public UndoReview(Card card, boolean wasLeach) {\n+            super(REVIEW);\n+            mCard = card.clone();\n+            mWasLeech = wasLeach;\n+        }\n+\n+        public long undo(Collection col) {\n+            // remove leech tag if it didn't have it before\n+            if (!mWasLeech && mCard.note().hasTag(\"leech\")) {\n+                mCard.note().delTag(\"leech\");\n+                mCard.note().flush();\n+            }\n+            Timber.i(\"Undo Review of card %d, leech: %b\", mCard.getId(), mWasLeech);\n+            // write old data\n+            mCard.flush(false);\n+            // and delete revlog entry\n+            long last = col.getDb().queryLongScalar(\"SELECT id FROM revlog WHERE cid = ? ORDER BY id DESC LIMIT 1\", new Object [] {mCard.getId()});\n+            col.getDb().execute(\"DELETE FROM revlog WHERE id = \" + last);\n+            // restore any siblings\n+            col.getDb().execute(\"update cards set queue=type,mod=?,usn=? where queue=\" + Consts.QUEUE_TYPE_SIBLING_BURIED + \" and nid=?\",\n+                        new Object[]{Utils.intTime(), col.usn(), mCard.getNid()});\n+            // and finally, update daily count\n+            @Consts.CARD_QUEUE int n = mCard.getQueue() == Consts.QUEUE_TYPE_DAY_LEARN_RELEARN ? Consts.QUEUE_TYPE_LRN : mCard.getQueue();\n+            String type = (new String[]{\"new\", \"lrn\", \"rev\"})[n];\n+            col.getSched()._updateStats(mCard, type, -1);\n+            col.getSched().setReps(col.getSched().getReps() - 1);\n+            return mCard.getId();\n+        }\n+    }\n+\n+    public static class UndoBuryCard extends Undo {\n+        private final List<Card> mCards;\n+        private final long mCid;\n+        public UndoBuryCard(List<Card> cards, long cid) {\n+            super(BURY_CARD);\n+            mCards = cards;\n+            mCid = cid;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Bury Card\");\n+            for (Card cc : mCards) {\n+                cc.flush(false);\n+            }\n+            return mCid;\n+        }\n+    }\n+\n+    public static class UndoBuryNote extends Undo {\n+        private final long mCid;\n+        private final List<Card> mCards;\n+        public UndoBuryNote(List<Card> cards,  long cid) {\n+            super(BURY_NOTE);\n+            mCid = cid;\n+            mCards = cards;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"UNDO: Burying notes\");\n+            for (Card cc : mCards) {\n+                cc.flush(false);\n+            }\n+            return mCid;\n+        }\n+    }\n+\n+    public static class UndoSuspendCard extends Undo {\n+        private Card mSuspendedCard;\n+        public UndoSuspendCard(Card card) {\n+            super(SUSPEND_CARD);\n+            mSuspendedCard = card.clone();\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"UNDO: Suspend Card %d\", mSuspendedCard.getId());\n+            mSuspendedCard.flush(false);\n+            return mSuspendedCard.getId();\n+        }\n+    }\n+\n+    public static class UndoSuspendCardMulti extends Undo {\n+        private final Card[] mCards;\n+        private final boolean[] mOriginalSuspended;\n+        public UndoSuspendCardMulti(Card[] cards, boolean[] originalSuspended) {\n+            super(SUSPEND_CARD_MULTI);\n+            mCards = cards;\n+            mOriginalSuspended = originalSuspended;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Suspend multiple cards\");\n+            List<Long> toSuspendIds = new ArrayList<>();\n+            List<Long> toUnsuspendIds = new ArrayList<>();\n+            for (int i = 0; i < mCards.length; i++) {\n+                Card card = mCards[i];\n+                if (mOriginalSuspended[i]) {\n+                    toSuspendIds.add(card.getId());\n+                } else {\n+                    toUnsuspendIds.add(card.getId());\n+                }\n+            }\n+\n+            // unboxing\n+            long[] toSuspendIdsArray = new long[toSuspendIds.size()];\n+            long[] toUnsuspendIdsArray = new long[toUnsuspendIds.size()];\n+            for (int i = 0; i < toSuspendIds.size(); i++) {\n+                toSuspendIdsArray[i] = toSuspendIds.get(i);\n+            }\n+            for (int i = 0; i < toUnsuspendIds.size(); i++) {\n+                toUnsuspendIdsArray[i] = toUnsuspendIds.get(i);\n+            }\n+\n+            col.getSched().suspendCards(toSuspendIdsArray);\n+            col.getSched().unsuspendCards(toUnsuspendIdsArray);\n+\n+            return -1;  // don't fetch new card\n+\n+        }\n+    }\n+\n+    public static class UndoSuspendNote extends Undo {\n+        private final List<Card> mCards;\n+        private final long mCid;\n+        public UndoSuspendNote(List<Card> cards, long cid) {\n+            super(SUSPEND_NOTE);\n+            mCards = cards;\n+            mCid = cid;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Suspend note\");\n+            for (Card ccc : mCards) {\n+                ccc.flush(false);\n+            }\n+            return mCid;\n+        }\n+    }\n+\n+    public static class UndoDeleteNote extends Undo {\n+        private final Note mNote;\n+        private final List<Card> mCards;\n+        private final long mCid;\n+        public UndoDeleteNote(Note note, List<Card> cards, long cid) {\n+            super(DELETE_NOTE);\n+            mNote = note;\n+            mCards = cards;\n+            mCid = cid;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Delete note\");\n+            ArrayList<Long> ids = new ArrayList<>();\n+            mNote.flush(mNote.getMod(), false);\n+            ids.add(mNote.getId());\n+            for (Card c : mCards) {\n+                c.flush(false);\n+                ids.add(c.getId());\n+            }\n+            col.getDb().execute(\"DELETE FROM graves WHERE oid IN \" + Utils.ids2str(Utils.arrayList2array(ids)));\n+            return mCid;\n+        }\n+    }\n+\n+    public static class UndoDeleteNoteMulti extends Undo {\n+        private final List<Card> mAllCards;\n+        private final Note[] mNotes;\n+        public UndoDeleteNoteMulti(Note[] notes, List<Card> allCards) {\n+            super(DELETE_NOTE_MULTI);\n+            mNotes = notes;\n+            mAllCards = allCards;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Delete notes\");\n+            // undo all of these at once instead of one-by-one\n+            ArrayList<Long> ids = new ArrayList<>();\n+            for (Note n : mNotes) {\n+                n.flush(n.getMod(), false);\n+                ids.add(n.getId());\n+            }\n+            for (Card c : mAllCards) {\n+                c.flush(false);\n+                ids.add(c.getId());\n+            }\n+            col.getDb().execute(\"DELETE FROM graves WHERE oid IN \" + Utils.ids2str(Utils.arrayList2array(ids)));\n+            return -1;  // don't fetch new card\n+\n+        }\n+    }\n+\n+    public static class UndoChangeDeckMulti extends Undo {\n+        private final Card[] mCards;\n+        private final long[] mOriginalDid;\n+        public UndoChangeDeckMulti(Card[]cards, long[] originalDid) {\n+            super(CHANGE_DECK_MULTI);\n+            mCards = cards;\n+            mOriginalDid = originalDid;\n+        }\n+\n+        public long undo(Collection col) {\n+            Timber.i(\"Undo: Change Decks\");\n+            // move cards to original deck\n+            for (int i = 0; i < mCards.length; i++) {\n+                Card card = mCards[i];\n+                card.load();\n+                card.setDid(mOriginalDid[i]);\n+                Note note = card.note();\n+                note.flush();\n+                card.flush();\n+            }\n+            return -1;  // don't fetch new card", "originalCommit": "6f2f5d41b4f22ef5e3ad6003aa9193647bb410f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NDEyNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458454124", "bodyText": "It's not clear how to do it, because -1 and 0 has special meaning while positive numbers represent card id.\nIn OCaml or Haskell I would simply do an algebraic type which is either 0, -1, or card id. But I don't know java enough to do how to do it here", "author": "Arthur-Milchior", "createdAt": "2020-07-21T23:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTQyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458465429", "bodyText": "Easier to use a const - may be possible as an enum", "author": "david-allison-1", "createdAt": "2020-07-22T00:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTY2Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458531667", "bodyText": "I added a class with three subclass, so that the one subclass for card id has an id.", "author": "Arthur-Milchior", "createdAt": "2020-07-22T04:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nsimilarity index 77%\nrename from AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\nrename to AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\nindex 8fe9071d3..6f2417e5a 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Undo.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Undoable.java\n\n@@ -1,10 +1,8 @@\n package com.ichi2.libanki;\n \n import android.content.res.Resources;\n-import android.util.Pair;\n \n import com.ichi2.anki.CardUtils;\n-import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection.DismissType;\n \n import java.util.ArrayList;\n"}}, {"oid": "5c56beeaafc11f1ff629538fbf8c22447b095ba8", "url": "https://github.com/ankidroid/Anki-Android/commit/5c56beeaafc11f1ff629538fbf8c22447b095ba8", "message": "NF: method UndoType\n\nThis will be used for testing", "committedDate": "2020-07-21T23:59:03Z", "type": "forcePushed"}, {"oid": "3404502622b4c7279bb7458f683623d545b6844c", "url": "https://github.com/ankidroid/Anki-Android/commit/3404502622b4c7279bb7458f683623d545b6844c", "message": "NF: Factorize Undo", "committedDate": "2020-07-22T04:41:38Z", "type": "forcePushed"}, {"oid": "00e28f070211be6c73c5fa2835485fcdf96d0afc", "url": "https://github.com/ankidroid/Anki-Android/commit/00e28f070211be6c73c5fa2835485fcdf96d0afc", "message": "NF: remove a useles object for BURY_CARD", "committedDate": "2020-07-22T04:59:36Z", "type": "commit"}, {"oid": "5374956bc5db2852b12eb00c430b05062be3b34e", "url": "https://github.com/ankidroid/Anki-Android/commit/5374956bc5db2852b12eb00c430b05062be3b34e", "message": "NF: Undo", "committedDate": "2020-07-22T04:59:36Z", "type": "commit"}, {"oid": "4be7a75aceb39f8fa74a9cbd22fc1ef87807cb81", "url": "https://github.com/ankidroid/Anki-Android/commit/4be7a75aceb39f8fa74a9cbd22fc1ef87807cb81", "message": "NF: method UndoType\n\nThis will be used for testing", "committedDate": "2020-07-22T04:59:36Z", "type": "commit"}, {"oid": "33d0e9996b3f69d9cbd82d475acee31b41c41c22", "url": "https://github.com/ankidroid/Anki-Android/commit/33d0e9996b3f69d9cbd82d475acee31b41c41c22", "message": "NF: move clone in caller.", "committedDate": "2020-07-22T04:59:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxNDYwOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458714609", "bodyText": "Best to use an enum, const, or switch back to the long, instanceof is typically a code smell", "author": "david-allison-1", "createdAt": "2020-07-22T11:09:45Z", "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -920,24 +921,24 @@ private TaskData doInBackgroundUndo() {\n             col.getDb().getDatabase().beginTransaction();\n             Card newCard = null;\n             try {\n-                long cid = col.undo();\n-                if (cid == 0) {\n+                UndoType undoType = col.undo();\n+                if (undoType instanceof UndoType.NonReview) {", "originalCommit": "3404502622b4c7279bb7458f683623d545b6844c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNTQ1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458725455", "bodyText": "I am sorry, but I really don't see how to use an enum if we need to store an arbitrary value", "author": "Arthur-Milchior", "createdAt": "2020-07-22T11:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxNDYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczOTg0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6706#discussion_r458739843", "bodyText": "Constant used here", "author": "Arthur-Milchior", "createdAt": "2020-07-22T12:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcxNDYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5e28167a6efa25ed130123fc0e252cb15fb1d8b6", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java b/AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java\nindex e3bf8cb1e..ada4924e2 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java\n\n@@ -921,17 +921,16 @@ public class CollectionTask extends BaseAsyncTask<CollectionTask.TaskData, Colle\n             col.getDb().getDatabase().beginTransaction();\n             Card newCard = null;\n             try {\n-                UndoType undoType = col.undo();\n-                if (undoType instanceof UndoType.NonReview) {\n+                long cid = col.undo();\n+                if (cid == 0) {\n                     // /* card schedule change undone, reset and get\n                     // new card */\n                     Timber.d(\"Single card non-review change undo succeeded\");\n                     col.reset();\n                     newCard = sched.getCard();\n-                } else if (undoType instanceof UndoType.Review) {\n+                } else if (cid > 0) {\n                     // a review was undone,\n                      /* card review undone, set up to review that card again */\n-                    long cid = ((UndoType.Review)undoType).getId();\n                     Timber.d(\"Single card review undo succeeded\");\n                     newCard = col.getCard(cid);\n                     newCard.startTimer();\n"}}, {"oid": "5e28167a6efa25ed130123fc0e252cb15fb1d8b6", "url": "https://github.com/ankidroid/Anki-Android/commit/5e28167a6efa25ed130123fc0e252cb15fb1d8b6", "message": "Factorize undo", "committedDate": "2020-07-22T11:57:32Z", "type": "commit"}, {"oid": "2ef73b505b212488efe34f3a80a48abcb39fcb14", "url": "https://github.com/ankidroid/Anki-Android/commit/2ef73b505b212488efe34f3a80a48abcb39fcb14", "message": "NF: Uses constant for undo", "committedDate": "2020-07-22T11:59:28Z", "type": "forcePushed"}, {"oid": "9ce6225c352f7f311ef5d80f78240573fbfebb75", "url": "https://github.com/ankidroid/Anki-Android/commit/9ce6225c352f7f311ef5d80f78240573fbfebb75", "message": "NF: Uses constant for undo", "committedDate": "2020-07-22T12:38:09Z", "type": "commit"}, {"oid": "9ce6225c352f7f311ef5d80f78240573fbfebb75", "url": "https://github.com/ankidroid/Anki-Android/commit/9ce6225c352f7f311ef5d80f78240573fbfebb75", "message": "NF: Uses constant for undo", "committedDate": "2020-07-22T12:38:09Z", "type": "forcePushed"}]}