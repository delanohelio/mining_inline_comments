{"pr_number": 6849, "pr_title": "NF: add a class CardCache", "pr_createdAt": "2020-08-07T23:31:40Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6849", "timeline": [{"oid": "adf5b2e6db2ecbac77c3f73ee9b89c889b0ec4df", "url": "https://github.com/ankidroid/Anki-Android/commit/adf5b2e6db2ecbac77c3f73ee9b89c889b0ec4df", "message": "NF: add a class CardCache", "committedDate": "2020-08-07T23:42:31Z", "type": "forcePushed"}, {"oid": "15908fdd598f3c8fa143d62725165d8567666965", "url": "https://github.com/ankidroid/Anki-Android/commit/15908fdd598f3c8fa143d62725165d8567666965", "message": "NF: add a class CardCache", "committedDate": "2020-08-07T23:43:33Z", "type": "forcePushed"}, {"oid": "282a450ef6273bc5a0a917afbb8dc592c2343b0d", "url": "https://github.com/ankidroid/Anki-Android/commit/282a450ef6273bc5a0a917afbb8dc592c2343b0d", "message": "NF: Sched uses Card cache in queue", "committedDate": "2020-08-08T00:03:09Z", "type": "forcePushed"}, {"oid": "6de38dcaf09fc87a2e9b67ba26586bf0d4ad14f8", "url": "https://github.com/ankidroid/Anki-Android/commit/6de38dcaf09fc87a2e9b67ba26586bf0d4ad14f8", "message": "NF: add a class CardCache", "committedDate": "2020-08-08T00:03:08Z", "type": "forcePushed"}, {"oid": "483a988320ff58f524af3d64cdf51f8b51487087", "url": "https://github.com/ankidroid/Anki-Android/commit/483a988320ff58f524af3d64cdf51f8b51487087", "message": "NF: loadQA directly from CardCache", "committedDate": "2020-08-13T00:31:22Z", "type": "forcePushed"}, {"oid": "843b5f5e902a038158349abb4260de2336372932", "url": "https://github.com/ankidroid/Anki-Android/commit/843b5f5e902a038158349abb4260de2336372932", "message": "NF: loadQA directly from CardCache", "committedDate": "2020-08-13T00:34:09Z", "type": "forcePushed"}, {"oid": "e855eac92561032d29ced8838db401141ecc7ea7", "url": "https://github.com/ankidroid/Anki-Android/commit/e855eac92561032d29ced8838db401141ecc7ea7", "message": "NF: loadQA directly from CardCache", "committedDate": "2020-08-13T00:36:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjU4Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469642583", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Card mCard;\n          \n          \n            \n                    @Nullable\n          \n          \n            \n                    private Card mCard;", "author": "david-allison-1", "createdAt": "2020-08-13T01:25:20Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();\n+     * Card card2 = cache.getCard();\n+     */\n+    public static class Cache implements Cloneable {\n+        private final Collection mCol;\n+        private final long mId;\n+        private Card mCard;", "originalCommit": "e855eac92561032d29ced8838db401141ecc7ea7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e4f071591af7d35c0de3c2c039b490aa379ab7b", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\nindex 0dc71c9173..78fae2feee 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n\n@@ -740,12 +742,14 @@ public class Card implements Cloneable {\n      * Card.Cache cache = new Cache(col, id);\n      * Card card = cache.getCard();\n      * ....\n-     * cache.releoad();\n+     * cache.reload();\n      * Card card2 = cache.getCard();\n      */\n     public static class Cache implements Cloneable {\n+        @NonNull\n         private final Collection mCol;\n         private final long mId;\n+        @Nullable\n         private Card mCard;\n \n         public Cache(Collection col, long id) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjgwNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469642804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final Collection mCol;\n          \n          \n            \n                    @NonNull\n          \n          \n            \n                    private final Collection mCol;", "author": "david-allison-1", "createdAt": "2020-08-13T01:25:41Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();\n+     * Card card2 = cache.getCard();\n+     */\n+    public static class Cache implements Cloneable {\n+        private final Collection mCol;", "originalCommit": "e855eac92561032d29ced8838db401141ecc7ea7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e4f071591af7d35c0de3c2c039b490aa379ab7b", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\nindex 0dc71c9173..78fae2feee 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n\n@@ -740,12 +742,14 @@ public class Card implements Cloneable {\n      * Card.Cache cache = new Cache(col, id);\n      * Card card = cache.getCard();\n      * ....\n-     * cache.releoad();\n+     * cache.reload();\n      * Card card2 = cache.getCard();\n      */\n     public static class Cache implements Cloneable {\n+        @NonNull\n         private final Collection mCol;\n         private final long mId;\n+        @Nullable\n         private Card mCard;\n \n         public Cache(Collection col, long id) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MzUzMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469643530", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * cache.releoad();\n          \n          \n            \n                 * cache.reload();", "author": "david-allison-1", "createdAt": "2020-08-13T01:26:47Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();", "originalCommit": "e855eac92561032d29ced8838db401141ecc7ea7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e4f071591af7d35c0de3c2c039b490aa379ab7b", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\nindex 0dc71c9173..78fae2feee 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Card.java\n\n@@ -740,12 +742,14 @@ public class Card implements Cloneable {\n      * Card.Cache cache = new Cache(col, id);\n      * Card card = cache.getCard();\n      * ....\n-     * cache.releoad();\n+     * cache.reload();\n      * Card card2 = cache.getCard();\n      */\n     public static class Cache implements Cloneable {\n+        @NonNull\n         private final Collection mCol;\n         private final long mId;\n+        @Nullable\n         private Card mCard;\n \n         public Cache(Collection col, long id) {\n"}}, {"oid": "7e4f071591af7d35c0de3c2c039b490aa379ab7b", "url": "https://github.com/ankidroid/Anki-Android/commit/7e4f071591af7d35c0de3c2c039b490aa379ab7b", "message": "NF: add a class CardCache", "committedDate": "2020-08-13T01:32:18Z", "type": "commit"}, {"oid": "7e4f071591af7d35c0de3c2c039b490aa379ab7b", "url": "https://github.com/ankidroid/Anki-Android/commit/7e4f071591af7d35c0de3c2c039b490aa379ab7b", "message": "NF: add a class CardCache", "committedDate": "2020-08-13T01:32:18Z", "type": "forcePushed"}]}