{"pr_number": 6766, "pr_title": "JS API: Add Remaining Card Properties", "pr_createdAt": "2020-07-28T20:47:08Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6766", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDk4MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6766#discussion_r461960981", "bodyText": "I would expect that keeping up to database format would be better. So use name \"factor\" and not dividing by 1000. First because a computer can't divide by 1000 without loosing informations, and that may be a real problem if someone want to know the actual number used to computer values. Furthermore, I would expect anyone needing access to the JS\u00a0to know the actual database format anyway.", "author": "Arthur-Milchior", "createdAt": "2020-07-29T00:00:52Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3562,6 +3562,30 @@ public int ankiGetCardInterval() {\n             return mCurrentCard.getIvl();\n         }\n \n+        /** Returns the ease as a double. Default: 2.5. Minimum: 1.3 */\n+        @JavascriptInterface\n+        public double ankiGetCardEase() {\n+            return ((double) mCurrentCard.getFactor()) / 1000.0;", "originalCommit": "78e1f6c3960484bdca0592193130493380b28447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d388b2692de756f8a0e5b6d00c33efdfadcad6e", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex c130b1c773..ebf6a9aa6c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3562,30 +3562,58 @@ see card.js for available functions\n             return mCurrentCard.getIvl();\n         }\n \n-        /** Returns the ease as a double. Default: 2.5. Minimum: 1.3 */\n+        /** Returns the ease as an int (percentage * 10). Default: 2500 (250%). Minimum: 1300 (130%) */\n         @JavascriptInterface\n-        public double ankiGetCardEase() {\n-            return ((double) mCurrentCard.getFactor()) / 1000.0;\n+        public int ankiGetCardFactor() {\n+            return mCurrentCard.getFactor();\n         }\n \n         /** Returns the last modified time as a Unix timestamp in seconds. Example: 1477384099 */\n         @JavascriptInterface\n-        public long ankiGetCardLastModified() {\n+        public long ankiGetCardMod() {\n             return mCurrentCard.getMod();\n         }\n \n-        /** Returns the Unix timestamp of card creation in milliseconds. Example: 1477380543053 */\n-        @JavascriptInterface\n-        public long ankiGetCardCreated() {\n-            return ankiGetCardId();\n-        }\n-\n         /** Returns the ID of the card. Example: 1477380543053 */\n         @JavascriptInterface\n         public long ankiGetCardId() {\n              return mCurrentCard.getId();\n          }\n \n+        /** Returns the ID of the note which generated the card. Example: 1590418157630 */\n+        @JavascriptInterface\n+        public long ankiGetCardNid() {\n+            return mCurrentCard.getNid();\n+        }\n+\n+        @JavascriptInterface\n+        @Consts.CARD_TYPE\n+        public int ankiGetCardType() {\n+            return mCurrentCard.getType();\n+        }\n+\n+        /** Returns the ID of the deck which contains the card. Example: 1595967594978 */\n+        @JavascriptInterface\n+        public long ankiGetCardDid() {\n+            return mCurrentCard.getDid();\n+        }\n+        \n+        @JavascriptInterface\n+        public int ankiGetCardLeft() {\n+            return mCurrentCard.getLeft();\n+        }\n+\n+        /** Returns the ID of the home deck for the card if it is filtered, or 0 if not filtered. Example: 1595967594978 */\n+        @JavascriptInterface\n+        public long ankiGetCardODid() {\n+            return mCurrentCard.getODid();\n+        }\n+\n+        @JavascriptInterface\n+        public long ankiGetCardODue() {\n+            return mCurrentCard.getODue();\n+        }\n+\n         @JavascriptInterface\n         @Consts.CARD_QUEUE\n         public int ankiGetCardQueue() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMTI4Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6766#discussion_r462411286", "bodyText": "I'd prefer to just keep the (unfriendly) current names as well - as sort of an ecosystem compatibility thing. The names attached to the data are a bit like an API and better to pass that through then make what is essentially a translation layer. So this would be ankiGetCardMod, and other getCardId etc\nAvoiding naming confusion+education-need+problems and referring upstream is the desired outcome for me with that stance - upstream docs will remain relevant for reference", "author": "mikehardy", "createdAt": "2020-07-29T16:00:17Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -3562,6 +3562,30 @@ public int ankiGetCardInterval() {\n             return mCurrentCard.getIvl();\n         }\n \n+        /** Returns the ease as a double. Default: 2.5. Minimum: 1.3 */\n+        @JavascriptInterface\n+        public double ankiGetCardEase() {\n+            return ((double) mCurrentCard.getFactor()) / 1000.0;\n+        }\n+\n+        /** Returns the last modified time as a Unix timestamp in seconds. Example: 1477384099 */\n+        @JavascriptInterface\n+        public long ankiGetCardLastModified() {\n+            return mCurrentCard.getMod();", "originalCommit": "78e1f6c3960484bdca0592193130493380b28447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d388b2692de756f8a0e5b6d00c33efdfadcad6e", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\nindex c130b1c773..ebf6a9aa6c 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java\n\n@@ -3562,30 +3562,58 @@ see card.js for available functions\n             return mCurrentCard.getIvl();\n         }\n \n-        /** Returns the ease as a double. Default: 2.5. Minimum: 1.3 */\n+        /** Returns the ease as an int (percentage * 10). Default: 2500 (250%). Minimum: 1300 (130%) */\n         @JavascriptInterface\n-        public double ankiGetCardEase() {\n-            return ((double) mCurrentCard.getFactor()) / 1000.0;\n+        public int ankiGetCardFactor() {\n+            return mCurrentCard.getFactor();\n         }\n \n         /** Returns the last modified time as a Unix timestamp in seconds. Example: 1477384099 */\n         @JavascriptInterface\n-        public long ankiGetCardLastModified() {\n+        public long ankiGetCardMod() {\n             return mCurrentCard.getMod();\n         }\n \n-        /** Returns the Unix timestamp of card creation in milliseconds. Example: 1477380543053 */\n-        @JavascriptInterface\n-        public long ankiGetCardCreated() {\n-            return ankiGetCardId();\n-        }\n-\n         /** Returns the ID of the card. Example: 1477380543053 */\n         @JavascriptInterface\n         public long ankiGetCardId() {\n              return mCurrentCard.getId();\n          }\n \n+        /** Returns the ID of the note which generated the card. Example: 1590418157630 */\n+        @JavascriptInterface\n+        public long ankiGetCardNid() {\n+            return mCurrentCard.getNid();\n+        }\n+\n+        @JavascriptInterface\n+        @Consts.CARD_TYPE\n+        public int ankiGetCardType() {\n+            return mCurrentCard.getType();\n+        }\n+\n+        /** Returns the ID of the deck which contains the card. Example: 1595967594978 */\n+        @JavascriptInterface\n+        public long ankiGetCardDid() {\n+            return mCurrentCard.getDid();\n+        }\n+        \n+        @JavascriptInterface\n+        public int ankiGetCardLeft() {\n+            return mCurrentCard.getLeft();\n+        }\n+\n+        /** Returns the ID of the home deck for the card if it is filtered, or 0 if not filtered. Example: 1595967594978 */\n+        @JavascriptInterface\n+        public long ankiGetCardODid() {\n+            return mCurrentCard.getODid();\n+        }\n+\n+        @JavascriptInterface\n+        public long ankiGetCardODue() {\n+            return mCurrentCard.getODue();\n+        }\n+\n         @JavascriptInterface\n         @Consts.CARD_QUEUE\n         public int ankiGetCardQueue() {\n"}}, {"oid": "5d388b2692de756f8a0e5b6d00c33efdfadcad6e", "url": "https://github.com/ankidroid/Anki-Android/commit/5d388b2692de756f8a0e5b6d00c33efdfadcad6e", "message": "JS API: Add Remaining Card Properties\n\nfactor, id, mod, nid, type, did, left, odid, odue\n\nFixes 5587", "committedDate": "2020-08-02T17:42:07Z", "type": "forcePushed"}, {"oid": "7b5d412acdaa83568dae6dcd1415f480260bb6d3", "url": "https://github.com/ankidroid/Anki-Android/commit/7b5d412acdaa83568dae6dcd1415f480260bb6d3", "message": "JS API: Add Remaining Card Properties\n\nfactor, id, mod, nid, type, did, left, odid, odue\n\nFixes 5587", "committedDate": "2020-08-02T20:22:42Z", "type": "commit"}, {"oid": "7b5d412acdaa83568dae6dcd1415f480260bb6d3", "url": "https://github.com/ankidroid/Anki-Android/commit/7b5d412acdaa83568dae6dcd1415f480260bb6d3", "message": "JS API: Add Remaining Card Properties\n\nfactor, id, mod, nid, type, did, left, odid, odue\n\nFixes 5587", "committedDate": "2020-08-02T20:22:42Z", "type": "forcePushed"}]}