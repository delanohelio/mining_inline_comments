{"pr_number": 6080, "pr_title": "Convert Keyboard Input Map Code to Config", "pr_createdAt": "2020-04-25T22:28:46Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6080", "timeline": [{"oid": "a703469e53861886dcb4ebf4d47333233d4d784f", "url": "https://github.com/ankidroid/Anki-Android/commit/a703469e53861886dcb4ebf4d47333233d4d784f", "message": "Peripheral Input Mappings: convert code to config\n\nConverting from code to coded config will later allow us to convert from\nconfig to preferences. This is another layer of abstraction in order to\nintegrate a custom keymap with the Reviewer.", "committedDate": "2020-05-23T15:03:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NzU5Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6080#discussion_r429657592", "bodyText": "whitespace nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PeripheralKeymap mProcessor = new PeripheralKeymap(this,this);\n          \n          \n            \n                private PeripheralKeymap mProcessor = new PeripheralKeymap(this, this);", "author": "mikehardy", "createdAt": "2020-05-24T17:24:34Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java", "diffHunk": "@@ -86,6 +86,8 @@ protected int getToastResourceId() {\n         }\n     };\n \n+    private PeripheralKeymap mProcessor = new PeripheralKeymap(this,this);", "originalCommit": "b7fc0bdbaaaf2766e6ffc9997b8285659998ecf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73a5e9e8de34867ad8af1df8d74aca566a1a0933", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java\nindex e685697f2..1931816ce 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java\n\n@@ -86,7 +89,8 @@ public class Reviewer extends AbstractFlashcardViewer {\n         }\n     };\n \n-    private PeripheralKeymap mProcessor = new PeripheralKeymap(this,this);\n+    @VisibleForTesting\n+    protected PeripheralKeymap mProcessor = new PeripheralKeymap(this, this);\n \n     /** We need to listen for and handle reschedules / resets very similarly */\n     abstract class ScheduleCollectionTaskListener extends NextCardHandler {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Nzg3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6080#discussion_r429657872", "bodyText": "should just chain this to the other constructor with null for unicodeCharacter argument?", "author": "mikehardy", "createdAt": "2020-05-24T17:27:43Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/reviewer/PeripheralCommand.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.reviewer;\n+\n+import android.view.KeyEvent;\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand.ViewerCommandDef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+\n+public class PeripheralCommand {\n+    @Nullable\n+    private final Integer mKeyCode;\n+\n+    @Nullable\n+    private final Character mUnicodeCharacter;\n+\n+    @NonNull\n+    private final CardSide mCardSide;\n+\n+    private final @ViewerCommandDef int mCommand;\n+\n+    private PeripheralCommand(int keyCode, @ViewerCommandDef int command, @NonNull CardSide side) {", "originalCommit": "a703469e53861886dcb4ebf4d47333233d4d784f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1OTU0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6080#discussion_r429659545", "bodyText": "No.\n        this.mKeyCode = null;\n        this.mUnicodeCharacter = unicodeCharacter;\n\nVs\n        this.mKeyCode = keyCode;\n        this.mUnicodeCharacter = null;\n\nWould consider adding two subclasses, but it doesn't feel worth it. Your call", "author": "david-allison-1", "createdAt": "2020-05-24T17:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Nzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1OTg4Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6080#discussion_r429659887", "bodyText": "Oh - missed the prior null yes - I see they're going different directions - no problem", "author": "mikehardy", "createdAt": "2020-05-24T17:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Nzg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a527ac5d4cea869d04c43a6daa6c4607a5867d76", "chunk": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/reviewer/PeripheralCommand.java b/AnkiDroid/src/main/java/com/ichi2/anki/reviewer/PeripheralCommand.java\ndeleted file mode 100644\nindex 7bf5d0610..000000000\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/reviewer/PeripheralCommand.java\n+++ /dev/null\n\n@@ -1,122 +0,0 @@\n-/*\n- Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n-\n- This program is free software; you can redistribute it and/or modify it under\n- the terms of the GNU General Public License as published by the Free Software\n- Foundation; either version 3 of the License, or (at your option) any later\n- version.\n-\n- This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- PARTICULAR PURPOSE. See the GNU General Public License for more details.\n-\n- You should have received a copy of the GNU General Public License along with\n- this program.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-package com.ichi2.anki.reviewer;\n-\n-import android.view.KeyEvent;\n-\n-import com.ichi2.anki.cardviewer.ViewerCommand.ViewerCommandDef;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n-\n-import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n-\n-public class PeripheralCommand {\n-    @Nullable\n-    private final Integer mKeyCode;\n-\n-    @Nullable\n-    private final Character mUnicodeCharacter;\n-\n-    @NonNull\n-    private final CardSide mCardSide;\n-\n-    private final @ViewerCommandDef int mCommand;\n-\n-    private PeripheralCommand(int keyCode, @ViewerCommandDef int command, @NonNull CardSide side) {\n-        this.mKeyCode = keyCode;\n-        this.mUnicodeCharacter = null;\n-        this.mCommand = command;\n-        this.mCardSide = side;\n-    }\n-\n-    private PeripheralCommand(@Nullable Character unicodeCharacter, @ViewerCommandDef int command, @NonNull CardSide side) {\n-        this.mKeyCode = null;\n-        this.mUnicodeCharacter = unicodeCharacter;\n-        this.mCommand = command;\n-        this.mCardSide = side;\n-    }\n-\n-    public int getCommand() {\n-        return mCommand;\n-    }\n-\n-    public Character getUnicodeCharacter() {\n-        return mUnicodeCharacter;\n-    }\n-\n-    public Integer getKeycode() {\n-        return mKeyCode;\n-    }\n-\n-    public boolean isQuestion() {\n-        return mCardSide == CardSide.QUESTION || mCardSide == CardSide.BOTH;\n-    }\n-\n-    public boolean isAnswer() {\n-        return mCardSide == CardSide.ANSWER || mCardSide == CardSide.BOTH;\n-    }\n-\n-    public static PeripheralCommand unicode(char unicodeChar, @ViewerCommandDef int command, CardSide side) {\n-        return new PeripheralCommand((Character) unicodeChar, command, side);\n-    }\n-\n-\n-    public static PeripheralCommand keyCode(int keyCode, @ViewerCommandDef int command, CardSide side) {\n-        return new PeripheralCommand(keyCode, command, side);\n-    }\n-\n-    public static List<PeripheralCommand> getDefaultCommands() {\n-        List<PeripheralCommand> ret = new ArrayList<>();\n-\n-        ret.add(PeripheralCommand.unicode('1', COMMAND_ANSWER_FIRST_BUTTON, CardSide.ANSWER));\n-        ret.add(PeripheralCommand.unicode('2', COMMAND_ANSWER_SECOND_BUTTON, CardSide.ANSWER));\n-        ret.add(PeripheralCommand.unicode('3', COMMAND_ANSWER_THIRD_BUTTON, CardSide.ANSWER));\n-        ret.add(PeripheralCommand.unicode('4', COMMAND_ANSWER_FOURTH_BUTTON, CardSide.ANSWER));\n-\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_BUTTON_Y, COMMAND_FLIP_OR_ANSWER_EASE1, CardSide.BOTH));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_BUTTON_X, COMMAND_FLIP_OR_ANSWER_EASE2, CardSide.BOTH));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_BUTTON_B, COMMAND_FLIP_OR_ANSWER_EASE3, CardSide.BOTH));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_BUTTON_A, COMMAND_FLIP_OR_ANSWER_EASE4, CardSide.BOTH));\n-\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_SPACE, COMMAND_ANSWER_RECOMMENDED, CardSide.ANSWER));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_ENTER, COMMAND_ANSWER_RECOMMENDED, CardSide.ANSWER));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_NUMPAD_ENTER, COMMAND_ANSWER_RECOMMENDED, CardSide.ANSWER));\n-\n-        ret.add(PeripheralCommand.unicode('e', COMMAND_EDIT, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('*', COMMAND_MARK, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('-', COMMAND_BURY_CARD, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('=', COMMAND_BURY_NOTE, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('@', COMMAND_SUSPEND_CARD, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('!', COMMAND_SUSPEND_NOTE, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('r', COMMAND_PLAY_MEDIA, CardSide.BOTH));\n-        ret.add(PeripheralCommand.keyCode(KeyEvent.KEYCODE_F5, COMMAND_PLAY_MEDIA, CardSide.BOTH));\n-        ret.add(PeripheralCommand.unicode('z', COMMAND_UNDO, CardSide.BOTH));\n-\n-        return ret;\n-    }\n-\n-    private enum CardSide {\n-        NONE,\n-        QUESTION,\n-        ANSWER,\n-        BOTH\n-    }\n-}\n"}}, {"oid": "a527ac5d4cea869d04c43a6daa6c4607a5867d76", "url": "https://github.com/ankidroid/Anki-Android/commit/a527ac5d4cea869d04c43a6daa6c4607a5867d76", "message": "Extract Peripheral Keymap", "committedDate": "2020-05-24T17:46:24Z", "type": "commit"}, {"oid": "73a5e9e8de34867ad8af1df8d74aca566a1a0933", "url": "https://github.com/ankidroid/Anki-Android/commit/73a5e9e8de34867ad8af1df8d74aca566a1a0933", "message": "Peripheral Input Mappings: convert code to config\n\nConverting from code to coded config will later allow us to convert from\nconfig to preferences. This is another layer of abstraction in order to\nintegrate a custom keymap with the Reviewer.", "committedDate": "2020-05-24T17:48:49Z", "type": "commit"}, {"oid": "73a5e9e8de34867ad8af1df8d74aca566a1a0933", "url": "https://github.com/ankidroid/Anki-Android/commit/73a5e9e8de34867ad8af1df8d74aca566a1a0933", "message": "Peripheral Input Mappings: convert code to config\n\nConverting from code to coded config will later allow us to convert from\nconfig to preferences. This is another layer of abstraction in order to\nintegrate a custom keymap with the Reviewer.", "committedDate": "2020-05-24T17:48:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1OTgzNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6080#discussion_r429659835", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.cardviewer.ViewerCommand'", "author": "timrae", "createdAt": "2020-05-24T17:53:46Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/reviewer/PeripheralCommand.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.reviewer;\n+\n+import android.view.KeyEvent;\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand.ViewerCommandDef;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.ichi2.anki.cardviewer.ViewerCommand.*;", "originalCommit": "73a5e9e8de34867ad8af1df8d74aca566a1a0933", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}