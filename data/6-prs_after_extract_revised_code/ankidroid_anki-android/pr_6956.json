{"pr_number": 6956, "pr_title": "Add Lint checks for the new time API", "pr_createdAt": "2020-08-23T14:04:35Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6956", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzODgyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475238829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EXPLANATION = \"Manually creating Calendar instances it is not allowed, they must be \" +\n          \n          \n            \n                        \"obtained through the SystemTime class\";\n          \n          \n            \n                private static final String EXPLANATION = \"Manually creating Calendar instances means time cannot be controlled during testing. \" +\n          \n          \n            \n                        \"Calendar instances must obtained through the SystemTime class\";", "author": "mikehardy", "createdAt": "2020-08-23T16:31:16Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/rules/CalendarInstanceUsage.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.ichi2.anki.lint.rules;\n+\n+import com.android.tools.lint.client.api.JavaEvaluator;\n+import com.android.tools.lint.detector.api.Detector;\n+import com.android.tools.lint.detector.api.Implementation;\n+import com.android.tools.lint.detector.api.Issue;\n+import com.android.tools.lint.detector.api.JavaContext;\n+import com.android.tools.lint.detector.api.Scope;\n+import com.android.tools.lint.detector.api.Severity;\n+import com.android.tools.lint.detector.api.SourceCodeScanner;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.ichi2.anki.lint.utils.Constants;\n+import com.ichi2.anki.lint.utils.LintUtils;\n+import com.intellij.psi.PsiMethod;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.jetbrains.uast.UCallExpression;\n+import org.jetbrains.uast.UClass;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+/**\n+ * This custom Lint rules will raise an error if a developer uses the {@link Calendar#getInstance()} method instead\n+ * of using the Calendar provided by the new SystemTime class.\n+ */\n+public class CalendarInstanceUsage extends Detector implements SourceCodeScanner {\n+\n+    @VisibleForTesting\n+    static final String ID = \"CalendarInstanceUsage\";\n+    @VisibleForTesting\n+    static final String DESCRIPTION = \"Use SystemTime instead of directly creating Calendar instances\";\n+    private static final String EXPLANATION = \"Manually creating Calendar instances it is not allowed, they must be \" +\n+            \"obtained through the SystemTime class\";", "originalCommit": "4ea7f3c66edf0a5c8b8a93321fa0c4147a7218d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ba25423a728fe53dfe3fec079603559640f68a", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/CalendarInstanceUsage.java b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/CalendarInstanceUsage.java\nindex adb0bcb65..97399f772 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/CalendarInstanceUsage.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/CalendarInstanceUsage.java\n\n@@ -32,8 +32,8 @@ public class CalendarInstanceUsage extends Detector implements SourceCodeScanner\n     static final String ID = \"CalendarInstanceUsage\";\n     @VisibleForTesting\n     static final String DESCRIPTION = \"Use SystemTime instead of directly creating Calendar instances\";\n-    private static final String EXPLANATION = \"Manually creating Calendar instances it is not allowed, they must be \" +\n-            \"obtained through the SystemTime class\";\n+    private static final String EXPLANATION = \"Manually creating Calendar instances means time cannot be controlled \" +\n+            \"during testing. Calendar instances must be obtained through the SystemTime class\";\n     private static Implementation implementation = new Implementation(CalendarInstanceUsage.class, Scope.JAVA_FILE_SCOPE);\n     public static final Issue ISSUE = Issue.create(\n             ID,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzODk2NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475238964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EXPLANATION = \"Values for System.currentTimeMillis() must be obtained through the SystemTime class\";\n          \n          \n            \n                private static final String EXPLANATION = \"Using time directly means time values cannot be controlled during testing. \" +\n          \n          \n            \n                    \" Time values like System.currentTimeMillis() must be obtained through the SystemTime class\";", "author": "mikehardy", "createdAt": "2020-08-23T16:33:01Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.ichi2.anki.lint.rules;\n+\n+import com.android.tools.lint.client.api.JavaEvaluator;\n+import com.android.tools.lint.detector.api.Detector;\n+import com.android.tools.lint.detector.api.Implementation;\n+import com.android.tools.lint.detector.api.Issue;\n+import com.android.tools.lint.detector.api.JavaContext;\n+import com.android.tools.lint.detector.api.Scope;\n+import com.android.tools.lint.detector.api.Severity;\n+import com.android.tools.lint.detector.api.SourceCodeScanner;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.ichi2.anki.lint.utils.Constants;\n+import com.ichi2.anki.lint.utils.LintUtils;\n+import com.intellij.psi.PsiMethod;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.jetbrains.uast.UCallExpression;\n+import org.jetbrains.uast.UClass;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This custom Lint rules will raise an error if a developer uses the {@link System#currentTimeMillis()} method instead\n+ * of using the time provided by the new SystemTime class.\n+ */\n+public class DirectSystemTimeUsage extends Detector implements SourceCodeScanner {\n+\n+    @VisibleForTesting\n+    static final String ID = \"DirectSystemTimeUsage\";\n+    @VisibleForTesting\n+    static final String DESCRIPTION = \"Use SystemTime instead of System.currentTimeMillis()\";\n+    private static final String EXPLANATION = \"Values for System.currentTimeMillis() must be obtained through the SystemTime class\";", "originalCommit": "4ea7f3c66edf0a5c8b8a93321fa0c4147a7218d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ba25423a728fe53dfe3fec079603559640f68a", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java\nindex 101577394..94f01f9bc 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java\n\n@@ -31,7 +31,8 @@ public class DirectSystemTimeUsage extends Detector implements SourceCodeScanner\n     static final String ID = \"DirectSystemTimeUsage\";\n     @VisibleForTesting\n     static final String DESCRIPTION = \"Use SystemTime instead of System.currentTimeMillis()\";\n-    private static final String EXPLANATION = \"Values for System.currentTimeMillis() must be obtained through the SystemTime class\";\n+    private static final String EXPLANATION = \"Using time directly means time values cannot be controlled during testing. \" +\n+            \"Time values like System.currentTimeMillis() must be obtained through the SystemTime class\";\n     private static Implementation implementation = new Implementation(DirectSystemTimeUsage.class, Scope.JAVA_FILE_SCOPE);\n     public static final Issue ISSUE = Issue.create(\n             ID,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTAyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475239027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EXPLANATION = \"Creating Date instances directly is not allowed, use the new SystemTime class instead\";\n          \n          \n            \n                private static final String EXPLANATION = \"Creating Date instances directly means dates cannot be controlled during testing, \" +\n          \n          \n            \n                    \" so it is not allowed. Use the SystemTime class instead\";", "author": "mikehardy", "createdAt": "2020-08-23T16:33:57Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewDateInstantiation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.ichi2.anki.lint.rules;\n+\n+import com.android.tools.lint.detector.api.Detector;\n+import com.android.tools.lint.detector.api.Implementation;\n+import com.android.tools.lint.detector.api.Issue;\n+import com.android.tools.lint.detector.api.JavaContext;\n+import com.android.tools.lint.detector.api.Scope;\n+import com.android.tools.lint.detector.api.Severity;\n+import com.android.tools.lint.detector.api.SourceCodeScanner;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.ichi2.anki.lint.utils.Constants;\n+import com.ichi2.anki.lint.utils.LintUtils;\n+import com.intellij.psi.PsiMethod;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.jetbrains.uast.UCallExpression;\n+import org.jetbrains.uast.UClass;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This custom Lint rules will raise an error if a developer instantiates the {@link java.util.Date} class directly\n+ * instead of using a {@link java.util.Date} provided through the new SystemTime class.\n+ */\n+public class NewDateInstantiation extends Detector implements SourceCodeScanner {\n+\n+    @VisibleForTesting\n+    static final String ID = \"NewDateInstantiation\";\n+    @VisibleForTesting\n+    static final String DESCRIPTION = \"Use SystemTime instead of directly instantiating Date\";\n+    private static final String EXPLANATION = \"Creating Date instances directly is not allowed, use the new SystemTime class instead\";", "originalCommit": "4ea7f3c66edf0a5c8b8a93321fa0c4147a7218d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ba25423a728fe53dfe3fec079603559640f68a", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewDateInstantiation.java b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewDateInstantiation.java\nindex c4b8ee707..c9793ceb3 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewDateInstantiation.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewDateInstantiation.java\n\n@@ -30,7 +30,8 @@ public class NewDateInstantiation extends Detector implements SourceCodeScanner\n     static final String ID = \"NewDateInstantiation\";\n     @VisibleForTesting\n     static final String DESCRIPTION = \"Use SystemTime instead of directly instantiating Date\";\n-    private static final String EXPLANATION = \"Creating Date instances directly is not allowed, use the new SystemTime class instead\";\n+    private static final String EXPLANATION = \"Creating Date instances directly means dates cannot be controlled during\" +\n+            \" testing, so it is not allowed. Use the SystemTime class instead\";\n     private static Implementation implementation = new Implementation(NewDateInstantiation.class, Scope.JAVA_FILE_SCOPE);\n     public static final Issue ISSUE = Issue.create(\n             ID,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzOTEwMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475239103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EXPLANATION = \"Creating GregorianCalendar instances with from() is not allowed, use \" +\n          \n          \n            \n                        \"the new SystemTime class instead\";\n          \n          \n            \n                private static final String EXPLANATION = \"Creating GregorianCalendar instances with from() is not allowed, as \" +\n          \n          \n            \n                        \" it prevents control of time during testing. Use the SystemTime class instead\";", "author": "mikehardy", "createdAt": "2020-08-23T16:34:36Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewGregorianInstantiation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.ichi2.anki.lint.rules;\n+\n+import com.android.tools.lint.client.api.JavaEvaluator;\n+import com.android.tools.lint.detector.api.Detector;\n+import com.android.tools.lint.detector.api.Implementation;\n+import com.android.tools.lint.detector.api.Issue;\n+import com.android.tools.lint.detector.api.JavaContext;\n+import com.android.tools.lint.detector.api.Scope;\n+import com.android.tools.lint.detector.api.Severity;\n+import com.android.tools.lint.detector.api.SourceCodeScanner;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.ichi2.anki.lint.utils.Constants;\n+import com.ichi2.anki.lint.utils.LintUtils;\n+import com.intellij.psi.PsiMethod;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.jetbrains.uast.UCallExpression;\n+import org.jetbrains.uast.UClass;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+/**\n+ * This custom Lint rules will raise an error if a developer uses the {@link GregorianCalendar#from(ZonedDateTime)}\n+ * method to obtain an instance instead of using the new SystemTime class.\n+ */\n+public class NewGregorianInstantiation extends Detector implements SourceCodeScanner {\n+\n+    @VisibleForTesting\n+    static final String ID = \"NewGregorianInstantiation\";\n+    @VisibleForTesting\n+    static final String DESCRIPTION = \"Use SystemTime instead of GregorianCalendar.from()\";\n+    private static final String EXPLANATION = \"Creating GregorianCalendar instances with from() is not allowed, use \" +\n+            \"the new SystemTime class instead\";", "originalCommit": "4ea7f3c66edf0a5c8b8a93321fa0c4147a7218d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ba25423a728fe53dfe3fec079603559640f68a", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewGregorianInstantiation.java b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewGregorianInstantiation.java\nindex e515901cc..3d171ee48 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewGregorianInstantiation.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/NewGregorianInstantiation.java\n\n@@ -33,8 +33,8 @@ public class NewGregorianInstantiation extends Detector implements SourceCodeSca\n     static final String ID = \"NewGregorianInstantiation\";\n     @VisibleForTesting\n     static final String DESCRIPTION = \"Use SystemTime instead of GregorianCalendar.from()\";\n-    private static final String EXPLANATION = \"Creating GregorianCalendar instances with from() is not allowed, use \" +\n-            \"the new SystemTime class instead\";\n+    private static final String EXPLANATION = \"Creating GregorianCalendar instances with from() is not allowed, as \" +\n+            \"it prevents control of time during testing. Use the SystemTime class instead\";\n     private static Implementation implementation = new Implementation(NewGregorianInstantiation.class, Scope.JAVA_FILE_SCOPE);\n     public static final Issue ISSUE = Issue.create(\n             ID,\n"}}, {"oid": "55ba25423a728fe53dfe3fec079603559640f68a", "url": "https://github.com/ankidroid/Anki-Android/commit/55ba25423a728fe53dfe3fec079603559640f68a", "message": "Add lint checks for new time api", "committedDate": "2020-08-24T11:44:01Z", "type": "forcePushed"}, {"oid": "b964005157be74a1660c3210999811178895b598", "url": "https://github.com/ankidroid/Anki-Android/commit/b964005157be74a1660c3210999811178895b598", "message": "Add lint checks for new time api", "committedDate": "2020-08-24T13:09:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMzY0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475603645", "bodyText": "Does it mean you area allowing the call of time methods in the class Time ? It does not seems right. The abstract class Time should not get any access to real time", "author": "Arthur-Milchior", "createdAt": "2020-08-24T13:35:25Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/utils/LintUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.ichi2.anki.lint.utils;\n+\n+import org.jetbrains.uast.UClass;\n+\n+import java.util.List;\n+\n+public class LintUtils {\n+\n+    private LintUtils() {\n+        // no instantiation\n+    }\n+\n+\n+    /**\n+     * A helper method to check for special classes(Time and SystemTime) where the rules related to time apis shouldn't\n+     * be applied.\n+     *\n+     * @param classes the list of classes to look through\n+     * @return true if this is a class where the checks should not be applied, false otherwise\n+     */\n+    public static boolean isAnAllowedClass(List<UClass> classes) {\n+        boolean isInAllowedClass = false;\n+        for (int i = 0; i < classes.size(); i++) {\n+            final String className = classes.get(i).getName();\n+            if (className.equals(\"Time\") || className.equals(\"SystemTime\")) {\n+                isInAllowedClass = true;", "originalCommit": "b964005157be74a1660c3210999811178895b598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYxNTY3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475615676", "bodyText": "My assumption was that these classes should have direct access to Date, Calendar, System.currentTimeMillis() as they instantiate/use them. Isn't this ok?", "author": "lukstbit", "createdAt": "2020-08-24T13:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMzY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NTAzNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r476255034", "bodyText": "The class Time need to be able to create calendar and date object. So I guess you're right in a way, even if they change the date later. However, they don't need to get access to real time through currentTimeMillis, since they get the time via intTimeMS, which is the only abstract overridden. currentTimeMillis is only called in SystemTime.\nI guess ideally, this should allow the creation of calendar/date object only if they are linked to a specific time, and not to current time, but I don't know how to do it since it seems the calendar/date is first created with current time before getting changed.\nSpeaking of which, I'm surprised lint work, because the code still contains\n        Calendar sd = GregorianCalendar.getInstance();\n        sd.setTimeInMillis(mCol.getSched().getDayCutoff() * 1000);\n(which is perfectly valid since we don't actually uses current time here)\nAnd\n    public static Calendar reminderToCalendar(JSONObject reminder) {\n\n        final Calendar calendar = Calendar.getInstance();\n\n        calendar.set(Calendar.HOUR_OF_DAY, reminder.getJSONArray(\"time\").getInt(0));\n        calendar.set(Calendar.MINUTE, reminder.getJSONArray(\"time\").getInt(1));\n        calendar.set(Calendar.SECOND, 0);\n        return calendar;\n    }\nWhich is not valid since it uses the real day (I don't know how I missed it, my fault)\nSo I guess there is something I didn't understand in what your lint rules should detect.\nI guess the best option is to have in Time a static method which, given a timestamp, generate the calendar; this way the Calendar creation will be in an authorized class. And the second example need to be changed to get col.getTime's calendar, so the reminder is computed to the correct day (i don't know how I missed when I changed all times. I assume that since the hour was changed, I assumed it was okay to keep it in the code. How silly of mine)", "author": "Arthur-Milchior", "createdAt": "2020-08-25T08:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwMzY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "43f22f5103229ba54311a733aca9cc1ce4381ac5", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/utils/LintUtils.java b/lint-rules/src/main/java/com/ichi2/anki/lint/utils/LintUtils.java\nindex 836ed5f9b..327919f0e 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/utils/LintUtils.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/utils/LintUtils.java\n\n@@ -16,15 +16,18 @@ public class LintUtils {\n      * be applied.\n      *\n      * @param classes the list of classes to look through\n+     * @param allowedClasses  the list of classes where the checks should be ignored\n      * @return true if this is a class where the checks should not be applied, false otherwise\n      */\n-    public static boolean isAnAllowedClass(List<UClass> classes) {\n+    public static boolean isAnAllowedClass(List<UClass> classes, String... allowedClasses) {\n         boolean isInAllowedClass = false;\n         for (int i = 0; i < classes.size(); i++) {\n             final String className = classes.get(i).getName();\n-            if (className.equals(\"Time\") || className.equals(\"SystemTime\")) {\n-                isInAllowedClass = true;\n-                break;\n+            for (String allowedClass: allowedClasses) {\n+                if (className.equals(allowedClass)) {\n+                    isInAllowedClass = true;\n+                    break;\n+                }\n             }\n         }\n         return isInAllowedClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNDgxOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475604818", "bodyText": "The name is slightly confusing here, since \"SystemTime\" is a class of AnkiDroid and this is not related to the class SystemTime", "author": "Arthur-Milchior", "createdAt": "2020-08-24T13:36:50Z", "path": "lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.ichi2.anki.lint.rules;\n+\n+import com.android.tools.lint.client.api.JavaEvaluator;\n+import com.android.tools.lint.detector.api.Detector;\n+import com.android.tools.lint.detector.api.Implementation;\n+import com.android.tools.lint.detector.api.Issue;\n+import com.android.tools.lint.detector.api.JavaContext;\n+import com.android.tools.lint.detector.api.Scope;\n+import com.android.tools.lint.detector.api.Severity;\n+import com.android.tools.lint.detector.api.SourceCodeScanner;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.ichi2.anki.lint.utils.Constants;\n+import com.ichi2.anki.lint.utils.LintUtils;\n+import com.intellij.psi.PsiMethod;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.jetbrains.uast.UCallExpression;\n+import org.jetbrains.uast.UClass;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This custom Lint rules will raise an error if a developer uses the {@link System#currentTimeMillis()} method instead\n+ * of using the time provided by the new SystemTime class.\n+ */\n+public class DirectSystemTimeUsage extends Detector implements SourceCodeScanner {\n+", "originalCommit": "b964005157be74a1660c3210999811178895b598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYxNzM1OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475617358", "bodyText": "Yes, that is confusing. Would DirectSystemMillisUsage be a better name?", "author": "lukstbit", "createdAt": "2020-08-24T13:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTczMjA0OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6956#discussion_r475732048", "bodyText": "I recognize this is overly long, but it's also not something we'll have to type a lot, maybe going all the way and saying \"DirectSystemCurrentTimeMillisUsage\" - now it's completely explicit and no need to mentally translate", "author": "mikehardy", "createdAt": "2020-08-24T16:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYwNDgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "43f22f5103229ba54311a733aca9cc1ce4381ac5", "chunk": "diff --git a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemCurrentTimeMillisUsage.java\nsimilarity index 82%\nrename from lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java\nrename to lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemCurrentTimeMillisUsage.java\nindex 94f01f9bc..0db013ffa 100644\n--- a/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemTimeUsage.java\n+++ b/lint-rules/src/main/java/com/ichi2/anki/lint/rules/DirectSystemCurrentTimeMillisUsage.java\n\n@@ -25,27 +25,27 @@ import java.util.List;\n  * This custom Lint rules will raise an error if a developer uses the {@link System#currentTimeMillis()} method instead\n  * of using the time provided by the new SystemTime class.\n  */\n-public class DirectSystemTimeUsage extends Detector implements SourceCodeScanner {\n+public class DirectSystemCurrentTimeMillisUsage extends Detector implements SourceCodeScanner {\n \n     @VisibleForTesting\n-    static final String ID = \"DirectSystemTimeUsage\";\n+    static final String ID = \"DirectSystemCurrentTimeMillisUsage\";\n     @VisibleForTesting\n     static final String DESCRIPTION = \"Use SystemTime instead of System.currentTimeMillis()\";\n     private static final String EXPLANATION = \"Using time directly means time values cannot be controlled during testing. \" +\n             \"Time values like System.currentTimeMillis() must be obtained through the SystemTime class\";\n-    private static Implementation implementation = new Implementation(DirectSystemTimeUsage.class, Scope.JAVA_FILE_SCOPE);\n+    private static Implementation implementation = new Implementation(DirectSystemCurrentTimeMillisUsage.class, Scope.JAVA_FILE_SCOPE);\n     public static final Issue ISSUE = Issue.create(\n             ID,\n             DESCRIPTION,\n             EXPLANATION,\n-            Constants.ANKI_SYSTEM_TIME_CATEGORY,\n-            Constants.ANKI_SYSTEM_TIME_PRIORITY,\n+            Constants.ANKI_TIME_CATEGORY,\n+            Constants.ANKI_TIME_PRIORITY,\n             Severity.ERROR,\n             implementation\n     );\n \n \n-    public DirectSystemTimeUsage() {\n+    public DirectSystemCurrentTimeMillisUsage() {\n     }\n \n \n"}}, {"oid": "43f22f5103229ba54311a733aca9cc1ce4381ac5", "url": "https://github.com/ankidroid/Anki-Android/commit/43f22f5103229ba54311a733aca9cc1ce4381ac5", "message": "Add lint checks for new time api", "committedDate": "2020-08-25T05:21:06Z", "type": "commit"}, {"oid": "43f22f5103229ba54311a733aca9cc1ce4381ac5", "url": "https://github.com/ankidroid/Anki-Android/commit/43f22f5103229ba54311a733aca9cc1ce4381ac5", "message": "Add lint checks for new time api", "committedDate": "2020-08-25T05:21:06Z", "type": "forcePushed"}]}