{"pr_number": 5736, "pr_title": "Okhttp interrupted crash", "pr_createdAt": "2020-02-03T18:14:22Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/5736", "timeline": [{"oid": "91276d83253894dbaf152148461ac8107beadff4", "url": "https://github.com/ankidroid/Anki-Android/commit/91276d83253894dbaf152148461ac8107beadff4", "message": "Adapt timeout detection to handle okhttp transition\n\nWithout this change, timeouts that were handled with apache-http are bubbling\nup and causing app crashes when it is really just a connection error", "committedDate": "2020-02-03T17:41:23Z", "type": "commit"}, {"oid": "4e4aedec402a9e41ebba3fcabee13dc2008e9392", "url": "https://github.com/ankidroid/Anki-Android/commit/4e4aedec402a9e41ebba3fcabee13dc2008e9392", "message": "de-lint and spelling fixes in Connection object", "committedDate": "2020-02-03T17:42:23Z", "type": "commit"}, {"oid": "495da526a5619dd108e6218afafa8e09057b6192", "url": "https://github.com/ankidroid/Anki-Android/commit/495da526a5619dd108e6218afafa8e09057b6192", "message": "Add okhttp connection failure to list of timeouts", "committedDate": "2020-02-03T18:23:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzk3OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5736#discussion_r374313978", "bodyText": "Probably with the new library we no longer need to rely on string comparisons of the message to figure out whether a network error occurred... This was just a nasty hack we threw together to work around that old Apache library. I'll merge for now as a quick fix, but you should definitely consider using they type information instead of string comparisons if possible.", "author": "timrae", "createdAt": "2020-02-03T20:07:27Z", "path": "AnkiDroid/src/main/java/com/ichi2/async/Connection.java", "diffHunk": "@@ -249,13 +251,16 @@ private Payload doInBackgroundLogin(Payload data) {\n     }\n \n \n-    private boolean timeoutOccured(Exception e) {\n+    private boolean timeoutOccurred(Exception e) {\n         String msg = e.getMessage();\n         return msg.contains(\"UnknownHostException\") ||\n                 msg.contains(\"HttpHostConnectException\") ||\n                 msg.contains(\"SSLException while building HttpClient\") ||\n                 msg.contains(\"SocketTimeoutException\") ||\n                 msg.contains(\"ClientProtocolException\") ||\n+                msg.contains(\"deadline reached\") ||", "originalCommit": "495da526a5619dd108e6218afafa8e09057b6192", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxODUwNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5736#discussion_r374318504", "bodyText": "I actually did consider it -\nokhttp pops a 'java.io.InterruptedIOException' which is a java.io.IOException subclass, or a 'java.net.ConnectException' so it's possible ...but all the exceptions are actually swallowed and re-thrown as RuntimeException, which bubble up to a nested try where some types are caught, and then finally to an outer try that catches everything, where the message is then inspected in a few ways, and if it's known then the return is one of a bunch of hard-coded strings as an AsyncTask data object return value\nThe whole thing was so convoluted I dared not touch it right now, even though I was tempted - I'd rather get closure on the stack of existing PRs :-)", "author": "mikehardy", "createdAt": "2020-02-03T20:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMzk3OA=="}], "type": "inlineReview", "revised_code": null}]}