{"pr_number": 5830, "pr_title": "Fix \"AnkiDroid directory is inaccessible\" Bug", "pr_createdAt": "2020-03-17T21:42:23Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/5830", "timeline": [{"oid": "569515ae6a3e66aac0e5331371a2d332807ab395", "url": "https://github.com/ankidroid/Anki-Android/commit/569515ae6a3e66aac0e5331371a2d332807ab395", "message": "Fix \"AnkiDroid directory is inaccessible\" Bug\n\nFixes #5097, #5510\nPartially Addresses #5346 (option can still be set if somehow\npreferences is the first entered screen, but I think that's\nlogically impossible)\n\nThis bug has been pervasive for some time, and I logically believe that\nthis change fixes it, although I haven't verified this empirically.\n\nA user accessing \"Advanced Settings\" would obtain an error:\ndirectory_inaccessible\n\nThis was caused by entering the settings, which set a hardcoded default\nvalue `sdcard/AnkiDroid` without validation which did not match\n`getDefaultAnkiDroidDirectory()`\n\nThis immediately kicks the user out the app and leaves them in a\ncrash loop. They don't know what the actual value is meant to be\n(as they never saw the UI, so they can't easily fix it)\n\nWe fix this by setting the preference when we try to access `deckPath`", "committedDate": "2020-03-17T21:50:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjA4Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394002087", "bodyText": "replace \"\" with anyString()", "author": "david-allison-1", "createdAt": "2020-03-17T22:16:40Z", "path": "AnkiDroid/src/test/java/com/ichi2/preferences/PreferenceExtensionsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.ichi2.preferences;\n+\n+import android.content.SharedPreferences;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+//Unknown issue: @CheckResult should provide warnings on this class when return value is unused, but doesn't.\n+//TODO: The preference mock is messy\n+@RunWith(PowerMockRunner.class)\n+public class PreferenceExtensionsTest {\n+\n+    private static PreferenceExtensions.Supplier<String> UNUSED_SUPPLIER = () -> { throw new UnexpectedException();};\n+    private static PreferenceExtensions.Supplier<String> EXCEPTION_SUPPLIER = () -> { throw new ExpectedException();};\n+\n+    private static final String VALID_KEY = \"VALID\";\n+    private static final String VALID_RESULT = \"WAS VALID KEY\";\n+    private static final String MISSING_KEY = \"INVALID\";\n+    private static final String LAMBDA_RETURN = \"LAMBDA\";\n+\n+    @Mock\n+    private SharedPreferences mMockReferences;\n+\n+    @Mock\n+    private SharedPreferences.Editor mockEditor;\n+\n+    private String getOrSetString(String key, PreferenceExtensions.Supplier<String> supplier) {\n+        return PreferenceExtensions.getOrSetString(mMockReferences, key, supplier);\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        Mockito.when(mMockReferences.contains(VALID_KEY)).thenReturn(true);\n+        Mockito.when(mMockReferences.getString(VALID_KEY, \"\")).thenReturn(VALID_RESULT);", "originalCommit": "569515ae6a3e66aac0e5331371a2d332807ab395", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db10052a4c1f7230b3e29eee77df14ed7176ccfa", "chunk": "diff --git a/AnkiDroid/src/test/java/com/ichi2/preferences/PreferenceExtensionsTest.java b/AnkiDroid/src/test/java/com/ichi2/preferences/PreferenceExtensionsTest.java\nindex b327f6425c..4c565bd670 100644\n--- a/AnkiDroid/src/test/java/com/ichi2/preferences/PreferenceExtensionsTest.java\n+++ b/AnkiDroid/src/test/java/com/ichi2/preferences/PreferenceExtensionsTest.java\n\n@@ -9,6 +9,7 @@ import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.powermock.modules.junit4.PowerMockRunner;\n \n+import static com.ichi2.testutils.AnkiAssert.assertDoesNotThrow;\n import static org.junit.Assert.assertEquals;\n import static org.mockito.ArgumentMatchers.anyString;\n \n"}}, {"oid": "db10052a4c1f7230b3e29eee77df14ed7176ccfa", "url": "https://github.com/ankidroid/Anki-Android/commit/db10052a4c1f7230b3e29eee77df14ed7176ccfa", "message": "Fix \"AnkiDroid directory is inaccessible\" Bug\n\nFixes #5097, #5510\nPartially Addresses #5346 (option can still be set if somehow\npreferences is the first entered screen, but I think that's\nlogically impossible)\n\nThis bug has been pervasive for some time, and I logically believe that\nthis change fixes it, although I haven't verified this empirically.\n\nA user accessing \"Advanced Settings\" would obtain an error:\ndirectory_inaccessible\n\nThis was caused by entering the settings, which set a hardcoded default\nvalue `sdcard/AnkiDroid` without validation which did not match\n`getDefaultAnkiDroidDirectory()`\n\nThis immediately kicks the user out the app and leaves them in a\ncrash loop. They don't know what the actual value is meant to be\n(as they never saw the UI, so they can't easily fix it)\n\nWe fix this by setting the preference when we try to access `deckPath`", "committedDate": "2020-03-17T22:52:56Z", "type": "forcePushed"}, {"oid": "00fb61896e5f4321673a5a9d43f86ca3bff72604", "url": "https://github.com/ankidroid/Anki-Android/commit/00fb61896e5f4321673a5a9d43f86ca3bff72604", "message": "Fix \"AnkiDroid directory is inaccessible\" Bug\n\nFixes #5097, #5510\nPartially Addresses #5346 (option can still be set if somehow\npreferences is the first entered screen, but I think that's\nlogically impossible)\n\nThis bug has been pervasive for some time, and I logically believe that\nthis change fixes it, although I haven't verified this empirically.\n\nA user accessing \"Advanced Settings\" would obtain an error:\ndirectory_inaccessible\n\nThis was caused by entering the settings, which set a hardcoded default\nvalue `sdcard/AnkiDroid` without validation which did not match\n`getDefaultAnkiDroidDirectory()`\n\nThis immediately kicks the user out the app and leaves them in a\ncrash loop. They don't know what the actual value is meant to be\n(as they never saw the UI, so they can't easily fix it)\n\nWe fix this by setting the preference when we try to access `deckPath`", "committedDate": "2020-03-17T22:55:42Z", "type": "commit"}, {"oid": "00fb61896e5f4321673a5a9d43f86ca3bff72604", "url": "https://github.com/ankidroid/Anki-Android/commit/00fb61896e5f4321673a5a9d43f86ca3bff72604", "message": "Fix \"AnkiDroid directory is inaccessible\" Bug\n\nFixes #5097, #5510\nPartially Addresses #5346 (option can still be set if somehow\npreferences is the first entered screen, but I think that's\nlogically impossible)\n\nThis bug has been pervasive for some time, and I logically believe that\nthis change fixes it, although I haven't verified this empirically.\n\nA user accessing \"Advanced Settings\" would obtain an error:\ndirectory_inaccessible\n\nThis was caused by entering the settings, which set a hardcoded default\nvalue `sdcard/AnkiDroid` without validation which did not match\n`getDefaultAnkiDroidDirectory()`\n\nThis immediately kicks the user out the app and leaves them in a\ncrash loop. They don't know what the actual value is meant to be\n(as they never saw the UI, so they can't easily fix it)\n\nWe fix this by setting the preference when we try to access `deckPath`", "committedDate": "2020-03-17T22:55:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODE3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394158172", "bodyText": "Since the auto-review removed the discussion (and didn't flag it a second time).\nI don't like the Extensions[Helper/Util] suffix as Extensions is a subset of both. Happy to go with [Shared]Preference[Utils/Extensions]. Don't know the esosystem well enough to have a preference.", "author": "david-allison-1", "createdAt": "2020-03-18T07:51:36Z", "path": "AnkiDroid/src/main/java/com/ichi2/preferences/PreferenceExtensions.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.ichi2.preferences;\n+\n+import android.content.SharedPreferences;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.NonNull;\n+\n+/** Extension methods over the SharedPreferences class */\n+public class PreferenceExtensions {", "originalCommit": "00fb61896e5f4321673a5a9d43f86ca3bff72604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NjcwNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394376706", "bodyText": "I couldn't find any rule for the naming convention anyway, and don't consider it important, if it did not re-flag that actually matches my failure to locate why it flagged in the first place. resolved -> works for me", "author": "mikehardy", "createdAt": "2020-03-18T14:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1ODE3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDAzOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394680038", "bodyText": "\ud83d\udc1e @FunctionalInterface is apparently only available in API 24. I don't quite understand this, so I'm not sure if it's a bug, but flagging for testing.\nhttps://developer.android.com/studio/write/java8-support", "author": "david-allison-1", "createdAt": "2020-03-18T22:39:47Z", "path": "AnkiDroid/src/main/java/com/ichi2/preferences/PreferenceExtensions.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.ichi2.preferences;\n+\n+import android.content.SharedPreferences;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.NonNull;\n+\n+/** Extension methods over the SharedPreferences class */\n+public class PreferenceExtensions {\n+\n+    /**\n+     * Returns the string value specified by the key, or sets key to the result of the lambda and returns it.<br/>\n+     * This is not designed to be used when bulk editing preferences.<br/>\n+     * Defect #5828 - This is potentially not thread safe and could cause another preference commit to fail.\n+     */\n+    @CheckResult //Not truly an error as this has a side effect, but you should use a \"set\" API for perf.\n+    public static String getOrSetString(@NonNull SharedPreferences target, @NonNull String key, @NonNull Supplier<String> supplier) {\n+        if (target.contains(key)) {\n+            //the default Is never returned. The value might be able be optimised, but the Android API should be better.\n+            return target.getString(key, \"\");\n+        }\n+        String supplied = supplier.get();\n+        target.edit().putString(key, supplied).apply();\n+        return supplied;\n+    }\n+\n+    /** TODO: Move this to Supplier in API 24 */\n+    @FunctionalInterface", "originalCommit": "00fb61896e5f4321673a5a9d43f86ca3bff72604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MDU5Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394780593", "bodyText": "Hmm - I'm sure we'll get reports about that then - for the alphas I kick things out pretty quickly but for the betas and stable I locally test as well just in case, on API16 (lowest that can sync) and API-current. Best bet is for you to use Android Studio's AVD manager and make an API16 emulator to check, and keep it handy", "author": "mikehardy", "createdAt": "2020-03-19T04:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MTExNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/5830#discussion_r394781114", "bodyText": "Android Studio 4 has more desugaring support (which brings Java 8 features to the old JVMs on old Android APIs) https://developer.android.com/studio/preview/features/#j8-desugar but you'd have to check to see if that worked. Best not to move toolchains on a stable branch either so that's not something I really want to contemplate in order to pick this to 2.9", "author": "mikehardy", "createdAt": "2020-03-19T04:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MDAzOA=="}], "type": "inlineReview", "revised_code": null}]}