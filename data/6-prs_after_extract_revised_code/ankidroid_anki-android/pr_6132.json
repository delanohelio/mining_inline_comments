{"pr_number": 6132, "pr_title": "Add Gestures for Flags", "pr_createdAt": "2020-05-08T19:51:08Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6132", "timeline": [{"oid": "ca2dce093578df0afbaf74ff21d56e30773ea8cd", "url": "https://github.com/ankidroid/Anki-Android/commit/ca2dce093578df0afbaf74ff21d56e30773ea8cd", "message": "NF: Add FlagDef interface\n\nAdds validation when flags are expected", "committedDate": "2020-05-08T19:16:01Z", "type": "commit"}, {"oid": "c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "url": "https://github.com/ankidroid/Anki-Android/commit/c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off", "committedDate": "2020-05-08T22:35:20Z", "type": "forcePushed"}, {"oid": "055b5732047a8bd1d8217d41d8bdea6036ccbae9", "url": "https://github.com/ankidroid/Anki-Android/commit/055b5732047a8bd1d8217d41d8bdea6036ccbae9", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off", "committedDate": "2020-05-08T22:36:36Z", "type": "forcePushed"}, {"oid": "59210b4a110455944e87364af01f4ae890ab5b7d", "url": "https://github.com/ankidroid/Anki-Android/commit/59210b4a110455944e87364af01f4ae890ab5b7d", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off", "committedDate": "2020-05-09T22:32:25Z", "type": "forcePushed"}, {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "url": "https://github.com/ankidroid/Anki-Android/commit/c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off", "committedDate": "2020-05-09T22:41:07Z", "type": "commit"}, {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "url": "https://github.com/ankidroid/Anki-Android/commit/c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off", "committedDate": "2020-05-09T22:41:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555422", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "author": "timrae", "createdAt": "2020-05-09T22:43:54Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java", "diffHunk": "@@ -55,6 +55,7 @@\n \n import timber.log.Timber;\n \n+import static com.ichi2.anki.reviewer.CardMarker.*;", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555426", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "timrae", "createdAt": "2020-05-09T22:43:55Z", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTU1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575555", "bodyText": "@david-allison-1 have your test method return true/false and assert on that? or don't worry about it :-). Conformity is important and overrated at the same time if that makes sense", "author": "mikehardy", "createdAt": "2020-05-10T02:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTc4OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575789", "bodyText": "I'd rather not worry about it. I don't think it makes the test unclear. Maintainer's choice \ud83d\ude09\nThe ideal would be to write something along the lines of: https://github.com/nunit/docs/wiki/TestCase-Attribute, but I haven't found a nice Java Library that supports it with decent syntax.", "author": "david-allison-1", "createdAt": "2020-05-10T02:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTg0Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575843", "bodyText": "resolved -> works for me :-)", "author": "mikehardy", "createdAt": "2020-05-10T02:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555427", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "author": "timrae", "createdAt": "2020-05-09T22:43:56Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -131,6 +132,7 @@\n \n import static com.ichi2.anki.cardviewer.CardAppearance.calculateDynamicFontSize;\n import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+import static com.ichi2.anki.reviewer.CardMarker.*;", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTkwOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575908", "bodyText": "Again, this is something I disagree with, because it is used, just not all of the imports taken from the wildcard.", "author": "david-allison-1", "createdAt": "2020-05-10T02:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NjA3Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422576077", "bodyText": "Yeah. I see the point, but I have a hard time finding value in a glob import for a clearly delimited sub-package. It isn't like I'm going to get lost reasoning about what's imported there. It's not java.util.*. That's why I'm letting these tidy sub-package glob imports go. Fine by me", "author": "mikehardy", "createdAt": "2020-05-10T02:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555428", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "timrae", "createdAt": "2020-05-09T22:43:57Z", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+    }\n+\n+    @Test\n+    public void doubleTapBlueUnsets() {", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555429", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "timrae", "createdAt": "2020-05-09T22:43:58Z", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQzMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555431", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "timrae", "createdAt": "2020-05-09T22:43:59Z", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {", "originalCommit": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}