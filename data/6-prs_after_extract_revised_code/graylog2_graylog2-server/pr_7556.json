{"pr_number": 7556, "pr_title": "Store API tokens encrypted in MongoDB", "pr_createdAt": "2020-02-25T16:47:25Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7556", "timeline": [{"oid": "d0120b1817c4dab2588a6486a18deb5846322d08", "url": "https://github.com/Graylog2/graylog2-server/commit/d0120b1817c4dab2588a6486a18deb5846322d08", "message": "Move access token related implementation classes to separate package", "committedDate": "2020-02-24T10:42:54Z", "type": "commit"}, {"oid": "60f997f11717fba5ec520d7a3f536f242dbe9e48", "url": "https://github.com/Graylog2/graylog2-server/commit/60f997f11717fba5ec520d7a3f536f242dbe9e48", "message": "WIP: encrypt tokens when storing in DB, decrypt when reading\n\nThe encryption is not deterministic yet. But it has to be, to get this\nworking. We may need to switch to a different encryption algorithm.", "committedDate": "2020-02-25T16:44:34Z", "type": "commit"}, {"oid": "514de87f62c0e0e40e743251263b35ccb941861d", "url": "https://github.com/Graylog2/graylog2-server/commit/514de87f62c0e0e40e743251263b35ccb941861d", "message": "Merge branch 'master' into api-token-encryption", "committedDate": "2020-02-26T13:46:08Z", "type": "commit"}, {"oid": "64ccea5c1c088cf47d7e54718a8d026247e28a71", "url": "https://github.com/Graylog2/graylog2-server/commit/64ccea5c1c088cf47d7e54718a8d026247e28a71", "message": "Revert encrypt/decrypt methods with byte[] salt\n\nWe won't need it anymore.", "committedDate": "2020-02-26T15:30:19Z", "type": "commit"}, {"oid": "379b0f1aec1a6016fdb8e10e30cd579a4315e881", "url": "https://github.com/Graylog2/graylog2-server/commit/379b0f1aec1a6016fdb8e10e30cd579a4315e881", "message": "Use AES SIV to encrypt the access tokens\n\nThis ensures deterministic cipher text values so we can use the value to\nlookup the tokes in the database.\n\nWe need this because our API token implementation only knows about the\ntoken and has no user account or token name information. Changing this\nto get a more secure implementation would be a breaking API change.", "committedDate": "2020-02-26T16:27:18Z", "type": "commit"}, {"oid": "c17925191717e09ab1614f788a9114240d446a64", "url": "https://github.com/Graylog2/graylog2-server/commit/c17925191717e09ab1614f788a9114240d446a64", "message": "Support access token deletion by using the token ID\n\nPreviously the token deletion endpoint only supported using the plain\ntext token in the URL. This is an issue because URLs will be\nlogged in HTTP server and proxy logs.\n\nThe UI is now using the token ID for deletion.", "committedDate": "2020-02-26T17:57:11Z", "type": "commit"}, {"oid": "2a238f2a3798cab40e25f89ae61e02e8be851823", "url": "https://github.com/Graylog2/graylog2-server/commit/2a238f2a3798cab40e25f89ae61e02e8be851823", "message": "Add missing encrypt() call in token service\n\nThe create() method doesn't use save() but saveWithoutValidation().", "committedDate": "2020-02-26T18:03:23Z", "type": "commit"}, {"oid": "8c3816b235b5c0e049f273b96c84664f13d9d5cd", "url": "https://github.com/Graylog2/graylog2-server/commit/8c3816b235b5c0e049f273b96c84664f13d9d5cd", "message": "Save a \"token_type\" field for each access token\n\nThis will help with migrating access tokens to a new encryption scheme.", "committedDate": "2020-02-26T18:13:57Z", "type": "commit"}, {"oid": "4db568cb9c827131ae5fd5359be1596bf5076039", "url": "https://github.com/Graylog2/graylog2-server/commit/4db568cb9c827131ae5fd5359be1596bf5076039", "message": "Add migration to encrypt existing API access tokens", "committedDate": "2020-02-27T08:40:33Z", "type": "commit"}, {"oid": "8bc7f708633389e8aef29e00d79c1dfc1b7b3dcf", "url": "https://github.com/Graylog2/graylog2-server/commit/8bc7f708633389e8aef29e00d79c1dfc1b7b3dcf", "message": "Add note about encrypted API access tokens to UPGRADING", "committedDate": "2020-02-27T08:41:04Z", "type": "commit"}, {"oid": "d6fbe8ee45b1c4adf1511ca982ac521fccd79f3d", "url": "https://github.com/Graylog2/graylog2-server/commit/d6fbe8ee45b1c4adf1511ca982ac521fccd79f3d", "message": "Adjust TokenList.test.jsx after changes", "committedDate": "2020-02-27T09:00:30Z", "type": "commit"}, {"oid": "83070a5c3ffd450df13bef92e166d51566b23341", "url": "https://github.com/Graylog2/graylog2-server/commit/83070a5c3ffd450df13bef92e166d51566b23341", "message": "Only use 16 bytes for the SIV macKey", "committedDate": "2020-02-27T09:18:03Z", "type": "commit"}, {"oid": "296cbbf50068132ae6327e082681857c2c58bab9", "url": "https://github.com/Graylog2/graylog2-server/commit/296cbbf50068132ae6327e082681857c2c58bab9", "message": "Add some comments", "committedDate": "2020-02-27T09:29:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNDU2OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385134568", "bodyText": "I think we don't need @Nullable for id() (also in Token#create).", "author": "thll", "createdAt": "2020-02-27T13:46:16Z", "path": "graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java", "diffHunk": "@@ -23,10 +23,16 @@\n import org.graylog.autovalue.WithBeanGetter;\n import org.joda.time.DateTime;\n \n+import javax.annotation.Nullable;\n+\n @JsonAutoDetect\n @AutoValue\n @WithBeanGetter\n public abstract class Token {\n+    @JsonProperty\n+    @Nullable", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTQ0NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551445", "bodyText": "\u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T07:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNDU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e9d3d052765f5cda23e6e72492dae42e95fa6ef6", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java b/graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java\nindex 4e12def0b0..c038237ce8 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java\n\n@@ -23,14 +23,11 @@ import com.google.auto.value.AutoValue;\n import org.graylog.autovalue.WithBeanGetter;\n import org.joda.time.DateTime;\n \n-import javax.annotation.Nullable;\n-\n @JsonAutoDetect\n @AutoValue\n @WithBeanGetter\n public abstract class Token {\n     @JsonProperty\n-    @Nullable\n     public abstract String id();\n \n     @JsonProperty\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1MzU2Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385153567", "bodyText": "This will throw a NPE in #fromDBObject when there is no a match for the given ID in the DB.", "author": "thll", "createdAt": "2020-02-27T14:17:37Z", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -60,9 +67,19 @@ public AccessToken load(String token) {\n             LOG.error(\"Multiple access tokens found, this is a serious bug.\");\n             throw new IllegalStateException(\"Access tokens collection has no unique index!\");\n         }\n-        final DBObject tokenObject = objects.get(0);\n-        final Object id = tokenObject.get(\"_id\");\n-        return new AccessTokenImpl((ObjectId) id, tokenObject.toMap());\n+        return fromDBObject(objects.get(0));\n+    }\n+\n+    @Nullable\n+    @Override\n+    public AccessToken loadById(String id) {\n+        try {\n+            return fromDBObject(get(AccessTokenImpl.class, id));", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTUxNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551517", "bodyText": "\u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T07:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1MzU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5b52e6b02a0b21b741cce8b8e5949ba050f6b26c", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\nindex 2efdb03368..0b8751e82d 100644\n--- a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\n+++ b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\n\n@@ -74,12 +74,15 @@ public class AccessTokenServiceImpl extends PersistedServiceImpl implements Acce\n     @Override\n     public AccessToken loadById(String id) {\n         try {\n-            return fromDBObject(get(AccessTokenImpl.class, id));\n+            final DBObject dbObject = get(AccessTokenImpl.class, id);\n+            if (dbObject != null) {\n+                return fromDBObject(dbObject);\n+            }\n         } catch (IllegalArgumentException e) {\n             // Happens when id is not a valid BSON ObjectId\n             LOG.debug(\"Couldn't load access token\", e);\n-            return null;\n         }\n+        return null;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODU1OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385158558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void validateTextAndEntryptionKey(String text, byte[] encryptionKey) {\n          \n          \n            \n                private static void validateTextAndEncryptionKey(String text, byte[] encryptionKey) {", "author": "thll", "createdAt": "2020-02-27T14:25:15Z", "path": "graylog2-server/src/main/java/org/graylog2/security/AESTools.java", "diffHunk": "@@ -55,4 +61,61 @@ public static String decrypt(String cipherText, String encryptionKey, String sal\n         }\n         return null;\n     }\n+\n+    /**\n+     * Encrypt the given plain text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param plainText     the plain text value to encrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the encrypted cipher text or null if encryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String encryptSiv(String plainText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(plainText, encryptionKey);\n+        try {\n+            final byte[] cipherBytes = SIV_MODE.encrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    plainText.getBytes(UTF_8)\n+            );\n+            return Hex.encodeToString(cipherBytes);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't encrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Decrypt the given cipher text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param cipherText    the cipher text value to decrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the decrypted cipher text or null if decryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String decryptSiv(String cipherText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(cipherText, encryptionKey);\n+        try {\n+            final byte[] plainBytes = SIV_MODE.decrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    Hex.decode(cipherText.getBytes(UTF_8))\n+            );\n+            return new String(plainBytes, UTF_8);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't decrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    private static void validateTextAndEntryptionKey(String text, byte[] encryptionKey) {", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjIxNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385602214", "bodyText": "\u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T09:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "59e7264259eb2e0b7bb5b5a719cedfa25b70ed44", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/security/AESTools.java b/graylog2-server/src/main/java/org/graylog2/security/AESTools.java\nindex fdbd8d3fd3..520b1e5d09 100644\n--- a/graylog2-server/src/main/java/org/graylog2/security/AESTools.java\n+++ b/graylog2-server/src/main/java/org/graylog2/security/AESTools.java\n\n@@ -72,7 +72,7 @@ public class AESTools {\n      */\n     @Nullable\n     public static String encryptSiv(String plainText, byte[] encryptionKey) {\n-        validateTextAndEntryptionKey(plainText, encryptionKey);\n+        validateTextAndEncryptionKey(plainText, encryptionKey);\n         try {\n             final byte[] cipherBytes = SIV_MODE.encrypt(\n                     Arrays.copyOf(encryptionKey, 16),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTYyMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385289622", "bodyText": "I think we should add a few more tests:\n\none that loads by ID\none that loads by ID which doesn't exist in the DB\none that generates a token, then loads it from the DB as well and compares it (because there was a bug where we\nwouldn't encrypt it when generating it)", "author": "thll", "createdAt": "2020-02-27T18:24:42Z", "path": "graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java", "diffHunk": "@@ -30,6 +33,9 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class AccessTokenServiceImplTest {", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTY0NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551644", "bodyText": "Agreed, tests have been added. \u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T07:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "5b52e6b02a0b21b741cce8b8e5949ba050f6b26c", "chunk": "diff --git a/graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java b/graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java\nindex 4271ae8941..6896c231ec 100644\n--- a/graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java\n+++ b/graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java\n\n@@ -29,7 +34,7 @@ import org.junit.Test;\n \n import java.util.List;\n \n-import static org.assertj.jodatime.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDk4NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385300985", "bodyText": "I'm wondering if this is an implementation detail that should live in AccessTokenImpl.java instead. The type is not accessible via interface methods so it might be confusing that the enum is here.", "author": "thll", "createdAt": "2020-02-27T18:45:55Z", "path": "graylog2-server/src/main/java/org/graylog2/security/AccessToken.java", "diffHunk": "@@ -23,6 +23,24 @@\n  * @author Dennis Oelkers <dennis@torch.sh>\n  */\n public interface AccessToken extends Persisted {\n+    enum Type {", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMzIyOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385603229", "bodyText": "Agreed! \u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T09:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ada38836ea0b9a0bdb3c41891f2a2d2896005ba8", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/security/AccessToken.java b/graylog2-server/src/main/java/org/graylog2/security/AccessToken.java\nindex 194ed89c26..74ee5531c5 100644\n--- a/graylog2-server/src/main/java/org/graylog2/security/AccessToken.java\n+++ b/graylog2-server/src/main/java/org/graylog2/security/AccessToken.java\n\n@@ -23,24 +23,6 @@ import org.joda.time.DateTime;\n  * @author Dennis Oelkers <dennis@torch.sh>\n  */\n public interface AccessToken extends Persisted {\n-    enum Type {\n-        PLAINTEXT(0), AESSIV(1);\n-\n-        private final int type;\n-\n-        Type(int type) {\n-            this.type = type;\n-        }\n-\n-        public int getIntValue() {\n-            return type;\n-        }\n-\n-        public static Type defaultType() {\n-            return AESSIV;\n-        }\n-    }\n-\n     DateTime getLastAccess();\n \n     String getUserName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMzA5NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385303095", "bodyText": "I think this deserves a comment, explaining that the type is used to state the encryption algorithm in the database.", "author": "thll", "createdAt": "2020-02-27T18:49:55Z", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java", "diffHunk": "@@ -81,6 +83,7 @@ public String getToken() {\n     @Override\n     public void setToken(String token) {\n         fields.put(TOKEN, token);\n+        fields.put(TOKEN_TYPE, Type.defaultType().getIntValue());", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYxMDAxNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385610016", "bodyText": "\u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T10:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMzA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a6d2ce8a6dd7ff328a068838319381402578ae8b", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java\nindex d0ef6e62c8..8c58ce1790 100644\n--- a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java\n+++ b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java\n\n@@ -83,6 +101,7 @@ public class AccessTokenImpl extends PersistedImpl implements AccessToken {\n     @Override\n     public void setToken(String token) {\n         fields.put(TOKEN, token);\n+        // The token type is used to state the algorithm that is used to encrypt the value\n         fields.put(TOKEN_TYPE, Type.defaultType().getIntValue());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU4OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385304588", "bodyText": "I guess we should add minimal documentation, explaining that we are encrypting the token on storage and decrypting on reading and that we always have them encrypted so we don't have too look at the token type.", "author": "thll", "createdAt": "2020-02-27T18:52:37Z", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -14,43 +14,50 @@\n  * You should have received a copy of the GNU General Public License\n  * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n  */\n-package org.graylog2.security;\n+package org.graylog2.security.token;\n \n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.mongodb.BasicDBObject;\n import com.mongodb.BasicDBObjectBuilder;\n import com.mongodb.DBObject;\n import com.mongodb.DuplicateKeyException;\n+import org.apache.commons.lang3.StringUtils;\n import org.bson.types.ObjectId;\n import org.graylog2.database.MongoConnection;\n import org.graylog2.database.PersistedServiceImpl;\n import org.graylog2.plugin.Tools;\n import org.graylog2.plugin.database.ValidationException;\n+import org.graylog2.security.AccessToken;\n+import org.graylog2.security.AccessTokenService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nullable;\n import javax.inject.Inject;\n import java.math.BigInteger;\n import java.security.SecureRandom;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class AccessTokenServiceImpl extends PersistedServiceImpl implements AccessTokenService {", "originalCommit": "296cbbf50068132ae6327e082681857c2c58bab9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTg4NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385665884", "bodyText": "\u2714\ufe0f", "author": "bernd", "createdAt": "2020-02-28T12:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c5c619716a0396eec74bf0e036befe8885cf3d33", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\nindex 2efdb03368..5d4e992e00 100644\n--- a/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\n+++ b/graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java\n\n@@ -41,6 +41,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+/**\n+ * Provides access to access tokens in the database.\n+ * <p/>\n+ * The token value will automatically be encrypted/decrypted when storing/loading the token object from the database.\n+ * That means the token value is encrypted at rest but the loaded {@link AccessToken} always contains the plain text value.\n+ */\n public class AccessTokenServiceImpl extends PersistedServiceImpl implements AccessTokenService {\n     private static final Logger LOG = LoggerFactory.getLogger(AccessTokenServiceImpl.class);\n \n"}}, {"oid": "41e2346080c3414d5df5ab970cd95b01ebae8ba7", "url": "https://github.com/Graylog2/graylog2-server/commit/41e2346080c3414d5df5ab970cd95b01ebae8ba7", "message": "Merge branch 'master' into api-token-encryption", "committedDate": "2020-02-27T19:32:26Z", "type": "commit"}, {"oid": "e9d3d052765f5cda23e6e72492dae42e95fa6ef6", "url": "https://github.com/Graylog2/graylog2-server/commit/e9d3d052765f5cda23e6e72492dae42e95fa6ef6", "message": "Token id doesn't need to be Nullable", "committedDate": "2020-02-28T07:47:27Z", "type": "commit"}, {"oid": "5b52e6b02a0b21b741cce8b8e5949ba050f6b26c", "url": "https://github.com/Graylog2/graylog2-server/commit/5b52e6b02a0b21b741cce8b8e5949ba050f6b26c", "message": "Avoid NPE in AccessTokenServiceImpl#loadById\n\nAlso add more tests to check that loadById() works correctly and that\ncreate() actually encrypts the token value.", "committedDate": "2020-02-28T07:52:36Z", "type": "commit"}, {"oid": "59e7264259eb2e0b7bb5b5a719cedfa25b70ed44", "url": "https://github.com/Graylog2/graylog2-server/commit/59e7264259eb2e0b7bb5b5a719cedfa25b70ed44", "message": "Fix typo in private function name in AESTools", "committedDate": "2020-02-28T09:53:50Z", "type": "commit"}, {"oid": "ada38836ea0b9a0bdb3c41891f2a2d2896005ba8", "url": "https://github.com/Graylog2/graylog2-server/commit/ada38836ea0b9a0bdb3c41891f2a2d2896005ba8", "message": "Move access token type enum to AccessTokenImpl\n\nIt's actually an implementation detail and should not be in the\ninterface.", "committedDate": "2020-02-28T09:58:45Z", "type": "commit"}, {"oid": "a6d2ce8a6dd7ff328a068838319381402578ae8b", "url": "https://github.com/Graylog2/graylog2-server/commit/a6d2ce8a6dd7ff328a068838319381402578ae8b", "message": "Add comments about the token_type field", "committedDate": "2020-02-28T10:03:08Z", "type": "commit"}, {"oid": "8ae8bf214c34df69e6888c3dc958301f2d65f644", "url": "https://github.com/Graylog2/graylog2-server/commit/8ae8bf214c34df69e6888c3dc958301f2d65f644", "message": "Remove AccessTokenImpl.Type.defaultType()\n\nWe think it's better to make this explicit.", "committedDate": "2020-02-28T12:09:54Z", "type": "commit"}, {"oid": "c5c619716a0396eec74bf0e036befe8885cf3d33", "url": "https://github.com/Graylog2/graylog2-server/commit/c5c619716a0396eec74bf0e036befe8885cf3d33", "message": "Add some javadoc to AccessTokenServiceImpl", "committedDate": "2020-02-28T12:10:38Z", "type": "commit"}, {"oid": "6f591e70aa84b31d95c55ae969cbbe1bcb466a38", "url": "https://github.com/Graylog2/graylog2-server/commit/6f591e70aa84b31d95c55ae969cbbe1bcb466a38", "message": "Set index on \"token_type\" field", "committedDate": "2020-02-28T12:20:40Z", "type": "commit"}, {"oid": "a740de73c05065e61125ed39d4c35268f1d01f38", "url": "https://github.com/Graylog2/graylog2-server/commit/a740de73c05065e61125ed39d4c35268f1d01f38", "message": "Move classes back up", "committedDate": "2020-02-28T12:33:21Z", "type": "commit"}, {"oid": "043814a660eacea5edb82f4e9df05342eba6b6c7", "url": "https://github.com/Graylog2/graylog2-server/commit/043814a660eacea5edb82f4e9df05342eba6b6c7", "message": "Fix enum naming", "committedDate": "2020-02-28T12:36:35Z", "type": "commit"}]}