{"pr_number": 8554, "pr_title": "type check unary NOT operator", "pr_createdAt": "2020-07-15T16:22:49Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8554", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyODQzMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8554#discussion_r455828432", "bodyText": "I might be nitpicking here, but wouldn't it be more correct to use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!Boolean.class.equals(type)) {\n          \n          \n            \n                        if (!Boolean.class.isAssignableFrom(type)) {", "author": "mpfz0r", "createdAt": "2020-07-16T14:27:18Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java", "diffHunk": "@@ -758,6 +758,15 @@ public void exitOr(RuleLangParser.OrContext ctx) {\n             checkBinaryExpression(ctx);\n         }\n \n+        @Override\n+        public void exitNot(RuleLangParser.NotContext ctx) {\n+            final Expression expression = parseContext.expressions().get(ctx.expression());\n+            Class type = expression.getType();\n+            if (!Boolean.class.equals(type)) {", "originalCommit": "6c23ac8d93a2fcf136dde5ff75482b37ea9f4774", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMjQ4NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8554#discussion_r455832484", "bodyText": "We could do that but Boolean is a final class, so it's effectively identical :)", "author": "kroepke", "createdAt": "2020-07-16T14:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyODQzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3a3826221f0ecc2d7ba4ac649ac33dc5b3bef682", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java\nindex 99cae8eb84..74868d2e45 100644\n--- a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java\n+++ b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java\n\n@@ -762,7 +762,7 @@ public class PipelineRuleParser {\n         public void exitNot(RuleLangParser.NotContext ctx) {\n             final Expression expression = parseContext.expressions().get(ctx.expression());\n             Class type = expression.getType();\n-            if (!Boolean.class.equals(type)) {\n+            if (!Boolean.class.isAssignableFrom(type)) {\n                 parseContext.addError(new IncompatibleType(ctx, Boolean.class, type));\n             }\n         }\n"}}, {"oid": "92dcbc92e25bb93d69f185b5af51ebc68b558a76", "url": "https://github.com/Graylog2/graylog2-server/commit/92dcbc92e25bb93d69f185b5af51ebc68b558a76", "message": "type check unary NOT operator\n\nthe type checker did not properly check the sub expression type for the NOT operator, which could lead to runtime errors\nNOT binds closer than comparison (==), which is a common source of mistakes\nin this case a string valued function as being put into `NOT func() == \"string\"` which parses as `(NOT func()) == \"string\"`\nthe type checker did not pick up that `func()` wasn't boolean valued and the interpreter failed at runtime due to a classcast exception.\n\nafter this change the type checker requires the expression passed to NOT to be of boolean type and makes this a parse-time error\n\nthis should not have any incompatibility issues, because it never executed successfully (unless the expression was short-circuited). in any case, rules like this are severely broken and need to be fixed by the user", "committedDate": "2020-10-09T11:51:55Z", "type": "commit"}, {"oid": "e7a21a734f60ba8a495e61f8da5e874553ca2134", "url": "https://github.com/Graylog2/graylog2-server/commit/e7a21a734f60ba8a495e61f8da5e874553ca2134", "message": "Fix forbidden-apis warning", "committedDate": "2020-10-09T11:51:55Z", "type": "commit"}, {"oid": "e7a21a734f60ba8a495e61f8da5e874553ca2134", "url": "https://github.com/Graylog2/graylog2-server/commit/e7a21a734f60ba8a495e61f8da5e874553ca2134", "message": "Fix forbidden-apis warning", "committedDate": "2020-10-09T11:51:55Z", "type": "forcePushed"}, {"oid": "3a3826221f0ecc2d7ba4ac649ac33dc5b3bef682", "url": "https://github.com/Graylog2/graylog2-server/commit/3a3826221f0ecc2d7ba4ac649ac33dc5b3bef682", "message": "use isAssignableFrom instead of equals\r\n\r\nfunctionally identical, but using isAssignableFrom makes the intent clear\n\nCo-authored-by: Marco Pfatschbacher <marco@graylog.com>", "committedDate": "2020-10-09T12:21:33Z", "type": "commit"}, {"oid": "3014b1c3b0a4d2bb0cf4fcf039511816ade84a90", "url": "https://github.com/Graylog2/graylog2-server/commit/3014b1c3b0a4d2bb0cf4fcf039511816ade84a90", "message": "Merge remote-tracking branch 'origin/master' into unary-not-typecheck", "committedDate": "2020-11-09T14:57:38Z", "type": "commit"}, {"oid": "2d38858a6aae33cf16c4b02f649f618aeedbfa82", "url": "https://github.com/Graylog2/graylog2-server/commit/2d38858a6aae33cf16c4b02f649f618aeedbfa82", "message": "Log unparseable pipeline rules", "committedDate": "2020-11-09T15:08:37Z", "type": "commit"}]}