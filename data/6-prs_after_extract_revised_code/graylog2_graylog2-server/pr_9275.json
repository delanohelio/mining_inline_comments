{"pr_number": 9275, "pr_title": "Check periodically if running ES is compatible with initial ES version.", "pr_createdAt": "2020-10-26T13:15:37Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/9275", "timeline": [{"oid": "4e78c027741e2bffd778ded0506ab97c6ee46323", "url": "https://github.com/Graylog2/graylog2-server/commit/4e78c027741e2bffd778ded0506ab97c6ee46323", "message": "Adding test case for downgrading ES.", "committedDate": "2020-10-26T13:21:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzcyMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512053723", "bodyText": "I think this can run in the daemon thread pool. What do you think?", "author": "bernd", "createdAt": "2020-10-26T15:32:31Z", "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;", "originalCommit": "c087aade3da2ced1f096c7c709f30e88a5814f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTUzNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512725537", "bodyText": "Good point!", "author": "dennisoelkers", "createdAt": "2020-10-27T14:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a3f93f731fe8dd125906eb28548030b4101dfcab", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java b/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java\ndeleted file mode 100644\nindex a86c9d5d0d..0000000000\n--- a/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java\n+++ /dev/null\n\n@@ -1,125 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.periodical;\n-\n-import org.graylog2.notifications.Notification;\n-import org.graylog2.notifications.NotificationService;\n-import org.graylog2.plugin.Version;\n-import org.graylog2.plugin.periodical.Periodical;\n-import org.graylog2.storage.ElasticsearchVersion;\n-import org.graylog2.storage.versionprobe.VersionProbe;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nullable;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import java.net.URI;\n-import java.util.List;\n-import java.util.Optional;\n-\n-public class ESVersionCheckPeriodical extends Periodical {\n-    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n-    private final Version initialElasticsearchVersion;\n-    private final Optional<Version> versionOverride;\n-    private final List<URI> elasticsearchHosts;\n-    private final VersionProbe versionProbe;\n-    private final NotificationService notificationService;\n-\n-    @Inject\n-    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n-                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n-                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n-                                    VersionProbe versionProbe,\n-                                    NotificationService notificationService) {\n-        this.initialElasticsearchVersion = elasticsearchVersion;\n-        this.versionOverride = Optional.ofNullable(versionOverride);\n-        this.elasticsearchHosts = elasticsearchHosts;\n-        this.versionProbe = versionProbe;\n-        this.notificationService = notificationService;\n-    }\n-\n-    @Override\n-    public boolean runsForever() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean stopOnGracefulShutdown() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean masterOnly() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean startOnThisNode() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isDaemon() {\n-        return false;\n-    }\n-\n-    @Override\n-    public int getInitialDelaySeconds() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public int getPeriodSeconds() {\n-        return 30;\n-    }\n-\n-    @Override\n-    protected Logger getLogger() {\n-        return LOG;\n-    }\n-\n-    @Override\n-    public void doRun() {\n-        if (versionOverride.isPresent()) {\n-            LOG.debug(\"Elasticsearch version is set manually. Not running check.\");\n-            return;\n-        }\n-\n-        final Optional<Version> probedVersion = this.versionProbe.probe(this.elasticsearchHosts);\n-\n-        probedVersion.ifPresent(version -> {\n-            if (compatible(this.initialElasticsearchVersion, version)) {\n-                notificationService.fixed(Notification.Type.ES_VERSION_MISMATCH);\n-            } else {\n-                LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n-                        \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n-                        \" - a restart is required!\");\n-                final Notification notification = notificationService.buildNow()\n-                        .addType(Notification.Type.ES_VERSION_MISMATCH)\n-                        .addSeverity(Notification.Severity.URGENT)\n-                        .addDetail(\"initial_version\", initialElasticsearchVersion.toString())\n-                        .addDetail(\"current_version\", version.toString());\n-                notificationService.publishIfFirst(notification);\n-            }\n-        });\n-    }\n-\n-    private boolean compatible(Version initialElasticsearchMajorVersion, Version version) {\n-        return initialElasticsearchMajorVersion.getVersion().getMajorVersion() == version.getVersion().getMajorVersion();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NjEyMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512056121", "bodyText": "Tiny nitpick: use placeholder instead of manual string concat makes it a bit more readable. \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n          \n          \n            \n                                    \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n          \n          \n            \n                                    \" - a restart is required!\");\n          \n          \n            \n                            LOG.warn(\"Elasticsearch version currently running ({}) is incompatible with the \" +\n          \n          \n            \n                                    \"one Graylog was started with ({}) - a restart is required!\", version, initialElasticsearchVersion);", "author": "bernd", "createdAt": "2020-10-26T15:35:32Z", "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int getInitialDelaySeconds() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public int getPeriodSeconds() {\n+        return 30;\n+    }\n+\n+    @Override\n+    protected Logger getLogger() {\n+        return LOG;\n+    }\n+\n+    @Override\n+    public void doRun() {\n+        if (versionOverride.isPresent()) {\n+            LOG.debug(\"Elasticsearch version is set manually. Not running check.\");\n+            return;\n+        }\n+\n+        final Optional<Version> probedVersion = this.versionProbe.probe(this.elasticsearchHosts);\n+\n+        probedVersion.ifPresent(version -> {\n+            if (compatible(this.initialElasticsearchVersion, version)) {\n+                notificationService.fixed(Notification.Type.ES_VERSION_MISMATCH);\n+            } else {\n+                LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n+                        \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n+                        \" - a restart is required!\");", "originalCommit": "c087aade3da2ced1f096c7c709f30e88a5814f8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTMyNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512725325", "bodyText": "Indeed! :)", "author": "dennisoelkers", "createdAt": "2020-10-27T14:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3f93f731fe8dd125906eb28548030b4101dfcab", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java b/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java\ndeleted file mode 100644\nindex a86c9d5d0d..0000000000\n--- a/graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java\n+++ /dev/null\n\n@@ -1,125 +0,0 @@\n-/**\n- * This file is part of Graylog.\n- *\n- * Graylog is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Graylog is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-package org.graylog2.periodical;\n-\n-import org.graylog2.notifications.Notification;\n-import org.graylog2.notifications.NotificationService;\n-import org.graylog2.plugin.Version;\n-import org.graylog2.plugin.periodical.Periodical;\n-import org.graylog2.storage.ElasticsearchVersion;\n-import org.graylog2.storage.versionprobe.VersionProbe;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.annotation.Nullable;\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import java.net.URI;\n-import java.util.List;\n-import java.util.Optional;\n-\n-public class ESVersionCheckPeriodical extends Periodical {\n-    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n-    private final Version initialElasticsearchVersion;\n-    private final Optional<Version> versionOverride;\n-    private final List<URI> elasticsearchHosts;\n-    private final VersionProbe versionProbe;\n-    private final NotificationService notificationService;\n-\n-    @Inject\n-    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n-                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n-                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n-                                    VersionProbe versionProbe,\n-                                    NotificationService notificationService) {\n-        this.initialElasticsearchVersion = elasticsearchVersion;\n-        this.versionOverride = Optional.ofNullable(versionOverride);\n-        this.elasticsearchHosts = elasticsearchHosts;\n-        this.versionProbe = versionProbe;\n-        this.notificationService = notificationService;\n-    }\n-\n-    @Override\n-    public boolean runsForever() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean stopOnGracefulShutdown() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean masterOnly() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean startOnThisNode() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isDaemon() {\n-        return false;\n-    }\n-\n-    @Override\n-    public int getInitialDelaySeconds() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public int getPeriodSeconds() {\n-        return 30;\n-    }\n-\n-    @Override\n-    protected Logger getLogger() {\n-        return LOG;\n-    }\n-\n-    @Override\n-    public void doRun() {\n-        if (versionOverride.isPresent()) {\n-            LOG.debug(\"Elasticsearch version is set manually. Not running check.\");\n-            return;\n-        }\n-\n-        final Optional<Version> probedVersion = this.versionProbe.probe(this.elasticsearchHosts);\n-\n-        probedVersion.ifPresent(version -> {\n-            if (compatible(this.initialElasticsearchVersion, version)) {\n-                notificationService.fixed(Notification.Type.ES_VERSION_MISMATCH);\n-            } else {\n-                LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n-                        \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n-                        \" - a restart is required!\");\n-                final Notification notification = notificationService.buildNow()\n-                        .addType(Notification.Type.ES_VERSION_MISMATCH)\n-                        .addSeverity(Notification.Severity.URGENT)\n-                        .addDetail(\"initial_version\", initialElasticsearchVersion.toString())\n-                        .addDetail(\"current_version\", version.toString());\n-                notificationService.publishIfFirst(notification);\n-            }\n-        });\n-    }\n-\n-    private boolean compatible(Version initialElasticsearchMajorVersion, Version version) {\n-        return initialElasticsearchMajorVersion.getVersion().getMajorVersion() == version.getVersion().getMajorVersion();\n-    }\n-}\n"}}, {"oid": "a3f93f731fe8dd125906eb28548030b4101dfcab", "url": "https://github.com/Graylog2/graylog2-server/commit/a3f93f731fe8dd125906eb28548030b4101dfcab", "message": "Adding custom notification shown when ES version mismatches.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "a7d05bf5da01ddcc231969a819989328e6fecdc5", "url": "https://github.com/Graylog2/graylog2-server/commit/a7d05bf5da01ddcc231969a819989328e6fecdc5", "message": "Returning full version for better reusability, logging it here instead of `VersionProbe`.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "59d9a432415508036fbc6ec0568a6b083dc94efa", "url": "https://github.com/Graylog2/graylog2-server/commit/59d9a432415508036fbc6ec0568a6b083dc94efa", "message": "Reducing to major version for driver provisioning.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "88f9bc5b3ffda121337c0459ceea6741fad3f1d3", "url": "https://github.com/Graylog2/graylog2-server/commit/88f9bc5b3ffda121337c0459ceea6741fad3f1d3", "message": "Adding test cases.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "5a7b5d5427950f6e369f1c3be0c64c92449a6481", "url": "https://github.com/Graylog2/graylog2-server/commit/5a7b5d5427950f6e369f1c3be0c64c92449a6481", "message": "Adding and binding periodical to check for ES version compatibility.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "21fd54c19872e0a1bc249aa9c60fa4ce9788ada8", "url": "https://github.com/Graylog2/graylog2-server/commit/21fd54c19872e0a1bc249aa9c60fa4ce9788ada8", "message": "Adding test case for downgrading ES.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "4cd21fd696dd26027b30cbb4fa55fcf9b25b16a0", "url": "https://github.com/Graylog2/graylog2-server/commit/4cd21fd696dd26027b30cbb4fa55fcf9b25b16a0", "message": "Using actual variables in log message.", "committedDate": "2020-10-27T14:08:23Z", "type": "commit"}, {"oid": "9f3605c7d8d986880c00b1d83f25564a0b8338dc", "url": "https://github.com/Graylog2/graylog2-server/commit/9f3605c7d8d986880c00b1d83f25564a0b8338dc", "message": "Use daemon pool and placeholders.", "committedDate": "2020-10-27T14:11:27Z", "type": "commit"}, {"oid": "9f3605c7d8d986880c00b1d83f25564a0b8338dc", "url": "https://github.com/Graylog2/graylog2-server/commit/9f3605c7d8d986880c00b1d83f25564a0b8338dc", "message": "Use daemon pool and placeholders.", "committedDate": "2020-10-27T14:11:27Z", "type": "forcePushed"}]}