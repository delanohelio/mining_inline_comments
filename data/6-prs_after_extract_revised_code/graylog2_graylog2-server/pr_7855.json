{"pr_number": 7855, "pr_title": "String Interpolation for Pipeline Rules", "pr_createdAt": "2020-04-09T05:58:11Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7855", "timeline": [{"oid": "c3818053f18e8da9ec4d93ed6793fc6a2be328ea", "url": "https://github.com/Graylog2/graylog2-server/commit/c3818053f18e8da9ec4d93ed6793fc6a2be328ea", "message": "create LiteralExpression", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "2d6f3d5e1738810c8a7f45a4412ac5659966d090", "url": "https://github.com/Graylog2/graylog2-server/commit/2d6f3d5e1738810c8a7f45a4412ac5659966d090", "message": "handle string in AdditionExpression", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "ee574ce42e98e27c497e5e6569ea8088624426af", "url": "https://github.com/Graylog2/graylog2-server/commit/ee574ce42e98e27c497e5e6569ea8088624426af", "message": "exitAddition already ensure that left & right type are the same", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "28bb0a5e0714b83c8fe2d506e3be0e369f6a11f1", "url": "https://github.com/Graylog2/graylog2-server/commit/28bb0a5e0714b83c8fe2d506e3be0e369f6a11f1", "message": "add unit test", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "52ada60cb79690bebd775098d91f19c466cc8e3a", "url": "https://github.com/Graylog2/graylog2-server/commit/52ada60cb79690bebd775098d91f19c466cc8e3a", "message": "add third member to expression to be sure", "committedDate": "2020-04-09T10:32:27Z", "type": "commit"}, {"oid": "52ada60cb79690bebd775098d91f19c466cc8e3a", "url": "https://github.com/Graylog2/graylog2-server/commit/52ada60cb79690bebd775098d91f19c466cc8e3a", "message": "add third member to expression to be sure", "committedDate": "2020-04-09T10:32:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNjMyMA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409406320", "bodyText": "Please format whitespace here according to the rest of the file (space before and after keywords, between ) and { and no inner space in () expressions.", "author": "kroepke", "createdAt": "2020-04-16T09:16:29Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\nindex c7058c7657..6c3b8df094 100644\n--- a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n+++ b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n\n@@ -91,12 +91,13 @@ public class AdditionExpression extends BinaryExpression implements NumericExpre\n             } else {\n                 return new Duration(right, left);\n             }\n-        }else if(String.class.equals(type) ){\n-            if(!isPlus){\n+        } else if(String.class.equals(type)) {\n+            if (!isPlus) {\n                 return null;\n             }\n-            final String left = (String) leftValue;\n-            final String right = (String) rightValue;\n+\n+            final String left = String.valueOf(leftValue);\n+            final String right = String.valueOf(rightValue);\n             return left + right;\n         }\n         if (isIntegral()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODE2Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408162", "bodyText": "Both this and the next line warn about Casting 'leftValue' to 'String' may produce 'ClassCastException'.\nWhile technically the code cannot throw that exception (leftValue is a string because we checked and rightValue has to be a string, too, because of the parser/typechecker checks, we try to avoid warnings in code when possible.\nMy suggestion would be to rewrite this as String.valueOf(leftValue) to be future proof.", "author": "kroepke", "createdAt": "2020-04-16T09:19:15Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;\n+            }\n+            final String left = (String) leftValue;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\nindex c7058c7657..6c3b8df094 100644\n--- a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n+++ b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n\n@@ -91,12 +91,13 @@ public class AdditionExpression extends BinaryExpression implements NumericExpre\n             } else {\n                 return new Duration(right, left);\n             }\n-        }else if(String.class.equals(type) ){\n-            if(!isPlus){\n+        } else if(String.class.equals(type)) {\n+            if (!isPlus) {\n                 return null;\n             }\n-            final String left = (String) leftValue;\n-            final String right = (String) rightValue;\n+\n+            final String left = String.valueOf(leftValue);\n+            final String right = String.valueOf(rightValue);\n             return left + right;\n         }\n         if (isIntegral()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODIzNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408236", "bodyText": "same as above", "author": "kroepke", "createdAt": "2020-04-16T09:19:24Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;\n+            }\n+            final String left = (String) leftValue;\n+            final String right = (String) rightValue;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\nindex c7058c7657..6c3b8df094 100644\n--- a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n+++ b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n\n@@ -91,12 +91,13 @@ public class AdditionExpression extends BinaryExpression implements NumericExpre\n             } else {\n                 return new Duration(right, left);\n             }\n-        }else if(String.class.equals(type) ){\n-            if(!isPlus){\n+        } else if(String.class.equals(type)) {\n+            if (!isPlus) {\n                 return null;\n             }\n-            final String left = (String) leftValue;\n-            final String right = (String) rightValue;\n+\n+            final String left = String.valueOf(leftValue);\n+            final String right = String.valueOf(rightValue);\n             return left + right;\n         }\n         if (isIntegral()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwODY1OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409408658", "bodyText": "Please change the name to stringConcat to look the same as the other tests.\nThat also requires the file string_concat.txt to be stringConcat.txt below.", "author": "kroepke", "createdAt": "2020-04-16T09:20:01Z", "path": "graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java", "diffHunk": "@@ -362,6 +362,15 @@ public static void registerFunctions() {\n         functionRegistry = new FunctionRegistry(functions);\n     }\n \n+    @Test\n+    public void string_concat(){", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "chunk": "diff --git a/graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java b/graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java\nindex c7fdae5872..648b36244c 100644\n--- a/graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java\n+++ b/graylog2-server/src/test/java/org/graylog/plugins/pipelineprocessor/functions/FunctionsSnippetsTest.java\n\n@@ -363,7 +363,7 @@ public class FunctionsSnippetsTest extends BaseParserTest {\n     }\n \n     @Test\n-    public void string_concat(){\n+    public void stringConcat(){\n         final Rule rule = parser.parseRule(ruleForTest(), false);\n         final Message message = evaluateRule(rule, new Message(\"Dummy Message\", \"test\", Tools.nowUTC()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMTkwMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r409411901", "bodyText": "That is the correct return value, but I think the type checker should raise an error to the user when it sees this.\nThe corresponding code is at \n  \n    \n      graylog2-server/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java\n    \n    \n        Lines 777 to 780\n      in\n      eb392d9\n    \n    \n    \n    \n\n        \n          \n           if (leftDate && rightDate) { \n        \n\n        \n          \n               if (addExpression.isPlus()) { \n        \n\n        \n          \n                   parseContext.addError(new InvalidOperation(ctx, addExpression, \"Unable to add two dates\")); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nIn that if/else I think it should have a check for leftType/rightType being String, and then in an extra if check for !isPlus() which then raises a properly described InvalidOperation error. That way the user doesn't get surprised at runtime.", "author": "kroepke", "createdAt": "2020-04-16T09:25:06Z", "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java", "diffHunk": "@@ -92,6 +91,13 @@ public Object evaluateUnsafe(EvaluationContext context) {\n             } else {\n                 return new Duration(right, left);\n             }\n+        }else if(String.class.equals(type) ){\n+            if(!isPlus){\n+                return null;", "originalCommit": "52ada60cb79690bebd775098d91f19c466cc8e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3ODc3Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7855#discussion_r410478776", "bodyText": "Thanks I missed that, I think It's ok now !", "author": "rmanibus", "createdAt": "2020-04-17T21:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxMTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\nindex c7058c7657..6c3b8df094 100644\n--- a/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n+++ b/graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/ast/expressions/AdditionExpression.java\n\n@@ -91,12 +91,13 @@ public class AdditionExpression extends BinaryExpression implements NumericExpre\n             } else {\n                 return new Duration(right, left);\n             }\n-        }else if(String.class.equals(type) ){\n-            if(!isPlus){\n+        } else if(String.class.equals(type)) {\n+            if (!isPlus) {\n                 return null;\n             }\n-            final String left = (String) leftValue;\n-            final String right = (String) rightValue;\n+\n+            final String left = String.valueOf(leftValue);\n+            final String right = String.valueOf(rightValue);\n             return left + right;\n         }\n         if (isIntegral()) {\n"}}, {"oid": "2da79f8541feb14c74d712a66ce8fb77da1a45da", "url": "https://github.com/Graylog2/graylog2-server/commit/2da79f8541feb14c74d712a66ce8fb77da1a45da", "message": "handle string concatenation in type checker", "committedDate": "2020-04-17T21:23:50Z", "type": "commit"}]}