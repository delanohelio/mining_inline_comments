{"pr_number": 8459, "pr_title": "Implement `ClusterAdapter` for ES7.", "pr_createdAt": "2020-07-01T13:25:29Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8459", "timeline": [{"oid": "d0412ac0c54f99ecfdef0bfb07bdbb6ad9b59a8f", "url": "https://github.com/Graylog2/graylog2-server/commit/d0412ac0c54f99ecfdef0bfb07bdbb6ad9b59a8f", "message": "Adjusting test for index mapping factory.", "committedDate": "2020-07-01T15:11:35Z", "type": "forcePushed"}, {"oid": "a1288724ccef9107cc36010158e3a44090f066a8", "url": "https://github.com/Graylog2/graylog2-server/commit/a1288724ccef9107cc36010158e3a44090f066a8", "message": "Adjusting test for index mapping factory.", "committedDate": "2020-07-01T15:12:16Z", "type": "forcePushed"}, {"oid": "717cf118eb631004140a32f06e921507c8e96353", "url": "https://github.com/Graylog2/graylog2-server/commit/717cf118eb631004140a32f06e921507c8e96353", "message": "Adjusting test for index mapping factory.", "committedDate": "2020-07-02T07:33:44Z", "type": "forcePushed"}, {"oid": "565230e1c96b7783812a6fd00e765fa87dc05805", "url": "https://github.com/Graylog2/graylog2-server/commit/565230e1c96b7783812a6fd00e765fa87dc05805", "message": "Moving duplicated `statsForIndices` method to `Cluster`, exposing its used methods in adapter interface.", "committedDate": "2020-07-06T11:51:24Z", "type": "forcePushed"}, {"oid": "f64c9dd8d8c8a2cedeb1794066efc5f1f3e0aac3", "url": "https://github.com/Graylog2/graylog2-server/commit/f64c9dd8d8c8a2cedeb1794066efc5f1f3e0aac3", "message": "Moving duplicated `statsForIndices` method to `Cluster`, exposing its used methods in adapter interface.", "committedDate": "2020-07-08T11:02:00Z", "type": "forcePushed"}, {"oid": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "url": "https://github.com/Graylog2/graylog2-server/commit/8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "message": "Moving duplicated `statsForIndices` method to `Cluster`, exposing its used methods in adapter interface.", "committedDate": "2020-07-09T08:04:25Z", "type": "forcePushed"}, {"oid": "e528e3b121446d9db00fb5a64f770647ae786394", "url": "https://github.com/Graylog2/graylog2-server/commit/e528e3b121446d9db00fb5a64f770647ae786394", "message": "Starting and binding adapter.", "committedDate": "2020-07-09T10:29:04Z", "type": "commit"}, {"oid": "f80232da098f67e3f37c2ecc7d87a62852a194bf", "url": "https://github.com/Graylog2/graylog2-server/commit/f80232da098f67e3f37c2ecc7d87a62852a194bf", "message": "Implement `ClusterAdapter` for ES7.\n\nThis change is implementing a `ClusterAdapter` for ES7. It provides\ncluster-related functionality and is consumed mainly by the `Cluster`\nclass.\n\nDuring the implementation of this using the Elasticsearch high-level\nREST client, it became obvious that it is not supporting API endpoints\nthat Jest supported, namely the `_cat` and the `_nodes` endpoints. For\nthe `_cat` API, a `CatApi` class was implemented, that returns proper\nvalue objects for the responses. For the other missing APIs it was\ndifferent, as only a small number of keys were used from the responses,\nwith little overlap. Therefore a `PlainJsonApi` class created, that\nallows lightweight querying of single endpoints, returning the plain\nJSON structure.", "committedDate": "2020-07-09T10:29:28Z", "type": "commit"}, {"oid": "7f5003a219f25bb304fccb8089bceaf7e79a663b", "url": "https://github.com/Graylog2/graylog2-server/commit/7f5003a219f25bb304fccb8089bceaf7e79a663b", "message": "Cleaning up unused class.", "committedDate": "2020-07-09T10:29:48Z", "type": "commit"}, {"oid": "fc4b9fd082d9f197e80880d2f6bf3d7b46d4bb4d", "url": "https://github.com/Graylog2/graylog2-server/commit/fc4b9fd082d9f197e80880d2f6bf3d7b46d4bb4d", "message": "Moving duplicated `statsForIndices` method to `Cluster`, exposing its used methods in adapter interface.", "committedDate": "2020-07-09T10:29:49Z", "type": "commit"}, {"oid": "fc4b9fd082d9f197e80880d2f6bf3d7b46d4bb4d", "url": "https://github.com/Graylog2/graylog2-server/commit/fc4b9fd082d9f197e80880d2f6bf3d7b46d4bb4d", "message": "Moving duplicated `statsForIndices` method to `Cluster`, exposing its used methods in adapter interface.", "committedDate": "2020-07-09T10:29:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4NTkyMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452085923", "bodyText": "I think we can get rid of this method entirely and just call ClusterAdapter#health from Cluster#deflectorHealth", "author": "alex-konn", "createdAt": "2020-07-09T09:26:57Z", "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java", "diffHunk": "@@ -74,8 +73,7 @@ private HealthStatus extractHealthStatus(JsonNode node) {\n \n     @Override", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NTM3Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452265372", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4NTkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java b/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\nindex 492130ea16..4c0e0827e3 100644\n--- a/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\n+++ b/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\n\n@@ -73,7 +74,8 @@ public class ClusterAdapterES6 implements ClusterAdapter {\n \n     @Override\n     public Optional<HealthStatus> deflectorHealth(Collection<String> indices) {\n-        return health(indices);\n+        final Optional<JsonNode> result = clusterHealth(indices);\n+        return result.map(this::extractHealthStatus);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4OTM2Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452089363", "bodyText": "We can reuse HealthStatus#fromString in ClusterAdapterES6#extractHealthStatus.", "author": "alex-konn", "createdAt": "2020-07-09T09:32:49Z", "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java", "diffHunk": "@@ -74,8 +73,7 @@ private HealthStatus extractHealthStatus(JsonNode node) {\n ", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2NjExMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452266111", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA4OTM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java b/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\nindex 492130ea16..4c0e0827e3 100644\n--- a/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\n+++ b/graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ClusterAdapterES6.java\n\n@@ -73,7 +74,8 @@ public class ClusterAdapterES6 implements ClusterAdapter {\n \n     @Override\n     public Optional<HealthStatus> deflectorHealth(Collection<String> indices) {\n-        return health(indices);\n+        final Optional<JsonNode> result = clusterHealth(indices);\n+        return result.map(this::extractHealthStatus);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5NzY1MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452097651", "bodyText": "Wouldn't it make sense to delegate to Cluster here? We could exchange the two dependencies on ClusterAdapter and IndexSetRegistry with one on Cluster. Cluster also already has a dependency on IndexSetRegistry .", "author": "alex-konn", "createdAt": "2020-07-09T09:46:52Z", "path": "graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java", "diffHunk": "@@ -110,7 +113,25 @@ private long countDashboards() {\n \n     public ElasticsearchStats elasticsearchStats() {", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3NDcxMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452274712", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA5NzY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java b/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\nindex ca8172c58d..cd5c5902dd 100644\n--- a/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\n+++ b/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\n\n@@ -113,25 +110,7 @@ public class ClusterStatsService {\n \n     public ElasticsearchStats elasticsearchStats() {\n         final List<String> indices = Arrays.asList(indexSetRegistry.getIndexWildcards());\n-        final org.graylog2.system.stats.elasticsearch.ClusterStats clusterStats = clusterAdapter.clusterStats();\n-\n-        final PendingTasksStats pendingTasksStats = clusterAdapter.pendingTasks();\n-\n-        final ShardStats shardStats = clusterAdapter.shardStats(indices);\n-        final org.graylog2.system.stats.elasticsearch.ClusterHealth clusterHealth = org.graylog2.system.stats.elasticsearch.ClusterHealth.from(\n-                shardStats,\n-                pendingTasksStats\n-        );\n-        final HealthStatus healthStatus = clusterAdapter.health(indices).orElseThrow(() -> new IllegalStateException(\"Unable to retrieve cluster health.\"));\n-\n-        return ElasticsearchStats.create(\n-                clusterStats.clusterName(),\n-                clusterStats.clusterVersion(),\n-                healthStatus,\n-                clusterHealth,\n-                clusterStats.nodesStats(),\n-                clusterStats.indicesStats()\n-        );\n+        return clusterAdapter.statsForIndices(indices);\n     }\n \n     public MongoStats mongoStats() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwODIzNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452108235", "bodyText": "I think we can get rid of this comment and rather rename the test to indicate that defaults are expected.", "author": "alex-konn", "createdAt": "2020-07-09T10:05:09Z", "path": "graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java", "diffHunk": "@@ -18,6 +21,18 @@\n     @Rule\n     public final ElasticsearchInstance elasticsearch = ElasticsearchInstanceES6.create();\n \n+    @Test\n+    public void getClusterAllocationDiskSettings() {\n+        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n+\n+        //Default Elasticsearch settings in Elasticsearch 5.6", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTEyOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452271129", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwODIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java b/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\nindex 38453a81f4..5d7a7fdd90 100644\n--- a/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\n+++ b/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\n\n@@ -21,18 +18,6 @@ public class ClusterES6IT extends ClusterIT {\n     @Rule\n     public final ElasticsearchInstance elasticsearch = ElasticsearchInstanceES6.create();\n \n-    @Test\n-    public void getClusterAllocationDiskSettings() {\n-        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n-\n-        //Default Elasticsearch settings in Elasticsearch 5.6\n-        assertThat(clusterAllocationDiskSettings.ThresholdEnabled()).isTrue();\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().type()).isEqualTo(WatermarkSettings.SettingsType.PERCENTAGE);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().low()).isEqualTo(85D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().high()).isEqualTo(90D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().floodStage()).isNull();\n-    }\n-\n     @Override\n     protected ClusterAdapter clusterAdapter(Duration timeout) {\n         return new ClusterAdapterES6(jestClient(elasticsearch), timeout);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwOTMxMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452109312", "bodyText": "Shouldn't this be 95% for 6.8?", "author": "alex-konn", "createdAt": "2020-07-09T10:07:06Z", "path": "graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java", "diffHunk": "@@ -18,6 +21,18 @@\n     @Rule\n     public final ElasticsearchInstance elasticsearch = ElasticsearchInstanceES6.create();\n \n+    @Test\n+    public void getClusterAllocationDiskSettings() {\n+        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n+\n+        //Default Elasticsearch settings in Elasticsearch 5.6\n+        assertThat(clusterAllocationDiskSettings.ThresholdEnabled()).isTrue();\n+        assertThat(clusterAllocationDiskSettings.watermarkSettings().type()).isEqualTo(WatermarkSettings.SettingsType.PERCENTAGE);\n+        assertThat(clusterAllocationDiskSettings.watermarkSettings().low()).isEqualTo(85D);\n+        assertThat(clusterAllocationDiskSettings.watermarkSettings().high()).isEqualTo(90D);\n+        assertThat(clusterAllocationDiskSettings.watermarkSettings().floodStage()).isNull();", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTIzMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452271232", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwOTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java b/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\nindex 38453a81f4..5d7a7fdd90 100644\n--- a/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\n+++ b/graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/ClusterES6IT.java\n\n@@ -21,18 +18,6 @@ public class ClusterES6IT extends ClusterIT {\n     @Rule\n     public final ElasticsearchInstance elasticsearch = ElasticsearchInstanceES6.create();\n \n-    @Test\n-    public void getClusterAllocationDiskSettings() {\n-        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n-\n-        //Default Elasticsearch settings in Elasticsearch 5.6\n-        assertThat(clusterAllocationDiskSettings.ThresholdEnabled()).isTrue();\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().type()).isEqualTo(WatermarkSettings.SettingsType.PERCENTAGE);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().low()).isEqualTo(85D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().high()).isEqualTo(90D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().floodStage()).isNull();\n-    }\n-\n     @Override\n     protected ClusterAdapter clusterAdapter(Duration timeout) {\n         return new ClusterAdapterES6(jestClient(elasticsearch), timeout);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExNTExNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452115115", "bodyText": "Should be Collection<String>", "author": "alex-konn", "createdAt": "2020-07-09T10:18:10Z", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ClusterAdapterES7.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.github.joschi.jadconfig.util.Duration;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Lists;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.support.IndicesOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.Request;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.GetIndexRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.unit.TimeValue;\n+import org.graylog.storage.elasticsearch7.cat.CatApi;\n+import org.graylog.storage.elasticsearch7.cat.NodeResponse;\n+import org.graylog2.indexer.ElasticsearchException;\n+import org.graylog2.indexer.cluster.ClusterAdapter;\n+import org.graylog2.indexer.cluster.PendingTasksStats;\n+import org.graylog2.indexer.cluster.health.ClusterAllocationDiskSettings;\n+import org.graylog2.indexer.cluster.health.ClusterAllocationDiskSettingsFactory;\n+import org.graylog2.indexer.cluster.health.NodeDiskUsageStats;\n+import org.graylog2.indexer.cluster.health.NodeFileDescriptorStats;\n+import org.graylog2.indexer.indices.HealthStatus;\n+import org.graylog2.rest.models.system.indexer.responses.ClusterHealth;\n+import org.graylog2.system.stats.elasticsearch.ClusterStats;\n+import org.graylog2.system.stats.elasticsearch.IndicesStats;\n+import org.graylog2.system.stats.elasticsearch.NodesStats;\n+import org.graylog2.system.stats.elasticsearch.ShardStats;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ClusterAdapterES7 implements ClusterAdapter {\n+    private static final Logger LOG = LoggerFactory.getLogger(ClusterAdapterES7.class);\n+    private final ElasticsearchClient client;\n+    private final Duration requestTimeout;\n+    private final CatApi catApi;\n+    private final PlainJsonApi jsonApi;\n+\n+    @Inject\n+    public ClusterAdapterES7(ElasticsearchClient client,\n+                             @Named(\"elasticsearch_socket_timeout\") Duration requestTimeout,\n+                             CatApi catApi,\n+                             PlainJsonApi jsonApi) {\n+        this.client = client;\n+        this.requestTimeout = requestTimeout;\n+        this.catApi = catApi;\n+        this.jsonApi = jsonApi;\n+    }\n+\n+    @Override\n+    public Optional<HealthStatus> health(Collection<String> indices) {\n+        return clusterHealth(indices).map(response -> healthStatusFrom(response.getStatus()));\n+    }\n+\n+    private HealthStatus healthStatusFrom(ClusterHealthStatus status) {\n+        switch (status) {\n+            case RED:\n+                return HealthStatus.Red;\n+            case YELLOW:\n+                return HealthStatus.Yellow;\n+            case GREEN:\n+                return HealthStatus.Green;\n+        }\n+\n+        throw new IllegalStateException(\"Invalid health status received: \" + status);\n+    }\n+\n+    @Override\n+    public Optional<HealthStatus> deflectorHealth(Collection<String> indices) {\n+        return health(indices);\n+    }\n+\n+    @Override\n+    public Set<NodeFileDescriptorStats> fileDescriptorStats() {\n+        final List<NodeResponse> result = nodes();\n+        return result.stream()\n+                .map(node -> NodeFileDescriptorStats.create(node.name(), node.ip(), node.host(), node.fileDescriptorMax()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private List<NodeResponse> nodes() {\n+        return client.execute(catApi::nodes);\n+    }\n+\n+    @Override\n+    public Set<NodeDiskUsageStats> diskUsageStats() {\n+        final List<NodeResponse> result = nodes();\n+        return result.stream()\n+                .map(node -> NodeDiskUsageStats.create(node.name(), node.ip(), node.host(), node.diskUsed(), node.diskTotal(), node.diskUsedPercent()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public ClusterAllocationDiskSettings clusterAllocationDiskSettings() {\n+        final ClusterGetSettingsRequest request = new ClusterGetSettingsRequest();\n+        request.includeDefaults(true);\n+\n+        final ClusterGetSettingsResponse response = client.execute((c, requestOptions) -> c.cluster().getSettings(request, requestOptions));\n+        return ClusterAllocationDiskSettingsFactory.create(\n+                Boolean.parseBoolean(response.getSetting(\"cluster.routing.allocation.disk.threshold_enabled\")),\n+                response.getSetting(\"cluster.routing.allocation.disk.watermark.low\"),\n+                response.getSetting(\"cluster.routing.allocation.disk.watermark.high\"),\n+                response.getSetting(\"cluster.routing.allocation.disk.watermark.flood_stage\")\n+        );\n+    }\n+\n+    @Override\n+    public Optional<String> nodeIdToName(String nodeId) {\n+        return nodeById(nodeId)\n+                .map(jsonNode -> jsonNode.get(\"name\").asText());\n+    }\n+\n+    @Override\n+    public Optional<String> nodeIdToHostName(String nodeId) {\n+        return nodeById(nodeId)\n+                .map(jsonNode -> jsonNode.get(\"host\").asText());\n+    }\n+\n+    private Optional<JsonNode> nodeById(String nodeId) {\n+        if (Strings.isNullOrEmpty(nodeId)) {\n+            return Optional.empty();\n+        }\n+        final Request request = new Request(\"GET\", \"/_nodes/\" + nodeId);\n+        return Optional.of(client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions)))\n+                .map(jsonNode -> jsonNode.path(\"nodes\").path(nodeId))\n+                .filter(node -> !node.isMissingNode());\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        final ClusterHealthRequest request = new ClusterHealthRequest()\n+                .timeout(new TimeValue(requestTimeout.getQuantity(), requestTimeout.getUnit()))\n+                .local(true);\n+        try {\n+            final ClusterHealthResponse result = client.execute((c, requestOptions) -> c.cluster().health(request, requestOptions));\n+            return result.getNumberOfDataNodes() > 0;\n+        } catch (ElasticsearchException e) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.error(e.getMessage(), e);\n+            }\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> clusterName(Collection<String> indices) {\n+        return clusterHealth(indices).map(ClusterHealthResponse::getClusterName);\n+    }\n+\n+    @Override\n+    public Optional<ClusterHealth> clusterHealthStats(Collection<String> indices) {\n+        return clusterHealth(indices)\n+                .map(this::clusterHealthFrom);\n+    }\n+\n+    private ClusterHealth clusterHealthFrom(ClusterHealthResponse response) {\n+        return ClusterHealth.create(response.getStatus().toString(),\n+                ClusterHealth.ShardStatus.create(\n+                        response.getActiveShards(),\n+                        response.getInitializingShards(),\n+                        response.getRelocatingShards(),\n+                        response.getUnassignedShards()\n+                )\n+        );\n+    }\n+\n+    @Override\n+    public PendingTasksStats pendingTasks() {\n+        final Request request = new Request(\"GET\", \"/_cluster/pending_tasks\");\n+\n+        final JsonNode response = client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions),\n+                \"Couldn't read Elasticsearch pending cluster tasks\");\n+\n+        final JsonNode pendingClusterTasks = response.path(\"tasks\");\n+        final int pendingTasksSize = pendingClusterTasks.size();\n+        final List<Long> pendingTasksTimeInQueue = Lists.newArrayListWithCapacity(pendingTasksSize);\n+        for (JsonNode jsonElement : pendingClusterTasks) {\n+            if (jsonElement.has(\"time_in_queue_millis\")) {\n+                pendingTasksTimeInQueue.add(jsonElement.get(\"time_in_queue_millis\").asLong());\n+            }\n+        }\n+\n+        return PendingTasksStats.create(pendingTasksSize, pendingTasksTimeInQueue);\n+    }\n+\n+    @Override\n+    public ClusterStats clusterStats() {\n+        final Request request = new Request(\"GET\", \"/_cluster/stats/nodes\");\n+\n+        final JsonNode clusterStatsResponseJson = client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions),\n+        \"Couldn't read Elasticsearch cluster stats\");\n+        final String clusterName = clusterStatsResponseJson.path(\"cluster_name\").asText();\n+\n+        String clusterVersion = null;\n+        if (clusterStatsResponseJson.path(\"nodes\").path(\"versions\").isArray()) {\n+            final ArrayNode versions = (ArrayNode) clusterStatsResponseJson.path(\"nodes\").path(\"versions\");\n+            // We just use the first version in the \"versions\" array. This is not correct if there are different\n+            // versions running in the cluster, but that is not recommended anyway.\n+            final JsonNode versionNode = versions.path(0);\n+            if (versionNode.getNodeType() != JsonNodeType.MISSING) {\n+                clusterVersion = versionNode.asText();\n+            }\n+        }\n+\n+        final JsonNode countStats = clusterStatsResponseJson.path(\"nodes\").path(\"count\");\n+\n+        final NodesStats nodesStats = NodesStats.create(\n+                countStats.path(\"total\").asInt(-1),\n+                countStats.path(\"master_only\").asInt(-1),\n+                countStats.path(\"data_only\").asInt(-1),\n+                countStats.path(\"master_data\").asInt(-1),\n+                countStats.path(\"client\").asInt(-1)\n+        );\n+\n+        final JsonNode clusterIndicesStats = clusterStatsResponseJson.path(\"indices\");\n+        final IndicesStats indicesStats = IndicesStats.create(\n+                clusterIndicesStats.path(\"count\").asInt(-1),\n+                clusterIndicesStats.path(\"store\").path(\"size_in_bytes\").asLong(-1L),\n+                clusterIndicesStats.path(\"fielddata\").path(\"memory_size_in_bytes\").asLong(-1L)\n+        );\n+\n+        return ClusterStats.create(clusterName, clusterVersion, nodesStats, indicesStats);\n+    }\n+\n+    @Override\n+    public ShardStats shardStats(Collection<String> indices) {\n+        return clusterHealth(indices)\n+                .map(response -> ShardStats.create(\n+                        response.getNumberOfNodes(),\n+                        response.getNumberOfDataNodes(),\n+                        response.getActiveShards(),\n+                        response.getRelocatingShards(),\n+                        response.getActivePrimaryShards(),\n+                        response.getInitializingShards(),\n+                        response.getUnassignedShards(),\n+                        response.isTimedOut()\n+                ))\n+                .orElseThrow(() -> new ElasticsearchException(\"Unable to retrieve shard stats.\"));\n+    }\n+\n+    private Optional<ClusterHealthResponse> clusterHealth(Collection<? extends String> indices) {", "originalCommit": "8a92f4ed3fe33c8ea2b8d5ee626be449697c75cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTcyOA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452271728", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-09T14:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExNTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e528e3b121446d9db00fb5a64f770647ae786394", "chunk": "diff --git a/graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ClusterAdapterES7.java b/graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ClusterAdapterES7.java\nindex 1f2c9ae732..883c0c211b 100644\n--- a/graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ClusterAdapterES7.java\n+++ b/graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ClusterAdapterES7.java\n\n@@ -1,280 +1,6 @@\n package org.graylog.storage.elasticsearch7;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import com.fasterxml.jackson.databind.node.JsonNodeType;\n-import com.github.joschi.jadconfig.util.Duration;\n-import com.google.common.base.Strings;\n-import com.google.common.collect.Lists;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsRequest;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsResponse;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.support.IndicesOptions;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.Request;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.GetIndexRequest;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.cluster.health.ClusterHealthStatus;\n-import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.unit.TimeValue;\n-import org.graylog.storage.elasticsearch7.cat.CatApi;\n-import org.graylog.storage.elasticsearch7.cat.NodeResponse;\n-import org.graylog2.indexer.ElasticsearchException;\n import org.graylog2.indexer.cluster.ClusterAdapter;\n-import org.graylog2.indexer.cluster.PendingTasksStats;\n-import org.graylog2.indexer.cluster.health.ClusterAllocationDiskSettings;\n-import org.graylog2.indexer.cluster.health.ClusterAllocationDiskSettingsFactory;\n-import org.graylog2.indexer.cluster.health.NodeDiskUsageStats;\n-import org.graylog2.indexer.cluster.health.NodeFileDescriptorStats;\n-import org.graylog2.indexer.indices.HealthStatus;\n-import org.graylog2.rest.models.system.indexer.responses.ClusterHealth;\n-import org.graylog2.system.stats.elasticsearch.ClusterStats;\n-import org.graylog2.system.stats.elasticsearch.IndicesStats;\n-import org.graylog2.system.stats.elasticsearch.NodesStats;\n-import org.graylog2.system.stats.elasticsearch.ShardStats;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n public class ClusterAdapterES7 implements ClusterAdapter {\n-    private static final Logger LOG = LoggerFactory.getLogger(ClusterAdapterES7.class);\n-    private final ElasticsearchClient client;\n-    private final Duration requestTimeout;\n-    private final CatApi catApi;\n-    private final PlainJsonApi jsonApi;\n-\n-    @Inject\n-    public ClusterAdapterES7(ElasticsearchClient client,\n-                             @Named(\"elasticsearch_socket_timeout\") Duration requestTimeout,\n-                             CatApi catApi,\n-                             PlainJsonApi jsonApi) {\n-        this.client = client;\n-        this.requestTimeout = requestTimeout;\n-        this.catApi = catApi;\n-        this.jsonApi = jsonApi;\n-    }\n-\n-    @Override\n-    public Optional<HealthStatus> health(Collection<String> indices) {\n-        return clusterHealth(indices).map(response -> healthStatusFrom(response.getStatus()));\n-    }\n-\n-    private HealthStatus healthStatusFrom(ClusterHealthStatus status) {\n-        switch (status) {\n-            case RED:\n-                return HealthStatus.Red;\n-            case YELLOW:\n-                return HealthStatus.Yellow;\n-            case GREEN:\n-                return HealthStatus.Green;\n-        }\n-\n-        throw new IllegalStateException(\"Invalid health status received: \" + status);\n-    }\n-\n-    @Override\n-    public Optional<HealthStatus> deflectorHealth(Collection<String> indices) {\n-        return health(indices);\n-    }\n-\n-    @Override\n-    public Set<NodeFileDescriptorStats> fileDescriptorStats() {\n-        final List<NodeResponse> result = nodes();\n-        return result.stream()\n-                .map(node -> NodeFileDescriptorStats.create(node.name(), node.ip(), node.host(), node.fileDescriptorMax()))\n-                .collect(Collectors.toSet());\n-    }\n-\n-    private List<NodeResponse> nodes() {\n-        return client.execute(catApi::nodes);\n-    }\n-\n-    @Override\n-    public Set<NodeDiskUsageStats> diskUsageStats() {\n-        final List<NodeResponse> result = nodes();\n-        return result.stream()\n-                .map(node -> NodeDiskUsageStats.create(node.name(), node.ip(), node.host(), node.diskUsed(), node.diskTotal(), node.diskUsedPercent()))\n-                .collect(Collectors.toSet());\n-    }\n-\n-    @Override\n-    public ClusterAllocationDiskSettings clusterAllocationDiskSettings() {\n-        final ClusterGetSettingsRequest request = new ClusterGetSettingsRequest();\n-        request.includeDefaults(true);\n-\n-        final ClusterGetSettingsResponse response = client.execute((c, requestOptions) -> c.cluster().getSettings(request, requestOptions));\n-        return ClusterAllocationDiskSettingsFactory.create(\n-                Boolean.parseBoolean(response.getSetting(\"cluster.routing.allocation.disk.threshold_enabled\")),\n-                response.getSetting(\"cluster.routing.allocation.disk.watermark.low\"),\n-                response.getSetting(\"cluster.routing.allocation.disk.watermark.high\"),\n-                response.getSetting(\"cluster.routing.allocation.disk.watermark.flood_stage\")\n-        );\n-    }\n-\n-    @Override\n-    public Optional<String> nodeIdToName(String nodeId) {\n-        return nodeById(nodeId)\n-                .map(jsonNode -> jsonNode.get(\"name\").asText());\n-    }\n-\n-    @Override\n-    public Optional<String> nodeIdToHostName(String nodeId) {\n-        return nodeById(nodeId)\n-                .map(jsonNode -> jsonNode.get(\"host\").asText());\n-    }\n-\n-    private Optional<JsonNode> nodeById(String nodeId) {\n-        if (Strings.isNullOrEmpty(nodeId)) {\n-            return Optional.empty();\n-        }\n-        final Request request = new Request(\"GET\", \"/_nodes/\" + nodeId);\n-        return Optional.of(client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions)))\n-                .map(jsonNode -> jsonNode.path(\"nodes\").path(nodeId))\n-                .filter(node -> !node.isMissingNode());\n-    }\n-\n-    @Override\n-    public boolean isConnected() {\n-        final ClusterHealthRequest request = new ClusterHealthRequest()\n-                .timeout(new TimeValue(requestTimeout.getQuantity(), requestTimeout.getUnit()))\n-                .local(true);\n-        try {\n-            final ClusterHealthResponse result = client.execute((c, requestOptions) -> c.cluster().health(request, requestOptions));\n-            return result.getNumberOfDataNodes() > 0;\n-        } catch (ElasticsearchException e) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.error(e.getMessage(), e);\n-            }\n-            return false;\n-        }\n-    }\n-\n-    @Override\n-    public Optional<String> clusterName(Collection<String> indices) {\n-        return clusterHealth(indices).map(ClusterHealthResponse::getClusterName);\n-    }\n-\n-    @Override\n-    public Optional<ClusterHealth> clusterHealthStats(Collection<String> indices) {\n-        return clusterHealth(indices)\n-                .map(this::clusterHealthFrom);\n-    }\n-\n-    private ClusterHealth clusterHealthFrom(ClusterHealthResponse response) {\n-        return ClusterHealth.create(response.getStatus().toString(),\n-                ClusterHealth.ShardStatus.create(\n-                        response.getActiveShards(),\n-                        response.getInitializingShards(),\n-                        response.getRelocatingShards(),\n-                        response.getUnassignedShards()\n-                )\n-        );\n-    }\n-\n-    @Override\n-    public PendingTasksStats pendingTasks() {\n-        final Request request = new Request(\"GET\", \"/_cluster/pending_tasks\");\n-\n-        final JsonNode response = client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions),\n-                \"Couldn't read Elasticsearch pending cluster tasks\");\n-\n-        final JsonNode pendingClusterTasks = response.path(\"tasks\");\n-        final int pendingTasksSize = pendingClusterTasks.size();\n-        final List<Long> pendingTasksTimeInQueue = Lists.newArrayListWithCapacity(pendingTasksSize);\n-        for (JsonNode jsonElement : pendingClusterTasks) {\n-            if (jsonElement.has(\"time_in_queue_millis\")) {\n-                pendingTasksTimeInQueue.add(jsonElement.get(\"time_in_queue_millis\").asLong());\n-            }\n-        }\n-\n-        return PendingTasksStats.create(pendingTasksSize, pendingTasksTimeInQueue);\n-    }\n-\n-    @Override\n-    public ClusterStats clusterStats() {\n-        final Request request = new Request(\"GET\", \"/_cluster/stats/nodes\");\n-\n-        final JsonNode clusterStatsResponseJson = client.execute((c, requestOptions) -> jsonApi.perform(c, request, requestOptions),\n-        \"Couldn't read Elasticsearch cluster stats\");\n-        final String clusterName = clusterStatsResponseJson.path(\"cluster_name\").asText();\n-\n-        String clusterVersion = null;\n-        if (clusterStatsResponseJson.path(\"nodes\").path(\"versions\").isArray()) {\n-            final ArrayNode versions = (ArrayNode) clusterStatsResponseJson.path(\"nodes\").path(\"versions\");\n-            // We just use the first version in the \"versions\" array. This is not correct if there are different\n-            // versions running in the cluster, but that is not recommended anyway.\n-            final JsonNode versionNode = versions.path(0);\n-            if (versionNode.getNodeType() != JsonNodeType.MISSING) {\n-                clusterVersion = versionNode.asText();\n-            }\n-        }\n-\n-        final JsonNode countStats = clusterStatsResponseJson.path(\"nodes\").path(\"count\");\n-\n-        final NodesStats nodesStats = NodesStats.create(\n-                countStats.path(\"total\").asInt(-1),\n-                countStats.path(\"master_only\").asInt(-1),\n-                countStats.path(\"data_only\").asInt(-1),\n-                countStats.path(\"master_data\").asInt(-1),\n-                countStats.path(\"client\").asInt(-1)\n-        );\n-\n-        final JsonNode clusterIndicesStats = clusterStatsResponseJson.path(\"indices\");\n-        final IndicesStats indicesStats = IndicesStats.create(\n-                clusterIndicesStats.path(\"count\").asInt(-1),\n-                clusterIndicesStats.path(\"store\").path(\"size_in_bytes\").asLong(-1L),\n-                clusterIndicesStats.path(\"fielddata\").path(\"memory_size_in_bytes\").asLong(-1L)\n-        );\n-\n-        return ClusterStats.create(clusterName, clusterVersion, nodesStats, indicesStats);\n-    }\n-\n-    @Override\n-    public ShardStats shardStats(Collection<String> indices) {\n-        return clusterHealth(indices)\n-                .map(response -> ShardStats.create(\n-                        response.getNumberOfNodes(),\n-                        response.getNumberOfDataNodes(),\n-                        response.getActiveShards(),\n-                        response.getRelocatingShards(),\n-                        response.getActivePrimaryShards(),\n-                        response.getInitializingShards(),\n-                        response.getUnassignedShards(),\n-                        response.isTimedOut()\n-                ))\n-                .orElseThrow(() -> new ElasticsearchException(\"Unable to retrieve shard stats.\"));\n-    }\n-\n-    private Optional<ClusterHealthResponse> clusterHealth(Collection<? extends String> indices) {\n-        final String[] indicesAry = indices.toArray(new String[0]);\n-        if (!indicesExist(indicesAry)) {\n-            return Optional.empty();\n-        }\n-\n-        final ClusterHealthRequest request = new ClusterHealthRequest(indicesAry)\n-                .indicesOptions(IndicesOptions.fromOptions(false, false, true, true));\n-\n-        try {\n-            return Optional.of(client.execute((c, requestOptions) -> c.cluster().health(request, requestOptions)));\n-        } catch (ElasticsearchException e) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.error(\"{} ({})\", e.getMessage(), Optional.ofNullable(e.getCause()).map(Throwable::getMessage).orElse(\"n/a\"), e);\n-            } else {\n-                LOG.error(\"{} ({})\", e.getMessage(), Optional.ofNullable(e.getCause()).map(Throwable::getMessage).orElse(\"n/a\"));\n-            }\n-            return Optional.empty();\n-        }\n-    }\n-\n-    private boolean indicesExist(String... indices) {\n-        final GetIndexRequest getIndexRequest = new GetIndexRequest(indices);\n-        return client.execute((c, requestOptions) -> c.indices().exists(getIndexRequest, requestOptions));\n-    }\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NTU4Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452165586", "bodyText": "cough", "author": "alex-konn", "createdAt": "2020-07-09T12:01:16Z", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/ClusterES7IT.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.core.MainResponse;\n+import org.graylog.storage.elasticsearch7.cat.CatApi;\n+import org.graylog.storage.elasticsearch7.cat.NodeResponse;\n+import org.graylog.storage.elasticsearch7.testing.ElasticsearchInstanceES7;\n+import org.graylog.testing.elasticsearch.ElasticsearchInstance;\n+import org.graylog2.indexer.cluster.ClusterAdapter;\n+import org.graylog2.indexer.cluster.ClusterIT;\n+import org.graylog2.indexer.cluster.health.ClusterAllocationDiskSettings;\n+import org.graylog2.indexer.cluster.health.WatermarkSettings;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ClusterES7IT extends ClusterIT {\n+    @Rule\n+    public final ElasticsearchInstanceES7 elasticsearch = ElasticsearchInstanceES7.create();\n+\n+    @Test\n+    public void getClusterAllocationDiskSettings() {\n+        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n+\n+        //Default Elasticsearch settings in Elasticsearch 5.6", "originalCommit": "fc4b9fd082d9f197e80880d2f6bf3d7b46d4bb4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3db033b463e26c56a74ec1737b4c94511f333fac", "chunk": "diff --git a/graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/ClusterES7IT.java b/graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/ClusterES7IT.java\nindex 7a53940145..085e75b03e 100644\n--- a/graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/ClusterES7IT.java\n+++ b/graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/ClusterES7IT.java\n\n@@ -25,18 +25,6 @@ public class ClusterES7IT extends ClusterIT {\n     @Rule\n     public final ElasticsearchInstanceES7 elasticsearch = ElasticsearchInstanceES7.create();\n \n-    @Test\n-    public void getClusterAllocationDiskSettings() {\n-        final ClusterAllocationDiskSettings clusterAllocationDiskSettings = cluster.getClusterAllocationDiskSettings();\n-\n-        //Default Elasticsearch settings in Elasticsearch 5.6\n-        assertThat(clusterAllocationDiskSettings.ThresholdEnabled()).isTrue();\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().type()).isEqualTo(WatermarkSettings.SettingsType.PERCENTAGE);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().low()).isEqualTo(85D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().high()).isEqualTo(90D);\n-        assertThat(clusterAllocationDiskSettings.watermarkSettings().floodStage()).isEqualTo(95D);\n-    }\n-\n     @Override\n     protected ElasticsearchInstance elasticsearch() {\n         return this.elasticsearch;\n"}}, {"oid": "55b6ca7d9fb981213a26b5e48c1fce36568ad33a", "url": "https://github.com/Graylog2/graylog2-server/commit/55b6ca7d9fb981213a26b5e48c1fce36568ad33a", "message": "Removing unneeded `deflectorHealth` from adapter, reusing `health` in `Cluster`.", "committedDate": "2020-07-09T14:35:38Z", "type": "commit"}, {"oid": "573dc0cdd479ed727cdec57f4eae4a36832a73a1", "url": "https://github.com/Graylog2/graylog2-server/commit/573dc0cdd479ed727cdec57f4eae4a36832a73a1", "message": "Reusing `HealthStatus.fromString` in `ClusterAdapterES6`.", "committedDate": "2020-07-09T14:37:18Z", "type": "commit"}, {"oid": "3db033b463e26c56a74ec1737b4c94511f333fac", "url": "https://github.com/Graylog2/graylog2-server/commit/3db033b463e26c56a74ec1737b4c94511f333fac", "message": "Moving test method to superclass, removing comment, improving name instead.", "committedDate": "2020-07-09T14:44:01Z", "type": "commit"}, {"oid": "3e4193362541e9a29b4c81693701637e44a32975", "url": "https://github.com/Graylog2/graylog2-server/commit/3e4193362541e9a29b4c81693701637e44a32975", "message": "Fixing method signature.", "committedDate": "2020-07-09T14:44:51Z", "type": "commit"}, {"oid": "9c3df7f73f2cf13a125bfeddae14a0c53bacfa32", "url": "https://github.com/Graylog2/graylog2-server/commit/9c3df7f73f2cf13a125bfeddae14a0c53bacfa32", "message": "Delegating to `Cluster` instead of using `ClusterAdapter` in `ClusterStatsService`.", "committedDate": "2020-07-09T14:48:30Z", "type": "commit"}, {"oid": "e09875337f18e8ef3313d7653d42ed42e4e716ea", "url": "https://github.com/Graylog2/graylog2-server/commit/e09875337f18e8ef3313d7653d42ed42e4e716ea", "message": "Pulling in `ElasticsearchClient` dependency into `PlainJsonApi` & `CatApi`.", "committedDate": "2020-07-09T15:13:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzI4OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r452337289", "bodyText": "After extracting elasticsearchStats to Cluster we can now get rid of IndexSetRegistry here.", "author": "alex-konn", "createdAt": "2020-07-09T16:20:07Z", "path": "graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java", "diffHunk": "@@ -53,8 +51,8 @@\n     private final AlertService alertService;\n     private final AlarmCallbackConfigurationService alarmCallbackConfigurationService;\n     private final DashboardService dashboardService;\n+    private final Cluster cluster;\n     private final IndexSetRegistry indexSetRegistry;", "originalCommit": "e09875337f18e8ef3313d7653d42ed42e4e716ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDU3Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8459#discussion_r453644577", "bodyText": "\u2714\ufe0f", "author": "dennisoelkers", "createdAt": "2020-07-13T13:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e24bc481cb03c5070dea6b0524e9226e47d6869", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java b/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\nindex 465569c83e..7bf9b05587 100644\n--- a/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\n+++ b/graylog2-server/src/main/java/org/graylog2/system/stats/ClusterStatsService.java\n\n@@ -52,7 +51,6 @@ public class ClusterStatsService {\n     private final AlarmCallbackConfigurationService alarmCallbackConfigurationService;\n     private final DashboardService dashboardService;\n     private final Cluster cluster;\n-    private final IndexSetRegistry indexSetRegistry;\n \n     @Inject\n     public ClusterStatsService(MongoProbe mongoProbe,\n"}}, {"oid": "4e24bc481cb03c5070dea6b0524e9226e47d6869", "url": "https://github.com/Graylog2/graylog2-server/commit/4e24bc481cb03c5070dea6b0524e9226e47d6869", "message": "Removing obsolete dependency from `ClusterStatsService`.", "committedDate": "2020-07-13T08:43:31Z", "type": "commit"}]}