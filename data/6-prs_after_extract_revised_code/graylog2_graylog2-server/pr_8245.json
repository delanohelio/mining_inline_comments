{"pr_number": 8245, "pr_title": "Retry messages if target index is read-only", "pr_createdAt": "2020-05-29T15:48:43Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8245", "timeline": [{"oid": "88be6d23229e60c3fb2649078c10c0b5baaa6d84", "url": "https://github.com/Graylog2/graylog2-server/commit/88be6d23229e60c3fb2649078c10c0b5baaa6d84", "message": "Draft solution for retrying index failures due to flood stage reached (WIP)\n\n- Added additional retry loop in `Messages`. While it's not ideal to complicate the indexing code further, this error case can't be included in the existing retry logic, because the we have to modify the next request to only include items that have failed due to this particular error\n- Added a simple test to `MockedMessagesTest`", "committedDate": "2020-05-29T13:06:58Z", "type": "commit"}, {"oid": "7c76b2aaf987921e8e1471ba4680d68efa857c22", "url": "https://github.com/Graylog2/graylog2-server/commit/7c76b2aaf987921e8e1471ba4680d68efa857c22", "message": "Add test verifying that other errors occurring in same chunk as index block errors are not retried", "committedDate": "2020-05-29T14:36:30Z", "type": "commit"}, {"oid": "c81b08aaf3907b2104949b20820f4d383268c47a", "url": "https://github.com/Graylog2/graylog2-server/commit/c81b08aaf3907b2104949b20820f4d383268c47a", "message": "Treat retried index block errors that fail differently as persistent failures", "committedDate": "2020-05-29T14:57:42Z", "type": "commit"}, {"oid": "98abba5284b06b11995302a09cf680c96329ec99", "url": "https://github.com/Graylog2/graylog2-server/commit/98abba5284b06b11995302a09cf680c96329ec99", "message": "Reuse `com.github.rholder.retry.WaitStrategy` for index block retries", "committedDate": "2020-05-29T15:44:18Z", "type": "commit"}, {"oid": "f9ce06a2451284d416b717e3bfad730907328618", "url": "https://github.com/Graylog2/graylog2-server/commit/f9ce06a2451284d416b717e3bfad730907328618", "message": "add license headers", "committedDate": "2020-05-29T15:54:52Z", "type": "commit"}, {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "url": "https://github.com/Graylog2/graylog2-server/commit/f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "message": "Keep using milliseconds-based waiting for `BULK_REQUEST_RETRYER`\n\n...but go with seconds-based for index block retries.\n\n- extracted a seconds-based wait strategy to a field in Messages\n- add explanatory comment for why a multiplier of 500 works, which is unintuitive\n- added separate unit tests to document how the waiting strategies actually work", "committedDate": "2020-06-02T13:06:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NTU2Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434365566", "bodyText": "I did not understand what the method is supposed to do before reading its body. Maybe we should rename it to waitBeforeRetrying or something along these lines?", "author": "dennisoelkers", "createdAt": "2020-06-03T07:33:04Z", "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);", "originalCommit": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MTEzOA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434471138", "bodyText": "\ud83d\udc4d\nwaitBeforeRetrying is a better name indeed.", "author": "alex-konn", "createdAt": "2020-06-03T10:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NTU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5ef4019396a74ce133fc8f51605930099dc0cac4", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\nindex a67600d0bc..33f20bd5f6 100644\n--- a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n+++ b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n\n@@ -259,25 +259,31 @@ public class Messages {\n         return runBulkRequest(bulk.build(), chunk.size());\n     }\n \n-    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+    private Set<BulkResult.BulkResultItem> retryIfIndexBlocksPresent(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n         Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n-        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        final Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n         List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n \n+        LOG.warn(\"Retrying {} messages, because their indices are blocked with status [read-only / allow delete]\", indexBlocks.size());\n+\n         long attempt = 1;\n \n         while (!indexBlocks.isEmpty()) {\n             blockExecutionForAttempt(attempt++);\n \n-            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+            final BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n \n-            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+            final List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n \n             indexBlocks = indexBlocksFrom(failedItems);\n             blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n \n-            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            final Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n             otherFailures.addAll(newOtherFailures);\n+\n+            if (indexBlocks.isEmpty()) {\n+                LOG.info(\"Retries were successful after {} attempts. Ingestion will continue now.\", attempt);\n+            }\n         }\n \n         return otherFailures;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NzE2MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434367160", "bodyText": "This should be javax.validation.constraints.NotNull instead.", "author": "dennisoelkers", "createdAt": "2020-06-03T07:36:07Z", "path": "graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.graylog2.indexer.IndexSet;\n import org.graylog2.plugin.Message;\n import org.graylog2.system.processing.InMemoryProcessingStatusRecorder;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MTQ5OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434471498", "bodyText": "I removed the annotations completely, because I think we don't use them consistently anyway.", "author": "alex-konn", "createdAt": "2020-06-03T10:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NzE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5ef4019396a74ce133fc8f51605930099dc0cac4", "chunk": "diff --git a/graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java b/graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java\nindex 998ba904bc..b44e7c3289 100644\n--- a/graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java\n+++ b/graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java\n\n@@ -24,7 +24,6 @@ import io.searchbox.core.BulkResult;\n import org.graylog2.indexer.IndexSet;\n import org.graylog2.plugin.Message;\n import org.graylog2.system.processing.InMemoryProcessingStatusRecorder;\n-import org.jetbrains.annotations.NotNull;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.junit.Before;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MjgxMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434372813", "bodyText": "This should have a better message, something like sleeping for ... ms before retrying bulk indexing (attempt #n).", "author": "dennisoelkers", "createdAt": "2020-06-03T07:46:38Z", "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);\n+\n+            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+\n+            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+\n+            indexBlocks = indexBlocksFrom(failedItems);\n+            blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n+\n+            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            otherFailures.addAll(newOtherFailures);\n+        }\n+\n+        return otherFailures;\n+    }\n+\n+    private void blockExecutionForAttempt(long attempt) {\n+        try {\n+            long sleepTime = exponentialWaitSeconds.computeSleepTime(new IndexBlockRetryAttempt(attempt));\n+            LOG.info(\"sleeping \" + sleepTime);", "originalCommit": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MjA1OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434472058", "bodyText": "Leaving this in was an oversight. I only meant to log the time for debugging purposes. Removed it.", "author": "alex-konn", "createdAt": "2020-06-03T10:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MjgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "5ef4019396a74ce133fc8f51605930099dc0cac4", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\nindex a67600d0bc..33f20bd5f6 100644\n--- a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n+++ b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n\n@@ -259,25 +259,31 @@ public class Messages {\n         return runBulkRequest(bulk.build(), chunk.size());\n     }\n \n-    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+    private Set<BulkResult.BulkResultItem> retryIfIndexBlocksPresent(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n         Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n-        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        final Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n         List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n \n+        LOG.warn(\"Retrying {} messages, because their indices are blocked with status [read-only / allow delete]\", indexBlocks.size());\n+\n         long attempt = 1;\n \n         while (!indexBlocks.isEmpty()) {\n             blockExecutionForAttempt(attempt++);\n \n-            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+            final BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n \n-            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+            final List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n \n             indexBlocks = indexBlocksFrom(failedItems);\n             blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n \n-            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            final Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n             otherFailures.addAll(newOtherFailures);\n+\n+            if (indexBlocks.isEmpty()) {\n+                LOG.info(\"Retries were successful after {} attempts. Ingestion will continue now.\", attempt);\n+            }\n         }\n \n         return otherFailures;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4MTY1MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434381650", "bodyText": "It would be good to have some logging here indicating that the index blocks have been resolved.", "author": "dennisoelkers", "createdAt": "2020-06-03T08:02:19Z", "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);\n+\n+            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+\n+            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+\n+            indexBlocks = indexBlocksFrom(failedItems);\n+            blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n+\n+            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            otherFailures.addAll(newOtherFailures);\n+        }\n+", "originalCommit": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3MjIwMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434472201", "bodyText": "\ud83d\udc4d Agreed. I added some.", "author": "alex-konn", "createdAt": "2020-06-03T10:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4MTY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "5ef4019396a74ce133fc8f51605930099dc0cac4", "chunk": "diff --git a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\nindex a67600d0bc..33f20bd5f6 100644\n--- a/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n+++ b/graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java\n\n@@ -259,25 +259,31 @@ public class Messages {\n         return runBulkRequest(bulk.build(), chunk.size());\n     }\n \n-    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+    private Set<BulkResult.BulkResultItem> retryIfIndexBlocksPresent(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n         Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n-        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        final Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n         List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n \n+        LOG.warn(\"Retrying {} messages, because their indices are blocked with status [read-only / allow delete]\", indexBlocks.size());\n+\n         long attempt = 1;\n \n         while (!indexBlocks.isEmpty()) {\n             blockExecutionForAttempt(attempt++);\n \n-            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+            final BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n \n-            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+            final List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n \n             indexBlocks = indexBlocksFrom(failedItems);\n             blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n \n-            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            final Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n             otherFailures.addAll(newOtherFailures);\n+\n+            if (indexBlocks.isEmpty()) {\n+                LOG.info(\"Retries were successful after {} attempts. Ingestion will continue now.\", attempt);\n+            }\n         }\n \n         return otherFailures;\n"}}, {"oid": "5ef4019396a74ce133fc8f51605930099dc0cac4", "url": "https://github.com/Graylog2/graylog2-server/commit/5ef4019396a74ce133fc8f51605930099dc0cac4", "message": "Cleaned up code based on @dennisoelkers' feedback\n\n- Mark variables as final where possible\n- Rename method from `retryOnlyIndexBlockItemsForever` to `retryIfIndexBlocksPresent`\n- Log warning, if index blocks present\n- Log info after retries have been successful\n- Removed `org.jetbrains.annotations.NotNull` annotation", "committedDate": "2020-06-03T08:56:14Z", "type": "commit"}, {"oid": "6a149188f7ea1624ce8d4972eb37c2997cd4777f", "url": "https://github.com/Graylog2/graylog2-server/commit/6a149188f7ea1624ce8d4972eb37c2997cd4777f", "message": "Renamed private method `blockExecutionForAttempt` to `waitBeforeRetrying`", "committedDate": "2020-06-03T10:31:24Z", "type": "commit"}, {"oid": "f5a1b3f1d7e1e195ca595b79f00704033eb1194f", "url": "https://github.com/Graylog2/graylog2-server/commit/f5a1b3f1d7e1e195ca595b79f00704033eb1194f", "message": "Renamed private method `retryIfIndexBlocksPresent` back to `retryOnlyIndexBlockItemsForever`.\n\nIt does indicate more clearly that only index blocks are retied here and that retries will go on \"forever\", if the blocks are not resolved.", "committedDate": "2020-06-03T10:35:01Z", "type": "commit"}]}