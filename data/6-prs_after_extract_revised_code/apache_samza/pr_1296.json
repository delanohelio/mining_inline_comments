{"pr_number": 1296, "pr_title": "SAMZA-2475: Add a allocated resource expiry timeout in samza yarn type of apps", "pr_createdAt": "2020-02-28T00:19:06Z", "pr_url": "https://github.com/apache/samza/pull/1296", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NTU3Nw==", "url": "https://github.com/apache/samza/pull/1296#discussion_r385885577", "bodyText": "javadoc please\nalso, this method likely belongs in SamzaResource?\n(if it really needs to be here, needs to be abstract)", "author": "rmatharu", "createdAt": "2020-02-28T19:39:49Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java", "diffHunk": "@@ -132,6 +132,9 @@ public ClusterResourceManager(Callback callback) {\n \n   public abstract void stop(SamzaApplicationState.SamzaAppStatus status);\n \n+  public boolean isResourceExpired(SamzaResource resource) {", "originalCommit": "2a0a39da0a12b7f2fb762c5a29102f6c625aafc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzQzOQ==", "url": "https://github.com/apache/samza/pull/1296#discussion_r386727439", "bodyText": "Kubernetes does not have a concept of expired allocated resource so this method needs a default implementation, it cannot belong to SamzaResource because that is yarn agnostic class and timeout is read from Yarn config and not a samza config.", "author": "Sanil15", "createdAt": "2020-03-03T00:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java\nindex 56b5fb17d..8ea3c3018 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ClusterResourceManager.java\n\n@@ -132,6 +132,12 @@ public abstract class ClusterResourceManager {\n \n   public abstract void stop(SamzaApplicationState.SamzaAppStatus status);\n \n+  /**\n+   * Checks if the allocated resource is expired. If the {@link ClusterResourceManager} does not have a\n+   * concept of expired allocated resource we assume allocated resources never expire\n+   * @param resource allocated resource\n+   * @return if the allocated resource is expired\n+   */\n   public boolean isResourceExpired(SamzaResource resource) {\n     return false;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NTcwMg==", "url": "https://github.com/apache/samza/pull/1296#discussion_r385885702", "bodyText": "resource.isExpired()", "author": "rmatharu", "createdAt": "2020-02-28T19:40:09Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "diffHunk": "@@ -261,6 +261,14 @@ protected void runStreamProcessor(SamzaResourceRequest request, String preferred\n       throw new SamzaException(\"Expected resource for Processor ID: \" + request.getProcessorId() + \" was unavailable on host: \" + preferredHost);\n     }\n \n+    if(clusterResourceManager.isResourceExpired(resource)) {", "originalCommit": "2a0a39da0a12b7f2fb762c5a29102f6c625aafc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\nindex cde489992..2661611a9 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\n\n@@ -261,11 +261,11 @@ public class ContainerAllocator implements Runnable {\n       throw new SamzaException(\"Expected resource for Processor ID: \" + request.getProcessorId() + \" was unavailable on host: \" + preferredHost);\n     }\n \n-    if(clusterResourceManager.isResourceExpired(resource)) {\n-      LOG.info(\"Lease for the resource has been expired for resource: {} request: {}\", resource, request);\n-      resourceRequestState.releaseUnstartableContainer(resource, preferredHost);\n-      resourceRequestState.cancelResourceRequest(request);\n-      this.requestResource(request.getProcessorId(), request.getPreferredHost());\n+    /**\n+     * If the allocated resource has expired then release the expired resource and re-request the resources from {@link ClusterResourceManager}\n+     */\n+    if (clusterResourceManager.isResourceExpired(resource)) {\n+      containerManager.handleExpiredResource(request, resource, preferredHost, resourceRequestState, this);\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NjA4MA==", "url": "https://github.com/apache/samza/pull/1296#discussion_r385886080", "bodyText": "Resource has expired, re-requesting resource for ..... processorId:\nHaving the processorId: pattern in the logs makes for easy searcheability when we're debugging", "author": "rmatharu", "createdAt": "2020-02-28T19:40:57Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java", "diffHunk": "@@ -261,6 +261,14 @@ protected void runStreamProcessor(SamzaResourceRequest request, String preferred\n       throw new SamzaException(\"Expected resource for Processor ID: \" + request.getProcessorId() + \" was unavailable on host: \" + preferredHost);\n     }\n \n+    if(clusterResourceManager.isResourceExpired(resource)) {\n+      LOG.info(\"Lease for the resource has been expired for resource: {} request: {}\", resource, request);", "originalCommit": "2a0a39da0a12b7f2fb762c5a29102f6c625aafc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzU5Ng==", "url": "https://github.com/apache/samza/pull/1296#discussion_r386727596", "bodyText": "I came up with this PR to gather some early thoughts on approach, will clean it up", "author": "Sanil15", "createdAt": "2020-03-03T00:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4NjA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\nindex cde489992..2661611a9 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerAllocator.java\n\n@@ -261,11 +261,11 @@ public class ContainerAllocator implements Runnable {\n       throw new SamzaException(\"Expected resource for Processor ID: \" + request.getProcessorId() + \" was unavailable on host: \" + preferredHost);\n     }\n \n-    if(clusterResourceManager.isResourceExpired(resource)) {\n-      LOG.info(\"Lease for the resource has been expired for resource: {} request: {}\", resource, request);\n-      resourceRequestState.releaseUnstartableContainer(resource, preferredHost);\n-      resourceRequestState.cancelResourceRequest(request);\n-      this.requestResource(request.getProcessorId(), request.getPreferredHost());\n+    /**\n+     * If the allocated resource has expired then release the expired resource and re-request the resources from {@link ClusterResourceManager}\n+     */\n+    if (clusterResourceManager.isResourceExpired(resource)) {\n+      containerManager.handleExpiredResource(request, resource, preferredHost, resourceRequestState, this);\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4Njk5NQ==", "url": "https://github.com/apache/samza/pull/1296#discussion_r385886995", "bodyText": "Could DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS be a Duration?\nDuration.between(resource.getTS, Instant.now()).compareTo(DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS) > 0;", "author": "rmatharu", "createdAt": "2020-02-28T19:42:58Z", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -575,6 +576,15 @@ public void onStopContainerError(ContainerId containerId, Throwable t) {\n     }\n   }\n \n+  @Override\n+  public boolean isResourceExpired(SamzaResource resource) {\n+    /**\n+     * Time from which resource was allocated + 1 min (to account for clock skew) > Yarn Expiry Timeout\n+     */\n+    return System.currentTimeMillis() - resource.getTimestamp() + Duration.ofMinutes(1).toMillis()\n+        > YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS;", "originalCommit": "2a0a39da0a12b7f2fb762c5a29102f6c625aafc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyNzY0Mw==", "url": "https://github.com/apache/samza/pull/1296#discussion_r386727643", "bodyText": "will make this cleaner", "author": "Sanil15", "createdAt": "2020-03-03T00:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4Njk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "chunk": "diff --git a/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java b/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\nindex dffbefcc0..b266366c7 100644\n--- a/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\n+++ b/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\n\n@@ -579,10 +579,10 @@ public class YarnClusterResourceManager extends ClusterResourceManager implement\n   @Override\n   public boolean isResourceExpired(SamzaResource resource) {\n     /**\n-     * Time from which resource was allocated + 1 min (to account for clock skew) > Yarn Expiry Timeout\n+     * Time from which resource was allocated > Yarn Expiry Timeout - 30 sec (to account for clock skew)\n      */\n-    return System.currentTimeMillis() - resource.getTimestamp() + Duration.ofMinutes(1).toMillis()\n-        > YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS;\n+    Duration yarnAllocatedResourceExpiry = Duration.ofMinutes(10).minus(Duration.ofSeconds(30));\n+    return System.currentTimeMillis() - resource.getTimestamp() > yarnAllocatedResourceExpiry.toMillis();\n   }\n \n   /**\n"}}, {"oid": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "url": "https://github.com/apache/samza/commit/4eb8cb905998a5104d88ffa7922b4da628f25e7a", "message": "Expiry check for allocated resources", "committedDate": "2020-03-03T00:25:57Z", "type": "commit"}, {"oid": "4eb8cb905998a5104d88ffa7922b4da628f25e7a", "url": "https://github.com/apache/samza/commit/4eb8cb905998a5104d88ffa7922b4da628f25e7a", "message": "Expiry check for allocated resources", "committedDate": "2020-03-03T00:25:57Z", "type": "forcePushed"}, {"oid": "e0c25aaf35699ddd3a42bab694ef19307f6d3066", "url": "https://github.com/apache/samza/commit/e0c25aaf35699ddd3a42bab694ef19307f6d3066", "message": "Configure timeout using Yarn default", "committedDate": "2020-03-03T02:16:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTIxOA==", "url": "https://github.com/apache/samza/pull/1296#discussion_r387185218", "bodyText": "\"has expired\"  \"{}. Re-requesting again\"", "author": "prateekm", "createdAt": "2020-03-03T17:41:45Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -290,6 +290,29 @@ void handleExpiredRequest(String processorId, String preferredHost,\n     }\n   }\n \n+  /**\n+   * Handles expired allocated resource by requesting the same resource again and release the expired allocated resource\n+   *\n+   * @param request pending request for the preferred host\n+   * @param resource resource allocated from {@link ClusterResourceManager} which has expired\n+   * @param preferredHost host on which container is requested to be deployed\n+   * @param resourceRequestState state of request in {@link ContainerAllocator}\n+   * @param allocator allocator for requesting resources\n+   */\n+  void handleExpiredResource(SamzaResourceRequest request, SamzaResource resource, String preferredHost,\n+      ResourceRequestState resourceRequestState, ContainerAllocator allocator) {\n+    LOG.info(\"Allocated resource {} has been expired for Processor ID: {} request: {} re-requesting resource again\",", "originalCommit": "e0c25aaf35699ddd3a42bab694ef19307f6d3066", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b49d2213187116126e3af6ff3eb86479309c610", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex ba2e29c2f..a1bbdac5a 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -301,7 +301,7 @@ public class ContainerManager {\n    */\n   void handleExpiredResource(SamzaResourceRequest request, SamzaResource resource, String preferredHost,\n       ResourceRequestState resourceRequestState, ContainerAllocator allocator) {\n-    LOG.info(\"Allocated resource {} has been expired for Processor ID: {} request: {} re-requesting resource again\",\n+    LOG.info(\"Allocated resource {} has expired for Processor ID: {} request: {}. Re-requesting resource again\",\n         resource, request.getProcessorId(), request);\n     resourceRequestState.releaseUnstartableContainer(resource, preferredHost);\n     resourceRequestState.cancelResourceRequest(request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgxNw==", "url": "https://github.com/apache/samza/pull/1296#discussion_r387185817", "bodyText": "Use // for comments inside methods, not /*. IntelliJ warns about dangling javadocs for these.", "author": "prateekm", "createdAt": "2020-03-03T17:42:53Z", "path": "samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java", "diffHunk": "@@ -575,6 +576,17 @@ public void onStopContainerError(ContainerId containerId, Throwable t) {\n     }\n   }\n \n+  @Override\n+  public boolean isResourceExpired(SamzaResource resource) {\n+    /**", "originalCommit": "e0c25aaf35699ddd3a42bab694ef19307f6d3066", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b49d2213187116126e3af6ff3eb86479309c610", "chunk": "diff --git a/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java b/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\nindex 492ee638c..8d23e040f 100644\n--- a/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\n+++ b/samza-yarn/src/main/java/org/apache/samza/job/yarn/YarnClusterResourceManager.java\n\n@@ -578,9 +578,7 @@ public class YarnClusterResourceManager extends ClusterResourceManager implement\n \n   @Override\n   public boolean isResourceExpired(SamzaResource resource) {\n-    /**\n-     * Time from which resource was allocated > Yarn Expiry Timeout - 30 sec (to account for clock skew)\n-     */\n+    // Time from which resource was allocated > Yarn Expiry Timeout - 30 sec (to account for clock skew)\n     Duration yarnAllocatedResourceExpiry =\n         Duration.ofMinutes(YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS)\n             .minus(Duration.ofSeconds(30));\n"}}, {"oid": "1b49d2213187116126e3af6ff3eb86479309c610", "url": "https://github.com/apache/samza/commit/1b49d2213187116126e3af6ff3eb86479309c610", "message": "Address feedback", "committedDate": "2020-03-03T18:06:31Z", "type": "commit"}, {"oid": "9a1a4a3e12ce4af1d8af734fb6aa1a8b77e9b812", "url": "https://github.com/apache/samza/commit/9a1a4a3e12ce4af1d8af734fb6aa1a8b77e9b812", "message": "Issuing correct resource request", "committedDate": "2020-03-03T18:17:11Z", "type": "commit"}]}