{"pr_number": 1242, "pr_title": "SAMZA-2425: Add support for sub-query in joins", "pr_createdAt": "2020-01-02T17:02:26Z", "pr_url": "https://github.com/apache/samza/pull/1242", "timeline": [{"oid": "abeb06f16d2eb3bacd84db94686c4b0fde1cbe3e", "url": "https://github.com/apache/samza/commit/abeb06f16d2eb3bacd84db94686c4b0fde1cbe3e", "message": "SAMZA-2425: Add support for sub-query in joins", "committedDate": "2020-01-02T17:01:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMTAyNw==", "url": "https://github.com/apache/samza/pull/1242#discussion_r362601027", "bodyText": "There're other kinds of RelNode which are not covered by instanceOf checks in recursive function. Do we need to handle other kinds of RelNode here? If not, why?\nCan you please add a unit-test in JoinTranslator for these changes?\nJust curious. Would the schema validations be applied on the result of the sub-queries within joins?", "author": "shanthoosh", "createdAt": "2020-01-02T19:36:45Z", "path": "samza-sql/src/main/java/org/apache/samza/sql/translator/JoinTranslator.java", "diffHunk": "@@ -292,17 +294,27 @@ private String dumpRelPlanForNode(RelNode relNode) {\n         SqlExplainLevel.EXPPLAN_ATTRIBUTES);\n   }\n \n-  private SqlIOConfig resolveSourceConfigForTable(RelNode relNode, TranslatorContext context) {\n+  private SqlIOConfig resolveSQlIOForTable(RelNode relNode, TranslatorContext context) {\n+    // Let's recursively get to the TableScan node to identify IO for the table.\n     if (relNode instanceof LogicalProject) {\n-      return resolveSourceConfigForTable(((LogicalProject) relNode).getInput(), context);\n+      return resolveSQlIOForTable(((LogicalProject) relNode).getInput(), context);\n     }\n \n-    // We are returning the sourceConfig for the table as null when the table is in another join rather than an output\n-    // table, that's because the output of stream-table join is considered a stream.\n-    if (relNode.getInputs().size() > 1) {\n+    if (relNode instanceof LogicalFilter) {\n+      return resolveSQlIOForTable(((LogicalFilter) relNode).getInput(), context);\n+    }\n+\n+    // We return null for table IO as the table seems to be involved in another join. The output of stream-table join\n+    // is considered a stream. Hence, we return null for the table.\n+    if (relNode instanceof LogicalJoin && relNode.getInputs().size() > 1) {", "originalCommit": "abeb06f16d2eb3bacd84db94686c4b0fde1cbe3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcyNjUzMQ==", "url": "https://github.com/apache/samza/pull/1242#discussion_r362726531", "bodyText": "Very good questions.\n\nIn Samza Sql, we currently support only filters, projection and joins along with scan. Hence, only they are handled in this function.\nThere are end-to-end tests for each of these if conditions and for the new addition.\nSchema validations for joins is not yet implemented.", "author": "atoomula", "createdAt": "2020-01-03T07:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjYwMTAyNw=="}], "type": "inlineReview", "revised_code": null}]}