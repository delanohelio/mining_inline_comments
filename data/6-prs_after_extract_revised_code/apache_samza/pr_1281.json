{"pr_number": 1281, "pr_title": "SAMZA-2378: Container Placements support for Standby containers enabled jobs", "pr_createdAt": "2020-02-18T23:44:01Z", "pr_url": "https://github.com/apache/samza/pull/1281", "timeline": [{"oid": "539ffd335f81bc17fc5dcb627469e35310e30428", "url": "https://github.com/apache/samza/commit/539ffd335f81bc17fc5dcb627469e35310e30428", "message": "Container Placements support for Standby containers enabled jobs", "committedDate": "2020-02-18T23:32:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDc0MA==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382394740", "bodyText": "We should probably prioritize this sooner than later", "author": "rmatharu", "createdAt": "2020-02-21T04:43:22Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -48,8 +48,7 @@\n  * ContainerManager encapsulates logic and state related to container placement actions like move, restarts for active container\n  * if issued externally.\n  *\n- * TODO SAMZA-2378: Container Placements for Standby containers enabled jobs\n- *      SAMZA-2379: Container Placements for job running in degraded state\n+ * TODO SAMZA-2379: Container Placements for job running in degraded state", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzczMw==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382823733", "bodyText": "Yup following up with RB", "author": "Sanil15", "createdAt": "2020-02-21T21:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDc0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NTIxOQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382395219", "bodyText": "Nit:\nCan the lines above\nif (hasActiveContainerPlacementAction(request.getProcessorId())) {\n\nString processorId = request.getProcessorId();\t      \n\nString processorId = request.getProcessorId();\n\nContainerPlacementMetadata actionMetaData = getPlacementActionMetadata(processorId).get();\t      \n\nbe rewritten to:\nOptional<ContainerPlacementMetadata> actionMetaData = getPlacementActionMetadata(processorId);\n\nif (actionMetaData.isPresent()) {\nuse actionMetaData.get()  everywhere after...", "author": "rmatharu", "createdAt": "2020-02-21T04:45:40Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MTk2MQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382741961", "bodyText": "hasActiveContainerPlacementAction checks the metadata of the action to be either in ACCEPTED or IN_PROGRESS, it not a check for the presence of metadata", "author": "Sanil15", "createdAt": "2020-02-21T18:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..d2ee9d5a 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -141,8 +141,8 @@ public class ContainerManager {\n           LOG.info(\n               \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n               request.getProcessorId(), preferredHost, actionMetaData);\n-          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n-          resourceRequestState.cancelResourceRequest(request);\n+          // Release unstartable container\n+          standbyContainerManager.get().releaseUnstartableContainer(request, allocatedResource, preferredHost, resourceRequestState);\n           // Fallback to source host since the new allocated resource does not meet standby constraints\n           allocator.requestResource(processorId, actionMetaData.getSourceHost());\n           markContainerPlacementActionFailed(actionMetaData,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDA2NA==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382400064", "bodyText": "Update failedStandbyAllocations metric?\nAlso it may be possible to expose a method on standby-container-manager to do the\nresourceRequestState.releaseUnstartableContainer();\nresourceRequestState.cancelResourceRequest(request);\ncontainerAllocator.requestResource();\nbecause it is done in  standby-container-manager as a part of\ncheckStandbyConstraintsAndRunStreamProcessor method", "author": "rmatharu", "createdAt": "2020-02-21T05:09:25Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container\n+        // Note: Always check constraints against allocated resource, since preferred host can be ANY_HOST as well\n+        if (standbyContainerManager.isPresent() && !standbyContainerManager.get().checkStandbyConstraints(request.getProcessorId(), allocatedResource.getHost())) {\n+          LOG.info(\n+              \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n+              request.getProcessorId(), preferredHost, actionMetaData);\n+          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n+          resourceRequestState.cancelResourceRequest(request);\n+          // Fallback to source host since the new allocated resource does not meet standby constraints\n+          allocator.requestResource(processorId, actionMetaData.getSourceHost());\n+          markContainerPlacementActionFailed(actionMetaData,\n+              String.format(\"allocated resource %s does not meet standby constraints now, falling back to source host\", allocatedResource));", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MDI1NA==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382760254", "bodyText": "Update failedStandbyAllocations metric?\n\nNo, because here we did not initiate a standby failover, user-initiated two individual requests: move of standby to x-host and move of active to the standby host, these are two independent requests hence we do not need a metric update\n\nAlso it may be possible to expose a method on standby-container-manager to do the\n\nSure, will do", "author": "Sanil15", "createdAt": "2020-02-21T19:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..d2ee9d5a 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -141,8 +141,8 @@ public class ContainerManager {\n           LOG.info(\n               \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n               request.getProcessorId(), preferredHost, actionMetaData);\n-          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n-          resourceRequestState.cancelResourceRequest(request);\n+          // Release unstartable container\n+          standbyContainerManager.get().releaseUnstartableContainer(request, allocatedResource, preferredHost, resourceRequestState);\n           // Fallback to source host since the new allocated resource does not meet standby constraints\n           allocator.requestResource(processorId, actionMetaData.getSourceHost());\n           markContainerPlacementActionFailed(actionMetaData,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDQyNQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382400425", "bodyText": "Status wasnt updated here?", "author": "rmatharu", "createdAt": "2020-02-21T05:11:25Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -136,7 +135,22 @@ boolean handleContainerLaunch(SamzaResourceRequest request, String preferredHost\n         LOG.info(\"Waiting for running container to shutdown due to existing ContainerPlacement action {}\", actionMetaData);\n         return false;\n       } else if (actionStatus == ContainerPlacementMetadata.ContainerStatus.STOPPED) {\n-        allocator.runStreamProcessor(request, preferredHost);\n+        // If the job has standby containers enabled, always check standby constraints before issuing a start on container\n+        // Note: Always check constraints against allocated resource, since preferred host can be ANY_HOST as well\n+        if (standbyContainerManager.isPresent() && !standbyContainerManager.get().checkStandbyConstraints(request.getProcessorId(), allocatedResource.getHost())) {\n+          LOG.info(\n+              \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n+              request.getProcessorId(), preferredHost, actionMetaData);\n+          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n+          resourceRequestState.cancelResourceRequest(request);\n+          // Fallback to source host since the new allocated resource does not meet standby constraints\n+          allocator.requestResource(processorId, actionMetaData.getSourceHost());\n+          markContainerPlacementActionFailed(actionMetaData,\n+              String.format(\"allocated resource %s does not meet standby constraints now, falling back to source host\", allocatedResource));\n+        } else {\n+          LOG.info(\"Status updated for ContainerPlacement action: \", actionMetaData);", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTc3Nw==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382751777", "bodyText": "This method is invoked by the Allocator thread when only when active Container is successfully stopped, the signal of that successful stop is given by AMRMClientAsync thread. Hence a state change (done by AMRMClientAsync) is updated with metadata which is logged", "author": "Sanil15", "createdAt": "2020-02-21T19:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwMDQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..d2ee9d5a 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -141,8 +141,8 @@ public class ContainerManager {\n           LOG.info(\n               \"Starting container {} on host {} does not meet standby constraints, falling back to source host placement metadata: {}\",\n               request.getProcessorId(), preferredHost, actionMetaData);\n-          resourceRequestState.releaseUnstartableContainer(allocatedResource, preferredHost);\n-          resourceRequestState.cancelResourceRequest(request);\n+          // Release unstartable container\n+          standbyContainerManager.get().releaseUnstartableContainer(request, allocatedResource, preferredHost, resourceRequestState);\n           // Fallback to source host since the new allocated resource does not meet standby constraints\n           allocator.requestResource(processorId, actionMetaData.getSourceHost());\n           markContainerPlacementActionFailed(actionMetaData,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzIzNw==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382823237", "bodyText": "This logic seems twisted; making the code unreadable,\nwe check if there there is an active-action on the container-id, or if there is an active-action on its active/standby counterparts,\nafter that we check if there is a standby-container-manager present?\nWould it be possible to\na. first check if a standby-container-manager is present?\nOr\nb. can hasActiveContainerPlacementAction encapsulate the logic of checking a and checking with if there is an active-action on its active/standby counterparts of the given processor-id.", "author": "rmatharu", "createdAt": "2020-02-21T21:53:02Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -412,16 +429,23 @@ private void writeContainerPlacementResponseMessage(ContainerPlacementRequestMes\n   }\n \n   /**\n-   * If there is an existing inflight request or container is pending a start, the container placement action shall wait\n-   * until this in-flight action is complete\n+   * These are specific scenarios in which a placement action should wait for existing action to complete before it is executed\n+   * 1. If there is an placement request in progress on active container\n+   * 2. If there is an placement request is progress on any of its standby container\n+   * 3. If the container itself is pending a start\n    *\n    * @param requestMessage container placement request message\n    * @return true if action should be taken right now, false if it needs to wait to be taken in future\n    */\n   private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n     // Do not dequeue action wait for the in-flight action to complete\n-    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())) {\n-      LOG.info(\"ContainerPlacement request: {} is en-queued because container has an in-progress placement action\", requestMessage);\n+    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())\n+        || checkStandbyOrActiveContainerHasActivePlacementAction(requestMessage.getProcessorId())) {\n+      if (standbyContainerManager.isPresent()) {", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODUyOA==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382868528", "bodyText": "I see your point, let me refactor it", "author": "Sanil15", "createdAt": "2020-02-22T00:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "81e8509cb18da50abed469b5dd0d804b018d95fe", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..9fd289f3 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -439,13 +439,7 @@ public class ContainerManager {\n    */\n   private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n     // Do not dequeue action wait for the in-flight action to complete\n-    if (hasActiveContainerPlacementAction(requestMessage.getProcessorId())\n-        || checkStandbyOrActiveContainerHasActivePlacementAction(requestMessage.getProcessorId())) {\n-      if (standbyContainerManager.isPresent()) {\n-        LOG.info(\"ContainerPlacement request: {} is en-queued because either active container or its standby replica has an in-progress placement action\", requestMessage);\n-      } else {\n-        LOG.info(\"ContainerPlacement request: {} is en-queued because container has an in-progress placement action\", requestMessage);\n-      }\n+    if (checkIfActiveOrStandbyContainerHasActivePlacementAction(requestMessage)) {\n       return false;\n     }\n     // Do not dequeue the action wait for the container to come to a running state\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDEwMg==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382824102", "bodyText": "Instead can we define errorMessage here\nas ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: %s\"\nand later String.format(errorMessage, reason);", "author": "rmatharu", "createdAt": "2020-02-21T21:55:14Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -435,32 +459,59 @@ private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n \n   /**\n    * A valid container placement action needs a valid processor id. Duplicate actions are handled by de-duping on uuid.\n+   * If standby containers are enabled destination host requested must meet standby constraints\n    *\n    * @param requestMessage container placement request message\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODczNg==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382868736", "bodyText": "sure", "author": "Sanil15", "createdAt": "2020-02-22T00:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "81e8509cb18da50abed469b5dd0d804b018d95fe", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..9fd289f3 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -465,20 +459,20 @@ public class ContainerManager {\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: %s\";\n     Boolean invalidAction = false;\n     String errorMessage = null;\n     if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId()) &&\n         !samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())\n     ) {\n-      errorMessage = String.format(\"%s invalid processor id neither in running or pending processors\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"invalid processor id neither in running or pending processors\");\n       invalidAction = true;\n     } else if (placementRequestsCache.containsKey(requestMessage.getUuid())) {\n-      errorMessage = String.format(\"%s duplicate UUID of the request, please retry\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"duplicate UUID of the request, please retry\");\n       invalidAction = true;\n     } else if (standbyContainerManager.isPresent() && !standbyContainerManager.get()\n         .checkStandbyConstraints(requestMessage.getProcessorId(), requestMessage.getDestinationHost())) {\n-      errorMessage = String.format(\"%s destination host does not meet standby constraints\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"destination host does not meet standby constraints\");\n       invalidAction = true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDUxMw==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382824513", "bodyText": "This method can be simplified/inlined with hasActiveAction?", "author": "rmatharu", "createdAt": "2020-02-21T21:56:09Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java", "diffHunk": "@@ -435,32 +459,59 @@ private boolean deQueueAction(ContainerPlacementRequestMessage requestMessage) {\n \n   /**\n    * A valid container placement action needs a valid processor id. Duplicate actions are handled by de-duping on uuid.\n+   * If standby containers are enabled destination host requested must meet standby constraints\n    *\n    * @param requestMessage container placement request message\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = String.format(\"ContainerPlacement request: %s is rejected due to\", requestMessage);\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";\n     Boolean invalidAction = false;\n     String errorMessage = null;\n-    if (standbyContainerManager.isPresent()) {\n-      errorMessage = String.format(\"%s not supported for hot standby enabled\", errorMessagePrefix);\n+    if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId()) &&\n+        !samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())\n+    ) {\n+      errorMessage = String.format(\"%s invalid processor id neither in running or pending processors\", errorMessagePrefix);\n       invalidAction = true;\n     } else if (placementRequestsCache.containsKey(requestMessage.getUuid())) {\n       errorMessage = String.format(\"%s duplicate UUID of the request, please retry\", errorMessagePrefix);\n       invalidAction = true;\n-    } else if (Integer.parseInt(requestMessage.getProcessorId()) >= samzaApplicationState.processorCount.get()\n-    ) {\n-      errorMessage = String.format(\"%s invalid processor id\", errorMessagePrefix);\n+    } else if (standbyContainerManager.isPresent() && !standbyContainerManager.get()\n+        .checkStandbyConstraints(requestMessage.getProcessorId(), requestMessage.getDestinationHost())) {\n+      errorMessage = String.format(\"%s destination host does not meet standby constraints\", errorMessagePrefix);\n       invalidAction = true;\n     }\n \n     if (invalidAction) {\n-      LOG.info(errorMessage);\n       return new ImmutablePair<>(ContainerPlacementMessage.StatusCode.BAD_REQUEST, errorMessage);\n     }\n \n     return new ImmutablePair<>(ContainerPlacementMessage.StatusCode.ACCEPTED, \"Request is accepted\");\n   }\n \n+  /**\n+   * An active and a standby container cannot have a concurrent placement action in flight, if they do actions are taken\n+   * serially in the order of timestamps\n+   */\n+  private boolean checkStandbyOrActiveContainerHasActivePlacementAction(String processorId) {\n+    if (standbyContainerManager.isPresent()) {\n+      // If requested placement action is on a standby container and its active container has a placement request,\n+      // this request shall not be de-queued until in-flight action on active container is complete\n+      if (StandbyTaskUtil.isStandbyContainer(processorId) && hasActiveContainerPlacementAction(\n+          StandbyTaskUtil.getActiveContainerId(processorId))) {\n+        return true;\n+      }\n+      // If requested placement action is on a standby container and its active container has a placement request,\n+      // this request shall not be de-queued until in-flight action on active container is complete\n+      if (!StandbyTaskUtil.isStandbyContainer(processorId)) {\n+        for (String standby : standbyContainerManager.get().getStandbyList(processorId)) {\n+          if (hasActiveContainerPlacementAction(standby)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODgwMQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382868801", "bodyText": "done", "author": "Sanil15", "createdAt": "2020-02-22T00:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjI0OQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382872249", "bodyText": "done", "author": "Sanil15", "createdAt": "2020-02-22T01:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "81e8509cb18da50abed469b5dd0d804b018d95fe", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\nindex 53ae6f10..9fd289f3 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/ContainerManager.java\n\n@@ -465,20 +459,20 @@ public class ContainerManager {\n    * @return Pair<ContainerPlacementMessage.StatusCode, String> which is status code & response suggesting if the request is valid\n    */\n   private Pair<ContainerPlacementMessage.StatusCode, String> validatePlacementAction(ContainerPlacementRequestMessage requestMessage) {\n-    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: \";\n+    String errorMessagePrefix = ContainerPlacementMessage.StatusCode.BAD_REQUEST + \" reason: %s\";\n     Boolean invalidAction = false;\n     String errorMessage = null;\n     if (!samzaApplicationState.runningProcessors.containsKey(requestMessage.getProcessorId()) &&\n         !samzaApplicationState.pendingProcessors.containsKey(requestMessage.getProcessorId())\n     ) {\n-      errorMessage = String.format(\"%s invalid processor id neither in running or pending processors\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"invalid processor id neither in running or pending processors\");\n       invalidAction = true;\n     } else if (placementRequestsCache.containsKey(requestMessage.getUuid())) {\n-      errorMessage = String.format(\"%s duplicate UUID of the request, please retry\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"duplicate UUID of the request, please retry\");\n       invalidAction = true;\n     } else if (standbyContainerManager.isPresent() && !standbyContainerManager.get()\n         .checkStandbyConstraints(requestMessage.getProcessorId(), requestMessage.getDestinationHost())) {\n-      errorMessage = String.format(\"%s destination host does not meet standby constraints\", errorMessagePrefix);\n+      errorMessage = String.format(errorMessagePrefix, \"destination host does not meet standby constraints\");\n       invalidAction = true;\n     }\n \n"}}, {"oid": "f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "url": "https://github.com/apache/samza/commit/f4976d3cfa08a3a96a2ccb60f6d3b74f1bccd7b5", "message": "Addressing feedback", "committedDate": "2020-02-21T21:57:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMTQxMQ==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382831411", "bodyText": "see comment above on simplifying,\nYou can additional methods here to simplify the caller's logic, so that the caller does not need to know the internals of the standby container manager.", "author": "rmatharu", "createdAt": "2020-02-21T22:14:13Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java", "diffHunk": "@@ -425,6 +423,15 @@ public void handleExpiredResourceRequest(String containerID, SamzaResourceReques\n     }\n   }\n \n+  /**\n+   * Fetches a list of standby container for an active container\n+   * @param activeContainerId logical id of the container ex: 0,1,2\n+   * @return list of standby containers ex: for active container 0: {0-0, 0-1}\n+   */\n+  List<String> getStandbyList(String activeContainerId) {\n+    return this.standbyContainerConstraints.get(activeContainerId);\n+  }", "originalCommit": "539ffd335f81bc17fc5dcb627469e35310e30428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODg5Nw==", "url": "https://github.com/apache/samza/pull/1281#discussion_r382868897", "bodyText": "So I need this exposed from StandbyContainerManager because I need to refer to metadata maintained in ContainerManager for checking active actions on each standby replica, the method here just exposes the list of standby replicas!", "author": "Sanil15", "createdAt": "2020-02-22T00:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMTQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "81e8509cb18da50abed469b5dd0d804b018d95fe", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java b/samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java\nindex ae8b4ae6..a9d298d3 100644\n--- a/samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java\n+++ b/samza-core/src/main/java/org/apache/samza/clustermanager/StandbyContainerManager.java\n\n@@ -432,6 +429,16 @@ public class StandbyContainerManager {\n     return this.standbyContainerConstraints.get(activeContainerId);\n   }\n \n+  /**\n+   * Release un-startable resources immediately and deletes requests corresponsing to it\n+   */\n+  void releaseUnstartableContainer(SamzaResourceRequest request, SamzaResource resource, String preferredHost,\n+      ResourceRequestState resourceRequestState) {\n+    resourceRequestState.releaseUnstartableContainer(resource, preferredHost);\n+    resourceRequestState.cancelResourceRequest(request);\n+  }\n+\n+\n   // Handle an expired resource request that was made for placing a standby container\n   private void handleExpiredRequestForStandbyContainer(String containerID, SamzaResourceRequest request,\n       Optional<SamzaResource> alternativeResource, ContainerAllocator containerAllocator,\n"}}, {"oid": "81e8509cb18da50abed469b5dd0d804b018d95fe", "url": "https://github.com/apache/samza/commit/81e8509cb18da50abed469b5dd0d804b018d95fe", "message": "Adressing comments inlining methods for checking active actions", "committedDate": "2020-02-22T01:11:42Z", "type": "commit"}, {"oid": "3cfb544d1f3aed8aea8b91367e9aa31bee7fa9cc", "url": "https://github.com/apache/samza/commit/3cfb544d1f3aed8aea8b91367e9aa31bee7fa9cc", "message": "Add metrics for failed container placement actions", "committedDate": "2020-02-22T01:23:31Z", "type": "commit"}, {"oid": "680de8639e91944422f025182cb394b8392a13fe", "url": "https://github.com/apache/samza/commit/680de8639e91944422f025182cb394b8392a13fe", "message": "remove unwanted file", "committedDate": "2020-02-28T21:16:40Z", "type": "commit"}]}