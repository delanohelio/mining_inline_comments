{"pr_number": 1424, "pr_title": "SAMZA-2584: Refactor ClusterBasedJobCoordinator", "pr_createdAt": "2020-08-27T21:27:15Z", "pr_url": "https://github.com/apache/samza/pull/1424", "timeline": [{"oid": "bcec4731bd1c8460ec234d003926ef7927f3c135", "url": "https://github.com/apache/samza/commit/bcec4731bd1c8460ec234d003926ef7927f3c135", "message": "SAMZA-2584: Refactor ClusterBasedJobCoordinator\n\nIssues: In the deployment flow of a beam job, we will have a complicate flow: ClusterBasedJobCoordinator#main -> Beam main class -> JobCoordinatorLaunchUtil -> ClusterBasedJobCoordinator.\nChanges:\n  1. Move ClusterBasedJobCoordinator#main to ClusterBasedJobCoordinatorRunner#main\n  2. Update run-jc.sh to invoke ClusterBasedJobCoordinatorRunner\nTests:\n  1. unit tests\n  2. Deployed hello samza job successfully with the change following instructions on http://samza.apache.org/startup/hello-samza/latest/\nAPI Changes: None\nUpgrade Instructions: None\nUsage Instructions: None", "committedDate": "2020-08-27T21:25:48Z", "type": "commit"}, {"oid": "0e6b07b4c37a2e8fddfe1410c77bf29c65b04754", "url": "https://github.com/apache/samza/commit/0e6b07b4c37a2e8fddfe1410c77bf29c65b04754", "message": "Add a new line", "committedDate": "2020-08-27T21:27:28Z", "type": "commit"}, {"oid": "0eddc43ce8a3fb88fcead602bb61d3a8b7d6e3e8", "url": "https://github.com/apache/samza/commit/0eddc43ce8a3fb88fcead602bb61d3a8b7d6e3e8", "message": "Remove unused import", "committedDate": "2020-08-31T17:09:36Z", "type": "commit"}, {"oid": "3fc3b15c374249a1f2c501881a4f71da2e9c323e", "url": "https://github.com/apache/samza/commit/3fc3b15c374249a1f2c501881a4f71da2e9c323e", "message": "Update run-jc.sh to use ClusterBasedJobCoordinatorRunner", "committedDate": "2020-09-02T16:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyMTYzOQ==", "url": "https://github.com/apache/samza/pull/1424#discussion_r482221639", "bodyText": "I'd suggest to keep the old name as is since it is indeed testing the functionality of ClusterBasedJobCoordinator like startpoint fanout, partition monitor.\nIf you can create a new test class for ClusterBasedJobCoordinatorRunner and then add test for runClusterBasedJobCoordinator (rest of the methods are mostly helpers to construct dependencies) that will be great.", "author": "mynameborat", "createdAt": "2020-09-02T16:57:20Z", "path": "samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinatorRunner.java", "diffHunk": "@@ -64,15 +64,15 @@\n \n \n /**\n- * Tests for {@link ClusterBasedJobCoordinator}\n+ * Tests for {@link TestClusterBasedJobCoordinatorRunner}\n  */\n @RunWith(PowerMockRunner.class)\n @PrepareForTest({\n     CoordinatorStreamUtil.class,\n-    ClusterBasedJobCoordinator.class,\n+    ClusterBasedJobCoordinatorRunner.class,\n     CoordinatorStreamStore.class,\n     RemoteJobPlanner.class})\n-public class TestClusterBasedJobCoordinator {", "originalCommit": "3fc3b15c374249a1f2c501881a4f71da2e9c323e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cd70450fe305f8bbc706df2f04fef17e12183bd", "chunk": "diff --git a/samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinatorRunner.java b/samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinatorRunner.java\nindex 806e655d..52576a5c 100644\n--- a/samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinatorRunner.java\n+++ b/samza-core/src/test/java/org/apache/samza/clustermanager/TestClusterBasedJobCoordinatorRunner.java\n\n@@ -1,195 +1,60 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n package org.apache.samza.clustermanager;\n \n import com.google.common.collect.ImmutableMap;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.samza.Partition;\n-import org.apache.samza.SamzaException;\n-import org.apache.samza.config.ApplicationConfig;\n+import org.apache.samza.application.ApplicationUtil;\n+import org.apache.samza.application.StreamApplication;\n import org.apache.samza.config.Config;\n import org.apache.samza.config.JobConfig;\n import org.apache.samza.config.MapConfig;\n-import org.apache.samza.coordinator.StreamPartitionCountMonitor;\n-import org.apache.samza.coordinator.metadatastore.CoordinatorStreamStore;\n-import org.apache.samza.coordinator.stream.CoordinatorStreamSystemProducer;\n-import org.apache.samza.coordinator.stream.MockCoordinatorStreamSystemFactory;\n-import org.apache.samza.execution.RemoteJobPlanner;\n-import org.apache.samza.metrics.MetricsRegistry;\n-import org.apache.samza.startpoint.StartpointManager;\n-import org.apache.samza.system.MockSystemFactory;\n-import org.apache.samza.system.SystemStream;\n-import org.apache.samza.system.SystemStreamPartition;\n-import org.apache.samza.util.CoordinatorStreamUtil;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.apache.samza.config.ShellCommandConfig;\n+import org.apache.samza.config.loaders.PropertiesConfigLoaderFactory;\n+import org.apache.samza.serializers.model.SamzaObjectMapper;\n+import org.apache.samza.util.ConfigUtil;\n+import org.apache.samza.util.Util;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mockito;\n-import org.mockito.exceptions.base.MockitoException;\n import org.powermock.api.mockito.PowerMockito;\n import org.powermock.core.classloader.annotations.PrepareForTest;\n import org.powermock.modules.junit4.PowerMockRunner;\n \n-import static org.junit.Assert.*;\n-import static org.mockito.Matchers.*;\n-import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.doThrow;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.times;\n import static org.powermock.api.mockito.PowerMockito.mock;\n \n \n-/**\n- * Tests for {@link TestClusterBasedJobCoordinatorRunner}\n- */\n @RunWith(PowerMockRunner.class)\n @PrepareForTest({\n-    CoordinatorStreamUtil.class,\n+    System.class,\n     ClusterBasedJobCoordinatorRunner.class,\n-    CoordinatorStreamStore.class,\n-    RemoteJobPlanner.class})\n+    ApplicationUtil.class,\n+    JobCoordinatorLaunchUtil.class\n+})\n public class TestClusterBasedJobCoordinatorRunner {\n \n-  private Map<String, String> configMap;\n-\n-  @Before\n-  public void setUp() {\n-    configMap = new HashMap<>();\n-    configMap.put(\"job.name\", \"test-job\");\n-    configMap.put(\"job.coordinator.system\", \"kafka\");\n-    configMap.put(\"task.inputs\", \"kafka.topic1\");\n-    configMap.put(\"systems.kafka.samza.factory\", \"org.apache.samza.system.MockSystemFactory\");\n-    configMap.put(\"samza.cluster-manager.factory\", \"org.apache.samza.clustermanager.MockClusterResourceManagerFactory\");\n-    configMap.put(\"job.coordinator.monitor-partition-change.frequency.ms\", \"1\");\n-\n-    MockSystemFactory.MSG_QUEUES.put(new SystemStreamPartition(\"kafka\", \"topic1\", new Partition(0)), new ArrayList<>());\n-    MockSystemFactory.MSG_QUEUES.put(new SystemStreamPartition(\"kafka\", \"__samza_coordinator_test-job_1\", new Partition(0)), new ArrayList<>());\n-    MockCoordinatorStreamSystemFactory.enableMockConsumerCache();\n-    PowerMockito.mockStatic(CoordinatorStreamUtil.class);\n-    when(CoordinatorStreamUtil.getCoordinatorSystemFactory(anyObject())).thenReturn(\n-        new MockCoordinatorStreamSystemFactory());\n-    when(CoordinatorStreamUtil.getCoordinatorSystemStream(anyObject())).thenReturn(new SystemStream(\"kafka\", \"test\"));\n-    when(CoordinatorStreamUtil.getCoordinatorStreamName(anyObject(), anyObject())).thenReturn(\"test\");\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    MockSystemFactory.MSG_QUEUES.clear();\n-  }\n-\n   @Test\n-  public void testPartitionCountMonitorWithDurableStates() {\n-    configMap.put(\"stores.mystore.changelog\", \"mychangelog\");\n-    configMap.put(JobConfig.JOB_CONTAINER_COUNT, \"1\");\n-    when(CoordinatorStreamUtil.readConfigFromCoordinatorStream(anyObject())).thenReturn(new MapConfig(configMap));\n-    Config config = new MapConfig(configMap);\n-\n-    // mimic job runner code to write the config to coordinator stream\n-    CoordinatorStreamSystemProducer producer = new CoordinatorStreamSystemProducer(config, mock(MetricsRegistry.class));\n-    producer.writeConfig(\"test-job\", config);\n-\n-    ClusterBasedJobCoordinator clusterCoordinator = ClusterBasedJobCoordinatorRunner.createFromMetadataStore(config);\n-\n-    // change the input system stream metadata\n-    MockSystemFactory.MSG_QUEUES.put(new SystemStreamPartition(\"kafka\", \"topic1\", new Partition(1)), new ArrayList<>());\n-\n-    StreamPartitionCountMonitor monitor = clusterCoordinator.getPartitionMonitor();\n-    monitor.updatePartitionCountMetric();\n-    assertEquals(clusterCoordinator.getAppStatus(), SamzaApplicationState.SamzaAppStatus.FAILED);\n-  }\n-\n-  @Test\n-  public void testPartitionCountMonitorWithoutDurableStates() {\n-    configMap.put(JobConfig.JOB_CONTAINER_COUNT, \"1\");\n-    when(CoordinatorStreamUtil.readConfigFromCoordinatorStream(anyObject())).thenReturn(new MapConfig(configMap));\n-    Config config = new MapConfig(configMap);\n-\n-    // mimic job runner code to write the config to coordinator stream\n-    CoordinatorStreamSystemProducer producer = new CoordinatorStreamSystemProducer(config, mock(MetricsRegistry.class));\n-    producer.writeConfig(\"test-job\", config);\n-\n-    ClusterBasedJobCoordinator clusterCoordinator = ClusterBasedJobCoordinatorRunner.createFromMetadataStore(config);\n-\n-    // change the input system stream metadata\n-    MockSystemFactory.MSG_QUEUES.put(new SystemStreamPartition(\"kafka\", \"topic1\", new Partition(1)), new ArrayList<>());\n-\n-    StreamPartitionCountMonitor monitor = clusterCoordinator.getPartitionMonitor();\n-    monitor.updatePartitionCountMetric();\n-    assertEquals(clusterCoordinator.getAppStatus(), SamzaApplicationState.SamzaAppStatus.UNDEFINED);\n-  }\n-\n-  @Test\n-  public void testVerifyStartpointManagerFanOut() throws IOException {\n-    configMap.put(JobConfig.JOB_CONTAINER_COUNT, \"1\");\n-    configMap.put(\"job.jmx.enabled\", \"false\");\n-    when(CoordinatorStreamUtil.readConfigFromCoordinatorStream(anyObject())).thenReturn(new MapConfig(configMap));\n-    Config config = new MapConfig(configMap);\n-    MockitoException stopException = new MockitoException(\"Stop\");\n-\n-    ClusterBasedJobCoordinator clusterCoordinator = Mockito.spy(ClusterBasedJobCoordinatorRunner.createFromMetadataStore(config));\n-    ContainerProcessManager mockContainerProcessManager = mock(ContainerProcessManager.class);\n-    doReturn(true).when(mockContainerProcessManager).shouldShutdown();\n-    StartpointManager mockStartpointManager = mock(StartpointManager.class);\n-\n-    // Stop ClusterBasedJobCoordinator#run after stop() method by throwing an exception to stop the run loop.\n-    // ClusterBasedJobCoordinator will need to be refactored for better mock support.\n-    doThrow(stopException).when(mockStartpointManager).stop();\n-\n-    doReturn(mockContainerProcessManager).when(clusterCoordinator).createContainerProcessManager();\n-    doReturn(mockStartpointManager).when(clusterCoordinator).createStartpointManager();\n-    try {\n-      clusterCoordinator.run();\n-    } catch (SamzaException ex) {\n-      assertEquals(stopException, ex.getCause());\n-      verify(mockStartpointManager).start();\n-      verify(mockStartpointManager).fanOut(any());\n-      verify(mockStartpointManager).stop();\n-      return;\n-    }\n-    fail(\"Expected run() method to stop after StartpointManager#stop()\");\n-  }\n-\n-  @Test\n-  public void testToArgs() {\n-    ApplicationConfig appConfig = new ApplicationConfig(new MapConfig(ImmutableMap.of(\n-        JobConfig.JOB_NAME, \"test1\",\n-        ApplicationConfig.APP_CLASS, \"class1\",\n-        ApplicationConfig.APP_MAIN_ARGS, \"--runner=SamzaRunner --maxSourceParallelism=1024\"\n-    )));\n-\n-    List<String> expected = Arrays.asList(\n-        \"--config\", \"job.name=test1\",\n-        \"--config\", \"app.class=class1\",\n-        \"--runner=SamzaRunner\",\n-        \"--maxSourceParallelism=1024\");\n-    List<String> actual = Arrays.asList(ClusterBasedJobCoordinatorRunner.toArgs(appConfig));\n-\n-    // cannot assert expected equals to actual as the order can be different.\n-    assertEquals(expected.size(), actual.size());\n-    assertTrue(actual.containsAll(expected));\n+  public void testRunClusterBasedJobCoordinator() throws Exception  {\n+    Config submissionConfig = new MapConfig(ImmutableMap.of(\n+        JobConfig.CONFIG_LOADER_FACTORY,\n+        PropertiesConfigLoaderFactory.class.getName(),\n+        PropertiesConfigLoaderFactory.CONFIG_LOADER_PROPERTIES_PREFIX + \"path\",\n+        getClass().getResource(\"/test.properties\").getPath()));\n+    Config fullConfig = ConfigUtil.loadConfig(submissionConfig);\n+    StreamApplication mockApplication = mock(StreamApplication.class);\n+    PowerMockito.mockStatic(System.class, ApplicationUtil.class, JobCoordinatorLaunchUtil.class);\n+    PowerMockito\n+        .when(System.getenv(eq(ShellCommandConfig.ENV_SUBMISSION_CONFIG)))\n+        .thenReturn(SamzaObjectMapper.getObjectMapper().writeValueAsString(submissionConfig));\n+    PowerMockito\n+        .when(ApplicationUtil.fromConfig(any()))\n+        .thenReturn(mockApplication);\n+    PowerMockito.doNothing().when(JobCoordinatorLaunchUtil.class, \"run\", mockApplication, fullConfig);\n+\n+    ClusterBasedJobCoordinatorRunner.runClusterBasedJobCoordinator(null);\n+\n+    PowerMockito.verifyStatic(times(1));\n+    JobCoordinatorLaunchUtil.run(mockApplication, fullConfig);\n   }\n }\n"}}, {"oid": "8cd70450fe305f8bbc706df2f04fef17e12183bd", "url": "https://github.com/apache/samza/commit/8cd70450fe305f8bbc706df2f04fef17e12183bd", "message": "Rename TestClusterBasedJobCoordinatorRunner back to TestClusterBasedJobCoordinator\nAdd TestClusterBasedJobCoordinatorRunner to test runClusterBasedJobCoordinator() in ClusterBasedJobCoordinatorRunner", "committedDate": "2020-09-02T18:47:37Z", "type": "commit"}, {"oid": "4a7ce75786b3f9d48a511ec7807e6557b82cecad", "url": "https://github.com/apache/samza/commit/4a7ce75786b3f9d48a511ec7807e6557b82cecad", "message": "Add license info", "committedDate": "2020-09-02T19:46:57Z", "type": "commit"}, {"oid": "c409a0c9bcfc81411c40163d05b2a58e03039aff", "url": "https://github.com/apache/samza/commit/c409a0c9bcfc81411c40163d05b2a58e03039aff", "message": "Fix checkstyle", "committedDate": "2020-09-02T21:05:56Z", "type": "commit"}]}