{"pr_number": 1431, "pr_title": "Adding internal table-api config for table-api rate limits", "pr_createdAt": "2020-09-17T04:45:13Z", "pr_url": "https://github.com/apache/samza/pull/1431", "timeline": [{"oid": "39a94abd7e410eb6f026d2c49776359eb9e7ddbc", "url": "https://github.com/apache/samza/commit/39a94abd7e410eb6f026d2c49776359eb9e7ddbc", "message": "Adding internal table-api config for table-api rate limits", "committedDate": "2020-09-17T04:40:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzU1OA==", "url": "https://github.com/apache/samza/pull/1431#discussion_r491183558", "bodyText": "Please undo indent/superfluous changes like these, it pollutes the git blame history, also makes it harder to review things.\nI believe auto-indent on your IDE may be the culprit here.", "author": "rmatharu", "createdAt": "2020-09-18T20:48:15Z", "path": "samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java", "diffHunk": "@@ -288,7 +289,8 @@ public String getProviderFactoryClassName() {\n       RateLimiter defaultRateLimiter;\n       try {\n         @SuppressWarnings(\"unchecked\")\n-        Class<? extends RateLimiter> clazz = (Class<? extends RateLimiter>) Class.forName(DEFAULT_RATE_LIMITER_CLASS_NAME);\n+        Class<? extends RateLimiter> clazz =\n+            (Class<? extends RateLimiter>) Class.forName(DEFAULT_RATE_LIMITER_CLASS_NAME);", "originalCommit": "39a94abd7e410eb6f026d2c49776359eb9e7ddbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDE2Ng==", "url": "https://github.com/apache/samza/pull/1431#discussion_r491190166", "bodyText": "+1", "author": "prateekm", "createdAt": "2020-09-18T21:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3ae8e76d34be1f906c717792f853a51300101844", "chunk": "diff --git a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\nindex 52f8ac4c8..09d621203 100644\n--- a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n+++ b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n\n@@ -284,36 +285,7 @@ public class RemoteTableDescriptor<K, V> extends BaseTableDescriptor<K, V, Remot\n \n     Map<String, String> tableConfig = new HashMap<>(super.toConfig(jobConfig));\n \n-    // Handle rate limiter\n-    if (!tagCreditsMap.isEmpty()) {\n-      RateLimiter defaultRateLimiter;\n-      try {\n-        @SuppressWarnings(\"unchecked\")\n-        Class<? extends RateLimiter> clazz =\n-            (Class<? extends RateLimiter>) Class.forName(DEFAULT_RATE_LIMITER_CLASS_NAME);\n-        Constructor<? extends RateLimiter> ctor = clazz.getConstructor(Map.class);\n-        defaultRateLimiter = ctor.newInstance(tagCreditsMap);\n-      } catch (Exception ex) {\n-        throw new SamzaException(\"Failed to create default rate limiter\", ex);\n-      }\n-      addTableConfig(RATE_LIMITER, SerdeUtils.serialize(\"rate limiter\", defaultRateLimiter), tableConfig);\n-      if (defaultRateLimiter instanceof TablePart) {\n-        addTablePartConfig(RATE_LIMITER, (TablePart) defaultRateLimiter, jobConfig, tableConfig);\n-      }\n-    } else if (rateLimiter != null) {\n-      addTableConfig(RATE_LIMITER, SerdeUtils.serialize(\"rate limiter\", rateLimiter), tableConfig);\n-      if (rateLimiter instanceof TablePart) {\n-        addTablePartConfig(RATE_LIMITER, (TablePart) rateLimiter, jobConfig, tableConfig);\n-      }\n-    }\n-\n-    //emit table api read/write rate limit\n-    if (this.enableReadRateLimiter && tagCreditsMap.containsKey(RL_READ_TAG)) {\n-      addTableConfig(READ_RATE_LIMIT, String.valueOf(tagCreditsMap.get(RL_READ_TAG)), tableConfig);\n-    }\n-    if (this.enableWriteRateLimiter && tagCreditsMap.containsKey(RL_WRITE_TAG)) {\n-      addTableConfig(WRITE_RATE_LIMIT, String.valueOf(tagCreditsMap.get(RL_WRITE_TAG)), tableConfig);\n-    }\n+    writeRateLimiterConfig(jobConfig, tableConfig);\n \n     // Handle readCredit functions\n     if (readCreditFn != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDEzNQ==", "url": "https://github.com/apache/samza/pull/1431#discussion_r491190135", "bodyText": "Minor: move them next to other rate limiter related configs (io.ratelimiter) etc.\nWould it make sense to call these io.read.credits and io.write.credits for consistent terminology with rest of the configs?\nCan you also document how this config is used?", "author": "prateekm", "createdAt": "2020-09-18T21:04:47Z", "path": "samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java", "diffHunk": "@@ -76,6 +76,8 @@\n   public static final String READ_RETRY_POLICY = \"io.read.retry.policy\";\n   public static final String WRITE_RETRY_POLICY = \"io.write.retry.policy\";\n   public static final String BATCH_PROVIDER = \"io.batch.provider\";\n+  public static final String READ_RATE_LIMIT = \"io.read.ratelimit\";", "originalCommit": "39a94abd7e410eb6f026d2c49776359eb9e7ddbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ae8e76d34be1f906c717792f853a51300101844", "chunk": "diff --git a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\nindex 52f8ac4c8..09d621203 100644\n--- a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n+++ b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n\n@@ -70,14 +70,14 @@ public class RemoteTableDescriptor<K, V> extends BaseTableDescriptor<K, V, Remot\n   public static final String READ_FN = \"io.read.func\";\n   public static final String WRITE_FN = \"io.write.func\";\n   public static final String RATE_LIMITER = \"io.ratelimiter\";\n+  public static final String READ_CREDITS = \"io.read.credits\";\n+  public static final String WRITE_CREDITS = \"io.write.credits\";\n   public static final String READ_CREDIT_FN = \"io.read.credit.func\";\n   public static final String WRITE_CREDIT_FN = \"io.write.credit.func\";\n   public static final String ASYNC_CALLBACK_POOL_SIZE = \"io.async.callback.pool.size\";\n   public static final String READ_RETRY_POLICY = \"io.read.retry.policy\";\n   public static final String WRITE_RETRY_POLICY = \"io.write.retry.policy\";\n   public static final String BATCH_PROVIDER = \"io.batch.provider\";\n-  public static final String READ_RATE_LIMIT = \"io.read.ratelimit\";\n-  public static final String WRITE_RATE_LIMIT = \"io.write.ratelimit\";\n \n   // Input support for a specific remote store (optional)\n   private TableReadFunction<K, V> readFn;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDIwNw==", "url": "https://github.com/apache/samza/pull/1431#discussion_r491190207", "bodyText": "s/emit/write.\nCan you extract all of the rate limiter related config generation logic (factory, serde, limits) to a helper method? Will be easier to read.", "author": "prateekm", "createdAt": "2020-09-18T21:04:54Z", "path": "samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java", "diffHunk": "@@ -305,6 +307,14 @@ public String getProviderFactoryClassName() {\n       }\n     }\n \n+    //emit table api read/write rate limit\n+    if (this.enableReadRateLimiter && tagCreditsMap.containsKey(RL_READ_TAG)) {", "originalCommit": "39a94abd7e410eb6f026d2c49776359eb9e7ddbc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ae8e76d34be1f906c717792f853a51300101844", "chunk": "diff --git a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\nindex 52f8ac4c8..09d621203 100644\n--- a/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n+++ b/samza-api/src/main/java/org/apache/samza/table/descriptors/RemoteTableDescriptor.java\n\n@@ -284,36 +285,7 @@ public class RemoteTableDescriptor<K, V> extends BaseTableDescriptor<K, V, Remot\n \n     Map<String, String> tableConfig = new HashMap<>(super.toConfig(jobConfig));\n \n-    // Handle rate limiter\n-    if (!tagCreditsMap.isEmpty()) {\n-      RateLimiter defaultRateLimiter;\n-      try {\n-        @SuppressWarnings(\"unchecked\")\n-        Class<? extends RateLimiter> clazz =\n-            (Class<? extends RateLimiter>) Class.forName(DEFAULT_RATE_LIMITER_CLASS_NAME);\n-        Constructor<? extends RateLimiter> ctor = clazz.getConstructor(Map.class);\n-        defaultRateLimiter = ctor.newInstance(tagCreditsMap);\n-      } catch (Exception ex) {\n-        throw new SamzaException(\"Failed to create default rate limiter\", ex);\n-      }\n-      addTableConfig(RATE_LIMITER, SerdeUtils.serialize(\"rate limiter\", defaultRateLimiter), tableConfig);\n-      if (defaultRateLimiter instanceof TablePart) {\n-        addTablePartConfig(RATE_LIMITER, (TablePart) defaultRateLimiter, jobConfig, tableConfig);\n-      }\n-    } else if (rateLimiter != null) {\n-      addTableConfig(RATE_LIMITER, SerdeUtils.serialize(\"rate limiter\", rateLimiter), tableConfig);\n-      if (rateLimiter instanceof TablePart) {\n-        addTablePartConfig(RATE_LIMITER, (TablePart) rateLimiter, jobConfig, tableConfig);\n-      }\n-    }\n-\n-    //emit table api read/write rate limit\n-    if (this.enableReadRateLimiter && tagCreditsMap.containsKey(RL_READ_TAG)) {\n-      addTableConfig(READ_RATE_LIMIT, String.valueOf(tagCreditsMap.get(RL_READ_TAG)), tableConfig);\n-    }\n-    if (this.enableWriteRateLimiter && tagCreditsMap.containsKey(RL_WRITE_TAG)) {\n-      addTableConfig(WRITE_RATE_LIMIT, String.valueOf(tagCreditsMap.get(RL_WRITE_TAG)), tableConfig);\n-    }\n+    writeRateLimiterConfig(jobConfig, tableConfig);\n \n     // Handle readCredit functions\n     if (readCreditFn != null) {\n"}}, {"oid": "3ae8e76d34be1f906c717792f853a51300101844", "url": "https://github.com/apache/samza/commit/3ae8e76d34be1f906c717792f853a51300101844", "message": "address comments", "committedDate": "2020-09-19T00:53:56Z", "type": "commit"}, {"oid": "a1d1c0c8cc6826274ceb2ccbebe4f72869bc4b80", "url": "https://github.com/apache/samza/commit/a1d1c0c8cc6826274ceb2ccbebe4f72869bc4b80", "message": "style", "committedDate": "2020-09-19T00:56:11Z", "type": "commit"}, {"oid": "f8b5b5a049b5f4599465247a8d0a968d1f9f07ef", "url": "https://github.com/apache/samza/commit/f8b5b5a049b5f4599465247a8d0a968d1f9f07ef", "message": "style", "committedDate": "2020-09-19T01:03:03Z", "type": "commit"}]}