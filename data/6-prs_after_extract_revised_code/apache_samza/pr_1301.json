{"pr_number": 1301, "pr_title": "Samza-2478: Add new metrics to track key and value size of records written to RocksDb", "pr_createdAt": "2020-03-04T19:58:50Z", "pr_url": "https://github.com/apache/samza/pull/1301", "timeline": [{"oid": "7e87d215cc51abbc9ce6984b2e6d399acf6d025f", "url": "https://github.com/apache/samza/commit/7e87d215cc51abbc9ce6984b2e6d399acf6d025f", "message": "Add record key value size histogram metric", "committedDate": "2020-03-04T01:08:46Z", "type": "commit"}, {"oid": "6478824bedcf7608e48fee49b5c5e91c3d5b676d", "url": "https://github.com/apache/samza/commit/6478824bedcf7608e48fee49b5c5e91c3d5b676d", "message": "coding done", "committedDate": "2020-03-04T19:49:29Z", "type": "commit"}, {"oid": "76d216eb1e257b6c2779e26af716f96ff35fdff7", "url": "https://github.com/apache/samza/commit/76d216eb1e257b6c2779e26af716f96ff35fdff7", "message": "delete unused function", "committedDate": "2020-03-04T19:56:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODEyNA==", "url": "https://github.com/apache/samza/pull/1301#discussion_r387908124", "bodyText": "Maybe add comments to describe what this test is doing?", "author": "rmatharu", "createdAt": "2020-03-04T20:11:42Z", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistry;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.SamzaHistogram;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistry metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  @Test\n+  public void testHistogramMetric() {", "originalCommit": "76d216eb1e257b6c2779e26af716f96ff35fdff7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "chunk": "diff --git a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\nindex 8397c2e8..e4f83d6e 100644\n--- a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n+++ b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n\n@@ -6,10 +6,13 @@ import java.util.List;\n import java.util.Map;\n import java.util.Random;\n import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n import org.apache.samza.metrics.Gauge;\n import org.apache.samza.metrics.MetricsRegistry;\n import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n import org.apache.samza.metrics.SamzaHistogram;\n+import org.apache.samza.metrics.Timer;\n import org.apache.samza.serializers.Serde;\n import org.apache.samza.serializers.StringSerde;\n import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw==", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912747", "bodyText": "javadoc?", "author": "rmatharu", "createdAt": "2020-03-04T20:21:40Z", "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -65,4 +68,8 @@ public T getValue() {\n   public Timer newTimer(String name) {\n     return registry.newTimer(groupName, (prefix + name).toLowerCase());\n   }\n+", "originalCommit": "76d216eb1e257b6c2779e26af716f96ff35fdff7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMjAxNQ==", "url": "https://github.com/apache/samza/pull/1301#discussion_r393802015", "bodyText": "+1", "author": "mynameborat", "createdAt": "2020-03-17T16:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjc0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java b/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\nindex 7fb0c0dc..028eef43 100644\n--- a/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\n+++ b/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\n\n@@ -70,6 +70,6 @@ public class MetricGroup {\n   }\n \n   public SamzaHistogram newHistogram(String name, List<Double> histogram_percentiles){\n-    return new SamzaHistogram(registry, groupName, name, histogram_percentiles);\n+    return new SamzaHistogram(registry, groupName, (prefix + name).toLowerCase(), histogram_percentiles);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjk4Ng==", "url": "https://github.com/apache/samza/pull/1301#discussion_r387912986", "bodyText": "Is this only for testing?\nIn that case you can make it package-private and use @VisibleForTesting flag.", "author": "rmatharu", "createdAt": "2020-03-04T20:22:08Z", "path": "samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java", "diffHunk": "@@ -60,6 +60,11 @@ public void updateGaugeValues(double percentile) {\n     gauges.get(percentile).set(values.getValue(percentile / 100));\n   }\n \n+  //for debug\n+  public Map<Double, Gauge<Double>> getGauges() {\n+    return gauges;\n+  }", "originalCommit": "76d216eb1e257b6c2779e26af716f96ff35fdff7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA0MzExNA==", "url": "https://github.com/apache/samza/pull/1301#discussion_r388043114", "bodyText": "I deleted this method and used a MetricsVisitor instead.", "author": "xiefan46", "createdAt": "2020-03-05T02:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "chunk": "diff --git a/samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java b/samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java\nindex 6008f2bf..18cb8954 100644\n--- a/samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java\n+++ b/samza-api/src/main/java/org/apache/samza/metrics/SamzaHistogram.java\n\n@@ -60,11 +61,6 @@ public class SamzaHistogram {\n     gauges.get(percentile).set(values.getValue(percentile / 100));\n   }\n \n-  //for debug\n-  public Map<Double, Gauge<Double>> getGauges() {\n-    return gauges;\n-  }\n-\n   /**\n    * Custom gauge whose value is set based on the underlying Histogram\n    */\n"}}, {"oid": "f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "url": "https://github.com/apache/samza/commit/f782bc8bb0a52c91434a3ffeecaaeecffca4527d", "message": "modify", "committedDate": "2020-03-05T01:47:42Z", "type": "commit"}, {"oid": "a8ccc05b4cf4d31ffb3f9f0cab9e4c41769c5798", "url": "https://github.com/apache/samza/commit/a8ccc05b4cf4d31ffb3f9f0cab9e4c41769c5798", "message": "modify", "committedDate": "2020-03-05T01:56:18Z", "type": "commit"}, {"oid": "aad2ccf1a63eb38e596f4fced605eab031db660c", "url": "https://github.com/apache/samza/commit/aad2ccf1a63eb38e596f4fced605eab031db660c", "message": "modify", "committedDate": "2020-03-05T01:57:55Z", "type": "commit"}, {"oid": "36ced5e12e0f7c971ae14216964dfad71e6456b8", "url": "https://github.com/apache/samza/commit/36ced5e12e0f7c971ae14216964dfad71e6456b8", "message": "reset", "committedDate": "2020-03-05T02:07:53Z", "type": "commit"}, {"oid": "eff3df497f8b8b1f127f1498176ff28005c9d0e5", "url": "https://github.com/apache/samza/commit/eff3df497f8b8b1f127f1498176ff28005c9d0e5", "message": "modify", "committedDate": "2020-03-05T22:29:04Z", "type": "commit"}, {"oid": "f112848adf81ae5247a1a0d30d893686075251df", "url": "https://github.com/apache/samza/commit/f112848adf81ae5247a1a0d30d893686075251df", "message": "Add license", "committedDate": "2020-03-05T22:46:17Z", "type": "commit"}, {"oid": "9870dd24678df5a4f9360062c7f52046525736c1", "url": "https://github.com/apache/samza/commit/9870dd24678df5a4f9360062c7f52046525736c1", "message": "check style", "committedDate": "2020-03-06T00:48:27Z", "type": "commit"}, {"oid": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "url": "https://github.com/apache/samza/commit/ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "message": "Merge branch 'master' into new_kv_metric", "committedDate": "2020-03-06T01:17:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNDM0Nw==", "url": "https://github.com/apache/samza/pull/1301#discussion_r388724347", "bodyText": "Please revert this change.", "author": "mynameborat", "createdAt": "2020-03-06T05:52:32Z", "path": "samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java", "diffHunk": "@@ -1,24 +1,27 @@\n /*\n-* Licensed to the Apache Software Foundation (ASF) under one\n-* or more contributor license agreements.  See the NOTICE file\n-* distributed with this work for additional information\n-* regarding copyright ownership.  The ASF licenses this file\n-* to you under the Apache License, Version 2.0 (the\n-* \"License\"); you may not use this file except in compliance\n-* with the License.  You may obtain a copy of the License at\n-*\n-*   http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at", "originalCommit": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd79504481812ea0d1969f3ae6576b96d7c611b7", "chunk": "diff --git a/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java b/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\nindex 2059a2d9..24e42d77 100644\n--- a/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\n+++ b/samza-core/src/main/java/org/apache/samza/metrics/MetricGroup.java\n\n@@ -1,21 +1,21 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*/\n \n package org.apache.samza.metrics;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczNzMxOA==", "url": "https://github.com/apache/samza/pull/1301#discussion_r388737318", "bodyText": "Can you explain what we achieve here by shuffling keys and values? They are already random during generation and it is not clear what is this additional shuffle for.\nSimple and crisp tests are more maintainable.", "author": "mynameborat", "createdAt": "2020-03-06T06:49:03Z", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+", "originalCommit": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMzQ0Mg==", "url": "https://github.com/apache/samza/pull/1301#discussion_r389123442", "bodyText": "At the beginning I didn't use a random way to generate keys and values so I had to shuffle them. I forgot to delete the shuffle code later on. I modified the test case and deleted them now.", "author": "xiefan46", "createdAt": "2020-03-06T20:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczNzMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "chunk": "diff --git a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\nindex d5892966..2a9433b7 100644\n--- a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n+++ b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n\n@@ -21,8 +21,10 @@ package org.apache.samza.storage.kv;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Random;\n+import java.util.Set;\n import org.apache.samza.SamzaException;\n import org.apache.samza.metrics.Counter;\n import org.apache.samza.metrics.Gauge;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODczNA==", "url": "https://github.com/apache/samza/pull/1301#discussion_r388738734", "bodyText": "I'd prefer to use explicit name checks here since the goal of the test is to check for key and value size histogram. We don't want this test to fail or pass for incorrect reasons when we add a new histogram for store whose name happens to contain size-bytes-histogram", "author": "mynameborat", "createdAt": "2020-03-06T06:54:24Z", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    Collections.shuffle(keys);\n+    Collections.shuffle(values);\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (name.contains(\"size-bytes-histogram\")) {", "originalCommit": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMjQyOQ==", "url": "https://github.com/apache/samza/pull/1301#discussion_r389122429", "bodyText": "Modified", "author": "xiefan46", "createdAt": "2020-03-06T20:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczODczNA=="}], "type": "inlineReview", "revised_code": {"commit": "b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "chunk": "diff --git a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\nindex d5892966..2a9433b7 100644\n--- a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n+++ b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n\n@@ -21,8 +21,10 @@ package org.apache.samza.storage.kv;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Random;\n+import java.util.Set;\n import org.apache.samza.SamzaException;\n import org.apache.samza.metrics.Counter;\n import org.apache.samza.metrics.Gauge;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTI0NQ==", "url": "https://github.com/apache/samza/pull/1301#discussion_r388739245", "bodyText": "With our builds already taking too long, do we know how long this test runs? Can we do away with something lower instead of 1000? same for the max length inside random string generation.", "author": "mynameborat", "createdAt": "2020-03-06T06:56:15Z", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.apache.samza.storage.kv.inmemory.InMemoryKeyValueStore;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"testStore\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+    KeyValueStore<byte[], byte[]> kvStore = new InMemoryKeyValueStore(keyValueStoreMetrics);\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 1000; i++) {", "originalCommit": "ea54f9849814e9e0fca746fb9fd9875ccd66a0ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMjM2OA==", "url": "https://github.com/apache/samza/pull/1301#discussion_r389122368", "bodyText": "Use 300 instead of 1000 in this for loop and also reduce the max length of random string to 100. This test takes less than 1s now.", "author": "xiefan46", "createdAt": "2020-03-06T20:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczOTI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "chunk": "diff --git a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\nindex d5892966..2a9433b7 100644\n--- a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n+++ b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n\n@@ -21,8 +21,10 @@ package org.apache.samza.storage.kv;\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Random;\n+import java.util.Set;\n import org.apache.samza.SamzaException;\n import org.apache.samza.metrics.Counter;\n import org.apache.samza.metrics.Gauge;\n"}}, {"oid": "b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "url": "https://github.com/apache/samza/commit/b7dbe5e27ac8d3e2ecd3a196e61fad34d09d70d1", "message": "modify", "committedDate": "2020-03-06T19:37:28Z", "type": "commit"}, {"oid": "fd79504481812ea0d1969f3ae6576b96d7c611b7", "url": "https://github.com/apache/samza/commit/fd79504481812ea0d1969f3ae6576b96d7c611b7", "message": "license shift left", "committedDate": "2020-03-06T19:45:52Z", "type": "commit"}, {"oid": "16899e359026208e49f1dab6e48ac6d488eb633c", "url": "https://github.com/apache/samza/commit/16899e359026208e49f1dab6e48ac6d488eb633c", "message": "check style", "committedDate": "2020-03-08T00:05:30Z", "type": "commit"}, {"oid": "6d5f3a144dd5586725a725c0a814d1985d875fff", "url": "https://github.com/apache/samza/commit/6d5f3a144dd5586725a725c0a814d1985d875fff", "message": "modify", "committedDate": "2020-03-08T22:06:50Z", "type": "commit"}, {"oid": "bf8b7d27d8ceae22a7b0ea8505819b464dc769c0", "url": "https://github.com/apache/samza/commit/bf8b7d27d8ceae22a7b0ea8505819b464dc769c0", "message": "Use RocksDbKeyValueStore instead of InMemoryKeyValueStore", "committedDate": "2020-03-09T05:50:36Z", "type": "commit"}, {"oid": "1596e40860fddf6e49468015e56904b80257451b", "url": "https://github.com/apache/samza/commit/1596e40860fddf6e49468015e56904b80257451b", "message": "style check", "committedDate": "2020-03-09T16:53:23Z", "type": "commit"}, {"oid": "fa50c72dbda5424966b2b4ddfe4a6d012ade649a", "url": "https://github.com/apache/samza/commit/fa50c72dbda5424966b2b4ddfe4a6d012ade649a", "message": "update docs", "committedDate": "2020-03-12T23:43:54Z", "type": "commit"}, {"oid": "5c02b920bc20a6c9a3d639c99e9608fc79f066f9", "url": "https://github.com/apache/samza/commit/5c02b920bc20a6c9a3d639c99e9608fc79f066f9", "message": "modify", "committedDate": "2020-03-12T23:44:40Z", "type": "commit"}, {"oid": "d047b89a1e25b018ed77b25509664c2aa1dc47f4", "url": "https://github.com/apache/samza/commit/d047b89a1e25b018ed77b25509664c2aa1dc47f4", "message": "track the maximum key sizes", "committedDate": "2020-03-13T00:17:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMTU2Mw==", "url": "https://github.com/apache/samza/pull/1301#discussion_r393801563", "bodyText": "nit: remove", "author": "mynameborat", "createdAt": "2020-03-17T16:17:51Z", "path": "samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.storage.kv;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.config.MapConfig;\n+import org.apache.samza.metrics.Counter;\n+import org.apache.samza.metrics.Gauge;\n+import org.apache.samza.metrics.MetricsRegistryMap;\n+import org.apache.samza.metrics.MetricsVisitor;\n+import org.apache.samza.metrics.Timer;\n+import org.apache.samza.serializers.Serde;\n+import org.apache.samza.serializers.StringSerde;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.rocksdb.FlushOptions;\n+import org.rocksdb.Options;\n+import org.rocksdb.WriteOptions;\n+\n+\n+/**\n+ * This class is used to test whether the key value size metrics in {@link SerializedKeyValueStoreMetrics} works correctly.\n+ */\n+public class TestKeyValueSizeHistogramMetric {\n+\n+  private static String storeName = \"teststore\";\n+  private static String keyPrefix = \"key-size-bytes-histogram\";\n+  private static String valuePrefix = \"value-size-bytes-histogram\";\n+  private static MetricsRegistryMap metricsRegistry = new MetricsRegistryMap();\n+  private static KeyValueStoreMetrics keyValueStoreMetrics = new KeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static SerializedKeyValueStoreMetrics serializedKeyValueStoreMetrics =\n+      new SerializedKeyValueStoreMetrics(storeName, metricsRegistry);\n+  private static Serde<String> stringSerde = new StringSerde();\n+  private static Random random = new Random();\n+\n+  private KeyValueStore<String, String> store = null;\n+\n+  @Before\n+  public void setup() {\n+\n+    Config config = new MapConfig();\n+    Options options = new Options();\n+    options.setCreateIfMissing(true);\n+\n+    File dbDir = new File(System.getProperty(\"java.io.tmpdir\") + \"/dbStore\" + System.currentTimeMillis());\n+    RocksDbKeyValueStore kvStore = new RocksDbKeyValueStore(dbDir, options, config, false, \"dbStore\",\n+        new WriteOptions(), new FlushOptions(), new KeyValueStoreMetrics(\"dbStore\", new MetricsRegistryMap()));\n+    KeyValueStore<String, String> serializedStore =\n+        new SerializedKeyValueStore<>(kvStore, stringSerde, stringSerde, serializedKeyValueStoreMetrics);\n+    store = new NullSafeKeyValueStore<>(serializedStore);\n+  }\n+\n+  /**\n+   * Make sure that the histograms can record the key value size and we can use a\n+   * {@link MetricsVisitor} to get access to the value store in the histograms\n+   */\n+  @Test\n+  public void testHistogramMetric() {\n+\n+    List<String> keys = new ArrayList<>();\n+    List<String> values = new ArrayList<>();\n+\n+    for (int i = 0; i < 300; i++) {\n+      keys.add(getRandomString());\n+      values.add(getRandomString());\n+    }\n+\n+    for (int i = 0; i < keys.size(); i++) {\n+      store.put(keys.get(i), values.get(i));\n+    }\n+\n+    Set<String> names = new HashSet<>();\n+    for (Double p : serializedKeyValueStoreMetrics.record_key_size_percentiles()) {\n+      names.add(storeName + \"-\" + keyPrefix + \"_\" + p);\n+    }\n+\n+    for (Double p : serializedKeyValueStoreMetrics.record_value_size_percentiles()) {\n+      names.add(storeName + \"-\" + valuePrefix + \"_\" + p);\n+    }\n+\n+    metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n+        if (names.contains(name)) {\n+          //System.out.println(name);", "originalCommit": "d047b89a1e25b018ed77b25509664c2aa1dc47f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3364c916e7b583869d00578ff950ee4f8996dbe4", "chunk": "diff --git a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\nindex 8abd155c..f7545dc5 100644\n--- a/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n+++ b/samza-test/src/test/java/org/apache/samza/storage/kv/TestKeyValueSizeHistogramMetric.java\n\n@@ -106,7 +106,6 @@ public class TestKeyValueSizeHistogramMetric {\n \n     metricsRegistry.getGroups().forEach(group -> metricsRegistry.getGroup(group.toString()).forEach((name, metric) -> {\n         if (names.contains(name)) {\n-          //System.out.println(name);\n           metric.visit(new MetricsVisitor() {\n             @Override\n             public void counter(Counter counter) {\n"}}, {"oid": "3364c916e7b583869d00578ff950ee4f8996dbe4", "url": "https://github.com/apache/samza/commit/3364c916e7b583869d00578ff950ee4f8996dbe4", "message": "remove lines", "committedDate": "2020-03-17T17:05:11Z", "type": "commit"}, {"oid": "b97c1309f288b3c1a7aa178a5d4b1819e9cf7d92", "url": "https://github.com/apache/samza/commit/b97c1309f288b3c1a7aa178a5d4b1819e9cf7d92", "message": "Add java doc in MetricGroup", "committedDate": "2020-03-17T22:25:18Z", "type": "commit"}, {"oid": "f113a035ee15c20fa2ac709ff5f18db8792359e2", "url": "https://github.com/apache/samza/commit/f113a035ee15c20fa2ac709ff5f18db8792359e2", "message": "modify java doc", "committedDate": "2020-03-17T23:47:30Z", "type": "commit"}]}