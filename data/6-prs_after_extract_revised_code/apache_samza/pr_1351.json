{"pr_number": 1351, "pr_title": "SAMZA-2515: Kafka consumer synchronized", "pr_createdAt": "2020-04-24T05:37:59Z", "pr_url": "https://github.com/apache/samza/pull/1351", "timeline": [{"oid": "573cf8420a0e49d9d1fbd6a385b95a5684ec944a", "url": "https://github.com/apache/samza/commit/573cf8420a0e49d9d1fbd6a385b95a5684ec944a", "message": "SAMZA-2515 - Thread safety for KafkaConsumer in KafkaConsumerProxy", "committedDate": "2020-04-24T04:24:07Z", "type": "commit"}, {"oid": "ec9fca2578a0640cea7b1317507b41baa79244bb", "url": "https://github.com/apache/samza/commit/ec9fca2578a0640cea7b1317507b41baa79244bb", "message": "fix exception message", "committedDate": "2020-04-24T04:26:20Z", "type": "commit"}, {"oid": "d9685b94643cdc2f162f52348037df967c8d03d0", "url": "https://github.com/apache/samza/commit/d9685b94643cdc2f162f52348037df967c8d03d0", "message": "add unit test", "committedDate": "2020-04-24T05:24:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTc1OA==", "url": "https://github.com/apache/samza/pull/1351#discussion_r415279758", "bodyText": "I think its good idea to fail with meaningful errors instead of a potential NPE. Although, is this new contract necessary as part of this change?\n\nIs it possible for kafkaConsmer.endOffsets(...) to return null in the first place?\nIf yes to above, have we seen any issues around NPE before or is this purely from the standpoint of defensive programming?", "author": "mynameborat", "createdAt": "2020-04-26T10:48:48Z", "path": "samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java", "diffHunk": "@@ -170,9 +171,18 @@ Throwable getFailureCause() {\n     return failureCause;\n   }\n \n-  private void initializeLags() {\n+  @VisibleForTesting\n+  void initializeLags() {\n     // This is expensive, so only do it once at the beginning. After the first poll, we can rely on metrics for lag.\n-    Map<TopicPartition, Long> endOffsets = kafkaConsumer.endOffsets(topicPartitionToSSP.keySet());\n+\n+    Map<TopicPartition, Long> endOffsets;\n+    // Synchronize, in case the consumer is used in some other thread (metadata or something else)\n+    synchronized (kafkaConsumer) {\n+      endOffsets = kafkaConsumer.endOffsets(topicPartitionToSSP.keySet());\n+    }\n+    if (endOffsets == null) {\n+      throw new SamzaException(\"Failed to fetch kafka consumer endoffsets for system \" + systemName);", "originalCommit": "d9685b94643cdc2f162f52348037df967c8d03d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NDY1NA==", "url": "https://github.com/apache/samza/pull/1351#discussion_r415854654", "bodyText": "actually, KafkaConsumer.endOffset does not make a promise that it will be non-null. If i keep digging into implementation details, it looks like it returns an empty hashmap.. but thats an impl detail not an api promise. hence added this.\ni agree, for this change (to deal with the sync issue), dealing with this NPE is not needed. but thought it will be a nice to do.", "author": "lakshmi-manasa-g", "createdAt": "2020-04-27T14:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTUyMw==", "url": "https://github.com/apache/samza/pull/1351#discussion_r416119523", "bodyText": "sounds good \ud83d\udc4d", "author": "mynameborat", "createdAt": "2020-04-27T20:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "571c112f5a80dc36e7315d04bc6974ccbe19cf82", "chunk": "diff --git a/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java b/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\nindex 92f609fc..e21818ac 100644\n--- a/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\n+++ b/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\n\n@@ -171,8 +171,7 @@ public class KafkaConsumerProxy<K, V> {\n     return failureCause;\n   }\n \n-  @VisibleForTesting\n-  void initializeLags() {\n+  private void initializeLags() {\n     // This is expensive, so only do it once at the beginning. After the first poll, we can rely on metrics for lag.\n \n     Map<TopicPartition, Long> endOffsets;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5MTg5Nw==", "url": "https://github.com/apache/samza/pull/1351#discussion_r415291897", "bodyText": "I see we don't have tests at all for consumer proxy and thanks for adding one :) However, I have few observations/questions\n\nThe test still does have some indeterminism and doesn't necessarily tests synchronized access as it claims all the time as it is possible that t1 & t2 run exclusively.\nIs the intent here to test java synchronized or prevent accidental changes to initializeLags making it no longer synchronize on the consumer?\n\n\nIf it is the former, it is going to be hard to test consistently and deterministically unless you do complex gimmicks with latches & Thread.holdsLock(...). IMO, it should be okay to assume Java synchronized works as expected\nIf it the latter, it is still undoubtedly hard but we can enforce them through other means with useful explicit comments around the code blocks & diligent reviews.\n\nTLDR; I am fine with not having a test for this scenario instead of having one that is indeterministic in what it tests. If you prefer to have a test, then it will be nice to have it do what it claims to do.", "author": "mynameborat", "createdAt": "2020-04-26T11:52:02Z", "path": "samza-kafka/src/test/java/org/apache/samza/system/kafka/TestKafkaConsumerProxy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system.kafka;\n+\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.anyCollection;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+\n+\n+public class TestKafkaConsumerProxy {\n+\n+  @Test\n+  public void testSynchronizedAccessOfKafkaConsumer() throws Exception {", "originalCommit": "d9685b94643cdc2f162f52348037df967c8d03d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1Nzk1MQ==", "url": "https://github.com/apache/samza/pull/1351#discussion_r415857951", "bodyText": "haha, i debated for a good deal of time about this test and even having a test for this scenario :D\nI agree that this test can not really \"test/simulate\" the real issue we are solving. I wonder if there can be a test which can really test this scenario. I will remove this test.", "author": "lakshmi-manasa-g", "createdAt": "2020-04-27T14:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5MTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8ae3155fbaaca3401fc98076f57018bbb6983fd7", "chunk": "diff --git a/samza-kafka/src/test/java/org/apache/samza/system/kafka/TestKafkaConsumerProxy.java b/samza-kafka/src/test/java/org/apache/samza/system/kafka/TestKafkaConsumerProxy.java\ndeleted file mode 100644\nindex 1806c8fb..00000000\n--- a/samza-kafka/src/test/java/org/apache/samza/system/kafka/TestKafkaConsumerProxy.java\n+++ /dev/null\n\n@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.samza.system.kafka;\n-\n-import org.apache.kafka.clients.consumer.KafkaConsumer;\n-import org.junit.Test;\n-\n-import static org.mockito.Mockito.anyCollection;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-\n-\n-\n-public class TestKafkaConsumerProxy {\n-\n-  @Test\n-  public void testSynchronizedAccessOfKafkaConsumer() throws Exception {\n-    KafkaConsumer mockKafkaConsumer = mock(KafkaConsumer.class);\n-    Thread t1 = getThreadToCreateStartStopProxy(mockKafkaConsumer);\n-    Thread t2 = getThreadToCreateStartStopProxy(mockKafkaConsumer);\n-    t1.start();\n-    t2.start();\n-    t1.join(600);\n-    t2.join(600);\n-    verify(mockKafkaConsumer, times(2)).endOffsets(anyCollection());\n-  }\n-\n-  private Thread getThreadToCreateStartStopProxy(KafkaConsumer mockKafkaConsumer) {\n-    Thread t = new Thread() {\n-      @Override\n-      public void run() {\n-        KafkaConsumerProxy kafkaConsumerProxy1 = spy(new KafkaConsumerProxy(mock(KafkaSystemConsumer.class), mockKafkaConsumer,\n-            \"systemName\", \"clientId\", mock(KafkaSystemConsumer.KafkaConsumerMessageSink.class),\n-            mock(KafkaSystemConsumerMetrics.class), \"metricName\"));\n-        kafkaConsumerProxy1.start();\n-        kafkaConsumerProxy1.stop(60);\n-        verify(kafkaConsumerProxy1).initializeLags();\n-      }\n-    };\n-    return t;\n-  }\n-}\n"}}, {"oid": "8ae3155fbaaca3401fc98076f57018bbb6983fd7", "url": "https://github.com/apache/samza/commit/8ae3155fbaaca3401fc98076f57018bbb6983fd7", "message": "remove unit test", "committedDate": "2020-04-27T14:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTc5MA==", "url": "https://github.com/apache/samza/pull/1351#discussion_r416119790", "bodyText": "revert this to private?", "author": "mynameborat", "createdAt": "2020-04-27T20:19:14Z", "path": "samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java", "diffHunk": "@@ -170,9 +171,18 @@ Throwable getFailureCause() {\n     return failureCause;\n   }\n \n-  private void initializeLags() {\n+  @VisibleForTesting\n+  void initializeLags() {", "originalCommit": "8ae3155fbaaca3401fc98076f57018bbb6983fd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571c112f5a80dc36e7315d04bc6974ccbe19cf82", "chunk": "diff --git a/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java b/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\nindex 92f609fc..e21818ac 100644\n--- a/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\n+++ b/samza-kafka/src/main/java/org/apache/samza/system/kafka/KafkaConsumerProxy.java\n\n@@ -171,8 +171,7 @@ public class KafkaConsumerProxy<K, V> {\n     return failureCause;\n   }\n \n-  @VisibleForTesting\n-  void initializeLags() {\n+  private void initializeLags() {\n     // This is expensive, so only do it once at the beginning. After the first poll, we can rely on metrics for lag.\n \n     Map<TopicPartition, Long> endOffsets;\n"}}, {"oid": "571c112f5a80dc36e7315d04bc6974ccbe19cf82", "url": "https://github.com/apache/samza/commit/571c112f5a80dc36e7315d04bc6974ccbe19cf82", "message": "remove visibileForTesting", "committedDate": "2020-04-27T20:55:38Z", "type": "commit"}, {"oid": "11365b9c51e63d1daeda650abb80b0811d3929cf", "url": "https://github.com/apache/samza/commit/11365b9c51e63d1daeda650abb80b0811d3929cf", "message": "remove visibileForTesting from imports", "committedDate": "2020-04-27T20:57:38Z", "type": "commit"}]}