{"pr_number": 17282, "pr_title": "Support for multiple pmem directories in config", "pr_createdAt": "2020-07-30T20:36:27Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17282", "timeline": [{"oid": "64392ddf11773a7e90c331927dd7b8723b009a22", "url": "https://github.com/hazelcast/hazelcast/commit/64392ddf11773a7e90c331927dd7b8723b009a22", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely.", "committedDate": "2020-08-10T14:31:43Z", "type": "forcePushed"}, {"oid": "e2897f37a211a5c68b6e9045aaea13e1675c3d18", "url": "https://github.com/hazelcast/hazelcast/commit/e2897f37a211a5c68b6e9045aaea13e1675c3d18", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely.", "committedDate": "2020-08-10T15:08:59Z", "type": "forcePushed"}, {"oid": "fb3655712b3b9ecc69df96fea6932388927388af", "url": "https://github.com/hazelcast/hazelcast/commit/fb3655712b3b9ecc69df96fea6932388927388af", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely.", "committedDate": "2020-08-10T15:15:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzMTE3NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471431174", "bodyText": "Can you sprinkle some nullable and non-null annotations on the method parameters and return values?", "author": "mmedenjak", "createdAt": "2020-08-17T12:01:25Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for persistent memory devices (e.g. Intel Optane).\n+ */\n+public class PersistentMemoryConfig {\n+    /**\n+     * Paths to the non-volatile memory directory.\n+     */\n+    private List<PersistentMemoryDirectoryConfig> directoryConfigs = new LinkedList<>();\n+\n+    public PersistentMemoryConfig() {\n+    }\n+\n+    /**\n+     * Constructs an instance with copying the fields of the provided\n+     * {@link PersistentMemoryConfig}.\n+     *\n+     * @param persistentMemoryConfig The configuration to copy\n+     */\n+    public PersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n+        persistentMemoryConfig.directoryConfigs\n+                .forEach(directoryConfig -> addDirectoryConfig(new PersistentMemoryDirectoryConfig(directoryConfig)));\n+    }\n+\n+    /**\n+     * Returns the persistent memory directory configurations to be used\n+     * to store memory structures allocated by native memory manager.\n+     * <p>\n+     * By default there are no configuration is set indicating that\n+     * volatile RAM is being used.\n+     */\n+    public List<PersistentMemoryDirectoryConfig> getDirectoryConfigs() {\n+        return directoryConfigs;\n+    }\n+\n+    /**\n+     * Sets the persistent memory directory configuration to the set of\n+     * directories provided in the {@code directoryConfigs} argument.\n+     * <p/>\n+     * If the specified directories are not unique either in the directories\n+     * themselves or in the NUMA nodes specified for them,\n+     * {@link InvalidConfigurationException} is thrown. Setting the NUMA\n+     * node on the subset of the configured directories while leaving\n+     * not set on others also results in {@link InvalidConfigurationException}.\n+     *\n+     * @param directoryConfigs The persistent memory directories to set\n+     * @return this {@link PersistentMemoryConfig} instance\n+     * @throws InvalidConfigurationException If the configured directories\n+     *                                       violate consistency or\n+     *                                       uniqueness checks.\n+     */\n+    public PersistentMemoryConfig setDirectoryConfigs(List<PersistentMemoryDirectoryConfig> directoryConfigs) {", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzU5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257592", "bodyText": "Done.", "author": "blazember", "createdAt": "2020-08-18T14:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzMTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java\nindex d06a478be73..806450eeb68 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryConfig.java\n\n@@ -16,11 +16,14 @@\n \n package com.hazelcast.config;\n \n+import javax.annotation.Nonnull;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Objects;\n \n+import static java.util.Objects.requireNonNull;\n+\n /**\n  * Configuration class for persistent memory devices (e.g. Intel Optane).\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNDkwNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471434907", "bodyText": "Additionally, here and in the constructor you can write that setting it to -1 disables it.", "author": "mmedenjak", "createdAt": "2020-08-17T12:09:28Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    /**\n+     * Creates an instance with the {@code directory} and NUMA node specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @param numaNode  The NUMA node that the persistent memory mounted\n+     *                  to the given directory is attached to\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory, int numaNode) {\n+        this.directory = directory;\n+        this.numaNode = numaNode;\n+    }\n+\n+    /**\n+     * Constructs an instance by copying the provided {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directoryConfig The configuration to copy\n+     */\n+    public PersistentMemoryDirectoryConfig(PersistentMemoryDirectoryConfig directoryConfig) {\n+        this.directory = directoryConfig.directory;\n+        this.numaNode = directoryConfig.numaNode;\n+    }\n+\n+    /**\n+     * Returns the directory of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @return the directory\n+     */\n+    public String getDirectory() {\n+        return directory;\n+    }\n+\n+    /**\n+     * Returns the {@code directory} of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directory the directory to set\n+     */\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    /**\n+     * Returns the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @return the NUMA node of the persistent memory\n+     */\n+    public int getNumaNode() {\n+        return numaNode;\n+    }\n+\n+    /**\n+     * Sets the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @param numaNode the NUMA node to set", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzYyNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257627", "bodyText": "\ud83d\udc4d Done.", "author": "blazember", "createdAt": "2020-08-18T14:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNDkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\nindex f3ec84eac8e..f9baf2a797a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\n\n@@ -16,8 +16,11 @@\n \n package com.hazelcast.config;\n \n+import javax.annotation.Nonnull;\n import java.util.Objects;\n \n+import static java.util.Objects.requireNonNull;\n+\n /**\n  * Configuration class for directories that persistent memories are mounted at.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjExNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471436117", "bodyText": "Minor: nullability annotations", "author": "mmedenjak", "createdAt": "2020-08-17T12:11:59Z", "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -222,24 +224,62 @@ public NativeMemoryConfig setMetadataSpacePercentage(float metadataSpacePercenta\n     }\n \n     /**\n-     * Returns the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native\n-     * memory manager.\n-     * <p>\n-     * Default value is {@code null}. It indicates that volatile RAM is being used.\n-     * {@code null}\n+     * Returns the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @return the persistent memory configuration\n      */\n+    public PersistentMemoryConfig getPersistentMemoryConfig() {\n+        return persistentMemoryConfig;\n+    }\n+\n+    /**\n+     * Sets the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @param persistentMemoryConfig The persistent memory configuration to use\n+     */\n+    public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzY3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257677", "bodyText": "Added.", "author": "blazember", "createdAt": "2020-08-18T14:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjExNw=="}], "type": "inlineReview", "revised_code": {"commit": "fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\nindex c6ff8f184b2..1d34e3fec9d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n\n@@ -240,7 +239,7 @@ public class NativeMemoryConfig {\n      * @param persistentMemoryConfig The persistent memory configuration to use\n      */\n     public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n-        this.persistentMemoryConfig = requireNonNull(persistentMemoryConfig);\n+        this.persistentMemoryConfig = persistentMemoryConfig;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjg1OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471436858", "bodyText": "Should we should also add @Deprecated here?", "author": "mmedenjak", "createdAt": "2020-08-17T12:13:38Z", "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -222,24 +224,62 @@ public NativeMemoryConfig setMetadataSpacePercentage(float metadataSpacePercenta\n     }\n \n     /**\n-     * Returns the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native\n-     * memory manager.\n-     * <p>\n-     * Default value is {@code null}. It indicates that volatile RAM is being used.\n-     * {@code null}\n+     * Returns the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @return the persistent memory configuration\n      */\n+    public PersistentMemoryConfig getPersistentMemoryConfig() {\n+        return persistentMemoryConfig;\n+    }\n+\n+    /**\n+     * Sets the persistent memory configuration this native memory\n+     * configuration uses.\n+     *\n+     * @param persistentMemoryConfig The persistent memory configuration to use\n+     */\n+    public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n+        this.persistentMemoryConfig = requireNonNull(persistentMemoryConfig);\n+    }\n+\n+    /**\n+     * Returns the persistent memory directory (e.g. Intel Optane) to be\n+     * used to store memory structures allocated by native memory manager.\n+     * If there are multiple persistent memory directories are defined in\n+     * {@link #persistentMemoryConfig}, an {@link IllegalStateException}\n+     * is thrown.\n+     *\n+     * @see PersistentMemoryConfig#getDirectoryConfigs()\n+     * @deprecated Since 4.1 multiple persistent memory directories are\n+     * supported. Please use {@link PersistentMemoryConfig#getDirectoryConfigs()}\n+     * instead.\n+     */\n+    @Deprecated\n     public String getPersistentMemoryDirectory() {\n-        return persistentMemoryDirectory;\n+        List<PersistentMemoryDirectoryConfig> directoryConfigs = persistentMemoryConfig.getDirectoryConfigs();\n+        int directoriesDefined = directoryConfigs.size();\n+        if (directoriesDefined > 1) {\n+            throw new HazelcastException(\"There are multiple persistent memory directories configured. Please use \"\n+                    + \"PersistentMemoryConfig.getDirectoryConfigs()!\");\n+        }\n+\n+        return directoriesDefined == 1 ? directoryConfigs.get(0).getDirectory() : null;\n     }\n \n     /**\n-     * Sets the persistent memory directory (e.g. Intel Optane) to be used to store memory structures allocated by native memory\n-     * manager.\n+     * Sets the persistent memory directory (e.g. Intel Optane) to be used\n+     * to store memory structures allocated by native memory manager. If\n+     * the {@link #persistentMemoryConfig} already contains directory\n+     * definition, it is overridden with the provided {@code directory}.\n+     *\n      * @param directory the persistent memory directory\n      * @return this {@link NativeMemoryConfig} instance\n+     * @see #getPersistentMemoryConfig()\n+     * @see PersistentMemoryConfig#addDirectoryConfig(PersistentMemoryDirectoryConfig)\n      */\n     public NativeMemoryConfig setPersistentMemoryDirectory(String directory) {", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzcwMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257703", "bodyText": "Agree, done.", "author": "blazember", "createdAt": "2020-08-18T14:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\nindex c6ff8f184b2..1d34e3fec9d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n\n@@ -240,7 +239,7 @@ public class NativeMemoryConfig {\n      * @param persistentMemoryConfig The persistent memory configuration to use\n      */\n     public void setPersistentMemoryConfig(PersistentMemoryConfig persistentMemoryConfig) {\n-        this.persistentMemoryConfig = requireNonNull(persistentMemoryConfig);\n+        this.persistentMemoryConfig = persistentMemoryConfig;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODU4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471438587", "bodyText": "I just realized we're missing a read-only version of NativeMemoryConfig but other top-level configs have this issue as well.", "author": "mmedenjak", "createdAt": "2020-08-17T12:17:10Z", "path": "hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java", "diffHunk": "@@ -16,13 +16,18 @@\n \n package com.hazelcast.config;\n \n+import com.hazelcast.core.HazelcastException;", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1Nzc0MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257741", "bodyText": "Yeah, as this is a general concern, I created #17372 as discussed in private.", "author": "blazember", "createdAt": "2020-08-18T14:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\nindex c6ff8f184b2..1d34e3fec9d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/NativeMemoryConfig.java\n\n@@ -27,7 +27,6 @@ import java.util.Objects;\n \n import static com.hazelcast.internal.util.Preconditions.checkPositive;\n import static com.hazelcast.internal.util.Preconditions.isNotNull;\n-import static java.util.Objects.requireNonNull;\n \n /**\n  * Configures native memory region.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MjE0OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471452148", "bodyText": "Can the directory be empty?", "author": "mmedenjak", "createdAt": "2020-08-17T12:43:48Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     */\n+    public PersistentMemoryDirectoryConfig(String directory) {\n+        this.directory = directory;", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzgzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257835", "bodyText": "Nope, if there is no intention to use persistent memory, PersistentMemoryConfig should have an empty directory config list. Updated accordingly.", "author": "blazember", "createdAt": "2020-08-18T14:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MjE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\nindex f3ec84eac8e..f9baf2a797a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java\n\n@@ -16,8 +16,11 @@\n \n package com.hazelcast.config;\n \n+import javax.annotation.Nonnull;\n import java.util.Objects;\n \n+import static java.util.Objects.requireNonNull;\n+\n /**\n  * Configuration class for directories that persistent memories are mounted at.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTUyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r471455524", "bodyText": "Are we missing the numa node id parsing here?", "author": "mmedenjak", "createdAt": "2020-08-17T12:50:02Z", "path": "hazelcast-spring/src/main/java/com/hazelcast/spring/AbstractHazelcastBeanDefinitionParser.java", "diffHunk": "@@ -514,6 +521,68 @@ protected BeanDefinition getPreloaderConfig(Node node) {\n             return nearCachePreloaderConfigBuilder.getBeanDefinition();\n         }\n \n+        protected void handleNativeMemory(Node node) {\n+            BeanDefinitionBuilder nativeMemoryConfigBuilder = createBeanBuilder(NativeMemoryConfig.class);\n+            AbstractBeanDefinition beanDefinition = nativeMemoryConfigBuilder.getBeanDefinition();\n+            fillAttributeValues(node, nativeMemoryConfigBuilder, \"persistentMemoryDirectory\");\n+            ManagedList<BeanDefinition> directories = new ManagedList<>();\n+            BeanDefinitionBuilder pmemConfigBuilder = createBeanBuilder(PersistentMemoryConfig.class);\n+            for (Node child : childElements(node)) {\n+                String nodeName = cleanNodeName(child);\n+                if (\"size\".equals(nodeName)) {\n+                    handleMemorySizeConfig(child, nativeMemoryConfigBuilder);\n+                } else if (\"persistent-memory\".equals(nodeName)) {\n+                    handlePersistentMemoryConfig(child, directories);\n+                }\n+            }\n+\n+            Node attrPmemDirectory = node.getAttributes().getNamedItem(\"persistent-memory-directory\");\n+            if (attrPmemDirectory != null) {\n+                BeanDefinitionBuilder pmemDirConfigBuilder = createBeanBuilder(PersistentMemoryDirectoryConfig.class);\n+                pmemDirConfigBuilder.addConstructorArgValue(getTextContent(attrPmemDirectory));", "originalCommit": "bae4a9fefd8ff876ee8ee9d5d1fe525f81763e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1Nzg3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472257877", "bodyText": "This parses the old-style persistent-memory-directory element that had no numa-node attribute. We have it for persistent-memory/directories/directory only that is parsed in handlePersistentMemoryConfig.", "author": "blazember", "createdAt": "2020-08-18T14:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTUyNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "url": "https://github.com/hazelcast/hazelcast/commit/fc5e7cd29b883e1d86fca83f1736d8fc4832da04", "message": "Support for multiple pmem directories in config\n\nThis change introduces advanced persistent memory configuration in the\nfollowing form:\n```\n    <native-memory allocator-type=\"POOLED\" enabled=\"true\">\n        <size unit=\"MEGABYTES\" value=\"256\"/>\n\t<!-- Simple configuration for single-socket machines with non-volatile memory -->\n\t<!-- <persistent-memory-directory>/mnt/optane</persistent-memory-directory> -->\n        <!-- Advanced configuration for non-volatile memory -->\n        <persistent-memory>\n            <directories>\n                <directory numa-node=\"0\">/mnt/pmem0</directory>\n                <directory numa-node=\"1\">/mnt/pmem1</directory>\n            </directories>\n        </persistent-memory>\n    </native-memory>\n```\nYAML configuration follows the same structure.\n\nBesides the configuration support, the following config validations are\nadded:\n- Persistent memory directories must be unique\n- NUMA node defined for the persistent memory directories must be unique\n(if set)\n- NUMA node must be defined either on all or none of the directories\nTherefore, mixing `<persistent-memory-directory>` and\n`<persistent-memory>` is allowed only if no NUMA nodes are set.\n\nBesides this change, `native-memory` configuration is added to the\nSpring configuration for clients that was missing entirely.", "committedDate": "2020-08-18T14:44:07Z", "type": "commit"}, {"oid": "0996264520084c33d2643e2cab5163b17d406744", "url": "https://github.com/hazelcast/hazelcast/commit/0996264520084c33d2643e2cab5163b17d406744", "message": "Fix NativeMemoryConfigTest", "committedDate": "2020-08-18T14:44:07Z", "type": "commit"}, {"oid": "2650b92f1c9fbc2a625cb6802650bc7f725e08bf", "url": "https://github.com/hazelcast/hazelcast/commit/2650b92f1c9fbc2a625cb6802650bc7f725e08bf", "message": "Fix failing spring tests", "committedDate": "2020-08-18T14:44:07Z", "type": "commit"}, {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "url": "https://github.com/hazelcast/hazelcast/commit/6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "message": "Address review comments", "committedDate": "2020-08-18T14:44:07Z", "type": "commit"}, {"oid": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "url": "https://github.com/hazelcast/hazelcast/commit/6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "message": "Address review comments", "committedDate": "2020-08-18T14:44:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MTQ1MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472951451", "bodyText": "What if I set numaNode = Integer.MAX_VALUE? Do we validate anywhere the value?", "author": "petrpleshachkov", "createdAt": "2020-08-19T11:15:37Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PersistentMemoryDirectoryConfig.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.config;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Configuration class for directories that persistent memories are mounted at.\n+ */\n+public class PersistentMemoryDirectoryConfig {\n+    private static final int NUMA_NODE_UNSET = -1;\n+\n+    private String directory;\n+    private int numaNode = NUMA_NODE_UNSET;\n+\n+    /**\n+     * Creates an instance with the {@code directory} specified.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull String directory) {\n+        this.directory = requireNonNull(directory);\n+    }\n+\n+    /**\n+     * Creates an instance with the {@code directory} and NUMA node specified.\n+     * <p/>\n+     * Note that setting {@code numaNode} to -1 on any of the configured\n+     * {@link PersistentMemoryDirectoryConfig} instances disables\n+     * NUMA-aware persistent memory allocation.\n+     *\n+     * @param directory The directory where the persistent memory is\n+     *                  mounted at\n+     * @param numaNode  The NUMA node that the persistent memory mounted\n+     *                  to the given directory is attached to.\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull String directory, int numaNode) {\n+        this.directory = requireNonNull(directory);\n+        this.numaNode = numaNode;\n+    }\n+\n+    /**\n+     * Constructs an instance by copying the provided {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directoryConfig The configuration to copy\n+     * @throws NullPointerException if {@code directoryConfig} is {@code null}\n+     */\n+    public PersistentMemoryDirectoryConfig(@Nonnull PersistentMemoryDirectoryConfig directoryConfig) {\n+        this.directory = requireNonNull(directoryConfig).directory;\n+        this.numaNode = directoryConfig.numaNode;\n+    }\n+\n+    /**\n+     * Returns the directory of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @return the directory\n+     */\n+    @Nonnull\n+    public String getDirectory() {\n+        return directory;\n+    }\n+\n+    /**\n+     * Returns the {@code directory} of this {@link PersistentMemoryDirectoryConfig}.\n+     *\n+     * @param directory the directory to set\n+     * @throws NullPointerException if {@code directory} is {@code null}\n+     */\n+    public void setDirectory(@Nonnull String directory) {\n+        this.directory = requireNonNull(directory);\n+    }\n+\n+    /**\n+     * Returns the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     *\n+     * @return the NUMA node of the persistent memory\n+     */\n+    public int getNumaNode() {\n+        return numaNode;\n+    }\n+\n+    /**\n+     * Sets the NUMA node the persistent memory mounted to the given\n+     * directory is attached to.\n+     * <p/>\n+     * Note that setting {@code numaNode} to -1 on any of the configured\n+     * {@link PersistentMemoryDirectoryConfig} instances disables\n+     * NUMA-aware persistent memory allocation.\n+     *\n+     * @param numaNode the NUMA node to set\n+     */\n+    public void setNumaNode(int numaNode) {\n+        this.numaNode = numaNode;", "originalCommit": "6dee63834ddfd9fd42c5fb09c147ad2d9ccd8c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk3MTUyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17282#discussion_r472971521", "bodyText": "Yes, in the PMEM malloc implementation. Such a configuration disables NUMA-aware allocations if it would be enabled otherwise.", "author": "blazember", "createdAt": "2020-08-19T11:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MTQ1MQ=="}], "type": "inlineReview", "revised_code": null}]}