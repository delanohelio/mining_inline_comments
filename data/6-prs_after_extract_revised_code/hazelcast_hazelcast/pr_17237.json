{"pr_number": 17237, "pr_title": "Integrate global HD index into SQL engine", "pr_createdAt": "2020-07-17T14:16:15Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17237", "timeline": [{"oid": "a9cebaaaf8d4a988864a5e076e5718adb72b765c", "url": "https://github.com/hazelcast/hazelcast/commit/a9cebaaaf8d4a988864a5e076e5718adb72b765c", "message": "Rebase", "committedDate": "2020-07-17T14:39:51Z", "type": "forcePushed"}, {"oid": "08e153c72645f91ed3401b276d4794c329fec58e", "url": "https://github.com/hazelcast/hazelcast/commit/08e153c72645f91ed3401b276d4794c329fec58e", "message": "Integrate global HD index into SQL engine\n\n-On the query plan construction step select index for full scans\n- Plan creation unit testing", "committedDate": "2020-07-17T14:47:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODU2NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457098564", "bodyText": "Do we support HD for replicated maps? I thought no.\nEven if yes - we do not have indexes support for replicated maps, therefore they will never work with HD. No need to pass this flag to ReplicatedMapTable.", "author": "devozerov", "createdAt": "2020-07-20T06:37:46Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java", "diffHunk": "@@ -78,6 +78,8 @@ public Table createTable(\n \n         long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDYzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457114631", "bodyText": "no HD support for replicated maps", "author": "pveentjer", "createdAt": "2020-07-20T07:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java\nindex c11fbb72755..a177ae50422 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java\n\n@@ -78,8 +78,6 @@ public class LocalReplicatedMapConnector extends SqlKeyValueConnector {\n \n         long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n-        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();\n-\n         return new ReplicatedMapTable(\n                 schemaName,\n                 mapName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457100116", "bodyText": "This flag looks suspicious to me. Even though an instance may have native memory enabled, this doesn't mean that the concrete map uses NATIVE format.", "author": "devozerov", "createdAt": "2020-07-20T06:40:35Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java", "diffHunk": "@@ -85,6 +85,7 @@ public Table createTable(\n         long estimatedRowCount = estimatePartitionedMapRowCount(nodeEngine, context, mapName);\n         List<MapTableIndex> indexes = container != null ? getPartitionedMapIndexes(container, fields) : emptyList();\n         int distributionFieldOrdinal = container != null ? getPartitionedMapDistributionField(container, context, fields) : -1;\n+        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMDUzNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457130537", "bodyText": "My impression was that once it is enabled, it is used for all maps. But, OK, if we still for some maps can use on-heap format, I'll initialize it on the map level.\nHowever, here we don't know which format is used, because we might have container = null. I also see a comment \"TODO: do we want to keep it? maps are auto discovered...\".  So, the question here, do we have to pass the nativeMemoryEnabled from the caller? Is this code supposed to be in the master?", "author": "petrpleshachkov", "createdAt": "2020-07-20T07:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MTQ5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457141490", "bodyText": "If container == null, then the map cannot be used. We should not focus a lot on this specific part of the code too much, because LocalPartitinedMapConnector is research code. The following pseudocode should be sufficient:\nnativeMemoryEnabled = container != null && nodeEngine.nativeMemoryEnabled() && containter.format == NATIVE", "author": "devozerov", "createdAt": "2020-07-20T07:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMDExNg=="}], "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java\nindex c6bdb77271f..614b297de97 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java\n\n@@ -85,7 +86,8 @@ public class LocalPartitionedMapConnector extends SqlKeyValueConnector {\n         long estimatedRowCount = estimatePartitionedMapRowCount(nodeEngine, context, mapName);\n         List<MapTableIndex> indexes = container != null ? getPartitionedMapIndexes(container, fields) : emptyList();\n         int distributionFieldOrdinal = container != null ? getPartitionedMapDistributionField(container, context, fields) : -1;\n-        boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();\n+        boolean nativeMemoryEnabled = container != null && nodeEngine.getConfig().getNativeMemoryConfig().isEnabled()\n+                && container.getMapConfig().getInMemoryFormat() == NATIVE;\n \n         return new PartitionedMapTable(\n                 schemaName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTIzMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457101232", "bodyText": "I think this flag should be in the PartitionedMapTable, because replicated maps do not support indexes, and hence can never be used with HD. Old logic already handles this properly.", "author": "devozerov", "createdAt": "2020-07-20T06:42:39Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "diffHunk": "@@ -37,6 +37,7 @@\n     private final UpsertTargetDescriptor keyUpsertDescriptor;\n     private final UpsertTargetDescriptor valueUpsertDescriptor;\n     private final QueryException exception;\n+    private final boolean nativeMemoryEnabled;", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\nindex 71d3dcca3bf..21c8c962f82 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\n\n@@ -37,7 +37,6 @@ public abstract class AbstractMapTable extends Table {\n     private final UpsertTargetDescriptor keyUpsertDescriptor;\n     private final UpsertTargetDescriptor valueUpsertDescriptor;\n     private final QueryException exception;\n-    private final boolean nativeMemoryEnabled;\n \n     protected AbstractMapTable(\n         String schemaName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTYwNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457101606", "bodyText": "Same as in other places: this is not needed for replicated maps", "author": "devozerov", "createdAt": "2020-07-20T06:43:24Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java", "diffHunk": "@@ -96,6 +96,8 @@ private ReplicatedMapTable createTable(ReplicatedMapService mapService, String n\n \n                 long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n+                boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java\nindex 5702c80a114..90a05824e3c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java\n\n@@ -96,8 +96,6 @@ public class ReplicatedMapTableResolver extends AbstractMapTableResolver {\n \n                 long estimatedRowCount = stores.size() * nodeEngine.getPartitionService().getPartitionCount();\n \n-                boolean nativeMemoryEnabled = nodeEngine.getConfig().getNativeMemoryConfig().isEnabled();\n-\n                 return new ReplicatedMapTable(\n                         SCHEMA_NAME_REPLICATED,\n                         name,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjMwOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457106309", "bodyText": "The error message is not very intuitive, because from the user perspective there is no \"scan\", but instead, there is an access to a table. I would change the message to something like this:\nCannot query IMap <name> with InMemoryFormat.NATIVE because it does not have indexes (please add at least one index to query this IMap)", "author": "devozerov", "createdAt": "2020-07-20T06:51:26Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -277,9 +277,15 @@ private static SqlRowMetadata createRowMetadata(List<String> columnNames, List<Q\n \n     @Override\n     public void onMapScan(MapScanPhysicalRel rel) {\n-        HazelcastTable hazelcastTable = rel.getTableUnwrapped();\n         AbstractMapTable table = rel.getMap();\n \n+        if (table.nativeMemoryEnabled()) {\n+            throw QueryException.error(\"IMap scan with InMemoryFormat.NATIVE is not supported: \" + table.getName()", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\nindex 7c41a77d6bd..0259d9eb9bd 100644\n--- a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\n+++ b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\n\n@@ -279,9 +280,8 @@ public class PlanCreateVisitor implements PhysicalRelVisitor {\n     public void onMapScan(MapScanPhysicalRel rel) {\n         AbstractMapTable table = rel.getMap();\n \n-        if (table.nativeMemoryEnabled()) {\n-            throw QueryException.error(\"IMap scan with InMemoryFormat.NATIVE is not supported: \" + table.getName()\n-            + \". Add at least one index to enable the scan.\");\n+        if (((PartitionedMapTable) table).nativeMemoryEnabled()) {\n+            throw QueryException.error(\"Cannot query IMap \" + table.getName() + \" with InMemoryFormat.NATIVE because it does not have indexes (please add at least one index to query this IMap)\");\n         }\n \n         HazelcastTable hazelcastTable = rel.getTableUnwrapped();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzUwMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457107502", "bodyText": "I would propose to have two overloads, to avoid complication for non-HD tests (and the majority of tests are non-HD):\npartitionedTable(name, fields, indexes, rowCount)\npartitionedTable(name, fields, indexes, rowCount, nativeMemoryEnabled)", "author": "devozerov", "createdAt": "2020-07-20T06:53:27Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java", "diffHunk": "@@ -155,22 +155,24 @@ private static PhysicalRel optimizePhysicalInternal(\n     }\n \n     protected static HazelcastTable partitionedTable(", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java b/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java\nindex 2aa73477a3a..78731e05c80 100644\n--- a/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java\n+++ b/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/opt/OptimizerTestSupport.java\n\n@@ -154,6 +154,15 @@ public abstract class OptimizerTestSupport extends SqlTestSupport {\n         return (PhysicalRel) context.optimize(node, PhysicalRules.getRuleSet(), physicalTraitSet);\n     }\n \n+    protected static HazelcastTable partitionedTable(\n+            String name,\n+            List<TableField> fields,\n+            List<MapTableIndex> indexes,\n+            long rowCount\n+            ) {\n+        return partitionedTable(name, fields, indexes, rowCount, false);\n+    }\n+\n     protected static HazelcastTable partitionedTable(\n             String name,\n             List<TableField> fields,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMDY3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17237#discussion_r457110670", "bodyText": "Same problem as in other places: this IMap is not necessarily HD map.", "author": "devozerov", "createdAt": "2020-07-20T06:58:28Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -130,6 +124,8 @@ private PartitionedMapTable createTable(\n             int distributionFieldOrdinal =\n                 MapTableUtils.getPartitionedMapDistributionField(mapContainer, context, resolved.getFields());\n \n+            boolean nativeMemoryEnabled = context.getNodeEngine().getConfig().getNativeMemoryConfig().isEnabled();", "originalCommit": "08e153c72645f91ed3401b276d4794c329fec58e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\nindex 30b977c7475..a4ca352f4b7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\n\n@@ -124,7 +125,7 @@ public class PartitionedMapTableResolver extends AbstractMapTableResolver {\n             int distributionFieldOrdinal =\n                 MapTableUtils.getPartitionedMapDistributionField(mapContainer, context, resolved.getFields());\n \n-            boolean nativeMemoryEnabled = context.getNodeEngine().getConfig().getNativeMemoryConfig().isEnabled();\n+            boolean nativeMemoryEnabled = config.getInMemoryFormat() == InMemoryFormat.NATIVE;\n \n             // Done.\n             return new PartitionedMapTable(\n"}}, {"oid": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "url": "https://github.com/hazelcast/hazelcast/commit/644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "message": "Integrate global HD index into SQL engine\n\n-On the query plan construction step select index for full scans\n- Plan creation unit testing", "committedDate": "2020-07-20T19:12:41Z", "type": "commit"}, {"oid": "644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "url": "https://github.com/hazelcast/hazelcast/commit/644dabe5153f3d17bffb1bb7e82f9bd7296a7c97", "message": "Integrate global HD index into SQL engine\n\n-On the query plan construction step select index for full scans\n- Plan creation unit testing", "committedDate": "2020-07-20T19:12:41Z", "type": "forcePushed"}, {"oid": "95dc74ea04ad95f4ca195654d9cbbe311ba99938", "url": "https://github.com/hazelcast/hazelcast/commit/95dc74ea04ad95f4ca195654d9cbbe311ba99938", "message": "Checkstyle", "committedDate": "2020-07-20T19:59:43Z", "type": "commit"}]}