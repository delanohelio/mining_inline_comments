{"pr_number": 17030, "pr_title": "Added support for Map.compute() #14913", "pr_createdAt": "2020-06-01T12:41:48Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17030", "timeline": [{"oid": "6cba654790abb7bca6ffe03a9f1005e2f8d55956", "url": "https://github.com/hazelcast/hazelcast/commit/6cba654790abb7bca6ffe03a9f1005e2f8d55956", "message": "Added support for Map.compute() #14913", "committedDate": "2020-06-01T12:37:38Z", "type": "commit"}, {"oid": "e6b0b58a773eb4c9db7b90242386c1b59edd09d4", "url": "https://github.com/hazelcast/hazelcast/commit/e6b0b58a773eb4c9db7b90242386c1b59edd09d4", "message": "Added support for Map.compute() #14913", "committedDate": "2020-06-01T12:40:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3NDk4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r435274985", "bodyText": "Minor: add some javadoc and the @since tag.", "author": "mmedenjak", "createdAt": "2020-06-04T13:53:03Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.map.impl;\n+\n+import com.hazelcast.map.EntryProcessor;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+\n+public class ComputeEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {", "originalCommit": "e6b0b58a773eb4c9db7b90242386c1b59edd09d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java\nindex f40bd7c0d3..9783526c04 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/ComputeEntryProcessor.java\n\n@@ -25,6 +25,11 @@ import java.io.IOException;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n+/**\n+ * Entry processor used by Hazelcast Map to execute the Map.compute() method remotely\n+ *\n+ * @since 4.1\n+ */\n public class ComputeEntryProcessor<K, V> implements EntryProcessor<K, V, V>, IdentifiedDataSerializable {\n \n     BiFunction<? super K, ? super V, ? extends V> biFunction;\n"}}, {"oid": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8", "url": "https://github.com/hazelcast/hazelcast/commit/29810c8325bf4135f0c6fbbf27e476c68a8df2f8", "message": "Added javadoc for ComputeEntryProcessor #14913", "committedDate": "2020-06-07T03:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446070281", "bodyText": "I can't say I'm crazy about this approach because there is no guarantee for fairness and you could be stuck in this method for a long time.", "author": "pveentjer", "createdAt": "2020-06-26T09:21:26Z", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/proxy/ClientMapProxy.java", "diffHunk": "@@ -2057,4 +2057,40 @@ private V computeIfAbsentLocally(K key, Function<? super K, ? extends V> mapping\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        return computeLocally(key, remappingFunction);\n+    }\n+\n+    private V computeLocally(K key,\n+                             BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "originalCommit": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MjUwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446072500", "bodyText": "True, it can suffer from livelock but we need to update the value atomically by computing the new value locally. Do you think we should give up after some time?", "author": "mmedenjak", "createdAt": "2020-06-26T09:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3NTU5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446075592", "bodyText": "There's even a description of this problem in the javadoc and it mentions using serializable mapping functions instead - https://github.com/hazelcast/hazelcast/pull/17030/files#diff-881ec66ec2a01669cfd1f0952225df34R3101", "author": "mmedenjak", "createdAt": "2020-06-26T09:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDYzNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446070636", "bodyText": "Unbound looping.", "author": "pveentjer", "createdAt": "2020-06-26T09:22:10Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java", "diffHunk": "@@ -1124,4 +1125,46 @@ public void forEach(@Nonnull BiConsumer<? super K, ? super V> action) {\n         }\n     }\n \n+    public V compute(@Nonnull K key, @Nonnull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+        checkNotNull(key, NULL_KEY_IS_NOT_ALLOWED);\n+        checkNotNull(key, NULL_BIFUNCTION_IS_NOT_ALLOWED);\n+\n+        if (SerializationUtil.isClassStaticAndSerializable(remappingFunction)\n+                && isClusterVersionGreaterOrEqual(Versions.V4_1)) {\n+            ComputeEntryProcessor<K, V> ep = new ComputeEntryProcessor<>(remappingFunction);\n+            return executeOnKey(key, ep);\n+        } else {\n+            return computeLocally(key, remappingFunction);\n+        }\n+    }\n+\n+    private V computeLocally(K key,\n+                                      BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n+\n+        while (true) {", "originalCommit": "29810c8325bf4135f0c6fbbf27e476c68a8df2f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3Mjk3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17030#discussion_r446072978", "bodyText": "Same comment - not sure how we can replace the value without retrying indefinitely. That's always going to be a problem if the mapping function is not serializable.", "author": "mmedenjak", "createdAt": "2020-06-26T09:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDYzNg=="}], "type": "inlineReview", "revised_code": null}]}