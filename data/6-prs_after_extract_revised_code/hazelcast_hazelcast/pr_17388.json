{"pr_number": 17388, "pr_title": "Expose upsert/inject information for SQL tables", "pr_createdAt": "2020-08-21T07:42:58Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17388", "timeline": [{"oid": "20e510cf81059216d917dbc71bf0b5f7308f56fe", "url": "https://github.com/hazelcast/hazelcast/commit/20e510cf81059216d917dbc71bf0b5f7308f56fe", "message": "Introduce UpsertDescriptors", "committedDate": "2020-08-19T14:59:03Z", "type": "commit"}, {"oid": "f1fefdb3ad51051734b233a677a0465158079da8", "url": "https://github.com/hazelcast/hazelcast/commit/f1fefdb3ad51051734b233a677a0465158079da8", "message": "Merge branch 'master' into upserts", "committedDate": "2020-08-20T08:22:49Z", "type": "commit"}, {"oid": "48223cb498aeea568bc007d6aebafab1d202fd7e", "url": "https://github.com/hazelcast/hazelcast/commit/48223cb498aeea568bc007d6aebafab1d202fd7e", "message": "Merge Pojo & Primitive upsert descriptor into Java one", "committedDate": "2020-08-20T11:45:11Z", "type": "commit"}, {"oid": "f869a68bc573d5e5fe8d2e05032a07537d7b8b0b", "url": "https://github.com/hazelcast/hazelcast/commit/f869a68bc573d5e5fe8d2e05032a07537d7b8b0b", "message": "Simplify", "committedDate": "2020-08-20T14:28:46Z", "type": "commit"}, {"oid": "606cba61ebdbb83912b5a2f01fbfc0d2e01ef743", "url": "https://github.com/hazelcast/hazelcast/commit/606cba61ebdbb83912b5a2f01fbfc0d2e01ef743", "message": "Add equals() & hashCode() to upsert descriptors", "committedDate": "2020-08-20T14:30:51Z", "type": "commit"}, {"oid": "49a11f878e25f5393ed96387a1709c594b19a478", "url": "https://github.com/hazelcast/hazelcast/commit/49a11f878e25f5393ed96387a1709c594b19a478", "message": "Tests", "committedDate": "2020-08-21T07:31:44Z", "type": "commit"}, {"oid": "295b18dad5f7a10d7b8720ddb6fc5b0413a6d803", "url": "https://github.com/hazelcast/hazelcast/commit/295b18dad5f7a10d7b8720ddb6fc5b0413a6d803", "message": "Remove unused import", "committedDate": "2020-08-21T07:34:01Z", "type": "commit"}, {"oid": "6dcdd77699630a9bf29c8faee11b169ea61385e9", "url": "https://github.com/hazelcast/hazelcast/commit/6dcdd77699630a9bf29c8faee11b169ea61385e9", "message": "Merge remote-tracking branch 'upstream/master' into upserts\n\n# Conflicts:\n#\thazelcast-sql/src/test/java/com/hazelcast/sql/impl/expression/ExpressionTestBase.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTable.java", "committedDate": "2020-08-21T07:40:07Z", "type": "commit"}, {"oid": "e176b69754deeb1cefecb77df71242313d589da9", "url": "https://github.com/hazelcast/hazelcast/commit/e176b69754deeb1cefecb77df71242313d589da9", "message": "Make checkstyle happier", "committedDate": "2020-08-21T07:50:15Z", "type": "commit"}, {"oid": "8a1baff453e608ac944d81e217dfa27cc508e37c", "url": "https://github.com/hazelcast/hazelcast/commit/8a1baff453e608ac944d81e217dfa27cc508e37c", "message": "Fix serialization test", "committedDate": "2020-08-21T08:50:58Z", "type": "commit"}, {"oid": "de335d911697e2861f625cb321c635ff9db0b4c7", "url": "https://github.com/hazelcast/hazelcast/commit/de335d911697e2861f625cb321c635ff9db0b4c7", "message": "Merge remote-tracking branch 'upstream/master' into upserts\n\n# Conflicts:\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/SqlDataSerializerHook.java", "committedDate": "2020-08-21T09:00:20Z", "type": "commit"}, {"oid": "b907dd5d36e50c821744fb08ffe56f476df16dce", "url": "https://github.com/hazelcast/hazelcast/commit/b907dd5d36e50c821744fb08ffe56f476df16dce", "message": "Rework", "committedDate": "2020-08-24T08:30:18Z", "type": "commit"}, {"oid": "451abbec95f3ce81cf01f26768e04cf8af2dfc1c", "url": "https://github.com/hazelcast/hazelcast/commit/451abbec95f3ce81cf01f26768e04cf8af2dfc1c", "message": "Merge branch 'master' into upserts", "committedDate": "2020-08-24T08:31:14Z", "type": "commit"}, {"oid": "a021ea482de9519a83ee5dc0f6992b0af473f89d", "url": "https://github.com/hazelcast/hazelcast/commit/a021ea482de9519a83ee5dc0f6992b0af473f89d", "message": "Merge 'master' int oupserts", "committedDate": "2020-08-24T09:03:35Z", "type": "commit"}, {"oid": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58", "url": "https://github.com/hazelcast/hazelcast/commit/ae736076f49ebe4474121d187fa0e0ce3fc0fb58", "message": "Naming", "committedDate": "2020-08-24T10:26:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDY0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475510642", "bodyText": "I'd prefer something more pointing to the use, such as keyResolverPluginData", "author": "viliam-durina", "createdAt": "2020-08-24T10:39:47Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java", "diffHunk": "@@ -37,6 +37,8 @@\n     private final String mapName;\n     private final QueryTargetDescriptor keyDescriptor;\n     private final QueryTargetDescriptor valueDescriptor;\n+    private final Object keyAppendix;\n+    private final Object valueAppendix;", "originalCommit": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "611ed2fa04fe61bfb83e4fafaff7e0401a674f0e", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\nindex 8fea3bd0fd..f7f31ccac8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/AbstractMapTable.java\n\n@@ -37,8 +37,8 @@ public abstract class AbstractMapTable extends Table {\n     private final String mapName;\n     private final QueryTargetDescriptor keyDescriptor;\n     private final QueryTargetDescriptor valueDescriptor;\n-    private final Object keyAppendix;\n-    private final Object valueAppendix;\n+    private final Object keyJetMetadata;\n+    private final Object valueJetMetadata;\n     private final QueryException exception;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NDM0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475584344", "bodyText": "Minor comment - the name is not very specific. I would name it something like JetMapMetadataResolver or alike, to highlight that is:\n\nComes from Jet\nDeals with metadata", "author": "devozerov", "createdAt": "2020-08-24T13:03:35Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {", "originalCommit": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "611ed2fa04fe61bfb83e4fafaff7e0401a674f0e", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\nsimilarity index 54%\nrename from hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java\nrename to hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\nindex 9b2c231c9e..3d1da1acab 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\n\n@@ -17,19 +17,30 @@\n package com.hazelcast.sql.impl.schema.map;\n \n import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.replicatedmap.ReplicatedMap;\n \n /**\n  * Plugin mechanism, allowing to perform additional analysis of\n- * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * {@link IMap}/{@link ReplicatedMap} keys & values during sample based schema resolution.\n  * <p/>\n- * Used by Jet.\n+ * Resulting metadata is attached to the resolved {@link AbstractMapTable}.\n  */\n-@FunctionalInterface\n-public interface MapResolverPlugin {\n+public interface JetMapMetadataResolver {\n \n-    /**\n-     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n-     */\n-    Object resolve(Object object, boolean key);\n+    JetMapMetadataResolver NO_OP = new JetMapMetadataResolver() {\n+        @Override\n+        public Object resolveClass(Class<?> clazz, boolean key) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object resolvePortable(ClassDefinition clazz, boolean key) {\n+            return null;\n+        }\n+    };\n+\n+    Object resolveClass(Class<?> clazz, boolean key);\n+\n+    Object resolvePortable(ClassDefinition clazz, boolean key);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475585234", "bodyText": "Also minor comment.\nIn the resolver's code, you either pass here Class of ClassDefinition as the first argument. It is ok from IMDG perspective, but are you ok with a necessity of casts inside Jet implementation?\nIf you leave the interface as is, I would propose adding JavaDoc about expected arguments.", "author": "devozerov", "createdAt": "2020-08-24T13:05:14Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.replicatedmap.ReplicatedMap;\n+\n+/**\n+ * Plugin mechanism, allowing to perform additional analysis of\n+ * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * <p/>\n+ * Used by Jet.\n+ */\n+@FunctionalInterface\n+public interface MapResolverPlugin {\n+\n+    /**\n+     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n+     */\n+    Object resolve(Object object, boolean key);", "originalCommit": "ae736076f49ebe4474121d187fa0e0ce3fc0fb58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4OTA5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475589094", "bodyText": "I had an impression that it was the proposed solution. Anyway, what about this one then?\ninterface JetMapMetadataResolver {\n    Object resolveClass(Class<?> clazz, boolean key);\n\n    Object resolvePortable(ClassDeficition clazz, boolean key);\n}\n\nAdditional methods could be added if needed (i.e. Json).", "author": "gierlachg", "createdAt": "2020-08-24T13:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MzU3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17388#discussion_r475593578", "bodyText": "They both OK from the IMDG perspective. The question is - what is better for Jet.\nThe interface you proposed in the comment looks good to me - it is clean and simple.", "author": "devozerov", "createdAt": "2020-08-24T13:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4NTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "611ed2fa04fe61bfb83e4fafaff7e0401a674f0e", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\nsimilarity index 54%\nrename from hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java\nrename to hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\nindex 9b2c231c9e..3d1da1acab 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/MapResolverPlugin.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/JetMapMetadataResolver.java\n\n@@ -17,19 +17,30 @@\n package com.hazelcast.sql.impl.schema.map;\n \n import com.hazelcast.map.IMap;\n+import com.hazelcast.nio.serialization.ClassDefinition;\n import com.hazelcast.replicatedmap.ReplicatedMap;\n \n /**\n  * Plugin mechanism, allowing to perform additional analysis of\n- * {@link IMap}/{@link ReplicatedMap} keys & values on sample based schema resolution.\n+ * {@link IMap}/{@link ReplicatedMap} keys & values during sample based schema resolution.\n  * <p/>\n- * Used by Jet.\n+ * Resulting metadata is attached to the resolved {@link AbstractMapTable}.\n  */\n-@FunctionalInterface\n-public interface MapResolverPlugin {\n+public interface JetMapMetadataResolver {\n \n-    /**\n-     * Return an appendix that is attached to the resolved {@link AbstractMapTable}.\n-     */\n-    Object resolve(Object object, boolean key);\n+    JetMapMetadataResolver NO_OP = new JetMapMetadataResolver() {\n+        @Override\n+        public Object resolveClass(Class<?> clazz, boolean key) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object resolvePortable(ClassDefinition clazz, boolean key) {\n+            return null;\n+        }\n+    };\n+\n+    Object resolveClass(Class<?> clazz, boolean key);\n+\n+    Object resolvePortable(ClassDefinition clazz, boolean key);\n }\n"}}, {"oid": "611ed2fa04fe61bfb83e4fafaff7e0401a674f0e", "url": "https://github.com/hazelcast/hazelcast/commit/611ed2fa04fe61bfb83e4fafaff7e0401a674f0e", "message": "Naming", "committedDate": "2020-08-24T13:40:19Z", "type": "commit"}, {"oid": "d2f935287aadc17fec73c3191183ade5121a1bc2", "url": "https://github.com/hazelcast/hazelcast/commit/d2f935287aadc17fec73c3191183ade5121a1bc2", "message": "Formatting", "committedDate": "2020-08-24T13:57:10Z", "type": "commit"}]}