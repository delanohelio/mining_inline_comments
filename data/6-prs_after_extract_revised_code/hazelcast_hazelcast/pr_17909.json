{"pr_number": 17909, "pr_title": "Method removal and unifications", "pr_createdAt": "2020-12-01T09:20:01Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17909", "timeline": [{"oid": "454028f32fca1340db5efda6d377b854adbe1d15", "url": "https://github.com/hazelcast/hazelcast/commit/454028f32fca1340db5efda6d377b854adbe1d15", "message": "wip", "committedDate": "2020-12-01T22:21:54Z", "type": "forcePushed"}, {"oid": "565f6bb5071a910588985e25d5b5f5cb5c5cafaf", "url": "https://github.com/hazelcast/hazelcast/commit/565f6bb5071a910588985e25d5b5f5cb5c5cafaf", "message": "cleanup", "committedDate": "2020-12-02T13:22:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwNTY2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534105660", "bodyText": "I think if we take this unified putInternal() way, we should consider introducing a parameter type for it. It's a bit hard to follow which boolean means what in the PR. I mean something like\nprivate static class PutControl {\n  private static final PutControl PUT_IF_ABSENT = PutControl.of().putIfAbsent().putIfExists().putIfEqual()...;\n\n  boolean putIfAbsent;\n  boolean putIfExists;\n  ...\n}\n\nThen, we can call from putIfAbsent() something like putInternal(key, value, ttl, maxIdle, getNow(), PutControl.PUT_IF_ABSENT)\nWDYT?\nOn the other hand, I'm not sure that merging multiple methods into a single one loaded with branches is better for readability/understandability/performance. What gain do we expect here? Can't we just extract parts of this method into primitive building blocks and use those blocks directly in the callers?", "author": "blazember", "createdAt": "2020-12-02T11:47:06Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java", "diffHunk": "@@ -746,66 +738,158 @@ private void addEventToQueryCache(Data dataKey, Record record) {\n \n     @Override\n     public boolean setTtl(Data key, long ttl, boolean backup) {\n-        long now = getNow();\n-        Record record = getRecordOrNull(key, now, false);\n-        Object existingValue = record == null ? loadValueOf(key) : record.getValue();\n-        if (existingValue == null) {\n-            return false;\n-        }\n-        if (record == null) {\n-            createRecord(key, existingValue, ttl, UNSET, now);\n-            mutationObserver.onPutRecord(key, null, existingValue, false);\n-        } else {\n-            updateRecord(key, record, existingValue, existingValue, now, true, ttl,\n-                    UNSET, true, null, backup);\n-        }\n-        markRecordStoreExpirable(ttl, UNSET);\n-        return true;\n+        Object oldValue = putInternal(key, null, ttl, UNSET, getNow(),\n+                true, true, false, true, false,\n+                false, null, true, true,\n+                null, null, true, backup);\n+        return oldValue != null;\n     }\n \n     @Override\n     public Object set(Data dataKey, Object value, long ttl, long maxIdle) {\n-        return putInternal(dataKey, value, ttl, maxIdle, null, false, true);\n+        return putInternal(dataKey, value, ttl, maxIdle, getNow(),\n+                false, true, false, false, false,\n+                false, null, false, true,\n+                null, null, true, false);\n     }\n \n     @Override\n     public Object setTxn(Data dataKey, Object value, long ttl, long maxIdle, UUID transactionId) {\n-        return putInternal(dataKey, value, ttl, maxIdle, transactionId, false, true);\n+        return putInternal(dataKey, value, ttl, maxIdle, getNow(),\n+                false, true, false, false, false,\n+                false, null, false, true,\n+                transactionId, null, true, false);\n     }\n \n     @Override\n     public Object put(Data key, Object value, long ttl, long maxIdle) {\n-        return putInternal(key, value, ttl, maxIdle, null, true, true);\n+        return putInternal(key, value, ttl, maxIdle, getNow(),\n+                true, true, false, false, false,\n+                false, null, false, true,\n+                null, null, true, false);\n     }\n \n-    protected Object putInternal(Data key, Object newValue, long ttl,\n-                                 long maxIdle, @Nullable UUID transactionId,\n-                                 boolean loadFromStore, boolean countAsAccess) {\n-        checkIfLoaded();\n-\n-        long now = getNow();\n-        markRecordStoreExpirable(ttl, maxIdle);\n-\n-        Record record = getRecordOrNull(key, now, false);\n-        Object oldValue = record == null\n-                ? (loadFromStore ? loadValueOf(key) : null) : record.getValue();\n-        newValue = mapServiceContext.interceptPut(interceptorRegistry, oldValue, newValue);\n-        onStore(record);\n+    /**\n+     * Core put method for all variants of puts/updates.\n+     * @return old value if this is an update operations, otherwise returns null\n+     */\n+    @SuppressWarnings({\"checkstyle:npathcomplexity\",\n+            \"checkstyle:parameternumber\", \"checkstyle:cyclomaticcomplexity\"})\n+    private Object putInternal(Data key, Object newValue, long ttl,\n+                               long maxIdle, long now, boolean load, boolean store,\n+                               boolean putIfAbsent, boolean putIfExists, boolean putIfEqual,\n+                               boolean putFromLoad, Object expectedValue, boolean useOldValueIfNoNewValue,\n+                               boolean checkIfLoaded, @Nullable UUID transactionId,\n+                               Address callerAddress, boolean countAsAccess, boolean backup) {", "originalCommit": "38fecde9dbb797c303d6fca39a9e8b5567678697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2Njk1NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534266954", "bodyText": "Merging will help here to see logical problems, fixing bugs or making improvements in one place for all variants of puts. For readability/understandability, i added short comments. For performance, i believe branching has very minimal effect, since we have still a lot of branching, but with this 2-3 new branches... it needs verifications of course. To see possible improvements  easily i'll keep the method as dumb as possible for now, so not planning to add PutControl.", "author": "ahmetmircik", "createdAt": "2020-12-02T15:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwNTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI4NjUwMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534286501", "bodyText": "I agree that the performance loss is insignificant here. I commented that as well because the branches break the previously straight control flow similarly to how they break the \"reading flow\" (for me). Anyways, I'm not blocking you on this, we will see in the end if this unification helps or distracts.\nWith the PutControl idea, I didn't mean any change to putInternal() itself. It would be only changing if (putIfAbsent) {...} to if (ctrl.putIfAbsent) {...}. It would be useful only to the non-IDE readers though, as the IDEs - at least IntelliJ - label the variables, so I'm ok with not implementing this as well.", "author": "blazember", "createdAt": "2020-12-02T16:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwNTY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "565f6bb5071a910588985e25d5b5f5cb5c5cafaf", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\nindex c9c02a570dc..907410a6601 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\n\n@@ -771,7 +771,7 @@ public class DefaultRecordStore extends AbstractEvictableRecordStore {\n \n     /**\n      * Core put method for all variants of puts/updates.\n-     * @return old value if this is an update operations, otherwise returns null\n+     * @return old value if this is an update operation, otherwise returns null\n      */\n     @SuppressWarnings({\"checkstyle:npathcomplexity\",\n             \"checkstyle:parameternumber\", \"checkstyle:cyclomaticcomplexity\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzMTkzMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534131932", "bodyText": "Can't we use record here instead of getRecord()?", "author": "blazember", "createdAt": "2020-12-02T12:33:20Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java", "diffHunk": "@@ -410,13 +404,11 @@ public Record loadRecordOrNull(Data key, boolean backup, Address callerAddress)\n             value = loaderEntry.getValue();\n             ttl = proposedTtl;\n         }\n-        Record record = createRecord(key, value, ttl, UNSET, getNow());\n-        markRecordStoreExpirable(ttl, UNSET);\n-        storage.put(key, record);\n-        mutationObserver.onLoadRecord(key, record, backup);\n-        if (!backup) {\n+        Record record = putNewRecord(key, null, value, ttl, UNSET, getNow(),\n+                null, LOADED, false, backup);\n+        if (!backup && mapEventPublisher.hasEventListener(name)) {\n             mapEventPublisher.publishEvent(callerAddress, name, EntryEventType.LOADED,\n-                    key, null, value, null);\n+                    key, null, getRecord(key).getValue(), null);", "originalCommit": "38fecde9dbb797c303d6fca39a9e8b5567678697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2NzAzMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17909#discussion_r534267033", "bodyText": "fixed.", "author": "ahmetmircik", "createdAt": "2020-12-02T15:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzMTkzMg=="}], "type": "inlineReview", "revised_code": {"commit": "dd30f682d72eab6c2b8bac3dcb4ace9ed2261063", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\nindex c9c02a570dc..297e3fb3b6c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/recordstore/DefaultRecordStore.java\n\n@@ -408,7 +408,7 @@ public class DefaultRecordStore extends AbstractEvictableRecordStore {\n                 null, LOADED, false, backup);\n         if (!backup && mapEventPublisher.hasEventListener(name)) {\n             mapEventPublisher.publishEvent(callerAddress, name, EntryEventType.LOADED,\n-                    key, null, getRecord(key).getValue(), null);\n+                    key, null, record.getValue(), null);\n         }\n         evictEntries(key);\n         // here, we are only publishing events for loaded\n"}}, {"oid": "4cfafd80082eda63b7d010b442bd0f0a1c9aa5f6", "url": "https://github.com/hazelcast/hazelcast/commit/4cfafd80082eda63b7d010b442bd0f0a1c9aa5f6", "message": "cleanup", "committedDate": "2020-12-02T19:02:52Z", "type": "commit"}, {"oid": "dd30f682d72eab6c2b8bac3dcb4ace9ed2261063", "url": "https://github.com/hazelcast/hazelcast/commit/dd30f682d72eab6c2b8bac3dcb4ace9ed2261063", "message": "address review comment", "committedDate": "2020-12-02T19:02:52Z", "type": "commit"}, {"oid": "241a09c89e5c14c80806ae82c9a05370c5fac334", "url": "https://github.com/hazelcast/hazelcast/commit/241a09c89e5c14c80806ae82c9a05370c5fac334", "message": "address review comment 2", "committedDate": "2020-12-02T19:02:53Z", "type": "commit"}, {"oid": "40e550eb0ee14b7051bd4dc031b45b2565e11e07", "url": "https://github.com/hazelcast/hazelcast/commit/40e550eb0ee14b7051bd4dc031b45b2565e11e07", "message": "address review comment 3", "committedDate": "2020-12-02T19:02:53Z", "type": "commit"}, {"oid": "ede592ede8570af98a3af2eae404397f5df7c8fa", "url": "https://github.com/hazelcast/hazelcast/commit/ede592ede8570af98a3af2eae404397f5df7c8fa", "message": "test fix", "committedDate": "2020-12-02T19:02:53Z", "type": "commit"}, {"oid": "4449c9f95249411f13449a84e1162a7ebc9cf9ad", "url": "https://github.com/hazelcast/hazelcast/commit/4449c9f95249411f13449a84e1162a7ebc9cf9ad", "message": "test fix", "committedDate": "2020-12-02T19:06:07Z", "type": "commit"}, {"oid": "4449c9f95249411f13449a84e1162a7ebc9cf9ad", "url": "https://github.com/hazelcast/hazelcast/commit/4449c9f95249411f13449a84e1162a7ebc9cf9ad", "message": "test fix", "committedDate": "2020-12-02T19:06:07Z", "type": "forcePushed"}]}