{"pr_number": 17243, "pr_title": "Reduce initial log messages", "pr_createdAt": "2020-07-20T09:26:04Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222042", "bodyText": "Knowing which joiner is being used is pretty useful.", "author": "pveentjer", "createdAt": "2020-07-20T09:33:26Z", "path": "hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java", "diffHunk": "@@ -817,17 +817,25 @@ Joiner createJoiner() {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            logger.info(\"Activating Discovery SPI Joiner\");\n+            if (logger.isFineEnabled()) {", "originalCommit": "7754c74b5cd43ca794af1a55121982dd808dcf34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxOTQyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457319421", "bodyText": "Yeah, I thought that this one might be controversial. Maybe we could just adjust the logging messages to be actually more user friendly? Right now it looks like a regular debugging message. As a new user, I don't know what the Joiner is (I shouldn't know, it's internal) and also I might better understand other word than \"Activating\", sounds like a robot.\nHow about I would change the log lines to be more user friendly like:\nUsing Discovery API\nUsing multicast discovery\nUsing TCP/IP discovery\nUsing AWS discovery\n\nand keep it on info level?", "author": "Holmistr", "createdAt": "2020-07-20T12:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjgwNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457526805", "bodyText": "Fine with me. Can't we get the discovery interface have a proper toString? So that it also works for custom discovery mechanisms.", "author": "pveentjer", "createdAt": "2020-07-20T16:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3NDcxMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457874713", "bodyText": "I have updated the PR. I didn't go with the road of providing toString method as this is going a bit deeper and I have no idea about the consequences.", "author": "Holmistr", "createdAt": "2020-07-21T06:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "503e8cbf06e372a71109a397b4e4dc8f530189ed", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java b/hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java\nindex 19265db60a3..1c96a0052a4 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/impl/Node.java\n\n@@ -817,25 +817,17 @@ public class Node {\n \n         if (properties.getBoolean(DISCOVERY_SPI_ENABLED) || isAnyAliasedConfigEnabled(join)) {\n             //TODO: Auto-Upgrade Multicast+AWS configuration!\n-            if (logger.isFineEnabled()) {\n-                logger.fine(\"Activating Discovery SPI Joiner\");\n-            }\n+            logger.info(\"Using Discovery SPI\");\n             return new DiscoveryJoiner(this, discoveryService, usePublicAddress(join));\n         } else {\n             if (join.getMulticastConfig().isEnabled() && multicastService != null) {\n-                if (logger.isFineEnabled()) {\n-                    logger.fine(\"Creating MulticastJoiner\");\n-                }\n+                logger.info(\"Using Multicast discovery\");\n                 return new MulticastJoiner(this);\n             } else if (join.getTcpIpConfig().isEnabled()) {\n-                if (logger.isFineEnabled()) {\n-                    logger.fine(\"Creating TcpIpJoiner\");\n-                }\n+                logger.info(\"Using TCP/IP discovery\");\n                 return new TcpIpJoiner(this);\n             } else if (join.getAwsConfig().isEnabled()) {\n-                if (logger.isFineEnabled()) {\n-                    logger.fine(\"Creating AWSJoiner\");\n-                }\n+                logger.info(\"Using AWS discovery\");\n                 return createAwsJoiner();\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjM1NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222354", "bodyText": "ok", "author": "pveentjer", "createdAt": "2020-07-20T09:33:50Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/BackpressureRegulator.java", "diffHunk": "@@ -100,7 +100,9 @@\n                                 OPERATION_BACKUP_TIMEOUT_MILLIS.getName()));\n             }\n         } else {\n-            logger.info(\"Backpressure is disabled\");\n+            if (logger.isFineEnabled()) {", "originalCommit": "7754c74b5cd43ca794af1a55121982dd808dcf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjQwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17243#discussion_r457222400", "bodyText": "ok", "author": "pveentjer", "createdAt": "2020-07-20T09:33:54Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/operationexecutor/impl/OperationExecutorImpl.java", "diffHunk": "@@ -514,8 +514,10 @@ public int toPartitionThreadIndex(int partitionId) {\n \n     @Override\n     public void start() {\n-        logger.info(\"Starting \" + partitionThreads.length + \" partition threads and \"\n-                + genericThreads.length + \" generic threads (\" + priorityThreadCount + \" dedicated for priority tasks)\");\n+        if (logger.isFineEnabled()) {", "originalCommit": "7754c74b5cd43ca794af1a55121982dd808dcf34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "503e8cbf06e372a71109a397b4e4dc8f530189ed", "url": "https://github.com/hazelcast/hazelcast/commit/503e8cbf06e372a71109a397b4e4dc8f530189ed", "message": "Reduce initial log messages", "committedDate": "2020-07-21T06:41:42Z", "type": "forcePushed"}, {"oid": "d07f555cd97828568c5929536560ccb3ce5845e9", "url": "https://github.com/hazelcast/hazelcast/commit/d07f555cd97828568c5929536560ccb3ce5845e9", "message": "Reduce initial log messages", "committedDate": "2020-08-03T12:10:20Z", "type": "commit"}, {"oid": "d07f555cd97828568c5929536560ccb3ce5845e9", "url": "https://github.com/hazelcast/hazelcast/commit/d07f555cd97828568c5929536560ccb3ce5845e9", "message": "Reduce initial log messages", "committedDate": "2020-08-03T12:10:20Z", "type": "forcePushed"}]}