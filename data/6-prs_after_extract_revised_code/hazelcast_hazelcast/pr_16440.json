{"pr_number": 16440, "pr_title": "Fix LossToleranceTest", "pr_createdAt": "2020-01-08T17:14:49Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16440", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5Nzc5OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16440#discussion_r364597798", "bodyText": "I don't know why we assert this bit - as it's internal detail", "author": "cangencer", "createdAt": "2020-01-09T07:54:32Z", "path": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java", "diffHunk": "@@ -130,24 +117,19 @@ public void whenLossTolerant_andOwnerCrashes_thenContinue() {\n         topic.publish(\"item1\");\n         topic.publish(\"item2\");\n \n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"item1\");\n-                assertContains(listener.objects, \"item2\");\n-            }\n+        assertTrueEventually(() -> {\n+            assertContains(listener.objects, \"item1\");\n+            assertContains(listener.objects, \"item2\");\n         });\n         TestUtil.terminateInstance(topicOwnerInstance);\n \n-        topic.publish(\"newItem\");\n-\n-\n-        assertTrueEventually(new AssertTask() {\n-            @Override\n-            public void run() {\n-                assertContains(listener.objects, \"newItem\");\n+        assertTrueEventually(() -> {\n+            String item = \"newItem \" + UUID.randomUUID();\n+            topic.publish(item);\n+            assertTrueEventually(() -> {\n+                assertContains(listener.objects, item);\n                 assertFalse(topic.runnersMap.isEmpty());", "originalCommit": "9584a09d12e0cd13a81d3391f982a4658333097a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYyMDg0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16440#discussion_r364620844", "bodyText": "True, I'll remove it.", "author": "mmedenjak", "createdAt": "2020-01-09T08:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5Nzc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a1cb58212ef01321041fcf6ba8159969e8322d92", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java\nindex f4afc2849d1..2bd76d65b47 100644\n--- a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/LossToleranceTest.java\n\n@@ -126,10 +122,7 @@ public class LossToleranceTest extends HazelcastTestSupport {\n         assertTrueEventually(() -> {\n             String item = \"newItem \" + UUID.randomUUID();\n             topic.publish(item);\n-            assertTrueEventually(() -> {\n-                assertContains(listener.objects, item);\n-                assertFalse(topic.runnersMap.isEmpty());\n-            }, 5);\n+            assertTrueEventually(() -> assertContains(listener.objects, item), 5);\n         });\n     }\n }\n"}}, {"oid": "04f850b8341ae57b9930ae2579402efe9579e100", "url": "https://github.com/hazelcast/hazelcast/commit/04f850b8341ae57b9930ae2579402efe9579e100", "message": "Fix LossToleranceTest\n\nBecause of the behaviour change introduced in\nhttps://github.com/hazelcast/hazelcast/pull/16303, when the requested\nsequence is larger than the largest sequence (tailSequence) + 1, we\ndon't listen from the oldest sequence (headSequence) but rather from the\ntailSequence + 1. Both approaches are fine and both approaches work\nbetter in some scenarios. Since the listener is loss tolerant, we can\nskip items from headSequence..tailSequence+1 anyway.\n\nFixed the test to adhere to the new behaviour. We assume that eventually\nas we publish an item, it will reach the listener.\n\nA better fix would be to introduce unique IDs per ringbuffer, where we\nwould then be able to distinguish between a completely lost ringbuffer\nand a ringbuffer which has not received the last few items and\nappropriately reset the requested sequence to the headSequence or\ntailSequence.\n\nFixes: https://github.com/hazelcast/hazelcast/issues/16430", "committedDate": "2020-01-09T10:31:38Z", "type": "commit"}, {"oid": "a1cb58212ef01321041fcf6ba8159969e8322d92", "url": "https://github.com/hazelcast/hazelcast/commit/a1cb58212ef01321041fcf6ba8159969e8322d92", "message": "Address review comments", "committedDate": "2020-01-09T10:31:38Z", "type": "commit"}, {"oid": "872c8c7f802df1619b8a48010a4ac3189178486b", "url": "https://github.com/hazelcast/hazelcast/commit/872c8c7f802df1619b8a48010a4ac3189178486b", "message": "Checkstyle", "committedDate": "2020-01-09T10:31:59Z", "type": "commit"}, {"oid": "872c8c7f802df1619b8a48010a4ac3189178486b", "url": "https://github.com/hazelcast/hazelcast/commit/872c8c7f802df1619b8a48010a4ac3189178486b", "message": "Checkstyle", "committedDate": "2020-01-09T10:31:59Z", "type": "forcePushed"}]}