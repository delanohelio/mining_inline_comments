{"pr_number": 17629, "pr_title": "Update TTL with offloadable EP", "pr_createdAt": "2020-09-28T08:52:27Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17629", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwOTk5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495809995", "bodyText": "Afaik EntryOffloadableSetUnlockOperation must be Versioned to get version of the stream in EE.", "author": "mdogan", "createdAt": "2020-09-28T09:34:22Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOffloadableSetUnlockOperation.java", "diffHunk": "@@ -151,18 +155,27 @@ protected void writeInternal(ObjectDataOutput out) throws IOException {\n         UUIDSerializationUtil.writeUUID(out, caller);\n         out.writeLong(begin);\n         out.writeObject(entryBackupProcessor);\n+        // RU_COMPAT_4_0\n+        if (out.getVersion().isGreaterOrEqual(Versions.V4_1)) {", "originalCommit": "47576d536f1f4cc32715ece425cd5cd87c8ae418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxMjc0OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495812748", "bodyText": "fixed", "author": "ahmetmircik", "createdAt": "2020-09-28T09:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwOTk5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwOTYwOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495909608", "bodyText": "Is the default value of 0 ok during RU?", "author": "mmedenjak", "createdAt": "2020-09-28T12:45:19Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOffloadableSetUnlockOperation.java", "diffHunk": "@@ -151,18 +156,27 @@ protected void writeInternal(ObjectDataOutput out) throws IOException {\n         UUIDSerializationUtil.writeUUID(out, caller);\n         out.writeLong(begin);\n         out.writeObject(entryBackupProcessor);\n+        // RU_COMPAT_4_0\n+        if (out.getVersion().isGreaterOrEqual(Versions.V4_1)) {\n+            out.writeLong(newTtl);\n+        }\n     }\n \n     @Override\n     protected void readInternal(ObjectDataInput in) throws IOException {\n         super.readInternal(in);\n         String modificationTypeName = in.readUTF();\n-        modificationType = modificationTypeName.equals(\"\") ? null : EntryEventType.valueOf(modificationTypeName);\n+        modificationType = modificationTypeName.equals(\"\")\n+                ? null : EntryEventType.valueOf(modificationTypeName);\n         oldValue = IOUtil.readData(in);\n         newValue = IOUtil.readData(in);\n         caller = UUIDSerializationUtil.readUUID(in);\n         begin = in.readLong();\n         entryBackupProcessor = in.readObject();\n+        // RU_COMPAT_4_0\n+        if (in.getVersion().isGreaterOrEqual(Versions.V4_1)) {\n+            newTtl = in.readLong();", "originalCommit": "10d54bbb351505e6953c2f6a304baf4f730ffb55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MTU4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495951584", "bodyText": "yes it is ok, zero will be translated to infinity.", "author": "ahmetmircik", "createdAt": "2020-09-28T13:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwOTYwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNjI1Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495916257", "bodyText": "How come you don't use the outComes.add(operator.getEntry().getNewTtl()); above and set the TTL here? Same in PartitionWideEntryOperation.\nIs there an EE test with offloadable and setting TTL?", "author": "mmedenjak", "createdAt": "2020-09-28T12:55:59Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java", "diffHunk": "@@ -86,7 +87,7 @@ protected void runWithPartitionScanForNative() {\n             Object newValue = outComes.poll();\n             EntryEventType eventType = (EntryEventType) outComes.poll();\n \n-            operator.init(dataKey, oldValue, newValue, null, eventType, null)\n+            operator.init(dataKey, oldValue, newValue, null, eventType, null, UNSET)", "originalCommit": "10d54bbb351505e6953c2f6a304baf4f730ffb55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NTc0NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r495955745", "bodyText": "This PR is only relevant for offloadable EP. We had to carry ttl data to partition after  execution of ofloaded EP.\nWhat you pointed is only a signature change when initializing an entry. We don't need to register ttls of entries, this is working as is, no change is done here.\nAnd yes we have HDEntryProcessorTest for this PR also.", "author": "ahmetmircik", "createdAt": "2020-09-28T13:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNjI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1NzQwOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r497357408", "bodyText": "I see. Yes, you're right, you fixed the offloadable behaviour. Still, I see an issue here from before. The operator is used to run the EP for all entries but the new TTL values are discarded and instead we simply set UNSET for all entries. You can verify it by modifying EntryProcessorTest#customTtl_with_entryProcessor to use instance1Map.executeOnEntries(entryProcessor) and run HDEntryProcessorTest.\nYou could fix it in another PR but since you've opened this one, it's easier to fix it here.", "author": "mmedenjak", "createdAt": "2020-09-30T09:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNjI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NTY5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r498055697", "bodyText": "very good catch, i have added a fix for that also.", "author": "ahmetmircik", "createdAt": "2020-10-01T08:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxNjI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c3d0edbae9b72b9a14cd258f9c55a210c5fe0d99", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\nindex c8fabac514a..53416b1a78c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\n\n@@ -86,9 +86,10 @@ public class PartitionWideEntryBackupOperation extends AbstractMultipleEntryBack\n             Object oldValue = outComes.poll();\n             Object newValue = outComes.poll();\n             EntryEventType eventType = (EntryEventType) outComes.poll();\n+            long newTtl = (long) outComes.poll();\n \n-            operator.init(dataKey, oldValue, newValue, null, eventType, null, UNSET)\n-                    .doPostOperateOps();\n+            operator.init(dataKey, oldValue, newValue, null, eventType,\n+                    null, newTtl).doPostOperateOps();\n         }\n     }\n \n"}}, {"oid": "c3d0edbae9b72b9a14cd258f9c55a210c5fe0d99", "url": "https://github.com/hazelcast/hazelcast/commit/c3d0edbae9b72b9a14cd258f9c55a210c5fe0d99", "message": "Address Matko's review comments 2", "committedDate": "2020-09-30T18:06:17Z", "type": "forcePushed"}, {"oid": "1637f9371f578425dee8c32b40c0d971cfa0615d", "url": "https://github.com/hazelcast/hazelcast/commit/1637f9371f578425dee8c32b40c0d971cfa0615d", "message": "Update ttl with offloadable EP", "committedDate": "2020-10-01T08:00:25Z", "type": "commit"}, {"oid": "a21028f6b438a4c9b7cf288fed65489316cc7fa1", "url": "https://github.com/hazelcast/hazelcast/commit/a21028f6b438a4c9b7cf288fed65489316cc7fa1", "message": "Address Mehmet's review comment", "committedDate": "2020-10-01T08:00:25Z", "type": "commit"}, {"oid": "a0836905da5a308c6928fb5b3b2a85e883c7be79", "url": "https://github.com/hazelcast/hazelcast/commit/a0836905da5a308c6928fb5b3b2a85e883c7be79", "message": "Address Matko's review comments 2", "committedDate": "2020-10-01T08:00:25Z", "type": "commit"}, {"oid": "a0836905da5a308c6928fb5b3b2a85e883c7be79", "url": "https://github.com/hazelcast/hazelcast/commit/a0836905da5a308c6928fb5b3b2a85e883c7be79", "message": "Address Matko's review comments 2", "committedDate": "2020-10-01T08:00:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDA3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r499520078", "bodyText": "Do we not need to apply the TTL to the backup as well?", "author": "mmedenjak", "createdAt": "2020-10-05T11:12:10Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/EntryOffloadableSetUnlockOperation.java", "diffHunk": "@@ -104,7 +108,8 @@ public boolean returnsResponse() {\n \n     @Override\n     public Operation getBackupOperation() {\n-        return entryBackupProcessor != null ? new EntryBackupOperation(name, dataKey, entryBackupProcessor) : null;\n+        return entryBackupProcessor != null", "originalCommit": "a0836905da5a308c6928fb5b3b2a85e883c7be79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNTQ2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17629#discussion_r499725460", "bodyText": "no it is handled by entry-backup-processor.", "author": "ahmetmircik", "createdAt": "2020-10-05T16:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDA3OA=="}], "type": "inlineReview", "revised_code": null}]}