{"pr_number": 16665, "pr_title": "Define metrics for ISet and IList collections (#3823)", "pr_createdAt": "2020-02-16T10:20:07Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16665", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNTY5OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380135698", "bodyText": "Do we need to initialize this with 1000 capacity? It feels a waste of heap in the typical case.", "author": "blazember", "createdAt": "2020-02-17T11:45:50Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java", "diffHunk": "@@ -53,18 +58,23 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import static com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue;\n \n public abstract class CollectionService implements ManagedService, RemoteService, EventPublishingService<CollectionEvent,\n         ItemListener<Data>>, TransactionalService, MigrationAwareService, SplitBrainProtectionAwareService,\n-        SplitBrainHandlerService {\n+        SplitBrainHandlerService, StatisticsAwareService<LocalCollectionStats> {\n \n     protected final NodeEngine nodeEngine;\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n+    private final ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>(1000);", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14a6e64c2aa58e2045390d4d4c67755d69305be6", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\nindex 542956cbd2..8720752934 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\n\n@@ -71,7 +71,7 @@ public abstract class CollectionService implements ManagedService, RemoteService\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n-    private final ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>(1000);\n+    private final ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>();\n     private final ConstructorFunction<String, LocalCollectionStatsImpl> localListStatsConstructorFunction =\n             key -> new LocalCollectionStatsImpl();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDM4MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380140381", "bodyText": "It is safe to ignore this class and the related tests in this PR. This class was used for passing the metrics/statistics to Management Center, but starting with 4.1 we are going to use the metrics system introduced in 4.0 - what uses the DynamicMetricsProvider interface that you already implemented - for that purpose.", "author": "blazember", "createdAt": "2020-02-17T11:56:52Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -71,6 +72,8 @@\n     private Map<String, LocalMapStats> mapStats = new HashMap<>();\n     private Map<String, LocalMultiMapStats> multiMapStats = new HashMap<>();\n     private Map<String, LocalQueueStats> queueStats = new HashMap<>();\n+    private Map<String, LocalCollectionStats> listStats = new HashMap<>();", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0MDYwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380340600", "bodyText": "OK, I see. Shall I revert these changes then or are they fine as they are?", "author": "aberkecz", "createdAt": "2020-02-17T19:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzM2Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r383517366", "bodyText": "No strong preference here, but I'd remove it to keep the PR smaller.", "author": "blazember", "createdAt": "2020-02-24T21:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\nindex e4c00209f5..f89fee8fda 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\n\n@@ -72,8 +71,6 @@ public class MemberStateImpl implements MemberState {\n     private Map<String, LocalMapStats> mapStats = new HashMap<>();\n     private Map<String, LocalMultiMapStats> multiMapStats = new HashMap<>();\n     private Map<String, LocalQueueStats> queueStats = new HashMap<>();\n-    private Map<String, LocalCollectionStats> listStats = new HashMap<>();\n-    private Map<String, LocalCollectionStats> setStats = new HashMap<>();\n     private Map<String, LocalTopicStats> topicStats = new HashMap<>();\n     private Map<String, LocalTopicStats> reliableTopicStats = new HashMap<>();\n     private Map<String, LocalPNCounterStats> pnCounterStats = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0Mzg1MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380143851", "bodyText": "I think there should be separate types for list and set statistics. If we make them returning the same type of stats, we can't evolve the API differently for the two data structures. For example, if we want to introduce numberOfIndexOutOfBounds later, we can't do it without introducing it for sets too, where it doesn't make too much sense.", "author": "blazember", "createdAt": "2020-02-17T12:05:13Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/IList.java", "diffHunk": "@@ -34,4 +34,14 @@\n  * @see List\n  */\n public interface IList<E> extends List<E>, ICollection<E> {\n+\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalCollectionStats getLocalCollectionStats();", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/IList.java b/hazelcast/src/main/java/com/hazelcast/collection/IList.java\nindex e92274ee38..4e52190add 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/IList.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/IList.java\n\n@@ -37,11 +37,11 @@ public interface IList<E> extends List<E>, ICollection<E> {\n \n \n     /**\n-     * Returns {@link LocalCollectionStats} for this collection.\n+     * Returns {@link LocalListStats} for this collection.\n      * LocalCollectionStats is the statistics for this collection.\n      *\n      * @return this collection's local statistics.\n      */\n-    LocalCollectionStats getLocalCollectionStats();\n+    LocalListStats getLocalCollectionStats();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MjM3Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380162376", "bodyText": "I'm actually not sure this is a really useful stat for lists and sets. For maps and caches it makes sense, since those typically perform lookup operations. But lists and sets have different use cases. In that sense, I think these two are closer to queues and topics that don't have hits in their stats. The closest operations I can think of are contains and indexOf (in the case of list), but I'm not quite sure this is needed.", "author": "blazember", "createdAt": "2020-02-17T12:47:55Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection;\n+\n+import com.hazelcast.instance.LocalInstanceStats;\n+import com.hazelcast.internal.monitor.MemberState;\n+\n+/**\n+ * Local collections statistics to be used by {@link MemberState} implementations.\n+ */\n+public interface LocalCollectionStats extends LocalInstanceStats {\n+\n+    /**\n+     * Returns the last access (read) time of the list.\n+     *\n+     * @return last access (read) time of the list.\n+     */\n+    long getLastAccessTime();\n+\n+    /**\n+     * Returns the last update time of the list.\n+     *\n+     * @return last update time of the list.\n+     */\n+    long getLastUpdateTime();\n+\n+    /**\n+     * Returns the number of hits (reads) of the list, including those read operations\n+     * that do not return with a value (eg.: {@link IList#indexOf(Object)}.\n+     *\n+     * @return the number of hits (reads) of the list.\n+     */\n+    long getNumberOfHits();", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java b/hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java\nindex 00a4b1c34a..3737f15c6f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/LocalCollectionStats.java\n\n@@ -38,12 +38,4 @@ public interface LocalCollectionStats extends LocalInstanceStats {\n      */\n     long getLastUpdateTime();\n \n-    /**\n-     * Returns the number of hits (reads) of the list, including those read operations\n-     * that do not return with a value (eg.: {@link IList#indexOf(Object)}.\n-     *\n-     * @return the number of hits (reads) of the list.\n-     */\n-    long getNumberOfHits();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzM5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380163392", "bodyText": "If we introduce separate types for the stats, this might not be needed.", "author": "blazember", "createdAt": "2020-02-17T12:50:11Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java", "diffHunk": "@@ -53,13 +53,15 @@\n import java.util.UUID;\n import java.util.concurrent.Future;\n \n+import javax.annotation.Nonnull;\n+\n import static com.hazelcast.internal.config.ConfigValidator.checkCollectionConfig;\n import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n import static com.hazelcast.internal.util.SetUtil.createHashSet;\n import static java.util.Collections.singleton;\n \n public abstract class AbstractCollectionProxyImpl<S extends RemoteService, E> extends AbstractDistributedObject<S>\n-        implements InitializingObject {\n+        implements InitializingObject, ICollection<E> {", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java\nindex 7e497bc76b..49df5a4f42 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/AbstractCollectionProxyImpl.java\n\n@@ -44,24 +54,13 @@ import com.hazelcast.spi.impl.UnmodifiableLazyList;\n import com.hazelcast.spi.impl.eventservice.EventRegistration;\n import com.hazelcast.spi.impl.eventservice.EventService;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.Future;\n-\n-import javax.annotation.Nonnull;\n-\n import static com.hazelcast.internal.config.ConfigValidator.checkCollectionConfig;\n import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n import static com.hazelcast.internal.util.SetUtil.createHashSet;\n import static java.util.Collections.singleton;\n \n public abstract class AbstractCollectionProxyImpl<S extends RemoteService, E> extends AbstractDistributedObject<S>\n-        implements InitializingObject, ICollection<E> {\n+        implements InitializingObject {\n \n     protected final String name;\n     protected final int partitionId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NDczNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380164735", "bodyText": "Same comment as for MemberStateImpl.", "author": "blazember", "createdAt": "2020-02-17T12:53:20Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java", "diffHunk": "@@ -264,6 +268,10 @@ private void createMemState(MemberStateImpl memberState,\n                 count = handleMultimap(memberState, count, config, ((MultiMapService) service).getStats());\n             } else if (service instanceof QueueService) {\n                 count = handleQueue(memberState, count, config, ((QueueService) service).getStats());\n+            } else if (service instanceof ListService) {", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java b/hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java\nindex 4f3757fa3a..90029ace3c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/management/TimedMemberStateFactory.java\n\n@@ -268,10 +265,6 @@ public class TimedMemberStateFactory {\n                 count = handleMultimap(memberState, count, config, ((MultiMapService) service).getStats());\n             } else if (service instanceof QueueService) {\n                 count = handleQueue(memberState, count, config, ((QueueService) service).getStats());\n-            } else if (service instanceof ListService) {\n-                count = handleList(memberState, count, config, ((ListService) service).getStats());\n-            } else if (service instanceof SetService) {\n-                count = handleSet(memberState, count, config, ((SetService) service).getStats());\n             } else if (service instanceof TopicService) {\n                 count = handleTopic(memberState, count, config, ((TopicService) service).getStats());\n             } else if (service instanceof ReliableTopicService) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NTQ3MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380165471", "bodyText": "I'd separate and duplicate these as LIST_METRIC_* and SET_METRIC_* as they might evolve separately in the future.", "author": "blazember", "createdAt": "2020-02-17T12:55:05Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java", "diffHunk": "@@ -89,6 +89,15 @@\n     public static final String CLUSTER_METRIC_CLUSTER_SERVICE_SIZE = \"size\";\n     // ===[/CLUSTER]====================================================\n \n+    // ===[COLLECTION]=======================================================", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java b/hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java\nindex 8b8184e64f..67caa22838 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/metrics/MetricDescriptorConstants.java\n\n@@ -89,15 +89,6 @@ public final class MetricDescriptorConstants {\n     public static final String CLUSTER_METRIC_CLUSTER_SERVICE_SIZE = \"size\";\n     // ===[/CLUSTER]====================================================\n \n-    // ===[COLLECTION]=======================================================\n-    public static final String LIST_PREFIX = \"list\";\n-    public static final String SET_PREFIX = \"set\";\n-    public static final String COLLECTION_METRIC_LAST_ACCESS_TIME = \"lastAccessTime\";\n-    public static final String COLLECTION_METRIC_LAST_UPDATE_TIME = \"lastUpdateTime\";\n-    public static final String COLLECTION_METRIC_NUMBER_OF_HITS = \"numberOfHits\";\n-    public static final String COLLECTION_METRIC_CREATION_TIME = \"creationTime\";\n-    // ===[/COLLECTION]======================================================\n-\n     // ===[CP SUBSYSTEM]================================================\n     public static final String CP_PREFIX_RAFT = \"raft\";\n     public static final String CP_PREFIX_RAFT_GROUP = \"raft.group\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzY3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380167677", "bodyText": "You can add the ParallelJVMTest category as well.", "author": "blazember", "createdAt": "2020-02-17T12:59:44Z", "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl.list;\n+\n+import com.hazelcast.collection.IList;\n+import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java\nindex 7c2284a46f..b10fb26c51 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/list/ListStatisticsTest.java\n\n@@ -16,20 +16,21 @@\n \n package com.hazelcast.collection.impl.list;\n \n+import java.util.Arrays;\n+\n import com.hazelcast.collection.IList;\n import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n import com.hazelcast.core.HazelcastInstance;\n import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n \n-import java.util.Arrays;\n-\n @RunWith(HazelcastParallelClassRunner.class)\n-@Category(QuickTest.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n public class ListStatisticsTest extends AbstractCollectionStatisticsTest {\n \n     private IList<String> list;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2ODEzOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380168139", "bodyText": "You can add the ParallelJVMTest category as well.", "author": "blazember", "createdAt": "2020-02-17T13:00:39Z", "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl.set;\n+\n+import com.hazelcast.collection.ISet;\n+import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java\nindex 5a8b39284d..b41f07683d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/set/SetStatisticsTest.java\n\n@@ -16,20 +16,21 @@\n \n package com.hazelcast.collection.impl.set;\n \n+import java.util.Arrays;\n+\n import com.hazelcast.collection.ISet;\n import com.hazelcast.collection.impl.AbstractCollectionStatisticsTest;\n import com.hazelcast.core.HazelcastInstance;\n import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n \n-import java.util.Arrays;\n-\n @RunWith(HazelcastParallelClassRunner.class)\n-@Category(QuickTest.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n public class SetStatisticsTest extends AbstractCollectionStatisticsTest {\n \n     private ISet<String> set;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTI4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r380169288", "bodyText": "Maybe this should compare the deserialize against the localListStats for readability reasons?", "author": "blazember", "createdAt": "2020-02-17T13:03:14Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.util.Clock;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import static com.hazelcast.test.HazelcastTestSupport.assertBetween;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class LocalCollectionStatsImplTest {\n+\n+    @Test\n+    public void testDefaultConstructor() {\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+\n+        assertTrue(localListStats.getCreationTime() > 0);\n+        assertEquals(123456, localListStats.getLastUpdateTime());\n+        assertEquals(654321, localListStats.getLastAccessTime());\n+        assertEquals(1, localListStats.getNumberOfHits());\n+    }\n+\n+    @Test\n+    public void testCreationTime() {\n+        long beforeCreationTime = Clock.currentTimeMillis();\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+        long afterCreationTime = Clock.currentTimeMillis();\n+\n+        assertBetween(\"creationTime\", localListStats.getCreationTime(), beforeCreationTime, afterCreationTime);\n+    }\n+\n+    @Test\n+    public void testSerialization() {\n+        LocalCollectionStatsImpl localListStats = createTestStats();\n+\n+        JsonObject serialized = localListStats.toJson();\n+        LocalCollectionStatsImpl deserialized = new LocalCollectionStatsImpl();\n+        deserialized.fromJson(serialized);\n+\n+        assertTrue(localListStats.getCreationTime() > 0);\n+        assertEquals(123456, localListStats.getLastUpdateTime());", "originalCommit": "a11ea8170a53891ce8f6fcefdf7b24d05b6cf94d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImplTest.java b/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalListStatsImplTest.java\nsimilarity index 80%\nrename from hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImplTest.java\nrename to hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalListStatsImplTest.java\nindex ea97a44881..05c8e3bd41 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/LocalListStatsImplTest.java\n\n@@ -31,7 +31,7 @@ import static org.junit.Assert.assertTrue;\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n-public class LocalCollectionStatsImplTest {\n+public class LocalListStatsImplTest {\n \n     @Test\n     public void testDefaultConstructor() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTIyNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386951225", "bodyText": "I think this can be renamed to getLocalListStats().", "author": "blazember", "createdAt": "2020-03-03T11:12:52Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/IList.java", "diffHunk": "@@ -34,4 +34,14 @@\n  * @see List\n  */\n public interface IList<E> extends List<E>, ICollection<E> {\n+\n+\n+    /**\n+     * Returns {@link LocalListStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalListStats getLocalCollectionStats();", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/IList.java b/hazelcast/src/main/java/com/hazelcast/collection/IList.java\nindex 4e52190add..e92274ee38 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/IList.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/IList.java\n\n@@ -37,11 +37,11 @@ public interface IList<E> extends List<E>, ICollection<E> {\n \n \n     /**\n-     * Returns {@link LocalListStats} for this collection.\n+     * Returns {@link LocalCollectionStats} for this collection.\n      * LocalCollectionStats is the statistics for this collection.\n      *\n      * @return this collection's local statistics.\n      */\n-    LocalListStats getLocalCollectionStats();\n+    LocalCollectionStats getLocalCollectionStats();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTMyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386951328", "bodyText": "I think this can be renamed to getLocalSetStats().", "author": "blazember", "createdAt": "2020-03-03T11:13:04Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/ISet.java", "diffHunk": "@@ -37,4 +37,13 @@\n  * @see Set\n  */\n public interface ISet<E> extends Set<E>, ICollection<E> {\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.\n+     * LocalCollectionStats is the statistics for this collection.\n+     *\n+     * @return this collection's local statistics.\n+     */\n+    LocalSetStats getLocalCollectionStats();", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/ISet.java b/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\nindex 72c63bee37..e349eaf0fe 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\n\n@@ -44,6 +44,6 @@ public interface ISet<E> extends Set<E>, ICollection<E> {\n      *\n      * @return this collection's local statistics.\n      */\n-    LocalSetStats getLocalCollectionStats();\n+    LocalCollectionStats getLocalCollectionStats();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MjUzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386982538", "bodyText": "Could you please add the unit as well here and for all time fields? @Probe(name = LIST_METRIC_LAST_ACCESS_TIME, unit = MS).", "author": "blazember", "createdAt": "2020-03-03T12:20:05Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalListStatsImpl.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import com.hazelcast.collection.LocalListStats;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.metrics.Probe;\n+import com.hazelcast.internal.util.Clock;\n+\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_ACCESS_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_UPDATE_TIME;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+public class LocalListStatsImpl extends LocalCollectionStatsImpl implements LocalListStats {\n+\n+    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_ACCESS_TIME_UPDATER =\n+            newUpdater(LocalListStatsImpl.class, LAST_ACCESS_TIME);\n+    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_UPDATE_TIME_UPDATER =\n+            newUpdater(LocalListStatsImpl.class, LAST_UPDATE_TIME);\n+\n+    @Probe(name = LIST_METRIC_LAST_ACCESS_TIME)", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalListStatsImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalListStatsImpl.java\ndeleted file mode 100644\nindex 3e998fd82b..0000000000\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalListStatsImpl.java\n+++ /dev/null\n\n@@ -1,100 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.internal.monitor.impl;\n-\n-import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n-\n-import com.hazelcast.collection.LocalListStats;\n-import com.hazelcast.internal.json.JsonObject;\n-import com.hazelcast.internal.metrics.Probe;\n-import com.hazelcast.internal.util.Clock;\n-\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_CREATION_TIME;\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_ACCESS_TIME;\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.LIST_METRIC_LAST_UPDATE_TIME;\n-import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n-import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n-\n-public class LocalListStatsImpl extends LocalCollectionStatsImpl implements LocalListStats {\n-\n-    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_ACCESS_TIME_UPDATER =\n-            newUpdater(LocalListStatsImpl.class, LAST_ACCESS_TIME);\n-    protected static final AtomicLongFieldUpdater<LocalListStatsImpl> LAST_UPDATE_TIME_UPDATER =\n-            newUpdater(LocalListStatsImpl.class, LAST_UPDATE_TIME);\n-\n-    @Probe(name = LIST_METRIC_LAST_ACCESS_TIME)\n-    protected volatile long lastAccessTime;\n-    @Probe(name = LIST_METRIC_LAST_UPDATE_TIME)\n-    protected volatile long lastUpdateTime;\n-    @Probe(name = LIST_METRIC_CREATION_TIME)\n-    protected volatile long creationTime;\n-\n-    public LocalListStatsImpl() {\n-        creationTime = Clock.currentTimeMillis();\n-    }\n-\n-    @Override\n-    public long getLastAccessTime() {\n-        return lastAccessTime;\n-    }\n-\n-    @Override\n-    public void setLastAccessTime(long lastAccessTime) {\n-        setMax(this, LAST_ACCESS_TIME_UPDATER, lastAccessTime);\n-    }\n-\n-    @Override\n-    public long getLastUpdateTime() {\n-        return lastUpdateTime;\n-    }\n-\n-    @Override\n-    public void setLastUpdateTime(long lastUpdateTime) {\n-        setMax(this, LAST_UPDATE_TIME_UPDATER, lastUpdateTime);\n-    }\n-\n-    @Override\n-    public long getCreationTime() {\n-        return creationTime;\n-    }\n-\n-    @Override\n-    public JsonObject toJson() {\n-        JsonObject root = new JsonObject();\n-        root.add(LAST_ACCESS_TIME, lastAccessTime);\n-        root.add(LAST_UPDATE_TIME, lastUpdateTime);\n-        root.add(CREATION_TIME, creationTime);\n-        return root;\n-    }\n-\n-    @Override\n-    public void fromJson(JsonObject json) {\n-        LAST_ACCESS_TIME_UPDATER.set(this, json.getLong(LAST_ACCESS_TIME, -1));\n-        LAST_UPDATE_TIME_UPDATER.set(this, json.getLong(LAST_UPDATE_TIME, -1));\n-        creationTime = json.getLong(CREATION_TIME, -1);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"LocalListStatsImpl{\"\n-                + \"lastAccessTime=\" + lastAccessTime\n-                + \", lastUpdateTime=\" + lastUpdateTime\n-                + \", creationTime=\" + creationTime\n-                + '}';\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4Mjg4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386982885", "bodyText": "Same comment on the unit.", "author": "blazember", "createdAt": "2020-03-03T12:20:44Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalSetStatsImpl.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import com.hazelcast.collection.LocalSetStats;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.metrics.Probe;\n+import com.hazelcast.internal.util.Clock;\n+\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_ACCESS_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_UPDATE_TIME;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+public class LocalSetStatsImpl extends LocalCollectionStatsImpl implements LocalSetStats {\n+\n+    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_ACCESS_TIME_UPDATER =\n+            newUpdater(LocalSetStatsImpl.class, LAST_ACCESS_TIME);\n+    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_UPDATE_TIME_UPDATER =\n+            newUpdater(LocalSetStatsImpl.class, LAST_UPDATE_TIME);\n+\n+    @Probe(name = SET_METRIC_LAST_ACCESS_TIME)", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalSetStatsImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalSetStatsImpl.java\ndeleted file mode 100644\nindex cc20117665..0000000000\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalSetStatsImpl.java\n+++ /dev/null\n\n@@ -1,99 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.internal.monitor.impl;\n-\n-import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n-\n-import com.hazelcast.collection.LocalSetStats;\n-import com.hazelcast.internal.json.JsonObject;\n-import com.hazelcast.internal.metrics.Probe;\n-import com.hazelcast.internal.util.Clock;\n-\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_CREATION_TIME;\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_ACCESS_TIME;\n-import static com.hazelcast.internal.metrics.MetricDescriptorConstants.SET_METRIC_LAST_UPDATE_TIME;\n-import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n-import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n-\n-public class LocalSetStatsImpl extends LocalCollectionStatsImpl implements LocalSetStats {\n-\n-    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_ACCESS_TIME_UPDATER =\n-            newUpdater(LocalSetStatsImpl.class, LAST_ACCESS_TIME);\n-    protected static final AtomicLongFieldUpdater<LocalSetStatsImpl> LAST_UPDATE_TIME_UPDATER =\n-            newUpdater(LocalSetStatsImpl.class, LAST_UPDATE_TIME);\n-\n-    @Probe(name = SET_METRIC_LAST_ACCESS_TIME)\n-    protected volatile long lastAccessTime;\n-    @Probe(name = SET_METRIC_LAST_UPDATE_TIME)\n-    protected volatile long lastUpdateTime;\n-    @Probe(name = SET_METRIC_CREATION_TIME)\n-    protected volatile long creationTime;\n-\n-    public LocalSetStatsImpl() {\n-        creationTime = Clock.currentTimeMillis();\n-    }\n-\n-    @Override\n-    public long getLastAccessTime() {\n-        return lastAccessTime;\n-    }\n-\n-    @Override\n-    public void setLastAccessTime(long lastAccessTime) {\n-        setMax(this, LAST_ACCESS_TIME_UPDATER, lastAccessTime);\n-    }\n-\n-    @Override\n-    public long getLastUpdateTime() {\n-        return lastUpdateTime;\n-    }\n-\n-    @Override\n-    public void setLastUpdateTime(long lastUpdateTime) {\n-        setMax(this, LAST_UPDATE_TIME_UPDATER, lastUpdateTime);\n-    }\n-\n-    @Override\n-    public long getCreationTime() {\n-        return creationTime;\n-    }\n-\n-    @Override\n-    public JsonObject toJson() {\n-        JsonObject root = new JsonObject();\n-        root.add(LAST_ACCESS_TIME, lastAccessTime);\n-        root.add(LAST_UPDATE_TIME, lastUpdateTime);\n-        root.add(CREATION_TIME, creationTime);\n-        return root;\n-    }\n-\n-    @Override\n-    public void fromJson(JsonObject json) {\n-        LAST_ACCESS_TIME_UPDATER.set(this, json.getLong(LAST_ACCESS_TIME, -1));\n-        LAST_UPDATE_TIME_UPDATER.set(this, json.getLong(LAST_UPDATE_TIME, -1));\n-        creationTime = json.getLong(CREATION_TIME, -1);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"LocalListStatsImpl{\"\n-                + \"lastAccessTime=\" + lastAccessTime\n-                + \", lastUpdateTime=\" + lastUpdateTime\n-                + \", creationTime=\" + creationTime\n-                + '}';\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4Mzc3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386983770", "bodyText": "I think the changes in this file can be reverted entirely.", "author": "blazember", "createdAt": "2020-03-03T12:22:25Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java", "diffHunk": "@@ -16,6 +16,14 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n+import java.net.UnknownHostException;", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\nindex f89fee8fda..e4c00209f5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/MemberStateImpl.java\n\n@@ -16,15 +16,8 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n-import java.net.UnknownHostException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.UUID;\n-\n import com.hazelcast.cluster.Address;\n+import com.hazelcast.collection.LocalCollectionStats;\n import com.hazelcast.collection.LocalQueueStats;\n import com.hazelcast.executor.LocalExecutorStats;\n import com.hazelcast.instance.EndpointQualifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk5MDY3MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r386990671", "bodyText": "This can be reverted as well.", "author": "blazember", "createdAt": "2020-03-03T12:36:27Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java", "diffHunk": "@@ -16,13 +16,23 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n+import java.net.UnknownHostException;", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java b/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java\nindex 4932360c5d..fdd01c86b8 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/monitor/impl/MemberStateImplTest.java\n\n@@ -16,15 +16,6 @@\n \n package com.hazelcast.internal.monitor.impl;\n \n-import java.net.UnknownHostException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.UUID;\n-\n import com.hazelcast.cache.impl.CacheStatisticsImpl;\n import com.hazelcast.cluster.Address;\n import com.hazelcast.cluster.ClusterState;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODY2Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387008666", "bodyText": "Maybe this class should be renamed to AbstractLocalCollectionStats.", "author": "blazember", "createdAt": "2020-03-03T13:12:15Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.monitor.impl;\n+\n+import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.json.internal.JsonSerializable;\n+\n+public abstract class LocalCollectionStatsImpl implements LocalCollectionStats, JsonSerializable {", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5MDc0NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389390744", "bodyText": "Oops, I must've missed it during the refactor. Thanks for pointing that out!", "author": "aberkecz", "createdAt": "2020-03-08T17:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java\nindex ed11f2ca76..51cb3cd083 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/monitor/impl/LocalCollectionStatsImpl.java\n\n@@ -17,19 +17,104 @@\n package com.hazelcast.internal.monitor.impl;\n \n import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.internal.json.JsonObject;\n+import com.hazelcast.internal.metrics.Probe;\n+import com.hazelcast.internal.util.Clock;\n import com.hazelcast.json.internal.JsonSerializable;\n \n-public abstract class LocalCollectionStatsImpl implements LocalCollectionStats, JsonSerializable {\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.COLLECTION_METRIC_CREATION_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.COLLECTION_METRIC_LAST_ACCESS_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.COLLECTION_METRIC_LAST_UPDATE_TIME;\n+import static com.hazelcast.internal.metrics.MetricDescriptorConstants.COLLECTION_METRIC_NUMBER_OF_HITS;\n+import static com.hazelcast.internal.util.ConcurrencyUtil.setMax;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n+\n+public class LocalCollectionStatsImpl implements LocalCollectionStats, JsonSerializable {\n \n     public static final String LAST_ACCESS_TIME = \"lastAccessTime\";\n     public static final String LAST_UPDATE_TIME = \"lastUpdateTime\";\n+    public static final String NUMBER_OF_HITS = \"numberOfHits\";\n     public static final String CREATION_TIME = \"creationTime\";\n \n-    protected LocalCollectionStatsImpl() {\n+    private static final AtomicLongFieldUpdater<LocalCollectionStatsImpl> LAST_ACCESS_TIME_UPDATER =\n+            newUpdater(LocalCollectionStatsImpl.class, LAST_ACCESS_TIME);\n+    private static final AtomicLongFieldUpdater<LocalCollectionStatsImpl> LAST_UPDATE_TIME_UPDATER =\n+            newUpdater(LocalCollectionStatsImpl.class, LAST_UPDATE_TIME);\n+    private static final AtomicLongFieldUpdater<LocalCollectionStatsImpl> NUMBER_OF_HITS_UPDATER =\n+            newUpdater(LocalCollectionStatsImpl.class, NUMBER_OF_HITS);\n+\n+    @Probe(name = COLLECTION_METRIC_LAST_ACCESS_TIME)\n+    private volatile long lastAccessTime;\n+    @Probe(name = COLLECTION_METRIC_LAST_UPDATE_TIME)\n+    private volatile long lastUpdateTime;\n+    @Probe(name = COLLECTION_METRIC_NUMBER_OF_HITS)\n+    private volatile long numberOfHits;\n+    @Probe(name = COLLECTION_METRIC_CREATION_TIME)\n+    private volatile long creationTime;\n+\n+    public LocalCollectionStatsImpl() {\n+        creationTime = Clock.currentTimeMillis();\n     }\n \n-    public abstract void setLastAccessTime(long lastAccessTime);\n+    @Override\n+    public long getLastAccessTime() {\n+        return lastAccessTime;\n+    }\n \n-    public abstract void setLastUpdateTime(long lastUpdateTime);\n+    public void setLastAccessTime(long lastAccessTime) {\n+        setMax(this, LAST_ACCESS_TIME_UPDATER, lastAccessTime);\n+    }\n \n+    @Override\n+    public long getLastUpdateTime() {\n+        return lastUpdateTime;\n+    }\n+\n+    public void setLastUpdateTime(long lastUpdateTime) {\n+        setMax(this, LAST_UPDATE_TIME_UPDATER, lastUpdateTime);\n+    }\n+\n+    @Override\n+    public long getNumberOfHits() {\n+        return numberOfHits;\n+    }\n+\n+    public void incrementNumberOfHits() {\n+        NUMBER_OF_HITS_UPDATER.incrementAndGet(this);\n+    }\n+\n+    @Override\n+    public long getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    @Override\n+    public JsonObject toJson() {\n+        JsonObject root = new JsonObject();\n+        root.add(LAST_ACCESS_TIME, lastAccessTime);\n+        root.add(LAST_UPDATE_TIME, lastUpdateTime);\n+        root.add(NUMBER_OF_HITS, numberOfHits);\n+        root.add(CREATION_TIME, creationTime);\n+        return root;\n+    }\n+\n+    @Override\n+    public void fromJson(JsonObject json) {\n+        LAST_ACCESS_TIME_UPDATER.set(this, json.getLong(LAST_ACCESS_TIME, -1));\n+        LAST_UPDATE_TIME_UPDATER.set(this, json.getLong(LAST_UPDATE_TIME, -1));\n+        NUMBER_OF_HITS_UPDATER.set(this, json.getLong(NUMBER_OF_HITS, -1));\n+        creationTime = json.getLong(CREATION_TIME, -1);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"LocalListStatsImpl{\"\n+                + \"lastAccessTime=\" + lastAccessTime\n+                + \", lastUpdateTime=\" + lastUpdateTime\n+                + \", numberOfHits=\" + numberOfHits\n+                + \", creationTime=\" + creationTime\n+                + '}';\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTA5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387029092", "bodyText": "This and the constructor function can be moved to the actual list and set implementations and then no need for the casts in them. I think only getLocalCollectionStats() is needed here.", "author": "blazember", "createdAt": "2020-03-03T13:48:15Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java", "diffHunk": "@@ -65,6 +68,9 @@\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n+    protected ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>();", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\nindex 9876c952e8..542956cbd2 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/impl/collection/CollectionService.java\n\n@@ -58,18 +51,29 @@ import com.hazelcast.spi.impl.operationservice.OperationService;\n import com.hazelcast.spi.merge.SplitBrainMergePolicy;\n import com.hazelcast.spi.merge.SplitBrainMergeTypes.CollectionMergeTypes;\n \n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n import static com.hazelcast.spi.impl.merge.MergingValueFactory.createMergingValue;\n \n public abstract class CollectionService implements ManagedService, RemoteService, EventPublishingService<CollectionEvent,\n         ItemListener<Data>>, TransactionalService, MigrationAwareService, SplitBrainProtectionAwareService,\n-        SplitBrainHandlerService {\n+        SplitBrainHandlerService, StatisticsAwareService<LocalCollectionStats> {\n \n     protected final NodeEngine nodeEngine;\n     protected final SerializationService serializationService;\n     protected final IPartitionService partitionService;\n \n-    protected ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>();\n-    protected ConstructorFunction<String, LocalCollectionStatsImpl> localCollectionStatsConstructorFunction;\n+    private final ConcurrentMap<String, LocalCollectionStatsImpl> statsMap = new ConcurrentHashMap<>(1000);\n+    private final ConstructorFunction<String, LocalCollectionStatsImpl> localListStatsConstructorFunction =\n+            key -> new LocalCollectionStatsImpl();\n \n     private final ILogger logger;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387046248", "bodyText": "Do we need the assertTrueEventually() in these methods? In the concrete tests a reference is obtained to the stats instance, which means, by the time the operations return the stats instance is updated.", "author": "blazember", "createdAt": "2020-03-03T14:15:31Z", "path": "hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.collection.impl;\n+\n+import com.hazelcast.collection.LocalCollectionStats;\n+import com.hazelcast.test.HazelcastTestSupport;\n+\n+import static java.lang.String.format;\n+import static org.junit.Assert.assertTrue;\n+\n+public abstract class AbstractCollectionStatisticsTest extends HazelcastTestSupport {\n+\n+    protected LocalCollectionStats localCollectionStats;\n+\n+    protected long previousAccessTime;\n+    protected long previousUpdateTime;\n+    protected long previousNumberOfHits;\n+\n+    protected void assertNewLastAccessTime() {\n+        assertTrueEventually(() -> {\n+            long lastAccessTime = localCollectionStats.getLastAccessTime();\n+            assertTrue(format(\"Expected the lastAccessTime %d to be higher than the previousAccessTime %d (diff: %d ms)\",\n+                    lastAccessTime, previousAccessTime, lastAccessTime - previousAccessTime),\n+                    lastAccessTime > previousAccessTime);\n+            previousAccessTime = lastAccessTime;\n+        });\n+    }\n+\n+    protected void assertSameLastUpdateTime() {\n+        assertTrueEventually(() -> {\n+            long lastUpdateTime = localCollectionStats.getLastUpdateTime();", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5ODYyMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389398620", "bodyText": "I tried removing the assertTrueEventually block but the tests failed then. I don't fully understand why is it like that but I originally I did it this way because I went by the QueueStatisticsTest class.\nShall I do a deeper investigation on this?", "author": "aberkecz", "createdAt": "2020-03-08T19:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2NjQ0OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389566448", "bodyText": "No, ignore this comment, assertTrueEventually() is needed in the other methods. In this assertSameLastUpdateTime method though it doesn't add any value, and it isn't even enough for catching an unwanted update. This is because there is nothing to create a happens-before with. Here either assertTrueAllTheTime() can be used or the operation with the same parameters and the assertNewLastAccessTime(); check can be doubled - in all tests calling this method -, like in this example:\n// we double the operation - with the same parameter - and the last access time check\n// so that we can be sure that assertSameLastUpdateTime() sees an unwanted update\n// at least from the first operation\nlist.contains(\"element1\");\nassertNewLastAccessTime();\nlist.contains(\"element1\");\nassertNewLastAccessTime();\nassertSameLastUpdateTime();\n\nNeither is perfect, but the latter doesn't force the test runner to halt for a longer time with every check.", "author": "blazember", "createdAt": "2020-03-09T10:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NzM5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r392597390", "bodyText": "I'm not sure I fully understand your proposition. In the ListStatisticsTest class I check and save the lastUpdateTime after each operation. For example, before I test the list.contains(o) method, I save the previous updateTime (after testing the `list.get(0) method).\nI suppose this check is not sufficient enough but I don't understand why. :(\n(I am happy to make the changes you requested but wanted to ask for some clarification so I fully understand what's happening.)", "author": "aberkecz", "createdAt": "2020-03-14T15:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2Mzc3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r393663770", "bodyText": "@aberkecz Sorry, I missed this question. The reason for the need for the assertTrueEventually() - let's take the test code snippet from my previous comment - is that by the time the list.contains() call returns, the operation's afterRun() might not be executed or completed (might run in parallel with the test's thread). You can check the reason here, note the order of sending the result and the call of afterRun(): \n  \n    \n      hazelcast/hazelcast/src/main/java/com/hazelcast/spi/impl/operationservice/impl/OperationRunnerImpl.java\n    \n    \n        Lines 232 to 242\n      in\n      296aac5\n    \n    \n    \n    \n\n        \n          \n           int backupAcks = backupHandler.sendBackups(op); \n        \n\n        \n          \n           Object response = op.getResponse(); \n        \n\n        \n          \n           if (backupAcks > 0) { \n        \n\n        \n          \n               response = new NormalResponse(response, op.getCallId(), backupAcks, op.isUrgent()); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           try { \n        \n\n        \n          \n               op.sendResponse(response); \n        \n\n        \n          \n           } catch (ResponseAlreadySentException e) { \n        \n\n        \n          \n               logOperationError(op, e); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           afterRun(op); \n        \n    \n  \n\n Therefore, you can observe the change in the lastAccessTime only eventually. But since you don't expect any change for lastUpdateTime, the only way to tell for sure that no update happened to that field is if you order your assertion after the completion of the afterRun(). Apparently, there is nothing in the stats object that you can use for ordering the assertion with, so you need to perform two calls with the same arguments. The Hazelcast infrastructure takes care of that the two calls run sequentially, therefore, by the time the second call returns, the effect of the first call's afterRun() is visible, making it safe to assert on lastUpdateTime.", "author": "blazember", "createdAt": "2020-03-17T13:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNTAzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r394605031", "bodyText": "Thanks @blazember for the detailed explanation! Now it's perfectly clear for me. The missing part for me was the fact that the afterRun method runs asynchronously. Let me fix the tests and get back to you ASAP.", "author": "aberkecz", "createdAt": "2020-03-18T19:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java\nindex 1d237cda9e..709cb6c132 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/AbstractCollectionStatisticsTest.java\n\n@@ -20,6 +20,7 @@ import com.hazelcast.collection.LocalCollectionStats;\n import com.hazelcast.test.HazelcastTestSupport;\n \n import static java.lang.String.format;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n public abstract class AbstractCollectionStatisticsTest extends HazelcastTestSupport {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MjQ2Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r387072462", "bodyText": "This can be reverted.", "author": "blazember", "createdAt": "2020-03-03T14:52:45Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java", "diffHunk": "@@ -16,21 +16,21 @@\n \n package com.hazelcast.internal.monitor;\n \n+import java.util.Collection;", "originalCommit": "deed884ccd91b5803539a59a9378f888760d759d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java b/hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java\nindex 57a695db9f..caa8d5dc69 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/monitor/MemberState.java\n\n@@ -16,10 +16,7 @@\n \n package com.hazelcast.internal.monitor;\n \n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.UUID;\n-\n+import com.hazelcast.collection.LocalCollectionStats;\n import com.hazelcast.collection.LocalQueueStats;\n import com.hazelcast.executor.LocalExecutorStats;\n import com.hazelcast.internal.management.dto.ClientEndPointDTO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NzUzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r389547538", "bodyText": "This remained LocalCollectionStats.\nDo we need the second line though? Same question for the IList counterpart.", "author": "blazember", "createdAt": "2020-03-09T09:35:50Z", "path": "hazelcast/src/main/java/com/hazelcast/collection/ISet.java", "diffHunk": "@@ -37,4 +37,13 @@\n  * @see Set\n  */\n public interface ISet<E> extends Set<E>, ICollection<E> {\n+\n+    /**\n+     * Returns {@link LocalCollectionStats} for this collection.", "originalCommit": "fb0ae680b4e7b2b1e528dff4026c1674f8b40f4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTc0MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16665#discussion_r392595740", "bodyText": "You're absolutely right. The second line doesn't really provide any additional information so I deleted them both in the IList and ISet interfaces.", "author": "aberkecz", "createdAt": "2020-03-14T15:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0NzUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/collection/ISet.java b/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\nindex 84557a0923..e349eaf0fe 100644\n--- a/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\n+++ b/hazelcast/src/main/java/com/hazelcast/collection/ISet.java\n\n@@ -44,6 +44,6 @@ public interface ISet<E> extends Set<E>, ICollection<E> {\n      *\n      * @return this collection's local statistics.\n      */\n-    LocalSetStats getLocalSetStats();\n+    LocalCollectionStats getLocalCollectionStats();\n \n }\n"}}, {"oid": "87cd6eec29726f8515d341a59e0de4ae86d6eb47", "url": "https://github.com/hazelcast/hazelcast/commit/87cd6eec29726f8515d341a59e0de4ae86d6eb47", "message": "Define metrics for ISet and IList collections (#3823)", "committedDate": "2020-03-27T11:16:18Z", "type": "commit"}, {"oid": "14a6e64c2aa58e2045390d4d4c67755d69305be6", "url": "https://github.com/hazelcast/hazelcast/commit/14a6e64c2aa58e2045390d4d4c67755d69305be6", "message": "Remove `initialCapacity` argument from `statsMap`'s constructor to save heap size", "committedDate": "2020-03-27T11:16:18Z", "type": "commit"}, {"oid": "4f9af546c19d68c24cb7ed929389b92bed866dc4", "url": "https://github.com/hazelcast/hazelcast/commit/4f9af546c19d68c24cb7ed929389b92bed866dc4", "message": "Perform fixes after code review\n\nAdd stats to `DistributedDatastructuresMetricsTest`\nIntroduce separate statistics for `IList` and `ISet`\nRemove `numberOfHits` metric from `IList` and `ISet`\nRevert modifications in `MemberStateImpl` and `TimedMemberStateFactory`\nIntroduce separate `MetricDescriptorConstants` for `IList` and `ISet`\nAdd the `ParallelJVMTest` category to newly introduced test classes", "committedDate": "2020-03-27T11:17:04Z", "type": "commit"}, {"oid": "9798932b8bc0d6f31fd0d8292af78ea6fe89c0b2", "url": "https://github.com/hazelcast/hazelcast/commit/9798932b8bc0d6f31fd0d8292af78ea6fe89c0b2", "message": "Implement changes recommended during the the code review process\n\nDetails: https://github.com/hazelcast/hazelcast/pull/16665#pullrequestreview-367892255", "committedDate": "2020-03-27T11:17:04Z", "type": "commit"}, {"oid": "0795b87e6a90fcde5b4270f30f0b311755f7c746", "url": "https://github.com/hazelcast/hazelcast/commit/0795b87e6a90fcde5b4270f30f0b311755f7c746", "message": "Clarify JavaDoc for `getLocalListStats` and `getLocalSetStats` methods in `IList` and `ISet`", "committedDate": "2020-03-27T11:17:04Z", "type": "commit"}, {"oid": "291112530117ffbfc08843ef91a71c221fe86542", "url": "https://github.com/hazelcast/hazelcast/commit/291112530117ffbfc08843ef91a71c221fe86542", "message": "Fix checkstyle-reported bugs", "committedDate": "2020-03-27T11:17:05Z", "type": "commit"}, {"oid": "218dde15ab5f80443f20c1c9b25782e0fedeed2e", "url": "https://github.com/hazelcast/hazelcast/commit/218dde15ab5f80443f20c1c9b25782e0fedeed2e", "message": "Fix asserting for non-modified `lastUpdateTime` metric values in `ListStatisticsTest` and `SetStatisticsSet` test classes", "committedDate": "2020-03-27T11:17:05Z", "type": "commit"}, {"oid": "68eace6343ba43c75d9c447706d110a18f5ca14c", "url": "https://github.com/hazelcast/hazelcast/commit/68eace6343ba43c75d9c447706d110a18f5ca14c", "message": "Introduce wait time between doubled operations to assure that the `lastAccessTime` metrics differ in these cases", "committedDate": "2020-03-27T11:17:05Z", "type": "commit"}, {"oid": "68eace6343ba43c75d9c447706d110a18f5ca14c", "url": "https://github.com/hazelcast/hazelcast/commit/68eace6343ba43c75d9c447706d110a18f5ca14c", "message": "Introduce wait time between doubled operations to assure that the `lastAccessTime` metrics differ in these cases", "committedDate": "2020-03-27T11:17:05Z", "type": "forcePushed"}]}