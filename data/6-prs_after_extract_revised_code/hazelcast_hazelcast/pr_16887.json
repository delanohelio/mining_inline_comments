{"pr_number": 16887, "pr_title": "Add support for processing WAN replication messages from 3.x members", "pr_createdAt": "2020-04-14T15:43:22Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16887", "timeline": [{"oid": "2cc5e6ab0db103ef9ef78a52e1ecdd60d9a34470", "url": "https://github.com/hazelcast/hazelcast/commit/2cc5e6ab0db103ef9ef78a52e1ecdd60d9a34470", "message": "wip", "committedDate": "2020-05-06T10:27:12Z", "type": "forcePushed"}, {"oid": "ab40da62f9cbf199d0e7e96ce924162a9f4c971f", "url": "https://github.com/hazelcast/hazelcast/commit/ab40da62f9cbf199d0e7e96ce924162a9f4c971f", "message": "wip", "committedDate": "2020-05-11T11:12:55Z", "type": "forcePushed"}, {"oid": "cdf8f2e68b85fba247b7e25fe5df414e38c0d9c7", "url": "https://github.com/hazelcast/hazelcast/commit/cdf8f2e68b85fba247b7e25fe5df414e38c0d9c7", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-11T13:01:12Z", "type": "forcePushed"}, {"oid": "1a71ca7b7ec2917a7d0f86d747291f10a2e373fd", "url": "https://github.com/hazelcast/hazelcast/commit/1a71ca7b7ec2917a7d0f86d747291f10a2e373fd", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-11T13:43:16Z", "type": "forcePushed"}, {"oid": "cff19cdad480d67298db53d80263fa5efa0c807e", "url": "https://github.com/hazelcast/hazelcast/commit/cff19cdad480d67298db53d80263fa5efa0c807e", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-13T12:02:19Z", "type": "forcePushed"}, {"oid": "cff19cdad480d67298db53d80263fa5efa0c807e", "url": "https://github.com/hazelcast/hazelcast/commit/cff19cdad480d67298db53d80263fa5efa0c807e", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-13T12:02:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMzY3NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r427333674", "bodyText": "Not a big thing, but it seems the constants other than DEFAULT_CACHE_ENTRY_VIEW can be removed.", "author": "blazember", "createdAt": "2020-05-19T14:12:52Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/compatibility/cache/CompatibilityCacheDataSerializerHook.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.compatibility.cache;\n+\n+import com.hazelcast.internal.compatibility.serialization.impl.CompatibilityFactoryIdHelper;\n+import com.hazelcast.internal.serialization.DataSerializerHook;\n+import com.hazelcast.nio.serialization.DataSerializableFactory;\n+\n+import static com.hazelcast.internal.compatibility.serialization.impl.CompatibilityFactoryIdHelper.CACHE_DS_FACTORY;\n+import static com.hazelcast.internal.compatibility.serialization.impl.CompatibilityFactoryIdHelper.CACHE_DS_FACTORY_ID;\n+\n+\n+/**\n+ * Data serializer hook containing (de)serialization information for\n+ * JCache-related classes used when communicating with 3.x members over WAN.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class CompatibilityCacheDataSerializerHook\n+        implements DataSerializerHook {\n+\n+    public static final int F_ID = CompatibilityFactoryIdHelper.getFactoryId(\n+            CACHE_DS_FACTORY, CACHE_DS_FACTORY_ID);\n+    public static final short GET = 1;\n+    public static final short CONTAINS_KEY = 2;\n+    public static final short PUT = 3;\n+    public static final short PUT_IF_ABSENT = 4;\n+    public static final short REMOVE = 5;\n+    public static final short GET_AND_REMOVE = 6;\n+    public static final short REPLACE = 7;\n+    public static final short GET_AND_REPLACE = 8;\n+    public static final short PUT_BACKUP = 9;\n+    public static final short PUT_ALL_BACKUP = 10;\n+    public static final short REMOVE_BACKUP = 11;\n+    public static final short CLEAR_BACKUP = 12;\n+    public static final short SIZE = 13;\n+    public static final short SIZE_FACTORY = 14;\n+    public static final short CLEAR = 15;\n+    public static final short CLEAR_FACTORY = 16;\n+    public static final short GET_ALL = 17;\n+    public static final short GET_ALL_FACTORY = 18;\n+    public static final short LOAD_ALL = 19;\n+    public static final short LOAD_ALL_FACTORY = 20;\n+    public static final short EXPIRY_POLICY = 21;\n+    public static final short KEY_ITERATOR = 22;\n+    public static final short KEY_ITERATION_RESULT = 23;\n+    public static final short ENTRY_PROCESSOR = 24;\n+    public static final short CLEAR_RESPONSE = 25;\n+    public static final short CREATE_CONFIG = 26;\n+    public static final short GET_CONFIG = 27;\n+    public static final short MANAGEMENT_CONFIG = 28;\n+    public static final short LISTENER_REGISTRATION = 29;\n+    public static final short DESTROY_CACHE = 30;\n+    public static final short CACHE_EVENT_DATA = 31;\n+    public static final short CACHE_EVENT_DATA_SET = 32;\n+    public static final short BACKUP_ENTRY_PROCESSOR = 33;\n+    public static final short REMOVE_ALL = 34;\n+    public static final short REMOVE_ALL_BACKUP = 35;\n+    public static final short REMOVE_ALL_FACTORY = 36;\n+    public static final short PUT_ALL = 37;\n+    public static final short LEGACY_MERGE = 38;\n+    public static final short INVALIDATION_MESSAGE = 39;\n+    public static final short BATCH_INVALIDATION_MESSAGE = 40;\n+    public static final short ENTRY_ITERATOR = 41;\n+    public static final short ENTRY_ITERATION_RESULT = 42;\n+    public static final short CACHE_PARTITION_LOST_EVENT_FILTER = 43;\n+    public static final short DEFAULT_CACHE_ENTRY_VIEW = 44;\n+    public static final short CACHE_REPLICATION = 45;\n+    public static final short CACHE_POST_JOIN = 46;\n+    public static final short CACHE_DATA_RECORD = 47;\n+    public static final short CACHE_OBJECT_RECORD = 48;\n+    public static final short CACHE_PARTITION_EVENT_DATA = 49;\n+\n+    public static final short CACHE_INVALIDATION_METADATA = 50;\n+    public static final short CACHE_INVALIDATION_METADATA_RESPONSE = 51;\n+    public static final short CACHE_ASSIGN_AND_GET_UUIDS = 52;\n+    public static final short CACHE_ASSIGN_AND_GET_UUIDS_FACTORY = 53;\n+    public static final short CACHE_NEAR_CACHE_STATE_HOLDER = 54;\n+    public static final short CACHE_EVENT_LISTENER_ADAPTOR = 55;\n+    public static final short EVENT_JOURNAL_SUBSCRIBE_OPERATION = 56;\n+    public static final short EVENT_JOURNAL_READ_OPERATION = 57;\n+    public static final short EVENT_JOURNAL_DESERIALIZING_CACHE_EVENT = 58;\n+    public static final short EVENT_JOURNAL_INTERNAL_CACHE_EVENT = 59;\n+    public static final short EVENT_JOURNAL_READ_RESULT_SET = 60;\n+    public static final int PRE_JOIN_CACHE_CONFIG = 61;\n+    public static final int CACHE_BROWSER_ENTRY_VIEW = 62;\n+    public static final int GET_CACHE_ENTRY_VIEW_PROCESSOR = 63;\n+\n+    public static final int MERGE_FACTORY = 64;\n+    public static final int MERGE = 65;\n+    public static final int ADD_CACHE_CONFIG_OPERATION = 66;\n+    public static final int SET_EXPIRY_POLICY = 67;\n+    public static final int SET_EXPIRY_POLICY_BACKUP = 68;\n+    public static final int EXPIRE_BATCH_BACKUP = 69;\n+    public static final int CACHE_DESTROY_EVENT_CONTEXT = 70;", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MTIyMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429171220", "bodyText": "Yeah, I could not decide if I should remove ALL unused constants or leave them, in all of the factories and helper classes. I guess I left them in case I needed them in the future when I would discover I forgot to cover some edge case.", "author": "mmedenjak", "createdAt": "2020-05-22T10:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMzY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4Mzg4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429983883", "bodyText": "Done, removed all unused constants in a separate commit.", "author": "mmedenjak", "createdAt": "2020-05-25T15:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMzY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/compatibility/cache/CompatibilityCacheDataSerializerHook.java b/hazelcast/src/main/java/com/hazelcast/internal/compatibility/cache/CompatibilityCacheDataSerializerHook.java\nindex 4081eb66018..d3c137000c9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/compatibility/cache/CompatibilityCacheDataSerializerHook.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/compatibility/cache/CompatibilityCacheDataSerializerHook.java\n\n@@ -28,7 +28,6 @@ import static com.hazelcast.internal.compatibility.serialization.impl.Compatibil\n  * Data serializer hook containing (de)serialization information for\n  * JCache-related classes used when communicating with 3.x members over WAN.\n  */\n-@SuppressWarnings(\"unused\")\n public final class CompatibilityCacheDataSerializerHook\n         implements DataSerializerHook {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjQ3NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428062475", "bodyText": "Minor suggestion: we can create constructors that hide the false compatibility flag so that we have to touch only places where using the given classes in \"compatibility mode\" is possible.", "author": "blazember", "createdAt": "2020-05-20T14:33:47Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/serialization/impl/ByteArraySerializerAdapterTest.java", "diffHunk": "@@ -61,7 +61,7 @@ public void testAdaptor() throws Exception {\n         byte[] testByteArray = new byte[]{1, 2, 3};\n \n         ByteArrayObjectDataOutput out = new ByteArrayObjectDataOutput(10, mockSerializationService, ByteOrder.BIG_ENDIAN);\n-        ByteArrayObjectDataInput in = new ByteArrayObjectDataInput(out.buffer, mockSerializationService, ByteOrder.BIG_ENDIAN);\n+        ByteArrayObjectDataInput in = new ByteArrayObjectDataInput(out.buffer, mockSerializationService, ByteOrder.BIG_ENDIAN, false);", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MTY2Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429171662", "bodyText": "Sure, I guess I preferred all code to be explicit about what they want but avoiding unnecessary changes works fine too :)", "author": "mmedenjak", "createdAt": "2020-05-22T10:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NDAzMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429984030", "bodyText": "Done, added new constructors so that all of the existing code is unaffected.", "author": "mmedenjak", "createdAt": "2020-05-25T15:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/serialization/impl/ByteArraySerializerAdapterTest.java b/hazelcast/src/test/java/com/hazelcast/internal/serialization/impl/ByteArraySerializerAdapterTest.java\nindex 27a630c0335..42771d4baeb 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/serialization/impl/ByteArraySerializerAdapterTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/serialization/impl/ByteArraySerializerAdapterTest.java\n\n@@ -61,7 +61,7 @@ public class ByteArraySerializerAdapterTest {\n         byte[] testByteArray = new byte[]{1, 2, 3};\n \n         ByteArrayObjectDataOutput out = new ByteArrayObjectDataOutput(10, mockSerializationService, ByteOrder.BIG_ENDIAN);\n-        ByteArrayObjectDataInput in = new ByteArrayObjectDataInput(out.buffer, mockSerializationService, ByteOrder.BIG_ENDIAN, false);\n+        ByteArrayObjectDataInput in = new ByteArrayObjectDataInput(out.buffer, mockSerializationService, ByteOrder.BIG_ENDIAN);\n         adapter.write(out, testByteArray);\n         byte[] read = (byte[]) adapter.read(in);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4NTcxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428085716", "bodyText": "Is this intentionally CHM?", "author": "blazember", "createdAt": "2020-05-20T15:02:51Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastStarterUtils.java", "diffHunk": "@@ -202,4 +249,22 @@ public static void assertInstanceOfByClassName(String className, Object object)\n             throw new UnsupportedOperationException(\"Cannot locate collection type for \" + type);\n         }\n     }\n+\n+    public static Map<Object, Object> newMapFor(Class<?> type) {\n+        if (LinkedHashMap.class.isAssignableFrom(type)) {\n+            return new LinkedHashMap<Object, Object>();\n+        } else if (ConcurrentSkipListMap.class.isAssignableFrom(type)) {\n+            return new ConcurrentSkipListMap<Object, Object>();\n+        } else if (ConcurrentHashMap.class.isAssignableFrom(type)) {\n+            return new ConcurrentHashMap<Object, Object>();\n+        } else if (TreeMap.class.isAssignableFrom(type)) {\n+            return new TreeMap<Object, Object>();\n+        } else if (HashMap.class.isAssignableFrom(type)) {\n+            return new HashMap<Object, Object>();\n+        } else if (Map.class.isAssignableFrom(type)) {\n+            return new ConcurrentHashMap<Object, Object>();", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MjMwOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429172308", "bodyText": "I think I copied that one from the previous compatibility code, not sure what's the reason behind it but I guess it was just trying to be on the safe side - if we still haven't figured out which map the user is sending across classloaders, better make it a thread-safe map in case it's going to be used from different threads. Later I added the cases for specific implementations so this clause is probably going to be a lot less used.", "author": "mmedenjak", "createdAt": "2020-05-22T10:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4NTcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastStarterUtils.java b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastStarterUtils.java\nindex 9ded122a98a..e7a1ac16a08 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastStarterUtils.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastStarterUtils.java\n\n@@ -249,22 +202,4 @@ public class HazelcastStarterUtils {\n             throw new UnsupportedOperationException(\"Cannot locate collection type for \" + type);\n         }\n     }\n-\n-    public static Map<Object, Object> newMapFor(Class<?> type) {\n-        if (LinkedHashMap.class.isAssignableFrom(type)) {\n-            return new LinkedHashMap<Object, Object>();\n-        } else if (ConcurrentSkipListMap.class.isAssignableFrom(type)) {\n-            return new ConcurrentSkipListMap<Object, Object>();\n-        } else if (ConcurrentHashMap.class.isAssignableFrom(type)) {\n-            return new ConcurrentHashMap<Object, Object>();\n-        } else if (TreeMap.class.isAssignableFrom(type)) {\n-            return new TreeMap<Object, Object>();\n-        } else if (HashMap.class.isAssignableFrom(type)) {\n-            return new HashMap<Object, Object>();\n-        } else if (Map.class.isAssignableFrom(type)) {\n-            return new ConcurrentHashMap<Object, Object>();\n-        } else {\n-            throw new UnsupportedOperationException(\"Cannot locate collection type for \" + type);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MDQ5Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428650493", "bodyText": "minor: rephrase error message?", "author": "vbekiaris", "createdAt": "2020-05-21T13:28:19Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/ReflectionUtils.java", "diffHunk": "@@ -176,6 +198,55 @@ public static void setFieldValueReflectively(Object arg, String fieldName, Objec\n         return fields;\n     }\n \n+    /**\n+     * Returns {@code true} if the provided {@code clazz} has a declared field\n+     * with the provided {@code name}.\n+     *\n+     * @param clazz     the class to check\n+     * @param fieldName the field name to check\n+     * @return {@code true} if a declared field exists, {@code false} otherwise.\n+     */\n+    public static boolean hasField(Class<?> clazz, String fieldName) {\n+        for (Field field : clazz.getDeclaredFields()) {\n+            if (field.getName().equals(fieldName)) {\n+                return true;\n+            }\n+        }\n+        Class<?> superClass = clazz.getSuperclass();\n+        while (superClass != null) {\n+            for (Field field : superClass.getDeclaredFields()) {\n+                if (field.getName().equals(fieldName)) {\n+                    return true;\n+                }\n+            }\n+            superClass = superClass.getSuperclass();\n+        }\n+        return false;\n+    }\n+\n+    public static Method getSetter(Class<?> otherConfigClass,\n+                                   Class<?> parameterType, String setterName) {\n+        try {\n+            return otherConfigClass.getMethod(setterName, parameterType);\n+        } catch (NoSuchMethodException e) {\n+            return null;\n+        }\n+    }\n+\n+    public static void invokeSetter(Object object, String setterName,\n+                                     Class<?> parameterClass, Object parameter) {\n+        Method setter = getSetter(object.getClass(), parameterClass, setterName);\n+        invokeMethod(setter, object, parameter);\n+    }\n+\n+    public static void invokeMethod(Method method, Object methodObj, Object methodParam) {\n+        try {\n+            method.invoke(methodObj, methodParam);\n+        } catch (IllegalAccessException | InvocationTargetException | IllegalArgumentException e) {\n+            debug(\"Could not update config via %s: %s\", method.getName(), e.getMessage());", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MjUwNw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429172507", "bodyText": "Will do!", "author": "mmedenjak", "createdAt": "2020-05-22T10:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MDQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NDE4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429984183", "bodyText": "Done, changed in both this and the 3.12.z PR.", "author": "mmedenjak", "createdAt": "2020-05-25T15:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MDQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/ReflectionUtils.java b/hazelcast/src/test/java/com/hazelcast/test/starter/ReflectionUtils.java\nindex 52af7387ce8..c345dcdbd54 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/ReflectionUtils.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/ReflectionUtils.java\n\n@@ -224,29 +221,6 @@ public final class ReflectionUtils {\n         return false;\n     }\n \n-    public static Method getSetter(Class<?> otherConfigClass,\n-                                   Class<?> parameterType, String setterName) {\n-        try {\n-            return otherConfigClass.getMethod(setterName, parameterType);\n-        } catch (NoSuchMethodException e) {\n-            return null;\n-        }\n-    }\n-\n-    public static void invokeSetter(Object object, String setterName,\n-                                     Class<?> parameterClass, Object parameter) {\n-        Method setter = getSetter(object.getClass(), parameterClass, setterName);\n-        invokeMethod(setter, object, parameter);\n-    }\n-\n-    public static void invokeMethod(Method method, Object methodObj, Object methodParam) {\n-        try {\n-            method.invoke(methodObj, methodParam);\n-        } catch (IllegalAccessException | InvocationTargetException | IllegalArgumentException e) {\n-            debug(\"Could not update config via %s: %s\", method.getName(), e.getMessage());\n-        }\n-    }\n-\n     public static Object getDelegateFromMock(Object mock) throws IllegalAccessException {\n         Answer<?> defaultAnswer = mockingDetails(mock).getMockCreationSettings().getDefaultAnswer();\n         return getFieldValueReflectively(defaultAnswer, \"delegate\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMDE3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428720178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object create = getFieldValueReflectively(delegate, \"create\");\n          \n          \n            \n                    Duration create = getFieldValueReflectively(delegate, \"create\");\n          \n          \n            \n                    Duration access = getFieldValueReflectively(delegate, \"access\");\n          \n          \n            \n                    Duration update = getFieldValueReflectively(delegate, \"update\");\n          \n          \n            \n            \n          \n          \n            \n                    Object[] args = new Object[]{\n          \n          \n            \n                            create.getTimeUnit().toMillis(create.getDurationAmount()),\n          \n          \n            \n                            access.getTimeUnit().toMillis(access.getDurationAmount()),\n          \n          \n            \n                            update.getTimeUnit().toMillis(update.getDurationAmount()),\n          \n          \n            \n                    };\n          \n      \n    \n    \n  \n\nDuration is a javax.cache API class so it will not be loaded by the HazelcastAPIDelegatingClassLoader and we can use it directly here. Apart from the durationAmount part we also need to take into account the timeUnit part to get an accurate clone. Minimal test:\n        HazelcastExpiryPolicy policy = new HazelcastExpiryPolicy(3L, 5L, 4L, TimeUnit.SECONDS);\n        HazelcastExpiryPolicyConstructor constructor = new HazelcastExpiryPolicyConstructor(HazelcastExpiryPolicy.class);\n        HazelcastExpiryPolicy cloned = (HazelcastExpiryPolicy) constructor.createNew(policy);\n        assertEquals(policy, cloned);", "author": "vbekiaris", "createdAt": "2020-05-21T15:16:22Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.test.starter.constructor;\n+\n+import com.hazelcast.test.starter.HazelcastStarterConstructor;\n+\n+import java.lang.reflect.Constructor;\n+\n+import static com.hazelcast.test.starter.ReflectionUtils.getFieldValueReflectively;\n+\n+@HazelcastStarterConstructor(classNames = {\"com.hazelcast.cache.HazelcastExpiryPolicy\"})\n+public class HazelcastExpiryPolicyConstructor extends AbstractStarterObjectConstructor {\n+\n+    public HazelcastExpiryPolicyConstructor(Class<?> targetClass) {\n+        super(targetClass);\n+    }\n+\n+    @Override\n+    Object createNew0(Object delegate) throws Exception {\n+        Constructor<?> constructor = targetClass.getConstructor(Long.TYPE, Long.TYPE, Long.TYPE);\n+\n+        Object create = getFieldValueReflectively(delegate, \"create\");", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MjkzMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429172930", "bodyText": "Strike two with using JCache classes eagerly where I was not supposed to (I remember one time where I was resolving some classes during node startup :)). Will update the code to what you suggested.", "author": "mmedenjak", "createdAt": "2020-05-22T10:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNTA0Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r430215047", "bodyText": "Misunderstood the first time but now it's clear. Thanks for the suggestion. Added a test for the constructor as well and applied changes to 3.12.z PR.", "author": "mmedenjak", "createdAt": "2020-05-26T07:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMDE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "cab685ab7742e1c7c3625ad6be20b2d8a13c73f2", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java b/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java\nindex 3abb2b87ee2..cef937dc43d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java\n\n@@ -33,7 +33,15 @@ public class HazelcastExpiryPolicyConstructor extends AbstractStarterObjectConst\n     Object createNew0(Object delegate) throws Exception {\n         Constructor<?> constructor = targetClass.getConstructor(Long.TYPE, Long.TYPE, Long.TYPE);\n \n-        Object create = getFieldValueReflectively(delegate, \"create\");\n+        Duration create = getFieldValueReflectively(delegate, \"create\");\n+        Duration access = getFieldValueReflectively(delegate, \"access\");\n+        Duration update = getFieldValueReflectively(delegate, \"update\");\n+\n+        Object[] args = new Object[]{\n+                create.getTimeUnit().toMillis(create.getDurationAmount()),\n+                access.getTimeUnit().toMillis(access.getDurationAmount()),\n+                update.getTimeUnit().toMillis(update.getDurationAmount()),\n+        };\n         Object access = getFieldValueReflectively(delegate, \"access\");\n         Object update = getFieldValueReflectively(delegate, \"update\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMDE0OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428730149", "bodyText": "minor: could move raising FLAG_4_0 to Packet constructor as done in other PR", "author": "vbekiaris", "createdAt": "2020-05-21T15:31:58Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.java", "diffHunk": "@@ -583,7 +583,8 @@ private void sendEvent(Address subscriber, EventEnvelope eventEnvelope, int orde\n             }\n         } else {\n             Packet packet = new Packet(serializationService.toBytes(eventEnvelope), orderKey)\n-                    .setPacketType(Packet.Type.EVENT);\n+                    .setPacketType(Packet.Type.EVENT)\n+                    .raiseFlags(Packet.FLAG_4_0);", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MzA2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429173060", "bodyText": "Sure, I was planning on doing it \ud83d\udc4d", "author": "mmedenjak", "createdAt": "2020-05-22T10:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMDE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NDY1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429984652", "bodyText": "Done, updated in this and the 3.12.z PR. Now I only had to unset the flag when sending to 3.12 members and set the FLAG_3_12 flag, which is kinda ugly but the rest of the code using Packets is now unaffected.", "author": "mmedenjak", "createdAt": "2020-05-25T15:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczMDE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "261c703ff52700cdcaa21fb416d0302d6818a125", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.java\nindex 2e82d4575e2..127a3054cb4 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/eventservice/impl/EventServiceImpl.java\n\n@@ -583,8 +583,7 @@ public class EventServiceImpl implements EventService, StaticMetricsProvider {\n             }\n         } else {\n             Packet packet = new Packet(serializationService.toBytes(eventEnvelope), orderKey)\n-                    .setPacketType(Packet.Type.EVENT)\n-                    .raiseFlags(Packet.FLAG_4_0);\n+                    .setPacketType(Packet.Type.EVENT);\n \n             EndpointManager em = nodeEngine.getNode().getNetworkingService().getEndpointManager(MEMBER);\n             if (!em.transmit(packet, subscriber)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0Nzc5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r428747797", "bodyText": "minor: clones EvictionConfig actually", "author": "vbekiaris", "createdAt": "2020-05-21T15:54:32Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/constructor/AbstractConfigConstructor.java", "diffHunk": "@@ -241,9 +253,306 @@ private static Object cloneSplitBrainProtectionFunctionImplementation(Object spl\n         }\n     }\n \n+    /**\n+     * Clones the built-in QuorumFunction implementations.", "originalCommit": "dc2647122b3f8446f408d8c9c86d92efe82056af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NDgxOA==", "url": "https://github.com/hazelcast/hazelcast/pull/16887#discussion_r429984818", "bodyText": "Fixed in both this and the 3.12.z PR.", "author": "mmedenjak", "createdAt": "2020-05-25T15:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc0Nzc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/AbstractConfigConstructor.java b/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/AbstractConfigConstructor.java\nindex d1d4b71f52f..461e7384021 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/AbstractConfigConstructor.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/constructor/AbstractConfigConstructor.java\n\n@@ -477,7 +491,7 @@ abstract class AbstractConfigConstructor extends AbstractStarterObjectConstructo\n         try {\n             quorumFunctionInterface = classLoader.loadClass(\"com.hazelcast.quorum.QuorumFunction\");\n         } catch (ClassNotFoundException e) {\n-            // target classloader is 4.x\n+            // target classloader is 4.0\n             quorumFunctionInterface\n                     = classLoader.loadClass(\"com.hazelcast.splitbrainprotection.SplitBrainProtectionFunction\");\n         }\n"}}, {"oid": "46dbc1069270ecb849f9801a968e4d3bd63b7059", "url": "https://github.com/hazelcast/hazelcast/commit/46dbc1069270ecb849f9801a968e4d3bd63b7059", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "eed8d8cce5469c2d7953b3d086f5bacfc397450c", "url": "https://github.com/hazelcast/hazelcast/commit/eed8d8cce5469c2d7953b3d086f5bacfc397450c", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "e4053066139452da25f1170e443326bae898308f", "url": "https://github.com/hazelcast/hazelcast/commit/e4053066139452da25f1170e443326bae898308f", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "f45c7e2a6839995f052b058c1ff6191711f5b786", "url": "https://github.com/hazelcast/hazelcast/commit/f45c7e2a6839995f052b058c1ff6191711f5b786", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "44e79fd5795e536e8f2cfbc98e567c6b9bbb7683", "url": "https://github.com/hazelcast/hazelcast/commit/44e79fd5795e536e8f2cfbc98e567c6b9bbb7683", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "37b12bc0128876afdf8d692313f14f1f857c4c9a", "url": "https://github.com/hazelcast/hazelcast/commit/37b12bc0128876afdf8d692313f14f1f857c4c9a", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "5cc91eb1bddbe0b8485d14a3a00d3b03698722bf", "url": "https://github.com/hazelcast/hazelcast/commit/5cc91eb1bddbe0b8485d14a3a00d3b03698722bf", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "90450c9cc8cbdd461b6ad90ef5f0de041488e8de", "url": "https://github.com/hazelcast/hazelcast/commit/90450c9cc8cbdd461b6ad90ef5f0de041488e8de", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "c307fff46979a5d327f7c47efad7dad96add1fd7", "url": "https://github.com/hazelcast/hazelcast/commit/c307fff46979a5d327f7c47efad7dad96add1fd7", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "c0ab6c594603d9fe840c00bd87cf5cc808c5fc40", "url": "https://github.com/hazelcast/hazelcast/commit/c0ab6c594603d9fe840c00bd87cf5cc808c5fc40", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:05Z", "type": "commit"}, {"oid": "cf6e5bd7511b16e281fc33f95172184363b5c33d", "url": "https://github.com/hazelcast/hazelcast/commit/cf6e5bd7511b16e281fc33f95172184363b5c33d", "message": "Add support for processing WAN replication messages from 3.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 3.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:44:53Z", "type": "commit"}, {"oid": "261c703ff52700cdcaa21fb416d0302d6818a125", "url": "https://github.com/hazelcast/hazelcast/commit/261c703ff52700cdcaa21fb416d0302d6818a125", "message": "Address review comments", "committedDate": "2020-05-25T15:44:53Z", "type": "commit"}, {"oid": "261c703ff52700cdcaa21fb416d0302d6818a125", "url": "https://github.com/hazelcast/hazelcast/commit/261c703ff52700cdcaa21fb416d0302d6818a125", "message": "Address review comments", "committedDate": "2020-05-25T15:44:53Z", "type": "forcePushed"}, {"oid": "cab685ab7742e1c7c3625ad6be20b2d8a13c73f2", "url": "https://github.com/hazelcast/hazelcast/commit/cab685ab7742e1c7c3625ad6be20b2d8a13c73f2", "message": "Update hazelcast/src/test/java/com/hazelcast/test/starter/constructor/HazelcastExpiryPolicyConstructor.java\n\nCo-authored-by: Vassilis Bekiaris <vbekiaris@gmail.com>", "committedDate": "2020-05-26T06:30:54Z", "type": "commit"}, {"oid": "966bbbdc28db69b7bd2bbe65c59c322a2212a3df", "url": "https://github.com/hazelcast/hazelcast/commit/966bbbdc28db69b7bd2bbe65c59c322a2212a3df", "message": "Address review comments", "committedDate": "2020-05-26T07:39:42Z", "type": "commit"}, {"oid": "3fe1f52c055fafa8c08f318b0fd4ae3d78160ebb", "url": "https://github.com/hazelcast/hazelcast/commit/3fe1f52c055fafa8c08f318b0fd4ae3d78160ebb", "message": "Fix tests", "committedDate": "2020-05-26T10:06:06Z", "type": "commit"}, {"oid": "fe1966043e9d64366c496121e2d0dbbf3d24e388", "url": "https://github.com/hazelcast/hazelcast/commit/fe1966043e9d64366c496121e2d0dbbf3d24e388", "message": "Fix tests", "committedDate": "2020-05-26T14:13:43Z", "type": "commit"}, {"oid": "ade3c588117d2039106b80b738d280ae7b42d05d", "url": "https://github.com/hazelcast/hazelcast/commit/ade3c588117d2039106b80b738d280ae7b42d05d", "message": "Fix tests", "committedDate": "2020-05-27T06:38:58Z", "type": "commit"}, {"oid": "88f26b9870ac3b575d11dc29b5777f8be5ff7d80", "url": "https://github.com/hazelcast/hazelcast/commit/88f26b9870ac3b575d11dc29b5777f8be5ff7d80", "message": "Address review comments", "committedDate": "2020-05-27T11:30:51Z", "type": "commit"}, {"oid": "fc9d2b034072695ff9ebd92428fb932a52bec182", "url": "https://github.com/hazelcast/hazelcast/commit/fc9d2b034072695ff9ebd92428fb932a52bec182", "message": "Address review comments", "committedDate": "2020-05-28T10:12:05Z", "type": "commit"}, {"oid": "df7eb54ae2c1fbc5d0e03d022e5a659c6767c368", "url": "https://github.com/hazelcast/hazelcast/commit/df7eb54ae2c1fbc5d0e03d022e5a659c6767c368", "message": "Address review comments", "committedDate": "2020-05-28T14:17:01Z", "type": "commit"}]}