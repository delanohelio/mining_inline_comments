{"pr_number": 17415, "pr_title": "custom load balancer declarative configuration", "pr_createdAt": "2020-08-26T13:26:30Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17415", "timeline": [{"oid": "60e970cfcf3ee8491bd44f83f1e9edfab44c4ce2", "url": "https://github.com/hazelcast/hazelcast/commit/60e970cfcf3ee8491bd44f83f1e9edfab44c4ce2", "message": "custom load balancer declarative configuration", "committedDate": "2020-08-27T07:23:50Z", "type": "commit"}, {"oid": "60e970cfcf3ee8491bd44f83f1e9edfab44c4ce2", "url": "https://github.com/hazelcast/hazelcast/commit/60e970cfcf3ee8491bd44f83f1e9edfab44c4ce2", "message": "custom load balancer declarative configuration", "committedDate": "2020-08-27T07:23:50Z", "type": "forcePushed"}, {"oid": "281c7ad25e5316958cad86a66502632e80b5bd00", "url": "https://github.com/hazelcast/hazelcast/commit/281c7ad25e5316958cad86a66502632e80b5bd00", "message": "checkstyle problems fixed", "committedDate": "2020-08-27T11:55:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzNDEzMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r480134131", "bodyText": "Can we also add a test that verifies that the exception will be thrown when both the implementation and the class-name  are provided in the spring config?", "author": "mdumandag", "createdAt": "2020-08-31T13:34:00Z", "path": "hazelcast-spring-tests/src/test/java/com/hazelcast/spring/TestCustomLoadBalancerContext.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.spring;\n+\n+import com.hazelcast.client.HazelcastClient;\n+import com.hazelcast.client.LoadBalancer;\n+import com.hazelcast.client.config.ClientConfig;\n+import com.hazelcast.client.impl.clientside.HazelcastClientProxy;\n+import com.hazelcast.client.test.CustomLoadBalancer;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import javax.annotation.Resource;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(CustomSpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"customLoadBalancer-applicationContext.xml\"})\n+@Category(QuickTest.class)\n+public class TestCustomLoadBalancerContext {\n+\n+    @Resource(name = \"client1\")\n+    private HazelcastClientProxy client1;\n+\n+    @Resource(name = \"client2\")\n+    private HazelcastClientProxy client2;\n+\n+    @BeforeClass\n+    @AfterClass\n+    public static void start() {\n+        HazelcastClient.shutdownAll();\n+        Hazelcast.shutdownAll();\n+    }\n+\n+    @Test\n+    public void testCustomLoadBalancer() {\n+        ClientConfig config1 = client1.getClientConfig();\n+        LoadBalancer loadBalancer1 = config1.getLoadBalancer();\n+        assertTrue(loadBalancer1 instanceof CustomLoadBalancer);\n+        assertEquals(\"default-name\", ((CustomLoadBalancer) loadBalancer1).getName());\n+\n+        ClientConfig config2 = client2.getClientConfig();\n+        LoadBalancer loadBalancer2 = config2.getLoadBalancer();\n+        assertTrue(loadBalancer2 instanceof CustomLoadBalancer);\n+        assertEquals(\"custom-balancer-name\", ((CustomLoadBalancer) loadBalancer2).getName());\n+    }\n+}", "originalCommit": "281c7ad25e5316958cad86a66502632e80b5bd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTIxOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r481229218", "bodyText": "good catch. I actually had to change the logic as it was not working properly before.\nthere are is no common spot for testing failed application context xml files, so I created a new invalid file and test for load balancer in com.hazelcast.spring.InvalidApplicationContextTest", "author": "the-thing", "createdAt": "2020-09-01T15:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzNDEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzOTYzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r480139635", "bodyText": "Will this (passing null as the class loader) cause problems when a different class loader is provided for the client config? I see that for other elements, we store the class name and later, use the class loader defined in the config (if any) while instantiating the objects.", "author": "mdumandag", "createdAt": "2020-08-31T13:42:58Z", "path": "hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java", "diffHunk": "@@ -391,9 +393,24 @@ private void handleLoadBalancer(Node node) {\n             clientConfig.setLoadBalancer(new RandomLB());\n         } else if (\"round-robin\".equals(type)) {\n             clientConfig.setLoadBalancer(new RoundRobinLB());\n+        } else if (\"custom\".equals(type)) {\n+            String loadBalancerClassName = parseCustomLoadBalancerClassName(node);\n+\n+            try {\n+                LoadBalancer loadBalancer = newInstance(null, loadBalancerClassName);", "originalCommit": "281c7ad25e5316958cad86a66502632e80b5bd00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1MjMwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r480152300", "bodyText": "I did not consider the class-loader problem when we are discussing here #17228 (comment)\n@the-thing Lets move the instantiation to com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl#initLoadBalancer\nTo achieve this, we can add a new field to the ClientConfig as loadBalancerClassName. ConfigProcessor sets this class name of the load balancer type is custom.\nThis way, we will not break the old behavior.", "author": "sancar", "createdAt": "2020-08-31T14:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzOTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMDYzOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r481230639", "bodyText": "I followed the suggestion and moved the instantiation of load balancer to com.hazelcast.client.impl.clientside.HazelcastClientInstanceImpl#initLoadBalancer. I had to rewrite the test cases and created a few new ones in com.hazelcast.client.config.ClientConfigLoadBalancerTest. Extra work had to be done so I would advise to review the whole PR again.", "author": "the-thing", "createdAt": "2020-09-01T15:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzOTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "06589f2a1bc9b358d98a0e50ff12159c3bc21888", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java b/hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java\nindex 1586a50371..00566dadd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/config/impl/ClientDomConfigProcessor.java\n\n@@ -395,15 +393,7 @@ public class ClientDomConfigProcessor extends AbstractDomConfigProcessor {\n             clientConfig.setLoadBalancer(new RoundRobinLB());\n         } else if (\"custom\".equals(type)) {\n             String loadBalancerClassName = parseCustomLoadBalancerClassName(node);\n-\n-            try {\n-                LoadBalancer loadBalancer = newInstance(null, loadBalancerClassName);\n-                clientConfig.setLoadBalancer(loadBalancer);\n-            } catch (Exception e) {\n-                throw new InvalidConfigurationException(\n-                        \"Unable to instantiate load balancer class '\" + loadBalancerClassName\n-                        + \"' found in the configuration\", e);\n-            }\n+            clientConfig.setLoadBalancerClassName(loadBalancerClassName);\n         }\n     }\n \n"}}, {"oid": "06589f2a1bc9b358d98a0e50ff12159c3bc21888", "url": "https://github.com/hazelcast/hazelcast/commit/06589f2a1bc9b358d98a0e50ff12159c3bc21888", "message": "code review comments fixed", "committedDate": "2020-09-01T12:07:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NjY1Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r481956657", "bodyText": "Can you make the implementation aligned with ListenerConfig.\nIf loadBalancer is set it will be set to null. Also the class name will be set to null when the loadBalacer is set.\nPlease do not forget to add related javadoc.\nAnd also as it is implemented in ListenerConfig add @Nonnull  tag together with checkHasText", "author": "sancar", "createdAt": "2020-09-02T10:11:10Z", "path": "hazelcast/src/main/java/com/hazelcast/client/config/ClientConfig.java", "diffHunk": "@@ -613,6 +619,29 @@ public ClientConfig setLoadBalancer(LoadBalancer loadBalancer) {\n         return this;\n     }\n \n+    /**\n+     * Gets load balancer class name\n+     *\n+     * @return load balancer class name\n+     * @see com.hazelcast.client.LoadBalancer\n+     */\n+    public String getLoadBalancerClassName() {\n+        return loadBalancerClassName;\n+    }\n+\n+    /**\n+     * Sets load balancer class name\n+     *\n+     * @param loadBalancerClassName {@link LoadBalancer}\n+     * @return configured {@link com.hazelcast.client.config.ClientConfig} for chaining\n+     * @see com.hazelcast.client.LoadBalancer\n+     */\n+    public ClientConfig setLoadBalancerClassName(String loadBalancerClassName) {\n+        this.loadBalancerClassName = loadBalancerClassName;\n+        return this;\n+    }", "originalCommit": "06589f2a1bc9b358d98a0e50ff12159c3bc21888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3OTg4MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17415#discussion_r481979880", "bodyText": "Done. I made them mutually exclusive as suggested.", "author": "the-thing", "createdAt": "2020-09-02T10:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NjY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dac66e2af6120694e66db5964e9df5d5484edfd2", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/config/ClientConfig.java b/hazelcast/src/main/java/com/hazelcast/client/config/ClientConfig.java\nindex 8010e7b471..b470d713b1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/config/ClientConfig.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/config/ClientConfig.java\n\n@@ -616,6 +619,7 @@ public class ClientConfig {\n      */\n     public ClientConfig setLoadBalancer(LoadBalancer loadBalancer) {\n         this.loadBalancer = loadBalancer;\n+        this.loadBalancerClassName = null;\n         return this;\n     }\n \n"}}, {"oid": "dac66e2af6120694e66db5964e9df5d5484edfd2", "url": "https://github.com/hazelcast/hazelcast/commit/dac66e2af6120694e66db5964e9df5d5484edfd2", "message": "client config load balancer and load balancer class name are mutually exclusive\n\nload balancer client config xml and yaml examples updated", "committedDate": "2020-09-02T10:51:07Z", "type": "commit"}]}