{"pr_number": 16718, "pr_title": "add codec versioning support", "pr_createdAt": "2020-03-03T11:29:20Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16718", "timeline": [{"oid": "5931c744df9ac98265a1f3bc4b755b02c3e228e9", "url": "https://github.com/hazelcast/hazelcast/commit/5931c744df9ac98265a1f3bc4b755b02c3e228e9", "message": "improve messagec comparision logic to handle addition of new custom types to custom types", "committedDate": "2020-03-06T13:54:19Z", "type": "forcePushed"}, {"oid": "9bfab3de83957d16735afc22a7991459f8bf6e89", "url": "https://github.com/hazelcast/hazelcast/commit/9bfab3de83957d16735afc22a7991459f8bf6e89", "message": "improve messagec comparision logic to handle addition of new custom types to custom types", "committedDate": "2020-03-06T13:55:42Z", "type": "forcePushed"}, {"oid": "4d621eb3e37a9aa6ae10ba30d14be12a241ce6b2", "url": "https://github.com/hazelcast/hazelcast/commit/4d621eb3e37a9aa6ae10ba30d14be12a241ce6b2", "message": "add codec versioning support", "committedDate": "2020-03-13T07:33:30Z", "type": "commit"}, {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "url": "https://github.com/hazelcast/hazelcast/commit/dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "message": "improve messagec comparision logic to handle addition of new custom types to custom types", "committedDate": "2020-03-13T07:33:30Z", "type": "commit"}, {"oid": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "url": "https://github.com/hazelcast/hazelcast/commit/dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "message": "improve messagec comparision logic to handle addition of new custom types to custom types", "committedDate": "2020-03-13T07:33:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MTI1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/16718#discussion_r392141252", "bodyText": "What is the reason of having to calls to fastForwardToEndFrame ? Why do we need to fast forward once more if encodedFrame.isBeginFrame()", "author": "sancar", "createdAt": "2020-03-13T10:20:26Z", "path": "hazelcast/src/test/java/com/hazelcast/client/protocol/compatibility/ClientCompatibilityTest_2_0.java", "diffHunk": "@@ -6917,32 +6920,24 @@ private void compareClientMessages(ClientMessage binaryMessage, ClientMessage en\n \n         ClientMessage.ForwardFrameIterator binaryFrameIterator = binaryMessage.frameIterator();\n         ClientMessage.ForwardFrameIterator encodedFrameIterator = encodedMessage.frameIterator();\n+        assertTrue(\"Client message that is read from the binary file does not have any frames\", binaryFrameIterator.hasNext());\n \n-        boolean isInitialFramesCompared = false;\n         while (binaryFrameIterator.hasNext()) {\n             binaryFrame = binaryFrameIterator.next();\n             encodedFrame = encodedFrameIterator.next();\n             assertNotNull(\"Encoded client message has less frames.\", encodedFrame);\n \n-            boolean isFinal = binaryFrameIterator.peekNext() == null;\n-            if (!isInitialFramesCompared) {\n-                compareInitialFrame(binaryFrame, encodedFrame, isFinal);\n-                isInitialFramesCompared = true;\n-            } else {\n-                assertArrayEquals(\"Frames have different contents\", binaryFrame.content, encodedFrame.content);\n-                int flags = isFinal ? encodedFrame.flags | IS_FINAL_FLAG : encodedFrame.flags;\n-                assertEquals(\"Frames have different flags\", binaryFrame.flags, flags);\n+            if (binaryFrame.isEndFrame() && !encodedFrame.isEndFrame()) {\n+                if (encodedFrame.isBeginFrame()) {\n+                    HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);\n+                }\n+                encodedFrame = HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);", "originalCommit": "dd81bbce16d807c4d731c028fc63fb3bd3a408d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjQ5Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16718#discussion_r392146496", "bodyText": "Lets say Address(a custom type) is extended with a new field : an AttributeConfig(another custom type). When we do the comparison, when we are at the end frame of the binary message, we will be at the begin frame of the AttributeConfig field of the encoded message. If I do just one fast forward at this point, I will be fast forwarding to the END_FRAME of the AttributeConfig not the encoded message. For this special case, we fast forward twice. Apart from this special case, if a message is extended with new variable sized parameters, binary message will not have those, where as encoded message will have. There is nothing to compare so we skip those newly added frames.", "author": "mdumandag", "createdAt": "2020-03-13T10:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MTI1Mg=="}], "type": "inlineReview", "revised_code": null}]}