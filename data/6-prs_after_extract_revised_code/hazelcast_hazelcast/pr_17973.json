{"pr_number": 17973, "pr_title": "Implement ManagedBlocker for DistributedObjectFuture", "pr_createdAt": "2020-12-15T08:34:04Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17973", "timeline": [{"oid": "6bd30f8ca43de8f480b1f6f3b07ce10d836296cb", "url": "https://github.com/hazelcast/hazelcast/commit/6bd30f8ca43de8f480b1f6f3b07ce10d836296cb", "message": "Add test", "committedDate": "2020-12-16T07:53:16Z", "type": "forcePushed"}, {"oid": "4eeda4e61ddad39dd9250b16ce0671cd33842035", "url": "https://github.com/hazelcast/hazelcast/commit/4eeda4e61ddad39dd9250b16ce0671cd33842035", "message": "WIP", "committedDate": "2020-12-16T22:21:01Z", "type": "forcePushed"}, {"oid": "3f7303bd00f8a50f8642238397420e1ade2cea68", "url": "https://github.com/hazelcast/hazelcast/commit/3f7303bd00f8a50f8642238397420e1ade2cea68", "message": "WIP", "committedDate": "2020-12-17T13:44:17Z", "type": "forcePushed"}, {"oid": "81089b4a137c96014e0f3b7954352d9c74f39531", "url": "https://github.com/hazelcast/hazelcast/commit/81089b4a137c96014e0f3b7954352d9c74f39531", "message": "Implement ManagedBlocker for DistributedObjectFuture", "committedDate": "2020-12-17T17:18:42Z", "type": "forcePushed"}, {"oid": "d9d67e293d8cac602bc9fbbf8683c942e40be3f6", "url": "https://github.com/hazelcast/hazelcast/commit/d9d67e293d8cac602bc9fbbf8683c942e40be3f6", "message": "Implement ManagedBlocker for proxy futures\nand AbstractInvocationFuture", "committedDate": "2020-12-17T21:52:39Z", "type": "forcePushed"}, {"oid": "5ce7583d0f2222e8d5bdc3116612d9584f7a9092", "url": "https://github.com/hazelcast/hazelcast/commit/5ce7583d0f2222e8d5bdc3116612d9584f7a9092", "message": "Implement ManagedBlocker for proxy futures\nand AbstractInvocationFuture", "committedDate": "2020-12-18T08:19:44Z", "type": "forcePushed"}, {"oid": "9194a1ba030f366def6b023717483df90869e90e", "url": "https://github.com/hazelcast/hazelcast/commit/9194a1ba030f366def6b023717483df90869e90e", "message": "Implement ManagedBlocker for proxy futures\nand AbstractInvocationFuture", "committedDate": "2020-12-18T08:28:02Z", "type": "forcePushed"}, {"oid": "468f0e5dbb27e31736a4b284202f756bc0141f33", "url": "https://github.com/hazelcast/hazelcast/commit/468f0e5dbb27e31736a4b284202f756bc0141f33", "message": "add new test", "committedDate": "2021-01-27T12:34:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM2NjUyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568366526", "bodyText": "I think we don't need to catch InterruptedException , just let it be thrown.", "author": "vbekiaris", "createdAt": "2021-02-02T07:07:20Z", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/spi/ProxyManager.java", "diffHunk": "@@ -462,6 +456,35 @@ void set(Object o) {\n                 notifyAll();\n             }\n         }\n+\n+        @Override\n+        public boolean block() throws InterruptedException {\n+            if (Thread.currentThread().isInterrupted()\n+                    || isReleasable()) {\n+                return true;\n+            }\n+\n+            boolean interrupted = false;\n+            synchronized (this) {\n+                while (proxy == null) {\n+                    try {\n+                        wait();\n+                    } catch (InterruptedException e) {", "originalCommit": "4e078e0e85b82dcab3fed384d45c1b92448a5a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyNDg5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568524894", "bodyText": "removed catch block", "author": "ahmetmircik", "createdAt": "2021-02-02T11:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM2NjUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTI4Njg4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r569286885", "bodyText": "As discussed on slack, removing the catch block would change code execution path, so it was restored.", "author": "vbekiaris", "createdAt": "2021-02-03T10:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM2NjUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8aef29ab2d43bd0fd77de4daf0cd86565de78f67", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/spi/ProxyManager.java b/hazelcast/src/main/java/com/hazelcast/client/impl/spi/ProxyManager.java\nindex 6b522a28aa9..91a6faa99fa 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/spi/ProxyManager.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/spi/ProxyManager.java\n\n@@ -464,20 +464,12 @@ public final class ProxyManager {\n                 return true;\n             }\n \n-            boolean interrupted = false;\n             synchronized (this) {\n                 while (proxy == null) {\n-                    try {\n-                        wait();\n-                    } catch (InterruptedException e) {\n-                        interrupted = true;\n-                    }\n+                    wait();\n                 }\n             }\n-            if (interrupted) {\n-                Thread.currentThread().interrupt();\n-                return true;\n-            }\n+\n             return true;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM2OTk4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568369988", "bodyText": "Can we remove the timed parameter? Seems like we need to parkNanos when timeoutNanos > 0, otherwise just park().\nalso minor typo: managedParking?", "author": "vbekiaris", "createdAt": "2021-02-02T07:15:59Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java", "diffHunk": "@@ -653,6 +655,50 @@ public final V get(final long timeout, final TimeUnit unit)\n         throw newTimeoutException(timeout, unit);\n     }\n \n+    // Use when the caller thread is a ForkJoinWorkerThread\n+    class ManagedBlocker implements ForkJoinPool.ManagedBlocker {\n+        private boolean timed;\n+        private long timeoutNanos;\n+\n+        ManagedBlocker(boolean timed, long timeoutNanos) {\n+            this.timed = timed;\n+            this.timeoutNanos = timeoutNanos;\n+        }\n+\n+        @Override\n+        public boolean isReleasable() {\n+            return Thread.currentThread().isInterrupted()\n+                    || isDone();\n+        }\n+\n+        @Override\n+        public boolean block() throws InterruptedException {\n+            if (isReleasable()) {\n+                return true;\n+            } else if (!timed) {\n+                park();\n+            } else if (timeoutNanos > 0) {\n+                parkNanos(timeoutNanos);\n+            }\n+            return isReleasable();\n+        }\n+    }\n+\n+    private void manageParking(boolean timed, long timeoutNanos) {", "originalCommit": "4e078e0e85b82dcab3fed384d45c1b92448a5a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyNTAyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568525021", "bodyText": "removed timed parameter", "author": "ahmetmircik", "createdAt": "2021-02-02T11:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM2OTk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8aef29ab2d43bd0fd77de4daf0cd86565de78f67", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java b/hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java\nindex b909c7d46af..9185e62fab3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java\n+++ b/hazelcast/src/main/java/com/hazelcast/spi/impl/AbstractInvocationFuture.java\n\n@@ -657,11 +658,10 @@ public abstract class AbstractInvocationFuture<V> extends InternalCompletableFut\n \n     // Use when the caller thread is a ForkJoinWorkerThread\n     class ManagedBlocker implements ForkJoinPool.ManagedBlocker {\n-        private boolean timed;\n-        private long timeoutNanos;\n \n-        ManagedBlocker(boolean timed, long timeoutNanos) {\n-            this.timed = timed;\n+        private final long timeoutNanos;\n+\n+        ManagedBlocker(long timeoutNanos) {\n             this.timeoutNanos = timeoutNanos;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM4MDQ2MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568380461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        tasks.add(ForkJoinPool.commonPool().submit(new ACallable()));\n          \n          \n            \n                        tasks.add(ForkJoinPool.commonPool().submit(() -> clientMap.get(1)));", "author": "vbekiaris", "createdAt": "2021-02-02T07:38:48Z", "path": "hazelcast/src/test/java/com/hazelcast/client/impl/spi/ClientHazelcastRunningInForkJoinPoolTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.client.impl.spi;\n+\n+import com.hazelcast.client.test.TestHazelcastFactory;\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.config.MapStoreConfig;\n+import com.hazelcast.core.EntryAdapter;\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.map.IMap;\n+import com.hazelcast.map.MapStoreAdapter;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.HazelcastTestSupport;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.Future;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class ClientHazelcastRunningInForkJoinPoolTest extends HazelcastTestSupport {\n+\n+    private final TestHazelcastFactory hazelcastFactory = new TestHazelcastFactory();\n+\n+    private HazelcastInstance client;\n+    private HazelcastInstance server;\n+    private IMap serverMap;\n+    private IMap clientMap;\n+    private String mapName = \"loading-takes-ages\";\n+    private String innocentMap = \"innocent\";\n+\n+    @After\n+    public void tearDown() {\n+        hazelcastFactory.terminateAll();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        MapStoreConfig mapStoreConfig = new MapStoreConfig();\n+        mapStoreConfig.setEnabled(true);\n+        mapStoreConfig.setImplementation(new MapStoreAdapter() {\n+            @Override\n+            public Object load(Object key) {\n+                sleepSeconds(1000);\n+                return super.load(key);\n+            }\n+        });\n+\n+        MapConfig mapConfig = new MapConfig(\n+                mapName);\n+        mapConfig.setMapStoreConfig(mapStoreConfig);\n+\n+        Config config = getConfig().addMapConfig(mapConfig);\n+\n+        server = hazelcastFactory.newHazelcastInstance(config);\n+        client = hazelcastFactory.newHazelcastClient();\n+\n+        serverMap = server.getMap(innocentMap);\n+        clientMap = client.getMap(mapName);\n+    }\n+\n+    @Test\n+    public void slow_data_loading_does_not_block_entry_listener_addition() {\n+        // 1. Let's simulate 1000 parallel tasks\n+        // contend on loading 1 item from a database.\n+        Collection<Future> tasks = new ArrayList<>();\n+        for (int i = 0; i < 1000; i++) {\n+            tasks.add(ForkJoinPool.commonPool().submit(new ACallable()));", "originalCommit": "4e078e0e85b82dcab3fed384d45c1b92448a5a9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyNTEwNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17973#discussion_r568525107", "bodyText": "updated test", "author": "ahmetmircik", "createdAt": "2021-02-02T11:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM4MDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8aef29ab2d43bd0fd77de4daf0cd86565de78f67", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/client/impl/spi/ClientHazelcastRunningInForkJoinPoolTest.java b/hazelcast/src/test/java/com/hazelcast/client/impl/spi/ClientHazelcastRunningInForkJoinPoolTest.java\nindex a9a345756b8..ac553577817 100644\n--- a/hazelcast/src/test/java/com/hazelcast/client/impl/spi/ClientHazelcastRunningInForkJoinPoolTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/client/impl/spi/ClientHazelcastRunningInForkJoinPoolTest.java\n\n@@ -36,7 +36,6 @@ import org.junit.runner.RunWith;\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.concurrent.Callable;\n import java.util.concurrent.ForkJoinPool;\n import java.util.concurrent.Future;\n \n"}}, {"oid": "8aef29ab2d43bd0fd77de4daf0cd86565de78f67", "url": "https://github.com/hazelcast/hazelcast/commit/8aef29ab2d43bd0fd77de4daf0cd86565de78f67", "message": "Address Vassilis reviews", "committedDate": "2021-02-02T11:21:52Z", "type": "forcePushed"}, {"oid": "28a1859d7cd04ba14c4758abf1d6ff8d8228b8de", "url": "https://github.com/hazelcast/hazelcast/commit/28a1859d7cd04ba14c4758abf1d6ff8d8228b8de", "message": "Address Vassilis reviews 2", "committedDate": "2021-02-03T09:22:52Z", "type": "forcePushed"}, {"oid": "bd7551542b8360a029e2e4185846929c46a02ee8", "url": "https://github.com/hazelcast/hazelcast/commit/bd7551542b8360a029e2e4185846929c46a02ee8", "message": "remove leftover", "committedDate": "2021-02-03T14:45:27Z", "type": "forcePushed"}, {"oid": "ac2f5172d34c10310a58d2ccd89426a34277b30d", "url": "https://github.com/hazelcast/hazelcast/commit/ac2f5172d34c10310a58d2ccd89426a34277b30d", "message": "Implement ManagedBlocker for proxy futures\nand AbstractInvocationFuture", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "0528eea65030ef2339ce92fbbaf2cc31ca703a25", "url": "https://github.com/hazelcast/hazelcast/commit/0528eea65030ef2339ce92fbbaf2cc31ca703a25", "message": "add new test", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "475ad44da950a3dd3e350bff445677f91d6283ac", "url": "https://github.com/hazelcast/hazelcast/commit/475ad44da950a3dd3e350bff445677f91d6283ac", "message": "typo", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "85568431fd08fec86e91eb630aaac7b9a7172ca1", "url": "https://github.com/hazelcast/hazelcast/commit/85568431fd08fec86e91eb630aaac7b9a7172ca1", "message": "Address Vassilis reviews", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "b9c551c337115bddea05b4c959820d7e60cd554d", "url": "https://github.com/hazelcast/hazelcast/commit/b9c551c337115bddea05b4c959820d7e60cd554d", "message": "Address Vassilis reviews 2", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "21e2884860913d3fa7be741122b150b5779851e4", "url": "https://github.com/hazelcast/hazelcast/commit/21e2884860913d3fa7be741122b150b5779851e4", "message": "fix checkstyle", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "054ffe7250f34d3156edbb9438775924552453dd", "url": "https://github.com/hazelcast/hazelcast/commit/054ffe7250f34d3156edbb9438775924552453dd", "message": "remove leftover", "committedDate": "2021-02-04T09:06:01Z", "type": "commit"}, {"oid": "054ffe7250f34d3156edbb9438775924552453dd", "url": "https://github.com/hazelcast/hazelcast/commit/054ffe7250f34d3156edbb9438775924552453dd", "message": "remove leftover", "committedDate": "2021-02-04T09:06:01Z", "type": "forcePushed"}]}