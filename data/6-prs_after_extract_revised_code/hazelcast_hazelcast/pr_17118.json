{"pr_number": 17118, "pr_title": "Add support for incorporating IMDG rels into Jet", "pr_createdAt": "2020-06-22T08:45:12Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17118", "timeline": [{"oid": "115bc7ad9da1e1a1a1a6bbc6e0aa4fea5c576e6e", "url": "https://github.com/hazelcast/hazelcast/commit/115bc7ad9da1e1a1a1a6bbc6e0aa4fea5c576e6e", "message": "Add support for running IMDG plans on Jet", "committedDate": "2020-06-19T14:52:49Z", "type": "commit"}, {"oid": "98ab0476df25703cea3f49f3c403028ff5ab448a", "url": "https://github.com/hazelcast/hazelcast/commit/98ab0476df25703cea3f49f3c403028ff5ab448a", "message": "Fix checkstyle", "committedDate": "2020-06-22T10:30:45Z", "type": "commit"}, {"oid": "85eecd8d70688ec581c9c0575954660a3c3e8fdf", "url": "https://github.com/hazelcast/hazelcast/commit/85eecd8d70688ec581c9c0575954660a3c3e8fdf", "message": "Fix checkstyle", "committedDate": "2020-06-22T12:08:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MTI0Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444141246", "bodyText": "This check should be performed in the rule pattern, rather than the rule's body.\nAn example of how to add a custom predicate to rule patterns could be found in the ProjectIntoScanLogicalRule constructor.", "author": "devozerov", "createdAt": "2020-06-23T11:04:02Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java", "diffHunk": "@@ -37,6 +39,11 @@ private MapScanLogicalRule() {\n     @Override\n     public RelNode convert(RelNode rel) {\n         LogicalTableScan scan = (LogicalTableScan) rel;\n+        HazelcastTable table = scan.getTable().unwrap(HazelcastTable.class);\n+        if (!(table.getTarget() instanceof AbstractMapTable)) {", "originalCommit": "85eecd8d70688ec581c9c0575954660a3c3e8fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNzgwMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444227801", "bodyText": "fixed", "author": "viliam-durina", "createdAt": "2020-06-23T13:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bbeac4f6addba82a3e8272d2bf3933c86629844a", "chunk": "diff --git a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java\nindex bfa0a599f7e..6c101fcee89 100644\n--- a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java\n+++ b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/logical/MapScanLogicalRule.java\n\n@@ -33,17 +36,18 @@ public final class MapScanLogicalRule extends ConverterRule {\n     public static final RelOptRule INSTANCE = new MapScanLogicalRule();\n \n     private MapScanLogicalRule() {\n-        super(LogicalTableScan.class, Convention.NONE, HazelcastConventions.LOGICAL, MapScanLogicalRule.class.getSimpleName());\n+        super(LogicalTableScan.class,\n+                (Predicate<LogicalTableScan>) scan -> {\n+                    HazelcastTable table = scan.getTable().unwrap(HazelcastTable.class);\n+                    return table.getTarget() instanceof AbstractMapTable;\n+                },\n+                Convention.NONE, HazelcastConventions.LOGICAL, RelFactories.LOGICAL_BUILDER, MapScanLogicalRule.class.getSimpleName());\n     }\n \n     @Override\n     public RelNode convert(RelNode rel) {\n         LogicalTableScan scan = (LogicalTableScan) rel;\n-        HazelcastTable table = scan.getTable().unwrap(HazelcastTable.class);\n-        if (!(table.getTarget() instanceof AbstractMapTable)) {\n-            // if the table isn't IMDG table (can be Jet's), ignore it\n-            return null;\n-        }\n+        assert scan.getTable().unwrap(HazelcastTable.class).getTarget() instanceof AbstractMapTable;\n \n         return new MapScanLogicalRel(\n             scan.getCluster(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444144378", "bodyText": "We do not pass NodeEngine for a reason - we do not want to leak internals everywhere, because it breaks decomposition and makes testing harder. Moreover, this refactoring will make merge with master harder, because PlanCreateVisitor is already in master.\nIn general, we should avoid refactorings for now unless there are strong reasons to do so, to minimize wasted work. If refactoring is needed, then it should be performed through pr -> master -> sql flow.", "author": "devozerov", "createdAt": "2020-06-23T11:10:47Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java", "diffHunk": "@@ -159,21 +164,33 @@\n     /** Row metadata. */\n     private SqlRowMetadata rowMetadata;\n \n+    /**\n+     * @param rootColumnNames Root column names. They are null when called from\n+     *     Jet for a sub-relNode and the row metadata aren't needed\n+     */\n     public PlanCreateVisitor(\n-        UUID localMemberId,\n-        Map<UUID, PartitionIdSet> partMap,\n+        NodeEngine nodeEngine,", "originalCommit": "85eecd8d70688ec581c9c0575954660a3c3e8fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIyNzI3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444227277", "bodyText": "There are already changes to PlanCreateVisitor in sql that I needed to change, 3 arguments are added to the constructor: sql, parameterMetadata and rootColumnNames. Will these go to 4.1? If not, then I can do my change against master. If yes, then it's probably better to do them to sql.", "author": "viliam-durina", "createdAt": "2020-06-23T13:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0MzMyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r445543326", "bodyText": "sql is not really used at the moment, so it can be deleted safely from PlanCreateVisitor in the sql branch.\nRegarding, parameterMetadata and rootColumnNames, these changes will be merged to master soon as a part of public API PR.\nMy point is that changes to PlanCreateVisitor appear to be a small refactoring that doesn't change anything from the IMDG perspective. In this case, we should either avoid them altogether or make them through a master branch to minimize engineering time spent on conflict resolution.\nBut as I mentioned before, not passing NodeEngine to classes when possible was a conscious decision - we do not like such objects to leak without a strong reason, because it promotes bad class design in the longer perspective. AFAIU the reason for this change - to avoid duplication of partition map calculation. In this case, we may just move the method that calculates partition map to a separate utility method and invoke it from Jet. This way we will avoid both code duplication in Jet and NodeEngine leak.", "author": "devozerov", "createdAt": "2020-06-25T13:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NDM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "8fd3f4536e46635d02b78d70792dedd8c69371be", "chunk": "diff --git a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\nindex cba3c06abcb..c0ed5a72cac 100644\n--- a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\n+++ b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/opt/physical/visitor/PlanCreateVisitor.java\n\n@@ -169,29 +169,35 @@ public class PlanCreateVisitor implements PhysicalRelVisitor {\n      *     Jet for a sub-relNode and the row metadata aren't needed\n      */\n     public PlanCreateVisitor(\n-        NodeEngine nodeEngine,\n+        UUID localMemberId,\n+        Map<UUID, PartitionIdSet> partMap,\n         Map<PhysicalRel, List<Integer>> relIdMap,\n         String sql,\n         QueryParameterMetadata parameterMetadata,\n         @Nullable List<String> rootColumnNames\n     ) {\n-        this.localMemberId = nodeEngine.getLocalMember().getUuid();\n+        this.localMemberId = localMemberId;\n+        this.partMap = partMap;\n         this.relIdMap = relIdMap;\n         this.sql = sql;\n         this.parameterMetadata = parameterMetadata;\n         this.rootColumnNames = rootColumnNames;\n \n+        memberIds = new HashSet<>(partMap.keySet());\n+    }\n+\n+    public static Map<UUID, PartitionIdSet> createPartitionMap(NodeEngine nodeEngine) {\n         // Get partition mapping.\n         Collection<Partition> parts = nodeEngine.getHazelcastInstance().getPartitionService().getPartitions();\n         int partCnt = parts.size();\n-        partMap = new LinkedHashMap<>();\n+        Map<UUID, PartitionIdSet> partMap = new LinkedHashMap<>();\n \n         for (Partition part : parts) {\n             UUID ownerId = part.getOwner().getUuid();\n             partMap.computeIfAbsent(ownerId, (key) -> new PartitionIdSet(partCnt)).add(part.getPartitionId());\n         }\n \n-        memberIds = new HashSet<>(partMap.keySet());\n+        return partMap;\n     }\n \n     public Plan getPlan() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NjIyMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444146222", "bodyText": "What was the reason to remove this assertion?", "author": "devozerov", "createdAt": "2020-06-23T11:14:48Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/row/ListRowBatch.java", "diffHunk": "@@ -42,8 +42,6 @@ public ListRowBatch(List<Row> rows) {\n \n     @Override\n     public Row getRow(int index) {\n-        assert index >= 0 && index < rows.size() : index;", "originalCommit": "85eecd8d70688ec581c9c0575954660a3c3e8fdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Nzc4Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444197782", "bodyText": "It's superfluous, the next line does the same check anyway.", "author": "viliam-durina", "createdAt": "2020-06-23T12:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0NjIyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0ODU3Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r444148573", "bodyText": "Previously I reverted all changes from this class related to external tables for a reason - to keep a single responsibility principle in place.\nThe goal of PartitionedMapTableResolver is to expose existing maps through a predefined schema. We should not add external fields handling here. The same is applicable to ReplicatedMapTableResolver.\nIf there are some static methods that are common for both internal and external resolvers, let's factor them out, instead of mixing unrelated concepts inside a single class.", "author": "devozerov", "createdAt": "2020-06-23T11:19:52Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java", "diffHunk": "@@ -101,103 +101,129 @@ public PartitionedMapTableResolver(NodeEngine nodeEngine) {\n         return res;\n     }\n \n-    // TODO: VO: Abstract out Jet stuff in a clean way.\n-    @SuppressWarnings({\"rawtypes\", \"checkstyle:MethodLength\", \"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n+    /**\n+     * @param explicitRequest True, if the table was requested explicitly\n+     *     through DDL. In this case the result is non-null and the returned\n+     *     table never contains an exception. If false, might return null or a\n+     *     table with an exception.\n+     */\n+    @Nullable\n+    @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n     public static PartitionedMapTable createTable(", "originalCommit": "85eecd8d70688ec581c9c0575954660a3c3e8fdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9adaa6f03e64873b7df0b3d5b46e5c93778a4e", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\nindex f34a902876e..a419ba92cce 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\n\n@@ -101,32 +95,17 @@ public class PartitionedMapTableResolver extends AbstractMapTableResolver {\n         return res;\n     }\n \n-    /**\n-     * @param explicitRequest True, if the table was requested explicitly\n-     *     through DDL. In this case the result is non-null and the returned\n-     *     table never contains an exception. If false, might return null or a\n-     *     table with an exception.\n-     */\n-    @Nullable\n     @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n-    public static PartitionedMapTable createTable(\n-            @Nonnull NodeEngine nodeEngine,\n-            @Nonnull String schemaName,\n-            @Nonnull String mapName,\n-            @Nonnull Map<String, String> options,\n-            @Nullable List<TableField> fields,\n-            boolean explicitRequest\n+    private static PartitionedMapTable createTable(\n+        NodeEngine nodeEngine,\n+        MapServiceContext context,\n+        String name\n     ) {\n         try {\n-            MapService mapService = nodeEngine.getService(MapService.SERVICE_NAME);\n-            MapServiceContext context = mapService.getMapServiceContext();\n-            MapContainer mapContainer = context.getMapContainer(mapName);\n+            MapContainer mapContainer = context.getMapContainer(name);\n \n             // Handle concurrent map destroy.\n             if (mapContainer == null) {\n-                if (explicitRequest) {\n-                    throw QueryException.error(\"Failed to resolve fields, map doesn't exist: \" + mapName);\n-                }\n                 return null;\n             }\n \n"}}, {"oid": "bbeac4f6addba82a3e8272d2bf3933c86629844a", "url": "https://github.com/hazelcast/hazelcast/commit/bbeac4f6addba82a3e8272d2bf3933c86629844a", "message": "Move the rule check to the constructor", "committedDate": "2020-06-23T13:05:07Z", "type": "commit"}, {"oid": "13927da6c6db613bdb0d1200f11d1abdb3eaa652", "url": "https://github.com/hazelcast/hazelcast/commit/13927da6c6db613bdb0d1200f11d1abdb3eaa652", "message": "Fix checkstyle", "committedDate": "2020-06-23T13:40:30Z", "type": "commit"}, {"oid": "3f9adaa6f03e64873b7df0b3d5b46e5c93778a4e", "url": "https://github.com/hazelcast/hazelcast/commit/3f9adaa6f03e64873b7df0b3d5b46e5c93778a4e", "message": "Refactor createTable into two methods calling shared methods", "committedDate": "2020-06-23T15:43:56Z", "type": "commit"}, {"oid": "cc4b09646a50f8767356f311292eae2e69075251", "url": "https://github.com/hazelcast/hazelcast/commit/cc4b09646a50f8767356f311292eae2e69075251", "message": "Merge branch 'sql' into sql-exec-on-jet2", "committedDate": "2020-06-24T15:23:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU0NDA0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17118#discussion_r445544042", "bodyText": "We may move methods from this class to MapTableUtils, because the latter was created exactly to host static helpers for metadata resolution.", "author": "devozerov", "createdAt": "2020-06-25T13:07:52Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema.map;\n+\n+import com.hazelcast.config.InMemoryFormat;\n+import com.hazelcast.config.MapConfig;\n+import com.hazelcast.internal.serialization.Data;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+import com.hazelcast.map.impl.MapContainer;\n+import com.hazelcast.map.impl.MapServiceContext;\n+import com.hazelcast.map.impl.PartitionContainer;\n+import com.hazelcast.map.impl.record.Record;\n+import com.hazelcast.map.impl.recordstore.RecordStore;\n+import com.hazelcast.sql.impl.QueryException;\n+import com.hazelcast.sql.impl.extract.QueryTargetDescriptor;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadata;\n+import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadataResolver;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class ResolverUtils {", "originalCommit": "cc4b09646a50f8767356f311292eae2e69075251", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05ef2cbd8542741edf8ab678415eb74dc439fa3a", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java\ndeleted file mode 100644\nindex 7fb8041c9b4..00000000000\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ResolverUtils.java\n+++ /dev/null\n\n@@ -1,141 +0,0 @@\n-/*\n- * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.hazelcast.sql.impl.schema.map;\n-\n-import com.hazelcast.config.InMemoryFormat;\n-import com.hazelcast.config.MapConfig;\n-import com.hazelcast.internal.serialization.Data;\n-import com.hazelcast.internal.serialization.InternalSerializationService;\n-import com.hazelcast.map.impl.MapContainer;\n-import com.hazelcast.map.impl.MapServiceContext;\n-import com.hazelcast.map.impl.PartitionContainer;\n-import com.hazelcast.map.impl.record.Record;\n-import com.hazelcast.map.impl.recordstore.RecordStore;\n-import com.hazelcast.sql.impl.QueryException;\n-import com.hazelcast.sql.impl.extract.QueryTargetDescriptor;\n-import com.hazelcast.sql.impl.schema.TableField;\n-import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadata;\n-import com.hazelcast.sql.impl.schema.map.sample.MapSampleMetadataResolver;\n-\n-import javax.annotation.Nullable;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public final class ResolverUtils {\n-\n-    private ResolverUtils() { }\n-\n-    @Nullable\n-    public static ResolveResult resolvePartitionedMap(InternalSerializationService ss, MapServiceContext context, String name) {\n-        MapContainer mapContainer = context.getMapContainer(name);\n-\n-        // Handle concurrent map destroy.\n-        if (mapContainer == null) {\n-            return null;\n-        }\n-\n-        MapConfig config = mapContainer.getMapConfig();\n-\n-        // HD maps are not supported at the moment.\n-        if (config.getInMemoryFormat() == InMemoryFormat.NATIVE) {\n-            throw QueryException.error(\"IMap with InMemoryFormat.NATIVE is not supported: \" + name);\n-        }\n-\n-        boolean binary = config.getInMemoryFormat() == InMemoryFormat.BINARY;\n-\n-        for (PartitionContainer partitionContainer : context.getPartitionContainers()) {\n-            // Resolve sample.\n-            RecordStore<?> recordStore = partitionContainer.getExistingRecordStore(name);\n-\n-            if (recordStore == null) {\n-                continue;\n-            }\n-\n-            Iterator<Map.Entry<Data, Record>> recordStoreIterator = recordStore.iterator();\n-\n-            if (!recordStoreIterator.hasNext()) {\n-                continue;\n-            }\n-\n-            Map.Entry<Data, Record> entry = recordStoreIterator.next();\n-\n-            MapSampleMetadata keyMetadata = MapSampleMetadataResolver.resolve(\n-                    ss,\n-                    entry.getKey(),\n-                    binary,\n-                    true\n-            );\n-\n-            MapSampleMetadata valueMetadata = MapSampleMetadataResolver.resolve(\n-                    ss,\n-                    entry.getValue().getValue(),\n-                    binary,\n-                    false\n-            );\n-\n-            return new ResolveResult(\n-                    mergeMapFields(keyMetadata.getFields(), valueMetadata.getFields()),\n-                    keyMetadata.getDescriptor(),\n-                    valueMetadata.getDescriptor());\n-        }\n-\n-        // no sample entry found on local member\n-        return null;\n-    }\n-\n-    private static List<TableField> mergeMapFields(Map<String, TableField> keyFields, Map<String, TableField> valueFields) {\n-        LinkedHashMap<String, TableField> res = new LinkedHashMap<>(keyFields);\n-\n-        for (Map.Entry<String, TableField> valueFieldEntry : valueFields.entrySet()) {\n-            // Value fields do not override key fields.\n-            res.putIfAbsent(valueFieldEntry.getKey(), valueFieldEntry.getValue());\n-        }\n-\n-        return new ArrayList<>(res.values());\n-    }\n-\n-    public static final class ResolveResult {\n-        private final List<TableField> fields;\n-        private final QueryTargetDescriptor keyDescriptor;\n-        private final QueryTargetDescriptor valueDescriptor;\n-\n-        public ResolveResult(\n-                List<TableField> fields,\n-                QueryTargetDescriptor keyDescriptor,\n-                QueryTargetDescriptor valueDescriptor\n-        ) {\n-            this.fields = fields;\n-            this.keyDescriptor = keyDescriptor;\n-            this.valueDescriptor = valueDescriptor;\n-        }\n-\n-        public List<TableField> getFields() {\n-            return fields;\n-        }\n-\n-        public QueryTargetDescriptor getKeyDescriptor() {\n-            return keyDescriptor;\n-        }\n-\n-        public QueryTargetDescriptor getValueDescriptor() {\n-            return valueDescriptor;\n-        }\n-    }\n-}\n"}}, {"oid": "05ef2cbd8542741edf8ab678415eb74dc439fa3a", "url": "https://github.com/hazelcast/hazelcast/commit/05ef2cbd8542741edf8ab678415eb74dc439fa3a", "message": "Move methods from ResolverUtils to MapTableUtils", "committedDate": "2020-06-25T13:48:13Z", "type": "commit"}, {"oid": "5face6d30bacd5b76a04e2ac758a117c35f01363", "url": "https://github.com/hazelcast/hazelcast/commit/5face6d30bacd5b76a04e2ac758a117c35f01363", "message": "Merge branch 'sql' into sql-exec-on-jet2\n\n# Conflicts:\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalPartitionedMapConnector.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/connector/LocalReplicatedMapConnector.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/schema/ExternalCatalog.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/PartitionedMapTableResolver.java\n#\thazelcast/src/main/java/com/hazelcast/sql/impl/schema/map/ReplicatedMapTableResolver.java\n#\thazelcast/src/test/java/com/hazelcast/sql/impl/schema/ExternalCatalogTest.java", "committedDate": "2020-06-26T06:31:30Z", "type": "commit"}, {"oid": "5c0cb057aacddf89bf5dd37fa1232c4cbf678f44", "url": "https://github.com/hazelcast/hazelcast/commit/5c0cb057aacddf89bf5dd37fa1232c4cbf678f44", "message": "Followup changes", "committedDate": "2020-06-26T12:46:27Z", "type": "commit"}, {"oid": "8fd3f4536e46635d02b78d70792dedd8c69371be", "url": "https://github.com/hazelcast/hazelcast/commit/8fd3f4536e46635d02b78d70792dedd8c69371be", "message": "Remove PlanCreateVisitor dep on NodeEngine", "committedDate": "2020-06-26T12:54:41Z", "type": "commit"}, {"oid": "7b585246a5d859a20515d95a100844e0a8ca33a9", "url": "https://github.com/hazelcast/hazelcast/commit/7b585246a5d859a20515d95a100844e0a8ca33a9", "message": "Fix checkstyle", "committedDate": "2020-06-26T12:58:32Z", "type": "commit"}, {"oid": "cedc2757f5db40b39f4bdbe5105f2842257b82d7", "url": "https://github.com/hazelcast/hazelcast/commit/cedc2757f5db40b39f4bdbe5105f2842257b82d7", "message": "More changes", "committedDate": "2020-06-26T13:37:12Z", "type": "commit"}]}