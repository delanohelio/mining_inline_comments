{"pr_number": 17131, "pr_title": "ExtendedMapEntry extends Map.Entry", "pr_createdAt": "2020-06-26T09:52:52Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17131", "timeline": [{"oid": "16a1af8ce4dc65cbca86243df3ceef38128b819d", "url": "https://github.com/hazelcast/hazelcast/commit/16a1af8ce4dc65cbca86243df3ceef38128b819d", "message": "ExtendedMapEntry extends Map.Entry\n\nUsability enhancement, so that when\na user downcasts the entry in\nEntryProcessor#process(entry)\nthey can use it to access Map.Entry\nmethods.", "committedDate": "2020-06-26T09:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NzMxOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17131#discussion_r446087319", "bodyText": "can we put your example code snippet here in javaDoc?\nclass EntryProc implements EntryProcessor {\n  process(Entry<K, V> e) {\n    ExtendedMapEntry entry = (ExtendedMapEntry) e;\n    if (hasTtl) { \n      entry.setValue(value + 1, 120, SECONDS);\n    } else {\n      // cannot use entry.setValue , need to use e.setValue instead\n      e.setValue(value + 1);\n    }\n  }\n}", "author": "ahmetmircik", "createdAt": "2020-06-26T09:55:28Z", "path": "hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java", "diffHunk": "@@ -56,11 +57,17 @@\n  * otherwise EntryProcessor does not guarantee that it will modify the entry.\n  *<p>\n  * EntryProcessor instances can be shared between threads. If an EntryProcessor instance contains mutable state, proper\n- * concurrency control needs to be provided to coordinate access to mutable state. Another option is to rely on threadlocals.\n+ * concurrency control needs to be provided to coordinate access to mutable state. Another option is to rely\n+ * on {@code ThreadLocal}s.\n+ * <p>\n+ * Since Hazelcast 4.1, an instance of {@link ExtendedMapEntry} is provided as argument in {@link #process(Entry)}\n+ * method.", "originalCommit": "16a1af8ce4dc65cbca86243df3ceef38128b819d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f6fa13f84bf049b437b11de7173dafe3ef8bafc1", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 4b8b19b62d..5ef8b0c930 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n\n@@ -61,7 +61,30 @@ import java.util.Map.Entry;\n  * on {@code ThreadLocal}s.\n  * <p>\n  * Since Hazelcast 4.1, an instance of {@link ExtendedMapEntry} is provided as argument in {@link #process(Entry)}\n- * method.\n+ * method:\n+ * <pre>\n+ * {@code\n+ * class IncrementWithOptionalTtl implements EntryProcessor<Integer, Integer, Void> {\n+ *     private final long ttlSeconds;\n+ *\n+ *     public IncrementWithOptionalTtl(long ttlSeconds) {\n+ *         this.ttlSeconds = ttlSeconds;\n+ *     }\n+ *\n+ *     @Override\n+ *     public Void process(Map.Entry<Integer, Integer> e) {\n+ *         ExtendedMapEntry<Integer, Integer> entry = (ExtendedMapEntry<Integer, Integer>) e;\n+ *         int newValue = entry.getValue() + 1;\n+ *         if (ttlSeconds > 0) {\n+ *             entry.setValue(newValue, ttlSeconds, TimeUnit.SECONDS);\n+ *         } else {\n+ *             entry.setValue(newValue);\n+ *         }\n+ *         return null;\n+ *     }\n+ * }\n+ * }\n+ * </pre>\n  *\n  * @param <K> map entry key type\n  * @param <V> map entry value type\n"}}, {"oid": "f6fa13f84bf049b437b11de7173dafe3ef8bafc1", "url": "https://github.com/hazelcast/hazelcast/commit/f6fa13f84bf049b437b11de7173dafe3ef8bafc1", "message": "Adds code sample in EntryProcessor javadoc", "committedDate": "2020-06-26T10:09:00Z", "type": "commit"}]}