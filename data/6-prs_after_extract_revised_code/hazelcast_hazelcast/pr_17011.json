{"pr_number": 17011, "pr_title": "Map count metric in phonehome with some code refactor", "pr_createdAt": "2020-05-23T13:26:34Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17011", "timeline": [{"oid": "97547abeb23cbbfc8e1bfb697d9fd620364730bc", "url": "https://github.com/hazelcast/hazelcast/commit/97547abeb23cbbfc8e1bfb697d9fd620364730bc", "message": "Unit test for phonehomeparametercreator", "committedDate": "2020-05-14T08:15:20Z", "type": "commit"}, {"oid": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "url": "https://github.com/hazelcast/hazelcast/commit/ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "message": "Map Count metric alongwith code refactor", "committedDate": "2020-05-23T13:24:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMjU1OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430202558", "bodyText": "Please use .equals(MapService.SERVICE_NAME)", "author": "erosb", "createdAt": "2020-05-26T07:16:07Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome.metrics;\n+\n+import com.hazelcast.core.DistributedObject;\n+\n+import java.util.Collection;\n+\n+import com.hazelcast.instance.impl.Node;\n+\n+public class MapMetrics {\n+\n+    Node hazelcastNode;\n+    Collection<DistributedObject> maps;\n+\n+    public MapMetrics(Node node) {\n+        hazelcastNode = node;\n+        findMaps();\n+    }\n+\n+    private void findMaps() {\n+        maps = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        for (DistributedObject distributedObject : maps) {\n+            String serviceName = distributedObject.getServiceName();\n+            if (!serviceName.endsWith(\"mapService\")) {", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\nindex 8512672251..e39fd34fbc 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\n\n@@ -18,8 +18,10 @@ package com.hazelcast.internal.util.phonehome.metrics;\n import com.hazelcast.core.DistributedObject;\n \n import java.util.Collection;\n+import java.util.stream.Collectors;\n \n import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n \n public class MapMetrics {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzMzMzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430233335", "bodyText": "It would be better to create a new collection instead of mutating the collection returned by #getDistributedObjects(). Can you implement it with the stream API?", "author": "erosb", "createdAt": "2020-05-26T08:13:01Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome.metrics;\n+\n+import com.hazelcast.core.DistributedObject;\n+\n+import java.util.Collection;\n+\n+import com.hazelcast.instance.impl.Node;\n+\n+public class MapMetrics {\n+\n+    Node hazelcastNode;\n+    Collection<DistributedObject> maps;\n+\n+    public MapMetrics(Node node) {\n+        hazelcastNode = node;\n+        findMaps();\n+    }\n+\n+    private void findMaps() {\n+        maps = hazelcastNode.hazelcastInstance.getDistributedObjects();", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\nindex 8512672251..e39fd34fbc 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapMetrics.java\n\n@@ -18,8 +18,10 @@ package com.hazelcast.internal.util.phonehome.metrics;\n import com.hazelcast.core.DistributedObject;\n \n import java.util.Collection;\n+import java.util.stream.Collectors;\n \n import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n \n public class MapMetrics {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDI3Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430234273", "bodyText": "Are these parameters.clear() calls necessary?", "author": "erosb", "createdAt": "2020-05-26T08:14:42Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java", "diffHunk": "@@ -133,5 +132,23 @@ public void testConvertToLetter() {\n         assertEquals(\"J\", phoneHome.convertToLetter(599));\n         assertEquals(\"I\", phoneHome.convertToLetter(1000));\n     }\n+\n+    @Test\n+    public void testMapCount() {\n+        HazelcastInstance hz = createHazelcastInstance();\n+        Node node = getNode(hz);\n+        PhoneHome phoneHome = new PhoneHome(node);\n+        Map<String, String> parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"mpct\"), \"0\");\n+        Map<String, String> map1 = hz.getMap(\"hazelcast\");\n+        Map<String, String> map2 = hz.getMap(\"phonehome\");\n+        parameters.clear();\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"mpct\"), \"2\");\n+        Map<String, String> map3 = hz.getMap(\"maps\");\n+        parameters.clear();", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\nindex 8feaffefb4..375c7f31ce 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n\n@@ -120,17 +120,18 @@ public class PhoneHomeTest extends HazelcastTestSupport {\n     public void testConvertToLetter() {\n         HazelcastInstance hz = createHazelcastInstance();\n         Node node = getNode(hz);\n-        PhoneHome phoneHome = new PhoneHome(node);\n-        assertEquals(\"A\", phoneHome.convertToLetter(4));\n-        assertEquals(\"B\", phoneHome.convertToLetter(9));\n-        assertEquals(\"C\", phoneHome.convertToLetter(19));\n-        assertEquals(\"D\", phoneHome.convertToLetter(39));\n-        assertEquals(\"E\", phoneHome.convertToLetter(59));\n-        assertEquals(\"F\", phoneHome.convertToLetter(99));\n-        assertEquals(\"G\", phoneHome.convertToLetter(149));\n-        assertEquals(\"H\", phoneHome.convertToLetter(299));\n-        assertEquals(\"J\", phoneHome.convertToLetter(599));\n-        assertEquals(\"I\", phoneHome.convertToLetter(1000));\n+//        PhoneHome phoneHome = new PhoneHome(node);\n+        MetricsCollectorImpl metricsCollector=new MetricsCollectorImpl(node);\n+        assertEquals(\"A\", metricsCollector.convertToLetter(4));\n+        assertEquals(\"B\", metricsCollector.convertToLetter(9));\n+        assertEquals(\"C\", metricsCollector.convertToLetter(19));\n+        assertEquals(\"D\", metricsCollector.convertToLetter(39));\n+        assertEquals(\"E\", metricsCollector.convertToLetter(59));\n+        assertEquals(\"F\", metricsCollector.convertToLetter(99));\n+        assertEquals(\"G\", metricsCollector.convertToLetter(149));\n+        assertEquals(\"H\", metricsCollector.convertToLetter(299));\n+        assertEquals(\"J\", metricsCollector.convertToLetter(599));\n+        assertEquals(\"I\", metricsCollector.convertToLetter(1000));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MDA5MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430240090", "bodyText": "I suggest encoding the above 4 assertions in a single call: assertEquals(ImmutableMap.of(\"1\", \"hazelcast\", \"2\", \"phonehome\"), map);.\nIn general it is a good practice to check the expected output in one assertion, instead of checking its pieces separately.\nAlso, in these assertEquals() calls the expected and the actual values are mixed up. First should come the expected, then second the actual. Of course it works this way too, but if the assertion fails, then the output becomes confusing if the expected and actual are swapped, so it is useful to always put them in the correct order.", "author": "erosb", "createdAt": "2020-05-26T08:24:58Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class PhoneHomeParameterCreatorTest {\n+\n+    @Test\n+    public void testPhoneHomeParameterCreator() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        phoneHomeParameterCreator.addParam(\"1\", \"hazelcast\");\n+        phoneHomeParameterCreator.addParam(\"2\", \"phonehome\");\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(phoneHomeParameterCreator.build(), \"?1=hazelcast&2=phonehome\");\n+        assertNotNull(map);\n+        assertEquals(map.get(\"1\"), \"hazelcast\");\n+        assertEquals(map.get(\"2\"), \"phonehome\");\n+        assertNull(map.get(\"3\"));", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\nindex 67f64fcd7c..7d4f3604cb 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package com.hazelcast.internal.util.phonehome;\n \n+import com.google.common.collect.ImmutableMap;\n import com.hazelcast.test.HazelcastParallelClassRunner;\n import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MTUwOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430241509", "bodyText": "nit: you can use Collections.emptyMap() here.", "author": "erosb", "createdAt": "2020-05-26T08:27:24Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class PhoneHomeParameterCreatorTest {\n+\n+    @Test\n+    public void testPhoneHomeParameterCreator() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        phoneHomeParameterCreator.addParam(\"1\", \"hazelcast\");\n+        phoneHomeParameterCreator.addParam(\"2\", \"phonehome\");\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(phoneHomeParameterCreator.build(), \"?1=hazelcast&2=phonehome\");\n+        assertNotNull(map);\n+        assertEquals(map.get(\"1\"), \"hazelcast\");\n+        assertEquals(map.get(\"2\"), \"phonehome\");\n+        assertNull(map.get(\"3\"));\n+    }\n+\n+    @Test\n+    public void testEmptyParameter() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertNotNull(map);\n+        assertEquals(map, new HashMap<>());", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\nindex 67f64fcd7c..7d4f3604cb 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package com.hazelcast.internal.util.phonehome;\n \n+import com.google.common.collect.ImmutableMap;\n import com.hazelcast.test.HazelcastParallelClassRunner;\n import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MTYzMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430241632", "bodyText": "is this necessary?", "author": "erosb", "createdAt": "2020-05-26T08:27:36Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class PhoneHomeParameterCreatorTest {\n+\n+    @Test\n+    public void testPhoneHomeParameterCreator() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        phoneHomeParameterCreator.addParam(\"1\", \"hazelcast\");\n+        phoneHomeParameterCreator.addParam(\"2\", \"phonehome\");\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(phoneHomeParameterCreator.build(), \"?1=hazelcast&2=phonehome\");\n+        assertNotNull(map);\n+        assertEquals(map.get(\"1\"), \"hazelcast\");\n+        assertEquals(map.get(\"2\"), \"phonehome\");\n+        assertNull(map.get(\"3\"));\n+    }\n+\n+    @Test\n+    public void testEmptyParameter() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertNotNull(map);", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\nindex 67f64fcd7c..7d4f3604cb 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n\n@@ -15,6 +15,7 @@\n  */\n package com.hazelcast.internal.util.phonehome;\n \n+import com.google.common.collect.ImmutableMap;\n import com.hazelcast.test.HazelcastParallelClassRunner;\n import com.hazelcast.test.annotation.ParallelJVMTest;\n import com.hazelcast.test.annotation.QuickTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MzUzNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r430253536", "bodyText": "Given that there will be several other metrics being collected, it would be better not to wrap all the metric collector calls into separate private methods of PhoneHome.\nWe can assume that there will be several further metric collector classes. Instead of using them in separate methods, it would be more concise if\n\nthere would be a MetricCollector interface\nthe PhoneHome would have a List<MetricCollector> collectors field, with a hardcoded list as its value\nthe PhoneHome would iterate on the collectors list, use them to compute the metric values, and put the values into the PhoneHomeParameterCreator instance.\n\nFor now we can also assume that\n\na single MetricCollector implementation will compute multiple metrics\nthe MetricCollector implementations can do its job given a Node, no other data source is necessary for it.\n\nGiven these guidelines, can you design the MetricCollector interface?\nAs the following step, can you further simplify the PhoneHome by extracting the cluster info and build info related metrics into MetricCollector implementations?", "author": "erosb", "createdAt": "2020-05-26T08:47:20Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java", "diffHunk": "@@ -223,4 +238,12 @@ private void addClientInfo(PhoneHomeParameterCreator parameterCreator) {\n                 .addParam(\"cpy\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.PYTHON_CLIENT, 0)))\n                 .addParam(\"cgo\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.GO_CLIENT, 0)));\n     }\n+\n+    private void addMapInfo(PhoneHomeParameterCreator parameterCreator) {", "originalCommit": "ad2e26b0a0dcb2525e0d51a55d784a7ef8612385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\nindex 1432a2a936..0d3ecdcff1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n\n@@ -187,63 +121,4 @@ public class PhoneHome {\n         }\n     }\n \n-    private void addBuildInfo(PhoneHomeParameterCreator parameterCreator) {\n-        JetBuildInfo jetBuildInfo = hazelcastNode.getBuildInfo().getJetBuildInfo();\n-        parameterCreator\n-                .addParam(\"p\", getDownloadId())\n-                .addParam(\"cssz\", convertToLetter(hazelcastNode.clientEngine.getClientEndpointCount()))\n-                .addParam(\"jvmv\", System.getProperty(\"java.version\"))\n-                .addParam(\"version\", buildInfo.getVersion())\n-                .addParam(\"jetv\", jetBuildInfo == null ? \"\" : jetBuildInfo.getVersion());\n-\n-    }\n-\n-    private void addClusterInfo(PhoneHomeParameterCreator parameterCreator) {\n-        ClusterServiceImpl clusterService = hazelcastNode.getClusterService();\n-        int clusterSize = clusterService.getMembers().size();\n-        long clusterUpTime = clusterService.getClusterClock().getClusterUpTime();\n-        RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\n-        parameterCreator\n-                .addParam(\"m\", hazelcastNode.getThisUuid().toString())\n-                .addParam(\"c\", clusterService.getClusterId().toString())\n-                .addParam(\"crsz\", convertToLetter(clusterSize))\n-                .addParam(\"cuptm\", Long.toString(clusterUpTime))\n-                .addParam(\"nuptm\", Long.toString(runtimeMxBean.getUptime()))\n-                .addParam(\"jvmn\", runtimeMxBean.getVmName());\n-\n-    }\n-\n-    private void addOSInfo(PhoneHomeParameterCreator parameterCreator) {\n-        OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();\n-        try {\n-            parameterCreator\n-                    .addParam(\"osn\", osMxBean.getName())\n-                    .addParam(\"osa\", osMxBean.getArch())\n-                    .addParam(\"osv\", osMxBean.getVersion());\n-        } catch (SecurityException e) {\n-            parameterCreator\n-                    .addParam(\"osn\", \"N/A\")\n-                    .addParam(\"osa\", \"N/A\")\n-                    .addParam(\"osv\", \"N/A\");\n-        }\n-    }\n-\n-    private void addClientInfo(PhoneHomeParameterCreator parameterCreator) {\n-        Map<String, Integer> clusterClientStats = hazelcastNode.clientEngine.getConnectedClientStats();\n-        parameterCreator\n-                .addParam(\"ccpp\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.CPP_CLIENT, 0)))\n-                .addParam(\"cdn\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.CSHARP_CLIENT, 0)))\n-                .addParam(\"cjv\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.JAVA_CLIENT, 0)))\n-                .addParam(\"cnjs\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.NODEJS_CLIENT, 0)))\n-                .addParam(\"cpy\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.PYTHON_CLIENT, 0)))\n-                .addParam(\"cgo\", Integer.toString(clusterClientStats.getOrDefault(ConnectionType.GO_CLIENT, 0)));\n-    }\n-\n-    private void addMapInfo(PhoneHomeParameterCreator parameterCreator) {\n-        MapMetrics mapmetrics = new MapMetrics(hazelcastNode);\n-        parameterCreator.addParam(\"mpct\", String.valueOf(mapmetrics.getMapCount()));\n-\n-    }\n-\n-\n }\n"}}, {"oid": "d19708a72a8b9134403ed1e5decf3fc990857fe9", "url": "https://github.com/hazelcast/hazelcast/commit/d19708a72a8b9134403ed1e5decf3fc990857fe9", "message": "Updates with requested changes", "committedDate": "2020-05-26T10:42:21Z", "type": "commit"}, {"oid": "1563bb41202f6d4ea8bad11838ed6f34f785289f", "url": "https://github.com/hazelcast/hazelcast/commit/1563bb41202f6d4ea8bad11838ed6f34f785289f", "message": "checkstyle,spotbugs removal", "committedDate": "2020-05-26T11:00:45Z", "type": "commit"}, {"oid": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "url": "https://github.com/hazelcast/hazelcast/commit/5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "message": "Updated with required changes", "committedDate": "2020-05-26T12:27:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTEyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431171128", "bodyText": "nit: it would be cleaner to create this list as a field. You can use java.util.Arrays.asList(...) to create the array, instead of adding the values to an ArrayList.", "author": "erosb", "createdAt": "2020-05-27T14:22:22Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java", "diffHunk": "@@ -140,47 +103,21 @@ public String convertToLetter(int size) {\n     }\n \n     public PhoneHomeParameterCreator createParameters() {\n-        ClusterServiceImpl clusterService = hazelcastNode.getClusterService();\n-        int clusterSize = clusterService.getMembers().size();\n-        Long clusterUpTime = clusterService.getClusterClock().getClusterUpTime();\n-        RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\n-        JetBuildInfo jetBuildInfo = hazelcastNode.getBuildInfo().getJetBuildInfo();\n-\n-        PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator()\n-                .addParam(\"version\", buildInfo.getVersion())\n-                .addParam(\"m\", hazelcastNode.getThisUuid().toString())\n-                .addParam(\"p\", getDownloadId())\n-                .addParam(\"c\", clusterService.getClusterId().toString())\n-                .addParam(\"crsz\", convertToLetter(clusterSize))\n-                .addParam(\"cssz\", convertToLetter(hazelcastNode.clientEngine.getClientEndpointCount()))\n-                .addParam(\"cuptm\", Long.toString(clusterUpTime))\n-                .addParam(\"nuptm\", Long.toString(runtimeMxBean.getUptime()))\n-                .addParam(\"jvmn\", runtimeMxBean.getVmName())\n-                .addParam(\"jvmv\", System.getProperty(\"java.version\"))\n-                .addParam(\"jetv\", jetBuildInfo == null ? \"\" : jetBuildInfo.getVersion());\n-        addClientInfo(parameterCreator);\n-        addOSInfo(parameterCreator);\n+\n+        PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator();\n+        List<MetricsCollector> metricsCollectorList = new ArrayList<>();\n+        metricsCollectorList.add(new BuildInfoCollector());\n+        metricsCollectorList.add(new ClusterInfoCollector());\n+        metricsCollectorList.add(new ClientInfoCollector());\n+        metricsCollectorList.add(new MapInfoCollector());\n+        metricsCollectorList.add(new OSInfoCollector());", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\nindex 1999f00b78..ff9c5498bc 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n\n@@ -105,12 +105,11 @@ public class PhoneHome {\n     public PhoneHomeParameterCreator createParameters() {\n \n         PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator();\n-        List<MetricsCollector> metricsCollectorList = new ArrayList<>();\n-        metricsCollectorList.add(new BuildInfoCollector());\n-        metricsCollectorList.add(new ClusterInfoCollector());\n-        metricsCollectorList.add(new ClientInfoCollector());\n-        metricsCollectorList.add(new MapInfoCollector());\n-        metricsCollectorList.add(new OSInfoCollector());\n+\n+        MetricsCollector[] metricsCollectorArray = new MetricsCollector[]{new BuildInfoCollector(),\n+                new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(), new OSInfoCollector()};\n+\n+        List<MetricsCollector> metricsCollectorList = Arrays.asList(metricsCollectorArray);\n \n         metricsCollectorList.forEach((metricsCollector -> parameterCreator.\n                 addMap(metricsCollector.computeMetrics(hazelcastNode))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MzMyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431173326", "bodyText": "It would be a nice improvement to check if the parameters map already contains the new key to be added, and throw an IllegalArgumentException in that case. It would help to ensure that the map keys returned by the collectors are unique, to avoid accidentally using the a key for multiple purposes. Please also add a unittest to PhoneHomeParameterCreator covering this check.", "author": "erosb", "createdAt": "2020-05-27T14:25:01Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java", "diffHunk": "@@ -41,7 +41,7 @@ public PhoneHomeParameterCreator() {\n         return parameters;\n     }\n \n-    public PhoneHomeParameterCreator addParam(String key, String value) {\n+    public void addParam(String key, String value) {", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\nindex 6f7756a6e7..9917068b76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\n\n@@ -43,6 +43,10 @@ public class PhoneHomeParameterCreator {\n \n     public void addParam(String key, String value) {\n \n+        if (parameters.containsKey(key)) {\n+            throw new IllegalArgumentException();\n+        }\n+\n         if (hasParameterBefore) {\n             builder.append(\"&\");\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MzY5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431173694", "bodyText": "Nice.", "author": "erosb", "createdAt": "2020-05-27T14:25:29Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java", "diffHunk": "@@ -54,11 +54,15 @@ public PhoneHomeParameterCreator addParam(String key, String value) {\n             throw rethrow(e);\n         }\n         parameters.put(key, value);\n-        return this;\n     }\n \n     String build() {\n         return builder.toString();\n     }\n+\n+    public void addMap(Map<String, String> map) {\n+        map.forEach(this::addParam);", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzE4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431177185", "bodyText": "This is a duplicate of the same method in BuildInfoCollector. Please extract it into a common place. I suggest extracting it as a static method of the MetricCollector interface. Since it is used by the implementations of the interface, it is a good-enough approach.", "author": "erosb", "createdAt": "2020-05-27T14:29:21Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/ClusterInfoCollector.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome.metrics;\n+\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.cluster.impl.ClusterServiceImpl;\n+import com.hazelcast.internal.util.phonehome.MetricsCollector;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ClusterInfoCollector implements MetricsCollector {\n+\n+    private static final int A_INTERVAL = 5;\n+    private static final int B_INTERVAL = 10;\n+    private static final int C_INTERVAL = 20;\n+    private static final int D_INTERVAL = 40;\n+    private static final int E_INTERVAL = 60;\n+    private static final int F_INTERVAL = 100;\n+    private static final int G_INTERVAL = 150;\n+    private static final int H_INTERVAL = 300;\n+    private static final int J_INTERVAL = 600;\n+\n+    public String convertToLetter(int size) {", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/ClusterInfoCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/ClusterInfoCollector.java\nindex f02ba0470a..a56c354f41 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/ClusterInfoCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/ClusterInfoCollector.java\n\n@@ -26,41 +26,6 @@ import java.util.Map;\n \n public class ClusterInfoCollector implements MetricsCollector {\n \n-    private static final int A_INTERVAL = 5;\n-    private static final int B_INTERVAL = 10;\n-    private static final int C_INTERVAL = 20;\n-    private static final int D_INTERVAL = 40;\n-    private static final int E_INTERVAL = 60;\n-    private static final int F_INTERVAL = 100;\n-    private static final int G_INTERVAL = 150;\n-    private static final int H_INTERVAL = 300;\n-    private static final int J_INTERVAL = 600;\n-\n-    public String convertToLetter(int size) {\n-        String letter;\n-        if (size < A_INTERVAL) {\n-            letter = \"A\";\n-        } else if (size < B_INTERVAL) {\n-            letter = \"B\";\n-        } else if (size < C_INTERVAL) {\n-            letter = \"C\";\n-        } else if (size < D_INTERVAL) {\n-            letter = \"D\";\n-        } else if (size < E_INTERVAL) {\n-            letter = \"E\";\n-        } else if (size < F_INTERVAL) {\n-            letter = \"F\";\n-        } else if (size < G_INTERVAL) {\n-            letter = \"G\";\n-        } else if (size < H_INTERVAL) {\n-            letter = \"H\";\n-        } else if (size < J_INTERVAL) {\n-            letter = \"J\";\n-        } else {\n-            letter = \"I\";\n-        }\n-        return letter;\n-    }\n \n     @Override\n     public Map<String, String> computeMetrics(Node hazelcastNode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3ODg0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431178842", "bodyText": "nit: please static-import Collectors.toList(). That reads better, since collect(toList()) is almost the same as \"collect into a list\" in English.", "author": "erosb", "createdAt": "2020-05-27T14:30:43Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome.metrics;\n+\n+import com.hazelcast.core.DistributedObject;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.util.phonehome.MetricsCollector;\n+import com.hazelcast.map.impl.MapService;\n+\n+public class MapInfoCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> maps;\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        maps = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(MapService.SERVICE_NAME)).collect(Collectors.toList());", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java\nindex c6b6cfb20e..da7c6c8636 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java\n\n@@ -20,7 +20,8 @@ import com.hazelcast.core.DistributedObject;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.toList;\n \n import com.hazelcast.instance.impl.Node;\n import com.hazelcast.internal.util.phonehome.MetricsCollector;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MTA4MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431181080", "bodyText": "Since we have the assertEquals(ImmutableMap.of(\"1\", \"hazelcast\", \"2\", \"phonehome\"), map); check now, you can remove the assertNotNull(map); and the assertNull(map.get(\"3\")); assertions, since these are unnecessary. The assertEquals() call covers these conditions.", "author": "erosb", "createdAt": "2020-05-27T14:32:21Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class PhoneHomeParameterCreatorTest {\n+\n+    @Test\n+    public void testPhoneHomeParameterCreator() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        phoneHomeParameterCreator.addParam(\"1\", \"hazelcast\");\n+        phoneHomeParameterCreator.addParam(\"2\", \"phonehome\");\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(\"?1=hazelcast&2=phonehome\", phoneHomeParameterCreator.build());\n+        assertNotNull(map);", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\nindex 7d4f3604cb..beb5833bda 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n\n@@ -27,8 +27,6 @@ import java.util.Collections;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MjI4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431182283", "bodyText": "Please don't comment out assertions. Can you please  restore them after you extracted convertToLetter() into MetricsCollector ?", "author": "erosb", "createdAt": "2020-05-27T14:33:05Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java", "diffHunk": "@@ -121,17 +120,34 @@ public void testShutdown() {\n     public void testConvertToLetter() {\n         HazelcastInstance hz = createHazelcastInstance();\n         Node node = getNode(hz);\n+//        PhoneHome phoneHome = new PhoneHome(node);\n+//        MetricsCollectorImpl metricsCollector = new MetricsCollectorImpl(node);\n+//        assertEquals(\"A\", metricsCollector.convertToLetter(4));\n+//        assertEquals(\"B\", metricsCollector.convertToLetter(9));\n+//        assertEquals(\"C\", metricsCollector.convertToLetter(19));\n+//        assertEquals(\"D\", metricsCollector.convertToLetter(39));\n+//        assertEquals(\"E\", metricsCollector.convertToLetter(59));\n+//        assertEquals(\"F\", metricsCollector.convertToLetter(99));\n+//        assertEquals(\"G\", metricsCollector.convertToLetter(149));\n+//        assertEquals(\"H\", metricsCollector.convertToLetter(299));\n+//        assertEquals(\"J\", metricsCollector.convertToLetter(599));\n+//        assertEquals(\"I\", metricsCollector.convertToLetter(1000));", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\nindex 54ea83126d..d04b22bcc3 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n\n@@ -118,20 +118,16 @@ public class PhoneHomeTest extends HazelcastTestSupport {\n \n     @Test\n     public void testConvertToLetter() {\n-        HazelcastInstance hz = createHazelcastInstance();\n-        Node node = getNode(hz);\n-//        PhoneHome phoneHome = new PhoneHome(node);\n-//        MetricsCollectorImpl metricsCollector = new MetricsCollectorImpl(node);\n-//        assertEquals(\"A\", metricsCollector.convertToLetter(4));\n-//        assertEquals(\"B\", metricsCollector.convertToLetter(9));\n-//        assertEquals(\"C\", metricsCollector.convertToLetter(19));\n-//        assertEquals(\"D\", metricsCollector.convertToLetter(39));\n-//        assertEquals(\"E\", metricsCollector.convertToLetter(59));\n-//        assertEquals(\"F\", metricsCollector.convertToLetter(99));\n-//        assertEquals(\"G\", metricsCollector.convertToLetter(149));\n-//        assertEquals(\"H\", metricsCollector.convertToLetter(299));\n-//        assertEquals(\"J\", metricsCollector.convertToLetter(599));\n-//        assertEquals(\"I\", metricsCollector.convertToLetter(1000));\n+        assertEquals(\"A\", MetricsCollector.convertToLetter(4));\n+        assertEquals(\"B\", MetricsCollector.convertToLetter(9));\n+        assertEquals(\"C\", MetricsCollector.convertToLetter(19));\n+        assertEquals(\"D\", MetricsCollector.convertToLetter(39));\n+        assertEquals(\"E\", MetricsCollector.convertToLetter(59));\n+        assertEquals(\"F\", MetricsCollector.convertToLetter(99));\n+        assertEquals(\"G\", MetricsCollector.convertToLetter(149));\n+        assertEquals(\"H\", MetricsCollector.convertToLetter(299));\n+        assertEquals(\"J\", MetricsCollector.convertToLetter(599));\n+        assertEquals(\"I\", MetricsCollector.convertToLetter(1000));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NDc1MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r431184751", "bodyText": "nit: usually we use Collections.emptyMap(), since it has inferred generic parameters. Doesn't make a difference in this case though.", "author": "erosb", "createdAt": "2020-05-27T14:34:50Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.ParallelJVMTest;\n+import com.hazelcast.test.annotation.QuickTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category({QuickTest.class, ParallelJVMTest.class})\n+public class PhoneHomeParameterCreatorTest {\n+\n+    @Test\n+    public void testPhoneHomeParameterCreator() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        phoneHomeParameterCreator.addParam(\"1\", \"hazelcast\");\n+        phoneHomeParameterCreator.addParam(\"2\", \"phonehome\");\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(\"?1=hazelcast&2=phonehome\", phoneHomeParameterCreator.build());\n+        assertNotNull(map);\n+        assertEquals(ImmutableMap.of(\"1\", \"hazelcast\", \"2\", \"phonehome\"), map);\n+        assertNull(map.get(\"3\"));\n+    }\n+\n+    @Test\n+    public void testEmptyParameter() {\n+        PhoneHomeParameterCreator phoneHomeParameterCreator = new PhoneHomeParameterCreator();\n+        Map<String, String> map = phoneHomeParameterCreator.getParameters();\n+        assertEquals(Collections.EMPTY_MAP, map);", "originalCommit": "5e31afb13099ce42ab76fd7e34a1c13005de7fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "903880f4429ffe89ff23fa27b687585e3546689b", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\nindex 7d4f3604cb..beb5833bda 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreatorTest.java\n\n@@ -27,8 +27,6 @@ import java.util.Collections;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelJVMTest.class})\n"}}, {"oid": "903880f4429ffe89ff23fa27b687585e3546689b", "url": "https://github.com/hazelcast/hazelcast/commit/903880f4429ffe89ff23fa27b687585e3546689b", "message": "Updates with requested changes", "committedDate": "2020-05-27T18:18:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNzU4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r432017584", "bodyText": "There is no need to keep this method public anymore, since it isn't used from the outside. You can even remove it and just do mapInfo.put(\"mpct\", String.valueOf(maps.size())); in computeMetrics().", "author": "erosb", "createdAt": "2020-05-28T17:52:39Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome.metrics;\n+\n+import com.hazelcast.core.DistributedObject;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.internal.util.phonehome.MetricsCollector;\n+import com.hazelcast.map.impl.MapService;\n+\n+public class MapInfoCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> maps;\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        maps = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(MapService.SERVICE_NAME)).collect(toList());\n+        Map<String, String> mapInfo = new HashMap<>();\n+\n+        mapInfo.put(\"mpct\", String.valueOf(getMapCount()));\n+\n+        return mapInfo;\n+    }\n+\n+    public int getMapCount() {", "originalCommit": "903880f4429ffe89ff23fa27b687585e3546689b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9d72d423d5d7c721ddb32daaf900bb9013d373", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/MapInfoCollector.java\nsimilarity index 82%\nrename from hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java\nrename to hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/MapInfoCollector.java\nindex da7c6c8636..700c4068a3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/metrics/MapInfoCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/MapInfoCollector.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.hazelcast.internal.util.phonehome.metrics;\n+package com.hazelcast.internal.util.phonehome;\n \n import com.hazelcast.core.DistributedObject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNzg1OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r432017859", "bodyText": "Can you please add a proper exception message?", "author": "erosb", "createdAt": "2020-05-28T17:53:11Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java", "diffHunk": "@@ -41,7 +41,11 @@ public PhoneHomeParameterCreator() {\n         return parameters;\n     }\n \n-    public PhoneHomeParameterCreator addParam(String key, String value) {\n+    public void addParam(String key, String value) {\n+\n+        if (parameters.containsKey(key)) {\n+            throw new IllegalArgumentException();", "originalCommit": "903880f4429ffe89ff23fa27b687585e3546689b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9d72d423d5d7c721ddb32daaf900bb9013d373", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\nindex 9917068b76..362f5d759f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHomeParameterCreator.java\n\n@@ -44,7 +44,7 @@ public class PhoneHomeParameterCreator {\n     public void addParam(String key, String value) {\n \n         if (parameters.containsKey(key)) {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Duplicate key found\");\n         }\n \n         if (hasParameterBefore) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxODk2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17011#discussion_r432018965", "bodyText": "Arrays.asList() accepts variable-length argument list, so you can write List<MetricsCollector> metricsCollectorList = Arrays.asList(new BuildInfoCollector(), new ClusterInfoCollector(), ...); and drop the metricsCollectorArray variable.\nAlso please let's make it a field instead of a local variable.", "author": "erosb", "createdAt": "2020-05-28T17:55:14Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java", "diffHunk": "@@ -140,47 +103,20 @@ public String convertToLetter(int size) {\n     }\n \n     public PhoneHomeParameterCreator createParameters() {\n-        ClusterServiceImpl clusterService = hazelcastNode.getClusterService();\n-        int clusterSize = clusterService.getMembers().size();\n-        Long clusterUpTime = clusterService.getClusterClock().getClusterUpTime();\n-        RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\n-        JetBuildInfo jetBuildInfo = hazelcastNode.getBuildInfo().getJetBuildInfo();\n-\n-        PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator()\n-                .addParam(\"version\", buildInfo.getVersion())\n-                .addParam(\"m\", hazelcastNode.getThisUuid().toString())\n-                .addParam(\"p\", getDownloadId())\n-                .addParam(\"c\", clusterService.getClusterId().toString())\n-                .addParam(\"crsz\", convertToLetter(clusterSize))\n-                .addParam(\"cssz\", convertToLetter(hazelcastNode.clientEngine.getClientEndpointCount()))\n-                .addParam(\"cuptm\", Long.toString(clusterUpTime))\n-                .addParam(\"nuptm\", Long.toString(runtimeMxBean.getUptime()))\n-                .addParam(\"jvmn\", runtimeMxBean.getVmName())\n-                .addParam(\"jvmv\", System.getProperty(\"java.version\"))\n-                .addParam(\"jetv\", jetBuildInfo == null ? \"\" : jetBuildInfo.getVersion());\n-        addClientInfo(parameterCreator);\n-        addOSInfo(parameterCreator);\n+\n+        PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator();\n+\n+        MetricsCollector[] metricsCollectorArray = new MetricsCollector[]{new BuildInfoCollector(),\n+                new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(), new OSInfoCollector()};\n+\n+        List<MetricsCollector> metricsCollectorList = Arrays.asList(metricsCollectorArray);", "originalCommit": "903880f4429ffe89ff23fa27b687585e3546689b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9d72d423d5d7c721ddb32daaf900bb9013d373", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\nindex ff9c5498bc..a06bd90612 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/PhoneHome.java\n\n@@ -106,10 +102,8 @@ public class PhoneHome {\n \n         PhoneHomeParameterCreator parameterCreator = new PhoneHomeParameterCreator();\n \n-        MetricsCollector[] metricsCollectorArray = new MetricsCollector[]{new BuildInfoCollector(),\n-                new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(), new OSInfoCollector()};\n-\n-        List<MetricsCollector> metricsCollectorList = Arrays.asList(metricsCollectorArray);\n+        metricsCollectorList = Arrays.asList(new BuildInfoCollector(),\n+                new ClusterInfoCollector(), new ClientInfoCollector(), new MapInfoCollector(), new OSInfoCollector());\n \n         metricsCollectorList.forEach((metricsCollector -> parameterCreator.\n                 addMap(metricsCollector.computeMetrics(hazelcastNode))));\n"}}, {"oid": "db9d72d423d5d7c721ddb32daaf900bb9013d373", "url": "https://github.com/hazelcast/hazelcast/commit/db9d72d423d5d7c721ddb32daaf900bb9013d373", "message": "Updates with requested changes", "committedDate": "2020-05-29T09:51:27Z", "type": "commit"}, {"oid": "ac7f110afc1e43673a24ddade2a314591f8a9cfb", "url": "https://github.com/hazelcast/hazelcast/commit/ac7f110afc1e43673a24ddade2a314591f8a9cfb", "message": "Updates", "committedDate": "2020-05-29T10:38:32Z", "type": "commit"}, {"oid": "6556ced03dea63e3304d72b3236bf6c01920dfb4", "url": "https://github.com/hazelcast/hazelcast/commit/6556ced03dea63e3304d72b3236bf6c01920dfb4", "message": "Updates", "committedDate": "2020-05-29T10:44:31Z", "type": "commit"}]}