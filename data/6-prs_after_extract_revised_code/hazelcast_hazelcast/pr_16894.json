{"pr_number": 16894, "pr_title": "SQL: Project and filter operators", "pr_createdAt": "2020-04-15T15:54:25Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16894", "timeline": [{"oid": "aad85ef37fad03a4d25a21f7619f6bce3d815008", "url": "https://github.com/hazelcast/hazelcast/commit/aad85ef37fad03a4d25a21f7619f6bce3d815008", "message": "Implemented project and filter operators.", "committedDate": "2020-04-15T15:51:33Z", "type": "commit"}, {"oid": "4601b384de7e0c2a9ed549a64b6958a2922ed1cc", "url": "https://github.com/hazelcast/hazelcast/commit/4601b384de7e0c2a9ed549a64b6958a2922ed1cc", "message": "Fixed Spotbug errors.", "committedDate": "2020-04-17T12:30:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzY3MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r410193670", "bodyText": "It's no longer Serializable :)", "author": "taburet", "createdAt": "2020-04-17T12:37:52Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.expression;\n+\n+import com.hazelcast.nio.serialization.DataSerializable;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+\n+/**\n+ * Defines expression contract for SQL.\n+ *\n+ * <p>Java serialization is needed for Jet.", "originalCommit": "4601b384de7e0c2a9ed549a64b6958a2922ed1cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwMzU4Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r411903583", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-04-21T06:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java\nindex 32431f0821..152620ea51 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/expression/Expression.java\n\n@@ -23,8 +23,6 @@ import com.hazelcast.sql.impl.type.QueryDataType;\n /**\n  * Defines expression contract for SQL.\n  *\n- * <p>Java serialization is needed for Jet.\n- *\n  * @param <T> the return type of this expression.\n  */\n public interface Expression<T> extends DataSerializable {\n"}}, {"oid": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc", "url": "https://github.com/hazelcast/hazelcast/commit/0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc", "message": "Minors.", "committedDate": "2020-04-21T06:25:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3Nzc1NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r412777755", "bodyText": "Typo: raeched", "author": "petrpleshachkov", "createdAt": "2020-04-22T08:25:49Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.row.ListRowBatch;\n+import com.hazelcast.sql.impl.row.Row;\n+import com.hazelcast.sql.impl.row.RowBatch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract filter executor that removes rows from the output based on a condition.\n+ * <p>\n+ * Currently the executor batches rows, and reports progress only when the batch is full or when EOS has been raeched.", "originalCommit": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODE2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r413008165", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-04-22T13:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3Nzc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc5eef5699eb0a42a8aa6b3d9e022ba551f53c7f", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java\nindex 2dc7f4e121..3896678767 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/AbstractFilterExec.java\n\n@@ -26,7 +26,7 @@ import java.util.List;\n /**\n  * Abstract filter executor that removes rows from the output based on a condition.\n  * <p>\n- * Currently the executor batches rows, and reports progress only when the batch is full or when EOS has been raeched.\n+ * Currently the executor batches rows, and reports progress only when the batch is full or when EOS has been reached.\n  * This is done to minimize the operator evaluation overhead.\n  * <p>\n  * The compiled counterpart does not require batching.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTEyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r412781129", "bodyText": "What the res == null means here?", "author": "petrpleshachkov", "createdAt": "2020-04-22T08:30:19Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/FilterExec.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec;\n+\n+import com.hazelcast.sql.impl.expression.Expression;\n+import com.hazelcast.sql.impl.row.Row;\n+\n+/**\n+ * Filter executor.\n+ */\n+public class FilterExec extends AbstractFilterExec {\n+\n+    private final Expression<Boolean> filter;\n+\n+    public FilterExec(int id, Exec upstream, Expression<Boolean> filter) {\n+        super(id, upstream);\n+\n+        this.filter = filter;\n+    }\n+\n+    @Override\n+    protected boolean eval(Row row) {\n+        Boolean res = filter.eval(row, ctx);\n+\n+        return res != null && res;", "originalCommit": "0ed1e683f63f9584c2c71d42fca3f6a3ff4408cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwOTI3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16894#discussion_r413009277", "bodyText": "SQL may have three outcomes of predicate evaluation: true, false, or null. An example is value OR null => null\nnull results should be filtered out.", "author": "devozerov", "createdAt": "2020-04-22T14:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTEyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "bc5eef5699eb0a42a8aa6b3d9e022ba551f53c7f", "url": "https://github.com/hazelcast/hazelcast/commit/bc5eef5699eb0a42a8aa6b3d9e022ba551f53c7f", "message": "Reivew comments.", "committedDate": "2020-04-22T13:59:24Z", "type": "commit"}]}