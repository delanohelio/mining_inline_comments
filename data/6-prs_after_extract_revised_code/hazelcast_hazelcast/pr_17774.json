{"pr_number": 17774, "pr_title": "Fixes NPE in /node-state REST calls when the Node is not fully activated", "pr_createdAt": "2020-10-27T15:16:11Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17774", "timeline": [{"oid": "8062847f296c08be799707b363b44d78404f776f", "url": "https://github.com/hazelcast/hazelcast/commit/8062847f296c08be799707b363b44d78404f776f", "message": "Fixes NPE in /node-state REST calls when the Node is not fully activated", "committedDate": "2020-10-27T15:14:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MDkxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17774#discussion_r514260914", "bodyText": "nit: could also use HazelcastTestSupport#spawn(Runnable) here", "author": "vbekiaris", "createdAt": "2020-10-29T13:33:40Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.ascii;\n+\n+import static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import com.hazelcast.config.Config;\n+import com.hazelcast.config.DiscoveryStrategyConfig;\n+import com.hazelcast.config.NetworkConfig;\n+import com.hazelcast.config.RestApiConfig;\n+import com.hazelcast.config.properties.PropertyDefinition;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.instance.impl.HazelcastInstanceFactory;\n+import com.hazelcast.instance.impl.NodeState;\n+import com.hazelcast.internal.util.EmptyStatement;\n+import com.hazelcast.logging.ILogger;\n+import com.hazelcast.spi.discovery.AbstractDiscoveryStrategy;\n+import com.hazelcast.spi.discovery.DiscoveryNode;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.discovery.DiscoveryStrategyFactory;\n+import com.hazelcast.spi.properties.ClusterProperty;\n+import com.hazelcast.test.HazelcastParallelClassRunner;\n+import com.hazelcast.test.annotation.QuickTest;\n+\n+/**\n+ * Regression test which checks the {@link NodeState} before the instance becomes {@link NodeState#ACTIVE}.\n+ */\n+@RunWith(HazelcastParallelClassRunner.class)\n+@Category(QuickTest.class)\n+public class RestNodeStateTest {\n+\n+    @BeforeClass\n+    @AfterClass\n+    public static void cleanupClass() {\n+        HazelcastInstanceFactory.terminateAll();\n+    }\n+\n+    @Test\n+    public void testStartingNodeState_regression() throws Exception {\n+        Config config = smallInstanceConfig().setProperty(ClusterProperty.DISCOVERY_SPI_ENABLED.getName(), \"true\");\n+        RestApiConfig restApiConfig = new RestApiConfig().setEnabled(true).enableAllGroups();\n+        NetworkConfig networkConfig = config.getNetworkConfig();\n+        networkConfig.setPort(5000).setPortAutoIncrement(false);\n+        networkConfig.getJoin().getMulticastConfig().setEnabled(false);\n+        networkConfig.setRestApiConfig(restApiConfig);\n+        StrategyFactory discoveryStrategyFactory = new StrategyFactory();\n+        networkConfig.getJoin().getDiscoveryConfig()\n+                .addDiscoveryStrategyConfig(new DiscoveryStrategyConfig(discoveryStrategyFactory));\n+        Executors.newSingleThreadExecutor().execute(() -> Hazelcast.newHazelcastInstance(config));", "originalCommit": "8062847f296c08be799707b363b44d78404f776f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfb2a75db9fd60eb89a1f5212ed7df7c7fde1031", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java b/hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java\nindex c71b0d4942..69b4967742 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/ascii/RestNodeStateTest.java\n\n@@ -23,7 +23,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.Executors;\n \n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n"}}, {"oid": "dfb2a75db9fd60eb89a1f5212ed7df7c7fde1031", "url": "https://github.com/hazelcast/hazelcast/commit/dfb2a75db9fd60eb89a1f5212ed7df7c7fde1031", "message": "impl review comments; add javadoc", "committedDate": "2020-10-29T20:37:14Z", "type": "commit"}]}