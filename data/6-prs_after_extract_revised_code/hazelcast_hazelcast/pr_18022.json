{"pr_number": 18022, "pr_title": "Fixes Client EndpointQualifier Resolution", "pr_createdAt": "2020-12-30T10:37:10Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/18022", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ4NTIzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/18022#discussion_r550485238", "bodyText": "Minor: Not a big deal, but to decrease the code duplication, maybe we could rewrite this as something like\nif (ProtocolType.CLIENT.equals(protocolType)) {\n    return CLIENT;\n}\nreturn resolve(protocolType, identifier);", "author": "mdumandag", "createdAt": "2020-12-31T13:39:23Z", "path": "hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java", "diffHunk": "@@ -136,6 +136,26 @@ public String toString() {\n                 + '\\'' + '}';\n     }\n \n+    /**\n+     * @return resolved endpoint qualifier when it is passed from the user via configuration\n+     */\n+    public static EndpointQualifier resolveForConfig(ProtocolType protocolType, String identifier) {\n+        switch (protocolType) {", "originalCommit": "ee00e20d7e7a0e25c709c252d705c2a8c26ac5e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e5eb0aa29526d9e102b923ba15e0a4e2bc96510", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java b/hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java\nindex 433e0bfb3d..e2f495e402 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/EndpointQualifier.java\n\n@@ -140,20 +140,10 @@ public final class EndpointQualifier\n      * @return resolved endpoint qualifier when it is passed from the user via configuration\n      */\n     public static EndpointQualifier resolveForConfig(ProtocolType protocolType, String identifier) {\n-        switch (protocolType) {\n-            case MEMBER:\n-                return MEMBER;\n-            case CLIENT:\n-                return CLIENT;\n-            case MEMCACHE:\n-                return MEMCACHE;\n-            case REST:\n-                return REST;\n-            case WAN:\n-                return new EndpointQualifier(ProtocolType.WAN, identifier);\n-            default:\n-                throw new IllegalArgumentException(\"Cannot resolve EndpointQualifier for protocol type \" + protocolType);\n+        if (ProtocolType.CLIENT.equals(protocolType)) {\n+            return CLIENT;\n         }\n+        return resolve(protocolType, identifier);\n     }\n \n     public static EndpointQualifier resolve(ProtocolType protocolType, String identifier) {\n"}}, {"oid": "3e5eb0aa29526d9e102b923ba15e0a4e2bc96510", "url": "https://github.com/hazelcast/hazelcast/commit/3e5eb0aa29526d9e102b923ba15e0a4e2bc96510", "message": "Fixes Client EndpointQualifier Resolution\n\nIt seems our recent changes in `EndpointQualifier.equals` break some of  the tests.\nSee\nhttps://github.com/hazelcast/hazelcast/pull/17895/files#diff-495bae5b49f585b9fd0f6a37807cc792f7c9cbcc4c9e67d7d38fd104ccdda687L89\n\nFailing test https://github.com/hazelcast/hazelcast/issues/17989\nIn this test, the ClientEngine on the server side is trying to reach to the connection manager for the client\nServer server = node.getServer();\n        server.getConnectionManager(CLIENT).addConnectionListener(connectionListener);\n\nThe problem is that the member is configured with following config\nServerSocketEndpointConfig clientEndpointConfig = new ServerSocketEndpointConfig();\n        clientEndpointConfig.setName(\"CLIENT\")\n                            .setPort(5000)\n                            .setPortAutoIncrement(true);\n\nThis leads to an EndpointQualifier created for the client with identifier \u201cCLIENT\u201d along with the protocol type.\nWhen ClientEngine tries to get the connection manager for CLIENT it fails to get that since they are no longer equal.\n\nSolution:\nWe can not just revert the equals method because we need it to put `CLIENT`\nprotocol type with different identifiers to a map. So my solution is\nintroduce another resolve method to EndpointQualifier called `resolveForConfig`\nwhich will be used to resolve endpoint from the config. All internal usages,\nwill use the old one.\n\nrelated to https://github.com/hazelcast/hazelcast/pull/17895\n\nfixes https://github.com/hazelcast/hazelcast/issues/17989", "committedDate": "2021-01-06T08:59:14Z", "type": "forcePushed"}, {"oid": "57d7c628a25b864d8533b7784f276d52cfd63501", "url": "https://github.com/hazelcast/hazelcast/commit/57d7c628a25b864d8533b7784f276d52cfd63501", "message": "Fixes Client EndpointQualifier Resolution\n\nIt seems our recent changes in `EndpointQualifier.equals` break some of  the tests.\nSee\nhttps://github.com/hazelcast/hazelcast/pull/17895/files#diff-495bae5b49f585b9fd0f6a37807cc792f7c9cbcc4c9e67d7d38fd104ccdda687L89\n\nFailing test https://github.com/hazelcast/hazelcast/issues/17989\nIn this test, the ClientEngine on the server side is trying to reach to the connection manager for the client\nServer server = node.getServer();\n        server.getConnectionManager(CLIENT).addConnectionListener(connectionListener);\n\nThe problem is that the member is configured with following config\nServerSocketEndpointConfig clientEndpointConfig = new ServerSocketEndpointConfig();\n        clientEndpointConfig.setName(\"CLIENT\")\n                            .setPort(5000)\n                            .setPortAutoIncrement(true);\n\nThis leads to an EndpointQualifier created for the client with identifier \u201cCLIENT\u201d along with the protocol type.\nWhen ClientEngine tries to get the connection manager for CLIENT it fails to get that since they are no longer equal.\n\nSolution:\nWe can not just revert the equals method because we need it to put `CLIENT`\nprotocol type with different identifiers to a map. So my solution is\nintroduce another resolve method to EndpointQualifier called `resolveForConfig`\nwhich will be used to resolve endpoint from the config. All internal usages,\nwill use the old one.\n\nrelated to https://github.com/hazelcast/hazelcast/pull/17895\n\nfixes https://github.com/hazelcast/hazelcast/issues/17989", "committedDate": "2021-01-06T12:03:51Z", "type": "commit"}, {"oid": "57d7c628a25b864d8533b7784f276d52cfd63501", "url": "https://github.com/hazelcast/hazelcast/commit/57d7c628a25b864d8533b7784f276d52cfd63501", "message": "Fixes Client EndpointQualifier Resolution\n\nIt seems our recent changes in `EndpointQualifier.equals` break some of  the tests.\nSee\nhttps://github.com/hazelcast/hazelcast/pull/17895/files#diff-495bae5b49f585b9fd0f6a37807cc792f7c9cbcc4c9e67d7d38fd104ccdda687L89\n\nFailing test https://github.com/hazelcast/hazelcast/issues/17989\nIn this test, the ClientEngine on the server side is trying to reach to the connection manager for the client\nServer server = node.getServer();\n        server.getConnectionManager(CLIENT).addConnectionListener(connectionListener);\n\nThe problem is that the member is configured with following config\nServerSocketEndpointConfig clientEndpointConfig = new ServerSocketEndpointConfig();\n        clientEndpointConfig.setName(\"CLIENT\")\n                            .setPort(5000)\n                            .setPortAutoIncrement(true);\n\nThis leads to an EndpointQualifier created for the client with identifier \u201cCLIENT\u201d along with the protocol type.\nWhen ClientEngine tries to get the connection manager for CLIENT it fails to get that since they are no longer equal.\n\nSolution:\nWe can not just revert the equals method because we need it to put `CLIENT`\nprotocol type with different identifiers to a map. So my solution is\nintroduce another resolve method to EndpointQualifier called `resolveForConfig`\nwhich will be used to resolve endpoint from the config. All internal usages,\nwill use the old one.\n\nrelated to https://github.com/hazelcast/hazelcast/pull/17895\n\nfixes https://github.com/hazelcast/hazelcast/issues/17989", "committedDate": "2021-01-06T12:03:51Z", "type": "forcePushed"}]}