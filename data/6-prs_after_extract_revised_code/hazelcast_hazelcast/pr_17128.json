{"pr_number": 17128, "pr_title": "Add support for delivering of results of Jet queries to the client", "pr_createdAt": "2020-06-25T08:17:20Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17128", "timeline": [{"oid": "1be909d84e31189d9629d1ca7c43c79f24f1724b", "url": "https://github.com/hazelcast/hazelcast/commit/1be909d84e31189d9629d1ca7c43c79f24f1724b", "message": "Prepare for Jet client integration", "committedDate": "2020-07-03T13:50:31Z", "type": "commit"}, {"oid": "1be909d84e31189d9629d1ca7c43c79f24f1724b", "url": "https://github.com/hazelcast/hazelcast/commit/1be909d84e31189d9629d1ca7c43c79f24f1724b", "message": "Prepare for Jet client integration", "committedDate": "2020-07-03T13:50:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjA1MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17128#discussion_r450046050", "bodyText": "Isn't System.currentTimeMillis enough here? (though, I do not know any performance difference between nano and millis\nThe last line in this method calls hasNext which is blocking as well. Therefore, the idea of early return doesn't really work in this prototype. Instead, the method should return as soon as the very first call to hasNext returned something", "author": "devozerov", "createdAt": "2020-07-06T07:55:01Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java", "diffHunk": "@@ -100,14 +102,16 @@ private boolean fetchPage(\n         int cursorBufferSize,\n         InternalSerializationService serializationService\n     ) {\n+        long endTime = System.nanoTime() + SECONDS.toNanos(1);\n         while (iterator.hasNext()) {\n             SqlRow row = iterator.next();\n             Row rowInternal = ((SqlRowImpl) row).getDelegate();\n             Data rowData = serializationService.toData(rowInternal);\n \n             page.add(rowData);\n \n-            if (page.size() == cursorBufferSize) {\n+            // TODO we call nanoTime for each item - use batching\n+            if (page.size() == cursorBufferSize || System.nanoTime() >= endTime) {", "originalCommit": "1be909d84e31189d9629d1ca7c43c79f24f1724b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MjM3NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17128#discussion_r450162374", "bodyText": "nanoTime() should always be used for elapsed time. CTM isn't monotonic in rare cases, doesn't run at constant speed. Performance differs by OS and JVM implementation, but I think on Linux they are comparable. IIRC on Windows CTM is faster, but also much less precise (~15ms resolution)", "author": "viliam-durina", "createdAt": "2020-07-06T11:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MjU4MA==", "url": "https://github.com/hazelcast/hazelcast/pull/17128#discussion_r450162580", "bodyText": "problem #2: fixed", "author": "viliam-durina", "createdAt": "2020-07-06T11:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b710538813f9c327b07680a65cbb479be7a34f72", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java\nindex 384ab2f63a..2b605a9020 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/client/QueryClientStateRegistry.java\n\n@@ -96,6 +96,9 @@ public class QueryClientStateRegistry {\n         return new SqlPage(page, last);\n     }\n \n+    /**\n+     * @return true, if this is the last page. False when we don't know.\n+     */\n     private boolean fetchPage(\n         Iterator<SqlRow> iterator,\n         List<Data> page,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjYxMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17128#discussion_r450046611", "bodyText": "Let's avoid Runnable and introduce a separate interface with proper name.", "author": "devozerov", "createdAt": "2020-07-06T07:56:03Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java", "diffHunk": "@@ -35,7 +34,7 @@\n     private final InternalIterator iterator = new InternalIterator();\n \n     /** Query context to schedule root execution when the next batch is needed. */\n-    private volatile QueryFragmentContext context;\n+    private volatile Runnable scheduleCallback;", "originalCommit": "1be909d84e31189d9629d1ca7c43c79f24f1724b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b710538813f9c327b07680a65cbb479be7a34f72", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java\nindex 853a34570a..f440624de9 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/root/BlockingRootResultConsumer.java\n\n@@ -34,19 +34,19 @@ public class BlockingRootResultConsumer implements RootResultConsumer {\n     private final InternalIterator iterator = new InternalIterator();\n \n     /** Query context to schedule root execution when the next batch is needed. */\n-    private volatile Runnable scheduleCallback;\n+    private volatile ScheduleCallback scheduleCallback;\n \n     /** The batch that is currently being consumed. */\n     private List<Row> currentBatch;\n \n-    /** When \"true\" no more batches are expected. */\n+    /** When \"true\", no more batches are expected. */\n     private boolean done;\n \n     /** Error which occurred during query execution. */\n     private QueryException doneError;\n \n     @Override\n-    public void setup(Runnable scheduleCallback) {\n+    public void setup(ScheduleCallback scheduleCallback) {\n         this.scheduleCallback = scheduleCallback;\n     }\n \n"}}, {"oid": "b710538813f9c327b07680a65cbb479be7a34f72", "url": "https://github.com/hazelcast/hazelcast/commit/b710538813f9c327b07680a65cbb479be7a34f72", "message": "Address review", "committedDate": "2020-07-06T12:00:27Z", "type": "commit"}, {"oid": "f5174f6ba06541d49542f135c5811ebc7a6a0dce", "url": "https://github.com/hazelcast/hazelcast/commit/f5174f6ba06541d49542f135c5811ebc7a6a0dce", "message": "Fix checkstyle", "committedDate": "2020-07-06T12:41:27Z", "type": "commit"}]}