{"pr_number": 17669, "pr_title": "Derive sum & avg result types", "pr_createdAt": "2020-10-02T11:25:27Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17669", "timeline": [{"oid": "ca2d9e019e9263447bdff7681e1089b3ffc27839", "url": "https://github.com/hazelcast/hazelcast/commit/ca2d9e019e9263447bdff7681e1089b3ffc27839", "message": "Derive sum & avg result types", "committedDate": "2020-10-02T11:23:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjg4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r498826884", "bodyText": "Actual and expected value swapped.", "author": "viliam-durina", "createdAt": "2020-10-02T13:38:28Z", "path": "hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java", "diffHunk": "@@ -184,6 +184,44 @@ public void narrowestTypeForTest() {\n         assertEquals(type(REAL), narrowestTypeFor(0.1, REAL));\n     }\n \n+    @Test\n+    public void deriveSumTypeTest() {\n+        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(VARCHAR)), type(VARCHAR));", "originalCommit": "ca2d9e019e9263447bdff7681e1089b3ffc27839", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa42a031f420afd5c2ed43abd02c32ba68431f21", "chunk": "diff --git a/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java b/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java\nindex ab03498114..3305dffa3d 100644\n--- a/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java\n+++ b/hazelcast-sql/src/test/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystemTest.java\n\n@@ -186,40 +186,44 @@ public class HazelcastTypeSystemTest {\n \n     @Test\n     public void deriveSumTypeTest() {\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(VARCHAR)), type(VARCHAR));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(BOOLEAN)), type(BOOLEAN));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TINYINT)), type(INTEGER));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(SMALLINT)), type(INTEGER));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(INTEGER)), type(BIGINT));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(BIGINT)), type(BIGINT));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DECIMAL)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(REAL)), type(DOUBLE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DOUBLE)), type(DOUBLE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIME)), type(TIME));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DATE)), type(DATE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIMESTAMP)), type(TIMESTAMP));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIMESTAMP_WITH_LOCAL_TIME_ZONE)),\n-                type(TIMESTAMP_WITH_LOCAL_TIME_ZONE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(ANY)), type(ANY));\n+        assertEquals(type(VARCHAR), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(VARCHAR)));\n+        assertEquals(type(BOOLEAN), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(BOOLEAN)));\n+        assertEquals(type(INTEGER), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TINYINT)));\n+        assertEquals(type(INTEGER), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(SMALLINT)));\n+        assertEquals(type(BIGINT), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(INTEGER)));\n+        assertEquals(type(BIGINT), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(BIGINT)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DECIMAL)));\n+        assertEquals(type(DOUBLE), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(REAL)));\n+        assertEquals(type(DOUBLE), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DOUBLE)));\n+        assertEquals(type(TIME), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIME)));\n+        assertEquals(type(DATE), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(DATE)));\n+        assertEquals(type(TIMESTAMP), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIMESTAMP)));\n+        assertEquals(\n+                type(TIMESTAMP_WITH_LOCAL_TIME_ZONE),\n+                HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(TIMESTAMP_WITH_LOCAL_TIME_ZONE))\n+        );\n+        assertEquals(type(ANY), HazelcastTypeSystem.INSTANCE.deriveSumType(TYPE_FACTORY, type(ANY)));\n     }\n \n     @Test\n     public void deriveAvgAggTypeTest() {\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(VARCHAR)), type(VARCHAR));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(BOOLEAN)), type(BOOLEAN));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TINYINT)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(SMALLINT)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(INTEGER)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(BIGINT)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DECIMAL)), type(DECIMAL));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(REAL)), type(DOUBLE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DOUBLE)), type(DOUBLE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIME)), type(TIME));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DATE)), type(DATE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIMESTAMP)), type(TIMESTAMP));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIMESTAMP_WITH_LOCAL_TIME_ZONE)),\n-                type(TIMESTAMP_WITH_LOCAL_TIME_ZONE));\n-        assertEquals(HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(ANY)), type(ANY));\n+        assertEquals(type(VARCHAR), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(VARCHAR)));\n+        assertEquals(type(BOOLEAN), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(BOOLEAN)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TINYINT)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(SMALLINT)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(INTEGER)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(BIGINT)));\n+        assertEquals(type(DECIMAL), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DECIMAL)));\n+        assertEquals(type(DOUBLE), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(REAL)));\n+        assertEquals(type(DOUBLE), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DOUBLE)));\n+        assertEquals(type(TIME), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIME)));\n+        assertEquals(type(DATE), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(DATE)));\n+        assertEquals(type(TIMESTAMP), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIMESTAMP)));\n+        assertEquals(\n+                type(TIMESTAMP_WITH_LOCAL_TIME_ZONE),\n+                HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(TIMESTAMP_WITH_LOCAL_TIME_ZONE))\n+        );\n+        assertEquals(type(ANY), HazelcastTypeSystem.INSTANCE.deriveAvgAggType(TYPE_FACTORY, type(ANY)));\n     }\n \n     private static void assertPrecedence(RelDataType expected, RelDataType other) {\n"}}, {"oid": "fa42a031f420afd5c2ed43abd02c32ba68431f21", "url": "https://github.com/hazelcast/hazelcast/commit/fa42a031f420afd5c2ed43abd02c32ba68431f21", "message": "Swap expected with actual", "committedDate": "2020-10-02T13:46:59Z", "type": "commit"}, {"oid": "eae34b55e75160f080dabda00083815a904e68c5", "url": "https://github.com/hazelcast/hazelcast/commit/eae34b55e75160f080dabda00083815a904e68c5", "message": "Merge branch 'master' into sum-avg-types", "committedDate": "2020-10-07T06:42:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc3NzU3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17669#discussion_r500777579", "bodyText": "It might be better to use BIGINT for all integer types.", "author": "taburet", "createdAt": "2020-10-07T06:55:21Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java", "diffHunk": "@@ -374,4 +376,72 @@ private static RelDataType literalType(SqlLiteral literal) {\n         return HazelcastTypeFactory.INSTANCE.createSqlType(literal.getTypeName());\n     }\n \n+    @Override\n+    public RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType) {\n+        if (argumentType instanceof BasicSqlType) {\n+            SqlTypeName type = deriveSumType(argumentType.getSqlTypeName());\n+\n+            if (type.allowsPrec() && argumentType.getPrecision() != RelDataType.PRECISION_NOT_SPECIFIED) {\n+                int precision = typeFactory.getTypeSystem().getMaxPrecision(type);\n+                if (type.allowsScale()) {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision, argumentType.getScale()),\n+                            argumentType.isNullable()\n+                    );\n+                } else {\n+                    return typeFactory.createTypeWithNullability(\n+                            typeFactory.createSqlType(type, precision),\n+                            argumentType.isNullable()\n+                    );\n+                }\n+            } else {\n+                return typeFactory.createTypeWithNullability(\n+                        typeFactory.createSqlType(type),\n+                        argumentType.isNullable()\n+                );\n+            }\n+        }\n+        return argumentType;\n+    }\n+\n+    private static SqlTypeName deriveSumType(SqlTypeName type) {\n+        switch (type) {\n+            case TINYINT:\n+            case SMALLINT:\n+                return SqlTypeName.INTEGER;", "originalCommit": "eae34b55e75160f080dabda00083815a904e68c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53760f54fedf14738946796ab9b2fad261a9ee5c", "chunk": "diff --git a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java\nindex f5d12e7c20..b54e914560 100644\n--- a/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java\n+++ b/hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/validate/types/HazelcastTypeSystem.java\n\n@@ -408,7 +408,6 @@ public final class HazelcastTypeSystem extends RelDataTypeSystemImpl {\n         switch (type) {\n             case TINYINT:\n             case SMALLINT:\n-                return SqlTypeName.INTEGER;\n             case INTEGER:\n             case BIGINT:\n                 return SqlTypeName.BIGINT;\n"}}, {"oid": "53760f54fedf14738946796ab9b2fad261a9ee5c", "url": "https://github.com/hazelcast/hazelcast/commit/53760f54fedf14738946796ab9b2fad261a9ee5c", "message": "Use BIGINT as the result of summing all int types", "committedDate": "2020-10-07T06:59:04Z", "type": "commit"}]}