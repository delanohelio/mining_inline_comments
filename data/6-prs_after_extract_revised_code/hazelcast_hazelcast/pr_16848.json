{"pr_number": 16848, "pr_title": "SQL: Send/receive operators (#16838)", "pr_createdAt": "2020-04-03T15:00:12Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16848", "timeline": [{"oid": "4df4cb0a579ac8f769faf9bf608cdb9e99cd5770", "url": "https://github.com/hazelcast/hazelcast/commit/4df4cb0a579ac8f769faf9bf608cdb9e99cd5770", "message": "Implemented IO.", "committedDate": "2020-04-03T14:55:28Z", "type": "commit"}, {"oid": "d499959ed41bcfa3e4b18c305cc9772187e76834", "url": "https://github.com/hazelcast/hazelcast/commit/d499959ed41bcfa3e4b18c305cc9772187e76834", "message": "Spotbugs errors.", "committedDate": "2020-04-03T17:44:36Z", "type": "commit"}, {"oid": "d5fb96b8adf08d6ce0cbc972cf102362f0c86742", "url": "https://github.com/hazelcast/hazelcast/commit/d5fb96b8adf08d6ce0cbc972cf102362f0c86742", "message": "Minor refactoring to tests.", "committedDate": "2020-04-03T18:18:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMzA2MA==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404103060", "bodyText": "true?", "author": "taburet", "createdAt": "2020-04-06T13:46:54Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+/**\n+ * Abstract inbox implementation.\n+ */\n+public abstract class AbstractInbox extends AbstractMailbox implements InboundHandler {\n+    /** Number of enqueued batches. */\n+    protected int enqueuedBatches;\n+\n+    /** Remaining active sources. */\n+    private int remainingStreams;\n+\n+    /** Parent service. */\n+    private final QueryOperationHandler operationHandler;\n+\n+    /** Backpressure control. */\n+    private final FlowControl flowControl;\n+\n+    protected AbstractInbox(\n+        QueryId queryId,\n+        int edgeId,\n+        int rowWidth,\n+        QueryOperationHandler operationHandler,\n+        int remainingStreams,\n+        FlowControl flowControl\n+    ) {\n+        super(queryId, edgeId, rowWidth);\n+\n+        this.operationHandler = operationHandler;\n+        this.remainingStreams = remainingStreams;\n+        this.flowControl = flowControl;\n+    }\n+\n+    public void setup() {\n+        flowControl.setup(queryId, edgeId, operationHandler);\n+    }\n+\n+    @Override\n+    public final void onBatch(InboundBatch batch, long remainingMemory) {\n+        onBatch0(batch);\n+\n+        // Track done condition\n+        enqueuedBatches++;\n+\n+        if (batch.isLast()) {\n+            remainingStreams--;\n+        }\n+\n+        // Track backpressure.\n+        flowControl.onBatchAdded(\n+            batch.getSenderId(),\n+            getBatchSize(batch),\n+            batch.isLast(),\n+            remainingMemory\n+        );\n+    }\n+\n+    protected abstract void onBatch0(InboundBatch batch);\n+\n+    protected void onBatchPolled(InboundBatch batch) {\n+        if (batch == null) {\n+            return;\n+        }\n+\n+        // Track done condition\n+        enqueuedBatches--;\n+\n+        // Track backpressure.\n+        flowControl.onBatchRemoved(\n+            batch.getSenderId(),\n+            getBatchSize(batch),\n+            batch.isLast()\n+        );\n+    }\n+\n+    @Override\n+    public void onFragmentExecutionCompleted() {\n+        flowControl.onFragmentExecutionCompleted();\n+    }\n+\n+    /**\n+     * @return {@code True} if no more incoming batches are expected.", "originalCommit": "d5fb96b8adf08d6ce0cbc972cf102362f0c86742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExMDc0NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404110745", "bodyText": "Fixed here and in all other places.", "author": "devozerov", "createdAt": "2020-04-06T13:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMzA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0f20bab36a8a19634a93a6cd8f5c25c406377f18", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\nindex 05875b70cf0..6ce4e13d740 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\n\n@@ -99,7 +99,7 @@ public abstract class AbstractInbox extends AbstractMailbox implements InboundHa\n     }\n \n     /**\n-     * @return {@code True} if no more incoming batches are expected.\n+     * @return {@code true} if no more incoming batches are expected.\n      */\n     public boolean closed() {\n         return enqueuedBatches == 0 && remainingStreams == 0;\n"}}, {"oid": "bcf20e41b549eb6c2516db9dc7253804b61ec454", "url": "https://github.com/hazelcast/hazelcast/commit/bcf20e41b549eb6c2516db9dc7253804b61ec454", "message": "Merge branch 'master' into issues/16838", "committedDate": "2020-04-06T13:55:29Z", "type": "commit"}, {"oid": "0f20bab36a8a19634a93a6cd8f5c25c406377f18", "url": "https://github.com/hazelcast/hazelcast/commit/0f20bab36a8a19634a93a6cd8f5c25c406377f18", "message": "Fixed typos and unrelated checkstyle issue.", "committedDate": "2020-04-06T13:56:31Z", "type": "commit"}, {"oid": "8981ce0dfee45d57748ea8b9516ecabc21db4865", "url": "https://github.com/hazelcast/hazelcast/commit/8981ce0dfee45d57748ea8b9516ecabc21db4865", "message": "Merge branch 'master' into issues/16838\n\n# Conflicts:\n#\thazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/map/MapPutAllMessageTask.java", "committedDate": "2020-04-07T07:14:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDU5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404660595", "bodyText": "It took me a couple of minutes to decipher that \"LWM\" means \"low water mark\". I'm not strongly against abbreviations/contractions: for instance, while implementing some algorithm or data structure it's better to keep the established terminology used in the original source. But I'm not a big fan of them because with IDEs it takes the same time to type the full versions as the shortened ones. It might make sense to introduce abbreviations somewhere in class/method javadoc before using them.", "author": "taburet", "createdAt": "2020-04-07T09:16:56Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io.flowcontrol.simple;\n+\n+import com.hazelcast.sql.HazelcastSqlException;\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryFlowControlExchangeOperation;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+import java.util.HashMap;\n+import java.util.UUID;\n+\n+/**\n+ * Simple implementation of a flow control. The flow control message is sent when the remote end thinks that local end is low\n+ * on memory, while this is no longer the case for the local end.\n+ */\n+public class SimpleFlowControl implements FlowControl {\n+    /** Constant LWM threashold. */\n+    static final double LWM_PERCENTAGE = 0.25f;", "originalCommit": "8981ce0dfee45d57748ea8b9516ecabc21db4865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNDA5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404704095", "bodyText": "Renamed to \"threshold\".", "author": "devozerov", "createdAt": "2020-04-07T10:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwOTk2NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404709964", "bodyText": "There is still a lot of LWM mentions in the code.", "author": "taburet", "createdAt": "2020-04-07T10:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MTAyNw==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404761027", "bodyText": "Removed remaining.", "author": "devozerov", "createdAt": "2020-04-07T12:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5e1efccb7f2762026945206f7dd3030c5ded983d", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java\nindex 9ac943cf628..03f22075cbd 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/flowcontrol/simple/SimpleFlowControl.java\n\n@@ -27,11 +27,11 @@ import java.util.UUID;\n \n /**\n  * Simple implementation of a flow control. The flow control message is sent when the remote end thinks that local end is low\n- * on memory, while this is no longer the case for the local end.\n+ * on memory.\n  */\n public class SimpleFlowControl implements FlowControl {\n-    /** Constant LWM threashold. */\n-    static final double LWM_PERCENTAGE = 0.25f;\n+    /** Default threashold. */\n+    static final double THRESHOLD_PERCENTAGE = 0.25f;\n \n     /** Maximum amount of memory allowed to be consumed by the local stream. */\n     private final long maxMemory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4OTI0Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404589243", "bodyText": "Not sure that the comment 'Parent service' clearly explains the operationHandler variable.", "author": "petrpleshachkov", "createdAt": "2020-04-07T07:21:00Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.exec.io;\n+\n+import com.hazelcast.sql.impl.QueryId;\n+import com.hazelcast.sql.impl.exec.io.flowcontrol.FlowControl;\n+import com.hazelcast.sql.impl.operation.QueryOperationHandler;\n+\n+/**\n+ * Abstract inbox implementation.\n+ */\n+public abstract class AbstractInbox extends AbstractMailbox implements InboundHandler {\n+    /** Number of enqueued batches. */\n+    protected int enqueuedBatches;\n+\n+    /** Remaining active sources. */\n+    private int remainingStreams;\n+\n+    /** Parent service. */", "originalCommit": "8981ce0dfee45d57748ea8b9516ecabc21db4865", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1ODU2MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404758561", "bodyText": "These comments have no value. Removed.", "author": "devozerov", "createdAt": "2020-04-07T12:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4OTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5e1efccb7f2762026945206f7dd3030c5ded983d", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\nindex 6ce4e13d740..e71b77a3580 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/exec/io/AbstractInbox.java\n\n@@ -30,10 +30,7 @@ public abstract class AbstractInbox extends AbstractMailbox implements InboundHa\n     /** Remaining active sources. */\n     private int remainingStreams;\n \n-    /** Parent service. */\n     private final QueryOperationHandler operationHandler;\n-\n-    /** Backpressure control. */\n     private final FlowControl flowControl;\n \n     protected AbstractInbox(\n"}}, {"oid": "5e1efccb7f2762026945206f7dd3030c5ded983d", "url": "https://github.com/hazelcast/hazelcast/commit/5e1efccb7f2762026945206f7dd3030c5ded983d", "message": "Review comments.", "committedDate": "2020-04-07T10:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzg0Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404717843", "bodyText": "It's better to cache the values(), a new array is allocated on every invocation.", "author": "taburet", "createdAt": "2020-04-07T10:53:57Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.operation;\n+\n+/**\n+ * Fragment mapping.\n+ */\n+public enum QueryExecuteOperationFragmentMapping {\n+    /** Fragment members are defined explicitly. */\n+    EXPLICIT(1),\n+\n+    /** Fragment members are data members. */\n+    DATA_MEMBERS(2);\n+\n+    private final int id;\n+\n+    QueryExecuteOperationFragmentMapping(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public static QueryExecuteOperationFragmentMapping getById(final int id) {\n+        for (QueryExecuteOperationFragmentMapping type : values()) {", "originalCommit": "5e1efccb7f2762026945206f7dd3030c5ded983d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1OTcxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16848#discussion_r404759714", "bodyText": "Fixed.", "author": "devozerov", "createdAt": "2020-04-07T12:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcxNzg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b8786a374a0ba4b6de52f689058ee1e6889d9f89", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java\nindex 2b7e9404f84..994963b740f 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/operation/QueryExecuteOperationFragmentMapping.java\n\n@@ -26,6 +26,8 @@ public enum QueryExecuteOperationFragmentMapping {\n     /** Fragment members are data members. */\n     DATA_MEMBERS(2);\n \n+    private static final QueryExecuteOperationFragmentMapping[] VALUES = values();\n+\n     private final int id;\n \n     QueryExecuteOperationFragmentMapping(int id) {\n"}}, {"oid": "a6eb0999969cacd606ad5c7cd3340e361a934c61", "url": "https://github.com/hazelcast/hazelcast/commit/a6eb0999969cacd606ad5c7cd3340e361a934c61", "message": "Renamed LWM.", "committedDate": "2020-04-07T11:39:50Z", "type": "commit"}, {"oid": "b8786a374a0ba4b6de52f689058ee1e6889d9f89", "url": "https://github.com/hazelcast/hazelcast/commit/b8786a374a0ba4b6de52f689058ee1e6889d9f89", "message": "Cached value() of enum.", "committedDate": "2020-04-07T12:12:40Z", "type": "commit"}, {"oid": "1b173b54533e30e81fd413b4d18ef103aa44f180", "url": "https://github.com/hazelcast/hazelcast/commit/1b173b54533e30e81fd413b4d18ef103aa44f180", "message": "Removed remaining LWM mentions.", "committedDate": "2020-04-07T12:13:43Z", "type": "commit"}]}