{"pr_number": 16481, "pr_title": "Process list if it is not empty", "pr_createdAt": "2020-01-14T11:35:47Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16481", "timeline": [{"oid": "66ebae00ead5d7340a0af7565c49b91a5305cba6", "url": "https://github.com/hazelcast/hazelcast/commit/66ebae00ead5d7340a0af7565c49b91a5305cba6", "message": "Process list if it is not empty", "committedDate": "2020-01-14T11:34:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5NDU2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16481#discussion_r366294565", "bodyText": "Since outcomes is non-null already, isn't it better to remove if condition completely and use while(!outComes.isEmpty()) {..} loop instead of do {..} while (!outComes.isEmpty());?", "author": "mdogan", "createdAt": "2020-01-14T11:48:03Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java", "diffHunk": "@@ -74,7 +75,7 @@ protected void runWithPartitionScanForNative() {\n             }\n         }, true);\n \n-        if (outComes != null) {\n+        if (!isEmpty(outComes)) {", "originalCommit": "66ebae00ead5d7340a0af7565c49b91a5305cba6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5Nzg0NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16481#discussion_r366297845", "bodyText": "thx, fixed for both primary and backup operations.", "author": "ahmetmircik", "createdAt": "2020-01-14T11:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI5NDU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "60e7df58f898379fd47d74e430d29ba14d8ed0d7", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\nindex 43486d63576..fe33de07bbf 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/operation/PartitionWideEntryBackupOperation.java\n\n@@ -75,37 +74,38 @@ public class PartitionWideEntryBackupOperation extends AbstractMultipleEntryBack\n             }\n         }, true);\n \n-        if (!isEmpty(outComes)) {\n-            // This iteration is needed to work around an issue related with binary elastic hash map (BEHM).\n-            // Removal via map#remove() while iterating on BEHM distorts it and we can see some entries remain\n-            // in the map even we know that iteration is finished. Because in this case, iteration can miss some entries.\n-            do {\n-                Data dataKey = (Data) outComes.poll();\n-                Object oldValue = outComes.poll();\n-                Object newValue = outComes.poll();\n-                EntryEventType eventType = (EntryEventType) outComes.poll();\n-\n-                operator.init(dataKey, oldValue, newValue, null, eventType, null)\n-                        .doPostOperateOps();\n-\n-            } while (!outComes.isEmpty());\n+        // This iteration is needed to work around an issue\n+        // related with binary elastic hash map (BEHM). Removal\n+        // via map#remove() while iterating on BEHM distorts\n+        // it and we can see some entries remain in the map\n+        // even we know that iteration is finished. Because\n+        // in this case, iteration can miss some entries.\n+        while (!outComes.isEmpty()) {\n+            Data dataKey = (Data) outComes.poll();\n+            Object oldValue = outComes.poll();\n+            Object newValue = outComes.poll();\n+            EntryEventType eventType = (EntryEventType) outComes.poll();\n+\n+            operator.init(dataKey, oldValue, newValue, null, eventType, null)\n+                    .doPostOperateOps();\n         }\n     }\n \n-\n     @Override\n     public Object getResponse() {\n         return true;\n     }\n \n     @Override\n-    protected void readInternal(ObjectDataInput in) throws IOException {\n+    protected void readInternal(ObjectDataInput in) throws\n+            IOException {\n         super.readInternal(in);\n         backupProcessor = in.readObject();\n     }\n \n     @Override\n-    protected void writeInternal(ObjectDataOutput out) throws IOException {\n+    protected void writeInternal(ObjectDataOutput out) throws\n+            IOException {\n         super.writeInternal(out);\n         out.writeObject(backupProcessor);\n     }\n"}}, {"oid": "60e7df58f898379fd47d74e430d29ba14d8ed0d7", "url": "https://github.com/hazelcast/hazelcast/commit/60e7df58f898379fd47d74e430d29ba14d8ed0d7", "message": "Address review comment", "committedDate": "2020-01-14T11:55:29Z", "type": "commit"}]}