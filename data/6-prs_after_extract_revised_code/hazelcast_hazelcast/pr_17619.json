{"pr_number": 17619, "pr_title": "Try load custom exceptions via class loader on client", "pr_createdAt": "2020-09-25T09:09:36Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17619", "timeline": [{"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d", "url": "https://github.com/hazelcast/hazelcast/commit/0888707cf69c52448644b08d6181ba9c1e80c59d", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753", "committedDate": "2020-09-28T10:16:01Z", "type": "commit"}, {"oid": "0888707cf69c52448644b08d6181ba9c1e80c59d", "url": "https://github.com/hazelcast/hazelcast/commit/0888707cf69c52448644b08d6181ba9c1e80c59d", "message": "Try load custom exceptions via class loader on client\n\nWe are throwing UndefinedErrorCodeException if an exception is\nnot on the protocol list.\n\nThis causes poor experience as the behaviour is different between\nthe client and the member.\n\nsee  https://github.com/hazelcast/hazelcast/issues/9753\n\nThis pr does not introduce an ExceptionFactory API as discussed\non the issue.\nThe value of an ExceptionFactory API is debetable and left out\nfor now. If the client has the expcetion class on the classpath,\nthe client will create it. If it is not available on the classpath,\nit is not clear what can a user do with ExceptionFactory API.\nIn that case, we are throwing UndefinedErrorCodeException as before.\nThe main problem seems to be the case where the client have the\nexact same class on the classpath, so this fix should cover\nmost of the use cases.\n\nAlso added  assert to check if exception is defined in the protocol\nWhen classLoading is introduced it is possible for us to forget\nto put the exception in the protocol, because it will not longer\nthrow UndefinedErrorCodeException but it will be loaded\nautomatically.\nAssertion is added to check and warn us.\n\nfixes https://github.com/hazelcast/hazelcast/issues/9753", "committedDate": "2020-09-28T10:16:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5MDc3Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/17619#discussion_r498690776", "bodyText": "nit: redundant new line here.", "author": "puzpuzpuz", "createdAt": "2020-10-02T08:41:29Z", "path": "hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java", "diffHunk": "@@ -231,4 +233,53 @@ public static void fixAsyncStackTrace(Throwable asyncCause, StackTraceElement[]\n         System.arraycopy(localSideStackTrace, 1, newStackTrace, remoteStackTrace.length + 2, localSideStackTrace.length - 1);\n         throwable.setStackTrace(newStackTrace);\n     }\n+\n+    /**\n+     * Tries to create the exception with appropriate constructor in the following order.\n+     * In all cases the cause is set(via constructor or via initCause)\n+     * new Throwable(String message, Throwable cause)\n+     * new Throwable(Throwable cause)\n+     * new Throwable(String message)\n+     * new Throwable()\n+     *\n+     * @param exceptionClass class of the exception\n+     * @param message        message to be pass to constructor of the exception\n+     * @param cause          cause to be set to the exception\n+     * @return null if can not find a constructor as described above, otherwise return newly constructed expcetion\n+     */\n+    public static <T extends Throwable> T tryCreateExceptionWithMessageAndCause(Class<? extends Throwable> exceptionClass,\n+                                                                                String message, @Nullable Throwable cause) {\n+", "originalCommit": "0888707cf69c52448644b08d6181ba9c1e80c59d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca53238d805d2eb0cedf158fe47928f92c173584", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java b/hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java\nindex 6c1c7490211..b42fef1f43b 100644\n--- a/hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java\n+++ b/hazelcast/src/main/java/com/hazelcast/util/ExceptionUtil.java\n\n@@ -236,7 +236,7 @@ public final class ExceptionUtil {\n \n     /**\n      * Tries to create the exception with appropriate constructor in the following order.\n-     * In all cases the cause is set(via constructor or via initCause)\n+     * In all cases the cause is set (via constructor or via {@code initCause})\n      * new Throwable(String message, Throwable cause)\n      * new Throwable(Throwable cause)\n      * new Throwable(String message)\n"}}, {"oid": "ca53238d805d2eb0cedf158fe47928f92c173584", "url": "https://github.com/hazelcast/hazelcast/commit/ca53238d805d2eb0cedf158fe47928f92c173584", "message": "addressed review comments", "committedDate": "2020-10-02T12:38:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NzkwNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17619#discussion_r499377906", "bodyText": "why did you remove?", "author": "ihsandemir", "createdAt": "2020-10-05T06:56:30Z", "path": "hazelcast-client/src/test/java/com/hazelcast/client/impl/protocol/ClientExceptionFactoryTest.java", "diffHunk": "@@ -187,7 +176,6 @@ private boolean stackTraceArrayEquals(StackTraceElement[] stackTrace1, StackTrac\n                 new Object[]{new EntryProcessorException(randomString())},\n                 new Object[]{new ArrayIndexOutOfBoundsException(randomString())},\n                 new Object[]{new ArrayStoreException(randomString())},\n-                new Object[]{new AuthenticationException(randomString())},", "originalCommit": "ca53238d805d2eb0cedf158fe47928f92c173584", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4OTQ5Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/17619#discussion_r499389493", "bodyText": "On 3.12, because we had two different modules, we are throwing StubAuthenticationException on the member and it is recreated as AuthenticationException on the client-side.\nSo this test normally should not be passing. When I refactored the test to a correct state, this issue became apparent, and tests start to fail for AuthenticationException.\nI did not want to modify the test again for the AuthenticationException only.\nNow thinking about it, I can put a special test for AuthenticationException on ClientProtocolErrorCodesTest.", "author": "sancar", "createdAt": "2020-10-05T07:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NzkwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "dcb97f25c7198a6e307e19a00dd9e0ea4ca62d55", "url": "https://github.com/hazelcast/hazelcast/commit/dcb97f25c7198a6e307e19a00dd9e0ea4ca62d55", "message": "fixing NullPointer and adding AuthenticationException test", "committedDate": "2020-10-05T07:28:44Z", "type": "commit"}]}