{"pr_number": 16627, "pr_title": "Several migration fixes", "pr_createdAt": "2020-02-10T10:00:21Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16627", "timeline": [{"oid": "a8fb7de0e2d21fdb3dd39bc7f3bd7c3cf4290c5e", "url": "https://github.com/hazelcast/hazelcast/commit/a8fb7de0e2d21fdb3dd39bc7f3bd7c3cf4290c5e", "message": "Avoid unnecessary empty replication operations\n\nWhen there is no data to replicate, some services are still\ncreating empty replication operations. This causes redundant migration steps.", "committedDate": "2020-02-10T10:26:40Z", "type": "forcePushed"}, {"oid": "2d2afb6dd3bf98c46a11d4f02d640dbef4c1d27a", "url": "https://github.com/hazelcast/hazelcast/commit/2d2afb6dd3bf98c46a11d4f02d640dbef4c1d27a", "message": "Avoid unnecessary empty replication operations\n\nWhen there is no data to replicate, some services are still\ncreating empty replication operations. This causes redundant migration steps.", "committedDate": "2020-02-10T12:14:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNTU5MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16627#discussion_r377115591", "bodyText": "should we still throw IllegalStateException if the caller is different than clusterService.getMasterAddress() here?", "author": "metanet", "createdAt": "2020-02-10T15:01:31Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/partition/operation/FetchPartitionStateOperation.java", "diffHunk": "@@ -42,12 +42,11 @@ public FetchPartitionStateOperation() {\n     @Override\n     public void run() {\n         Address caller = getCallerAddress();\n-        NodeEngine nodeEngine = getNodeEngine();\n-        Address master = nodeEngine.getMasterAddress();\n-        if (!caller.equals(master)) {\n-            String msg = caller + \" requested our partition table but it's not our known master. \" + \"Master: \" + master;\n+        InternalPartitionServiceImpl service = getService();\n+        if (!service.isMemberMaster(caller)) {\n+            String msg = caller + \" requested our partition table but it's not our known master.\";", "originalCommit": "de8e7ef29522a87b144c6f0f0e3ec636f72ab4ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NDMxNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16627#discussion_r377474314", "bodyText": "yes, \ud83d\udc4d It seems we already have tests for both cases.", "author": "mdogan", "createdAt": "2020-02-11T07:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2fb59b7601192d764e5f7dc7c6bf6e3a2b44c75", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/partition/operation/FetchPartitionStateOperation.java b/hazelcast/src/main/java/com/hazelcast/internal/partition/operation/FetchPartitionStateOperation.java\nindex c0593baf99..01a0df5232 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/partition/operation/FetchPartitionStateOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/partition/operation/FetchPartitionStateOperation.java\n\n@@ -34,22 +43,73 @@ import com.hazelcast.spi.exception.TargetNotMemberException;\n public final class FetchPartitionStateOperation extends AbstractPartitionOperation\n         implements MigrationCycleOperation {\n \n-    private PartitionRuntimeState partitionState;\n-\n     public FetchPartitionStateOperation() {\n     }\n \n     @Override\n-    public void run() {\n+    public void beforeRun() {\n         Address caller = getCallerAddress();\n+        Address masterAddress = getNodeEngine().getMasterAddress();\n+        ILogger logger = getLogger();\n+        if (!caller.equals(masterAddress)) {\n+            String msg = caller + \" requested our partition table but it's not our known master. \" + \"Master: \" + masterAddress;\n+            logger.warning(msg);\n+            // Master address should be already updated after mastership claim.\n+            throw new IllegalStateException(msg);\n+        }\n+\n         InternalPartitionServiceImpl service = getService();\n         if (!service.isMemberMaster(caller)) {\n-            String msg = caller + \" requested our partition table but it's not our known master.\";\n-            getLogger().warning(msg);\n+            String msg = caller + \" requested our partition table but it's not the master known by migration system.\";\n+            logger.warning(msg);\n+            // PartitionService has not received result of mastership claim process yet.\n+            // It will learn eventually.\n             throw new RetryableHazelcastException(msg);\n         }\n-        InternalPartitionServiceImpl service = getService();\n-        partitionState = service.createPartitionStateInternal();\n+    }\n+\n+    @Override\n+    public CallStatus call() {\n+        return new OffloadImpl();\n+    }\n+\n+    private final class OffloadImpl extends Offload {\n+        private OffloadImpl() {\n+            super(FetchPartitionStateOperation.this);\n+        }\n+\n+        @Override\n+        public void start() {\n+            NodeEngine nodeEngine = getNodeEngine();\n+            OperationServiceImpl operationService = (OperationServiceImpl) nodeEngine.getOperationService();\n+            OperationExecutor executor = operationService.getOperationExecutor();\n+\n+            int partitionThreadCount = executor.getPartitionThreadCount();\n+            SendPartitionStateTask barrierTask = new SendPartitionStateTask(partitionThreadCount);\n+            executor.executeOnPartitionThreads(barrierTask);\n+        }\n+    }\n+\n+    /**\n+     * SendPartitionStateTask is executed on all partition operation threads\n+     * and sends local partition state to the caller (the master) after\n+     * ensuring all pending/running migration operations are completed.\n+     */\n+    private final class SendPartitionStateTask implements Runnable, UrgentSystemOperation {\n+        private final AtomicInteger remaining = new AtomicInteger();\n+\n+        private SendPartitionStateTask(int partitionThreadCount) {\n+            remaining.set(partitionThreadCount);\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (remaining.decrementAndGet() == 0) {\n+                InternalPartitionServiceImpl service = getService();\n+                PartitionRuntimeState partitionState = service.createPartitionStateInternal();\n+                sendResponse(partitionState);\n+            }\n+        }\n     }\n \n     @Override\n"}}, {"oid": "a2fb59b7601192d764e5f7dc7c6bf6e3a2b44c75", "url": "https://github.com/hazelcast/hazelcast/commit/a2fb59b7601192d764e5f7dc7c6bf6e3a2b44c75", "message": "Avoid unnecessary empty replication operations\n\nWhen there is no data to replicate, some services are still\ncreating empty replication operations. This causes redundant migration steps.", "committedDate": "2020-02-11T07:02:07Z", "type": "forcePushed"}, {"oid": "7ceeadc8a6100a4c7340c74dd9bfc757efd5dbdb", "url": "https://github.com/hazelcast/hazelcast/commit/7ceeadc8a6100a4c7340c74dd9bfc757efd5dbdb", "message": "PartitionStateOperation should not be sent to unknown members\n\nPartitionStateOperation is sent by master to other cluster members.\nTarget member might be removed from cluster while invocation is being\nretried. In this case, invocation should fail.", "committedDate": "2020-02-12T08:32:24Z", "type": "commit"}, {"oid": "5e254f09653e02f9421184de3d43bde6873206fb", "url": "https://github.com/hazelcast/hazelcast/commit/5e254f09653e02f9421184de3d43bde6873206fb", "message": "Migration operations should rely master member observed by PartitionService\n\nNormally observation of master member and partition update operations are ordered\nusing the latest observed master by the PartitionService under partition lock.\nThis was introduced by fa9616336f7c693fa740cf8d60aefebaeb5f19d4.\n\nBut there were some remaining direct usages of `ClusterService.masterAddress`,\nwhich are causing inconsistencies while mastership claim is in progress\n(while master is about to change).\n\nIntroduced a new method, `isMemberMaster(address)`, which returns `true`\nonly and only if the given `address` is equal to the master address\nin ClusterService and the master member observed by PartitionService.", "committedDate": "2020-02-12T08:32:27Z", "type": "commit"}, {"oid": "e2d8a08e7a0781dca8f1d36f422f0b72b044d32d", "url": "https://github.com/hazelcast/hazelcast/commit/e2d8a08e7a0781dca8f1d36f422f0b72b044d32d", "message": "Fix race between fetching the most recent partition table and ongoing migration\n\n`FetchMostRecentPartitionTableTask` is executed when a member becomes master\nand used to determine the most recent partition table in cluster.\n\n`FetchPartitionStateOperation` is submitted to cluster members by the new master\nto fetch their partition tables.\n\nBut if there is a concurrently running `MigrationOperation` while\n`FetchMostRecentPartitionTableTask` or `FetchPartitionStateOperation` is being executed,\nthey might not observe the active migration on local node.\nThis is a very small window of race but when happens that active migration remains uncommitted\nand further migrations cannot be processed on that node.\n\nTo fix that, a task submitted to each partition thread to ensure\nthere's no ongoing migration operation before reading the most recent\npartition table on that node.", "committedDate": "2020-02-12T08:32:27Z", "type": "commit"}, {"oid": "c2bbf1f2adddc968af28e2c5cda6e3341a2b2441", "url": "https://github.com/hazelcast/hazelcast/commit/c2bbf1f2adddc968af28e2c5cda6e3341a2b2441", "message": "Only first migration fragment should set active migration in MigrationOperation\n\nFirst migration fragment should set the active migration\nand later fragments should check whether active migration is set\nand equal to the expected migration.", "committedDate": "2020-02-12T08:32:27Z", "type": "commit"}, {"oid": "ea8f5913165c13fd5dd6805ab3463853acd189eb", "url": "https://github.com/hazelcast/hazelcast/commit/ea8f5913165c13fd5dd6805ab3463853acd189eb", "message": "Avoid unnecessary empty replication operations\n\nWhen there is no data to replicate, some services are still\ncreating empty replication operations. This causes redundant migration steps.", "committedDate": "2020-02-12T08:32:27Z", "type": "commit"}, {"oid": "ea8f5913165c13fd5dd6805ab3463853acd189eb", "url": "https://github.com/hazelcast/hazelcast/commit/ea8f5913165c13fd5dd6805ab3463853acd189eb", "message": "Avoid unnecessary empty replication operations\n\nWhen there is no data to replicate, some services are still\ncreating empty replication operations. This causes redundant migration steps.", "committedDate": "2020-02-12T08:32:27Z", "type": "forcePushed"}]}