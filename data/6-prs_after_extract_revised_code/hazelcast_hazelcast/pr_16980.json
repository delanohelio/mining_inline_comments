{"pr_number": 16980, "pr_title": "SQL: Initial integration with Apache Calcite ", "pr_createdAt": "2020-05-13T11:48:30Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16980", "timeline": [{"oid": "13d348ca0fadf1e4bb0ea28ebf3270a044255591", "url": "https://github.com/hazelcast/hazelcast/commit/13d348ca0fadf1e4bb0ea28ebf3270a044255591", "message": "Initial integration with Apache Calcite (#16979)", "committedDate": "2020-05-13T11:43:29Z", "type": "commit"}, {"oid": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c", "url": "https://github.com/hazelcast/hazelcast/commit/5fc43c85404605c5f8e93f54c1b75b8e6a48f50c", "message": "Merge branch 'master' into issues/16979", "committedDate": "2020-05-15T06:54:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426489824", "bodyText": "Not directly related to the PR: why we have QueryDataTypeFamily mapping for SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE, but no similar family/mapping for SqlTypeName.TIME_WITH_LOCAL_TIME_ZONE?", "author": "taburet", "createdAt": "2020-05-18T09:26:32Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/HazelcastTable.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import com.hazelcast.sql.impl.schema.Table;\n+import com.hazelcast.sql.impl.schema.TableField;\n+import com.hazelcast.sql.impl.type.QueryDataType;\n+import com.hazelcast.sql.impl.type.QueryDataTypeFamily;\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rel.type.RelDataTypeFactory;\n+import org.apache.calcite.rel.type.RelDataTypeField;\n+import org.apache.calcite.rel.type.RelDataTypeFieldImpl;\n+import org.apache.calcite.rel.type.RelRecordType;\n+import org.apache.calcite.rel.type.StructKind;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.schema.impl.AbstractTable;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Base class for all tables in the Calcite integration:\n+ * <ul>\n+ *     <li>Maps field types defined in the {@code core} module to Calcite types</li>\n+ *     <li>Provides access to the underlying table and statistics</li>\n+ * </ul>\n+ */\n+public class HazelcastTable extends AbstractTable {\n+\n+    private static final Map<QueryDataTypeFamily, SqlTypeName> QUERY_TO_SQL_TYPE = new HashMap<>();\n+\n+    static {\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.VARCHAR, SqlTypeName.VARCHAR);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BOOLEAN, SqlTypeName.BOOLEAN);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TINYINT, SqlTypeName.TINYINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.SMALLINT, SqlTypeName.SMALLINT);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.INT, SqlTypeName.INTEGER);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.BIGINT, SqlTypeName.BIGINT);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DECIMAL, SqlTypeName.DECIMAL);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.REAL, SqlTypeName.REAL);\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.DOUBLE, SqlTypeName.DOUBLE);\n+\n+        QUERY_TO_SQL_TYPE.put(QueryDataTypeFamily.TIME, SqlTypeName.TIME);", "originalCommit": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxODkzMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426518932", "bodyText": "It is explained to some extent in the 01-type-system.md, line 45. In short, time with timezone is difficult to deal with because timezone without a concrete date make it hard to apply daylight savings. For this reason, some vendors decide not to support it at all.", "author": "devozerov", "createdAt": "2020-05-18T10:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDI2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426524265", "bodyText": "In the code base we still have some support for TIME_WITH_LOCAL_TIME_ZONE, is it safe to assume we always treat it as TIME [WITHOUT TIME ZONE]?", "author": "taburet", "createdAt": "2020-05-18T10:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ2NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426582464", "bodyText": "AFAIK these are different data types from SQL perspective, so IMO we should not support TIME_WITH_LOCAL_TIME_ZONE.", "author": "devozerov", "createdAt": "2020-05-18T12:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4OTgyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426504264", "bodyText": "Why it's returning list of lists?", "author": "taburet", "createdAt": "2020-05-18T09:49:58Z", "path": "hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.schema;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Generic interface that resolves tables belonging to a particular backend.\n+ * <p>\n+ * At the moment the interface does exactly what we need - provides tables and registers default search paths.\n+ * In future, if we have more objects to expose, it might be expanded or reworked completely.\n+ */\n+public interface TableResolver {\n+    /**\n+     * @return Search paths to be added for object resolution.\n+     */\n+    List<List<String>> getDefaultSearchPaths();", "originalCommit": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNzcxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426517716", "bodyText": "A search path is a list of components. E.g. search patch hazelcast.partitioned is represented as List(\"hazelcast\", \"partitioned\"). Therefore, if there are multiple search paths, then this is a list of lists.", "author": "devozerov", "createdAt": "2020-05-18T10:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDk3OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426524979", "bodyText": "I see, probably it makes sense to explain that in javadoc.", "author": "taburet", "createdAt": "2020-05-18T10:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1ODgxNw==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426558817", "bodyText": "BTW, does order of elements in collections returned from getDefaultSearchPaths and getTables make some difference in resolution?", "author": "taburet", "createdAt": "2020-05-18T11:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MzA4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426583087", "bodyText": "Yes, the order is important - if two objects with the same name exist in two default search paths, we will pick the object from the path that goes earlier. I'll add this to JavaDocs.", "author": "devozerov", "createdAt": "2020-05-18T12:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MDk4Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r427140986", "bodyText": "Added JavaDocs.", "author": "devozerov", "createdAt": "2020-05-19T08:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b3dc4f6e97c040259ec91f49fa810d52bf797ae", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java\nindex 8d7641dbc9..90988d0586 100644\n--- a/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java\n+++ b/hazelcast/src/main/java/com/hazelcast/sql/impl/schema/TableResolver.java\n\n@@ -27,7 +27,18 @@ import java.util.List;\n  */\n public interface TableResolver {\n     /**\n-     * @return Search paths to be added for object resolution.\n+     * Gets the list of search paths for object resolution.\n+     * <p>\n+     * A single search path consists of two elements: predefined catalog (see {@link com.hazelcast.sql.impl.QueryUtils#CATALOG}\n+     * and schema name. For example {@code {\"hazelcast\", \"schema\"}}. In this case the \"schema\" will be added to a search paths,\n+     * so that a table {@code schema.table} could be referred as {@code table} in SQL scripts: {@code SELECT * FROM table}.\n+     * <p>\n+     * Order of search paths is important. If several search paths are defined, then the first path will be searched first, etc.\n+     * For example if a table with the same name is defined in {@code schema1} and {@code schema2}, and the following search\n+     * paths are provided {@code {\"hazelcast\", \"schema1\"}, {\"hazelcast\", \"schema1\"}}, then {@code SELECT * FROM table} will pick\n+     * the table from the {@code schema1}.\n+     *\n+     * @return The list of search paths for object resolution.\n      */\n     List<List<String>> getDefaultSearchPaths();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTAyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426649029", "bodyText": "It'd be nice to have an explanation somewhere why rowCount is double (not a long)?", "author": "petrpleshachkov", "createdAt": "2020-05-18T14:02:13Z", "path": "hazelcast-sql/src/main/java/com/hazelcast/sql/impl/calcite/schema/MapTableStatistic.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.sql.impl.calcite.schema;\n+\n+import org.apache.calcite.rel.RelCollation;\n+import org.apache.calcite.rel.RelDistribution;\n+import org.apache.calcite.rel.RelDistributionTraitDef;\n+import org.apache.calcite.rel.RelReferentialConstraint;\n+import org.apache.calcite.schema.Statistic;\n+import org.apache.calcite.util.ImmutableBitSet;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Simple table statistics for IMap and ReplicatedMap.\n+ */\n+public class MapTableStatistic implements Statistic {\n+    /** Row count that is fixed for the duration of query optimization process. */\n+    private final Long rowCount;\n+\n+    public MapTableStatistic(long rowCount) {\n+        this.rowCount = rowCount;\n+    }\n+\n+    @Override\n+    public Double getRowCount() {\n+        return (double) rowCount;", "originalCommit": "5fc43c85404605c5f8e93f54c1b75b8e6a48f50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODU0Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16980#discussion_r426658546", "bodyText": "This comes from a Calcite interface, so we do not have any control of it.", "author": "devozerov", "createdAt": "2020-05-18T14:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0OTAyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6feb427e36782d38ef8c7df9072e7ce60454ec0c", "url": "https://github.com/hazelcast/hazelcast/commit/6feb427e36782d38ef8c7df9072e7ce60454ec0c", "message": "Merge branch 'master' into issues/16979", "committedDate": "2020-05-19T08:49:38Z", "type": "commit"}, {"oid": "0b3dc4f6e97c040259ec91f49fa810d52bf797ae", "url": "https://github.com/hazelcast/hazelcast/commit/0b3dc4f6e97c040259ec91f49fa810d52bf797ae", "message": "JavaDocs.", "committedDate": "2020-05-19T08:56:36Z", "type": "commit"}]}