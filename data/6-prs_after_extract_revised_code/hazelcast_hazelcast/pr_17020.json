{"pr_number": 17020, "pr_title": "Fixes interoperability issues with CompletableFuture", "pr_createdAt": "2020-05-29T18:10:16Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17020", "timeline": [{"oid": "74769b4233694fb7b43768247b011e39fb8f1cff", "url": "https://github.com/hazelcast/hazelcast/commit/74769b4233694fb7b43768247b011e39fb8f1cff", "message": "Fixes interoperability issues with CompletableFuture\n\nSubclasses DelegatingCompletableFuture and\nAbstractInvocationFuture manage their own completion\nvalue state separately from superclass\nCompletableFuture. However CompletableFuture's\nmethods make use of private CompletableFuture state\nresulting in broken interoperability.", "committedDate": "2020-05-29T18:21:34Z", "type": "forcePushed"}, {"oid": "e8038e3a9d487f55227772839a0e997009e0cc67", "url": "https://github.com/hazelcast/hazelcast/commit/e8038e3a9d487f55227772839a0e997009e0cc67", "message": "Fixes interoperability issues with CompletableFuture\n\nSubclasses DelegatingCompletableFuture and\nAbstractInvocationFuture manage their own completion\nvalue state separately from superclass\nCompletableFuture. However CompletableFuture's\nmethods make use of private CompletableFuture state\nresulting in broken interoperability.", "committedDate": "2020-06-02T09:19:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNTYzOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r434615638", "bodyText": "This test would fail with IllegalStateException because the response thread that completes the setAsync stage is not allowed to make the getAsync remote call. Changing the default dependent action executor to DEFAULT_ASYNC_EXECUTOR fixes this.", "author": "vbekiaris", "createdAt": "2020-06-03T14:34:49Z", "path": "hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java", "diffHunk": "@@ -917,6 +918,14 @@ public void testGetPutRemoveAsync() {\n         }\n     }\n \n+    @Test\n+    public void testAsyncMethodChaining() {\n+        IMap<Integer, Integer> map = getInstance().getMap(\"testGetPutRemoveAsync\");\n+        CompletionStage<Integer> setThenGet = map.setAsync(1, 1)\n+                                              .thenCompose(v -> map.getAsync(1));\n+        assertEquals(1L, (long) setThenGet.toCompletableFuture().join());", "originalCommit": "51f996889305738665f8b1c250531337c78086de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ac91be5b2fe9da20163347ddbf8da27e48ee8fb7", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java b/hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java\nindex 2549ecac7d..8f16778e3d 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/BasicMapTest.java\n\n@@ -918,14 +917,6 @@ public class BasicMapTest extends HazelcastTestSupport {\n         }\n     }\n \n-    @Test\n-    public void testAsyncMethodChaining() {\n-        IMap<Integer, Integer> map = getInstance().getMap(\"testGetPutRemoveAsync\");\n-        CompletionStage<Integer> setThenGet = map.setAsync(1, 1)\n-                                              .thenCompose(v -> map.getAsync(1));\n-        assertEquals(1L, (long) setThenGet.toCompletableFuture().join());\n-    }\n-\n     @Test\n     public void testPutAllEmpty() {\n         IMap<Integer, Integer> map = getInstance().getMap(\"testPutAllEmpty\");\n"}}, {"oid": "ac91be5b2fe9da20163347ddbf8da27e48ee8fb7", "url": "https://github.com/hazelcast/hazelcast/commit/ac91be5b2fe9da20163347ddbf8da27e48ee8fb7", "message": "Fixes interoperability issues with CompletableFuture\n\nSubclasses DelegatingCompletableFuture and\nAbstractInvocationFuture manage their own completion\nvalue state separately from superclass\nCompletableFuture. However CompletableFuture's\nmethods make use of private CompletableFuture state\nresulting in broken interoperability.", "committedDate": "2020-06-04T15:22:19Z", "type": "commit"}, {"oid": "7a8b72739b89f3b660108027b33f517ee2ba794a", "url": "https://github.com/hazelcast/hazelcast/commit/7a8b72739b89f3b660108027b33f517ee2ba794a", "message": "Use async executor for dependent actions from default methods\n\nAs described in asynchronous methods javadoc (eg in\nIMap), default non-async method callbacks\nmust be executed by the DEFAULT_ASYNC_EXECUTOR.\nSee #16154 for reasoning.", "committedDate": "2020-06-04T16:38:53Z", "type": "commit"}, {"oid": "7a8b72739b89f3b660108027b33f517ee2ba794a", "url": "https://github.com/hazelcast/hazelcast/commit/7a8b72739b89f3b660108027b33f517ee2ba794a", "message": "Use async executor for dependent actions from default methods\n\nAs described in asynchronous methods javadoc (eg in\nIMap), default non-async method callbacks\nmust be executed by the DEFAULT_ASYNC_EXECUTOR.\nSee #16154 for reasoning.", "committedDate": "2020-06-04T16:38:53Z", "type": "forcePushed"}, {"oid": "6a15cf9e1de5c771c2a7026b853c2797dea67299", "url": "https://github.com/hazelcast/hazelcast/commit/6a15cf9e1de5c771c2a7026b853c2797dea67299", "message": "Return cached value under concurrent requests\n\nIn ClientDelegatingFuture when the current thread\ndoesn't win the CAS to set the cached deserialized\nvalue, return the same deserialized instance that\nis cached. The same behaviour applies in superclass\nDelegatingCompletableFuture.", "committedDate": "2020-06-05T05:57:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435916297", "bodyText": "Minor: why do we not want the parent to listen to the future completion instead?", "author": "mmedenjak", "createdAt": "2020-06-05T13:21:43Z", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/ClientDelegatingFuture.java", "diffHunk": "@@ -54,14 +54,18 @@\n \n     final boolean deserializeResponse;\n     private final ClientMessageDecoder clientMessageDecoder;\n-    private volatile Object decodedResponse = VOID;\n+    private volatile Object decodedResponse;\n \n     public ClientDelegatingFuture(ClientInvocationFuture clientInvocationFuture,\n                                   SerializationService serializationService,\n                                   ClientMessageDecoder clientMessageDecoder, V defaultValue, boolean deserializeResponse) {\n-        super(serializationService, clientInvocationFuture, defaultValue);\n+        super(serializationService, clientInvocationFuture, defaultValue, false);", "originalCommit": "6a15cf9e1de5c771c2a7026b853c2797dea67299", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4NzA3NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435987075", "bodyText": "We want to ensure that decodedResponse is initialized to VOID before the dependent action in whenComplete is executed. If the delegate future (clientInvocationFuture) is completed concurrently, it may be the case that the dependent action is executed before the constructor is done -> if the dependent was already registered in super constructor it might observe decodedResponse as null instead of VOID and break the value resolution logic (client message decoding, deserialized value caching etc).", "author": "vbekiaris", "createdAt": "2020-06-05T15:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDkyNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17020#discussion_r435990925", "bodyText": "Cool, thanks!", "author": "mmedenjak", "createdAt": "2020-06-05T15:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjI5Nw=="}], "type": "inlineReview", "revised_code": null}]}