{"pr_number": 16972, "pr_title": "Add support for processing WAN replication messages from 4.x members", "pr_createdAt": "2020-05-11T10:42:25Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/16972", "timeline": [{"oid": "3a61c21e0d8da56e1d27a721002a98078dd49c83", "url": "https://github.com/hazelcast/hazelcast/commit/3a61c21e0d8da56e1d27a721002a98078dd49c83", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-11T13:06:43Z", "type": "forcePushed"}, {"oid": "b815b2c959e3c88e21a2b643cce7cef590f563d6", "url": "https://github.com/hazelcast/hazelcast/commit/b815b2c959e3c88e21a2b643cce7cef590f563d6", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-11T13:42:57Z", "type": "forcePushed"}, {"oid": "4b693032b0b455876ddee314af563288403f3eb9", "url": "https://github.com/hazelcast/hazelcast/commit/4b693032b0b455876ddee314af563288403f3eb9", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-13T11:56:25Z", "type": "forcePushed"}, {"oid": "521089de6259efe8f2dcaa1c57788218dff052df", "url": "https://github.com/hazelcast/hazelcast/commit/521089de6259efe8f2dcaa1c57788218dff052df", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "02b83826badca9e2952fad5d4ac5f64458871cab", "url": "https://github.com/hazelcast/hazelcast/commit/02b83826badca9e2952fad5d4ac5f64458871cab", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "992b08772210ab5cca82b493c0ea9501f517a0ce", "url": "https://github.com/hazelcast/hazelcast/commit/992b08772210ab5cca82b493c0ea9501f517a0ce", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "16fe078e8fa5291f47d2c6fb45d4190b7c66de27", "url": "https://github.com/hazelcast/hazelcast/commit/16fe078e8fa5291f47d2c6fb45d4190b7c66de27", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "916b0fa1eba90a629b52fd7d449a91a009ee2f72", "url": "https://github.com/hazelcast/hazelcast/commit/916b0fa1eba90a629b52fd7d449a91a009ee2f72", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "e3a48ba8943b8cf9ba48b7d258b2d066ae6ad5fe", "url": "https://github.com/hazelcast/hazelcast/commit/e3a48ba8943b8cf9ba48b7d258b2d066ae6ad5fe", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "b2516c8d8d1ee7952e9696334bb003a8b017704e", "url": "https://github.com/hazelcast/hazelcast/commit/b2516c8d8d1ee7952e9696334bb003a8b017704e", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "0ed1634c64a58d6876cda91ca43116dceb426161", "url": "https://github.com/hazelcast/hazelcast/commit/0ed1634c64a58d6876cda91ca43116dceb426161", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "083df110a0c6333a9eb6865c6df724ccecaf5d1b", "url": "https://github.com/hazelcast/hazelcast/commit/083df110a0c6333a9eb6865c6df724ccecaf5d1b", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "fab6fac5a8f9e7d337b79bdbc06d680f9fc540ef", "url": "https://github.com/hazelcast/hazelcast/commit/fab6fac5a8f9e7d337b79bdbc06d680f9fc540ef", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:49:12Z", "type": "commit"}, {"oid": "9339ebe8e3b855188a0f14e755253d6fd9f73886", "url": "https://github.com/hazelcast/hazelcast/commit/9339ebe8e3b855188a0f14e755253d6fd9f73886", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:50:39Z", "type": "commit"}, {"oid": "5a04196c2711dca94dd0b6a21ee475209204ccf6", "url": "https://github.com/hazelcast/hazelcast/commit/5a04196c2711dca94dd0b6a21ee475209204ccf6", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:50:39Z", "type": "commit"}, {"oid": "3ab1a0c9c3c3617e17d4e9fbdb2fc02b963594a6", "url": "https://github.com/hazelcast/hazelcast/commit/3ab1a0c9c3c3617e17d4e9fbdb2fc02b963594a6", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:50:39Z", "type": "commit"}, {"oid": "604fd923555effe4ca7abc7e72a2cad1766c2819", "url": "https://github.com/hazelcast/hazelcast/commit/604fd923555effe4ca7abc7e72a2cad1766c2819", "message": "Add support for processing WAN replication messages from 4.x members\n\nAdds support on PASSIVE (target) cluster to be able to deserialize and\nprocess WAN replication events from a 4.x ACTIVE (source) cluster.", "committedDate": "2020-05-25T15:50:39Z", "type": "commit"}, {"oid": "5f2818377b9444bd23dd75beeff894ca7354c9fe", "url": "https://github.com/hazelcast/hazelcast/commit/5f2818377b9444bd23dd75beeff894ca7354c9fe", "message": "Address review comments", "committedDate": "2020-05-25T15:50:39Z", "type": "commit"}, {"oid": "5f2818377b9444bd23dd75beeff894ca7354c9fe", "url": "https://github.com/hazelcast/hazelcast/commit/5f2818377b9444bd23dd75beeff894ca7354c9fe", "message": "Address review comments", "committedDate": "2020-05-25T15:50:39Z", "type": "forcePushed"}, {"oid": "3acfb22ffcd38f5072b13414d7a714ad6aba8ff6", "url": "https://github.com/hazelcast/hazelcast/commit/3acfb22ffcd38f5072b13414d7a714ad6aba8ff6", "message": "Address review comments", "committedDate": "2020-05-26T07:38:55Z", "type": "commit"}, {"oid": "b7546631a0a87f3c9eaa540de4ddafd749005628", "url": "https://github.com/hazelcast/hazelcast/commit/b7546631a0a87f3c9eaa540de4ddafd749005628", "message": "Fix tests", "committedDate": "2020-05-26T11:57:23Z", "type": "commit"}, {"oid": "903af9c8a6e12d34256cff52d834c3e6379a5a2d", "url": "https://github.com/hazelcast/hazelcast/commit/903af9c8a6e12d34256cff52d834c3e6379a5a2d", "message": "Checkstyle", "committedDate": "2020-05-26T12:17:58Z", "type": "commit"}, {"oid": "93b6a3fa48094a4687651cee849ccd824df5a827", "url": "https://github.com/hazelcast/hazelcast/commit/93b6a3fa48094a4687651cee849ccd824df5a827", "message": "Fix tests", "committedDate": "2020-05-26T14:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NjczOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r430496739", "bodyText": "minor: leftover ConcurrentHashMap\nedit: actually it originates from the original file in master", "author": "vbekiaris", "createdAt": "2020-05-26T15:22:27Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedHashMapStreamSerializer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.compatibility.serialization.impl.CompatibilitySerializationConstants;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.util.MapUtil;\n+\n+import java.io.IOException;\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * The {@link LinkedHashMap} serializer\n+ * <p>\n+ * Important Note: The ConcurrentHashMap 'loadfactor' is not serialized.", "originalCommit": "93b6a3fa48094a4687651cee849ccd824df5a827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTgxMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431005812", "bodyText": "Yes, but I will change it regardless and fix it in the PR for 4.1, once these two have been released.", "author": "mmedenjak", "createdAt": "2020-05-27T10:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NjczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NTQ1NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431045455", "bodyText": "Fixed.", "author": "mmedenjak", "createdAt": "2020-05-27T11:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ5NjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedHashMapStreamSerializer.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedHashMapStreamSerializer.java\nindex 66b07e2fc8..871e1d136a 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedHashMapStreamSerializer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedHashMapStreamSerializer.java\n\n@@ -26,7 +26,7 @@ import java.util.LinkedHashMap;\n /**\n  * The {@link LinkedHashMap} serializer\n  * <p>\n- * Important Note: The ConcurrentHashMap 'loadfactor' is not serialized.\n+ * Important Note: The LinkedHashMap 'loadfactor' is not serialized.\n  */\n public class LinkedHashMapStreamSerializer<K, V> extends AbstractMapStreamSerializer<LinkedHashMap<K, V>> {\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNzM2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r430517365", "bodyText": "I think we are missing a test for this special serializer.\nSidenote: we could also use @RequiresJdk8 annotation on this class and write the body in JDK8 code directly here. OTOH, the reflection-based version will also work fine, probably it's not worth the fuss. PoC patch: https://gist.github.com/vbekiaris/df5ee6f9b6be04e2a12b4ff11bf19144 (disclaimer: I didn't actually try starting a member on JDK 6 with this patch).", "author": "vbekiaris", "createdAt": "2020-05-26T15:47:06Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/LinkedTransferQueueStreamSerializer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.core.HazelcastException;\n+import com.hazelcast.internal.compatibility.serialization.impl.CompatibilitySerializationConstants;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import com.hazelcast.nio.serialization.StreamSerializer;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * The {@code java.util.concurrent.LinkedTransferQueue} serializer\n+ */\n+@SuppressFBWarnings(\"REC_CATCH_EXCEPTION\")\n+public class LinkedTransferQueueStreamSerializer<E> implements StreamSerializer<Object> {", "originalCommit": "93b6a3fa48094a4687651cee849ccd824df5a827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNjM4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431006387", "bodyText": "Sure, adding test. And cool, I forgot about that annotation and the proposed approach, will use it.", "author": "mmedenjak", "createdAt": "2020-05-27T10:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNzM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NzEyMA==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431047120", "bodyText": "Copied tests for all serialisers added in 4.x. I had to use AbstractSerializationService#toBytes and be careful which objects are stored in the collections because actually we don't allow serialising using the \"compatibility\" serializers - they are meant to be used primarily for reading. Regardless, we have left the \"write\" code in some of them. Otherwise, the only way we could write tests would be if we copied the serialised format from 4.x tests into some kind of files.", "author": "mmedenjak", "createdAt": "2020-05-27T11:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNzM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0OTI2NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431049265", "bodyText": "Oh and BTW I've kept the reflection approach. Kinda bugs me a bit whenever I use actual JDK8 classes and methods since my IDE screams at me for using it, which was what I did in the tests. I can change it to your proposed approach after more consideration and testing on JDK6 but with one slight alteration - when running on JDK6, I'd simply skip registering the serializer instead of throwing an exception.", "author": "mmedenjak", "createdAt": "2020-05-27T11:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNzM2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyODkxMg==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r430528912", "bodyText": "typo: Return this node's UUID", "author": "vbekiaris", "createdAt": "2020-05-26T16:03:15Z", "path": "hazelcast/src/main/java/com/hazelcast/nio/IOService.java", "diffHunk": "@@ -110,9 +110,19 @@\n \n     InternalSerializationService getSerializationService();\n \n+    /**\n+     * Returns the serialization service capable of ser-de in 4.x format.\n+     */\n+    InternalSerializationService getCompatibilitySerializationService();\n+\n     MemberSocketInterceptor getSocketInterceptor(EndpointQualifier endpointQualifier);\n \n     InboundHandler[] createInboundHandlers(EndpointQualifier qualifier, TcpIpConnection connection);\n \n     OutboundHandler[] createOutboundHandlers(EndpointQualifier qualifier, TcpIpConnection connection);\n+\n+    /**\n+     * Return the current this nodes' UUID.", "originalCommit": "93b6a3fa48094a4687651cee849ccd824df5a827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0Nzg1Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431047853", "bodyText": "Fixed.", "author": "mmedenjak", "createdAt": "2020-05-27T11:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyODkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/IOService.java b/hazelcast/src/main/java/com/hazelcast/nio/IOService.java\nindex f3834324b0..df495b4257 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/IOService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/IOService.java\n\n@@ -122,7 +122,7 @@ public interface IOService {\n     OutboundHandler[] createOutboundHandlers(EndpointQualifier qualifier, TcpIpConnection connection);\n \n     /**\n-     * Return the current this nodes' UUID.\n+     * Return this node's UUID\n      */\n     String getUuid();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0MDI5Mw==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r430540293", "bodyText": "Maybe only exclude the client artifact when version is 4.x? Otherwise the hazelcast-client artifact will be missing from 3.12-3.11 compat tests, should we want to execute them.", "author": "vbekiaris", "createdAt": "2020-05-26T16:19:38Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastVersionLocator.java", "diffHunk": "@@ -56,14 +56,14 @@\n     }\n \n     public static File[] locateVersion(String version, File target, boolean enterprise) {\n-        File[] files = new File[enterprise ? 6 : 3];\n+        File[] files = new File[enterprise ? 4 : 2];\n         files[0] = locateMember(version, target, false);\n         files[1] = locateMemberTests(version, target, false);\n-        files[2] = locateClient(version, target, false);\n+        //files[2] = locateClient(version, target, false);", "originalCommit": "93b6a3fa48094a4687651cee849ccd824df5a827", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNjUzNw==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431006537", "bodyText": "Sure, I think I had a similar idea, will do it.", "author": "mmedenjak", "createdAt": "2020-05-27T10:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0MDI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NzE4Ng==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431047186", "bodyText": "Fixed, although, since the compatibility framework has been heavily adapted to translate between 3.x and 4.x, I don't bear much hope that RU tests will run without further fixes. And adding multiple version support to the compatibility guardian is going to be a real feat.", "author": "mmedenjak", "createdAt": "2020-05-27T11:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0MDI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastVersionLocator.java b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastVersionLocator.java\nindex 706f8a76fd..1283d7e691 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastVersionLocator.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastVersionLocator.java\n\n@@ -56,16 +58,21 @@ public class HazelcastVersionLocator {\n     }\n \n     public static File[] locateVersion(String version, File target, boolean enterprise) {\n-        File[] files = new File[enterprise ? 4 : 2];\n-        files[0] = locateMember(version, target, false);\n-        files[1] = locateMemberTests(version, target, false);\n-        //files[2] = locateClient(version, target, false);\n+        boolean is3_x = Version.of(version).getMajor() == 3;\n+        ArrayList<File> files = new ArrayList<File>();\n+        files.add(locateMember(version, target, false));\n+        files.add(locateMemberTests(version, target, false));\n+        if (is3_x) {\n+            files.add(locateClient(version, target, false));\n+        }\n         if (enterprise) {\n-            files[2] = locateMember(version, target, true);\n-            files[3] = locateMemberTests(version, target, true);\n-            //files[4] = locateClient(version, target, true);\n+            files.add(locateMember(version, target, true));\n+            files.add(locateMemberTests(version, target, true));\n+            if (is3_x) {\n+                files.add(locateClient(version, target, true));\n+            }\n         }\n-        return files;\n+        return files.toArray(new File[0]);\n     }\n \n     // attempts to locate member artifact in local maven repository, then downloads\n"}}, {"oid": "f0d0d4c06c370bba7737d9fde508785887579487", "url": "https://github.com/hazelcast/hazelcast/commit/f0d0d4c06c370bba7737d9fde508785887579487", "message": "Fix tests", "committedDate": "2020-05-27T06:39:11Z", "type": "commit"}, {"oid": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "url": "https://github.com/hazelcast/hazelcast/commit/3df55ca46b15ab19cb57a69460e49ac371d03eee", "message": "Address review comments", "committedDate": "2020-05-27T11:24:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0NTc4NA==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431445784", "bodyText": "\u00dcber-minor: typo in nethod.", "author": "blazember", "createdAt": "2020-05-27T21:13:37Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/TreeSetStreamSerializer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.compatibility.serialization.impl.CompatibilitySerializationConstants;\n+import com.hazelcast.nio.ObjectDataInput;\n+import com.hazelcast.nio.ObjectDataOutput;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+/**\n+ * The {@link TreeSet} serializer\n+ */\n+public class TreeSetStreamSerializer<E> extends AbstractCollectionStreamSerializer<Set<E>> {\n+\n+    @Override\n+    public int getTypeId() {\n+        return CompatibilitySerializationConstants.JAVA_DEFAULT_TYPE_TREE_SET;\n+    }\n+\n+    @Override\n+    public void destroy() {\n+\n+    }\n+\n+    @SuppressFBWarnings(value = \"BC_BAD_CAST_TO_CONCRETE_COLLECTION\",\n+            justification = \"The map is guaranteed to be of type TreeSet when this nethod is called.\")", "originalCommit": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMzE5NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431713195", "bodyText": "Ah, yes, the eagle eye! Will fix it :) That's actually from master so I'll fix it there as well.", "author": "mmedenjak", "createdAt": "2020-05-28T09:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0NTc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d89069ebdc5db3ea90d3351c883e364cbb71bb6c", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/TreeSetStreamSerializer.java b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/TreeSetStreamSerializer.java\nindex f115bd67ba..55d8791590 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/TreeSetStreamSerializer.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/serialization/impl/TreeSetStreamSerializer.java\n\n@@ -42,7 +42,7 @@ public class TreeSetStreamSerializer<E> extends AbstractCollectionStreamSerializ\n     }\n \n     @SuppressFBWarnings(value = \"BC_BAD_CAST_TO_CONCRETE_COLLECTION\",\n-            justification = \"The map is guaranteed to be of type TreeSet when this nethod is called.\")\n+            justification = \"The map is guaranteed to be of type TreeSet when this method is called.\")\n     @Override\n     public void write(ObjectDataOutput out, Set<E> collection) throws IOException {\n         out.writeObject(((TreeSet<E>) collection).comparator());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NDMyMQ==", "url": "https://github.com/hazelcast/hazelcast/pull/16972#discussion_r431454321", "bodyText": "Typo: skippped", "author": "blazember", "createdAt": "2020-05-27T21:31:13Z", "path": "hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastProxyFactory.java", "diffHunk": "@@ -75,6 +75,10 @@\n     // must be mapped both ways (old -> new name and vice versa) in this map\n     private static final Map<String, String> REFACTORED_INTERFACES;\n \n+    // interfaces that have been removed in the current version\n+    // and should be skippped when proxying", "originalCommit": "3df55ca46b15ab19cb57a69460e49ac371d03eee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d89069ebdc5db3ea90d3351c883e364cbb71bb6c", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastProxyFactory.java b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastProxyFactory.java\nindex 30f7ed38fb..5382e1b814 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastProxyFactory.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/starter/HazelcastProxyFactory.java\n\n@@ -76,7 +76,7 @@ public class HazelcastProxyFactory {\n     private static final Map<String, String> REFACTORED_INTERFACES;\n \n     // interfaces that have been removed in the current version\n-    // and should be skippped when proxying\n+    // and should be skipped when proxying\n     private static final Set<String> IGNORED_INTERFACES;\n \n     // <Class toProxy, ClassLoader targetClassLoader> -> Class<?> proxy mapping for subclass proxies\n"}}, {"oid": "d89069ebdc5db3ea90d3351c883e364cbb71bb6c", "url": "https://github.com/hazelcast/hazelcast/commit/d89069ebdc5db3ea90d3351c883e364cbb71bb6c", "message": "Address review comments", "committedDate": "2020-05-28T10:12:13Z", "type": "commit"}, {"oid": "c9858215194163fc3da84bff84546d2085e7f207", "url": "https://github.com/hazelcast/hazelcast/commit/c9858215194163fc3da84bff84546d2085e7f207", "message": "Address review comments", "committedDate": "2020-05-28T14:17:22Z", "type": "commit"}]}