{"pr_number": 17117, "pr_title": "Count of Set as a metric", "pr_createdAt": "2020-06-20T08:21:18Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17117", "timeline": [{"oid": "94f4bdcfbb39ad7a6915890a7b93f19143227bf3", "url": "https://github.com/hazelcast/hazelcast/commit/94f4bdcfbb39ad7a6915890a7b93f19143227bf3", "message": "count of set", "committedDate": "2020-06-20T08:18:39Z", "type": "commit"}, {"oid": "b03f89c4f5df34c484523a8419637c553dcec686", "url": "https://github.com/hazelcast/hazelcast/commit/b03f89c4f5df34c484523a8419637c553dcec686", "message": "Updates", "committedDate": "2020-06-20T10:55:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjg1Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r443132852", "bodyText": "This implementation will iterate on all distributed objects 6 times. Can you implement it in a way that it iterates only once? Doing it with the stream API would be a plus :)", "author": "erosb", "createdAt": "2020-06-20T13:55:43Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.cache.impl.CacheService;\n+import com.hazelcast.collection.impl.list.ListService;\n+import com.hazelcast.collection.impl.queue.QueueService;\n+import com.hazelcast.collection.impl.set.SetService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.multimap.impl.MultiMapService;\n+import com.hazelcast.ringbuffer.impl.RingbufferService;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+class DistributedObjectCounterCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> maps;\n+    Collection<DistributedObject> sets;\n+    Collection<DistributedObject> queues;\n+    Collection<DistributedObject> multimaps;\n+    Collection<DistributedObject> lists;\n+    Collection<DistributedObject> ringbuffers;\n+\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+\n+        maps = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(MapService.SERVICE_NAME)).collect(toList());\n+        sets = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(SetService.SERVICE_NAME)).collect(toList());\n+        queues = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(QueueService.SERVICE_NAME)).collect(toList());\n+        multimaps = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(MultiMapService.SERVICE_NAME)).collect(toList());\n+        lists = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().\n+                equals(ListService.SERVICE_NAME)).collect(toList());\n+        ringbuffers = distributedObjects.stream().filter(distributedObject -> distributedObject.getServiceName().", "originalCommit": "b03f89c4f5df34c484523a8419637c553dcec686", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1908c92b63c13595c81f2f48c546201e5dc81782", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex 37f438c8176..b65d9308af3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -15,7 +15,6 @@\n  */\n package com.hazelcast.internal.util.phonehome;\n \n-import com.hazelcast.cache.impl.CacheService;\n import com.hazelcast.collection.impl.list.ListService;\n import com.hazelcast.collection.impl.queue.QueueService;\n import com.hazelcast.collection.impl.set.SetService;\n"}}, {"oid": "1908c92b63c13595c81f2f48c546201e5dc81782", "url": "https://github.com/hazelcast/hazelcast/commit/1908c92b63c13595c81f2f48c546201e5dc81782", "message": "Updates", "committedDate": "2020-06-21T12:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMTI4Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r443511287", "bodyText": "This array seems to be unreasonable here. Please use 6 separate local variables instead. This current solution isn't very unreadable, but far from good. Please use separate local variables and replace the forEach() with a for loop so that you can mutate the variables. Alternatively you can use the stream api, with some work. You will need Collectors.groupingBy() and Collectors.counting() for that.", "author": "erosb", "createdAt": "2020-06-22T12:07:28Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.collection.impl.list.ListService;\n+import com.hazelcast.collection.impl.queue.QueueService;\n+import com.hazelcast.collection.impl.set.SetService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.multimap.impl.MultiMapService;\n+import com.hazelcast.ringbuffer.impl.RingbufferService;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+class DistributedObjectCounterCollector implements MetricsCollector {\n+\n+    Collection<DistributedObject> maps;\n+    Collection<DistributedObject> sets;\n+    Collection<DistributedObject> queues;\n+    Collection<DistributedObject> multimaps;\n+    Collection<DistributedObject> lists;\n+    Collection<DistributedObject> ringbuffers;\n+\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+        final int[] count = {0, 0, 0, 0, 0, 0};", "originalCommit": "1908c92b63c13595c81f2f48c546201e5dc81782", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc6325d757f055a371683e9fe701dff4fce777b3", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex b65d9308af3..46730f37d50 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -24,59 +24,31 @@ import com.hazelcast.map.impl.MapService;\n import com.hazelcast.multimap.impl.MultiMapService;\n import com.hazelcast.ringbuffer.impl.RingbufferService;\n \n+\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.groupingBy;\n \n-class DistributedObjectCounterCollector implements MetricsCollector {\n \n-    Collection<DistributedObject> maps;\n-    Collection<DistributedObject> sets;\n-    Collection<DistributedObject> queues;\n-    Collection<DistributedObject> multimaps;\n-    Collection<DistributedObject> lists;\n-    Collection<DistributedObject> ringbuffers;\n+class DistributedObjectCounterCollector implements MetricsCollector {\n \n \n     @Override\n     public Map<String, String> computeMetrics(Node hazelcastNode) {\n-        final int[] count = {0, 0, 0, 0, 0, 0};\n \n         Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n-\n-        distributedObjects.stream().forEach(distributedObject -> {\n-            switch (distributedObject.getServiceName()) {\n-                case MapService.SERVICE_NAME:\n-                    count[0]++;\n-                    break;\n-                case SetService.SERVICE_NAME:\n-                    count[1]++;\n-                    break;\n-                case QueueService.SERVICE_NAME:\n-                    count[2]++;\n-                    break;\n-                case MultiMapService.SERVICE_NAME:\n-                    count[3]++;\n-                    break;\n-                case ListService.SERVICE_NAME:\n-                    count[4]++;\n-                    break;\n-                case RingbufferService.SERVICE_NAME:\n-                    count[5]++;\n-                    break;\n-            }\n-        });\n-\n+        Map<String, Long> result = distributedObjects.stream().collect(groupingBy(DistributedObject::getServiceName, Collectors.counting()));\n         Map<String, String> countInfo = new HashMap<>();\n \n-        countInfo.put(\"mpct\", String.valueOf(count[0]));\n-        countInfo.put(\"sect\", String.valueOf(count[1]));\n-        countInfo.put(\"quct\", String.valueOf(count[2]));\n-        countInfo.put(\"mmct\", String.valueOf(count[3]));\n-        countInfo.put(\"lict\", String.valueOf(count[4]));\n-        countInfo.put(\"rbct\", String.valueOf(count[5]));\n+        countInfo.put(\"mpct\", String.valueOf(result.getOrDefault(MapService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"sect\", String.valueOf(result.getOrDefault(SetService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"quct\", String.valueOf(result.getOrDefault(QueueService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"mmct\", String.valueOf(result.getOrDefault(MultiMapService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"lict\", String.valueOf(result.getOrDefault(ListService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"rbct\", String.valueOf(result.getOrDefault(RingbufferService.SERVICE_NAME, 0L)));\n \n         return countInfo;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMjY0OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r443512648", "bodyText": "Just for curiosity, can you please check (at least some of the tests) what happens after a datastructure gets destroyed (with its destroy() method)? I'm curious if the count gets decreased (as expected)", "author": "erosb", "createdAt": "2020-06-22T12:10:05Z", "path": "hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java", "diffHunk": "@@ -242,5 +251,80 @@ public void testMapCountWithAtleastOneAttribute() {\n \n     }\n \n+    @Test\n+    public void testSetCount() {\n+        Map<String, String> parameters;\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"sect\"), \"0\");\n+\n+        Set<String> set1 = node.hazelcastInstance.getSet(\"hazelcast\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"sect\"), \"1\");\n+\n+        Set<String> set2 = node.hazelcastInstance.getSet(\"phonehome\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"sect\"), \"2\");\n+    }\n+\n+    @Test\n+    public void testQueueCount() {\n+        Map<String, String> parameters;\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"quct\"), \"0\");\n+\n+        Queue<String> queue1 = node.hazelcastInstance.getQueue(\"hazelcast\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"quct\"), \"1\");\n+\n+        Queue<String> queue2 = node.hazelcastInstance.getQueue(\"phonehome\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"quct\"), \"2\");\n+    }\n+\n+    @Test\n+    public void testMultimapCount() {\n+        Map<String, String> parameters;\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"mmct\"), \"0\");\n+\n+        MultiMap<Object, Object> multimap1 = node.hazelcastInstance.getMultiMap(\"hazelcast\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"mmct\"), \"1\");\n+\n+        MultiMap<Object, Object> multimap2 = node.hazelcastInstance.getMultiMap(\"phonehome\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"mmct\"), \"2\");\n+    }\n+\n+    @Test\n+    public void testListCount() {\n+        Map<String, String> parameters;\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"lict\"), \"0\");\n+\n+        List<Object> list1 = node.hazelcastInstance.getList(\"hazelcast\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"lict\"), \"1\");\n+\n+        List<Object> list2 = node.hazelcastInstance.getList(\"phonehome\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"lict\"), \"2\");\n+    }\n+\n+    @Test\n+    public void testRingBufferCount() {\n+        Map<String, String> parameters;\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"rbct\"), \"0\");\n+\n+        Ringbuffer<Object> ringbuffer1 = node.hazelcastInstance.getRingbuffer(\"hazelcast\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"rbct\"), \"1\");\n+\n+        Ringbuffer<Object> ringbuffer2 = node.hazelcastInstance.getRingbuffer(\"phonehome\");\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"rbct\"), \"2\");", "originalCommit": "1908c92b63c13595c81f2f48c546201e5dc81782", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc6325d757f055a371683e9fe701dff4fce777b3", "chunk": "diff --git a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\nindex 632c05dbc2f..d723e4986a8 100644\n--- a/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/internal/util/phonehome/PhoneHomeTest.java\n\n@@ -257,13 +257,17 @@ public class PhoneHomeTest extends HazelcastTestSupport {\n         parameters = phoneHome.phoneHome(true);\n         assertEquals(parameters.get(\"sect\"), \"0\");\n \n-        Set<String> set1 = node.hazelcastInstance.getSet(\"hazelcast\");\n+        ISet<String> set1 = node.hazelcastInstance.getSet(\"hazelcast\");\n         parameters = phoneHome.phoneHome(true);\n         assertEquals(parameters.get(\"sect\"), \"1\");\n \n-        Set<String> set2 = node.hazelcastInstance.getSet(\"phonehome\");\n+        ISet<Object> set2 = node.hazelcastInstance.getSet(\"phonehome\");\n         parameters = phoneHome.phoneHome(true);\n         assertEquals(parameters.get(\"sect\"), \"2\");\n+\n+        set2.destroy();\n+        parameters = phoneHome.phoneHome(true);\n+        assertEquals(parameters.get(\"sect\"), \"1\");\n     }\n \n     @Test\n"}}, {"oid": "fc6325d757f055a371683e9fe701dff4fce777b3", "url": "https://github.com/hazelcast/hazelcast/commit/fc6325d757f055a371683e9fe701dff4fce777b3", "message": "updates", "committedDate": "2020-06-22T12:58:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0MzY3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r443543677", "bodyText": "This looks much nicer than before, thank you. One concern at the moment is that it will count all datastructures, including the ones that we don't care for now, so please filter those out in an intermediate filter() operation. Thanks.", "author": "erosb", "createdAt": "2020-06-22T13:06:09Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -24,59 +24,31 @@\n import com.hazelcast.multimap.impl.MultiMapService;\n import com.hazelcast.ringbuffer.impl.RingbufferService;\n \n+\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.groupingBy;\n \n-class DistributedObjectCounterCollector implements MetricsCollector {\n \n-    Collection<DistributedObject> maps;\n-    Collection<DistributedObject> sets;\n-    Collection<DistributedObject> queues;\n-    Collection<DistributedObject> multimaps;\n-    Collection<DistributedObject> lists;\n-    Collection<DistributedObject> ringbuffers;\n+class DistributedObjectCounterCollector implements MetricsCollector {\n \n \n     @Override\n     public Map<String, String> computeMetrics(Node hazelcastNode) {\n-        final int[] count = {0, 0, 0, 0, 0, 0};\n \n         Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n-\n-        distributedObjects.stream().forEach(distributedObject -> {\n-            switch (distributedObject.getServiceName()) {\n-                case MapService.SERVICE_NAME:\n-                    count[0]++;\n-                    break;\n-                case SetService.SERVICE_NAME:\n-                    count[1]++;\n-                    break;\n-                case QueueService.SERVICE_NAME:\n-                    count[2]++;\n-                    break;\n-                case MultiMapService.SERVICE_NAME:\n-                    count[3]++;\n-                    break;\n-                case ListService.SERVICE_NAME:\n-                    count[4]++;\n-                    break;\n-                case RingbufferService.SERVICE_NAME:\n-                    count[5]++;\n-                    break;\n-            }\n-        });\n-\n+        Map<String, Long> result = distributedObjects.stream().collect(groupingBy(DistributedObject::getServiceName, Collectors.counting()));", "originalCommit": "fc6325d757f055a371683e9fe701dff4fce777b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e523553dedc892d04f6a0173a27d7749d7f8a9df", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex 46730f37d50..4389a3adf34 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -40,15 +40,27 @@ class DistributedObjectCounterCollector implements MetricsCollector {\n     public Map<String, String> computeMetrics(Node hazelcastNode) {\n \n         Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n-        Map<String, Long> result = distributedObjects.stream().collect(groupingBy(DistributedObject::getServiceName, Collectors.counting()));\n+\n+        Map<String, Boolean> map = new HashMap<>();\n+        map.put(MapService.SERVICE_NAME, true);\n+        map.put(SetService.SERVICE_NAME, true);\n+        map.put(QueueService.SERVICE_NAME, true);\n+        map.put(MultiMapService.SERVICE_NAME, true);\n+        map.put(ListService.SERVICE_NAME, true);\n+        map.put(RingbufferService.SERVICE_NAME, true);\n+\n+        Map<String, Long> distributedObjectCount = distributedObjects.stream()\n+                .filter(distributedObject -> map.containsKey(distributedObject.getServiceName()))\n+                .collect(groupingBy(DistributedObject::getServiceName, Collectors.counting()));\n+\n         Map<String, String> countInfo = new HashMap<>();\n \n-        countInfo.put(\"mpct\", String.valueOf(result.getOrDefault(MapService.SERVICE_NAME, 0L)));\n-        countInfo.put(\"sect\", String.valueOf(result.getOrDefault(SetService.SERVICE_NAME, 0L)));\n-        countInfo.put(\"quct\", String.valueOf(result.getOrDefault(QueueService.SERVICE_NAME, 0L)));\n-        countInfo.put(\"mmct\", String.valueOf(result.getOrDefault(MultiMapService.SERVICE_NAME, 0L)));\n-        countInfo.put(\"lict\", String.valueOf(result.getOrDefault(ListService.SERVICE_NAME, 0L)));\n-        countInfo.put(\"rbct\", String.valueOf(result.getOrDefault(RingbufferService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"mpct\", String.valueOf(distributedObjectCount.getOrDefault(MapService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"sect\", String.valueOf(distributedObjectCount.getOrDefault(SetService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"quct\", String.valueOf(distributedObjectCount.getOrDefault(QueueService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"mmct\", String.valueOf(distributedObjectCount.getOrDefault(MultiMapService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"lict\", String.valueOf(distributedObjectCount.getOrDefault(ListService.SERVICE_NAME, 0L)));\n+        countInfo.put(\"rbct\", String.valueOf(distributedObjectCount.getOrDefault(RingbufferService.SERVICE_NAME, 0L)));\n \n         return countInfo;\n     }\n"}}, {"oid": "e523553dedc892d04f6a0173a27d7749d7f8a9df", "url": "https://github.com/hazelcast/hazelcast/commit/e523553dedc892d04f6a0173a27d7749d7f8a9df", "message": "updates", "committedDate": "2020-06-22T13:20:20Z", "type": "commit"}, {"oid": "d40b7692d864bff52cebf0a3ba979fa407eccb5c", "url": "https://github.com/hazelcast/hazelcast/commit/d40b7692d864bff52cebf0a3ba979fa407eccb5c", "message": "updates", "committedDate": "2020-06-22T13:21:14Z", "type": "commit"}, {"oid": "6de82ca67c9143c806bfdedd6a6ce166f27fa6be", "url": "https://github.com/hazelcast/hazelcast/commit/6de82ca67c9143c806bfdedd6a6ce166f27fa6be", "message": "updates", "committedDate": "2020-06-22T13:28:01Z", "type": "commit"}, {"oid": "7758d45853beb4cc6aab2f2d9ff84d5df0313392", "url": "https://github.com/hazelcast/hazelcast/commit/7758d45853beb4cc6aab2f2d9ff84d5df0313392", "message": "removed import issue", "committedDate": "2020-06-22T13:30:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNDQzMg==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r444114432", "bodyText": "Is it necessary to create this list every time when the computeMetrics() method is invoked? I think it could be a constant. Also, these service names are referred to one-by-one both here and line 52 - 57, which is a sort of a duplication (not any severe though). So I think it would be possible to have a service name -> metric name map (as a constant), and use it in the groupingBy() operation's classifier function to directly build a map which is keyed by metric name.\nFinally, please try to find a more meaningful name for this value than \"list\".", "author": "erosb", "createdAt": "2020-06-23T10:11:47Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.collection.impl.list.ListService;\n+import com.hazelcast.collection.impl.queue.QueueService;\n+import com.hazelcast.collection.impl.set.SetService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.multimap.impl.MultiMapService;\n+import com.hazelcast.ringbuffer.impl.RingbufferService;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+class DistributedObjectCounterCollector implements MetricsCollector {\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+        List<String> list = Arrays.asList(MapService.SERVICE_NAME, SetService.SERVICE_NAME, QueueService.SERVICE_NAME,\n+                MultiMapService.SERVICE_NAME, ListService.SERVICE_NAME, RingbufferService.SERVICE_NAME);", "originalCommit": "7758d45853beb4cc6aab2f2d9ff84d5df0313392", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1c82c619334cffa32fed8411429e3e2c3d18781", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex 9311f43076a..db79050764d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -24,10 +24,8 @@ import com.hazelcast.map.impl.MapService;\n import com.hazelcast.multimap.impl.MultiMapService;\n import com.hazelcast.ringbuffer.impl.RingbufferService;\n \n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n"}}, {"oid": "a1c82c619334cffa32fed8411429e3e2c3d18781", "url": "https://github.com/hazelcast/hazelcast/commit/a1c82c619334cffa32fed8411429e3e2c3d18781", "message": "updates", "committedDate": "2020-06-24T08:33:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MTU0OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r444761549", "bodyText": "Please rename it to SERVICE_NAME_TO_METRIC_NAME or something similar. We use capitals by convention in java for constants (I know that the HZ source code is not fully compliant but we try to).", "author": "erosb", "createdAt": "2020-06-24T09:21:34Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.collection.impl.list.ListService;\n+import com.hazelcast.collection.impl.queue.QueueService;\n+import com.hazelcast.collection.impl.set.SetService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.multimap.impl.MultiMapService;\n+import com.hazelcast.ringbuffer.impl.RingbufferService;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+class DistributedObjectCounterCollector implements MetricsCollector {\n+\n+    private static final Map<String, String> mapMetric;", "originalCommit": "a1c82c619334cffa32fed8411429e3e2c3d18781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7be7a55da5dee73abe2059c93bdc907886244a10", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex db79050764d..17639f58295 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -33,16 +33,16 @@ import static java.util.stream.Collectors.groupingBy;\n \n class DistributedObjectCounterCollector implements MetricsCollector {\n \n-    private static final Map<String, String> mapMetric;\n+    private static final Map<String, String> SERVICE_NAME_TO_METRIC_NAME;\n \n     static {\n-        mapMetric = new HashMap<>();\n-        mapMetric.put(MapService.SERVICE_NAME, \"mpct\");\n-        mapMetric.put(SetService.SERVICE_NAME, \"sect\");\n-        mapMetric.put(QueueService.SERVICE_NAME, \"quct\");\n-        mapMetric.put(MultiMapService.SERVICE_NAME, \"mmct\");\n-        mapMetric.put(ListService.SERVICE_NAME, \"lict\");\n-        mapMetric.put(RingbufferService.SERVICE_NAME, \"rbct\");\n+        SERVICE_NAME_TO_METRIC_NAME = new HashMap<>();\n+        SERVICE_NAME_TO_METRIC_NAME.put(MapService.SERVICE_NAME, \"mpct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(SetService.SERVICE_NAME, \"sect\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(QueueService.SERVICE_NAME, \"quct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(MultiMapService.SERVICE_NAME, \"mmct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(ListService.SERVICE_NAME, \"lict\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(RingbufferService.SERVICE_NAME, \"rbct\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjM3Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17117#discussion_r444762377", "bodyText": "nit: I suggest renaming k to serviceName and v to metricName", "author": "erosb", "createdAt": "2020-06-24T09:22:58Z", "path": "hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hazelcast.internal.util.phonehome;\n+\n+import com.hazelcast.collection.impl.list.ListService;\n+import com.hazelcast.collection.impl.queue.QueueService;\n+import com.hazelcast.collection.impl.set.SetService;\n+import com.hazelcast.core.DistributedObject;\n+import com.hazelcast.instance.impl.Node;\n+import com.hazelcast.map.impl.MapService;\n+import com.hazelcast.multimap.impl.MultiMapService;\n+import com.hazelcast.ringbuffer.impl.RingbufferService;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+\n+class DistributedObjectCounterCollector implements MetricsCollector {\n+\n+    private static final Map<String, String> mapMetric;\n+\n+    static {\n+        mapMetric = new HashMap<>();\n+        mapMetric.put(MapService.SERVICE_NAME, \"mpct\");\n+        mapMetric.put(SetService.SERVICE_NAME, \"sect\");\n+        mapMetric.put(QueueService.SERVICE_NAME, \"quct\");\n+        mapMetric.put(MultiMapService.SERVICE_NAME, \"mmct\");\n+        mapMetric.put(ListService.SERVICE_NAME, \"lict\");\n+        mapMetric.put(RingbufferService.SERVICE_NAME, \"rbct\");\n+    }\n+\n+    @Override\n+    public Map<String, String> computeMetrics(Node hazelcastNode) {\n+\n+        Collection<DistributedObject> distributedObjects = hazelcastNode.hazelcastInstance.getDistributedObjects();\n+\n+        Map<String, Long> countDistributedObjects = new HashMap<>(distributedObjects.stream()\n+                .filter(distributedObject -> mapMetric.containsKey(distributedObject.getServiceName()))\n+                .collect(groupingBy(DistributedObject::getServiceName, Collectors.counting())));\n+\n+        Map<String, String> countInfo = new HashMap<>();\n+\n+        mapMetric.forEach((k, v) -> countInfo.put(v, String.valueOf(countDistributedObjects.getOrDefault(k, 0L))));", "originalCommit": "a1c82c619334cffa32fed8411429e3e2c3d18781", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7be7a55da5dee73abe2059c93bdc907886244a10", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\nindex db79050764d..17639f58295 100644\n--- a/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/internal/util/phonehome/DistributedObjectCounterCollector.java\n\n@@ -33,16 +33,16 @@ import static java.util.stream.Collectors.groupingBy;\n \n class DistributedObjectCounterCollector implements MetricsCollector {\n \n-    private static final Map<String, String> mapMetric;\n+    private static final Map<String, String> SERVICE_NAME_TO_METRIC_NAME;\n \n     static {\n-        mapMetric = new HashMap<>();\n-        mapMetric.put(MapService.SERVICE_NAME, \"mpct\");\n-        mapMetric.put(SetService.SERVICE_NAME, \"sect\");\n-        mapMetric.put(QueueService.SERVICE_NAME, \"quct\");\n-        mapMetric.put(MultiMapService.SERVICE_NAME, \"mmct\");\n-        mapMetric.put(ListService.SERVICE_NAME, \"lict\");\n-        mapMetric.put(RingbufferService.SERVICE_NAME, \"rbct\");\n+        SERVICE_NAME_TO_METRIC_NAME = new HashMap<>();\n+        SERVICE_NAME_TO_METRIC_NAME.put(MapService.SERVICE_NAME, \"mpct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(SetService.SERVICE_NAME, \"sect\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(QueueService.SERVICE_NAME, \"quct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(MultiMapService.SERVICE_NAME, \"mmct\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(ListService.SERVICE_NAME, \"lict\");\n+        SERVICE_NAME_TO_METRIC_NAME.put(RingbufferService.SERVICE_NAME, \"rbct\");\n     }\n \n     @Override\n"}}, {"oid": "7be7a55da5dee73abe2059c93bdc907886244a10", "url": "https://github.com/hazelcast/hazelcast/commit/7be7a55da5dee73abe2059c93bdc907886244a10", "message": "updates", "committedDate": "2020-06-24T09:26:55Z", "type": "commit"}]}