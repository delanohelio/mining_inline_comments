{"pr_number": 17886, "pr_title": "Implement IMap.entrySet() on a PartitionIdSet ", "pr_createdAt": "2020-11-24T10:53:36Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17886", "timeline": [{"oid": "9a1978c410491e54931168e9dd3eddf1d1ed2e75", "url": "https://github.com/hazelcast/hazelcast/commit/9a1978c410491e54931168e9dd3eddf1d1ed2e75", "message": "Add entrySet(predicate, partitionIdSet)", "committedDate": "2020-11-24T10:49:05Z", "type": "commit"}, {"oid": "fce9919d80bbfd2d54d30004b926e87a0b45e0f9", "url": "https://github.com/hazelcast/hazelcast/commit/fce9919d80bbfd2d54d30004b926e87a0b45e0f9", "message": "Avoid the expensive PartitionIdSet.size() operation", "committedDate": "2020-11-24T12:59:06Z", "type": "commit"}, {"oid": "b2faff9f07bcb152cc8e16e63f7ccccb166c6cff", "url": "https://github.com/hazelcast/hazelcast/commit/b2faff9f07bcb152cc8e16e63f7ccccb166c6cff", "message": "Fix test failure", "committedDate": "2020-11-24T13:06:32Z", "type": "commit"}, {"oid": "1f0a26f5c2ac7a780ada474a224ef7b21d6dd0d3", "url": "https://github.com/hazelcast/hazelcast/commit/1f0a26f5c2ac7a780ada474a224ef7b21d6dd0d3", "message": "Send operation only to members owning some partition", "committedDate": "2020-11-25T13:43:17Z", "type": "commit"}, {"oid": "2772d450efd6206ffe2e773cbd120772d95a5ab3", "url": "https://github.com/hazelcast/hazelcast/commit/2772d450efd6206ffe2e773cbd120772d95a5ab3", "message": "Fix PartitionPredicate\n\nFixes #17882", "committedDate": "2020-11-25T13:59:39Z", "type": "commit"}, {"oid": "300da13c7f4980f0e2448c94515ab7392f5ae463", "url": "https://github.com/hazelcast/hazelcast/commit/300da13c7f4980f0e2448c94515ab7392f5ae463", "message": "Simplify tests", "committedDate": "2020-11-25T14:10:17Z", "type": "commit"}, {"oid": "cda1aa1ce664919f3bb3090563808cc3bc531a08", "url": "https://github.com/hazelcast/hazelcast/commit/cda1aa1ce664919f3bb3090563808cc3bc531a08", "message": "Add tests", "committedDate": "2020-11-25T14:20:50Z", "type": "commit"}, {"oid": "327e730cefefacdb24ad727acf1595438757fe35", "url": "https://github.com/hazelcast/hazelcast/commit/327e730cefefacdb24ad727acf1595438757fe35", "message": "Fix generateKeyForPartition for client instance", "committedDate": "2020-11-25T16:52:18Z", "type": "commit"}, {"oid": "60cc3dc9b80b4bf846e9ea919916ecd65a8f97ba", "url": "https://github.com/hazelcast/hazelcast/commit/60cc3dc9b80b4bf846e9ea919916ecd65a8f97ba", "message": "Fix test failures", "committedDate": "2020-11-25T16:52:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxODU4OA==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r531018588", "bodyText": "Changing the serialized form of a class in a patch release will break patch-level-compatibility: 4.1.1 will not be able to participate in the same cluster as 4.1 member. The class evolution support we have for rolling upgrades doesn't help much here, because it is geared towards minor-version compatibility.\nIn terms of serialization, it would be probably ok to start with the same format (1 int, 1 UTF field), then append the partitions object. This way, a 4.1 receiver will just ignore whatever is past the 2 fields it is already aware of, and not throw a serialization exception. The other way around, a 4.1.1 receiver of a Target from a 4.1 member can try to read the partitions object after the UTF field and expect an exception (assuming then that it was sent from a 4.1 member). However this only solves the \"do not throw a serialization exception\" part of the problem. The semantics of deserialized object would be the real challenge to solve. Is there any way to avoid changing Target's serialized form?", "author": "vbekiaris", "createdAt": "2020-11-26T13:10:17Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java", "diffHunk": "@@ -79,17 +81,18 @@ public int getClassId() {\n \n     @Override\n     public void writeData(ObjectDataOutput out) throws IOException {\n-        out.writeInt(partitionId);\n+        // TODO use IDS", "originalCommit": "60cc3dc9b80b4bf846e9ea919916ecd65a8f97ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0MjkzNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r532642934", "bodyText": "Hmm, didn't realize this. But I think the class is never serialized. It's only used in the MapProxySupport and QueryExecutionEngine locally to send the right operations to right members. I'm trying this, see if any tests fail.", "author": "viliam-durina", "createdAt": "2020-11-30T14:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyNDU1NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r532724555", "bodyText": "I made the Target non-serializable. IMO it's pretty easy to reason from the code that it's never serialized: It's just a value that always lands in QueryEngine.execute where it is used to create operations, but it's not a part of them. I also checked the enterprise code, there's no another implementation of QueryEngine.", "author": "viliam-durina", "createdAt": "2020-11-30T16:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAxODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "11c5050b0671632f97acda8376871ff71c21005b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java b/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\nindex 66e26d05c5..3453ec2a8c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\n\n@@ -81,6 +81,9 @@ public class Target implements IdentifiedDataSerializable {\n \n     @Override\n     public void writeData(ObjectDataOutput out) throws IOException {\n+        if (true) {\n+            throw new UnsupportedOperationException();\n+        }\n         // TODO use IDS\n         out.writeObject(partitions);\n         out.writeUTF(mode.name());\n"}}, {"oid": "11c5050b0671632f97acda8376871ff71c21005b", "url": "https://github.com/hazelcast/hazelcast/commit/11c5050b0671632f97acda8376871ff71c21005b", "message": "Experiment: wreck the Target serialization\n\nI think it's never serialized.", "committedDate": "2020-11-30T14:35:53Z", "type": "commit"}, {"oid": "c6cd1c7f3c7e1ad98ddf98805f7c47d144fc7d2e", "url": "https://github.com/hazelcast/hazelcast/commit/c6cd1c7f3c7e1ad98ddf98805f7c47d144fc7d2e", "message": "Make Target non-serializable", "committedDate": "2020-11-30T16:21:43Z", "type": "commit"}, {"oid": "ee7195842aa0962718376e47fe9a5f4a4a3227da", "url": "https://github.com/hazelcast/hazelcast/commit/ee7195842aa0962718376e47fe9a5f4a4a3227da", "message": "Fix checkstyle", "committedDate": "2020-11-30T16:26:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMzEyNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r531033127", "bodyText": "Probably this class is generated by the client protocol. If that's the case, it will be overwritten whenever client protocol classes are regenerated. A clients team member can enlighten us on this.", "author": "vbekiaris", "createdAt": "2020-11-26T13:35:04Z", "path": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/codec/holder/PagingPredicateHolder.java", "diffHunk": "@@ -24,6 +24,7 @@\n import com.hazelcast.query.impl.predicates.PagingPredicateImpl;\n import com.hazelcast.query.impl.predicates.PartitionPredicateImpl;\n \n+import javax.annotation.Nonnull;", "originalCommit": "60cc3dc9b80b4bf846e9ea919916ecd65a8f97ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDIzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r534160235", "bodyText": "We can just revert changes in this class. I was thinking of doing PartitionIdSetPredicate and stumbled across this class and fixed the issues intellij showed.", "author": "viliam-durina", "createdAt": "2020-12-02T13:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NjM0Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r534176347", "bodyText": "No, it is not generated by the client protocol.", "author": "sancar", "createdAt": "2020-12-02T13:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIwOTcxMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r534209713", "bodyText": "We can just revert changes in this class. I was thinking of doing PartitionIdSetPredicate and stumbled across this class and fixed the issues intellij showed.\n\nNo need to revert from my side. I was just wondering if the changes might get trampled, which is not the case so it's a +1 from me.", "author": "vbekiaris", "createdAt": "2020-12-02T14:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMzEyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNjc2Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r533326762", "bodyText": "nit: \"Execute the {@code keySet} operation on the given {@code partitions}.\" seems sufficient (\"given partitions\" does not necessarily imply \"all nodes\" will be involved).", "author": "vbekiaris", "createdAt": "2020-12-01T11:09:25Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java", "diffHunk": "@@ -684,7 +685,18 @@ public void clear() {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Set<K> keySet(@Nonnull Predicate<K, V> predicate) {\n-        return executePredicate(predicate, IterationType.KEY, true);\n+        return executePredicate(predicate, IterationType.KEY, true, Target.ALL_NODES);\n+    }\n+\n+    /**\n+     * Execute the {@code keySet} operation on all nodes, but only on the given\n+     * {@code partitions}.", "originalCommit": "ee7195842aa0962718376e47fe9a5f4a4a3227da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf5acfca990f0a6e73bef2a98154996a92ce36b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java\nindex 406f31e70f..ac524c2b88 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxyImpl.java\n\n@@ -689,8 +689,8 @@ public class MapProxyImpl<K, V> extends MapProxySupport<K, V> implements EventJo\n     }\n \n     /**\n-     * Execute the {@code keySet} operation on all nodes, but only on the given\n-     * {@code partitions}.\n+     * Execute the {@code keySet} operation only on the given {@code\n+     * partitions}.\n      * <p>\n      * <b>Warning:</b> {@code partitions} is mutated during the call.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE0NjQwMw==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r534146403", "bodyText": "We can now get rid of this no-args constructor, it was only used by the serializer hook.", "author": "vbekiaris", "createdAt": "2020-12-02T12:57:38Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java", "diffHunk": "@@ -16,80 +16,54 @@\n \n package com.hazelcast.map.impl.query;\n \n-import com.hazelcast.map.impl.MapDataSerializerHook;\n-import com.hazelcast.nio.ObjectDataInput;\n-import com.hazelcast.nio.ObjectDataOutput;\n-import com.hazelcast.nio.serialization.IdentifiedDataSerializable;\n+import com.hazelcast.internal.util.collection.PartitionIdSet;\n \n-import java.io.IOException;\n-\n-import static com.hazelcast.map.impl.query.Target.TargetMode.PARTITION_OWNER;\n import static com.hazelcast.internal.util.Preconditions.checkNotNull;\n+import static com.hazelcast.map.impl.query.Target.TargetMode.PARTITION_OWNER;\n \n /**\n  * Target for a query.\n  * <p>\n- * Possible options:\n- * - all nodes\n- * - local node only\n- * - given partition\n+ * Possible options:<ul>\n+ *     <li>all nodes\n+ *     <li>local node only\n+ *     <li>given partition set\n+ * </ul>\n  */\n-public class Target implements IdentifiedDataSerializable {\n+public class Target {\n \n     public static final Target ALL_NODES = new Target(TargetMode.ALL_NODES, null);\n     public static final Target LOCAL_NODE = new Target(TargetMode.LOCAL_NODE, null);\n \n     private TargetMode mode;\n-    private Integer partitionId;\n+    private PartitionIdSet partitions;\n \n     public Target() {", "originalCommit": "ee7195842aa0962718376e47fe9a5f4a4a3227da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf5acfca990f0a6e73bef2a98154996a92ce36b", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java b/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\nindex 95bf1a7805..8fecc76202 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/query/Target.java\n\n@@ -35,11 +35,8 @@ public class Target {\n     public static final Target ALL_NODES = new Target(TargetMode.ALL_NODES, null);\n     public static final Target LOCAL_NODE = new Target(TargetMode.LOCAL_NODE, null);\n \n-    private TargetMode mode;\n-    private PartitionIdSet partitions;\n-\n-    public Target() {\n-    }\n+    private final TargetMode mode;\n+    private final PartitionIdSet partitions;\n \n     private Target(TargetMode mode, PartitionIdSet partitions) {\n         this.mode = checkNotNull(mode);\n"}}, {"oid": "2bf5acfca990f0a6e73bef2a98154996a92ce36b", "url": "https://github.com/hazelcast/hazelcast/commit/2bf5acfca990f0a6e73bef2a98154996a92ce36b", "message": "Address Vasillis' comments", "committedDate": "2020-12-02T13:22:36Z", "type": "commit"}, {"oid": "416cefef10e76deb7e20c390a4f888edd174262e", "url": "https://github.com/hazelcast/hazelcast/commit/416cefef10e76deb7e20c390a4f888edd174262e", "message": "Unrelated typos", "committedDate": "2020-12-02T13:24:30Z", "type": "commit"}, {"oid": "f16bdb72aa39dc0d32a459cd8545c316aa547da7", "url": "https://github.com/hazelcast/hazelcast/commit/f16bdb72aa39dc0d32a459cd8545c316aa547da7", "message": "Fix checkstyle", "committedDate": "2020-12-02T14:22:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMDIzOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r535130239", "bodyText": "Seems runOnAllPartitions can also be removed and\nrunOnGivenPartitions(adjustedQuery, getAllPartitionIds(), TargetMode.ALL_NODES) can be used instead?", "author": "ahmetmircik", "createdAt": "2020-12-03T11:25:36Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/query/QueryEngineImpl.java", "diffHunk": "@@ -93,9 +93,14 @@ public Result execute(Query query, Target target) {\n             case ALL_NODES:\n                 return runOnAllPartitions(adjustedQuery);", "originalCommit": "f16bdb72aa39dc0d32a459cd8545c316aa547da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3MTgyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r535971824", "bodyText": "fixed", "author": "viliam-durina", "createdAt": "2020-12-04T09:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMDIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c55c0479d8bc11ddc240f22c830eb6e6f3856c09", "chunk": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/query/QueryEngineImpl.java b/hazelcast/src/main/java/com/hazelcast/map/impl/query/QueryEngineImpl.java\nindex dc293e001f..fcadba1a4d 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/query/QueryEngineImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/query/QueryEngineImpl.java\n\n@@ -91,7 +91,7 @@ public class QueryEngineImpl implements QueryEngine {\n         Query adjustedQuery = adjustQuery(query);\n         switch (target.mode()) {\n             case ALL_NODES:\n-                return runOnAllPartitions(adjustedQuery);\n+                return runOnGivenPartitions(adjustedQuery, getAllPartitionIds(), TargetMode.ALL_NODES);\n             case LOCAL_NODE:\n                 return runOnGivenPartitions(adjustedQuery, getLocalPartitionIds(), TargetMode.LOCAL_NODE);\n             case PARTITION_OWNER:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjk2OQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r535132969", "bodyText": "seems we can just return without further proceeding if userPredice is always false?", "author": "ahmetmircik", "createdAt": "2020-12-03T11:28:13Z", "path": "hazelcast/src/main/java/com/hazelcast/map/impl/proxy/MapProxySupport.java", "diffHunk": "@@ -1351,14 +1353,22 @@ private void publishMapEvent(int numberOfAffectedEntries, EntryEventType eventTy\n     protected <T extends Result> T executeQueryInternal(Predicate predicate, Aggregator aggregator, Projection projection,\n                                                         IterationType iterationType, Target target) {\n         QueryEngine queryEngine = getMapQueryEngine();\n-        Predicate userPredicate = predicate;\n+        final Predicate userPredicate;\n \n         if (predicate instanceof PartitionPredicate) {\n             PartitionPredicate partitionPredicate = (PartitionPredicate) predicate;\n             Data key = toData(partitionPredicate.getPartitionKey());\n             int partitionId = partitionService.getPartitionId(key);\n-            userPredicate = partitionPredicate.getTarget();\n-            target = createPartitionTarget(partitionId);\n+            if (target.mode() == TargetMode.LOCAL_NODE && !partitionService.isPartitionOwner(partitionId)\n+                    || target.mode() == TargetMode.PARTITION_OWNER && !target.partitions().contains(partitionId)\n+            ) {\n+                userPredicate = alwaysFalse();", "originalCommit": "f16bdb72aa39dc0d32a459cd8545c316aa547da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3OTgyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17886#discussion_r535979829", "bodyText": "Possibly we could, but it's an edge case, not even correctly handled before. You'd need to construct an empty QueryResult or an empty AggregationResult. Looking at QueryResult constructor, it wasn't clear to me how to construct an empty one. Would be quite complex and would need quite a lot of tests to cover the code, because it might very rarely happen otherwise. This is simple enough and gives correct result.", "author": "viliam-durina", "createdAt": "2020-12-04T10:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjk2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c55c0479d8bc11ddc240f22c830eb6e6f3856c09", "url": "https://github.com/hazelcast/hazelcast/commit/c55c0479d8bc11ddc240f22c830eb6e6f3856c09", "message": "Remove duplicate code", "committedDate": "2020-12-04T10:02:25Z", "type": "commit"}]}