{"pr_number": 8999, "pr_title": "Fix throttling issue in websocket APIs when using JWT tokens", "pr_createdAt": "2020-07-17T13:08:47Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8999", "timeline": [{"oid": "3aae3648ba395d064389b0de14a20577e0a11b44", "url": "https://github.com/wso2/carbon-apimgt/commit/3aae3648ba395d064389b0de14a20577e0a11b44", "message": "Fix throttling issue in websocket APIs when using JWT tokens", "committedDate": "2020-07-17T13:07:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTM2MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457275360", "bodyText": "can we append the km name here?", "author": "isharac", "createdAt": "2020-07-20T10:52:01Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");", "originalCommit": "3aae3648ba395d064389b0de14a20577e0a11b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzUyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303520", "bodyText": "Fixed in 83d8083", "author": "ChamodDamitha", "createdAt": "2020-07-20T11:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\nindex 408ca7247db..df43c6de048 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n\n@@ -322,16 +322,16 @@ public class JWTValidator {\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            log.debug(\"Begin subscription validation via Key Manager\");\n+            log.debug(\"Begin subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager());\n             APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n                     apiVersion, jwtValidationInfo);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                log.debug(\"Subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager() + \". Status: \" +\n                         apiKeyValidationInfoDTO.isAuthorized());\n             }\n             if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                log.debug(\"JWT authentication successful.\");\n+                log.debug(\"JWT authentication successful. user: \" + apiKeyValidationInfoDTO.getEndUserName());\n                 String endUserToken = null;\n                 JWTInfoDto jwtInfoDto;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTUwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457275503", "bodyText": "here as well", "author": "isharac", "createdAt": "2020-07-20T10:52:15Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +", "originalCommit": "3aae3648ba395d064389b0de14a20577e0a11b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzY2NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303665", "bodyText": "Fixed in 83d8083", "author": "ChamodDamitha", "createdAt": "2020-07-20T11:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\nindex 408ca7247db..df43c6de048 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n\n@@ -322,16 +322,16 @@ public class JWTValidator {\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            log.debug(\"Begin subscription validation via Key Manager\");\n+            log.debug(\"Begin subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager());\n             APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n                     apiVersion, jwtValidationInfo);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                log.debug(\"Subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager() + \". Status: \" +\n                         apiKeyValidationInfoDTO.isAuthorized());\n             }\n             if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                log.debug(\"JWT authentication successful.\");\n+                log.debug(\"JWT authentication successful. user: \" + apiKeyValidationInfoDTO.getEndUserName());\n                 String endUserToken = null;\n                 JWTInfoDto jwtInfoDto;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzEyNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457277124", "bodyText": "can we append the username/any other info here?", "author": "isharac", "createdAt": "2020-07-20T10:54:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");", "originalCommit": "3aae3648ba395d064389b0de14a20577e0a11b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzc1MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303750", "bodyText": "Fixed in 83d8083", "author": "ChamodDamitha", "createdAt": "2020-07-20T11:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\nindex 408ca7247db..df43c6de048 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n\n@@ -322,16 +322,16 @@ public class JWTValidator {\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            log.debug(\"Begin subscription validation via Key Manager\");\n+            log.debug(\"Begin subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager());\n             APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n                     apiVersion, jwtValidationInfo);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                log.debug(\"Subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager() + \". Status: \" +\n                         apiKeyValidationInfoDTO.isAuthorized());\n             }\n             if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                log.debug(\"JWT authentication successful.\");\n+                log.debug(\"JWT authentication successful. user: \" + apiKeyValidationInfoDTO.getEndUserName());\n                 String endUserToken = null;\n                 JWTInfoDto jwtInfoDto;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzkxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457277918", "bodyText": "we can use a constant for the error message and reuse in the exception", "author": "isharac", "createdAt": "2020-07-20T10:56:01Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java", "diffHunk": "@@ -322,64 +322,34 @@ public AuthenticationContext authenticateForWebSocket(SignedJWT jwtToken, String\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            net.minidev.json.JSONObject api =\n-                    GatewayUtils.validateAPISubscription(apiContext, apiVersion, jwtValidationInfo,\n-                            jwtHeader, true);\n-            if (api == null) {\n-                boolean validateSubscriptionViaKM = Boolean.parseBoolean(\n-                        ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                                .getFirstProperty(APIConstants.JWT_AUTHENTICATION_SUBSCRIPTION_VALIDATION)\n-                                                                        );\n-                if (validateSubscriptionViaKM) {\n-                    log.debug(\"Begin subscription validation via Key Manager\");\n-                    APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n-                            apiVersion, jwtValidationInfo);\n-\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Subscription validation via Key Manager. Status: \" +\n-                                apiKeyValidationInfoDTO.isAuthorized());\n-                    }\n-                    if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                        log.debug(\"JWT authentication successful.\");\n-                        String endUserToken;\n-                        if (jwtGenerationEnabled) {\n-                            JWTInfoDto jwtInfoDto;\n-                            try {\n-                                jwtInfoDto =\n-                                        GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, apiKeyValidationInfoDTO,\n-                                                apiContext, apiVersion);\n-                                endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n-                                return GatewayUtils\n-                                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n-                                                apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n-                            } catch (ParseException e) {\n-                                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n-                            }\n-                        }\n-                    } else {\n-                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                        throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-                                \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-                    }\n-                }\n-                log.debug(\"Ignored subscription validation\");\n+            log.debug(\"Begin subscription validation via Key Manager\");\n+            APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n+                    apiVersion, jwtValidationInfo);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                        apiKeyValidationInfoDTO.isAuthorized());\n             }\n-            log.debug(\"JWT authentication successful.\");\n-            String endUserToken = null;\n-            try {\n-                if (jwtGenerationEnabled) {\n-                    JWTInfoDto jwtInfoDto =\n-                            GatewayUtils.generateJWTInfoDto(jwtValidationInfo, api, null, apiContext, apiVersion);\n-                    endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+            if (apiKeyValidationInfoDTO.isAuthorized()) {\n+                log.debug(\"JWT authentication successful.\");\n+                String endUserToken = null;\n+                JWTInfoDto jwtInfoDto;\n+                try {\n+                    if (jwtGenerationEnabled) {\n+                        jwtInfoDto = GatewayUtils.generateJWTInfoDto(jwtValidationInfo, null,\n+                                apiKeyValidationInfoDTO, apiContext, apiVersion);\n+                        endUserToken = generateAndRetrieveJWTToken(tokenSignature, jwtInfoDto);\n+                    }\n+                    return GatewayUtils.generateAuthenticationContext(tokenSignature, jwtValidationInfo, null,\n+                            apiKeyValidationInfoDTO, getApiLevelPolicy(), endUserToken, true);\n+                } catch (ParseException e) {\n+                    throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n+                            APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE, e);\n                 }\n-                return GatewayUtils\n-                        .generateAuthenticationContext(tokenSignature, jwtValidationInfo, api, null,\n-                                getApiLevelPolicy(),\n-                                endUserToken, true);\n-            } catch (ParseException e) {\n-                throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR,\n-                        APISecurityConstants.API_AUTH_GENERAL_ERROR_MESSAGE);\n+            } else {\n+                log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");", "originalCommit": "3aae3648ba395d064389b0de14a20577e0a11b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwMzg0Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8999#discussion_r457303847", "bodyText": "Fixed in 83d8083", "author": "ChamodDamitha", "createdAt": "2020-07-20T11:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NzkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\nindex 408ca7247db..df43c6de048 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/jwt/JWTValidator.java\n\n@@ -322,16 +322,16 @@ public class JWTValidator {\n         }\n \n         if (jwtValidationInfo != null && jwtValidationInfo.isValid()) {\n-            log.debug(\"Begin subscription validation via Key Manager\");\n+            log.debug(\"Begin subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager());\n             APIKeyValidationInfoDTO apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(apiContext,\n                     apiVersion, jwtValidationInfo);\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\"Subscription validation via Key Manager. Status: \" +\n+                log.debug(\"Subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager() + \". Status: \" +\n                         apiKeyValidationInfoDTO.isAuthorized());\n             }\n             if (apiKeyValidationInfoDTO.isAuthorized()) {\n-                log.debug(\"JWT authentication successful.\");\n+                log.debug(\"JWT authentication successful. user: \" + apiKeyValidationInfoDTO.getEndUserName());\n                 String endUserToken = null;\n                 JWTInfoDto jwtInfoDto;\n                 try {\n"}}, {"oid": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "url": "https://github.com/wso2/carbon-apimgt/commit/83d8083bf4fdd8144025e55cdf9c2c0259d88850", "message": "Fix review comments", "committedDate": "2020-07-20T11:37:31Z", "type": "commit"}, {"oid": "83d8083bf4fdd8144025e55cdf9c2c0259d88850", "url": "https://github.com/wso2/carbon-apimgt/commit/83d8083bf4fdd8144025e55cdf9c2c0259d88850", "message": "Fix review comments", "committedDate": "2020-07-20T11:37:31Z", "type": "forcePushed"}]}