{"pr_number": 8509, "pr_title": "Resolving URL and Remote references.", "pr_createdAt": "2020-05-14T17:44:27Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8509", "timeline": [{"oid": "f4c5adc90bbfc50fb39a326064441e755322db61", "url": "https://github.com/wso2/carbon-apimgt/commit/f4c5adc90bbfc50fb39a326064441e755322db61", "message": "resolve remote references", "committedDate": "2020-05-14T17:29:11Z", "type": "commit"}, {"oid": "f2e8af16e325e84d8647045ffa0bfb609a0dd29a", "url": "https://github.com/wso2/carbon-apimgt/commit/f2e8af16e325e84d8647045ffa0bfb609a0dd29a", "message": "add archive prompting", "committedDate": "2020-05-14T17:29:57Z", "type": "commit"}, {"oid": "bc1d27edb426a7c6d0ba680a953203333264690c", "url": "https://github.com/wso2/carbon-apimgt/commit/bc1d27edb426a7c6d0ba680a953203333264690c", "message": "remove newline", "committedDate": "2020-05-14T17:32:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyODM0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425328343", "bodyText": "Shall we omit '/' from the file name?", "author": "tgtshanika", "createdAt": "2020-05-14T17:56:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -178,6 +178,14 @@\n     public static final String GOVERNANCE_COMPONENT_REGISTRY_LOCATION = \"/repository/components/org.wso2.carbon\" +\n             \".governance\";\n \n+    // registry location for OpenAPI files\n+    public static final String OPENAPI_ARCHIVES_TEMP_FOLDER = \"OPENAPI-archives\";\n+    public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n+    public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n+    public static final String CHARSET = \"UTF-8\";\n+    public static final String OPENAPI_MASTER_JSON = \"/swagger.json\";", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODAzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568035", "bodyText": "bbdcfe5#diff-d28b77ae984cf341809858ec0fb93f3fR186", "author": "Sarangan0219", "createdAt": "2020-05-15T05:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMyODM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\nindex 2d7011ca415..797640ba8aa 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\n@@ -183,8 +183,8 @@ public final class APIConstants {\n     public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n     public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n     public static final String CHARSET = \"UTF-8\";\n-    public static final String OPENAPI_MASTER_JSON = \"/swagger.json\";\n-    public static final String OPENAPI_MASTER_YAML = \"/swagger.yaml\";\n+    public static final String OPENAPI_MASTER_JSON = \"swagger.json\";\n+    public static final String OPENAPI_MASTER_YAML = \"swagger.yaml\";\n \n     // registry location for wsdl files\n     public static final String API_WSDL_RESOURCE_LOCATION = API_APPLICATION_DATA_LOCATION + \"/wsdls/\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MjE5OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425352199", "bodyText": "Line width has to be 120", "author": "tgtshanika", "createdAt": "2020-05-14T18:38:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODE0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568149", "bodyText": "bbdcfe5", "author": "Sarangan0219", "createdAt": "2020-05-15T05:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1MjE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzk2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425353962", "bodyText": "Add error message into exeception", "author": "tgtshanika", "createdAt": "2020-05-14T18:41:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODM0Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568342", "bodyText": "bbdcfe5#diff-c212ee576ac1ca0476ff5f5fb61fff6cR689", "author": "Sarangan0219", "createdAt": "2020-05-15T05:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Mzk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTAxNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425355016", "bodyText": "variable names should be in camelCase ie: archive_directory, master_swagger", "author": "tgtshanika", "createdAt": "2020-05-14T18:43:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODQ1NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568455", "bodyText": "bbdcfe5", "author": "Sarangan0219", "createdAt": "2020-05-15T05:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NjcwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425356708", "bodyText": "Shouldn't we break the loop at this point?", "author": "tgtshanika", "createdAt": "2020-05-14T18:46:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1NzU2MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425557560", "bodyText": "This check is to get the directory path inside the zip and avoid getting files instead of directories. Thus the zip always contain only one directory.\nValid input :\ntemp.zip --- > temp (directory)\nInvalid input :\ntemp.zip ----> temp.yaml", "author": "Sarangan0219", "createdAt": "2020-05-15T04:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NjcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Njk2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425356963", "bodyText": "Exception message", "author": "tgtshanika", "createdAt": "2020-05-14T18:47:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODUyNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568524", "bodyText": "bbdcfe5#diff-c212ee576ac1ca0476ff5f5fb61fff6cR680", "author": "Sarangan0219", "createdAt": "2020-05-15T05:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1Njk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NzcyNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425367726", "bodyText": "Catch IOException at relevant places and throw APIManagementException with corresponding error message", "author": "tgtshanika", "createdAt": "2020-05-14T19:05:59Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwMDM0Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425600347", "bodyText": "820c752", "author": "Sarangan0219", "createdAt": "2020-05-15T06:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NzcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODE5OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425388198", "bodyText": "Shall we use IOUtils to handle file reads?", "author": "tgtshanika", "createdAt": "2020-05-14T19:45:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODYzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568637", "bodyText": "bbdcfe5#diff-c212ee576ac1ca0476ff5f5fb61fff6cR694", "author": "Sarangan0219", "createdAt": "2020-05-15T05:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTI2NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425389264", "bodyText": "Const.equals(variable) -> SwaggerVersion.OPEN_API.equals(version)", "author": "tgtshanika", "createdAt": "2020-05-14T19:47:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();\n+        String content = new String(data, APIConstants.CHARSET);\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (version.equals(SwaggerVersion.OPEN_API)) {", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODc3OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568778", "bodyText": "bbdcfe5", "author": "Sarangan0219", "createdAt": "2020-05-15T05:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTM3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425389373", "bodyText": "Const.equals(variable)", "author": "tgtshanika", "createdAt": "2020-05-14T19:47:45Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +652,69 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n+            throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n+                .randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archive_directory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archive_directory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archive_directory == null) {\n+            log.error(\"Could not find an archive in the given ZIP file \");\n+            throw new FileNotFoundException();\n+        }\n+        File master_swagger;\n+        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n+            throw new FileNotFoundException();\n+        }\n+        String openAPIContent = \"\";\n+        FileInputStream fis = new FileInputStream(master_swagger);\n+        byte[] data = new byte[(int) master_swagger.length()];\n+        fis.read(data);\n+        fis.close();\n+        String content = new String(data, APIConstants.CHARSET);\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (version.equals(SwaggerVersion.OPEN_API)) {\n+            String filePath = master_swagger.getAbsolutePath();\n+            OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n+            ParseOptions options = new ParseOptions();\n+            options.setResolve(true);\n+            OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n+            openAPIContent = SerializerUtils.toYamlString(openAPI);\n+        } else if (version.equals(SwaggerVersion.SWAGGER)) {", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2ODc5MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425568791", "bodyText": "bbdcfe5", "author": "Sarangan0219", "createdAt": "2020-05-15T05:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..e353e351cd7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -660,52 +661,48 @@ public class OASParserUtil {\n      * @return APIDefinitionValidationResponse\n      * @throws APIManagementException if error occurred while parsing definition\n      */\n-    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream, boolean returnContent)\n-            throws APIManagementException, IOException {\n-        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator + APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID\n-                .randomUUID().toString();\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException, IOException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n         String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n         String extractedLocation = APIFileUtil\n                 .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n         File[] listOfFiles = new File(extractedLocation).listFiles();\n-        File archive_directory = null;\n+        File archiveDirectory = null;\n         if (listOfFiles != null) {\n             for (File file: listOfFiles) {\n                 if (file.isDirectory()) {\n-                    archive_directory = file.getAbsoluteFile();\n+                    archiveDirectory = file.getAbsoluteFile();\n                 }\n             }\n         }\n-        if (archive_directory == null) {\n-            log.error(\"Could not find an archive in the given ZIP file \");\n-            throw new FileNotFoundException();\n+        if (archiveDirectory == null) {\n+            throw new FileNotFoundException(\"Could not find an archive in the given ZIP file.\");\n         }\n-        File master_swagger;\n-        if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_JSON);\n-        } else if ((new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n-            master_swagger = new File(archive_directory + APIConstants.OPENAPI_MASTER_YAML);\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n         } else {\n-            log.error(\"Could not find a master swagger file with the name of swagger.json /swagger.yaml\");\n-            throw new FileNotFoundException();\n+            throw new FileNotFoundException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n         }\n         String openAPIContent = \"\";\n-        FileInputStream fis = new FileInputStream(master_swagger);\n-        byte[] data = new byte[(int) master_swagger.length()];\n-        fis.read(data);\n-        fis.close();\n-        String content = new String(data, APIConstants.CHARSET);\n+        InputStream masterInputStream = new FileInputStream(masterSwagger);\n+        String content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n         SwaggerVersion version;\n         version = getSwaggerVersion(content);\n-        if (version.equals(SwaggerVersion.OPEN_API)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n             ParseOptions options = new ParseOptions();\n             options.setResolve(true);\n             OpenAPI openAPI = openAPIV3Parser.read(filePath, null, options);\n             openAPIContent = SerializerUtils.toYamlString(openAPI);\n-        } else if (version.equals(SwaggerVersion.SWAGGER)) {\n-            String filePath = master_swagger.getAbsolutePath();\n+        } else if (SwaggerVersion.SWAGGER.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n             SwaggerParser parser = new SwaggerParser();\n             Swagger swagger = parser.read(filePath, null, true);\n             openAPIContent = Yaml.pretty().writeValueAsString(swagger);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1OTc2MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425559761", "bodyText": "Its not a good practice to use * import. Shall we import by class?", "author": "tgtshanika", "createdAt": "2020-05-15T04:29:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -82,25 +87,17 @@\n import org.wso2.carbon.apimgt.api.model.Scope;\n import org.wso2.carbon.apimgt.api.model.URITemplate;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIFileUtil;\n import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n import org.wso2.carbon.registry.api.Registry;\n import org.wso2.carbon.registry.api.RegistryException;\n import org.wso2.carbon.registry.api.Resource;\n import org.wso2.carbon.registry.core.session.UserRegistry;\n \n-import java.io.IOException;\n+import java.io.*;\n import java.net.URL;\n import java.nio.charset.Charset;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "bc1d27edb426a7c6d0ba680a953203333264690c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MTkxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425571917", "bodyText": "94d8d21", "author": "Sarangan0219", "createdAt": "2020-05-15T05:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1OTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "94d8d2129d1d2a4806b067848a2811e868233de2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 0e6573d6950..d41c5309e4a 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -94,11 +95,26 @@ import org.wso2.carbon.registry.api.RegistryException;\n import org.wso2.carbon.registry.api.Resource;\n import org.wso2.carbon.registry.core.session.UserRegistry;\n \n-import java.io.*;\n+import java.io.IOException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.FileNotFoundException;\n import java.net.URL;\n import java.nio.charset.Charset;\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.HashMap;\n import java.util.stream.Collectors;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.LinkedHashSet;\n+import java.util.Arrays;\n+import java.util.UUID;\n+\n \n import static org.wso2.carbon.apimgt.impl.utils.APIUtil.handleException;\n \n"}}, {"oid": "bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "url": "https://github.com/wso2/carbon-apimgt/commit/bbdcfe5dd9f994b5693c99f127caa4948e5f3f87", "message": "edit requested changes", "committedDate": "2020-05-15T05:03:18Z", "type": "commit"}, {"oid": "94d8d2129d1d2a4806b067848a2811e868233de2", "url": "https://github.com/wso2/carbon-apimgt/commit/94d8d2129d1d2a4806b067848a2811e868233de2", "message": "Add specific imports", "committedDate": "2020-05-15T05:19:45Z", "type": "commit"}, {"oid": "820c7527e677d3fa54fab4de58c6b346e224f69e", "url": "https://github.com/wso2/carbon-apimgt/commit/820c7527e677d3fa54fab4de58c6b346e224f69e", "message": "add error handling", "committedDate": "2020-05-15T06:49:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODQzNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425678436", "bodyText": "probably you can use existing Constance from the Charset class.", "author": "ruks", "createdAt": "2020-05-15T09:25:51Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java", "diffHunk": "@@ -178,6 +178,14 @@\n     public static final String GOVERNANCE_COMPONENT_REGISTRY_LOCATION = \"/repository/components/org.wso2.carbon\" +\n             \".governance\";\n \n+    // registry location for OpenAPI files\n+    public static final String OPENAPI_ARCHIVES_TEMP_FOLDER = \"OPENAPI-archives\";\n+    public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n+    public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n+    public static final String CHARSET = \"UTF-8\";", "originalCommit": "820c7527e677d3fa54fab4de58c6b346e224f69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTQzOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426245439", "bodyText": "9ded714#diff-d28b77ae984cf341809858ec0fb93f3fL185", "author": "Sarangan0219", "createdAt": "2020-05-17T10:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\nindex 797640ba8aa..6e253a5aad9 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\n@@ -182,7 +182,6 @@ public final class APIConstants {\n     public static final String OPENAPI_ARCHIVES_TEMP_FOLDER = \"OPENAPI-archives\";\n     public static final String OPENAPI_EXTRACTED_DIRECTORY = \"extracted\";\n     public static final String OPENAPI_ARCHIVE_ZIP_FILE = \"openapi-archive.zip\";\n-    public static final String CHARSET = \"UTF-8\";\n     public static final String OPENAPI_MASTER_JSON = \"swagger.json\";\n     public static final String OPENAPI_MASTER_YAML = \"swagger.yaml\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODc3NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425678775", "bodyText": "you can exit the loop once you identify the archiveDirectory.", "author": "ruks", "createdAt": "2020-05-15T09:26:25Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archiveDirectory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archiveDirectory = file.getAbsoluteFile();", "originalCommit": "820c7527e677d3fa54fab4de58c6b346e224f69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzE3OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425703178", "bodyText": "This check is to get the directory path inside the zip and avoid getting files instead of directories. Thus the zip always contain only one directory. Thus break will be redundant\nValid input :\ntemp.zip --- > temp (directory)\nInvalid input :\ntemp.zip ----> temp.yaml", "author": "Sarangan0219", "createdAt": "2020-05-15T10:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NjI1Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426256253", "bodyText": "we agreed to use the naming convention for the master swagger. Because we cannot guarantee the directory structure because helper files may contain multiple directories in same level.\nSo we can remove this logic.", "author": "ruks", "createdAt": "2020-05-17T12:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3ODc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 7572f20536f..1e8f697af5e 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -668,6 +669,30 @@ public class OASParserUtil {\n         return \"\";\n     }\n \n+    public static File checkMasterSwagger(File archiveDirectory) throws APIManagementException {\n+        File masterSwagger = null;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+            return masterSwagger;\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n+            return masterSwagger;\n+        } else {\n+            File[] listOfFiles = archiveDirectory.listFiles(File::isDirectory);\n+            if (listOfFiles != null) {\n+                for (File file: listOfFiles) {\n+                    masterSwagger = checkMasterSwagger(file);\n+                }\n+            }\n+        }\n+        if (masterSwagger != null) {\n+            return masterSwagger;\n+        } else {\n+            throw new APIManagementException(\"Could not find a master swagger file with the name of swagger.json \" +\n+                    \"/swagger.yaml\");\n+        }\n+    }\n+\n     /**\n      * Extract the archive file and validates the openAPI definition\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5ODgxMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425698812", "bodyText": "can we define another method named \"validateAPIDefinitionByPath\" on respective OAS parsers? Then you can call it from here.\nif so you can simply return openAPIV3Parser.validateAPIDefinitionByPath(path, returnJsonContent) here.\nin respective parsers, you have to implement validateAPIDefinitionByPath function with following specific logic to parser the file path. In there you can set the correct OAS model(OpenAPI or Swagger) to the APIDefinitionValidationResponse.\nWith that simply you can reduce the unnecessary content parsing in multiple places.", "author": "ruks", "createdAt": "2020-05-15T10:03:58Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();\n+        File archiveDirectory = null;\n+        if (listOfFiles != null) {\n+            for (File file: listOfFiles) {\n+                if (file.isDirectory()) {\n+                    archiveDirectory = file.getAbsoluteFile();\n+                }\n+            }\n+        }\n+        if (archiveDirectory == null) {\n+            throw new APIManagementException(\"Could not find an archive in the given ZIP file.\");\n+        }\n+        File masterSwagger;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n+        } else {\n+            throw new APIManagementException(\"Could not find a master swagger file with the name of swagger.json \"\n+                    + \"/swagger.yaml\");\n+        }\n+        String content;\n+        try {\n+            InputStream masterInputStream = new FileInputStream(masterSwagger);\n+            content = IOUtils.toString(masterInputStream, APIConstants.CHARSET);\n+        } catch (IOException e) {\n+            throw new APIManagementException(\"Error reading master swagger file\");\n+        }\n+        String openAPIContent = \"\";\n+        SwaggerVersion version;\n+        version = getSwaggerVersion(content);\n+        if (SwaggerVersion.OPEN_API.equals(version)) {\n+            String filePath = masterSwagger.getAbsolutePath();\n+            OpenAPIV3Parser openAPIV3Parser = new OpenAPIV3Parser();\n+            ParseOptions options = new ParseOptions();", "originalCommit": "820c7527e677d3fa54fab4de58c6b346e224f69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NzUwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426247509", "bodyText": "What do you mean by unnecessary content parsing ?\nHere are creating a parser, resolving and getting the specific parser object and converting the parser object to string. These three folds are specific for each parsers and even if we have a separate method logic the same should be done in method logic too.", "author": "Sarangan0219", "createdAt": "2020-05-17T11:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5ODgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1OTMyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426259321", "bodyText": "Since are parsing file multiple times it is better to avoid unnecessary parsing. Also, it is better to separate OAS3 and OAS2 to respective classes. If we support a naming convention to identify master swagger, this can be done.\nCan you please check the attached diff? OAS_Path_validation.txt", "author": "ruks", "createdAt": "2020-05-17T13:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5ODgxMg=="}], "type": "inlineReview", "revised_code": {"commit": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 7572f20536f..1e8f697af5e 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -668,6 +669,30 @@ public class OASParserUtil {\n         return \"\";\n     }\n \n+    public static File checkMasterSwagger(File archiveDirectory) throws APIManagementException {\n+        File masterSwagger = null;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+            return masterSwagger;\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n+            return masterSwagger;\n+        } else {\n+            File[] listOfFiles = archiveDirectory.listFiles(File::isDirectory);\n+            if (listOfFiles != null) {\n+                for (File file: listOfFiles) {\n+                    masterSwagger = checkMasterSwagger(file);\n+                }\n+            }\n+        }\n+        if (masterSwagger != null) {\n+            return masterSwagger;\n+        } else {\n+            throw new APIManagementException(\"Could not find a master swagger file with the name of swagger.json \" +\n+                    \"/swagger.yaml\");\n+        }\n+    }\n+\n     /**\n      * Extract the archive file and validates the openAPI definition\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTM5NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r425701394", "bodyText": "you can simply list only the required file.\nex:\nFilenameFilter filter = (dir, name) -> name.equalsIgnoreCase(\"swagger.json\") || \nname.equalsIgnoreCase(\"swagger.yaml\")\nFile f = new File(path);\nf.list(filter); // should have yaml to json file.", "author": "ruks", "createdAt": "2020-05-15T10:09:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java", "diffHunk": "@@ -655,6 +668,74 @@ private static String getComponentCategory(String ref) {\n         return \"\";\n     }\n \n+    /**\n+     * Extract the archive file and validates the openAPI definition\n+     *\n+     * @param inputStream   file as input stream\n+     * @param returnContent whether to return the content of the definition in the response DTO\n+     * @return APIDefinitionValidationResponse\n+     * @throws APIManagementException if error occurred while parsing definition\n+     */\n+    public static APIDefinitionValidationResponse extractAndValidateOpenAPIArchive(InputStream inputStream,\n+            boolean returnContent) throws APIManagementException {\n+        String path = System.getProperty(APIConstants.JAVA_IO_TMPDIR) + File.separator +\n+                APIConstants.OPENAPI_ARCHIVES_TEMP_FOLDER + File.separator + UUID.randomUUID().toString();\n+        String archivePath = path + File.separator + APIConstants.OPENAPI_ARCHIVE_ZIP_FILE;\n+        String extractedLocation = APIFileUtil\n+                .extractUploadedArchive(inputStream, APIConstants.OPENAPI_EXTRACTED_DIRECTORY, archivePath, path);\n+        File[] listOfFiles = new File(extractedLocation).listFiles();", "originalCommit": "820c7527e677d3fa54fab4de58c6b346e224f69e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTkwNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426245907", "bodyText": "User can have nested directories and place the API definition inside the leaf directory. Thus when using this filter will only check the root directory and return false .We need to traverse all over the directories and validate for the master swagger\nThis recursive function is doing that process :\n9ded714#diff-c212ee576ac1ca0476ff5f5fb61fff6cR672", "author": "Sarangan0219", "createdAt": "2020-05-17T10:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NjU2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8509#discussion_r426256562", "bodyText": "As I mentioned above, we cannot use directory structure and have to stick to naming conversion.", "author": "ruks", "createdAt": "2020-05-17T12:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMTM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\nindex 7572f20536f..1e8f697af5e 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/definitions/OASParserUtil.java\n\n@@ -668,6 +669,30 @@ public class OASParserUtil {\n         return \"\";\n     }\n \n+    public static File checkMasterSwagger(File archiveDirectory) throws APIManagementException {\n+        File masterSwagger = null;\n+        if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_JSON);\n+            return masterSwagger;\n+        } else if ((new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML)).exists()) {\n+            masterSwagger = new File(archiveDirectory + \"/\" + APIConstants.OPENAPI_MASTER_YAML);\n+            return masterSwagger;\n+        } else {\n+            File[] listOfFiles = archiveDirectory.listFiles(File::isDirectory);\n+            if (listOfFiles != null) {\n+                for (File file: listOfFiles) {\n+                    masterSwagger = checkMasterSwagger(file);\n+                }\n+            }\n+        }\n+        if (masterSwagger != null) {\n+            return masterSwagger;\n+        } else {\n+            throw new APIManagementException(\"Could not find a master swagger file with the name of swagger.json \" +\n+                    \"/swagger.yaml\");\n+        }\n+    }\n+\n     /**\n      * Extract the archive file and validates the openAPI definition\n      *\n"}}, {"oid": "9ded714b1b9db9c1e33fa3fef5239858920580f9", "url": "https://github.com/wso2/carbon-apimgt/commit/9ded714b1b9db9c1e33fa3fef5239858920580f9", "message": "handle exceptions and add method logic for finding master swagger", "committedDate": "2020-05-17T10:34:33Z", "type": "commit"}, {"oid": "2faddad17acc148a83e2fef262d10561c73b98ad", "url": "https://github.com/wso2/carbon-apimgt/commit/2faddad17acc148a83e2fef262d10561c73b98ad", "message": "Remove unused imports", "committedDate": "2020-05-17T10:37:41Z", "type": "commit"}, {"oid": "73c1f91c03cb4cf11ea50ec1f3629a0689ef5131", "url": "https://github.com/wso2/carbon-apimgt/commit/73c1f91c03cb4cf11ea50ec1f3629a0689ef5131", "message": "Refine imports", "committedDate": "2020-05-17T10:39:17Z", "type": "commit"}, {"oid": "7a160b3a81eab5c23c8384ff4e6b320c91c58be2", "url": "https://github.com/wso2/carbon-apimgt/commit/7a160b3a81eab5c23c8384ff4e6b320c91c58be2", "message": "remove nested file searching", "committedDate": "2020-05-24T05:59:25Z", "type": "commit"}, {"oid": "473ad7eae45b815473df06eaa24b6000121c8857", "url": "https://github.com/wso2/carbon-apimgt/commit/473ad7eae45b815473df06eaa24b6000121c8857", "message": "Merge remote-tracking branch 'upstream/master' into remoteRef", "committedDate": "2020-05-24T06:05:40Z", "type": "commit"}, {"oid": "aae78f41ddbaeb34046aabe5e439420303267331", "url": "https://github.com/wso2/carbon-apimgt/commit/aae78f41ddbaeb34046aabe5e439420303267331", "message": "resolve merge conflicts", "committedDate": "2020-05-24T06:17:40Z", "type": "commit"}]}