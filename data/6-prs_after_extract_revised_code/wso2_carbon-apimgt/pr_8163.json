{"pr_number": 8163, "pr_title": "Fix the issue in generating swagger when WSDL has inline nested complex types definitions ", "pr_createdAt": "2020-02-09T15:37:06Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8163", "timeline": [{"oid": "c3d24d878130e7f453e981d3d3e2790c535c1554", "url": "https://github.com/wso2/carbon-apimgt/commit/c3d24d878130e7f453e981d3d3e2790c535c1554", "message": "Add support to nested inline complex types in SOAP to REST", "committedDate": "2020-02-09T15:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg3MTA5Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8163#discussion_r376871096", "bodyText": "Please check whether the length is exceeded?", "author": "ruks", "createdAt": "2020-02-10T05:12:00Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java", "diffHunk": "@@ -386,11 +388,55 @@ private void addModelDefinition(Node current, ModelImpl model, String type, bool\n                             //do nothing\n                         } else if (model.getProperties().containsKey(element)) {\n                             parentProp = model.getProperties().get(element);\n-                            if (SOAPToRESTConstants.RESTRICTION_ATTR.equals(type) && pos == elements.length - 1) {\n-                                model.getProperties().remove(element);\n-                                parentProp = createPropertyFromNode(current, true);\n-                                parentProp.setName(element);\n-                                model.addProperty(element, parentProp);\n+                            if (pos == elements.length - 1) {\n+                                if (SOAPToRESTConstants.RESTRICTION_ATTR.equals(type)) {\n+                                    model.getProperties().remove(element);\n+                                    parentProp = createPropertyFromNode(current, true);\n+                                    parentProp.setName(element);\n+                                    model.addProperty(element, parentProp);\n+                                } else {\n+                                    if (isChildNode(current, prevNode)) {\n+                                        int index = Arrays.asList(elements).indexOf(element);\n+                                        Property parentProperty = null;\n+                                        String parentName = \"\";\n+                                        for (int i = 1; i < index; i++) {\n+                                            parentProperty = model.getProperties().get(elements[index - i]);\n+                                            if (parentProperty != null) {\n+                                                model.getProperties().remove(element);\n+                                                parentName = elements[index - i];\n+                                                break;\n+                                            }\n+                                        }\n+                                        if (parentProperty instanceof ArrayProperty) {\n+                                            if (((ArrayProperty) parentProperty).getItems() != null) {\n+                                                if (parentName.equals(((ArrayProperty) parentProperty).getItems()\n+                                                        .getName())) {\n+                                                    Property objectProperty = new ObjectProperty();\n+                                                    Map propertiesMap = new HashMap();\n+                                                    propertiesMap.put(element, createPropertyFromNode(current, true));\n+                                                    ((ObjectProperty) objectProperty).setProperties(propertiesMap);\n+                                                    ((ArrayProperty) parentProperty).setItems(objectProperty);\n+                                                    parentProp = parentProperty;\n+                                                }\n+                                            } else {\n+                                                ((ArrayProperty) parentProperty)\n+                                                        .setItems(createPropertyFromNode(current, true));\n+                                            }\n+                                        } else if (parentProperty instanceof ObjectProperty) {\n+                                            if (((ObjectProperty) parentProperty).getProperties() != null) {\n+                                                if ((((ObjectProperty) parentProperty).getProperties()).get(parentName) != null) {", "originalCommit": "c3d24d878130e7f453e981d3d3e2790c535c1554", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NzI5Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8163#discussion_r376887293", "bodyText": "Fixed", "author": "vithu30", "createdAt": "2020-02-10T06:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg3MTA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ab3147c0f92d833c28e013a808c9b4c5a811f6df", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\nindex 1f92438d6e8..ae3b8573b82 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\n\n@@ -424,7 +424,8 @@ public class WSDL11SOAPOperationExtractor extends WSDL11ProcessorImpl {\n                                             }\n                                         } else if (parentProperty instanceof ObjectProperty) {\n                                             if (((ObjectProperty) parentProperty).getProperties() != null) {\n-                                                if ((((ObjectProperty) parentProperty).getProperties()).get(parentName) != null) {\n+                                                if ((((ObjectProperty) parentProperty).getProperties())\n+                                                        .get(parentName) != null) {\n                                                     Property objectProperty = new ObjectProperty();\n                                                     Map propertiesMap = new HashMap();\n                                                     propertiesMap.put(element, createPropertyFromNode(current, true));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg3MTQzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8163#discussion_r376871435", "bodyText": "can we just return true? If it is true, no need to loop remaining objects right?", "author": "ruks", "createdAt": "2020-02-10T05:14:13Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java", "diffHunk": "@@ -448,6 +522,21 @@ private void addModelDefinition(Node current, ModelImpl model, String type, bool\n         }\n     }\n \n+    private boolean isChildNode(Node current, Node prevNode) {\n+        boolean isChild = false;\n+        if (prevNode.hasChildNodes()) {\n+            NodeList childNodes = prevNode.getChildNodes();\n+            for (int i = 0; i < childNodes.getLength(); i++) {\n+                if (childNodes.item(i).getAttributes() != null && current.getAttributes()\n+                        .getNamedItem(SOAPToRESTConstants.NAME_ATTRIBUTE).getNodeValue().equals(childNodes.item(i)\n+                                .getAttributes().getNamedItem(SOAPToRESTConstants.NAME_ATTRIBUTE).getNodeValue())) {\n+                    isChild = true;", "originalCommit": "c3d24d878130e7f453e981d3d3e2790c535c1554", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NzM0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8163#discussion_r376887343", "bodyText": "Yes..Fixed.", "author": "vithu30", "createdAt": "2020-02-10T06:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg3MTQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab3147c0f92d833c28e013a808c9b4c5a811f6df", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\nindex 1f92438d6e8..ae3b8573b82 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/wsdl/WSDL11SOAPOperationExtractor.java\n\n@@ -523,18 +524,17 @@ public class WSDL11SOAPOperationExtractor extends WSDL11ProcessorImpl {\n     }\n \n     private boolean isChildNode(Node current, Node prevNode) {\n-        boolean isChild = false;\n         if (prevNode.hasChildNodes()) {\n             NodeList childNodes = prevNode.getChildNodes();\n             for (int i = 0; i < childNodes.getLength(); i++) {\n                 if (childNodes.item(i).getAttributes() != null && current.getAttributes()\n                         .getNamedItem(SOAPToRESTConstants.NAME_ATTRIBUTE).getNodeValue().equals(childNodes.item(i)\n                                 .getAttributes().getNamedItem(SOAPToRESTConstants.NAME_ATTRIBUTE).getNodeValue())) {\n-                    isChild = true;\n+                    return true;\n                 }\n             }\n         }\n-        return isChild;\n+        return false;\n     }\n \n     private String getXPath(Node node) {\n"}}, {"oid": "ab3147c0f92d833c28e013a808c9b4c5a811f6df", "url": "https://github.com/wso2/carbon-apimgt/commit/ab3147c0f92d833c28e013a808c9b4c5a811f6df", "message": "Resolve review comments", "committedDate": "2020-02-10T06:37:39Z", "type": "commit"}]}