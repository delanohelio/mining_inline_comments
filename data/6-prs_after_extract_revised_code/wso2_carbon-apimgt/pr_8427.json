{"pr_number": 8427, "pr_title": "Add IP and Referer restriction support to API Key authentication", "pr_createdAt": "2020-04-23T16:15:02Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8427", "timeline": [{"oid": "c6ac720f4df9c4a18e24c04bd9f29d6aedfeb436", "url": "https://github.com/wso2/carbon-apimgt/commit/c6ac720f4df9c4a18e24c04bd9f29d6aedfeb436", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T08:37:30Z", "type": "forcePushed"}, {"oid": "0283780be9a95596ec65e1d9cb7897191a892f9c", "url": "https://github.com/wso2/carbon-apimgt/commit/0283780be9a95596ec65e1d9cb7897191a892f9c", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T10:29:55Z", "type": "forcePushed"}, {"oid": "328ed034198222236f80c6f9617f27e01732e438", "url": "https://github.com/wso2/carbon-apimgt/commit/328ed034198222236f80c6f9617f27e01732e438", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T10:54:18Z", "type": "forcePushed"}, {"oid": "6438c95762ce3ba01720c9e750779635bbe13fb2", "url": "https://github.com/wso2/carbon-apimgt/commit/6438c95762ce3ba01720c9e750779635bbe13fb2", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T11:50:13Z", "type": "forcePushed"}, {"oid": "470a16b449baa928b3635fdaef6fbfb970408050", "url": "https://github.com/wso2/carbon-apimgt/commit/470a16b449baa928b3635fdaef6fbfb970408050", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T12:21:54Z", "type": "forcePushed"}, {"oid": "680565ddc3d9653584a94bd170f390ef1882606d", "url": "https://github.com/wso2/carbon-apimgt/commit/680565ddc3d9653584a94bd170f390ef1882606d", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-24T12:28:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415070515", "bodyText": "null check claim not available at none state", "author": "tharindu1st", "createdAt": "2020-04-25T14:10:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);", "originalCommit": "680565ddc3d9653584a94bd170f390ef1882606d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4MTI1OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415081258", "bodyText": "null can be type cast to String and it still will be null. So, do we need to check for null here?", "author": "ChamodDamitha", "createdAt": "2020-04-25T15:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI1Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088252", "bodyText": "fixed", "author": "ChamodDamitha", "createdAt": "2020-04-25T15:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1d60cfb9868265f5cafdfdc3a78e3f1986953ad", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\nindex 5716d7e3154..475ab86176b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\n\n@@ -371,7 +371,7 @@ public class ApiKeyAuthenticator implements Authenticator {\n             // Validate client IP against permitted IPs\n             String clientIP = GatewayUtils.getIp(axis2MessageContext);\n \n-            if (StringUtils.isNotEmpty(clientIP) && StringUtils.isNotEmpty(permittedIPList)) {\n+            if (StringUtils.isNotEmpty(clientIP)) {\n                 for (String restrictedIP : permittedIPList.split(\",\")) {\n                     if (APIUtil.isIpInNetwork(clientIP, restrictedIP)) {\n                         // Client IP is allowed\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDY4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415070689", "bodyText": "!= null and not empty", "author": "tharindu1st", "createdAt": "2020-04-25T14:11:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,71 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {", "originalCommit": "680565ddc3d9653584a94bd170f390ef1882606d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3OTg0Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415079847", "bodyText": "StringUtils.isNotEmpty() method already checks for null. So, why do we need to check again?", "author": "ChamodDamitha", "createdAt": "2020-04-25T15:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e1d60cfb9868265f5cafdfdc3a78e3f1986953ad", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\nindex 5716d7e3154..475ab86176b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java\n\n@@ -371,7 +371,7 @@ public class ApiKeyAuthenticator implements Authenticator {\n             // Validate client IP against permitted IPs\n             String clientIP = GatewayUtils.getIp(axis2MessageContext);\n \n-            if (StringUtils.isNotEmpty(clientIP) && StringUtils.isNotEmpty(permittedIPList)) {\n+            if (StringUtils.isNotEmpty(clientIP)) {\n                 for (String restrictedIP : permittedIPList.split(\",\")) {\n                     if (APIUtil.isIpInNetwork(clientIP, restrictedIP)) {\n                         // Client IP is allowed\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTI3MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415071271", "bodyText": "null check and string", "author": "tharindu1st", "createdAt": "2020-04-25T14:14:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java", "diffHunk": "@@ -339,7 +339,17 @@ public Response applicationsApplicationIdApiKeysKeyTypeGeneratePost(\n                     } else {\n                         validityPeriod = -1;\n                     }\n-                    String apiKey = apiConsumer.generateApiKey(application, userName, (long) validityPeriod);\n+\n+                    String restrictedIP = null;\n+                    String restrictedReferer = null;\n+\n+                    if (body.getAdditionalProperties() != null) {\n+                        Map additionalProperties = (HashMap) body.getAdditionalProperties();\n+                        restrictedIP = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP);", "originalCommit": "680565ddc3d9653584a94bd170f390ef1882606d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI1OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088258", "bodyText": "fixed", "author": "ChamodDamitha", "createdAt": "2020-04-25T15:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed1f682eaa62fc48637ef1fbaf1d8bb17b8fd6d2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java\nindex b2595358bd5..65c9bff3ce3 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java\n\n@@ -345,8 +345,12 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {\n \n                     if (body.getAdditionalProperties() != null) {\n                         Map additionalProperties = (HashMap) body.getAdditionalProperties();\n-                        restrictedIP = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP);\n-                        restrictedReferer = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_REFERER);\n+                        if (additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+                            restrictedIP = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+                        }\n+                        if (additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_REFERER) != null) {\n+                            restrictedReferer = (String) additionalProperties.get(APIConstants.JwtTokenConstants.PERMITTED_REFERER);\n+                        }\n                     }\n                     String apiKey = apiConsumer.generateApiKey(application, userName, (long) validityPeriod,\n                             restrictedIP, restrictedReferer);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTQxMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415071412", "bodyText": "null check and set", "author": "tharindu1st", "createdAt": "2020-04-25T14:15:44Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java", "diffHunk": "@@ -86,6 +86,9 @@ private static String buildBody(JwtTokenInfoDTO jwtTokenInfoDTO) {\n         jwtClaimsSetBuilder.claim(\"application\", jwtTokenInfoDTO.getApplication());\n         jwtClaimsSetBuilder.claim(\"keytype\", jwtTokenInfoDTO.getKeyType());\n \n+        jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_IP, jwtTokenInfoDTO.getPermittedIP());", "originalCommit": "680565ddc3d9653584a94bd170f390ef1882606d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA4ODI4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r415088280", "bodyText": "fixed", "author": "ChamodDamitha", "createdAt": "2020-04-25T15:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA3MTQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ed1f682eaa62fc48637ef1fbaf1d8bb17b8fd6d2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java\nindex b5d21cf5159..995ebbedd3b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/token/ApiKeyGenerator.java\n\n@@ -86,8 +86,12 @@ public class ApiKeyGenerator {\n         jwtClaimsSetBuilder.claim(\"application\", jwtTokenInfoDTO.getApplication());\n         jwtClaimsSetBuilder.claim(\"keytype\", jwtTokenInfoDTO.getKeyType());\n \n-        jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_IP, jwtTokenInfoDTO.getPermittedIP());\n-        jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_REFERER, jwtTokenInfoDTO.getPermittedReferer());\n+        if (jwtTokenInfoDTO.getPermittedIP() != null) {\n+            jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_IP, jwtTokenInfoDTO.getPermittedIP());\n+        }\n+        if (jwtTokenInfoDTO.getPermittedReferer() != null) {\n+            jwtClaimsSetBuilder.claim(APIConstants.JwtTokenConstants.PERMITTED_REFERER, jwtTokenInfoDTO.getPermittedReferer());\n+        }\n \n         return jwtClaimsSetBuilder.build().toJSONObject().toJSONString();\n     }\n"}}, {"oid": "e1d60cfb9868265f5cafdfdc3a78e3f1986953ad", "url": "https://github.com/wso2/carbon-apimgt/commit/e1d60cfb9868265f5cafdfdc3a78e3f1986953ad", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-25T15:17:06Z", "type": "forcePushed"}, {"oid": "ed1f682eaa62fc48637ef1fbaf1d8bb17b8fd6d2", "url": "https://github.com/wso2/carbon-apimgt/commit/ed1f682eaa62fc48637ef1fbaf1d8bb17b8fd6d2", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-25T15:47:23Z", "type": "forcePushed"}, {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2", "url": "https://github.com/wso2/carbon-apimgt/commit/f5b72784f785c13e1703ec24914690da2e8badb2", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-26T18:36:33Z", "type": "commit"}, {"oid": "f5b72784f785c13e1703ec24914690da2e8badb2", "url": "https://github.com/wso2/carbon-apimgt/commit/f5b72784f785c13e1703ec24914690da2e8badb2", "message": "Add IP and Referer restriction support to API Key authentication", "committedDate": "2020-04-26T18:36:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODUxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r466128510", "bodyText": "Shall we remove this extra line?", "author": "Meruja", "createdAt": "2020-08-06T03:47:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+", "originalCommit": "f5b72784f785c13e1703ec24914690da2e8badb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0OTM1OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r478949359", "bodyText": "Fixed in #9250", "author": "ChamodDamitha", "createdAt": "2020-08-28T08:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODUxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODA2NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r466188064", "bodyText": "can't we move this to the previous line? does it exceed 120 line length?", "author": "ruwiniwj", "createdAt": "2020-08-06T07:03:15Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/apikey/ApiKeyAuthenticator.java", "diffHunk": "@@ -358,6 +361,78 @@ public AuthenticationResponse authenticate(MessageContext synCtx) {\n         }\n     }\n \n+    private void validateAPIKeyRestrictions(JWTClaimsSet payload, MessageContext synCtx) throws APISecurityException {\n+        org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx).\n+                getAxis2MessageContext();\n+\n+        String permittedIPList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP) != null) {\n+            permittedIPList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_IP);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedIPList)) {\n+            // Validate client IP against permitted IPs\n+            String clientIP = GatewayUtils.getIp(axis2MessageContext);\n+\n+            if (StringUtils.isNotEmpty(clientIP)) {\n+                for (String restrictedIP : permittedIPList.split(\",\")) {\n+                    if (APIUtil.isIpInNetwork(clientIP, restrictedIP.trim())) {\n+                        // Client IP is allowed\n+                        return;\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n+                    String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n+\n+                    if (StringUtils.isNotEmpty(clientIP)) {\n+                        log.debug(\"Invocations to API: \" + apiContext + \":\" + apiVersion +\n+                                \" is not permitted for client with IP: \" + clientIP);\n+                    }\n+                }\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_FORBIDDEN,\n+                        \"Access forbidden for the invocations\");\n+            }\n+\n+        }\n+\n+        String permittedRefererList = null;\n+        if (payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER) != null) {\n+            permittedRefererList = (String) payload.getClaim(APIConstants.JwtTokenConstants.PERMITTED_REFERER);\n+        }\n+\n+        if (StringUtils.isNotEmpty(permittedRefererList)) {\n+            // Validate http referer against the permitted referrers\n+            TreeMap<String, String> transportHeaderMap = (TreeMap<String, String>)\n+                    axis2MessageContext.getProperty\n+                            (org.apache.axis2.context.MessageContext.TRANSPORT_HEADERS);\n+            if (transportHeaderMap != null) {\n+                String referer = transportHeaderMap.get(\"Referer\");\n+                if (StringUtils.isNotEmpty(referer)) {\n+                    for (String restrictedReferer : permittedRefererList.split(\",\")) {\n+                        String restrictedRefererRegExp = restrictedReferer.trim()\n+                                .replace(\"*\", \"[^ ]*\");", "originalCommit": "f5b72784f785c13e1703ec24914690da2e8badb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0OTQ3Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8427#discussion_r478949472", "bodyText": "Fixed in #9250", "author": "ChamodDamitha", "createdAt": "2020-08-28T08:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4ODA2NA=="}], "type": "inlineReview", "revised_code": null}]}