{"pr_number": 9059, "pr_title": "Fix for https://github.com/wso2/product-apim-tooling/issues/418", "pr_createdAt": "2020-07-25T12:38:17Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9059", "timeline": [{"oid": "c32ceb3bb3784005d0e20d2fd7ffc5e36122d7ec", "url": "https://github.com/wso2/carbon-apimgt/commit/c32ceb3bb3784005d0e20d2fd7ffc5e36122d7ec", "message": "Provide support for application import with API product subscriptions", "committedDate": "2020-07-25T03:30:29Z", "type": "commit"}, {"oid": "b416ba16311b4c6a7d5f717b02de5693c32a48b9", "url": "https://github.com/wso2/carbon-apimgt/commit/b416ba16311b4c6a7d5f717b02de5693c32a48b9", "message": "Adding doc comments and formatting", "committedDate": "2020-07-25T08:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzMxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460407317", "bodyText": "I think we can remove the duplicated code segments from 145 to 163 and 165 to 186 as below. Just check and do the required changes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                //Check whether the object is an ApiProduct\n          \n          \n            \n                                if (isApiProduct(type)) {\n          \n          \n            \n                                    //Handle Api Product subscriptions\n          \n          \n            \n                                    APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n          \n          \n            \n                                    //tier of the imported subscription\n          \n          \n            \n                                    Tier tier = subscribedAPI.getTier();\n          \n          \n            \n                                    //checking whether the target tier is available\n          \n          \n            \n                                    if (isTierAvailableForProduct(tier, apiProduct) && apiProduct.getState() != null &&\n          \n          \n            \n                                            APIConstants.PUBLISHED.equals(apiProduct.getState())) {\n          \n          \n            \n                                        ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n          \n          \n            \n                                        apiTypeWrapper.setTier(tier.getName());\n          \n          \n            \n                                        // add subscription if update flag is not specified\n          \n          \n            \n                                        // it will throw an error if subscriber already exists\n          \n          \n            \n                                        if (update == null || !update) {\n          \n          \n            \n                                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n          \n          \n            \n                                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n          \n          \n            \n                                            // on update skip subscriptions that already exists\n          \n          \n            \n                                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n          \n          \n            \n                                                \" as one or more tiers may be unavailable or the API may not have been published \");\n          \n          \n            \n                                        skippedAPIList.add(subscribedAPI.getApiId());\n          \n          \n            \n                                ApiTypeWrapper apiTypeWrapper = null;\n          \n          \n            \n                                if (isApiProduct(type)) {\n          \n          \n            \n                                    APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n          \n          \n            \n                                    apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    API api = (API) apiSet.iterator().next();\n          \n          \n            \n                                    apiTypeWrapper = new ApiTypeWrapper(api);\n          \n          \n            \n                                }\n          \n          \n            \n                                //tier of the imported subscription\n          \n          \n            \n                                Tier tier = subscribedAPI.getTier();\n          \n          \n            \n                                //checking whether the target tier is available\n          \n          \n            \n                                if (isTierAvailable(tier, apiTypeWrapper) && apiTypeWrapper.getStatus() != null &&\n          \n          \n            \n                                        APIConstants.PUBLISHED.equals(apiTypeWrapper.getStatus())) {\n          \n          \n            \n                                        apiTypeWrapper.setTier(tier.getName());\n          \n          \n            \n                                        // add subscription if update flag is not specified\n          \n          \n            \n                                        // it will throw an error if subscriber already exists\n          \n          \n            \n                                        if (update == null || !update) {\n          \n          \n            \n                                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n          \n          \n            \n                                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n          \n          \n            \n                                            // on update skip subscriptions that already exists\n          \n          \n            \n                                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n          \n          \n            \n                                        }\n          \n          \n            \n                                } else {\n          \n          \n            \n                                        log.error(\"Failed to import Subscription as API/API Product \" + name + \"-\" + version +\n          \n          \n            \n                                        \" as one or more tiers may be unavailable or the API/API Product may not have been published \");\n          \n          \n            \n                                        skippedAPIList.add(subscribedAPI.getApiId());\n          \n          \n            \n                                }", "author": "wasuradananjith", "createdAt": "2020-07-25T13:55:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java", "diffHunk": "@@ -134,28 +134,56 @@ public boolean isOwnerAvailable(String userId) throws APIManagementException {\n                 matchedAPIs = apiConsumer.searchPaginatedAPIs(searchQuery.toString(), tenantDomain, 0,\n                         Integer.MAX_VALUE,\n                         false);\n-                Set<API> apiSet = (Set<API>) matchedAPIs.get(\"apis\");\n+                Set<Object> apiSet = (Set<Object>) matchedAPIs.get(\"apis\");\n                 if (apiSet != null && !apiSet.isEmpty()) {\n-                    API api = apiSet.iterator().next();\n-                    //tier of the imported subscription\n-                    Tier tier = subscribedAPI.getTier();\n-                    //checking whether the target tier is available\n-                    if (isTierAvailable(tier, api) && api.getStatus() != null &&\n-                            APIConstants.PUBLISHED.equals(api.getStatus())) {\n-                        ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(api);\n-                        apiTypeWrapper.setTier(tier.getName());\n-                        // add subscription if update flag is not specified\n-                        // it will throw an error if subscriber already exists\n-                        if (update == null || !update) {\n-                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                            // on update skip subscriptions that already exists\n-                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                    Object type = apiSet.iterator().next();\n+                    //Check whether the object is an ApiProduct\n+                    if (isApiProduct(type)) {\n+                        //Handle Api Product subscriptions\n+                        APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n+                        //tier of the imported subscription\n+                        Tier tier = subscribedAPI.getTier();\n+                        //checking whether the target tier is available\n+                        if (isTierAvailableForProduct(tier, apiProduct) && apiProduct.getState() != null &&\n+                                APIConstants.PUBLISHED.equals(apiProduct.getState())) {\n+                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n+                            apiTypeWrapper.setTier(tier.getName());\n+                            // add subscription if update flag is not specified\n+                            // it will throw an error if subscriber already exists\n+                            if (update == null || !update) {\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n+                                // on update skip subscriptions that already exists\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            }\n+                        } else {\n+                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n+                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n+                            skippedAPIList.add(subscribedAPI.getApiId());", "originalCommit": "b416ba16311b4c6a7d5f717b02de5693c32a48b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTAwNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460421006", "bodyText": "Fixed. Thanks for the input with ApiTypeWrapper.", "author": "Chamindu36", "createdAt": "2020-07-25T16:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "5dc9adee472b9d8583783358639137d2206b5b86", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\nindex 3bfde502c15..e99c80fd98b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n\n@@ -137,53 +137,33 @@ public class ApplicationImportExportManager {\n                 Set<Object> apiSet = (Set<Object>) matchedAPIs.get(\"apis\");\n                 if (apiSet != null && !apiSet.isEmpty()) {\n                     Object type = apiSet.iterator().next();\n-                    //Check whether the object is an ApiProduct\n+                    ApiTypeWrapper apiTypeWrapper = null;\n+                    //Check whether the object is ApiProduct\n                     if (isApiProduct(type)) {\n-                        //Handle Api Product subscriptions\n                         APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n-                        //tier of the imported subscription\n-                        Tier tier = subscribedAPI.getTier();\n-                        //checking whether the target tier is available\n-                        if (isTierAvailableForProduct(tier, apiProduct) && apiProduct.getState() != null &&\n-                                APIConstants.PUBLISHED.equals(apiProduct.getState())) {\n-                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n-                            apiTypeWrapper.setTier(tier.getName());\n-                            // add subscription if update flag is not specified\n-                            // it will throw an error if subscriber already exists\n-                            if (update == null || !update) {\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                                // on update skip subscriptions that already exists\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            }\n-                        } else {\n-                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n-                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n-                            skippedAPIList.add(subscribedAPI.getApiId());\n-                        }\n+                        apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n                     } else {\n-                        //Handle API subscriptions\n                         API api = (API) apiSet.iterator().next();\n-                        //tier of the imported subscription\n-                        Tier tier = subscribedAPI.getTier();\n-                        //checking whether the target tier is available\n-                        if (isTierAvailable(tier, api) && api.getStatus() != null &&\n-                                APIConstants.PUBLISHED.equals(api.getStatus())) {\n-                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(api);\n-                            apiTypeWrapper.setTier(tier.getName());\n-                            // add subscription if update flag is not specified\n-                            // it will throw an error if subscriber already exists\n-                            if (update == null || !update) {\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                                // on update skip subscriptions that already exists\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            }\n-                        } else {\n-                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n-                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n-                            skippedAPIList.add(subscribedAPI.getApiId());\n+                        apiTypeWrapper = new ApiTypeWrapper(api);\n+                    }\n+                    //tier of the imported subscription\n+                    Tier tier = subscribedAPI.getTier();\n+                    //checking whether the target tier is available\n+                    if (isTierAvailable(tier, apiTypeWrapper) && apiTypeWrapper.getStatus() != null &&\n+                            APIConstants.PUBLISHED.equals(apiTypeWrapper.getStatus())) {\n+                        apiTypeWrapper.setTier(tier.getName());\n+                        // add subscription if update flag is not specified\n+                        // it will throw an error if subscriber already exists\n+                        if (update == null || !update) {\n+                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n+                            // on update skip subscriptions that already exists\n+                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n                         }\n+                    } else {\n+                        log.error(\"Failed to import Subscription as API/API Product \" + name + \"-\" + version +\n+                                \" as one or more tiers may be unavailable or the API/API Product may not have been published \");\n+                        skippedAPIList.add(subscribedAPI.getApiId());\n                     }\n                 } else {\n                     log.error(\"Failed to import Subscription as API \" + name + \"-\" + version + \" is not available\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzQ0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460407440", "bodyText": "I think we can remove this whole else part.", "author": "wasuradananjith", "createdAt": "2020-07-25T13:56:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java", "diffHunk": "@@ -134,28 +134,56 @@ public boolean isOwnerAvailable(String userId) throws APIManagementException {\n                 matchedAPIs = apiConsumer.searchPaginatedAPIs(searchQuery.toString(), tenantDomain, 0,\n                         Integer.MAX_VALUE,\n                         false);\n-                Set<API> apiSet = (Set<API>) matchedAPIs.get(\"apis\");\n+                Set<Object> apiSet = (Set<Object>) matchedAPIs.get(\"apis\");\n                 if (apiSet != null && !apiSet.isEmpty()) {\n-                    API api = apiSet.iterator().next();\n-                    //tier of the imported subscription\n-                    Tier tier = subscribedAPI.getTier();\n-                    //checking whether the target tier is available\n-                    if (isTierAvailable(tier, api) && api.getStatus() != null &&\n-                            APIConstants.PUBLISHED.equals(api.getStatus())) {\n-                        ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(api);\n-                        apiTypeWrapper.setTier(tier.getName());\n-                        // add subscription if update flag is not specified\n-                        // it will throw an error if subscriber already exists\n-                        if (update == null || !update) {\n-                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                            // on update skip subscriptions that already exists\n-                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                    Object type = apiSet.iterator().next();\n+                    //Check whether the object is an ApiProduct\n+                    if (isApiProduct(type)) {\n+                        //Handle Api Product subscriptions\n+                        APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n+                        //tier of the imported subscription\n+                        Tier tier = subscribedAPI.getTier();\n+                        //checking whether the target tier is available\n+                        if (isTierAvailableForProduct(tier, apiProduct) && apiProduct.getState() != null &&\n+                                APIConstants.PUBLISHED.equals(apiProduct.getState())) {\n+                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n+                            apiTypeWrapper.setTier(tier.getName());\n+                            // add subscription if update flag is not specified\n+                            // it will throw an error if subscriber already exists\n+                            if (update == null || !update) {\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n+                                // on update skip subscriptions that already exists\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            }\n+                        } else {\n+                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n+                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n+                            skippedAPIList.add(subscribedAPI.getApiId());\n                         }\n                     } else {\n-                        log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n-                                \" as one or more tiers may be unavailable or the API may not have been published \");\n-                        skippedAPIList.add(subscribedAPI.getApiId());\n+                        //Handle API subscriptions\n+                        API api = (API) apiSet.iterator().next();\n+                        //tier of the imported subscription\n+                        Tier tier = subscribedAPI.getTier();\n+                        //checking whether the target tier is available\n+                        if (isTierAvailable(tier, api) && api.getStatus() != null &&\n+                                APIConstants.PUBLISHED.equals(api.getStatus())) {\n+                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(api);\n+                            apiTypeWrapper.setTier(tier.getName());\n+                            // add subscription if update flag is not specified\n+                            // it will throw an error if subscriber already exists\n+                            if (update == null || !update) {\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n+                                // on update skip subscriptions that already exists\n+                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                            }\n+                        } else {\n+                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n+                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n+                            skippedAPIList.add(subscribedAPI.getApiId());\n+                        }", "originalCommit": "b416ba16311b4c6a7d5f717b02de5693c32a48b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTAyNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460421024", "bodyText": "Fixed", "author": "Chamindu36", "createdAt": "2020-07-25T16:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "5dc9adee472b9d8583783358639137d2206b5b86", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\nindex 3bfde502c15..e99c80fd98b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n\n@@ -137,53 +137,33 @@ public class ApplicationImportExportManager {\n                 Set<Object> apiSet = (Set<Object>) matchedAPIs.get(\"apis\");\n                 if (apiSet != null && !apiSet.isEmpty()) {\n                     Object type = apiSet.iterator().next();\n-                    //Check whether the object is an ApiProduct\n+                    ApiTypeWrapper apiTypeWrapper = null;\n+                    //Check whether the object is ApiProduct\n                     if (isApiProduct(type)) {\n-                        //Handle Api Product subscriptions\n                         APIProduct apiProduct = (APIProduct) apiSet.iterator().next();\n-                        //tier of the imported subscription\n-                        Tier tier = subscribedAPI.getTier();\n-                        //checking whether the target tier is available\n-                        if (isTierAvailableForProduct(tier, apiProduct) && apiProduct.getState() != null &&\n-                                APIConstants.PUBLISHED.equals(apiProduct.getState())) {\n-                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n-                            apiTypeWrapper.setTier(tier.getName());\n-                            // add subscription if update flag is not specified\n-                            // it will throw an error if subscriber already exists\n-                            if (update == null || !update) {\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                                // on update skip subscriptions that already exists\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            }\n-                        } else {\n-                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n-                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n-                            skippedAPIList.add(subscribedAPI.getApiId());\n-                        }\n+                        apiTypeWrapper = new ApiTypeWrapper(apiProduct);\n                     } else {\n-                        //Handle API subscriptions\n                         API api = (API) apiSet.iterator().next();\n-                        //tier of the imported subscription\n-                        Tier tier = subscribedAPI.getTier();\n-                        //checking whether the target tier is available\n-                        if (isTierAvailable(tier, api) && api.getStatus() != null &&\n-                                APIConstants.PUBLISHED.equals(api.getStatus())) {\n-                            ApiTypeWrapper apiTypeWrapper = new ApiTypeWrapper(api);\n-                            apiTypeWrapper.setTier(tier.getName());\n-                            // add subscription if update flag is not specified\n-                            // it will throw an error if subscriber already exists\n-                            if (update == null || !update) {\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n-                                // on update skip subscriptions that already exists\n-                                apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n-                            }\n-                        } else {\n-                            log.error(\"Failed to import Subscription as API \" + name + \"-\" + version +\n-                                    \" as one or more tiers may be unavailable or the API may not have been published \");\n-                            skippedAPIList.add(subscribedAPI.getApiId());\n+                        apiTypeWrapper = new ApiTypeWrapper(api);\n+                    }\n+                    //tier of the imported subscription\n+                    Tier tier = subscribedAPI.getTier();\n+                    //checking whether the target tier is available\n+                    if (isTierAvailable(tier, apiTypeWrapper) && apiTypeWrapper.getStatus() != null &&\n+                            APIConstants.PUBLISHED.equals(apiTypeWrapper.getStatus())) {\n+                        apiTypeWrapper.setTier(tier.getName());\n+                        // add subscription if update flag is not specified\n+                        // it will throw an error if subscriber already exists\n+                        if (update == null || !update) {\n+                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n+                        } else if (!apiConsumer.isSubscribedToApp(subscribedAPI.getApiId(), userId, appId)) {\n+                            // on update skip subscriptions that already exists\n+                            apiConsumer.addSubscription(apiTypeWrapper, userId, appId);\n                         }\n+                    } else {\n+                        log.error(\"Failed to import Subscription as API/API Product \" + name + \"-\" + version +\n+                                \" as one or more tiers may be unavailable or the API/API Product may not have been published \");\n+                        skippedAPIList.add(subscribedAPI.getApiId());\n                     }\n                 } else {\n                     log.error(\"Failed to import Subscription as API \" + name + \"-\" + version + \" is not available\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzYyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460407623", "bodyText": "I think we don't need another function like this. We can modify the existing isTierAvailable function as below. Just check the feasibility whether we can do like this.\nprivate boolean isTierAvailable(Tier targetTier, ApiTypeWrapper apiTypeWrapper) {\n\tSet<Tier> availableTiers = null;\n\tif (!apiTypeWrapper.isAPIProduct()) {\n\t\tAPIIdentifier apiId = apiTypeWrapper.getApi().getId();\n\t\tavailableTiers = api.getAvailableTiers();\n\t} else {\n\t\tAPIProductIdentifier apiProductId = apiTypeWrapper.getApiProduct().getId();\n\t\tavailableTiers = apiProductId.getAvailableTiers();\n\t}\n        if (availableTiers.contains(targetTier)) {\n            return true;\n        } else {\n            log.error(\"Tier:\" + targetTier.getName() + \" is not available for API \" + apiId.getApiName() + \"-\" +\n                    apiId.getVersion());\n            return false;\n        }\n}", "author": "wasuradananjith", "createdAt": "2020-07-25T13:59:29Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java", "diffHunk": "@@ -188,6 +216,41 @@ private boolean isTierAvailable(Tier targetTier, API api) {\n         }\n     }\n \n+    /**\n+     * Check whether the object is a type of ApiProduct\n+     *\n+     * @param object        - {@link Object}\n+     * @return true, if the object is an ApiProduct, otherwise false\n+     */\n+    private boolean isApiProduct(Object object) {\n+        try {\n+            //Cast object to ApiProduct\n+            APIProduct apiProduct = (APIProduct) object;\n+            return (apiProduct != null) ? true : false;\n+        } catch (Exception e) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Check whether a target Tier is available to subscribe\n+     *\n+     * @param targetTier Target Tier\n+     * @param apiProduct - {@link APIProduct}\n+     * @return true, if the target tier is available\n+     */\n+    private boolean isTierAvailableForProduct(Tier targetTier, APIProduct apiProduct) {\n+        APIProductIdentifier apiProductId = apiProduct.getId();\n+        Set<Tier> availableTiers = apiProduct.getAvailableTiers();\n+        if (availableTiers.contains(targetTier)) {\n+            return true;\n+        } else {\n+            log.error(\"Tier:\" + targetTier.getName() + \" is not available for API Product \" + apiProductId.getName() + \"-\" +\n+                    apiProductId.getVersion());\n+            return false;\n+        }\n+    }\n+", "originalCommit": "b416ba16311b4c6a7d5f717b02de5693c32a48b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTA0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460421040", "bodyText": "Fixed", "author": "Chamindu36", "createdAt": "2020-07-25T16:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQwNzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "5dc9adee472b9d8583783358639137d2206b5b86", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\nindex 3bfde502c15..e99c80fd98b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n\n@@ -200,18 +180,31 @@ public class ApplicationImportExportManager {\n     /**\n      * Check whether a target Tier is available to subscribe\n      *\n-     * @param targetTier Target Tier\n-     * @param api        - {@link API}\n+     * @param targetTier     Target Tier\n+     * @param apiTypeWrapper - {@link ApiTypeWrapper}\n      * @return true, if the target tier is available\n      */\n-    private boolean isTierAvailable(Tier targetTier, API api) {\n-        APIIdentifier apiId = api.getId();\n-        Set<Tier> availableTiers = api.getAvailableTiers();\n+    private boolean isTierAvailable(Tier targetTier, ApiTypeWrapper apiTypeWrapper) {\n+        Set<Tier> availableTiers = null;\n+        API api = null;\n+        APIProduct apiProduct = null;\n+        if (!apiTypeWrapper.isAPIProduct()) {\n+            api = apiTypeWrapper.getApi();\n+            availableTiers = api.getAvailableTiers();\n+        } else {\n+            apiProduct = apiTypeWrapper.getApiProduct();\n+            availableTiers = apiProduct.getAvailableTiers();\n+        }\n         if (availableTiers.contains(targetTier)) {\n             return true;\n         } else {\n-            log.error(\"Tier:\" + targetTier.getName() + \" is not available for API \" + apiId.getApiName() + \"-\" +\n-                    apiId.getVersion());\n+            if (!apiTypeWrapper.isAPIProduct()) {\n+                log.error(\"Tier:\" + targetTier.getName() + \" is not available for API \" + api.getId().getApiName() + \"-\" +\n+                        api.getId().getVersion());\n+            } else {\n+                log.error(\"Tier:\" + targetTier.getName() + \" is not available for API Product \" + apiProduct.getId().getName() + \"-\" +\n+                        apiProduct.getId().getVersion());\n+            }\n             return false;\n         }\n     }\n"}}, {"oid": "5dc9adee472b9d8583783358639137d2206b5b86", "url": "https://github.com/wso2/carbon-apimgt/commit/5dc9adee472b9d8583783358639137d2206b5b86", "message": "Fixing reviews and adding suggestions", "committedDate": "2020-07-25T16:29:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMTU3MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460621570", "bodyText": "can't we use instanceOf?\nAlso, don't catch generic \"Exception\"s unless there is a really specific need.", "author": "malinthaprasan", "createdAt": "2020-07-27T02:56:54Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java", "diffHunk": "@@ -172,18 +180,47 @@ public boolean isOwnerAvailable(String userId) throws APIManagementException {\n     /**\n      * Check whether a target Tier is available to subscribe\n      *\n-     * @param targetTier Target Tier\n-     * @param api        - {@link API}\n+     * @param targetTier     Target Tier\n+     * @param apiTypeWrapper - {@link ApiTypeWrapper}\n      * @return true, if the target tier is available\n      */\n-    private boolean isTierAvailable(Tier targetTier, API api) {\n-        APIIdentifier apiId = api.getId();\n-        Set<Tier> availableTiers = api.getAvailableTiers();\n+    private boolean isTierAvailable(Tier targetTier, ApiTypeWrapper apiTypeWrapper) {\n+        Set<Tier> availableTiers = null;\n+        API api = null;\n+        APIProduct apiProduct = null;\n+        if (!apiTypeWrapper.isAPIProduct()) {\n+            api = apiTypeWrapper.getApi();\n+            availableTiers = api.getAvailableTiers();\n+        } else {\n+            apiProduct = apiTypeWrapper.getApiProduct();\n+            availableTiers = apiProduct.getAvailableTiers();\n+        }\n         if (availableTiers.contains(targetTier)) {\n             return true;\n         } else {\n-            log.error(\"Tier:\" + targetTier.getName() + \" is not available for API \" + apiId.getApiName() + \"-\" +\n-                    apiId.getVersion());\n+            if (!apiTypeWrapper.isAPIProduct()) {\n+                log.error(\"Tier:\" + targetTier.getName() + \" is not available for API \" + api.getId().getApiName() + \"-\" +\n+                        api.getId().getVersion());\n+            } else {\n+                log.error(\"Tier:\" + targetTier.getName() + \" is not available for API Product \" + apiProduct.getId().getName() + \"-\" +\n+                        apiProduct.getId().getVersion());\n+            }\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Check whether the object is a type of ApiProduct\n+     *\n+     * @param object        - {@link Object}\n+     * @return true, if the object is an ApiProduct, otherwise false\n+     */\n+    private boolean isApiProduct(Object object) {\n+        try {\n+            //Cast object to ApiProduct\n+            APIProduct apiProduct = (APIProduct) object;\n+            return (apiProduct != null) ? true : false;\n+        } catch (Exception e) {\n             return false;", "originalCommit": "5dc9adee472b9d8583783358639137d2206b5b86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY1MDM2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9059#discussion_r460650368", "bodyText": "Thanks for the input. Fixed the requested changed", "author": "Chamindu36", "createdAt": "2020-07-27T05:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYyMTU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "06a96a827b1ad7cb32f57fbbb5323ff8b6307884", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\nindex e99c80fd98b..a55d6ed9ea8 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/v1/utils/ApplicationImportExportManager.java\n\n@@ -216,13 +216,8 @@ public class ApplicationImportExportManager {\n      * @return true, if the object is an ApiProduct, otherwise false\n      */\n     private boolean isApiProduct(Object object) {\n-        try {\n-            //Cast object to ApiProduct\n-            APIProduct apiProduct = (APIProduct) object;\n-            return (apiProduct != null) ? true : false;\n-        } catch (Exception e) {\n-            return false;\n-        }\n+        //Check whether the object is an instance of ApiProduct\n+        return (object) instanceof APIProduct;\n     }\n \n     /**\n"}}, {"oid": "06a96a827b1ad7cb32f57fbbb5323ff8b6307884", "url": "https://github.com/wso2/carbon-apimgt/commit/06a96a827b1ad7cb32f57fbbb5323ff8b6307884", "message": "Changing isApiProduct Function", "committedDate": "2020-07-27T05:11:54Z", "type": "commit"}]}