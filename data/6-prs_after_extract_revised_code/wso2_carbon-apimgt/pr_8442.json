{"pr_number": 8442, "pr_title": "Added workflow Executors for Approval workflow executor", "pr_createdAt": "2020-04-29T09:10:38Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8442", "timeline": [{"oid": "7383af681b300dbeac1995dad3605f129979aa3e", "url": "https://github.com/wso2/carbon-apimgt/commit/7383af681b300dbeac1995dad3605f129979aa3e", "message": "Merge pull request #8148 from chamilaadhi/master-workflow\n\nMerge master to master-workflow branch", "committedDate": "2020-02-05T05:41:44Z", "type": "commit"}, {"oid": "1eb597113efdf58bea03635da816422782c93ab8", "url": "https://github.com/wso2/carbon-apimgt/commit/1eb597113efdf58bea03635da816422782c93ab8", "message": "Merge remote-tracking branch 'origin/master' into master-workflow", "committedDate": "2020-02-25T06:09:36Z", "type": "commit"}, {"oid": "8f6f87a82ac3ad2a69c7f0e47a0517d114355694", "url": "https://github.com/wso2/carbon-apimgt/commit/8f6f87a82ac3ad2a69c7f0e47a0517d114355694", "message": "Merge remote-tracking branch 'origin/master' into master-workflow", "committedDate": "2020-03-30T04:25:58Z", "type": "commit"}, {"oid": "63aac0ce60d89723bf51b15c7f9f35b420b3e7cc", "url": "https://github.com/wso2/carbon-apimgt/commit/63aac0ce60d89723bf51b15c7f9f35b420b3e7cc", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "committedDate": "2020-04-01T07:02:11Z", "type": "commit"}, {"oid": "e5f1ca8c0c731ff296553a3776fe7937da125395", "url": "https://github.com/wso2/carbon-apimgt/commit/e5f1ca8c0c731ff296553a3776fe7937da125395", "message": "Reformatted workflowExecutors for ApprovalWorkflowExecutor and two rest APIs", "committedDate": "2020-04-01T07:02:12Z", "type": "commit"}, {"oid": "8b030289aca2777f2d9be37fd3330df4e6ce1002", "url": "https://github.com/wso2/carbon-apimgt/commit/8b030289aca2777f2d9be37fd3330df4e6ce1002", "message": "Added database changes to the sql files", "committedDate": "2020-04-01T07:02:12Z", "type": "commit"}, {"oid": "31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "url": "https://github.com/wso2/carbon-apimgt/commit/31f6f67b8a13bf657c46f4e2f9730d7b472c9b72", "message": "Added workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "committedDate": "2020-04-01T07:28:36Z", "type": "commit"}, {"oid": "63814cb85271ac3852fd12470cc7a81669d844ca", "url": "https://github.com/wso2/carbon-apimgt/commit/63814cb85271ac3852fd12470cc7a81669d844ca", "message": "Changes in the workflow executors", "committedDate": "2020-04-01T07:28:37Z", "type": "commit"}, {"oid": "6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "url": "https://github.com/wso2/carbon-apimgt/commit/6bf3e5572d4f5d21b3b4f4cb596a1eeea3348002", "message": "Changes in add workflow entry ApiMgtDAO.java", "committedDate": "2020-04-03T05:48:18Z", "type": "commit"}, {"oid": "e00fe40f5ef809f1ac81dc7c22faacda062adfab", "url": "https://github.com/wso2/carbon-apimgt/commit/e00fe40f5ef809f1ac81dc7c22faacda062adfab", "message": "Reformatted the approval workflow executor and rest APIs", "committedDate": "2020-04-15T10:56:04Z", "type": "commit"}, {"oid": "68b7419e6cbaa0784e59e60fbdbe77dbb27eb484", "url": "https://github.com/wso2/carbon-apimgt/commit/68b7419e6cbaa0784e59e60fbdbe77dbb27eb484", "message": "Changed the licence header in Approval Workflow Executor tests", "committedDate": "2020-04-19T01:46:12Z", "type": "commit"}, {"oid": "3719d98f3d2faba218147e15535025aa6169e371", "url": "https://github.com/wso2/carbon-apimgt/commit/3719d98f3d2faba218147e15535025aa6169e371", "message": "Change the licence header of Workflow.java", "committedDate": "2020-04-19T02:28:36Z", "type": "commit"}, {"oid": "9b48a01776745e4804aee0554f67dde112e0ccdd", "url": "https://github.com/wso2/carbon-apimgt/commit/9b48a01776745e4804aee0554f67dde112e0ccdd", "message": "Reformtted the previous commits and removed unwanted files", "committedDate": "2020-04-24T09:47:33Z", "type": "commit"}, {"oid": "56d859aa06815de769c0130c450c2764150312fc", "url": "https://github.com/wso2/carbon-apimgt/commit/56d859aa06815de769c0130c450c2764150312fc", "message": "Changed the admin-api.yaml and beans.xml in org.wso2.carbon.apimgt.rest.api.admin", "committedDate": "2020-04-28T10:11:28Z", "type": "commit"}, {"oid": "8f4619855f84b58847bd9b1bae181401f0a81961", "url": "https://github.com/wso2/carbon-apimgt/commit/8f4619855f84b58847bd9b1bae181401f0a81961", "message": "Merge pull request #8293 from SahanHerath/master-workflow\n\nAdded workflowExecutors for ApprovalWorkflowExecutor and two rest APIs.", "committedDate": "2020-04-29T07:09:51Z", "type": "commit"}, {"oid": "a84db7f57f34a60ed66b6d59b075f42124e16256", "url": "https://github.com/wso2/carbon-apimgt/commit/a84db7f57f34a60ed66b6d59b075f42124e16256", "message": "Merge pull request #1 from SahanHerath/master-workflow\n\nMaster workflow merged with master", "committedDate": "2020-04-29T09:06:55Z", "type": "commit"}, {"oid": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "url": "https://github.com/wso2/carbon-apimgt/commit/e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "message": "Reformtted imports in ApiMgtDAO.java", "committedDate": "2020-04-29T09:38:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5Nzg5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418497890", "bodyText": "this method is not formatted.", "author": "chamilaadhi", "createdAt": "2020-05-01T10:50:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNjk4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419226987", "bodyText": "fixed in f5092a9", "author": "SahanHerath", "createdAt": "2020-05-04T06:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5Nzg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14670,6 +14622,7 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n      * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n      * @throws APIManagementException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODE2MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498161", "bodyText": "formatting issue. this would be fixed once you format the whole method", "author": "chamilaadhi", "createdAt": "2020-05-01T10:51:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14670,6 +14622,7 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n      * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n      * @throws APIManagementException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODMzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498335", "bodyText": "formatting issue. please format the whole method", "author": "chamilaadhi", "createdAt": "2020-05-01T10:52:11Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+            } else {", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNjg5Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419226896", "bodyText": "fixed in f5092a9", "author": "SahanHerath", "createdAt": "2020-05-04T06:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14670,6 +14622,7 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n      * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n      * @throws APIManagementException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODQyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498427", "bodyText": "format the whole method", "author": "chamilaadhi", "createdAt": "2020-05-01T10:52:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14650,4 +14667,243 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        }\n+        catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef)throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus =rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if(metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     * @param workflowType Type of the workflow pending request\n+     * @param status workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+\n+            if (workflowType != null){\n+                prepStmt.setString(1, workflowType);\n+                prepStmt.setString( 2, status);\n+                prepStmt.setString( 3, tenantDomain);\n+            } else {\n+                prepStmt.setString( 1, status);\n+                prepStmt.setString( 2, tenantDomain);\n+            }\n+            rs = prepStmt.executeQuery();\n+\n+            ArrayList<Workflow> workflowsList = new ArrayList<Workflow>();\n+            Workflow workflow;\n+            while (rs.next()) {\n+                workflow = new Workflow();\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+\n+                byte[] propertiesByte;\n+                if(propertiesBlob != null) {\n+                    propertiesByte = propertiesBlob.getBytes(1L, (int) propertiesBlob.length());\n+                    InputStream propertiesTargetStream = new ByteArrayInputStream(propertiesByte);\n+                    String properties = APIMgtDBUtil.getStringFromInputStream(propertiesTargetStream);\n+                    Gson propertiesGson = new Gson();\n+                    JSONObject propertiesJson = propertiesGson.fromJson(properties, JSONObject.class);\n+                    workflow.setProperties(propertiesJson);\n+                } else {\n+                    JSONObject propertiesJson = new JSONObject();\n+                    workflow.setProperties(propertiesJson);\n+                }\n+                workflowsList.add(workflow);\n+            }\n+            workflows = workflowsList.toArray(new Workflow[workflowsList.size()]);\n+        } catch (SQLException e) {\n+            handleException(\"Error when retrieve all the workflow details. \" , e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflows;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference for a particular tenant\n+     * @param externelWorkflowRef of pending workflow request\n+     * @param status workflow status of workflow pending process\n+     * @param tenantDomain tenant domain of user\n+     * @return workflow pending request\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReferenceID(String externelWorkflowRef, String status ,\n+                                                                      String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNAL_WORKFLOW_REFERENCE;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externelWorkflowRef);\n+            prepStmt.setString(2, status);\n+            prepStmt.setString(3, tenantDomain);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowDescription(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadataBlob = rs.getBlob(\"WF_METADATA\");\n+                Blob propertiesBlob = rs.getBlob(\"WF_PROPERTIES\");\n+\n+                byte[] metadataByte;\n+                if(metadataBlob != null) {\n+                    metadataByte = metadataBlob.getBytes(1L, (int) metadataBlob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14670,6 +14622,7 @@ public class ApiMgtDAO {\n \n     /**\n      * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n      * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n      * @throws APIManagementException\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODkxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498918", "bodyText": "why cast null to blob?", "author": "chamilaadhi", "createdAt": "2020-05-01T10:54:40Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setBlob(9, (Blob)null);\n+            }", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNzIwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419227209", "bodyText": "changed it to setNull (parameter index, value)", "author": "SahanHerath", "createdAt": "2020-05-04T06:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -5981,19 +5934,18 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata() != null) {\n+            if (workflow.getMetadata() != null) {\n                 byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n-                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte));\n             } else {\n-                prepStmt.setBlob(9, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n \n-            if(workflow.getProperties() != null) {\n+            if (workflow.getProperties() != null) {\n                 byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n             } else {\n-                //prepStmt.setNull(10, java.sql.Types.BLOB);\n-                prepStmt.setBlob(10, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n             prepStmt.execute();\n             connection.commit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5ODk2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418498968", "bodyText": "same here", "author": "chamilaadhi", "createdAt": "2020-05-01T10:54:51Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {\n+                byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+            } else {\n+                prepStmt.setBlob(9, (Blob)null);\n+            }\n \n+            if(workflow.getProperties() != null) {\n+                byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n+                prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n+            } else {\n+                //prepStmt.setNull(10, java.sql.Types.BLOB);\n+                prepStmt.setBlob(10, (Blob)null);", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -5981,19 +5934,18 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata() != null) {\n+            if (workflow.getMetadata() != null) {\n                 byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n-                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte));\n             } else {\n-                prepStmt.setBlob(9, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n \n-            if(workflow.getProperties() != null) {\n+            if (workflow.getProperties() != null) {\n                 byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n             } else {\n-                //prepStmt.setNull(10, java.sql.Types.BLOB);\n-                prepStmt.setBlob(10, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n             prepStmt.execute();\n             connection.commit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MTk4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418571984", "bodyText": "Please format all your code.", "author": "bhathiya", "createdAt": "2020-05-01T14:43:01Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -5977,10 +5981,23 @@ public void addWorkflowEntry(WorkflowDTO workflow) throws APIManagementException\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            prepStmt.execute();\n+            if(workflow.getMetadata() != null) {", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex e8efadba85f..3bebff444f2 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -5981,19 +5934,18 @@ public class ApiMgtDAO {\n             prepStmt.setString(7, workflow.getTenantDomain());\n             prepStmt.setString(8, workflow.getExternalWorkflowReference());\n \n-            if(workflow.getMetadata() != null) {\n+            if (workflow.getMetadata() != null) {\n                 byte[] metadataByte = workflow.getMetadata().toJSONString().getBytes(\"UTF-8\");\n-                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte) );\n+                prepStmt.setBlob(9, new ByteArrayInputStream(metadataByte));\n             } else {\n-                prepStmt.setBlob(9, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n \n-            if(workflow.getProperties() != null) {\n+            if (workflow.getProperties() != null) {\n                 byte[] propertiesByte = workflow.getProperties().toJSONString().getBytes(\"UTF-8\");\n                 prepStmt.setBlob(10, new ByteArrayInputStream(propertiesByte));\n             } else {\n-                //prepStmt.setNull(10, java.sql.Types.BLOB);\n-                prepStmt.setBlob(10, (Blob)null);\n+                prepStmt.setNull(10, java.sql.Types.BLOB);\n             }\n             prepStmt.execute();\n             connection.commit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MjQ4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418572481", "bodyText": "removed unwanted code", "author": "bhathiya", "createdAt": "2020-05-01T14:44:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.APIIdentifier;\n+import org.wso2.carbon.apimgt.api.model.Workflow;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.apimgt.impl.utils.APIUtil;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.governance.api.generic.dataobjects.GenericArtifact;\n+import org.wso2.carbon.registry.core.Registry;\n+import org.wso2.carbon.registry.core.exceptions.RegistryException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+/**\n+ * Approval workflow for API state change.\n+ *\n+ */\n+public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(APIStateChangeWSWorkflowExecutor.class);\n+    private String stateList;\n+\n+    public String getStateList() {\n+        return stateList;\n+    }\n+\n+    public void setStateList(String stateList) {\n+        this.stateList = stateList;\n+    }\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_API_STATE;\n+    }\n+\n+    @Override\n+    public List<WorkflowDTO> getWorkflowDetails(String workflowStatus) throws WorkflowException {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Execute the API state change workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing API State change Workflow.\");\n+        }\n+        if (stateList != null) {\n+            Map<String, List<String>> stateActionMap = getSelectedStatesToApprove();\n+            APIStateWorkflowDTO apiStateWorkFlowDTO = (APIStateWorkflowDTO) workflowDTO;\n+\n+            if (stateActionMap.containsKey(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    && stateActionMap.get(apiStateWorkFlowDTO.getApiCurrentState().toUpperCase())\n+                    .contains(apiStateWorkFlowDTO.getApiLCAction())) {\n+\n+                String callBackURL = apiStateWorkFlowDTO.getCallbackUrl();\n+                String message = \"Approval request for API state change action '\" + apiStateWorkFlowDTO.getApiLCAction()\n+                        + \"' from '\" + apiStateWorkFlowDTO.getApiCurrentState() + \"' state for the API '\"\n+                        + apiStateWorkFlowDTO.getApiName() + \" : \" + apiStateWorkFlowDTO.getApiVersion() + \"' by \"\n+                        + apiStateWorkFlowDTO.getApiProvider() + \"\";\n+                apiStateWorkFlowDTO.setWorkflowDescription(message);\n+                apiStateWorkFlowDTO.setMetadata(\"CurrentState\", apiStateWorkFlowDTO.getApiCurrentState());\n+                apiStateWorkFlowDTO.setMetadata(\"Action\", apiStateWorkFlowDTO.getApiLCAction());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiName\", apiStateWorkFlowDTO.getApiName());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiVersion\", apiStateWorkFlowDTO.getApiVersion());\n+                apiStateWorkFlowDTO.setMetadata(\"ApiProvider\", apiStateWorkFlowDTO.getApiProvider());\n+                apiStateWorkFlowDTO.setMetadata(\"Invoker\", apiStateWorkFlowDTO.getInvoker());\n+                apiStateWorkFlowDTO.setMetadata(\"TenantId\", String.valueOf(apiStateWorkFlowDTO.getTenantId()));\n+                super.execute(workflowDTO);\n+            } else {\n+                // For any other states, act as simple workflow executor.\n+                workflowDTO.setStatus(WorkflowStatus.APPROVED);\n+                // calling super.complete() instead of complete() to act as the simpleworkflow executor\n+                super.complete(workflowDTO);\n+            }\n+        } else {\n+            String msg = \"State change list is not provided. Please check <stateList> element in workflow-extensions.xml\";\n+            log.error(msg);\n+            throw new WorkflowException(msg);\n+        }\n+        return new GeneralWorkflowResponse();\n+    }\n+\n+    /**\n+     * Complete the API state change workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse complete(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Completing API State change Workflow..\");\n+        }\n+        workflowDTO.setUpdatedTime(System.currentTimeMillis());\n+        super.complete(workflowDTO);\n+        String externalWorkflowRef = workflowDTO.getExternalWorkflowReference();\n+        try {\n+            ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n+            Workflow workflow = apiMgtDAO.getworkflowReferenceByExternalWorkflowReference(externalWorkflowRef);\n+            String apiName = workflow.getMetadata(\"ApiName\");\n+            String action = workflow.getMetadata(\"Action\");\n+            String providerName = workflow.getMetadata(\"ApiProvider\");\n+            String version = workflow.getMetadata(\"ApiVersion\");\n+            String invoker = workflow.getMetadata(\"Invoker\");\n+            String currentStatus = workflow.getMetadata(\"CurrentState\");\n+            int tenantId = workflowDTO.getTenantId();\n+            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\nindex 1f581dbc8b4..3f55157b650 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/APIStateChangeApprovalWorkflowExecutor.java\n\n@@ -135,7 +135,6 @@ public class APIStateChangeApprovalWorkflowExecutor extends WorkflowExecutor {\n             String invoker = workflow.getMetadata(\"Invoker\");\n             String currentStatus = workflow.getMetadata(\"CurrentState\");\n             int tenantId = workflowDTO.getTenantId();\n-            //ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();\n             try {\n                 //tenant flow is already started from the rest api service impl. no need to start from here\n                 PrivilegedCarbonContext.getThreadLocalCarbonContext().setUsername(invoker);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3Mjk4NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r418572985", "bodyText": "remove unused variables.", "author": "bhathiya", "createdAt": "2020-05-01T14:45:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+import java.util.List;\n+\n+/**\n+ * Approval workflow for Application Creation.\n+ *\n+ */\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    /**\n+     * Execute the Application Creation workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String callBackURL = appWorkFlowDTO.getCallbackUrl();", "originalCommit": "e39d9dd0e08d1e2758d83712db0496ca4b2312d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 8b7487218af..b7a73cdd52b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n\n@@ -53,7 +53,6 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n         }\n         ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n         Application application = appWorkFlowDTO.getApplication();\n-        String callBackURL = appWorkFlowDTO.getCallbackUrl();\n         String message = \"Approve application [\" + application.getName() + \"] creation request from application creator -\"\n                 + appWorkFlowDTO.getUserName() + \" with throttling tier - \" + application.getTier();\n         workflowDTO.setWorkflowDescription(message);\n"}}, {"oid": "f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "url": "https://github.com/wso2/carbon-apimgt/commit/f5092a934f4185d5efdcd67f1d1fcd92d3cc469e", "message": "Reformtted the ApimgtDAO.java and removed unwanted lines", "committedDate": "2020-05-04T05:35:33Z", "type": "commit"}, {"oid": "8c8ee7e7dbcc0b398be64b519c170a4db969928a", "url": "https://github.com/wso2/carbon-apimgt/commit/8c8ee7e7dbcc0b398be64b519c170a4db969928a", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-05-04T05:48:11Z", "type": "commit"}, {"oid": "11f4fdac31bd45517ad16358bd9c42cd994ad95b", "url": "https://github.com/wso2/carbon-apimgt/commit/11f4fdac31bd45517ad16358bd9c42cd994ad95b", "message": "Merge pull request #2 from SahanHerath/master-workflow\n\nReformtted the ApimgtDAO.java and removed unwanted lines", "committedDate": "2020-05-04T05:57:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1MzY1OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419253658", "bodyText": "Use \"try with resources\" whenever possible. We can do the same functionality with less amount of code.", "author": "malinthaprasan", "createdAt": "2020-05-04T07:28:10Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14723,4 +14739,246 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }", "originalCommit": "11f4fdac31bd45517ad16358bd9c42cd994ad95b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a1001b2e734b2b39fc5e80c29ce693a0b71289", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex 6583e3bf7bf..aac77b54a00 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14747,20 +14628,22 @@ public class ApiMgtDAO {\n      * @throws APIManagementException\n      */\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n-        Connection connection = null;\n-        PreparedStatement prepStmt = null;\n+\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n-        try {\n-            connection = APIMgtDBUtil.getConnection();\n-            connection.setAutoCommit(false);\n-            prepStmt = connection.prepareStatement(query);\n-            prepStmt.setString(1, workflowExtRef);\n-            prepStmt.executeUpdate();\n-            connection.commit();\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement prepStmt = connection.prepareStatement(query)) {\n+            try {\n+                connection.setAutoCommit(false);\n+                prepStmt.setString(1, workflowExtRef);\n+                prepStmt.executeUpdate();\n+                connection.commit();\n+            } catch (SQLException e) {\n+                handleException(\"Failed to delete the workflow request. \", e);\n+            } finally {\n+                APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+            }\n         } catch (SQLException e) {\n             handleException(\"Failed to delete the workflow request. \", e);\n-        } finally {\n-            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3MjQ1MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r419372451", "bodyText": "It's good to use try with resources", "author": "malinthaprasan", "createdAt": "2020-05-04T11:34:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14723,4 +14739,246 @@ public String getUserID(String userName) throws APIManagementException {\n         }\n         return list;\n     }\n+\n+    /**\n+     * Remove the Pending workflow Requests using ExternalWorkflowReference\n+     *\n+     * @param workflowExtRef External Workflow Reference of Workflow Pending Request\n+     * @throws APIManagementException\n+     */\n+    public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            connection.setAutoCommit(false);\n+            prepStmt = connection.prepareStatement(query);\n+            prepStmt.setString(1, workflowExtRef);\n+            prepStmt.executeUpdate();\n+            connection.commit();\n+        } catch (SQLException e) {\n+            handleException(\"Failed to delete the workflow request. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+        }\n+    }\n+\n+    /**\n+     * Get the Pending workflow Request using ExternalWorkflowReference\n+     *\n+     * @param externalWorkflowRef\n+     * @return workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow getworkflowReferenceByExternalWorkflowReference(String externalWorkflowRef) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow workflow = new Workflow();\n+        String sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_EXTERNALWORKFLOWREF;\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);\n+            prepStmt.setString(1, externalWorkflowRef);\n+            rs = prepStmt.executeQuery();\n+\n+            while (rs.next()) {\n+                workflow.setWorkflowId(rs.getInt(\"WF_ID\"));\n+                workflow.setWorkflowReference(rs.getString(\"WF_REFERENCE\"));\n+                workflow.setWorkflowType(rs.getString(\"WF_TYPE\"));\n+                String workflowstatus = rs.getString(\"WF_STATUS\");\n+                workflow.setStatus(org.wso2.carbon.apimgt.api.WorkflowStatus.valueOf(workflowstatus));\n+                workflow.setCreatedTime(rs.getTimestamp(\"WF_CREATED_TIME\").toString());\n+                workflow.setUpdatedTime(rs.getTimestamp(\"WF_UPDATED_TIME\").toString());\n+                workflow.setWorkflowStatusDesc(rs.getString(\"WF_STATUS_DESC\"));\n+                workflow.setTenantId(rs.getInt(\"TENANT_ID\"));\n+                workflow.setTenantDomain(rs.getString(\"TENANT_DOMAIN\"));\n+                workflow.setExternalWorkflowReference(rs.getString(\"WF_EXTERNAL_REFERENCE\"));\n+                Blob metadatablob = rs.getBlob(\"WF_METADATA\");\n+\n+                byte[] metadataByte;\n+                if (metadatablob != null) {\n+                    metadataByte = metadatablob.getBytes(1L, (int) metadatablob.length());\n+                    InputStream targetStream = new ByteArrayInputStream(metadataByte);\n+                    String metadata = APIMgtDBUtil.getStringFromInputStream(targetStream);\n+                    Gson metadataGson = new Gson();\n+                    JSONObject metadataJson = metadataGson.fromJson(metadata, JSONObject.class);\n+                    workflow.setMetadata(metadataJson);\n+                } else {\n+                    JSONObject metadataJson = new JSONObject();\n+                    workflow.setMetadata(metadataJson);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            handleException(\"Error when retriving the workflow details. \", e);\n+        } finally {\n+            APIMgtDBUtil.closeAllConnections(prepStmt, connection, rs);\n+        }\n+        return workflow;\n+    }\n+\n+    /**\n+     * Get the Pending workflow Requests using WorkflowType for a particular tenant\n+     *\n+     * @param workflowType Type of the workflow pending request\n+     * @param status       workflow status of workflow pending request\n+     * @param tenantDomain tenantDomain of the user\n+     * @return List of workflow pending request\n+     * @throws APIManagementException\n+     */\n+    public Workflow[] getworkflows(String workflowType, String status, String tenantDomain) throws APIManagementException {\n+\n+        Connection connection = null;\n+        PreparedStatement prepStmt = null;\n+        ResultSet rs = null;\n+        Workflow[] workflows = null;\n+        String sqlQuery;\n+        if (workflowType != null) {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS_BY_WORKFLOW_TYPE;\n+        } else {\n+            sqlQuery = SQLConstants.GET_ALL_WORKFLOW_DETAILS;\n+        }\n+        try {\n+            connection = APIMgtDBUtil.getConnection();\n+            prepStmt = connection.prepareStatement(sqlQuery);", "originalCommit": "11f4fdac31bd45517ad16358bd9c42cd994ad95b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a1001b2e734b2b39fc5e80c29ce693a0b71289", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex 6583e3bf7bf..aac77b54a00 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14747,20 +14628,22 @@ public class ApiMgtDAO {\n      * @throws APIManagementException\n      */\n     public void deleteWorkflowRequest(String workflowExtRef) throws APIManagementException {\n-        Connection connection = null;\n-        PreparedStatement prepStmt = null;\n+\n         String query = SQLConstants.DELETE_WORKFLOW_REQUEST_SQL;\n-        try {\n-            connection = APIMgtDBUtil.getConnection();\n-            connection.setAutoCommit(false);\n-            prepStmt = connection.prepareStatement(query);\n-            prepStmt.setString(1, workflowExtRef);\n-            prepStmt.executeUpdate();\n-            connection.commit();\n+        try (Connection connection = APIMgtDBUtil.getConnection();\n+             PreparedStatement prepStmt = connection.prepareStatement(query)) {\n+            try {\n+                connection.setAutoCommit(false);\n+                prepStmt.setString(1, workflowExtRef);\n+                prepStmt.executeUpdate();\n+                connection.commit();\n+            } catch (SQLException e) {\n+                handleException(\"Failed to delete the workflow request. \", e);\n+            } finally {\n+                APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n+            }\n         } catch (SQLException e) {\n             handleException(\"Failed to delete the workflow request. \", e);\n-        } finally {\n-            APIMgtDBUtil.closeAllConnections(prepStmt, connection, null);\n         }\n     }\n \n"}}, {"oid": "f1a1001b2e734b2b39fc5e80c29ce693a0b71289", "url": "https://github.com/wso2/carbon-apimgt/commit/f1a1001b2e734b2b39fc5e80c29ce693a0b71289", "message": "changed for try with resources", "committedDate": "2020-05-05T12:04:15Z", "type": "commit"}, {"oid": "9009ab098fd0d879226113ff503a8e2405714c71", "url": "https://github.com/wso2/carbon-apimgt/commit/9009ab098fd0d879226113ff503a8e2405714c71", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt\n\n\u0001 Conflicts:\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "committedDate": "2020-05-05T12:50:31Z", "type": "commit"}, {"oid": "0ea49a0ddedff20f6bcc1ba1fb4a1bc1dbe0395a", "url": "https://github.com/wso2/carbon-apimgt/commit/0ea49a0ddedff20f6bcc1ba1fb4a1bc1dbe0395a", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-05-05T13:03:48Z", "type": "commit"}, {"oid": "b24a5e295b624256bb18071f3f6dedc8e5aac2df", "url": "https://github.com/wso2/carbon-apimgt/commit/b24a5e295b624256bb18071f3f6dedc8e5aac2df", "message": "Merge branch 'master' of https://github.com/SahanHerath/carbon-apimgt", "committedDate": "2020-05-05T13:47:13Z", "type": "commit"}, {"oid": "b93d62437b06910fc51cca4a40df87130b0472c0", "url": "https://github.com/wso2/carbon-apimgt/commit/b93d62437b06910fc51cca4a40df87130b0472c0", "message": "Merge pull request #3 from SahanHerath/master-workflow\n\nchanged for try with resources", "committedDate": "2020-05-05T14:15:27Z", "type": "commit"}, {"oid": "edf999e0fbffb180bc4974d2340d782039f75deb", "url": "https://github.com/wso2/carbon-apimgt/commit/edf999e0fbffb180bc4974d2340d782039f75deb", "message": "Merge branch 'master-workflow' of https://github.com/wso2/carbon-apimgt into master-workflow", "committedDate": "2020-05-05T22:12:10Z", "type": "commit"}, {"oid": "97294a043a675ef993c7dfd596a6f51ca2391d7d", "url": "https://github.com/wso2/carbon-apimgt/commit/97294a043a675ef993c7dfd596a6f51ca2391d7d", "message": "Changed the name of the scopes of apim:api_workflow to apim:api_workflow_view and apim:api_workflow_approve", "committedDate": "2020-05-05T22:18:53Z", "type": "commit"}, {"oid": "b398af958f84861480eecf1660cdea67b76f11bd", "url": "https://github.com/wso2/carbon-apimgt/commit/b398af958f84861480eecf1660cdea67b76f11bd", "message": "Merge pull request #4 from SahanHerath/master-workflow\n\nMaster workflow", "committedDate": "2020-05-05T22:37:04Z", "type": "commit"}, {"oid": "dbe9c2473fffb9e5a5709af3c4230a8b8970cdd3", "url": "https://github.com/wso2/carbon-apimgt/commit/dbe9c2473fffb9e5a5709af3c4230a8b8970cdd3", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt\n\n\u0001 Conflicts:\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/workflowextensions/default-workflow-extensions.xml", "committedDate": "2020-06-01T10:43:24Z", "type": "commit"}, {"oid": "0cc202fec18c9060526fd767ee6e07c54a44bea9", "url": "https://github.com/wso2/carbon-apimgt/commit/0cc202fec18c9060526fd767ee6e07c54a44bea9", "message": "Updated the rest apis to v1", "committedDate": "2020-06-02T07:52:40Z", "type": "commit"}, {"oid": "6182365aaf3738b9567cae7641e45319401774d3", "url": "https://github.com/wso2/carbon-apimgt/commit/6182365aaf3738b9567cae7641e45319401774d3", "message": "Removed admin rest api from v0.16 and added", "committedDate": "2020-06-03T12:16:42Z", "type": "commit"}, {"oid": "5d1abdefa19221e04be9175dc92a619efc4a5492", "url": "https://github.com/wso2/carbon-apimgt/commit/5d1abdefa19221e04be9175dc92a619efc4a5492", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt\n\n\u0001 Conflicts:\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/resources/admin-api.yaml\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml\n\u0001\tcomponents/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json", "committedDate": "2020-06-03T12:29:43Z", "type": "commit"}, {"oid": "c9ec7878b7f93f97c41771b752352fb4eb2672f9", "url": "https://github.com/wso2/carbon-apimgt/commit/c9ec7878b7f93f97c41771b752352fb4eb2672f9", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-06-03T13:25:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4ODgxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8442#discussion_r434588818", "bodyText": "lets use camelcase", "author": "chamilaadhi", "createdAt": "2020-06-03T13:59:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.impl.workflow;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.WorkflowResponse;\n+import org.wso2.carbon.apimgt.api.model.Application;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.dto.ApplicationWorkflowDTO;\n+import org.wso2.carbon.apimgt.impl.dto.WorkflowDTO;\n+\n+import java.util.List;\n+\n+/**\n+ * Approval workflow for Application Creation.\n+ */\n+public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecutor {\n+\n+    private static final Log log = LogFactory.getLog(ApplicationCreationApprovalWorkflowExecutor.class);\n+\n+    @Override\n+    public String getWorkflowType() {\n+        return WorkflowConstants.WF_TYPE_AM_APPLICATION_CREATION;\n+    }\n+\n+    /**\n+     * Execute the Application Creation workflow approval process.\n+     *\n+     * @param workflowDTO\n+     */\n+    @Override\n+    public WorkflowResponse execute(WorkflowDTO workflowDTO) throws WorkflowException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Executing Application creation Workflow.\");\n+        }\n+        ApplicationWorkflowDTO appWorkFlowDTO = (ApplicationWorkflowDTO) workflowDTO;\n+        Application application = appWorkFlowDTO.getApplication();\n+        String message = \"Approve application \" + application.getName() + \" creation request from application creator -\"\n+                + appWorkFlowDTO.getUserName() + \" with throttling tier - \" + application.getTier();\n+        workflowDTO.setWorkflowDescription(message);\n+        workflowDTO.setProperties(\"ApplicationName\", application.getName());\n+        workflowDTO.setProperties(\"UserName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setProperties(\"ApplicationTier\", application.getTier());", "originalCommit": "5d1abdefa19221e04be9175dc92a619efc4a5492", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4896c4b36ab90b45e6b6f51818183351ad77cf0", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\nindex 76840218305..9822f895885 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/workflow/ApplicationCreationApprovalWorkflowExecutor.java\n\n@@ -56,9 +56,9 @@ public class ApplicationCreationApprovalWorkflowExecutor extends WorkflowExecuto\n         String message = \"Approve application \" + application.getName() + \" creation request from application creator -\"\n                 + appWorkFlowDTO.getUserName() + \" with throttling tier - \" + application.getTier();\n         workflowDTO.setWorkflowDescription(message);\n-        workflowDTO.setProperties(\"ApplicationName\", application.getName());\n-        workflowDTO.setProperties(\"UserName\", appWorkFlowDTO.getUserName());\n-        workflowDTO.setProperties(\"ApplicationTier\", application.getTier());\n+        workflowDTO.setProperties(\"applicationName\", application.getName());\n+        workflowDTO.setProperties(\"userName\", appWorkFlowDTO.getUserName());\n+        workflowDTO.setProperties(\"applicationTier\", application.getTier());\n         super.execute(workflowDTO);\n \n         return new GeneralWorkflowResponse();\n"}}, {"oid": "db4c6247a4bd640b55ff7ea7268e6c2ee7675941", "url": "https://github.com/wso2/carbon-apimgt/commit/db4c6247a4bd640b55ff7ea7268e6c2ee7675941", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-06-03T14:40:09Z", "type": "commit"}, {"oid": "a4896c4b36ab90b45e6b6f51818183351ad77cf0", "url": "https://github.com/wso2/carbon-apimgt/commit/a4896c4b36ab90b45e6b6f51818183351ad77cf0", "message": "property key value changed to camelcase", "committedDate": "2020-06-03T14:47:09Z", "type": "commit"}]}