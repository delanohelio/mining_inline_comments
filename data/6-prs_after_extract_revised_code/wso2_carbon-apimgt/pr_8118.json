{"pr_number": 8118, "pr_title": "Fine-grained access control for GraphQL APIs", "pr_createdAt": "2020-01-29T03:58:38Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8118", "timeline": [{"oid": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "url": "https://github.com/wso2/carbon-apimgt/commit/c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "message": "Fixes", "committedDate": "2020-03-09T11:04:11Z", "type": "commit"}, {"oid": "6d9b3cfebcf2fda29d1e27106d683ef665b91c44", "url": "https://github.com/wso2/carbon-apimgt/commit/6d9b3cfebcf2fda29d1e27106d683ef665b91c44", "message": "Changed the graphql orbit version under pom.xml", "committedDate": "2019-10-30T08:49:25Z", "type": "commit"}, {"oid": "8299ebfc5bedac0d949e50fc7cc0a2acf1b451cf", "url": "https://github.com/wso2/carbon-apimgt/commit/8299ebfc5bedac0d949e50fc7cc0a2acf1b451cf", "message": "Added query depth limiting code to the GraphQLAPIHandler", "committedDate": "2019-10-31T10:46:55Z", "type": "commit"}, {"oid": "25ee1e8a5b77523d3b5fd80fa59d9b5343f00450", "url": "https://github.com/wso2/carbon-apimgt/commit/25ee1e8a5b77523d3b5fd80fa59d9b5343f00450", "message": "Created a new handler for GraphQL APIs to manage the security", "committedDate": "2019-11-08T06:03:00Z", "type": "commit"}, {"oid": "c8b63f715cd458d328ac107d6144149bcf8c37f9", "url": "https://github.com/wso2/carbon-apimgt/commit/c8b63f715cd458d328ac107d6144149bcf8c37f9", "message": "Changes made to GraphQLSecurityHandler", "committedDate": "2019-11-14T08:33:38Z", "type": "commit"}, {"oid": "c7d3d00674fe6a5b9062190d1bcdfdfca6fcd723", "url": "https://github.com/wso2/carbon-apimgt/commit/c7d3d00674fe6a5b9062190d1bcdfdfca6fcd723", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2019-11-14T08:44:22Z", "type": "commit"}, {"oid": "2cf96d6ecadab9ebbd6c253146cfa2aa9db882ca", "url": "https://github.com/wso2/carbon-apimgt/commit/2cf96d6ecadab9ebbd6c253146cfa2aa9db882ca", "message": "Encoded policy retrieval from the local entry", "committedDate": "2019-11-15T04:41:34Z", "type": "commit"}, {"oid": "9baa9a2c29db5a52cc09ed74ed39ead17511f68c", "url": "https://github.com/wso2/carbon-apimgt/commit/9baa9a2c29db5a52cc09ed74ed39ead17511f68c", "message": "Completed reading the base64 encoded policy from the GraphQLSecurityHandler", "committedDate": "2019-11-18T05:06:51Z", "type": "commit"}, {"oid": "57c701d4d8422d3546d983a13d9570761b4c845e", "url": "https://github.com/wso2/carbon-apimgt/commit/57c701d4d8422d3546d983a13d9570761b4c845e", "message": "Changes made to depth analysis related code", "committedDate": "2019-11-27T06:13:34Z", "type": "commit"}, {"oid": "777bf00b340513f92bce5cb284eb9c1d12893632", "url": "https://github.com/wso2/carbon-apimgt/commit/777bf00b340513f92bce5cb284eb9c1d12893632", "message": "Started working on the UIs for the query analysis section in Publisher", "committedDate": "2019-11-27T06:18:16Z", "type": "commit"}, {"oid": "2251e88255d52f98517c69bf3ca05e9b5c57e8e3", "url": "https://github.com/wso2/carbon-apimgt/commit/2251e88255d52f98517c69bf3ca05e9b5c57e8e3", "message": "Created seperate components for depth and complexity analysis", "committedDate": "2019-12-09T04:14:01Z", "type": "commit"}, {"oid": "5e19a92bf75c9672cd295d6de8237f0d913ae0aa", "url": "https://github.com/wso2/carbon-apimgt/commit/5e19a92bf75c9672cd295d6de8237f0d913ae0aa", "message": "Changed made to GraphQLSecurityHandler", "committedDate": "2019-12-10T06:48:58Z", "type": "commit"}, {"oid": "6025a7eb34c7109c4d64c0ca7a1a2e8e63570840", "url": "https://github.com/wso2/carbon-apimgt/commit/6025a7eb34c7109c4d64c0ca7a1a2e8e63570840", "message": "Started working on the DepthAnalysis related UI", "committedDate": "2019-12-10T06:50:01Z", "type": "commit"}, {"oid": "85df887d693c5329bbb7ebe5d456676c1d229927", "url": "https://github.com/wso2/carbon-apimgt/commit/85df887d693c5329bbb7ebe5d456676c1d229927", "message": "Fixed an error in GraphQLSecurityHandler", "committedDate": "2019-12-10T07:04:27Z", "type": "commit"}, {"oid": "c0731f3f7ff434965966418c028344ca19ff28ac", "url": "https://github.com/wso2/carbon-apimgt/commit/c0731f3f7ff434965966418c028344ca19ff28ac", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2019-12-10T07:08:44Z", "type": "commit"}, {"oid": "545a99ed4854f96902c422ac642de9516e7c4a0f", "url": "https://github.com/wso2/carbon-apimgt/commit/545a99ed4854f96902c422ac642de9516e7c4a0f", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2019-12-10T08:51:22Z", "type": "commit"}, {"oid": "4de6bb3b0094cb2c9c6c932fa106e9b7f7b29811", "url": "https://github.com/wso2/carbon-apimgt/commit/4de6bb3b0094cb2c9c6c932fa106e9b7f7b29811", "message": "Changes made to GraphQLAPIHandler", "committedDate": "2019-12-10T09:56:25Z", "type": "commit"}, {"oid": "b0e9a57d8b6e28f273cb1a169ec3405dc373e702", "url": "https://github.com/wso2/carbon-apimgt/commit/b0e9a57d8b6e28f273cb1a169ec3405dc373e702", "message": "Changes made to query analysis feature in the publisher", "committedDate": "2019-12-12T04:32:03Z", "type": "commit"}, {"oid": "a891c7b01a3ddc4859a364af9fbbbdcfb322475c", "url": "https://github.com/wso2/carbon-apimgt/commit/a891c7b01a3ddc4859a364af9fbbbdcfb322475c", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2019-12-12T04:34:26Z", "type": "commit"}, {"oid": "44431c82e6c88c2bcb877b6edc20af6436146c2f", "url": "https://github.com/wso2/carbon-apimgt/commit/44431c82e6c88c2bcb877b6edc20af6436146c2f", "message": "Added the pop-up to get the default depth limitation value", "committedDate": "2019-12-12T09:55:54Z", "type": "commit"}, {"oid": "b0644c9d0be383c3edda0dee2eda04537cc57e50", "url": "https://github.com/wso2/carbon-apimgt/commit/b0644c9d0be383c3edda0dee2eda04537cc57e50", "message": "Validation for input field which captures the default depth limitation", "committedDate": "2019-12-17T08:11:07Z", "type": "commit"}, {"oid": "55ab8f6e53eb91e3b41a264a1d01110b60a6f536", "url": "https://github.com/wso2/carbon-apimgt/commit/55ab8f6e53eb91e3b41a264a1d01110b60a6f536", "message": "Downgraded the version of swagger-ui", "committedDate": "2019-12-18T06:53:57Z", "type": "commit"}, {"oid": "83647bef44559f5a11044bdfba70f7ceb1aa9ae4", "url": "https://github.com/wso2/carbon-apimgt/commit/83647bef44559f5a11044bdfba70f7ceb1aa9ae4", "message": "Interim changes", "committedDate": "2019-12-18T06:57:10Z", "type": "commit"}, {"oid": "9676677d8b67bc434fc83fe37878f84515db2933", "url": "https://github.com/wso2/carbon-apimgt/commit/9676677d8b67bc434fc83fe37878f84515db2933", "message": "Interim changes", "committedDate": "2019-12-19T11:08:53Z", "type": "commit"}, {"oid": "b002bc411b47ea1c22c0793bff571be4b22676f9", "url": "https://github.com/wso2/carbon-apimgt/commit/b002bc411b47ea1c22c0793bff571be4b22676f9", "message": "Started working on the client pool", "committedDate": "2019-12-22T16:46:10Z", "type": "commit"}, {"oid": "85b52286473b1a2260b300a05692b4740acf15a5", "url": "https://github.com/wso2/carbon-apimgt/commit/85b52286473b1a2260b300a05692b4740acf15a5", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2019-12-22T16:47:33Z", "type": "commit"}, {"oid": "13fc20067ff8c600306657b591373f96681069ec", "url": "https://github.com/wso2/carbon-apimgt/commit/13fc20067ff8c600306657b591373f96681069ec", "message": "Interim changes", "committedDate": "2019-12-23T02:49:52Z", "type": "commit"}, {"oid": "5395c884ce5ee3adaa95ca7a847cccadcd7ab825", "url": "https://github.com/wso2/carbon-apimgt/commit/5395c884ce5ee3adaa95ca7a847cccadcd7ab825", "message": "Completed adding the client pool", "committedDate": "2019-12-23T12:10:15Z", "type": "commit"}, {"oid": "c2af27d0062b7c6460577c6586224a09fbf46886", "url": "https://github.com/wso2/carbon-apimgt/commit/c2af27d0062b7c6460577c6586224a09fbf46886", "message": "Completed the complexity related section within GraphQLSecurityHandler", "committedDate": "2019-12-23T18:06:44Z", "type": "commit"}, {"oid": "c1a694784395bd9371fde42c488f5f2a306e834b", "url": "https://github.com/wso2/carbon-apimgt/commit/c1a694784395bd9371fde42c488f5f2a306e834b", "message": "Validation of default depth limitation input field added", "committedDate": "2019-12-24T13:54:16Z", "type": "commit"}, {"oid": "86ec6b49bf3e7b6bd4c23b75df184f3c3f4f9147", "url": "https://github.com/wso2/carbon-apimgt/commit/86ec6b49bf3e7b6bd4c23b75df184f3c3f4f9147", "message": "Added the database tables", "committedDate": "2020-01-09T12:48:53Z", "type": "commit"}, {"oid": "adb35b70a9d1900b1b20d1a785a6141555a0fdba", "url": "https://github.com/wso2/carbon-apimgt/commit/adb35b70a9d1900b1b20d1a785a6141555a0fdba", "message": "Started working on the swagger definitions in the publisher-api.yaml", "committedDate": "2020-01-09T13:03:53Z", "type": "commit"}, {"oid": "d619549fe64e5a52e6330595bfd3a2bd7ec937d0", "url": "https://github.com/wso2/carbon-apimgt/commit/d619549fe64e5a52e6330595bfd3a2bd7ec937d0", "message": "Interim changes", "committedDate": "2020-01-09T13:04:27Z", "type": "commit"}, {"oid": "2668c3be5116b3e8c14fb993ab00bd9906a4d933", "url": "https://github.com/wso2/carbon-apimgt/commit/2668c3be5116b3e8c14fb993ab00bd9906a4d933", "message": "Created the swagger definitions for basic get and post for depth and complexity sections", "committedDate": "2020-01-14T11:23:49Z", "type": "commit"}, {"oid": "7a11e95d5d2a984374d943791156c5b4e4b53234", "url": "https://github.com/wso2/carbon-apimgt/commit/7a11e95d5d2a984374d943791156c5b4e4b53234", "message": "Changed the definition of GraphQLQueryComplexityInfo and added a GraphQLCustomComplexityInfo defintion", "committedDate": "2020-01-15T05:40:06Z", "type": "commit"}, {"oid": "67a9cbbf08c08de85bc32be5b71dad3de3f6941d", "url": "https://github.com/wso2/carbon-apimgt/commit/67a9cbbf08c08de85bc32be5b71dad3de3f6941d", "message": "Added comments to describe the methods which were generated through publisher-api.yaml", "committedDate": "2020-01-16T07:07:28Z", "type": "commit"}, {"oid": "b3eff60841bfe3a7f9f1e41b9f019c581237f815", "url": "https://github.com/wso2/carbon-apimgt/commit/b3eff60841bfe3a7f9f1e41b9f019c581237f815", "message": "Interim changes", "committedDate": "2020-01-16T07:57:06Z", "type": "commit"}, {"oid": "0bf2f8733aa186bad789577378a47bc5c410e68f", "url": "https://github.com/wso2/carbon-apimgt/commit/0bf2f8733aa186bad789577378a47bc5c410e68f", "message": "Changed the type of apiId", "committedDate": "2020-01-17T19:35:47Z", "type": "commit"}, {"oid": "1cd8175792ca69c002e002d5705289c1aaf3ce18", "url": "https://github.com/wso2/carbon-apimgt/commit/1cd8175792ca69c002e002d5705289c1aaf3ce18", "message": "Created models for complexity and depth", "committedDate": "2020-01-17T19:38:02Z", "type": "commit"}, {"oid": "05cad0a438118916cad581e5ce02cc949127e1d9", "url": "https://github.com/wso2/carbon-apimgt/commit/05cad0a438118916cad581e5ce02cc949127e1d9", "message": "Interim changes", "committedDate": "2020-01-17T19:40:27Z", "type": "commit"}, {"oid": "971f7db60407008664679dd38d1f98791785f795", "url": "https://github.com/wso2/carbon-apimgt/commit/971f7db60407008664679dd38d1f98791785f795", "message": "Added a GraphqlQueryAnalysisMappingUtil.java", "committedDate": "2020-01-18T18:28:27Z", "type": "commit"}, {"oid": "922eec3e8b9c38ce1e91b6e6a092bc08115c7875", "url": "https://github.com/wso2/carbon-apimgt/commit/922eec3e8b9c38ce1e91b6e6a092bc08115c7875", "message": "Changes in ApiMgtDAO.java", "committedDate": "2020-01-18T18:29:59Z", "type": "commit"}, {"oid": "fbd62ae6e8d4a5e1ce8dee89bf8ce9e1ca67179c", "url": "https://github.com/wso2/carbon-apimgt/commit/fbd62ae6e8d4a5e1ce8dee89bf8ce9e1ca67179c", "message": "Changes in GraphqlQueryAnalysisMappingUtil.java", "committedDate": "2020-01-18T18:35:26Z", "type": "commit"}, {"oid": "1beb2ac4b68239d2a2a0de05eb418ffb1bd01f66", "url": "https://github.com/wso2/carbon-apimgt/commit/1beb2ac4b68239d2a2a0de05eb418ffb1bd01f66", "message": "Added queries into SQLConstants.java", "committedDate": "2020-01-18T18:38:25Z", "type": "commit"}, {"oid": "dd386f3d63877f2741cc91ee40b839377da99f97", "url": "https://github.com/wso2/carbon-apimgt/commit/dd386f3d63877f2741cc91ee40b839377da99f97", "message": "Completed get and post of graphql complexity related APIs", "committedDate": "2020-01-18T19:17:46Z", "type": "commit"}, {"oid": "5c71b4637ab83400fc5c2d625dacafb4cac0d539", "url": "https://github.com/wso2/carbon-apimgt/commit/5c71b4637ab83400fc5c2d625dacafb4cac0d539", "message": "Removed the apiId from the definitions of GraphQLDepthInfo and GraphQLComplexityInfo", "committedDate": "2020-01-19T09:49:05Z", "type": "commit"}, {"oid": "c08fb3598d68e037acc0dd019ec30a0397fa9c74", "url": "https://github.com/wso2/carbon-apimgt/commit/c08fb3598d68e037acc0dd019ec30a0397fa9c74", "message": "Removed the api id from depth and complexity DTOs and the apidocs", "committedDate": "2020-01-19T10:32:27Z", "type": "commit"}, {"oid": "13f1bcc53386fe34b4a0286cf41f0ef338a2c429", "url": "https://github.com/wso2/carbon-apimgt/commit/13f1bcc53386fe34b4a0286cf41f0ef338a2c429", "message": "Altered the methods in GraphqlQueryAnalysisMappingUtil.java", "committedDate": "2020-01-19T10:33:30Z", "type": "commit"}, {"oid": "6ae8fcca52c6a926c45e9145e780de6657737d26", "url": "https://github.com/wso2/carbon-apimgt/commit/6ae8fcca52c6a926c45e9145e780de6657737d26", "message": "Removed the apiId form the complexity and depth related models", "committedDate": "2020-01-19T10:39:21Z", "type": "commit"}, {"oid": "126cf4b4440582d26a3db5952822cf783fd82d24", "url": "https://github.com/wso2/carbon-apimgt/commit/126cf4b4440582d26a3db5952822cf783fd82d24", "message": "Changes made to ApiMgtDAO.java and to some related queries under SQLConstants.java", "committedDate": "2020-01-19T10:41:13Z", "type": "commit"}, {"oid": "ac25c79fcb8d4c3450951e6d0d062d7d32bb2cee", "url": "https://github.com/wso2/carbon-apimgt/commit/ac25c79fcb8d4c3450951e6d0d062d7d32bb2cee", "message": "Added OAuth2Security to swagger definitions and fixed typos", "committedDate": "2020-01-20T16:12:56Z", "type": "commit"}, {"oid": "9ea8c619531b99bbb12f99cb4d872353fecebc82", "url": "https://github.com/wso2/carbon-apimgt/commit/9ea8c619531b99bbb12f99cb4d872353fecebc82", "message": "Changed the GraphqlDepthInfo model", "committedDate": "2020-01-20T16:33:06Z", "type": "commit"}, {"oid": "56cac61cdac986cc17d3ff729bc688e779e2adac", "url": "https://github.com/wso2/carbon-apimgt/commit/56cac61cdac986cc17d3ff729bc688e779e2adac", "message": "Added the check for graphql APIs", "committedDate": "2020-01-20T16:41:40Z", "type": "commit"}, {"oid": "34bbfbb563c46c459d3856ae2c5d2907105621f9", "url": "https://github.com/wso2/carbon-apimgt/commit/34bbfbb563c46c459d3856ae2c5d2907105621f9", "message": "Started working on the depth section", "committedDate": "2020-01-21T14:22:26Z", "type": "commit"}, {"oid": "e4728b731f9b9b6d5995bd117d47004bd27655d9", "url": "https://github.com/wso2/carbon-apimgt/commit/e4728b731f9b9b6d5995bd117d47004bd27655d9", "message": "Changes in role-depth mapping section", "committedDate": "2020-01-21T15:32:42Z", "type": "commit"}, {"oid": "cde39cc58b2f422b07c9a12a7cf3cc79596ce579", "url": "https://github.com/wso2/carbon-apimgt/commit/cde39cc58b2f422b07c9a12a7cf3cc79596ce579", "message": "Fixed typos within SQLCostants", "committedDate": "2020-01-22T05:56:25Z", "type": "commit"}, {"oid": "a093aeda5b37d647b5e8f32d26c48a8bd277eb3c", "url": "https://github.com/wso2/carbon-apimgt/commit/a093aeda5b37d647b5e8f32d26c48a8bd277eb3c", "message": "Added basic query analysis details to execute at API creation", "committedDate": "2020-01-22T11:37:59Z", "type": "commit"}, {"oid": "45e15f6ceeb10c61f5951161f45bee508a8cabbe", "url": "https://github.com/wso2/carbon-apimgt/commit/45e15f6ceeb10c61f5951161f45bee508a8cabbe", "message": "Added functionality to retrieve a GraphqlPolicyDefinition object at the time of local entry creation", "committedDate": "2020-01-23T05:37:13Z", "type": "commit"}, {"oid": "62787fca5c0ce4332f064bd08eb54c8992ce9bd7", "url": "https://github.com/wso2/carbon-apimgt/commit/62787fca5c0ce4332f064bd08eb54c8992ce9bd7", "message": "Interim changes", "committedDate": "2020-01-24T04:52:44Z", "type": "commit"}, {"oid": "cebed5b2261d4c4813697e220b9f4cd809a77fac", "url": "https://github.com/wso2/carbon-apimgt/commit/cebed5b2261d4c4813697e220b9f4cd809a77fac", "message": "Started working on the json object creation at the time of API publishing", "committedDate": "2020-01-24T10:15:52Z", "type": "commit"}, {"oid": "9093dfb89bfcaa818f01652c01514dceb1439052", "url": "https://github.com/wso2/carbon-apimgt/commit/9093dfb89bfcaa818f01652c01514dceb1439052", "message": "Changes in GraphQLSchemaDefinition.java", "committedDate": "2020-01-25T08:47:38Z", "type": "commit"}, {"oid": "dd63e31ef2d98b8afad2818d90a455f761e5bbb1", "url": "https://github.com/wso2/carbon-apimgt/commit/dd63e31ef2d98b8afad2818d90a455f761e5bbb1", "message": "changes in CustomComplexityCalculator", "committedDate": "2020-01-25T11:17:44Z", "type": "commit"}, {"oid": "16746bf84d16faa0d18e503d5b0d0760f550ac46", "url": "https://github.com/wso2/carbon-apimgt/commit/16746bf84d16faa0d18e503d5b0d0760f550ac46", "message": "Added definitions for role-depth mapping get, put and delete", "committedDate": "2020-01-25T15:44:21Z", "type": "commit"}, {"oid": "5aaa2e37373dcc9da92f7d17c4ab6330516a86dd", "url": "https://github.com/wso2/carbon-apimgt/commit/5aaa2e37373dcc9da92f7d17c4ab6330516a86dd", "message": "Interim changes", "committedDate": "2020-01-25T15:46:44Z", "type": "commit"}, {"oid": "541e929d2bce7e5826a1214570da4aa1ac164e14", "url": "https://github.com/wso2/carbon-apimgt/commit/541e929d2bce7e5826a1214570da4aa1ac164e14", "message": "Completed individual role-depth mapping get, update and delete resource APIs", "committedDate": "2020-01-26T05:59:41Z", "type": "commit"}, {"oid": "caad50e77cc4972cb931f44afbafc5e0e0a9fba3", "url": "https://github.com/wso2/carbon-apimgt/commit/caad50e77cc4972cb931f44afbafc5e0e0a9fba3", "message": "Completed depth and complexity enable/disable rest apis along with the implementations", "committedDate": "2020-01-26T16:50:21Z", "type": "commit"}, {"oid": "00a843e08df7787760c1ad3703611679ac3e8693", "url": "https://github.com/wso2/carbon-apimgt/commit/00a843e08df7787760c1ad3703611679ac3e8693", "message": "Changes in backend REST APIs", "committedDate": "2020-01-27T04:12:29Z", "type": "commit"}, {"oid": "e4447a376c42fee44e49de2a244512a8ae9ef6ef", "url": "https://github.com/wso2/carbon-apimgt/commit/e4447a376c42fee44e49de2a244512a8ae9ef6ef", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-01-27T05:34:42Z", "type": "commit"}, {"oid": "13f8552d29aadadb04d1334f0c6087e0166600aa", "url": "https://github.com/wso2/carbon-apimgt/commit/13f8552d29aadadb04d1334f0c6087e0166600aa", "message": "Changes made to fix test failures", "committedDate": "2020-01-27T18:12:51Z", "type": "commit"}, {"oid": "6732d0563330f22a2004e0336ef9f902a79f768f", "url": "https://github.com/wso2/carbon-apimgt/commit/6732d0563330f22a2004e0336ef9f902a79f768f", "message": "Issue fixes", "committedDate": "2020-01-28T11:54:55Z", "type": "commit"}, {"oid": "c112550783a772b4139b82082ff812a4cc3d99f5", "url": "https://github.com/wso2/carbon-apimgt/commit/c112550783a772b4139b82082ff812a4cc3d99f5", "message": "Interim changes", "committedDate": "2020-01-28T21:11:19Z", "type": "commit"}, {"oid": "a3302f3919f8ecf269b4aac7a17020768aff1cbe", "url": "https://github.com/wso2/carbon-apimgt/commit/a3302f3919f8ecf269b4aac7a17020768aff1cbe", "message": "Removed Publisher UI code", "committedDate": "2020-01-28T22:14:25Z", "type": "commit"}, {"oid": "be63f1579612da56a6384b2d56e76ba43842c2ae", "url": "https://github.com/wso2/carbon-apimgt/commit/be63f1579612da56a6384b2d56e76ba43842c2ae", "message": "DAO file changes", "committedDate": "2020-01-28T23:09:41Z", "type": "commit"}, {"oid": "5367424d6391a44980d303ba62e6d8bc87973a92", "url": "https://github.com/wso2/carbon-apimgt/commit/5367424d6391a44980d303ba62e6d8bc87973a92", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-01-29T01:34:10Z", "type": "commit"}, {"oid": "9fbabdddccd7cd17e2c2682061cfdbc3d3279bb7", "url": "https://github.com/wso2/carbon-apimgt/commit/9fbabdddccd7cd17e2c2682061cfdbc3d3279bb7", "message": "Changed the package-lock.json differences", "committedDate": "2020-01-29T03:50:52Z", "type": "commit"}, {"oid": "ec62d01dcbaa4f818f7af2367301d7af243a6fc4", "url": "https://github.com/wso2/carbon-apimgt/commit/ec62d01dcbaa4f818f7af2367301d7af243a6fc4", "message": "Added primitive types", "committedDate": "2020-02-04T07:28:00Z", "type": "commit"}, {"oid": "8c1c15712a59f4e287be19489738276ce0b9275e", "url": "https://github.com/wso2/carbon-apimgt/commit/8c1c15712a59f4e287be19489738276ce0b9275e", "message": "Changes in FieldComplexityCalculatorImpl", "committedDate": "2020-02-04T14:11:46Z", "type": "commit"}, {"oid": "070a0ab71952289edd0060dfb80b00470fafb47c", "url": "https://github.com/wso2/carbon-apimgt/commit/070a0ab71952289edd0060dfb80b00470fafb47c", "message": "Exception code added for APIs which are not GraphQL", "committedDate": "2020-02-04T14:13:35Z", "type": "commit"}, {"oid": "66dbc67fa0aa0a560d0acc55647975d18e438621", "url": "https://github.com/wso2/carbon-apimgt/commit/66dbc67fa0aa0a560d0acc55647975d18e438621", "message": "Issue fixes", "committedDate": "2020-02-04T15:08:55Z", "type": "commit"}, {"oid": "50b09879684bb97e799a0bb80fc37e6ea3472ab2", "url": "https://github.com/wso2/carbon-apimgt/commit/50b09879684bb97e799a0bb80fc37e6ea3472ab2", "message": "Fixes", "committedDate": "2020-02-04T15:20:35Z", "type": "commit"}, {"oid": "e0c66a3729ec9dfb8c66923ee8b3f572d84eafa6", "url": "https://github.com/wso2/carbon-apimgt/commit/e0c66a3729ec9dfb8c66923ee8b3f572d84eafa6", "message": "Fixes", "committedDate": "2020-02-04T17:48:54Z", "type": "commit"}, {"oid": "1203ada7e23a19a5de9376afe9513bcf4faa9bc9", "url": "https://github.com/wso2/carbon-apimgt/commit/1203ada7e23a19a5de9376afe9513bcf4faa9bc9", "message": "Fixes", "committedDate": "2020-02-05T08:00:25Z", "type": "commit"}, {"oid": "5654a7a928ca0bfa6a11cfa5f3e5442a91e4a2bc", "url": "https://github.com/wso2/carbon-apimgt/commit/5654a7a928ca0bfa6a11cfa5f3e5442a91e4a2bc", "message": "Changes in ApisApiServiceImpl", "committedDate": "2020-02-05T08:43:06Z", "type": "commit"}, {"oid": "a4ca8c27681d9ef559c963f407abb71ebd99f8db", "url": "https://github.com/wso2/carbon-apimgt/commit/a4ca8c27681d9ef559c963f407abb71ebd99f8db", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-02-05T08:48:40Z", "type": "commit"}, {"oid": "4bc4b7e70c0fb103307ee134b463e49d827765a6", "url": "https://github.com/wso2/carbon-apimgt/commit/4bc4b7e70c0fb103307ee134b463e49d827765a6", "message": "Fixes", "committedDate": "2020-02-05T09:04:39Z", "type": "commit"}, {"oid": "512c820396f6c2fedf13798e38d669dde4232d95", "url": "https://github.com/wso2/carbon-apimgt/commit/512c820396f6c2fedf13798e38d669dde4232d95", "message": "Changes in the Handler code", "committedDate": "2020-02-05T12:34:18Z", "type": "commit"}, {"oid": "61b85ee1dcb4570fc572f247eab1ac58c980899b", "url": "https://github.com/wso2/carbon-apimgt/commit/61b85ee1dcb4570fc572f247eab1ac58c980899b", "message": "Code refactored", "committedDate": "2020-02-05T16:08:57Z", "type": "commit"}, {"oid": "50bc1eff35476fbc5e95edb2eee9443aa9a46c60", "url": "https://github.com/wso2/carbon-apimgt/commit/50bc1eff35476fbc5e95edb2eee9443aa9a46c60", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-02-05T16:09:52Z", "type": "commit"}, {"oid": "6350401de242648f2dc44957416f85dd430ed222", "url": "https://github.com/wso2/carbon-apimgt/commit/6350401de242648f2dc44957416f85dd430ed222", "message": "Changes in backend REST API definitions", "committedDate": "2020-02-06T10:04:04Z", "type": "commit"}, {"oid": "e017fb54a1ccd23d2837be5f3e3e8f4628060336", "url": "https://github.com/wso2/carbon-apimgt/commit/e017fb54a1ccd23d2837be5f3e3e8f4628060336", "message": "Added backend REST API to retrieve the list of types and fields from the schema", "committedDate": "2020-02-06T13:35:32Z", "type": "commit"}, {"oid": "295a9079ed84ce09dd49f211d4f9f4682cfc6e04", "url": "https://github.com/wso2/carbon-apimgt/commit/295a9079ed84ce09dd49f211d4f9f4682cfc6e04", "message": "Fixes", "committedDate": "2020-02-06T15:17:01Z", "type": "commit"}, {"oid": "0097bf206e03ca258f781d534b37acef0897f8c5", "url": "https://github.com/wso2/carbon-apimgt/commit/0097bf206e03ca258f781d534b37acef0897f8c5", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-02-06T15:21:25Z", "type": "commit"}, {"oid": "9632aa571de7e357f93cd8291d230817ae9566a8", "url": "https://github.com/wso2/carbon-apimgt/commit/9632aa571de7e357f93cd8291d230817ae9566a8", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-02-07T09:50:21Z", "type": "commit"}, {"oid": "9fda90e955847d20552638e1df45e7dd9cec7f53", "url": "https://github.com/wso2/carbon-apimgt/commit/9fda90e955847d20552638e1df45e7dd9cec7f53", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt", "committedDate": "2020-02-09T04:59:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NTUyNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377575526", "bodyText": "Java doc should say what the return value means.", "author": "bhathiya", "createdAt": "2020-02-11T11:21:59Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\nindex 6590367b889..8f66b9ae68b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n\n@@ -96,7 +96,8 @@ public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n      */\n     private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n         Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n-        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject)\n+                .get(APIConstants.CHECK_ENABLED).toString());\n         List<Integer> allocatedDepths = new ArrayList<>();\n         if (depthCheckEnabled) {\n             for (String role : userRoles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzI3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577273", "bodyText": "method names should be verbs. how about analyseQueryDepth?", "author": "bhathiya", "createdAt": "2020-02-11T11:25:58Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\nindex 6590367b889..8f66b9ae68b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n\n@@ -96,7 +96,8 @@ public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n      */\n     private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n         Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n-        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject)\n+                .get(APIConstants.CHECK_ENABLED).toString());\n         List<Integer> allocatedDepths = new ArrayList<>();\n         if (depthCheckEnabled) {\n             for (String role : userRoles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzQ5OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577499", "bodyText": "same here.", "author": "bhathiya", "createdAt": "2020-02-11T11:26:27Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryComplexityAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\nindex 6590367b889..8f66b9ae68b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n\n@@ -96,7 +96,8 @@ public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n      */\n     private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n         Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n-        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject)\n+                .get(APIConstants.CHECK_ENABLED).toString());\n         List<Integer> allocatedDepths = new ArrayList<>();\n         if (depthCheckEnabled) {\n             for (String role : userRoles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3NzU2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377577563", "bodyText": "same here.", "author": "bhathiya", "createdAt": "2020-02-11T11:26:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\nindex 6590367b889..8f66b9ae68b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n\n@@ -96,7 +96,8 @@ public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n      */\n     private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n         Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n-        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject)\n+                .get(APIConstants.CHECK_ENABLED).toString());\n         List<Integer> allocatedDepths = new ArrayList<>();\n         if (depthCheckEnabled) {\n             for (String role : userRoles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU3ODQxMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377578413", "bodyText": "please create constants for strings like these.", "author": "bhathiya", "createdAt": "2020-02-11T11:28:21Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.apimgt.gateway.handlers.graphQL;\n+\n+import graphql.ExecutionResult;\n+import graphql.GraphQL;\n+import graphql.GraphQLError;\n+import graphql.analysis.FieldComplexityCalculator;\n+import graphql.analysis.MaxQueryComplexityInstrumentation;\n+import graphql.analysis.MaxQueryDepthInstrumentation;\n+import graphql.schema.GraphQLSchema;\n+\n+import org.apache.axiom.om.OMAbstractFactory;\n+import org.apache.axiom.om.OMElement;\n+import org.apache.axiom.om.OMFactory;\n+import org.apache.axiom.om.OMNamespace;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpStatus;\n+import org.apache.synapse.Mediator;\n+import org.apache.synapse.MessageContext;\n+import org.apache.synapse.rest.AbstractHandler;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.wso2.carbon.apimgt.gateway.handlers.Utils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityConstants;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityException;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.APISecurityUtils;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClient;\n+import org.wso2.carbon.apimgt.gateway.handlers.security.usermgt.APIKeyMgtRemoteUserClientPool;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n+\n+    private static final Log log = LogFactory.getLog(GraphQLQueryAnalysisHandler.class);\n+    private GraphQLSchema schema = null;\n+\n+    public boolean handleRequest(MessageContext messageContext) {\n+        schema = (GraphQLSchema) messageContext.getProperty(APIConstants.GRAPHQL_SCHEMA);\n+        String payload = messageContext.getProperty(APIConstants.GRAPHQL_PAYLOAD).toString();\n+        if (!analyseQuery(messageContext, payload)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Query was blocked by the static query analyser\");\n+            }\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * This method returns the user roles\n+     *\n+     * @param username username of the user\n+     * @return list of user roles\n+     */\n+    private String[] getUserRoles(String username) throws APISecurityException {\n+        String[] userRoles;\n+        APIKeyMgtRemoteUserClient client;\n+        try {\n+            APIKeyMgtRemoteUserClientPool clientPool = APIKeyMgtRemoteUserClientPool.getInstance();\n+            client = clientPool.get();\n+            userRoles = client.getUserRoles(username);\n+        } catch (Exception e) {\n+            throw new APISecurityException(APISecurityConstants.API_AUTH_GENERAL_ERROR, e.getMessage(), e);\n+        }\n+        return userRoles;\n+    }\n+\n+    /**\n+     * This method returns the maximum query depth value\n+     *\n+     * @param userRoles        list of user roles\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query depth value if exists, or -1 to denote no depth limitation\n+     */\n+    private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n+        Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        List<Integer> allocatedDepths = new ArrayList<>();\n+        if (depthCheckEnabled) {\n+            for (String role : userRoles) {\n+                Object depth = ((JSONObject) depthObject).get(role);\n+                if (depth != null) {\n+                    allocatedDepths.add(((Long) depth).intValue());\n+                } else {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No depth limitation value was assigned for \" + role + \" role\");\n+                    }\n+                }\n+            }\n+            if (allocatedDepths.isEmpty()) {\n+                Object defaultDepth = ((JSONObject) depthObject).get(\"default\");\n+                if (defaultDepth != null) {\n+                    return ((Long) defaultDepth).intValue();\n+                } else {\n+                    log.error(\"No default depth was allocated\");\n+                    return -1;\n+                }\n+            } else {\n+                return Collections.max(allocatedDepths);\n+            }\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * This method analyses the query\n+     *\n+     * @param messageContext message context of the request\n+     * @param payload        payload of the request\n+     * @return true or false\n+     */\n+    private boolean analyseQuery(MessageContext messageContext, String payload) {\n+        JSONParser jsonParser = new JSONParser();\n+\n+        try {\n+            String graphQLAccessControlPolicy =\n+                    (String) messageContext.getProperty(APIConstants.GRAPHQL_ACCESS_CONTROL_POLICY);\n+            JSONObject policyDefinition = (JSONObject) jsonParser.parse(graphQLAccessControlPolicy);\n+            if (queryDepthAnalysis(messageContext, payload, policyDefinition) &&\n+                    queryComplexityAnalysis(messageContext, payload, policyDefinition)) {\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        } catch (ParseException e) {\n+            log.error(\"Policy definition parsing failed. \" + e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query depth\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryDepthAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        String username = APISecurityUtils.getAuthenticationContext(messageContext).getUsername();\n+\n+        try {\n+            String[] userRoles = getUserRoles(username);\n+            int maxQueryDepth = getMaxQueryDepth(userRoles, policyDefinition);\n+            if (maxQueryDepth > 0) {\n+                MaxQueryDepthInstrumentation maxQueryDepthInstrumentation =\n+                        new MaxQueryDepthInstrumentation(maxQueryDepth);\n+                GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryDepthInstrumentation).build();\n+\n+                try {\n+                    ExecutionResult executionResult = runtime.execute(payload);\n+                    List<GraphQLError> errors = executionResult.getErrors();\n+                    if (errors.size() > 0) {\n+                        List<String> errorList = new ArrayList<>();\n+                        for (GraphQLError error : errors) {\n+                            errorList.add(error.getMessage());\n+                        }\n+\n+                        // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                        ListIterator<String> iterator = errorList.listIterator();\n+                        while (iterator.hasNext()) {\n+                            if (iterator.next().contains(\"non-nullable\")) {\n+                                iterator.remove();\n+                            }\n+                        }\n+\n+                        if (errorList.size() == 0) {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                            }\n+                            return true;\n+                        }\n+\n+                        handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP, messageContext,\n+                                APISecurityConstants.GRAPHQL_QUERY_TOO_DEEP_MESSAGE, errorList.toString());\n+                        log.error(errorList.toString());\n+                        return false;\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Maximum query depth of \" + maxQueryDepth + \" was not exceeded\");\n+                    }\n+                    return true;\n+                } catch (Throwable e) {\n+                    log.error(e);\n+                }\n+            } else {\n+                return true; // No depth limitation check\n+            }\n+        } catch (APISecurityException e) {\n+            log.error(e.getMessage(), e);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method analyses the query complexity\n+     *\n+     * @param messageContext   message context of the request\n+     * @param payload          payload of the request\n+     * @param policyDefinition json object which contains the policy\n+     * @return true or false\n+     */\n+    private boolean queryComplexityAnalysis(MessageContext messageContext, String payload, JSONObject policyDefinition) {\n+        FieldComplexityCalculator fieldComplexityCalculator = new FieldComplexityCalculatorImpl(messageContext);\n+        int maxQueryComplexity = getMaxQueryComplexity(policyDefinition);\n+\n+        if (maxQueryComplexity > 0) {\n+            MaxQueryComplexityInstrumentation maxQueryComplexityInstrumentation =\n+                    new MaxQueryComplexityInstrumentation(maxQueryComplexity, fieldComplexityCalculator);\n+            GraphQL runtime = GraphQL.newGraphQL(schema).instrumentation(maxQueryComplexityInstrumentation).build();\n+\n+            try {\n+                ExecutionResult executionResult = runtime.execute(payload);\n+                List<GraphQLError> errors = executionResult.getErrors();\n+                if (errors.size() > 0) {\n+                    List<String> errorList = new ArrayList<>();\n+                    for (GraphQLError error : errors) {\n+                        errorList.add(error.getMessage());\n+                    }\n+\n+                    // TODO: https://github.com/wso2/carbon-apimgt/issues/8147\n+                    ListIterator<String> iterator = errorList.listIterator();\n+                    while (iterator.hasNext()) {\n+                        if (iterator.next().contains(\"non-nullable\")) {\n+                            iterator.remove();\n+                        }\n+                    }\n+\n+                    if (errorList.size() == 0) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Maximum query complexity was not exceeded\");\n+                        }\n+                        return true;\n+                    } else {\n+                        log.error(errorList);\n+                        errorList.clear();\n+                        errorList.add(\"maximum query complexity exceeded\");\n+                    }\n+\n+                    handleFailure(APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX, messageContext,\n+                            APISecurityConstants.GRAPHQL_QUERY_TOO_COMPLEX_MESSAGE, errorList.toString());\n+                    return false;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Maximum query complexity was not exceeded\");\n+                }\n+                return true;\n+            } catch (Exception e) {\n+                log.error(e.getMessage(), e);\n+            }\n+        } else {\n+            return true; // No complexity limitation check\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This method returns the maximum query complexity value\n+     *\n+     * @param policyDefinition json object which contains the policy\n+     * @return maximum query complexity value if exists, or -1 to denote no complexity limitation\n+     */\n+    private int getMaxQueryComplexity(JSONObject policyDefinition) {\n+        Object complexityObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_COMPLEXITY);\n+        boolean complexityCheckEnabled = Boolean.parseBoolean(((JSONObject) complexityObject).get(\"enabled\").toString());\n+        if (complexityCheckEnabled) {\n+            Object maxQueryComplexity = ((JSONObject) complexityObject).get(\"max_query_complexity\");", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\nindex 6590367b889..8f66b9ae68b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/graphQL/GraphQLQueryAnalysisHandler.java\n\n@@ -96,7 +96,8 @@ public class GraphQLQueryAnalysisHandler extends AbstractHandler {\n      */\n     private int getMaxQueryDepth(String[] userRoles, JSONObject policyDefinition) {\n         Object depthObject = policyDefinition.get(APIConstants.QUERY_ANALYSIS_DEPTH);\n-        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject).get(\"enabled\").toString());\n+        boolean depthCheckEnabled = Boolean.parseBoolean(((JSONObject) depthObject)\n+                .get(APIConstants.CHECK_ENABLED).toString());\n         List<Integer> allocatedDepths = new ArrayList<>();\n         if (depthCheckEnabled) {\n             for (String role : userRoles) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDcwNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8118#discussion_r377580707", "bodyText": "are we handling connection rollback inside this?", "author": "bhathiya", "createdAt": "2020-02-11T11:33:24Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -14234,6 +14254,368 @@ public String getAuditApiId(APIIdentifier apiIdentifier) throws APIManagementExc\n         return auditUuid;\n     }\n \n+    /**\n+     * Add complexity and depth as disabled at API creation\n+     *\n+     * @param apiIdentifier APIIdentifier object to retrieve API ID\n+     * @throws APIManagementException\n+     */\n+    public void addQueryAnalysisInfo(APIIdentifier apiIdentifier) throws APIManagementException {\n+        String query = SQLConstants.ADD_INITIAL_QUERY_ANALYSIS_SQL;\n+        try (Connection conn = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps = conn.prepareStatement(query)) {\n+            conn.setAutoCommit(false);\n+            int apiId = getAPIID(apiIdentifier, conn);\n+            ps.setInt(1, apiId);\n+            ps.setBoolean(2, false);\n+            ps.setBoolean(3, false);\n+            ps.setInt(4, 0);\n+            ps.executeUpdate();\n+            conn.commit();\n+        } catch (SQLException ex) {\n+            handleException(\"Error while adding query analysis info: \", ex);\n+        }\n+    }\n+\n+    /**\n+     * Update complexity details\n+     *\n+     * @param apiIdentifier         APIIdentifier object to retrieve API ID\n+     * @param graphqlComplexityInfo GraphqlComplexityDetails object\n+     * @throws APIManagementException\n+     */\n+    public void updateComplexityDetails(APIIdentifier apiIdentifier, GraphqlComplexityInfo graphqlComplexityInfo)\n+            throws APIManagementException {\n+        String checkEntry = SQLConstants.GET_COMPLEXITY_DETAILS_SQL;\n+        String addCustomComplexityDetails = SQLConstants.ADD_CUSTOM_COMPLEXITY_DETAILS_SQL;\n+        String updateCustomComplexityDetails = SQLConstants.UPDATE_CUSTOM_COMPLEXITY_DETAILS_SQL;\n+        try (Connection conn = APIMgtDBUtil.getConnection();\n+             PreparedStatement ps1 = conn.prepareStatement(checkEntry)) {\n+            conn.setAutoCommit(false);\n+            int apiId = getAPIID(apiIdentifier, conn);\n+            ps1.setInt(1, apiId);\n+            try (ResultSet rs = ps1.executeQuery()) {\n+                if (rs.next()) {\n+                    if (rs.getInt(\"MAX_COMPLEXITY\") == 0) {\n+                        // Update query analysis table entries and add query complexity table entries\n+                        updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n+                        try (PreparedStatement ps2 = conn.prepareStatement(addCustomComplexityDetails)) {\n+                            for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n+                                UUID uuid = UUID.randomUUID();\n+                                String randomUUIDString = uuid.toString();\n+                                ps2.setString(1, randomUUIDString);\n+                                ps2.setInt(2, apiId);\n+                                ps2.setString(3, customComplexity.getType());\n+                                ps2.setString(4, customComplexity.getField());\n+                                ps2.setInt(5, customComplexity.getComplexityValue());\n+                                ps2.executeUpdate();\n+                            }\n+                        } catch (SQLException e) {\n+                            handleException(\"Error while adding custom complexity details: \", e);", "originalCommit": "9fda90e955847d20552638e1df45e7dd9cec7f53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c472ea9a5f94f1f5fffd4533274fb9f40b42596c", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\nindex b2e603a1ed9..4d5a3f53681 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java\n\n@@ -14291,46 +14291,51 @@ public class ApiMgtDAO {\n         String updateCustomComplexityDetails = SQLConstants.UPDATE_CUSTOM_COMPLEXITY_DETAILS_SQL;\n         try (Connection conn = APIMgtDBUtil.getConnection();\n              PreparedStatement ps1 = conn.prepareStatement(checkEntry)) {\n-            conn.setAutoCommit(false);\n-            int apiId = getAPIID(apiIdentifier, conn);\n-            ps1.setInt(1, apiId);\n-            try (ResultSet rs = ps1.executeQuery()) {\n-                if (rs.next()) {\n-                    if (rs.getInt(\"MAX_COMPLEXITY\") == 0) {\n-                        // Update query analysis table entries and add query complexity table entries\n-                        updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n-                        try (PreparedStatement ps2 = conn.prepareStatement(addCustomComplexityDetails)) {\n-                            for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n-                                UUID uuid = UUID.randomUUID();\n-                                String randomUUIDString = uuid.toString();\n-                                ps2.setString(1, randomUUIDString);\n-                                ps2.setInt(2, apiId);\n-                                ps2.setString(3, customComplexity.getType());\n-                                ps2.setString(4, customComplexity.getField());\n-                                ps2.setInt(5, customComplexity.getComplexityValue());\n-                                ps2.executeUpdate();\n+            try {\n+                conn.setAutoCommit(false);\n+                int apiId = getAPIID(apiIdentifier, conn);\n+                ps1.setInt(1, apiId);\n+                try (ResultSet rs = ps1.executeQuery()) {\n+                    if (rs.next()) {\n+                        if (rs.getInt(\"MAX_COMPLEXITY\") == 0) {\n+                            // Update query analysis table entries and add query complexity table entries\n+                            updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n+                            try (PreparedStatement ps2 = conn.prepareStatement(addCustomComplexityDetails)) {\n+                                for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n+                                    UUID uuid = UUID.randomUUID();\n+                                    String randomUUIDString = uuid.toString();\n+                                    ps2.setString(1, randomUUIDString);\n+                                    ps2.setInt(2, apiId);\n+                                    ps2.setString(3, customComplexity.getType());\n+                                    ps2.setString(4, customComplexity.getField());\n+                                    ps2.setInt(5, customComplexity.getComplexityValue());\n+                                    ps2.executeUpdate();\n+                                }\n+                            } catch (SQLException e) {\n+                                handleException(\"Error while adding custom complexity details: \", e);\n                             }\n-                        } catch (SQLException e) {\n-                            handleException(\"Error while adding custom complexity details: \", e);\n-                        }\n-                    } else {\n-                        // Entries already exists for this API_ID. Hence an update is performed.\n-                        updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n-                        try (PreparedStatement ps2 = conn.prepareStatement(updateCustomComplexityDetails)) {\n-                            for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n-                                ps2.setInt(1, customComplexity.getComplexityValue());\n-                                ps2.setInt(2, apiId);\n-                                ps2.setString(3, customComplexity.getType());\n-                                ps2.setString(4, customComplexity.getField());\n-                                ps2.executeUpdate();\n+                        } else {\n+                            // Entries already exists for this API_ID. Hence an update is performed.\n+                            updateComplexityValues(apiIdentifier, graphqlComplexityInfo);\n+                            try (PreparedStatement ps2 = conn.prepareStatement(updateCustomComplexityDetails)) {\n+                                for (CustomComplexityDetails customComplexity : graphqlComplexityInfo.getList()) {\n+                                    ps2.setInt(1, customComplexity.getComplexityValue());\n+                                    ps2.setInt(2, apiId);\n+                                    ps2.setString(3, customComplexity.getType());\n+                                    ps2.setString(4, customComplexity.getField());\n+                                    ps2.executeUpdate();\n+                                }\n+                            } catch (SQLException e) {\n+                                handleException(\"Error while updating custom complexity details: \", e);\n                             }\n-                        } catch (SQLException e) {\n-                            handleException(\"Error while updating custom complexity details: \", e);\n                         }\n                     }\n                 }\n+                conn.commit();\n+            } catch (SQLException e) {\n+                conn.rollback();\n+                handleException(\"Failed to update complexity details: \", e);\n             }\n-            conn.commit();\n         } catch (SQLException e) {\n             handleException(\"Error while adding complexity details: \", e);\n         }\n"}}]}