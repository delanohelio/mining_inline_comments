{"pr_number": 8705, "pr_title": "Adding Artifact synchroniser feature ", "pr_createdAt": "2020-06-11T04:14:03Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8705", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTE0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539149", "bodyText": "add serializableID here", "author": "tharindu1st", "createdAt": "2020-06-11T04:42:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "diffHunk": "@@ -20,10 +20,12 @@\n \n package org.wso2.carbon.apimgt.api.gateway;\n \n+import java.io.Serializable;\n+\n /**\n  * This Contains the API Related data to deploy in Gateway.\n  */\n-public class GatewayAPIDTO {\n+public class GatewayAPIDTO implements Serializable {", "originalCommit": "c36324a3c2472accfa6373e978630a996bd9b44a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxODg4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438718883", "bodyText": "Fixed", "author": "1akshitha", "createdAt": "2020-06-11T11:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\nindex 965cda4a3dc..8069fe9c3d4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\n\n@@ -20,12 +20,10 @@\n \n package org.wso2.carbon.apimgt.api.gateway;\n \n-import java.io.Serializable;\n-\n /**\n  * This Contains the API Related data to deploy in Gateway.\n  */\n-public class GatewayAPIDTO implements Serializable {\n+public class GatewayAPIDTO {\n \n     private String name;\n     private String version;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTIzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539235", "bodyText": "do we need the gateway label inside this", "author": "tharindu1st", "createdAt": "2020-06-11T04:42:27Z", "path": "components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java", "diffHunk": "@@ -43,6 +45,7 @@\n     private String[] endpointEntriesToBeRemove;\n     private CredentialDto[] credentialsToBeAdd ;\n     private String[] credentialsToBeRemove;\n+    private String gatewayLabel;", "originalCommit": "c36324a3c2472accfa6373e978630a996bd9b44a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\nindex 965cda4a3dc..8069fe9c3d4 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/gateway/GatewayAPIDTO.java\n\n@@ -45,7 +43,6 @@ public class GatewayAPIDTO implements Serializable {\n     private String[] endpointEntriesToBeRemove;\n     private CredentialDto[] credentialsToBeAdd ;\n     private String[] credentialsToBeRemove;\n-    private String gatewayLabel;\n \n     public String getName() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTM0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438539348", "bodyText": "Licence header missing", "author": "tharindu1st", "createdAt": "2020-06-11T04:42:59Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;", "originalCommit": "c36324a3c2472accfa6373e978630a996bd9b44a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxODk5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438718995", "bodyText": "Fixed", "author": "1akshitha", "createdAt": "2020-06-11T11:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzOTM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\ndeleted file mode 100644\nindex db64773bb32..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\n+++ /dev/null\n\n@@ -1,159 +0,0 @@\n-package org.wso2.carbon.apimgt.gateway;\n-\n-import com.google.gson.Gson;\n-import org.apache.axis2.AxisFault;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n- */\n-public class InMemoryAPIDeployer {\n-\n-    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n-    APIGatewayAdmin apiGatewayAdmin;\n-    ArtifactRetriever artifactRetriever;\n-    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-\n-    public InMemoryAPIDeployer() {\n-\n-        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n-        this.apiGatewayAdmin = new APIGatewayAdmin();\n-        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n-                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n-     */\n-    public boolean deployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n-     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n-     * false\n-     */\n-    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n-                        String label = it.next();\n-                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n-                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n-                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n-                            GatewayAPIDTO gatewayAPIDTO = null;\n-                            try {\n-                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n-                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n-                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                            } catch (AxisFault axisFault) {\n-                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                } catch (ArtifactSynchronizerException e ) {\n-                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n-     */\n-    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever\n-                            .retrieveArtifact(apiId, gatewayLabel,\n-                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Retrieve artifacts from the storage\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return DTO Object that contains the information and artifacts of the API for the given label\n-     */\n-    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n-\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                } catch (ArtifactSynchronizerException e) {\n-                    log.error(\"Error retrieving artifacts of \" + apiId + \" from storage\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return gatewayAPIDTO;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NDg4NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438664884", "bodyText": "while(it.hasnext())", "author": "tharindu1st", "createdAt": "2020-06-11T09:39:18Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NzMzMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438747332", "bodyText": "1cde7b5", "author": "Sarangan0219", "createdAt": "2020-06-11T12:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NDg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\ndeleted file mode 100644\nindex db64773bb32..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\n+++ /dev/null\n\n@@ -1,159 +0,0 @@\n-package org.wso2.carbon.apimgt.gateway;\n-\n-import com.google.gson.Gson;\n-import org.apache.axis2.AxisFault;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n- */\n-public class InMemoryAPIDeployer {\n-\n-    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n-    APIGatewayAdmin apiGatewayAdmin;\n-    ArtifactRetriever artifactRetriever;\n-    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-\n-    public InMemoryAPIDeployer() {\n-\n-        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n-        this.apiGatewayAdmin = new APIGatewayAdmin();\n-        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n-                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n-     */\n-    public boolean deployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n-     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n-     * false\n-     */\n-    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n-                        String label = it.next();\n-                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n-                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n-                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n-                            GatewayAPIDTO gatewayAPIDTO = null;\n-                            try {\n-                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n-                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n-                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                            } catch (AxisFault axisFault) {\n-                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                } catch (ArtifactSynchronizerException e ) {\n-                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n-     */\n-    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever\n-                            .retrieveArtifact(apiId, gatewayLabel,\n-                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Retrieve artifacts from the storage\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return DTO Object that contains the information and artifacts of the API for the given label\n-     */\n-    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n-\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                } catch (ArtifactSynchronizerException e) {\n-                    log.error(\"Error retrieving artifacts of \" + apiId + \" from storage\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return gatewayAPIDTO;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NTE5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438665190", "bodyText": "null check for gatewayRuntimeArtifacts", "author": "tharindu1st", "createdAt": "2020-06-11T09:39:50Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjEzNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722136", "bodyText": "Fixed", "author": "1akshitha", "createdAt": "2020-06-11T11:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\ndeleted file mode 100644\nindex db64773bb32..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\n+++ /dev/null\n\n@@ -1,159 +0,0 @@\n-package org.wso2.carbon.apimgt.gateway;\n-\n-import com.google.gson.Gson;\n-import org.apache.axis2.AxisFault;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n- */\n-public class InMemoryAPIDeployer {\n-\n-    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n-    APIGatewayAdmin apiGatewayAdmin;\n-    ArtifactRetriever artifactRetriever;\n-    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-\n-    public InMemoryAPIDeployer() {\n-\n-        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n-        this.apiGatewayAdmin = new APIGatewayAdmin();\n-        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n-                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n-     */\n-    public boolean deployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n-     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n-     * false\n-     */\n-    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n-                        String label = it.next();\n-                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n-                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n-                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n-                            GatewayAPIDTO gatewayAPIDTO = null;\n-                            try {\n-                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n-                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n-                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                            } catch (AxisFault axisFault) {\n-                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                } catch (ArtifactSynchronizerException e ) {\n-                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n-     */\n-    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever\n-                            .retrieveArtifact(apiId, gatewayLabel,\n-                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Retrieve artifacts from the storage\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return DTO Object that contains the information and artifacts of the API for the given label\n-     */\n-    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n-\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                } catch (ArtifactSynchronizerException e) {\n-                    log.error(\"Error retrieving artifacts of \" + apiId + \" from storage\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return gatewayAPIDTO;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438672524", "bodyText": "For undeploy, Do we need to retrieve any info", "author": "tharindu1st", "createdAt": "2020-06-11T09:53:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjQzNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722435", "bodyText": "Retrieving the DTO file which has details about removing sequences,localentries etc.", "author": "1akshitha", "createdAt": "2020-06-11T11:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0NjQ1Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438746453", "bodyText": "ok", "author": "tharindu1st", "createdAt": "2020-06-11T12:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\ndeleted file mode 100644\nindex db64773bb32..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\n+++ /dev/null\n\n@@ -1,159 +0,0 @@\n-package org.wso2.carbon.apimgt.gateway;\n-\n-import com.google.gson.Gson;\n-import org.apache.axis2.AxisFault;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n- */\n-public class InMemoryAPIDeployer {\n-\n-    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n-    APIGatewayAdmin apiGatewayAdmin;\n-    ArtifactRetriever artifactRetriever;\n-    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-\n-    public InMemoryAPIDeployer() {\n-\n-        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n-        this.apiGatewayAdmin = new APIGatewayAdmin();\n-        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n-                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n-     */\n-    public boolean deployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n-     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n-     * false\n-     */\n-    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n-                        String label = it.next();\n-                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n-                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n-                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n-                            GatewayAPIDTO gatewayAPIDTO = null;\n-                            try {\n-                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n-                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n-                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                            } catch (AxisFault axisFault) {\n-                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                } catch (ArtifactSynchronizerException e ) {\n-                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n-     */\n-    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever\n-                            .retrieveArtifact(apiId, gatewayLabel,\n-                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Retrieve artifacts from the storage\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return DTO Object that contains the information and artifacts of the API for the given label\n-     */\n-    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n-\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                } catch (ArtifactSynchronizerException e) {\n-                    log.error(\"Error retrieving artifacts of \" + apiId + \" from storage\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return gatewayAPIDTO;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3MjkxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438672910", "bodyText": "null check", "author": "tharindu1st", "createdAt": "2020-06-11T09:54:01Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.wso2.carbon.apimgt.gateway;\n+\n+import com.google.gson.Gson;\n+import org.apache.axis2.AxisFault;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n+import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n+ */\n+public class InMemoryAPIDeployer {\n+\n+    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n+    APIGatewayAdmin apiGatewayAdmin;\n+    ArtifactRetriever artifactRetriever;\n+    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n+\n+    public InMemoryAPIDeployer() {\n+\n+        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n+        this.apiGatewayAdmin = new APIGatewayAdmin();\n+        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n+                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n+     */\n+    public boolean deployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Deploy an API in the gateway using the deployAPI method in gateway admin\n+     *\n+     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n+     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n+     * false\n+     */\n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    return true;\n+                } catch (ArtifactSynchronizerException e ) {\n+                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n+     */\n+    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n+                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever\n+                            .retrieveArtifact(apiId, gatewayLabel,\n+                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n+                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n+                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n+                    return true;\n+                } catch (AxisFault | ArtifactSynchronizerException e) {\n+                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n+                }\n+            } else {\n+                log.error(\"Artifact retriever not found\");\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Retrieve artifacts from the storage\n+     *\n+     * @param apiId        - UUID of the API\n+     * @param gatewayLabel - Label of the Gateway\n+     * @return DTO Object that contains the information and artifacts of the API for the given label\n+     */\n+    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n+\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n+                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n+                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\ndeleted file mode 100644\nindex db64773bb32..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java\n+++ /dev/null\n\n@@ -1,159 +0,0 @@\n-package org.wso2.carbon.apimgt.gateway;\n-\n-import com.google.gson.Gson;\n-import org.apache.axis2.AxisFault;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.gateway.service.APIGatewayAdmin;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.dto.GatewayArtifactSynchronizerProperties;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.ArtifactRetriever;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.gateway.internal.ServiceReferenceHolder;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * This class contains the methods used to retrieve artifacts from a storage and deploy and undeploy the API in gateway\n- */\n-public class InMemoryAPIDeployer {\n-\n-    private static Log log = LogFactory.getLog(InMemoryAPIDeployer.class);\n-    APIGatewayAdmin apiGatewayAdmin;\n-    ArtifactRetriever artifactRetriever;\n-    GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-\n-    public InMemoryAPIDeployer() {\n-\n-        this.artifactRetriever = ServiceReferenceHolder.getInstance().getArtifactRetriever();\n-        this.apiGatewayAdmin = new APIGatewayAdmin();\n-        this.gatewayArtifactSynchronizerProperties = ServiceReferenceHolder\n-                .getInstance().getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully deployed without any error. else false\n-     */\n-    public boolean deployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error deploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Deploy an API in the gateway using the deployAPI method in gateway admin\n-     *\n-     * @param assignedGatewayLabels - The labels which the gateway subscribed to\n-     * @return True if all API artifacts retrieved from the storage and successfully deployed without any error. else\n-     * false\n-     */\n-    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n-                        String label = it.next();\n-                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n-                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n-                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n-                            GatewayAPIDTO gatewayAPIDTO = null;\n-                            try {\n-                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n-                                log.info(\"Deploying synapse artifacts of \" + gatewayAPIDTO.getName());\n-                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n-                            } catch (AxisFault axisFault) {\n-                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");\n-                                continue;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                } catch (ArtifactSynchronizerException e ) {\n-                    log.error(\"Error  deploying APIs to the Gateway \" + e );\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * UnDeploy an API in the gateway using the uneployAPI method in gateway admin\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return True if API artifact retrieved from the storage and successfully undeployed without any error. else false\n-     */\n-    public boolean unDeployAPI(String apiId, String gatewayLabel) {\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled() &&\n-                gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever\n-                            .retrieveArtifact(apiId, gatewayLabel,\n-                                    APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_REMOVE);\n-                    GatewayAPIDTO gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                    apiGatewayAdmin.unDeployAPI(gatewayAPIDTO);\n-                    return true;\n-                } catch (AxisFault | ArtifactSynchronizerException e) {\n-                    log.error(\"Error undeploying \" + apiId + \" in Gateway\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Retrieve artifacts from the storage\n-     *\n-     * @param apiId        - UUID of the API\n-     * @param gatewayLabel - Label of the Gateway\n-     * @return DTO Object that contains the information and artifacts of the API for the given label\n-     */\n-    public GatewayAPIDTO getAPIArtifact(String apiId, String gatewayLabel) {\n-\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        if (gatewayArtifactSynchronizerProperties.getGatewayLabels().contains(gatewayLabel)) {\n-            if (artifactRetriever != null) {\n-                try {\n-                    String gatewayRuntimeArtifact = artifactRetriever.retrieveArtifact(apiId, gatewayLabel,\n-                            APIConstants.GatewayArtifactSynchronizer.GATEWAY_INSTRUCTION_PUBLISH);\n-                    gatewayAPIDTO = new Gson().fromJson(gatewayRuntimeArtifact, GatewayAPIDTO.class);\n-                } catch (ArtifactSynchronizerException e) {\n-                    log.error(\"Error retrieving artifacts of \" + apiId + \" from storage\", e);\n-                }\n-            } else {\n-                log.error(\"Artifact retriever not found\");\n-            }\n-        }\n-        return gatewayAPIDTO;\n-    }\n-\n-}\n"}}, {"oid": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "url": "https://github.com/wso2/carbon-apimgt/commit/d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "message": "Add interfaces and default implementation for artifact synchronizer\n\nGateway artifact synchronizer will have two base extensions to\npublish artifacts and to retrieve artifacts. Default implementation is\nto publish and retrieve from a database.", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "e4e2aac6cea245338051b7a78f8dc1d43fd570a3", "url": "https://github.com/wso2/carbon-apimgt/commit/e4e2aac6cea245338051b7a78f8dc1d43fd570a3", "message": "Serialized the classes to store as a blob", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "ab230bfdfc0d3bc3ca04fbe6acba87b0abbc9dbf", "url": "https://github.com/wso2/carbon-apimgt/commit/ab230bfdfc0d3bc3ca04fbe6acba87b0abbc9dbf", "message": "Added configurations for gateway artifact synchronizer", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "fbd081f232dc8ae337f60f24abe3832816cf4212", "url": "https://github.com/wso2/carbon-apimgt/commit/fbd081f232dc8ae337f60f24abe3832816cf4212", "message": "Implemented the db publisher and retriever for gateway artifact synchronizer", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "40c0abed7d6d9ad66e424093b57723259e77bb8e", "url": "https://github.com/wso2/carbon-apimgt/commit/40c0abed7d6d9ad66e424093b57723259e77bb8e", "message": "Exposed default implementation of synchronizer as a service to allow additional extensions", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "71d6e399579fbe69faac76667e8859844240c961", "url": "https://github.com/wso2/carbon-apimgt/commit/71d6e399579fbe69faac76667e8859844240c961", "message": "Added a new rest API to gateway to mannually deply APIs", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "8e7199395749908b302b3fe67ea057e56223c696", "url": "https://github.com/wso2/carbon-apimgt/commit/8e7199395749908b302b3fe67ea057e56223c696", "message": "Changed the API deployment steps", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "e0b9225e438ef17f29d634a542c4697deb2793d2", "url": "https://github.com/wso2/carbon-apimgt/commit/e0b9225e438ef17f29d634a542c4697deb2793d2", "message": "Added a new config to read gateway label", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "3c2d6ffbf63aef1b86f0ad44fd4c6befb22be1e2", "url": "https://github.com/wso2/carbon-apimgt/commit/3c2d6ffbf63aef1b86f0ad44fd4c6befb22be1e2", "message": "Read label from additional properties", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "e1ff985bb7508dbc14cdbc1aa37d496eccfde1e6", "url": "https://github.com/wso2/carbon-apimgt/commit/e1ff985bb7508dbc14cdbc1aa37d496eccfde1e6", "message": "Minor fixes", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "f80f6ec5084c7522667bd07ef50dc39eecef5c8b", "url": "https://github.com/wso2/carbon-apimgt/commit/f80f6ec5084c7522667bd07ef50dc39eecef5c8b", "message": "Bumped gateway rest API version", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "2ad31925420e529796486bedcc30674390efc575", "url": "https://github.com/wso2/carbon-apimgt/commit/2ad31925420e529796486bedcc30674390efc575", "message": "Minor changes", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "fd92a970f22e4aa8409abae36fd3c1729ea08c1a", "url": "https://github.com/wso2/carbon-apimgt/commit/fd92a970f22e4aa8409abae36fd3c1729ea08c1a", "message": "Updated the interfaces with more functionalities", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "0429cc4fbda9649dc1bd68ae7a6def7373076847", "url": "https://github.com/wso2/carbon-apimgt/commit/0429cc4fbda9649dc1bd68ae7a6def7373076847", "message": "Added event notifier to publish and receive Gateway Publish event", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "3821892f676195dc7bb305229d0b9a06ecce9d93", "url": "https://github.com/wso2/carbon-apimgt/commit/3821892f676195dc7bb305229d0b9a06ecce9d93", "message": "Exceptions for Gateway Artifact synchronizer publisher and retriever extensions", "committedDate": "2020-06-11T11:00:42Z", "type": "commit"}, {"oid": "153387abded97189ea48e1ebd41731edf450ecca", "url": "https://github.com/wso2/carbon-apimgt/commit/153387abded97189ea48e1ebd41731edf450ecca", "message": "Implemented update and delete in publisher extension", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "1b550b2b9b25dcfd6b32c47a0588cd42182cd218", "url": "https://github.com/wso2/carbon-apimgt/commit/1b550b2b9b25dcfd6b32c47a0588cd42182cd218", "message": "Added support to filter APIs by gateway Label", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "30a18a39c99a55ef9cf01db195254e894f26a9e9", "url": "https://github.com/wso2/carbon-apimgt/commit/30a18a39c99a55ef9cf01db195254e894f26a9e9", "message": "Added support to update API and delete API", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "10db48f3608a7174fd867c5f884fa90b60e185f3", "url": "https://github.com/wso2/carbon-apimgt/commit/10db48f3608a7174fd867c5f884fa90b60e185f3", "message": "Moved the deployAPI methods to gateway component", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "905e5720bb4e0f76bf8efd543bdf38908e8106d9", "url": "https://github.com/wso2/carbon-apimgt/commit/905e5720bb4e0f76bf8efd543bdf38908e8106d9", "message": "Added a new method to get the extension type", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "928740efe30788404407b27b878019695626318f", "url": "https://github.com/wso2/carbon-apimgt/commit/928740efe30788404407b27b878019695626318f", "message": "Added a new configuration to specify the synchronizer type", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "7f89c2af711ebbed2d5e425d7fbeb0ffa6662cd3", "url": "https://github.com/wso2/carbon-apimgt/commit/7f89c2af711ebbed2d5e425d7fbeb0ffa6662cd3", "message": "Added support to subscribe to more then one label for a gateway", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "0694cd2ffdd85d5445606583f3f23754a5d37ebb", "url": "https://github.com/wso2/carbon-apimgt/commit/0694cd2ffdd85d5445606583f3f23754a5d37ebb", "message": "Changed DB Schema", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "729320d4119afa8e39619c9d089c599f3d94f4fc", "url": "https://github.com/wso2/carbon-apimgt/commit/729320d4119afa8e39619c9d089c599f3d94f4fc", "message": "Added the config mapping of artifact synchronizer", "committedDate": "2020-06-11T11:00:43Z", "type": "commit"}, {"oid": "e20f692c0fcabb5c66818a275aa71a8730ca9c4a", "url": "https://github.com/wso2/carbon-apimgt/commit/e20f692c0fcabb5c66818a275aa71a8730ca9c4a", "message": "Added support to publish to Gateways defined with labels", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "6d3e63f2deb9dfab43424adea5028e2421a234f9", "url": "https://github.com/wso2/carbon-apimgt/commit/6d3e63f2deb9dfab43424adea5028e2421a234f9", "message": "Added support to remove APIs from gateways defined by labels", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "09f32377f8fa7904d12ad68d439e94d12a991dcc", "url": "https://github.com/wso2/carbon-apimgt/commit/09f32377f8fa7904d12ad68d439e94d12a991dcc", "message": "Removed unnecessory envrionement name", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "b61c189d296c56cc1e9f75fb61a6292a54b6074e", "url": "https://github.com/wso2/carbon-apimgt/commit/b61c189d296c56cc1e9f75fb61a6292a54b6074e", "message": "Added support to update labeled environements from publisher", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "578850aa17ba64ebac7c4d41de94b0e93080022a", "url": "https://github.com/wso2/carbon-apimgt/commit/578850aa17ba64ebac7c4d41de94b0e93080022a", "message": "Restructured DB operations", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "0e9b04945ec5a12590a60fd95b319d5d5e8e687b", "url": "https://github.com/wso2/carbon-apimgt/commit/0e9b04945ec5a12590a60fd95b319d5d5e8e687b", "message": "Added default label to all the gateways", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "e4b91dda92af0036c5412822f4d459e5ea269e45", "url": "https://github.com/wso2/carbon-apimgt/commit/e4b91dda92af0036c5412822f4d459e5ea269e45", "message": "Optimized the db operations and added a new field as DTO status", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "e5cba1b17e4cada2d888aa0f1feb8c8bc001cad4", "url": "https://github.com/wso2/carbon-apimgt/commit/e5cba1b17e4cada2d888aa0f1feb8c8bc001cad4", "message": "Bumped gateway rest api component version to apimgt version", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "4ae7d4d40d7680ae2c390be20f04e2236e9f5297", "url": "https://github.com/wso2/carbon-apimgt/commit/4ae7d4d40d7680ae2c390be20f04e2236e9f5297", "message": "Added gateway rest api feature", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "a1881f227986d8d78e885a7488a3318d98490d14", "url": "https://github.com/wso2/carbon-apimgt/commit/a1881f227986d8d78e885a7488a3318d98490d14", "message": "Added artifact synchronizer tables", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "8e5fa5789ada5a0f822beb156d966b2766b7dafd", "url": "https://github.com/wso2/carbon-apimgt/commit/8e5fa5789ada5a0f822beb156d966b2766b7dafd", "message": "Added gateway artifact pulling logic to jms listener\n\nOnce a new event received the gateway lable, it will pull all the artifacts\nrelated to that label from the storage and deploy in the gateway. Same thing\nwith the removing apis", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "05a133724e2563e5f482bb25e193dccde3fad2c0", "url": "https://github.com/wso2/carbon-apimgt/commit/05a133724e2563e5f482bb25e193dccde3fad2c0", "message": "Adding labels to the API object", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "3bdba0922dbb2664c5f8de402f4eb0e7a35e7acd", "url": "https://github.com/wso2/carbon-apimgt/commit/3bdba0922dbb2664c5f8de402f4eb0e7a35e7acd", "message": "Added a missing import", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "f38e57f81a60926ad14a015f3c12322c4374a66f", "url": "https://github.com/wso2/carbon-apimgt/commit/f38e57f81a60926ad14a015f3c12322c4374a66f", "message": "Added gateway rest api", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "e46def6e1a8dc03422c103cd2dd271adb1f3ba3b", "url": "https://github.com/wso2/carbon-apimgt/commit/e46def6e1a8dc03422c103cd2dd271adb1f3ba3b", "message": "Removed deleting the artifacts from storage", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "b62f4f934e566477dbca89cd1387b0fbf3b43359", "url": "https://github.com/wso2/carbon-apimgt/commit/b62f4f934e566477dbca89cd1387b0fbf3b43359", "message": "Added a new method to check whether the api is published in any of the gateways", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "11ee2e720e991c93089bedb1aad1de4bf82a392f", "url": "https://github.com/wso2/carbon-apimgt/commit/11ee2e720e991c93089bedb1aad1de4bf82a392f", "message": "Added support to sync API Products with artifact synchronizer", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "fa15923d66fac0145c922580e2f1c72d02916539", "url": "https://github.com/wso2/carbon-apimgt/commit/fa15923d66fac0145c922580e2f1c72d02916539", "message": "Changed the Default artifact synchronizers to only deploy if they are selected from config", "committedDate": "2020-06-11T11:02:23Z", "type": "commit"}, {"oid": "1d451b768c40089990dbc1b9a18aeb7abe908135", "url": "https://github.com/wso2/carbon-apimgt/commit/1d451b768c40089990dbc1b9a18aeb7abe908135", "message": "Added a new resource to gateway rest api to undeploy apis from  gateway", "committedDate": "2020-06-11T11:02:24Z", "type": "commit"}, {"oid": "2031c3f79e299d578b8846c1a5dbd7a062b952e2", "url": "https://github.com/wso2/carbon-apimgt/commit/2031c3f79e299d578b8846c1a5dbd7a062b952e2", "message": "Added few resources to gateway Reset API", "committedDate": "2020-06-11T11:02:24Z", "type": "commit"}, {"oid": "efe511233bd3cbcb6ecf4975a82c7f410b5c0f82", "url": "https://github.com/wso2/carbon-apimgt/commit/efe511233bd3cbcb6ecf4975a82c7f410b5c0f82", "message": "Removed unused imports", "committedDate": "2020-06-11T11:02:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDQ1OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438674459", "bodyText": "setArtifactRetriever ->addArtifactRetriever", "author": "tharindu1st", "createdAt": "2020-06-11T09:56:57Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -396,5 +406,36 @@ protected void unsetGatewayJWTGenerator(AbstractAPIMgtGatewayJWTGenerator gatewa\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n+\n+    @Reference(\n+            name = \"gateway.artifact.retriever\",\n+            service = ArtifactRetriever.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetArtifactRetriever\")\n+    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjUwNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438722505", "bodyText": "fixed", "author": "1akshitha", "createdAt": "2020-06-11T11:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\nindex 6a53447c08f..2d92c1fffdd 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n\n@@ -406,36 +396,5 @@ public class APIHandlerServiceComponent {\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n-\n-    @Reference(\n-            name = \"gateway.artifact.retriever\",\n-            service = ArtifactRetriever.class,\n-            cardinality = ReferenceCardinality.MULTIPLE,\n-            policy = ReferencePolicy.DYNAMIC,\n-            unbind = \"unsetArtifactRetriever\")\n-    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {\n-\n-        GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n-                ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                        .getGatewayArtifactSynchronizerProperties();\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()\n-                && gatewayArtifactSynchronizerProperties.getRetrieverName().equals(artifactRetriever.getName())) {\n-            ServiceReferenceHolder.getInstance().setArtifactRetriever(artifactRetriever);\n-\n-            try {\n-                ServiceReferenceHolder.getInstance().getArtifactRetriever().init();\n-            } catch (Exception e) {\n-                log.error(\"Error connecting with the Artifact retriever\");\n-                unsetArtifactRetriever(null);\n-            }\n-        }\n-    }\n-\n-    protected void unsetArtifactRetriever(ArtifactRetriever artifactRetriever) {\n-        ServiceReferenceHolder.getInstance().getArtifactRetriever().disconnect();\n-        ServiceReferenceHolder.getInstance().setArtifactRetriever(null);\n-\n-    }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NDk2Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438674963", "bodyText": "unsetArtifactRetriever -> removeArtifactRetriever", "author": "tharindu1st", "createdAt": "2020-06-11T09:57:54Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -396,5 +406,36 @@ protected void unsetGatewayJWTGenerator(AbstractAPIMgtGatewayJWTGenerator gatewa\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n+\n+    @Reference(\n+            name = \"gateway.artifact.retriever\",\n+            service = ArtifactRetriever.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetArtifactRetriever\")\n+    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {\n+\n+        GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n+                ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n+                        .getGatewayArtifactSynchronizerProperties();\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()\n+                && gatewayArtifactSynchronizerProperties.getRetrieverName().equals(artifactRetriever.getName())) {\n+            ServiceReferenceHolder.getInstance().setArtifactRetriever(artifactRetriever);\n+\n+            try {\n+                ServiceReferenceHolder.getInstance().getArtifactRetriever().init();\n+            } catch (Exception e) {\n+                log.error(\"Error connecting with the Artifact retriever\");\n+                unsetArtifactRetriever(null);\n+            }\n+        }\n+    }\n+\n+    protected void unsetArtifactRetriever(ArtifactRetriever artifactRetriever) {", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\nindex 6a53447c08f..2d92c1fffdd 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n\n@@ -406,36 +396,5 @@ public class APIHandlerServiceComponent {\n         ServiceReferenceHolder.getInstance().getApiMgtGatewayJWTGenerator()\n                 .remove(gatewayJWTGenerator.getClass().getName());\n     }\n-\n-    @Reference(\n-            name = \"gateway.artifact.retriever\",\n-            service = ArtifactRetriever.class,\n-            cardinality = ReferenceCardinality.MULTIPLE,\n-            policy = ReferencePolicy.DYNAMIC,\n-            unbind = \"unsetArtifactRetriever\")\n-    protected void setArtifactRetriever(ArtifactRetriever artifactRetriever) {\n-\n-        GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n-                ServiceReferenceHolder.getInstance().getAPIManagerConfiguration()\n-                        .getGatewayArtifactSynchronizerProperties();\n-\n-        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()\n-                && gatewayArtifactSynchronizerProperties.getRetrieverName().equals(artifactRetriever.getName())) {\n-            ServiceReferenceHolder.getInstance().setArtifactRetriever(artifactRetriever);\n-\n-            try {\n-                ServiceReferenceHolder.getInstance().getArtifactRetriever().init();\n-            } catch (Exception e) {\n-                log.error(\"Error connecting with the Artifact retriever\");\n-                unsetArtifactRetriever(null);\n-            }\n-        }\n-    }\n-\n-    protected void unsetArtifactRetriever(ArtifactRetriever artifactRetriever) {\n-        ServiceReferenceHolder.getInstance().getArtifactRetriever().disconnect();\n-        ServiceReferenceHolder.getInstance().setArtifactRetriever(null);\n-\n-    }\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NTM0Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438675346", "bodyText": "move this into serverstartupfinalizer class", "author": "tharindu1st", "createdAt": "2020-06-11T09:58:36Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java", "diffHunk": "@@ -95,6 +98,13 @@ protected void activate(ComponentContext context) {\n             APIManagerConfiguration apiManagerConfiguration =\n                     ServiceReferenceHolder.getInstance().getAPIManagerConfiguration();\n             String gatewayType = apiManagerConfiguration.getFirstProperty(APIConstants.API_GATEWAY_TYPE);\n+            GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n+                    ServiceReferenceHolder.getInstance()\n+                            .getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\nindex 6a53447c08f..2d92c1fffdd 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/internal/APIHandlerServiceComponent.java\n\n@@ -98,13 +95,6 @@ public class APIHandlerServiceComponent {\n             APIManagerConfiguration apiManagerConfiguration =\n                     ServiceReferenceHolder.getInstance().getAPIManagerConfiguration();\n             String gatewayType = apiManagerConfiguration.getFirstProperty(APIConstants.API_GATEWAY_TYPE);\n-            GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties =\n-                    ServiceReferenceHolder.getInstance()\n-                            .getAPIManagerConfiguration().getGatewayArtifactSynchronizerProperties();\n-            if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n-                InMemoryAPIDeployer inMemoryAPIDeployer = new InMemoryAPIDeployer();\n-                inMemoryAPIDeployer.deployAllAPIsAtGatewayStartup(gatewayArtifactSynchronizerProperties.getGatewayLabels());\n-            }\n             if (\"Synapse\".equalsIgnoreCase(gatewayType)) {\n                 // Register Tenant service creator to deploy tenant specific common synapse configurations\n                 TenantServiceCreator listener = new TenantServiceCreator();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3NjI2NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r438676265", "bodyText": "check where log.debug done", "author": "tharindu1st", "createdAt": "2020-06-11T10:00:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java", "diffHunk": "@@ -56,23 +61,23 @@\n \n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n+\n import java.util.*;\n \n public class APIGatewayManager {\n \n-\tprivate static final Log log = LogFactory.getLog(APIGatewayManager.class);\n-\n-\tprivate static APIGatewayManager instance;\n+    private static final Log log = LogFactory.getLog(APIGatewayManager.class);\n+    private boolean debugEnabled = log.isDebugEnabled();", "originalCommit": "5e62769ade21b2544c56949a6d50909d2b06b3de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6f18102009e8ecc677b9bd24262d6da0a5f91b2", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java\nindex e150f610f52..a621013bf91 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIGatewayManager.java\n\n@@ -61,23 +63,23 @@ import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n \n import javax.xml.namespace.QName;\n import javax.xml.stream.XMLStreamException;\n-\n import java.util.*;\n \n public class APIGatewayManager {\n \n-    private static final Log log = LogFactory.getLog(APIGatewayManager.class);\n-    private boolean debugEnabled = log.isDebugEnabled();\n-    private static APIGatewayManager instance;\n+\tprivate static final Log log = LogFactory.getLog(APIGatewayManager.class);\n+\n+\tprivate static APIGatewayManager instance;\n \n     private Map<String, Environment> environments;\n     private RecommendationEnvironment recommendationEnvironment;\n-    private GatewayArtifactSynchronizerProperties gatewayArtifactSynchronizerProperties;\n-    private ArtifactSaver artifactSaver;\n-    private boolean saveArtifactsToStorage = false;\n+\n+\tprivate boolean debugEnabled = log.isDebugEnabled();\n \n     private final String ENDPOINT_PRODUCTION = \"_PRODUCTION_\";\n+\n     private final String ENDPOINT_SANDBOX = \"_SANDBOX_\";\n+\n     private static final String PRODUCT_PREFIX = \"prod\";\n     private static final String PRODUCT_VERSION = \"1.0.0\";\n \n"}}, {"oid": "bf4ab081f4b27bb2e2751e10dbbd5a8e2347e7a9", "url": "https://github.com/wso2/carbon-apimgt/commit/bf4ab081f4b27bb2e2751e10dbbd5a8e2347e7a9", "message": "Formatted the code", "committedDate": "2020-06-11T11:04:51Z", "type": "commit"}, {"oid": "ff28a15b702b366c6e73cb828317ee0cd40494d3", "url": "https://github.com/wso2/carbon-apimgt/commit/ff28a15b702b366c6e73cb828317ee0cd40494d3", "message": "Updated the interface to reduce the complexity and increase readability", "committedDate": "2020-06-11T11:04:51Z", "type": "commit"}, {"oid": "8220100a7947dc2da69e41f4dfc2e265a45a410c", "url": "https://github.com/wso2/carbon-apimgt/commit/8220100a7947dc2da69e41f4dfc2e265a45a410c", "message": "Improved with comments, meaningful variable names", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "b0106b29c82e45cc4b486764aec9d720780ddebe", "url": "https://github.com/wso2/carbon-apimgt/commit/b0106b29c82e45cc4b486764aec9d720780ddebe", "message": "Added new configurations", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "670179614b01867305f09f29cdbdb1452bb47129", "url": "https://github.com/wso2/carbon-apimgt/commit/670179614b01867305f09f29cdbdb1452bb47129", "message": "Changed DB column names", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "7bb1e548172ce9d19e1c7d9b9c64465f82db0021", "url": "https://github.com/wso2/carbon-apimgt/commit/7bb1e548172ce9d19e1c7d9b9c64465f82db0021", "message": "Added a check for the gateway instruction when retrieving artifact", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "7d5244889ecf84684f7f2c900886857f624cc758", "url": "https://github.com/wso2/carbon-apimgt/commit/7d5244889ecf84684f7f2c900886857f624cc758", "message": "Changed variable names for better meaning", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "94a0801e26ab22f622cf440cad7a6e6a896095a3", "url": "https://github.com/wso2/carbon-apimgt/commit/94a0801e26ab22f622cf440cad7a6e6a896095a3", "message": "Added a chack for nullity in artifact saver object", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "0d6666d7a3e7b6eafb614da638401876f1f84c77", "url": "https://github.com/wso2/carbon-apimgt/commit/0d6666d7a3e7b6eafb614da638401876f1f84c77", "message": "Added a new config", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "6383363e86f907118804e12368398b9861529e99", "url": "https://github.com/wso2/carbon-apimgt/commit/6383363e86f907118804e12368398b9861529e99", "message": "Changed configurations", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "3a25c6e2a9ffdd42acbdb4c5e8004799cf200e86", "url": "https://github.com/wso2/carbon-apimgt/commit/3a25c6e2a9ffdd42acbdb4c5e8004799cf200e86", "message": "Fix error in config mapping", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "03ac898d6f5bc97ff117386a103073cb39fdab76", "url": "https://github.com/wso2/carbon-apimgt/commit/03ac898d6f5bc97ff117386a103073cb39fdab76", "message": "Remove decoding the byte stream", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "418ad6e1a9e363d65ff896906e0c8479f1ba12e7", "url": "https://github.com/wso2/carbon-apimgt/commit/418ad6e1a9e363d65ff896906e0c8479f1ba12e7", "message": "Switched publish and remove gateways order", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "ae308b20c4132cc03bfefd4afe1812e8dea87a8c", "url": "https://github.com/wso2/carbon-apimgt/commit/ae308b20c4132cc03bfefd4afe1812e8dea87a8c", "message": "Updated gatewayExist check to work with labels", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "c9a85d7cac9219e967db29a44a87bf054fba5471", "url": "https://github.com/wso2/carbon-apimgt/commit/c9a85d7cac9219e967db29a44a87bf054fba5471", "message": "Fixes for Artifact synchronizer\n\n1.Removed GatewayAPIDTO from the interface\n2.Removed unnecessary methods in the interface and optimised db operations.\n3.Changed event notifications to send only one event with all the labels of the API", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "523ccfe728c87f61cdb7b73e250e57b5042726f5", "url": "https://github.com/wso2/carbon-apimgt/commit/523ccfe728c87f61cdb7b73e250e57b5042726f5", "message": "Changed the version", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "59b6388bd9b98a8b6a4dfac2a172f688febb917e", "url": "https://github.com/wso2/carbon-apimgt/commit/59b6388bd9b98a8b6a4dfac2a172f688febb917e", "message": "Adding a new method to retrieve all api artifacts for a gateway", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "d6c765a9223d6299ba14fed4fbe4681b5c8a0c7e", "url": "https://github.com/wso2/carbon-apimgt/commit/d6c765a9223d6299ba14fed4fbe4681b5c8a0c7e", "message": "Add database entries for retrieving", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e", "url": "https://github.com/wso2/carbon-apimgt/commit/15d07ef04f63ca9ff5e82afebd014f3c43bf472e", "message": "Add server startup", "committedDate": "2020-06-11T11:04:52Z", "type": "commit"}, {"oid": "0fc115988ffe96c38028af0e8ea9cca4c002a6f4", "url": "https://github.com/wso2/carbon-apimgt/commit/0fc115988ffe96c38028af0e8ea9cca4c002a6f4", "message": "fix test cases of publishingToGateway", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "ab6bd2efc3850e87fb93781a3f167b35d30bbb4b", "url": "https://github.com/wso2/carbon-apimgt/commit/ab6bd2efc3850e87fb93781a3f167b35d30bbb4b", "message": "Correct DB opeartion", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "08c1481d3cb79e9e760681de349644360be9f10d", "url": "https://github.com/wso2/carbon-apimgt/commit/08c1481d3cb79e9e760681de349644360be9f10d", "message": "Add method descriptions", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "864254a4b28348d88853dae918e5d91d14f69baf", "url": "https://github.com/wso2/carbon-apimgt/commit/864254a4b28348d88853dae918e5d91d14f69baf", "message": "Remove loggings", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "b87691087d7808a2ccc9a624d531b3f0b81bec9f", "url": "https://github.com/wso2/carbon-apimgt/commit/b87691087d7808a2ccc9a624d531b3f0b81bec9f", "message": "Rename method parameter in description", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "48ee8e7d4c1e2ba3e72fb1a6c332146f242de599", "url": "https://github.com/wso2/carbon-apimgt/commit/48ee8e7d4c1e2ba3e72fb1a6c332146f242de599", "message": "fix test cases", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "6a4602c813b1977161f5c814ba7862f57ef09096", "url": "https://github.com/wso2/carbon-apimgt/commit/6a4602c813b1977161f5c814ba7862f57ef09096", "message": "remove white spaces", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "3a901edd0a6ecc4c681ea0b95a00319324592328", "url": "https://github.com/wso2/carbon-apimgt/commit/3a901edd0a6ecc4c681ea0b95a00319324592328", "message": "Fix APIManagerComponent test case", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "cb8f08b923ae5bfee2a8f7bbad42b1094013abb1", "url": "https://github.com/wso2/carbon-apimgt/commit/cb8f08b923ae5bfee2a8f7bbad42b1094013abb1", "message": "fix test cases", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "e101782e5f2cf8144fb4425c458540c70a0611f1", "url": "https://github.com/wso2/carbon-apimgt/commit/e101782e5f2cf8144fb4425c458540c70a0611f1", "message": "fix test cases", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "dfe6799365d65a9031c18380de74b5b00f039461", "url": "https://github.com/wso2/carbon-apimgt/commit/dfe6799365d65a9031c18380de74b5b00f039461", "message": "check validation for the availability of published gateway labels", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "28fd1c82a9bdfd63858e0ca11eb79c1fb517b765", "url": "https://github.com/wso2/carbon-apimgt/commit/28fd1c82a9bdfd63858e0ca11eb79c1fb517b765", "message": "check validation for the availability of removed gateway labels", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "42640c6c5922f67b801c3f3e813201f6b6cebd72", "url": "https://github.com/wso2/carbon-apimgt/commit/42640c6c5922f67b801c3f3e813201f6b6cebd72", "message": "resolve review comments", "committedDate": "2020-06-11T11:04:53Z", "type": "commit"}, {"oid": "e1d4047e613150cc092ebe298d600c5078608d45", "url": "https://github.com/wso2/carbon-apimgt/commit/e1d4047e613150cc092ebe298d600c5078608d45", "message": "Added license header", "committedDate": "2020-06-11T11:10:03Z", "type": "commit"}, {"oid": "6195cbef3380ca4e1f0145e3a32c85ba9bb005f1", "url": "https://github.com/wso2/carbon-apimgt/commit/6195cbef3380ca4e1f0145e3a32c85ba9bb005f1", "message": "Added missing import", "committedDate": "2020-06-11T11:11:00Z", "type": "commit"}, {"oid": "329e8a00128db7f8438ae77e8c53a8fa83395afe", "url": "https://github.com/wso2/carbon-apimgt/commit/329e8a00128db7f8438ae77e8c53a8fa83395afe", "message": "Removed gatewayLabel from DTO", "committedDate": "2020-06-11T11:11:09Z", "type": "commit"}, {"oid": "7da40b64520947ff0ae61b2496f0ca7d106f5ef6", "url": "https://github.com/wso2/carbon-apimgt/commit/7da40b64520947ff0ae61b2496f0ca7d106f5ef6", "message": "Addressed review comments", "committedDate": "2020-06-11T11:27:14Z", "type": "commit"}, {"oid": "531553920fc17d9cc1ef611fe7807d37279cb438", "url": "https://github.com/wso2/carbon-apimgt/commit/531553920fc17d9cc1ef611fe7807d37279cb438", "message": "Bumped version", "committedDate": "2020-06-11T11:27:33Z", "type": "commit"}, {"oid": "531553920fc17d9cc1ef611fe7807d37279cb438", "url": "https://github.com/wso2/carbon-apimgt/commit/531553920fc17d9cc1ef611fe7807d37279cb438", "message": "Bumped version", "committedDate": "2020-06-11T11:27:33Z", "type": "forcePushed"}, {"oid": "ea9363b58e2c1fc461b898294bd6c4ba8a5b1392", "url": "https://github.com/wso2/carbon-apimgt/commit/ea9363b58e2c1fc461b898294bd6c4ba8a5b1392", "message": "Changed osgi service methods to add and remove retriever and saver", "committedDate": "2020-06-11T11:37:29Z", "type": "commit"}, {"oid": "6bf26e46826318a05870f51553f515f056436768", "url": "https://github.com/wso2/carbon-apimgt/commit/6bf26e46826318a05870f51553f515f056436768", "message": "address review comments", "committedDate": "2020-06-11T11:55:22Z", "type": "commit"}, {"oid": "1cde7b54e13cbebc3908a4211c2c596bd0d29929", "url": "https://github.com/wso2/carbon-apimgt/commit/1cde7b54e13cbebc3908a4211c2c596bd0d29929", "message": "Merge pull request #5 from Sarangan0219/artifact-alpha\n\naddress review comments", "committedDate": "2020-06-11T12:29:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzMzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063337", "bodyText": "We don't use '-' (dash) as a separator", "author": "rmsamitha", "createdAt": "2020-12-22T04:37:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/ArtifactRetriever.java", "diffHunk": "@@ -26,6 +28,16 @@\n     String retrieveArtifact(String APIId, String gatewayLabel, String gatewayInstruction)\n             throws ArtifactSynchronizerException;\n \n+    /**\n+     * This method is used to retrieve data from the storage\n+     *\n+     * @param gatewayLabel       - Label subscribed by the gateway", "originalCommit": "59b6388bd9b98a8b6a4dfac2a172f688febb917e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTQ1Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101452", "bodyText": "ad587f2", "author": "Sarangan0219", "createdAt": "2021-01-05T18:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzMzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzQ4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063480", "bodyText": "No need of using log.isDebugEnabled() if no string concatenation takes place", "author": "rmsamitha", "createdAt": "2020-12-22T04:37:44Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/gatewayartifactsynchronizer/DBRetriever.java", "diffHunk": "@@ -40,6 +42,25 @@ public String retrieveArtifact(String APIId, String gatewayLabel, String gateway\n         return gatewayRuntimeArtifacts;\n     }\n \n+    @Override\n+    public List<String> retrieveAllArtifacts(String label) throws ArtifactSynchronizerException {\n+        List<String> gatewayRuntimeArtifactsArray = new ArrayList<>();\n+        try {\n+            List<ByteArrayInputStream> baip = apiMgtDAO.getAllGatewayPublishedAPIArtifacts(label);\n+            for (ByteArrayInputStream byteStream :baip){\n+                byte[] bytes = ByteStreams.toByteArray(byteStream);\n+                String  gatewayRuntimeArtifacts = new String(bytes);\n+                gatewayRuntimeArtifactsArray.add(gatewayRuntimeArtifacts);\n+            }\n+            if (log.isDebugEnabled()){", "originalCommit": "59b6388bd9b98a8b6a4dfac2a172f688febb917e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5ODMxMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552098312", "bodyText": "Removed in the latest version", "author": "Sarangan0219", "createdAt": "2021-01-05T17:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzQ4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzgyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547063827", "bodyText": "Add java doc comments for methods", "author": "rmsamitha", "createdAt": "2020-12-22T04:39:09Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15527,6 +15527,26 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n         return baip;\n     }\n \n+    public List<ByteArrayInputStream> getAllGatewayPublishedAPIArtifacts(String label) throws APIManagementException {", "originalCommit": "d6c765a9223d6299ba14fed4fbe4681b5c8a0c7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5ODU4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552098583", "bodyText": "Removed in the latest Version", "author": "Sarangan0219", "createdAt": "2021-01-05T17:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MzgyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDE0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547064140", "bodyText": "Need space after \"deploying\". i.e. \"deploying \"", "author": "rmsamitha", "createdAt": "2020-12-22T04:40:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "originalCommit": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTQyMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101422", "bodyText": "ad587f2", "author": "Sarangan0219", "createdAt": "2021-01-05T18:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDE0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDU5Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547064592", "bodyText": "The error stack trace is swallowed here. Don't we need to log it, since we do not throw the error?", "author": "rmsamitha", "createdAt": "2020-12-22T04:42:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/InMemoryAPIDeployer.java", "diffHunk": "@@ -58,6 +62,37 @@ public boolean deployAPI(String apiId, String gatewayLabel) {\n         return false;\n     }\n \n+    public boolean deployAllAPIsAtGatewayStartup (Set<String> assignedGatewayLabels) {\n+\n+        if (gatewayArtifactSynchronizerProperties.isRetrieveFromStorageEnabled()) {\n+            if (artifactRetriever != null) {\n+                try {\n+                    for (Iterator<String> it = assignedGatewayLabels.iterator(); it.hasNext();) {\n+                        String label = it.next();\n+                        List<String> gatewayRuntimeArtifacts = ServiceReferenceHolder\n+                                .getInstance().getArtifactRetriever().retrieveAllArtifacts(label);\n+                        for (String APIruntimeArtifact :gatewayRuntimeArtifacts){\n+                            GatewayAPIDTO gatewayAPIDTO = null;\n+                            try {\n+                                gatewayAPIDTO = new Gson().fromJson(APIruntimeArtifact, GatewayAPIDTO.class);\n+                                apiGatewayAdmin.deployAPI(gatewayAPIDTO);\n+                            } catch (AxisFault axisFault) {\n+                                log.error(\"Error in deploying\" + gatewayAPIDTO.getName()+ \" to the Gateway \");", "originalCommit": "15d07ef04f63ca9ff5e82afebd014f3c43bf472e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTM5MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101391", "bodyText": "ad587f2", "author": "Sarangan0219", "createdAt": "2021-01-05T18:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NDU5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzA5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067090", "bodyText": "Adding a - (dash) is not correct. This will duplicate dash when the java doc is auto rendered ad displayed in the IDE when hovered on method call.", "author": "rmsamitha", "createdAt": "2020-12-22T04:53:34Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java", "diffHunk": "@@ -15530,7 +15530,7 @@ public ByteArrayInputStream getGatewayPublishedAPIArtifacts(String APIId, String\n     /**\n      * Retrieve the list of blobs of the APIs for a given label\n      *\n-     * @param gatewayLabel - Gateway label of the API\n+     * @param label - Gateway label of the API", "originalCommit": "b87691087d7808a2ccc9a624d531b3f0b81bec9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5OTE0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552099141", "bodyText": "Removed in the latest version", "author": "Sarangan0219", "createdAt": "2021-01-05T18:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzA5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzQyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067420", "bodyText": "Additional space at the end after prodEnvironmentName ?", "author": "rmsamitha", "createdAt": "2020-12-22T04:54:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIGatewayManagerTest.java", "diffHunk": "@@ -617,7 +624,7 @@ public void testRemovingRESTAPIWithOutSequenceFromGateway() throws AxisFault {\n         Map<String, String> failedEnvironmentsMap = gatewayManager\n                 .publishToGateway(api, apiTemplateBuilder, tenantDomain);\n         Assert.assertEquals(failedEnvironmentsMap.size(), 1);\n-        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName));\n+        Assert.assertTrue(failedEnvironmentsMap.keySet().contains(prodEnvironmentName ));", "originalCommit": "48ee8e7d4c1e2ba3e72fb1a6c332146f242de599", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMTM0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552101344", "bodyText": "ad587f2", "author": "Sarangan0219", "createdAt": "2021-01-05T18:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzQyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzU4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r547067589", "bodyText": "Remove additional new lines", "author": "rmsamitha", "createdAt": "2020-12-22T04:55:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1406,7 +1406,13 @@ public void updateAPI(API api) throws APIManagementException, FaultGatewaysExcep\n \n                             //updated api contain what environments want to add\n                             Set<String> environmentsToPublish = new HashSet<String>(apiPublished.getEnvironments());\n-                            List<Label> labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            List<Label> labelsToPublish;\n+                            if (apiPublished.getGatewayLabels() != null ){\n+                                labelsToPublish = new ArrayList<>(apiPublished.getGatewayLabels());\n+                            } else {\n+                                labelsToPublish = new ArrayList<>();\n+                            }\n+", "originalCommit": "dfe6799365d65a9031c18380de74b5b00f039461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwMDQ4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8705#discussion_r552100483", "bodyText": "Fixed in the latest version", "author": "Sarangan0219", "createdAt": "2021-01-05T18:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2NzU4OQ=="}], "type": "inlineReview", "revised_code": null}]}