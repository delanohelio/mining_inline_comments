{"pr_number": 8534, "pr_title": "Add endpoint registry api tests", "pr_createdAt": "2020-05-19T09:34:45Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8534", "timeline": [{"oid": "aee3b5064350ee9b68b477ab76d46f232bd0ef67", "url": "https://github.com/wso2/carbon-apimgt/commit/aee3b5064350ee9b68b477ab76d46f232bd0ef67", "message": "Add endpoint registry api tests", "committedDate": "2020-05-19T12:34:52Z", "type": "forcePushed"}, {"oid": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "url": "https://github.com/wso2/carbon-apimgt/commit/7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "message": "Add endpoint registry api tests", "committedDate": "2020-05-19T13:09:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODI0Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718246", "bodyText": "shall we verify whether an expected method was called or something since we cannot assert?", "author": "fazlan-nazeem", "createdAt": "2020-05-20T03:16:02Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);", "originalCommit": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNTIyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427805229", "bodyText": "updated in 8aad6c2", "author": "ChamodDamitha", "createdAt": "2020-05-20T07:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\ndeleted file mode 100644\nindex 63f26630b58..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\n+++ /dev/null\n\n@@ -1,360 +0,0 @@\n-package org.wso2.carbon.apimgt.impl;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mockito;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.testng.Assert;\n-import org.wso2.carbon.apimgt.api.APIManagementException;\n-import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n-import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n-import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.wso2.carbon.user.core.service.RealmService;\n-import org.wso2.carbon.user.core.tenant.TenantManager;\n-import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n-\n-import java.io.ByteArrayInputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n-public class EndpointRegistryImplTest {\n-    private final String ADMIN_USERNAME = \"admin\";\n-    private final String TENANT_DOMAIN = \"carbon.super\";\n-    private final int TENANT_ID = -1234;\n-\n-    private ApiMgtDAO apiMgtDAO;\n-    private EndpointRegistryImpl endpointRegistry;\n-\n-    @Before\n-    public void init() throws Exception {\n-        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n-        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n-        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n-        RealmService realmService = Mockito.mock(RealmService.class);\n-        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n-        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n-        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n-        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n-\n-        PowerMockito.mockStatic(MultitenantUtils.class);\n-        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n-\n-        PowerMockito.mockStatic(ApiMgtDAO.class);\n-        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n-        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n-\n-        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n-    }\n-\n-    @Test\n-    public void addEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(false);\n-        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n-                .thenReturn(endpointRegistryInfo.getUuid());\n-\n-        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-\n-        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistry(\"abc1\");\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryByUUID() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n-                .thenReturn(endpointRegistryInfo);\n-        EndpointRegistryInfo endpointRegistryInfoResponse\n-                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n-\n-        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistries() throws APIManagementException {\n-        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n-\n-        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n-        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo1.setMode(\"ReadOnly\");\n-        endpointRegistryInfo1.setOwner(\"admin\");\n-        endpointRegistryInfo1.setRegistryId(1);\n-        endpointRegistryInfo1.setType(\"wso2\");\n-        endpointRegistryInfo1.setUuid(\"abc1\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo1);\n-\n-        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n-        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo2.setMode(\"ReadWrite\");\n-        endpointRegistryInfo2.setOwner(\"admin\");\n-        endpointRegistryInfo2.setRegistryId(1);\n-        endpointRegistryInfo2.setType(\"etcd\");\n-        endpointRegistryInfo2.setUuid(\"abc2\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_ID))\n-                .thenReturn(endpointRegistryInfoList);\n-\n-        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n-                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_DOMAIN);\n-\n-        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n-            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n-                .thenReturn(endpointRegistryEntry);\n-\n-        EndpointRegistryEntry endpointRegistryEntryResponse =\n-                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n-\n-        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntries() throws APIManagementException {\n-        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n-        endpointRegistryEntry1.setEntryId(\"abc1\");\n-        endpointRegistryEntry1.setName(\"Entry 1\");\n-        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry1.setRegistryId(1);\n-        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry1.setServiceType(\"REST\");\n-        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry1);\n-\n-        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n-        endpointRegistryEntry2.setEntryId(\"abc2\");\n-        endpointRegistryEntry2.setName(\"Entry 2\");\n-        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry2.setRegistryId(1);\n-        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntry2.setServiceType(\"REST\");\n-        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n-\n-        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n-                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                        \"ASC\", 25, 0, registryUUID);\n-\n-        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n-            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void addEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n-                .thenReturn(endpointRegistryEntry.getEntryId());\n-\n-        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n-\n-        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(false);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistryEntry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistryEntry(\"entry1\");\n-    }\n-\n-    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n-        org.junit.Assert.assertEquals(expected.getUuid(), actual.getUuid());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMode(), actual.getMode());\n-        org.junit.Assert.assertEquals(expected.getType(), actual.getType());\n-        org.junit.Assert.assertEquals(expected.getOwner(), actual.getOwner());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-    }\n-\n-    private void compareRegistryEntryInfo(EndpointRegistryEntry expected, EndpointRegistryEntry actual) {\n-        org.junit.Assert.assertEquals(expected.getEntryId(), actual.getEntryId());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMetaData(), actual.getMetaData());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-        org.junit.Assert.assertEquals(expected.getServiceURL(), actual.getServiceURL());\n-        org.junit.Assert.assertEquals(expected.getServiceType(), actual.getServiceType());\n-        org.junit.Assert.assertEquals(expected.getServiceCategory(), actual.getServiceCategory());\n-        org.junit.Assert.assertEquals(expected.getDefinitionURL(), actual.getDefinitionURL());\n-        org.junit.Assert.assertEquals(expected.getDefinitionType(), actual.getDefinitionType());\n-        org.junit.Assert.assertEquals(expected.getEndpointDefinition(), actual.getEndpointDefinition());\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODMzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718330", "bodyText": "let's use Mockito verify", "author": "fazlan-nazeem", "createdAt": "2020-05-20T03:16:28Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistry(\"abc1\");", "originalCommit": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNTI2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427805268", "bodyText": "updated in 8aad6c2", "author": "ChamodDamitha", "createdAt": "2020-05-20T07:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\ndeleted file mode 100644\nindex 63f26630b58..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\n+++ /dev/null\n\n@@ -1,360 +0,0 @@\n-package org.wso2.carbon.apimgt.impl;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mockito;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.testng.Assert;\n-import org.wso2.carbon.apimgt.api.APIManagementException;\n-import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n-import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n-import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.wso2.carbon.user.core.service.RealmService;\n-import org.wso2.carbon.user.core.tenant.TenantManager;\n-import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n-\n-import java.io.ByteArrayInputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n-public class EndpointRegistryImplTest {\n-    private final String ADMIN_USERNAME = \"admin\";\n-    private final String TENANT_DOMAIN = \"carbon.super\";\n-    private final int TENANT_ID = -1234;\n-\n-    private ApiMgtDAO apiMgtDAO;\n-    private EndpointRegistryImpl endpointRegistry;\n-\n-    @Before\n-    public void init() throws Exception {\n-        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n-        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n-        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n-        RealmService realmService = Mockito.mock(RealmService.class);\n-        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n-        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n-        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n-        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n-\n-        PowerMockito.mockStatic(MultitenantUtils.class);\n-        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n-\n-        PowerMockito.mockStatic(ApiMgtDAO.class);\n-        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n-        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n-\n-        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n-    }\n-\n-    @Test\n-    public void addEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(false);\n-        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n-                .thenReturn(endpointRegistryInfo.getUuid());\n-\n-        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-\n-        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistry(\"abc1\");\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryByUUID() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n-                .thenReturn(endpointRegistryInfo);\n-        EndpointRegistryInfo endpointRegistryInfoResponse\n-                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n-\n-        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistries() throws APIManagementException {\n-        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n-\n-        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n-        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo1.setMode(\"ReadOnly\");\n-        endpointRegistryInfo1.setOwner(\"admin\");\n-        endpointRegistryInfo1.setRegistryId(1);\n-        endpointRegistryInfo1.setType(\"wso2\");\n-        endpointRegistryInfo1.setUuid(\"abc1\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo1);\n-\n-        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n-        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo2.setMode(\"ReadWrite\");\n-        endpointRegistryInfo2.setOwner(\"admin\");\n-        endpointRegistryInfo2.setRegistryId(1);\n-        endpointRegistryInfo2.setType(\"etcd\");\n-        endpointRegistryInfo2.setUuid(\"abc2\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_ID))\n-                .thenReturn(endpointRegistryInfoList);\n-\n-        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n-                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_DOMAIN);\n-\n-        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n-            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n-                .thenReturn(endpointRegistryEntry);\n-\n-        EndpointRegistryEntry endpointRegistryEntryResponse =\n-                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n-\n-        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntries() throws APIManagementException {\n-        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n-        endpointRegistryEntry1.setEntryId(\"abc1\");\n-        endpointRegistryEntry1.setName(\"Entry 1\");\n-        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry1.setRegistryId(1);\n-        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry1.setServiceType(\"REST\");\n-        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry1);\n-\n-        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n-        endpointRegistryEntry2.setEntryId(\"abc2\");\n-        endpointRegistryEntry2.setName(\"Entry 2\");\n-        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry2.setRegistryId(1);\n-        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntry2.setServiceType(\"REST\");\n-        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n-\n-        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n-                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                        \"ASC\", 25, 0, registryUUID);\n-\n-        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n-            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void addEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n-                .thenReturn(endpointRegistryEntry.getEntryId());\n-\n-        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n-\n-        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(false);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistryEntry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistryEntry(\"entry1\");\n-    }\n-\n-    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n-        org.junit.Assert.assertEquals(expected.getUuid(), actual.getUuid());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMode(), actual.getMode());\n-        org.junit.Assert.assertEquals(expected.getType(), actual.getType());\n-        org.junit.Assert.assertEquals(expected.getOwner(), actual.getOwner());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-    }\n-\n-    private void compareRegistryEntryInfo(EndpointRegistryEntry expected, EndpointRegistryEntry actual) {\n-        org.junit.Assert.assertEquals(expected.getEntryId(), actual.getEntryId());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMetaData(), actual.getMetaData());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-        org.junit.Assert.assertEquals(expected.getServiceURL(), actual.getServiceURL());\n-        org.junit.Assert.assertEquals(expected.getServiceType(), actual.getServiceType());\n-        org.junit.Assert.assertEquals(expected.getServiceCategory(), actual.getServiceCategory());\n-        org.junit.Assert.assertEquals(expected.getDefinitionURL(), actual.getDefinitionURL());\n-        org.junit.Assert.assertEquals(expected.getDefinitionType(), actual.getDefinitionType());\n-        org.junit.Assert.assertEquals(expected.getEndpointDefinition(), actual.getEndpointDefinition());\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODc2OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427718768", "bodyText": "why fully qualified name here?", "author": "fazlan-nazeem", "createdAt": "2020-05-20T03:18:29Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,360 @@\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.testng.Assert;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistry(\"abc1\");\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryByUUID() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n+                .thenReturn(endpointRegistryInfo);\n+        EndpointRegistryInfo endpointRegistryInfoResponse\n+                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n+\n+        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistries() throws APIManagementException {\n+        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n+\n+        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n+        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo1.setMode(\"ReadOnly\");\n+        endpointRegistryInfo1.setOwner(\"admin\");\n+        endpointRegistryInfo1.setRegistryId(1);\n+        endpointRegistryInfo1.setType(\"wso2\");\n+        endpointRegistryInfo1.setUuid(\"abc1\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo1);\n+\n+        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n+        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo2.setMode(\"ReadWrite\");\n+        endpointRegistryInfo2.setOwner(\"admin\");\n+        endpointRegistryInfo2.setRegistryId(1);\n+        endpointRegistryInfo2.setType(\"etcd\");\n+        endpointRegistryInfo2.setUuid(\"abc2\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_ID))\n+                .thenReturn(endpointRegistryInfoList);\n+\n+        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n+                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_DOMAIN);\n+\n+        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n+            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n+                .thenReturn(endpointRegistryEntry);\n+\n+        EndpointRegistryEntry endpointRegistryEntryResponse =\n+                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n+\n+        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntries() throws APIManagementException {\n+        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n+        endpointRegistryEntry1.setEntryId(\"abc1\");\n+        endpointRegistryEntry1.setName(\"Entry 1\");\n+        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry1.setRegistryId(1);\n+        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry1.setServiceType(\"REST\");\n+        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+        endpointRegistryEntryList.add(endpointRegistryEntry1);\n+\n+        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n+        endpointRegistryEntry2.setEntryId(\"abc2\");\n+        endpointRegistryEntry2.setName(\"Entry 2\");\n+        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry2.setRegistryId(1);\n+        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntry2.setServiceType(\"REST\");\n+        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+        endpointRegistryEntryList.add(endpointRegistryEntry2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n+                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n+\n+        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n+                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n+                        \"ASC\", 25, 0, registryUUID);\n+\n+        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n+            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void addEndpointRegistryEntry() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n+                .thenReturn(endpointRegistryEntry.getEntryId());\n+\n+        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n+\n+        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistryEntry() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n+        endpointRegistryEntryOld.setEntryId(\"abc1\");\n+        endpointRegistryEntryOld.setName(\"Entry 1\");\n+        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntryOld.setRegistryId(1);\n+        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntryOld.setServiceType(\"REST\");\n+        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n+        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n+        endpointRegistryEntryNew.setEntryId(\"abc1\");\n+        endpointRegistryEntryNew.setName(\"Entry 2\");\n+        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n+        endpointRegistryEntryNew.setRegistryId(1);\n+        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntryNew.setServiceType(\"REST\");\n+        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n+        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n+                .thenReturn(endpointRegistryEntryOld);\n+        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n+                .thenReturn(false);\n+\n+        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n+        endpointRegistryEntryOld.setEntryId(\"abc1\");\n+        endpointRegistryEntryOld.setName(\"Entry 1\");\n+        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntryOld.setRegistryId(1);\n+        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntryOld.setServiceType(\"REST\");\n+        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n+        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n+        endpointRegistryEntryNew.setEntryId(\"abc1\");\n+        endpointRegistryEntryNew.setName(\"Entry 2\");\n+        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n+        endpointRegistryEntryNew.setRegistryId(1);\n+        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n+        endpointRegistryEntryNew.setServiceType(\"REST\");\n+        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n+        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n+        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n+                .thenReturn(endpointRegistryEntryOld);\n+        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistryEntry() throws APIManagementException {\n+        endpointRegistry.deleteEndpointRegistryEntry(\"entry1\");\n+    }\n+\n+    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n+        org.junit.Assert.assertEquals(expected.getUuid(), actual.getUuid());", "originalCommit": "7df53b3cd9f84c09ee3d0a6940498413f5c3832c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwNTMzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427805330", "bodyText": "updated in 8aad6c2", "author": "ChamodDamitha", "createdAt": "2020-05-20T07:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxODc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\ndeleted file mode 100644\nindex 63f26630b58..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\n+++ /dev/null\n\n@@ -1,360 +0,0 @@\n-package org.wso2.carbon.apimgt.impl;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mockito;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.testng.Assert;\n-import org.wso2.carbon.apimgt.api.APIManagementException;\n-import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n-import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n-import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.wso2.carbon.user.core.service.RealmService;\n-import org.wso2.carbon.user.core.tenant.TenantManager;\n-import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n-\n-import java.io.ByteArrayInputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n-public class EndpointRegistryImplTest {\n-    private final String ADMIN_USERNAME = \"admin\";\n-    private final String TENANT_DOMAIN = \"carbon.super\";\n-    private final int TENANT_ID = -1234;\n-\n-    private ApiMgtDAO apiMgtDAO;\n-    private EndpointRegistryImpl endpointRegistry;\n-\n-    @Before\n-    public void init() throws Exception {\n-        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n-        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n-        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n-        RealmService realmService = Mockito.mock(RealmService.class);\n-        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n-        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n-        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n-        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n-\n-        PowerMockito.mockStatic(MultitenantUtils.class);\n-        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n-\n-        PowerMockito.mockStatic(ApiMgtDAO.class);\n-        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n-        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n-\n-        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n-    }\n-\n-    @Test\n-    public void addEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(false);\n-        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n-                .thenReturn(endpointRegistryInfo.getUuid());\n-\n-        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-\n-        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistry(\"abc1\");\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryByUUID() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n-                .thenReturn(endpointRegistryInfo);\n-        EndpointRegistryInfo endpointRegistryInfoResponse\n-                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n-\n-        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistries() throws APIManagementException {\n-        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n-\n-        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n-        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo1.setMode(\"ReadOnly\");\n-        endpointRegistryInfo1.setOwner(\"admin\");\n-        endpointRegistryInfo1.setRegistryId(1);\n-        endpointRegistryInfo1.setType(\"wso2\");\n-        endpointRegistryInfo1.setUuid(\"abc1\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo1);\n-\n-        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n-        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo2.setMode(\"ReadWrite\");\n-        endpointRegistryInfo2.setOwner(\"admin\");\n-        endpointRegistryInfo2.setRegistryId(1);\n-        endpointRegistryInfo2.setType(\"etcd\");\n-        endpointRegistryInfo2.setUuid(\"abc2\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_ID))\n-                .thenReturn(endpointRegistryInfoList);\n-\n-        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n-                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_DOMAIN);\n-\n-        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n-            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n-                .thenReturn(endpointRegistryEntry);\n-\n-        EndpointRegistryEntry endpointRegistryEntryResponse =\n-                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n-\n-        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntries() throws APIManagementException {\n-        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n-        endpointRegistryEntry1.setEntryId(\"abc1\");\n-        endpointRegistryEntry1.setName(\"Entry 1\");\n-        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry1.setRegistryId(1);\n-        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry1.setServiceType(\"REST\");\n-        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry1);\n-\n-        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n-        endpointRegistryEntry2.setEntryId(\"abc2\");\n-        endpointRegistryEntry2.setName(\"Entry 2\");\n-        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry2.setRegistryId(1);\n-        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntry2.setServiceType(\"REST\");\n-        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n-\n-        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n-                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                        \"ASC\", 25, 0, registryUUID);\n-\n-        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n-            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void addEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n-                .thenReturn(endpointRegistryEntry.getEntryId());\n-\n-        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n-\n-        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(false);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistryEntry() throws APIManagementException {\n-        endpointRegistry.deleteEndpointRegistryEntry(\"entry1\");\n-    }\n-\n-    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n-        org.junit.Assert.assertEquals(expected.getUuid(), actual.getUuid());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMode(), actual.getMode());\n-        org.junit.Assert.assertEquals(expected.getType(), actual.getType());\n-        org.junit.Assert.assertEquals(expected.getOwner(), actual.getOwner());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-    }\n-\n-    private void compareRegistryEntryInfo(EndpointRegistryEntry expected, EndpointRegistryEntry actual) {\n-        org.junit.Assert.assertEquals(expected.getEntryId(), actual.getEntryId());\n-        org.junit.Assert.assertEquals(expected.getName(), actual.getName());\n-        org.junit.Assert.assertEquals(expected.getMetaData(), actual.getMetaData());\n-        org.junit.Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-        org.junit.Assert.assertEquals(expected.getServiceURL(), actual.getServiceURL());\n-        org.junit.Assert.assertEquals(expected.getServiceType(), actual.getServiceType());\n-        org.junit.Assert.assertEquals(expected.getServiceCategory(), actual.getServiceCategory());\n-        org.junit.Assert.assertEquals(expected.getDefinitionURL(), actual.getDefinitionURL());\n-        org.junit.Assert.assertEquals(expected.getDefinitionType(), actual.getDefinitionType());\n-        org.junit.Assert.assertEquals(expected.getEndpointDefinition(), actual.getEndpointDefinition());\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzQ3OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r427877478", "bodyText": "Missing license header", "author": "vithu30", "createdAt": "2020-05-20T09:40:54Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.wso2.carbon.apimgt.impl;", "originalCommit": "8aad6c2009f4840cedef91797b02feb0a640fa4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE1MzkzMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r428153931", "bodyText": "Updated in 39d3643", "author": "ChamodDamitha", "createdAt": "2020-05-20T16:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\ndeleted file mode 100644\nindex aa9235c83c1..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java\n+++ /dev/null\n\n@@ -1,366 +0,0 @@\n-package org.wso2.carbon.apimgt.impl;\n-\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mockito;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.wso2.carbon.apimgt.api.APIManagementException;\n-import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n-import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n-import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n-import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n-import org.wso2.carbon.user.core.service.RealmService;\n-import org.wso2.carbon.user.core.tenant.TenantManager;\n-import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n-\n-import java.io.ByteArrayInputStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n-public class EndpointRegistryImplTest {\n-    private final String ADMIN_USERNAME = \"admin\";\n-    private final String TENANT_DOMAIN = \"carbon.super\";\n-    private final int TENANT_ID = -1234;\n-\n-    private ApiMgtDAO apiMgtDAO;\n-    private EndpointRegistryImpl endpointRegistry;\n-\n-    @Before\n-    public void init() throws Exception {\n-        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n-        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n-        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n-        RealmService realmService = Mockito.mock(RealmService.class);\n-        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n-        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n-        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n-        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n-\n-        PowerMockito.mockStatic(MultitenantUtils.class);\n-        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n-\n-        PowerMockito.mockStatic(ApiMgtDAO.class);\n-        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n-        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n-\n-        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n-    }\n-\n-    @Test\n-    public void addEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(false);\n-        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n-                .thenReturn(endpointRegistryInfo.getUuid());\n-\n-        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-\n-        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistry() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n-                endpointRegistryInfo);\n-        Mockito.verify(apiMgtDAO).updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n-                endpointRegistryInfo);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistry() throws APIManagementException {\n-        final String REGISTRY_UUID = \"abc1\";\n-        endpointRegistry.deleteEndpointRegistry(REGISTRY_UUID);\n-        Mockito.verify(apiMgtDAO).deleteEndpointRegistry(REGISTRY_UUID);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryByUUID() throws APIManagementException {\n-        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n-        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo.setMode(\"ReadOnly\");\n-        endpointRegistryInfo.setType(\"wso2\");\n-        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n-        endpointRegistryInfo.setUuid(\"abc1\");\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n-                .thenReturn(endpointRegistryInfo);\n-        EndpointRegistryInfo endpointRegistryInfoResponse\n-                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n-\n-        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistries() throws APIManagementException {\n-        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n-\n-        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n-        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n-        endpointRegistryInfo1.setMode(\"ReadOnly\");\n-        endpointRegistryInfo1.setOwner(\"admin\");\n-        endpointRegistryInfo1.setRegistryId(1);\n-        endpointRegistryInfo1.setType(\"wso2\");\n-        endpointRegistryInfo1.setUuid(\"abc1\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo1);\n-\n-        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n-        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n-        endpointRegistryInfo2.setMode(\"ReadWrite\");\n-        endpointRegistryInfo2.setOwner(\"admin\");\n-        endpointRegistryInfo2.setRegistryId(1);\n-        endpointRegistryInfo2.setType(\"etcd\");\n-        endpointRegistryInfo2.setUuid(\"abc2\");\n-        endpointRegistryInfoList.add(endpointRegistryInfo2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_ID))\n-                .thenReturn(endpointRegistryInfoList);\n-\n-        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n-                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n-                25, 0, TENANT_DOMAIN);\n-\n-        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n-            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n-                .thenReturn(endpointRegistryEntry);\n-\n-        EndpointRegistryEntry endpointRegistryEntryResponse =\n-                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n-\n-        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n-    }\n-\n-    @Test\n-    public void getEndpointRegistryEntries() throws APIManagementException {\n-        List<EndpointRegistryEntry> endpointRegistryEntryList = new ArrayList<>();\n-        String registryUUID = \"reg1\";\n-\n-        EndpointRegistryEntry endpointRegistryEntry1 = new EndpointRegistryEntry();\n-        endpointRegistryEntry1.setEntryId(\"abc1\");\n-        endpointRegistryEntry1.setName(\"Entry 1\");\n-        endpointRegistryEntry1.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry1.setRegistryId(1);\n-        endpointRegistryEntry1.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry1.setServiceType(\"REST\");\n-        endpointRegistryEntry1.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry1.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry1.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry1.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry1);\n-\n-        EndpointRegistryEntry endpointRegistryEntry2 = new EndpointRegistryEntry();\n-        endpointRegistryEntry2.setEntryId(\"abc2\");\n-        endpointRegistryEntry2.setName(\"Entry 2\");\n-        endpointRegistryEntry2.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry2.setRegistryId(1);\n-        endpointRegistryEntry2.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntry2.setServiceType(\"REST\");\n-        endpointRegistryEntry2.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry2.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntry2.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry2.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-        endpointRegistryEntryList.add(endpointRegistryEntry2);\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                \"ASC\", 25, 0, registryUUID)).thenReturn(endpointRegistryEntryList);\n-\n-        List<EndpointRegistryEntry> endpointRegistryEntryListResponse =\n-                endpointRegistry.getEndpointRegistryEntries(EndpointRegistryConstants.COLUMN_ENTRY_NAME,\n-                        \"ASC\", 25, 0, registryUUID);\n-\n-        for (int i = 0; i < endpointRegistryEntryListResponse.size(); i++) {\n-            compareRegistryEntryInfo(endpointRegistryEntryList.get(i), endpointRegistryEntryListResponse.get(i));\n-        }\n-    }\n-\n-    @Test\n-    public void addEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n-        endpointRegistryEntry.setEntryId(\"abc1\");\n-        endpointRegistryEntry.setName(\"Entry 1\");\n-        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntry.setRegistryId(1);\n-        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntry.setServiceType(\"REST\");\n-        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntry.setDefinitionType(\"OAS\");\n-        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.addEndpointRegistryEntry(endpointRegistryEntry))\n-                .thenReturn(endpointRegistryEntry.getEntryId());\n-\n-        String entryUUID = endpointRegistry.addEndpointRegistryEntry(endpointRegistryEntry);\n-\n-        Assert.assertEquals(endpointRegistryEntry.getEntryId(), entryUUID);\n-    }\n-\n-    @Test\n-    public void updateEndpointRegistryEntry() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(false);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-        Mockito.verify(apiMgtDAO).updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n-    public void updateEndpointRegistryEntry_existingEntryName() throws APIManagementException {\n-        EndpointRegistryEntry endpointRegistryEntryOld = new EndpointRegistryEntry();\n-        endpointRegistryEntryOld.setEntryId(\"abc1\");\n-        endpointRegistryEntryOld.setName(\"Entry 1\");\n-        endpointRegistryEntryOld.setMetaData(\"{mutualTLS:true}\");\n-        endpointRegistryEntryOld.setRegistryId(1);\n-        endpointRegistryEntryOld.setServiceURL(\"https://xyz.com\");\n-        endpointRegistryEntryOld.setServiceType(\"REST\");\n-        endpointRegistryEntryOld.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryOld.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n-        endpointRegistryEntryOld.setDefinitionType(\"OAS\");\n-        endpointRegistryEntryOld.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        EndpointRegistryEntry endpointRegistryEntryNew = new EndpointRegistryEntry();\n-        endpointRegistryEntryNew.setEntryId(\"abc1\");\n-        endpointRegistryEntryNew.setName(\"Entry 2\");\n-        endpointRegistryEntryNew.setMetaData(\"{mutualTLS:flase}\");\n-        endpointRegistryEntryNew.setRegistryId(1);\n-        endpointRegistryEntryNew.setServiceURL(\"https://xyz2.com\");\n-        endpointRegistryEntryNew.setServiceType(\"REST\");\n-        endpointRegistryEntryNew.setServiceCategory(\"UTILITY\");\n-        endpointRegistryEntryNew.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger2.json\");\n-        endpointRegistryEntryNew.setDefinitionType(\"WSDL1\");\n-        endpointRegistryEntryNew.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n-\n-        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntryOld.getEntryId()))\n-                .thenReturn(endpointRegistryEntryOld);\n-        Mockito.when(apiMgtDAO.isRegistryEntryNameExists(endpointRegistryEntryNew))\n-                .thenReturn(true);\n-\n-        endpointRegistry.updateEndpointRegistryEntry(endpointRegistryEntryNew);\n-    }\n-\n-    @Test\n-    public void deleteEndpointRegistryEntry() throws APIManagementException {\n-        final String ENTRY_UUID = \"entry1\";\n-        endpointRegistry.deleteEndpointRegistryEntry(ENTRY_UUID);\n-        Mockito.verify(apiMgtDAO).deleteEndpointRegistryEntry(ENTRY_UUID);\n-    }\n-\n-    private void compareRegistryInfo(EndpointRegistryInfo expected, EndpointRegistryInfo actual) {\n-        Assert.assertEquals(expected.getUuid(), actual.getUuid());\n-        Assert.assertEquals(expected.getName(), actual.getName());\n-        Assert.assertEquals(expected.getMode(), actual.getMode());\n-        Assert.assertEquals(expected.getType(), actual.getType());\n-        Assert.assertEquals(expected.getOwner(), actual.getOwner());\n-        Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-    }\n-\n-    private void compareRegistryEntryInfo(EndpointRegistryEntry expected, EndpointRegistryEntry actual) {\n-        Assert.assertEquals(expected.getEntryId(), actual.getEntryId());\n-        Assert.assertEquals(expected.getName(), actual.getName());\n-        Assert.assertEquals(expected.getMetaData(), actual.getMetaData());\n-        Assert.assertEquals(expected.getRegistryId(), actual.getRegistryId());\n-        Assert.assertEquals(expected.getServiceURL(), actual.getServiceURL());\n-        Assert.assertEquals(expected.getServiceType(), actual.getServiceType());\n-        Assert.assertEquals(expected.getServiceCategory(), actual.getServiceCategory());\n-        Assert.assertEquals(expected.getDefinitionURL(), actual.getDefinitionURL());\n-        Assert.assertEquals(expected.getDefinitionType(), actual.getDefinitionType());\n-        Assert.assertEquals(expected.getEndpointDefinition(), actual.getEndpointDefinition());\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "url": "https://github.com/wso2/carbon-apimgt/commit/d130e154cdc9e2d59143a5f52e6ccb1cfc7261f6", "message": "Add null responses in endpoint registry resources", "committedDate": "2020-05-20T10:43:39Z", "type": "commit"}, {"oid": "1a4414acdeb42f5d7c16e84ab9683ac43aa26f5f", "url": "https://github.com/wso2/carbon-apimgt/commit/1a4414acdeb42f5d7c16e84ab9683ac43aa26f5f", "message": "Add endpoint registry api tests", "committedDate": "2020-05-20T10:43:39Z", "type": "commit"}, {"oid": "39d364384427215eb7e8b7967a963c15a347ed88", "url": "https://github.com/wso2/carbon-apimgt/commit/39d364384427215eb7e8b7967a963c15a347ed88", "message": "Fix endpoint registry test cases", "committedDate": "2020-05-20T16:34:42Z", "type": "commit"}, {"oid": "39d364384427215eb7e8b7967a963c15a347ed88", "url": "https://github.com/wso2/carbon-apimgt/commit/39d364384427215eb7e8b7967a963c15a347ed88", "message": "Fix endpoint registry test cases", "committedDate": "2020-05-20T16:34:42Z", "type": "forcePushed"}, {"oid": "9a431d519af8eaed5c8ddaf15464bc8c9a59e3c7", "url": "https://github.com/wso2/carbon-apimgt/commit/9a431d519af8eaed5c8ddaf15464bc8c9a59e3c7", "message": "Update getEndpointDefinition test cases", "committedDate": "2020-05-20T16:46:49Z", "type": "commit"}, {"oid": "67cac589c70906af1910a77d49866fb2ec64747a", "url": "https://github.com/wso2/carbon-apimgt/commit/67cac589c70906af1910a77d49866fb2ec64747a", "message": "Remove unwanted databse call when updating endpoint registry entry", "committedDate": "2020-05-20T19:58:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0Mjg1Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474742856", "bodyText": "Add class level doc comments describing what this class does", "author": "rmsamitha", "createdAt": "2020-08-21T14:42:56Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)", "originalCommit": "67cac589c70906af1910a77d49866fb2ec64747a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzE0NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r478847145", "bodyText": "Removed the file in #8615", "author": "ChamodDamitha", "createdAt": "2020-08-28T05:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0Mjg1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzIxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474743218", "bodyText": "Add doc comment describing what is tested in this test", "author": "rmsamitha", "createdAt": "2020-08-21T14:43:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test", "originalCommit": "67cac589c70906af1910a77d49866fb2ec64747a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzE4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r478847181", "bodyText": "Removed the file in #8615", "author": "ChamodDamitha", "createdAt": "2020-08-28T05:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzIxOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzMyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474743323", "bodyText": "Add doc comment describing what is tested in this test", "author": "rmsamitha", "createdAt": "2020-08-21T14:43:45Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)", "originalCommit": "67cac589c70906af1910a77d49866fb2ec64747a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzE5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r478847195", "bodyText": "Removed the file in #8615", "author": "ChamodDamitha", "createdAt": "2020-08-28T05:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0MzMyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjA1MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r474746050", "bodyText": "Would have been good if test method name following the naming convention. i.e. \"testGetEndpointRegistryEntries\". This should be considered for all the test methods in this PR", "author": "rmsamitha", "createdAt": "2020-08-21T14:48:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/EndpointRegistryImplTest.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.APIMgtResourceAlreadyExistsException;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryEntry;\n+import org.wso2.carbon.apimgt.api.model.EndpointRegistryInfo;\n+import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;\n+import org.wso2.carbon.apimgt.impl.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.user.core.service.RealmService;\n+import org.wso2.carbon.user.core.tenant.TenantManager;\n+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ServiceReferenceHolder.class, ApiMgtDAO.class, MultitenantUtils.class})\n+public class EndpointRegistryImplTest {\n+    private final String ADMIN_USERNAME = \"admin\";\n+    private final String TENANT_DOMAIN = \"carbon.super\";\n+    private final int TENANT_ID = -1234;\n+\n+    private ApiMgtDAO apiMgtDAO;\n+    private EndpointRegistryImpl endpointRegistry;\n+\n+    @Before\n+    public void init() throws Exception {\n+        PowerMockito.mockStatic(ServiceReferenceHolder.class);\n+        ServiceReferenceHolder serviceReferenceHolder = Mockito.mock(ServiceReferenceHolder.class);\n+        PowerMockito.when(ServiceReferenceHolder.getInstance()).thenReturn(serviceReferenceHolder);\n+        RealmService realmService = Mockito.mock(RealmService.class);\n+        Mockito.when(serviceReferenceHolder.getRealmService()).thenReturn(realmService);\n+        TenantManager tenantManager = Mockito.mock(TenantManager.class);\n+        Mockito.when(realmService.getTenantManager()).thenReturn(tenantManager);\n+        Mockito.when(tenantManager.getTenantId(TENANT_DOMAIN)).thenReturn(TENANT_ID);\n+\n+        PowerMockito.mockStatic(MultitenantUtils.class);\n+        PowerMockito.doReturn(TENANT_DOMAIN).when(MultitenantUtils.class, \"getTenantDomain\", ADMIN_USERNAME);\n+\n+        PowerMockito.mockStatic(ApiMgtDAO.class);\n+        apiMgtDAO = Mockito.mock(ApiMgtDAO.class);\n+        PowerMockito.doReturn(apiMgtDAO).when(ApiMgtDAO.class, \"getInstance\");\n+\n+        endpointRegistry = new EndpointRegistryImpl(ADMIN_USERNAME);\n+    }\n+\n+    @Test\n+    public void addEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(false);\n+        Mockito.when(apiMgtDAO.addEndpointRegistry(endpointRegistryInfo, TENANT_ID))\n+                .thenReturn(endpointRegistryInfo.getUuid());\n+\n+        String registryUUID = endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+\n+        Assert.assertEquals(endpointRegistryInfo.getUuid(), registryUUID);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void addEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.addEndpointRegistry(endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void updateEndpointRegistry() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo.getName(),\n+                endpointRegistryInfo);\n+        Mockito.verify(apiMgtDAO).updateEndpointRegistry(endpointRegistryInfo.getUuid(), endpointRegistryInfo);\n+    }\n+\n+    @Test(expected = APIMgtResourceAlreadyExistsException.class)\n+    public void updateEndpointRegistry_existingEntryName() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.isEndpointRegistryNameExists(endpointRegistryInfo.getName(), TENANT_ID))\n+                .thenReturn(true);\n+\n+        endpointRegistry.updateEndpointRegistry(endpointRegistryInfo.getUuid(), \"Endpoint Registry 1\",\n+                endpointRegistryInfo);\n+    }\n+\n+    @Test\n+    public void deleteEndpointRegistry() throws APIManagementException {\n+        final String REGISTRY_UUID = \"abc1\";\n+        endpointRegistry.deleteEndpointRegistry(REGISTRY_UUID);\n+        Mockito.verify(apiMgtDAO).deleteEndpointRegistry(REGISTRY_UUID);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryByUUID() throws APIManagementException {\n+        EndpointRegistryInfo endpointRegistryInfo = new EndpointRegistryInfo();\n+        endpointRegistryInfo.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo.setMode(\"ReadOnly\");\n+        endpointRegistryInfo.setType(\"wso2\");\n+        endpointRegistryInfo.setOwner(ADMIN_USERNAME);\n+        endpointRegistryInfo.setUuid(\"abc1\");\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_ID))\n+                .thenReturn(endpointRegistryInfo);\n+        EndpointRegistryInfo endpointRegistryInfoResponse\n+                = endpointRegistry.getEndpointRegistryByUUID(endpointRegistryInfo.getUuid(), TENANT_DOMAIN);\n+\n+        compareRegistryInfo(endpointRegistryInfo, endpointRegistryInfoResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistries() throws APIManagementException {\n+        List<EndpointRegistryInfo> endpointRegistryInfoList = new ArrayList<>();\n+\n+        EndpointRegistryInfo endpointRegistryInfo1 = new EndpointRegistryInfo();\n+        endpointRegistryInfo1.setName(\"Endpoint Registry 1\");\n+        endpointRegistryInfo1.setMode(\"ReadOnly\");\n+        endpointRegistryInfo1.setOwner(\"admin\");\n+        endpointRegistryInfo1.setRegistryId(1);\n+        endpointRegistryInfo1.setType(\"wso2\");\n+        endpointRegistryInfo1.setUuid(\"abc1\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo1);\n+\n+        EndpointRegistryInfo endpointRegistryInfo2 = new EndpointRegistryInfo();\n+        endpointRegistryInfo2.setName(\"Endpoint Registry 2\");\n+        endpointRegistryInfo2.setMode(\"ReadWrite\");\n+        endpointRegistryInfo2.setOwner(\"admin\");\n+        endpointRegistryInfo2.setRegistryId(1);\n+        endpointRegistryInfo2.setType(\"etcd\");\n+        endpointRegistryInfo2.setUuid(\"abc2\");\n+        endpointRegistryInfoList.add(endpointRegistryInfo2);\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_ID))\n+                .thenReturn(endpointRegistryInfoList);\n+\n+        List<EndpointRegistryInfo> endpointRegistryInfoListResponse\n+                = endpointRegistry.getEndpointRegistries(EndpointRegistryConstants.COLUMN_REG_NAME, \"ASC\",\n+                25, 0, TENANT_DOMAIN);\n+\n+        for (int i = 0; i < endpointRegistryInfoListResponse.size(); i++) {\n+            compareRegistryInfo(endpointRegistryInfoList.get(i), endpointRegistryInfoListResponse.get(i));\n+        }\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntryByUUID() throws APIManagementException {\n+        String registryUUID = \"reg1\";\n+\n+        EndpointRegistryEntry endpointRegistryEntry = new EndpointRegistryEntry();\n+        endpointRegistryEntry.setEntryId(\"abc1\");\n+        endpointRegistryEntry.setName(\"Entry 1\");\n+        endpointRegistryEntry.setMetaData(\"{mutualTLS:true}\");\n+        endpointRegistryEntry.setRegistryId(1);\n+        endpointRegistryEntry.setServiceURL(\"https://xyz.com\");\n+        endpointRegistryEntry.setServiceType(\"REST\");\n+        endpointRegistryEntry.setServiceCategory(\"UTILITY\");\n+        endpointRegistryEntry.setDefinitionURL(\"https://petstore.swagger.io/v2/swagger.json\");\n+        endpointRegistryEntry.setDefinitionType(\"OAS\");\n+        endpointRegistryEntry.setEndpointDefinition(new ByteArrayInputStream(new byte[]{}));\n+\n+        Mockito.when(apiMgtDAO.getEndpointRegistryEntryByUUID(endpointRegistryEntry.getEntryId()))\n+                .thenReturn(endpointRegistryEntry);\n+\n+        EndpointRegistryEntry endpointRegistryEntryResponse =\n+                endpointRegistry.getEndpointRegistryEntryByUUID(registryUUID, endpointRegistryEntry.getEntryId());\n+\n+        compareRegistryEntryInfo(endpointRegistryEntry, endpointRegistryEntryResponse);\n+    }\n+\n+    @Test\n+    public void getEndpointRegistryEntries() throws APIManagementException {", "originalCommit": "67cac589c70906af1910a77d49866fb2ec64747a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzIxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8534#discussion_r478847217", "bodyText": "Removed the file in #8615", "author": "ChamodDamitha", "createdAt": "2020-08-28T05:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjA1MA=="}], "type": "inlineReview", "revised_code": null}]}