{"pr_number": 8764, "pr_title": "add feign jars as bundles and removing apikeymanager subscriber service", "pr_createdAt": "2020-06-16T12:11:19Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8764", "timeline": [{"oid": "815de6f460727cc71b9054aeab3ce71f4792c2f0", "url": "https://github.com/wso2/carbon-apimgt/commit/815de6f460727cc71b9054aeab3ce71f4792c2f0", "message": "refactor scope client to feign", "committedDate": "2020-06-17T04:48:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NDA0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8764#discussion_r441294044", "bodyText": "we could use constants in the APIConstant class. AUTHORIZATION_HEADER_DEFAULT, AUTHORIZATION_BEARER are there", "author": "chamilaadhi", "createdAt": "2020-06-17T05:46:23Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/kmclient/model/BearerInterceptor.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.wso2.carbon.apimgt.impl.kmclient.model;\n+\n+import feign.RequestInterceptor;\n+import feign.RequestTemplate;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.recommendationmgt.AccessTokenGenerator;\n+\n+public class BearerInterceptor implements RequestInterceptor {\n+\n+    private AccessTokenGenerator accessTokenGenerator;\n+\n+    public BearerInterceptor(AccessTokenGenerator accessTokenGenerator) {\n+\n+        this.accessTokenGenerator = accessTokenGenerator;\n+    }\n+\n+    @Override\n+    public void apply(RequestTemplate requestTemplate) {\n+\n+        String accessToken = accessTokenGenerator.getAccessToken(APIConstants.KEY_MANAGER_OAUTH2_REST_API_MGT_SCOPES);\n+        requestTemplate.header(\"Authorization\", \"Bearer \" + accessToken);\n+    }", "originalCommit": "815de6f460727cc71b9054aeab3ce71f4792c2f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e77aee47a9436792d62ee296382d46f2d0eb315a", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/kmclient/model/BearerInterceptor.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/kmclient/model/BearerInterceptor.java\ndeleted file mode 100644\nindex 3417cd9790d..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/kmclient/model/BearerInterceptor.java\n+++ /dev/null\n\n@@ -1,23 +0,0 @@\n-package org.wso2.carbon.apimgt.impl.kmclient.model;\n-\n-import feign.RequestInterceptor;\n-import feign.RequestTemplate;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.recommendationmgt.AccessTokenGenerator;\n-\n-public class BearerInterceptor implements RequestInterceptor {\n-\n-    private AccessTokenGenerator accessTokenGenerator;\n-\n-    public BearerInterceptor(AccessTokenGenerator accessTokenGenerator) {\n-\n-        this.accessTokenGenerator = accessTokenGenerator;\n-    }\n-\n-    @Override\n-    public void apply(RequestTemplate requestTemplate) {\n-\n-        String accessToken = accessTokenGenerator.getAccessToken(APIConstants.KEY_MANAGER_OAUTH2_REST_API_MGT_SCOPES);\n-        requestTemplate.header(\"Authorization\", \"Bearer \" + accessToken);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NjA4Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8764#discussion_r441296082", "bodyText": "I think having the version hardcorded in the URL could cause some maintenance issues. (will have to change this every release)", "author": "chamilaadhi", "createdAt": "2020-06-17T05:52:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java", "diffHunk": "@@ -515,86 +445,94 @@ private OAuthApplicationInfo buildDTOFromClientInfo(ClientInfo appResponse,\n         return oAuthApplicationInfo;\n     }\n \n-    /**\n-     * This method initialize the HTTP Client and Connection Manager to call services in KeyManager.\n-     *\n-     * @throws APIManagementException if an error occurs while initializing HttpClient\n-     */\n-    protected void initializeHttpClient() throws APIManagementException {\n-\n-        try {\n-            String authServerURL = (String) configuration.getParameter(APIConstants.AUTHSERVER_URL);\n-            java.net.URL keyManagerURL = new java.net.URL(authServerURL);\n-            int keyManagerPort = keyManagerURL.getPort();\n-            String keyManagerProtocol = keyManagerURL.getProtocol();\n-            this.kmHttpClient = (CloseableHttpClient) APIUtil.getHttpClient(keyManagerPort, keyManagerProtocol);\n-        } catch (MalformedURLException e) {\n-            throw new APIManagementException(\"Error while initializing HttpClient due to malformed URL\", e);\n-        }\n-    }\n-\n     @Override\n     public void loadConfiguration(KeyManagerConfiguration configuration) throws APIManagementException {\n+\n         this.configuration = configuration;\n-        //Initialize a Http Client and Connection Manager using the ServerURL of KM\n-        initializeHttpClient();\n \n         String consumerKey = (String) configuration.getParameter(APIConstants.KEY_MANAGER_CONSUMER_KEY);\n         String consumerSecret = (String) configuration.getParameter(APIConstants.KEY_MANAGER_CONSUMER_SECRET);\n         String keyManagerServiceUrl = (String) configuration.getParameter(APIConstants.AUTHSERVER_URL);\n-        String tokenEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n-                \"/oauth2/token\");\n-        String revokeEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n-                \"/oauth2/revoke\");\n-        accessTokenGenerator = new AccessTokenGenerator(tokenEndpoint,revokeEndpoint,consumerKey,consumerSecret);\n \n-        try {\n-            java.net.URL keyManagerServicesURL = new java.net.URL(keyManagerServiceUrl);\n-            int keyManagerPort = keyManagerServicesURL.getPort();\n-            String keyManagerProtocol = keyManagerServicesURL.getProtocol();\n-            String keyManagerHost = keyManagerServicesURL.getHost();\n-            String keyManagerURL = keyManagerProtocol.concat(\"://\").concat(keyManagerHost);\n-            if (keyManagerPort != 0) {\n-                keyManagerURL = keyManagerURL.concat(\":\").concat(Integer.toString(keyManagerPort));\n-            }\n-            String authEndpoint = tokenEndpoint.replace(\"/token\", \"\");\n-            revokeEndpoint = revokeEndpoint.replace(\"/revoke\", \"\");\n-\n-            dcrClient = Feign.builder()\n-                    .client(new OkHttpClient())\n-                    .encoder(new GsonEncoder())\n-                    .decoder(new GsonDecoder())\n-                    .logger(new Slf4jLogger())\n-                    .errorDecoder(new KMClientErrorDecoder())\n-                    .target(DCRClient.class, keyManagerURL);\n-            authClient = Feign.builder()\n-                    .client(new OkHttpClient())\n-                    .encoder(new GsonEncoder())\n-                    .decoder(new GsonDecoder())\n-                    .logger(new Slf4jLogger())\n-                    .errorDecoder(new KMClientErrorDecoder()    )\n-                    .encoder(new FormEncoder())\n-                    .target(AuthClient.class, authEndpoint);\n-            revokeClient = Feign.builder()\n-                    .client(new OkHttpClient())\n-                    .encoder(new GsonEncoder())\n-                    .decoder(new GsonDecoder())\n-                    .logger(new Slf4jLogger())\n-                    .errorDecoder(new KMClientErrorDecoder()    )\n-                    .encoder(new FormEncoder())\n-                    .target(AuthClient.class, revokeEndpoint);\n-            introspectionClient = Feign.builder()\n-                    .client(new OkHttpClient())\n-                    .encoder(new GsonEncoder())\n-                    .decoder(new GsonDecoder())\n-                    .logger(new Slf4jLogger())\n-                    .errorDecoder(new KMClientErrorDecoder())\n-                    .encoder(new FormEncoder())\n-                    .target(IntrospectionClient.class, keyManagerURL.concat(\"/oauth2/introspect\"));\n-\n-        } catch (MalformedURLException e) {\n-            log.error(\"Error in parsing the Key Validator URL provided: \" + keyManagerServiceUrl, e);\n+        String dcrEndpoint;\n+        if (configuration.getParameter(APIConstants.KeyManager.CLIENT_REGISTRATION_ENDPOINT) != null) {\n+            dcrEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.CLIENT_REGISTRATION_ENDPOINT);\n+        } else {\n+            dcrEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0]\n+                    .concat(getTenantAwareContext().trim()).concat(\"/api/identity/oauth2/dcr/v1.1/register\");", "originalCommit": "815de6f460727cc71b9054aeab3ce71f4792c2f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODU5OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8764#discussion_r442678599", "bodyText": "this might be ok since we have option to read from configuration", "author": "tharindu1st", "createdAt": "2020-06-19T07:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NjA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e77aee47a9436792d62ee296382d46f2d0eb315a", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java\nindex fe4a8b83ede..916eec0569e 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AMDefaultKeyManagerImpl.java\n\n@@ -440,99 +500,86 @@ public class AMDefaultKeyManagerImpl extends AbstractKeyManager {\n         if (appResponse.getGrantTypes() != null) {\n             oAuthApplicationInfo.addParameter(ApplicationConstants.OAUTH_CLIENT_GRANT,\n                     String.join(\" \", appResponse.getGrantTypes()));\n+        } else if (oAuthApplicationInfo.getParameter(ApplicationConstants.OAUTH_CLIENT_GRANT) instanceof String) {\n+            oAuthApplicationInfo.addParameter(ApplicationConstants.OAUTH_CLIENT_GRANT, ((String) oAuthApplicationInfo.\n+                    getParameter(ApplicationConstants.OAUTH_CLIENT_GRANT)).replace(\",\", \" \"));\n         }\n         oAuthApplicationInfo.addParameter(ApplicationConstants.OAUTH_CLIENT_NAME, appResponse.getClientName());\n         return oAuthApplicationInfo;\n     }\n \n+    /**\n+     * This method initialize the HTTP Client and Connection Manager to call services in KeyManager.\n+     *\n+     * @throws APIManagementException if an error occurs while initializing HttpClient\n+     */\n+    protected void initializeHttpClient() throws APIManagementException {\n+\n+        try {\n+            String authServerURL = (String) configuration.getParameter(APIConstants.AUTHSERVER_URL);\n+            java.net.URL keyManagerURL = new java.net.URL(authServerURL);\n+            int keyManagerPort = keyManagerURL.getPort();\n+            String keyManagerProtocol = keyManagerURL.getProtocol();\n+            this.kmHttpClient = (CloseableHttpClient) APIUtil.getHttpClient(keyManagerPort, keyManagerProtocol);\n+        } catch (MalformedURLException e) {\n+            throw new APIManagementException(\"Error while initializing HttpClient due to malformed URL\", e);\n+        }\n+    }\n+\n     @Override\n     public void loadConfiguration(KeyManagerConfiguration configuration) throws APIManagementException {\n-\n         this.configuration = configuration;\n+        //Initialize a Http Client and Connection Manager using the ServerURL of KM\n+        initializeHttpClient();\n \n         String consumerKey = (String) configuration.getParameter(APIConstants.KEY_MANAGER_CONSUMER_KEY);\n         String consumerSecret = (String) configuration.getParameter(APIConstants.KEY_MANAGER_CONSUMER_SECRET);\n         String keyManagerServiceUrl = (String) configuration.getParameter(APIConstants.AUTHSERVER_URL);\n+        String tokenEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n+                \"/oauth2/token\");\n+        String revokeEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n+                \"/oauth2/revoke\");\n+        accessTokenGenerator = new AccessTokenGenerator(tokenEndpoint,revokeEndpoint,consumerKey,consumerSecret);\n \n-        String dcrEndpoint;\n-        if (configuration.getParameter(APIConstants.KeyManager.CLIENT_REGISTRATION_ENDPOINT) != null) {\n-            dcrEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.CLIENT_REGISTRATION_ENDPOINT);\n-        } else {\n-            dcrEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0]\n-                    .concat(getTenantAwareContext().trim()).concat(\"/api/identity/oauth2/dcr/v1.1/register\");\n-        }\n-        String tokenEndpoint;\n-        if (configuration.getParameter(APIConstants.KeyManager.TOKEN_ENDPOINT) != null) {\n-            tokenEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.TOKEN_ENDPOINT);\n-        } else {\n-            tokenEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n-                    \"/oauth2/token\");\n-        }\n-        String revokeEndpoint;\n-        if (configuration.getParameter(APIConstants.KeyManager.REVOKE_ENDPOINT) != null) {\n-            revokeEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.REVOKE_ENDPOINT);\n-        } else {\n-            revokeEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0].concat(\n-                    \"/oauth2/revoke\");\n-        }\n-        String scopeEndpoint;\n-        if (configuration.getParameter(APIConstants.KeyManager.SCOPE_MANAGEMENT_ENDPOINT) != null) {\n-            scopeEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.SCOPE_MANAGEMENT_ENDPOINT);\n-        } else {\n-            scopeEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0]\n-                    .concat(getTenantAwareContext().trim())\n-                    .concat(APIConstants.KEY_MANAGER_OAUTH2_SCOPES_REST_API_BASE_PATH);\n+        try {\n+            java.net.URL keyManagerServicesURL = new java.net.URL(keyManagerServiceUrl);\n+            int keyManagerPort = keyManagerServicesURL.getPort();\n+            String keyManagerProtocol = keyManagerServicesURL.getProtocol();\n+            String keyManagerHost = keyManagerServicesURL.getHost();\n+            String keyManagerURL = keyManagerProtocol.concat(\"://\").concat(keyManagerHost);\n+            if (keyManagerPort != 0) {\n+                keyManagerURL = keyManagerURL.concat(\":\").concat(Integer.toString(keyManagerPort));\n+            }\n+            String authEndpoint = tokenEndpoint.replace(\"/token\", \"\");\n+            revokeEndpoint = revokeEndpoint.replace(\"/revoke\", \"\");\n+\n+            dcrClient = Feign.builder()\n+                    .client(new OkHttpClient())\n+                    .encoder(new GsonEncoder())\n+                    .decoder(new GsonDecoder())\n+                    .logger(new Slf4jLogger())\n+                    .errorDecoder(new KMClientErrorDecoder())\n+                    .target(DCRClient.class, keyManagerURL);\n+            authClient = Feign.builder()\n+                    .client(new OkHttpClient())\n+                    .encoder(new GsonEncoder())\n+                    .decoder(new GsonDecoder())\n+                    .logger(new Slf4jLogger())\n+                    .errorDecoder(new KMClientErrorDecoder())\n+                    .encoder(new FormEncoder())\n+                    .target(AuthClient.class, authEndpoint);\n+            introspectionClient = Feign.builder()\n+                    .client(new OkHttpClient())\n+                    .encoder(new GsonEncoder())\n+                    .decoder(new GsonDecoder())\n+                    .logger(new Slf4jLogger())\n+                    .errorDecoder(new KMClientErrorDecoder())\n+                    .encoder(new FormEncoder())\n+                    .target(IntrospectionClient.class, keyManagerURL.concat(\"/oauth2/introspect\"));\n+\n+        } catch (MalformedURLException e) {\n+            log.error(\"Error in parsing the Key Validator URL provided: \" + keyManagerServiceUrl, e);\n         }\n-        String introspectionEndpoint;\n-        if (configuration.getParameter(APIConstants.KeyManager.INTROSPECTION_ENDPOINT) != null) {\n-            introspectionEndpoint = (String) configuration.getParameter(APIConstants.KeyManager.INTROSPECTION_ENDPOINT);\n-        } else {\n-            introspectionEndpoint = keyManagerServiceUrl.split(\"/\" + APIConstants.SERVICES_URL_RELATIVE_PATH)[0]\n-                    .concat(\"/oauth2/introspect\");\n-        }\n-        accessTokenGenerator = new AccessTokenGenerator(tokenEndpoint, revokeEndpoint, consumerKey, consumerSecret);\n-\n-        dcrClient = Feign.builder()\n-                .client(new OkHttpClient())\n-                .encoder(new GsonEncoder())\n-                .decoder(new GsonDecoder())\n-                .logger(new Slf4jLogger())\n-                .requestInterceptor(new BearerInterceptor(accessTokenGenerator))\n-                .errorDecoder(new KMClientErrorDecoder())\n-                .target(DCRClient.class, dcrEndpoint);\n-        authClient = Feign.builder()\n-                .client(new OkHttpClient())\n-                .encoder(new GsonEncoder())\n-                .decoder(new GsonDecoder())\n-                .logger(new Slf4jLogger())\n-                .errorDecoder(new KMClientErrorDecoder())\n-                .encoder(new FormEncoder())\n-                .target(AuthClient.class, tokenEndpoint);\n-        revokeClient = Feign.builder()\n-                .client(new OkHttpClient())\n-                .encoder(new GsonEncoder())\n-                .decoder(new GsonDecoder())\n-                .logger(new Slf4jLogger())\n-                .errorDecoder(new KMClientErrorDecoder())\n-                .encoder(new FormEncoder())\n-                .target(AuthClient.class, revokeEndpoint);\n-        introspectionClient = Feign.builder()\n-                .client(new OkHttpClient())\n-                .encoder(new GsonEncoder())\n-                .decoder(new GsonDecoder())\n-                .logger(new Slf4jLogger())\n-                .requestInterceptor(new BearerInterceptor(accessTokenGenerator))\n-                .errorDecoder(new KMClientErrorDecoder())\n-                .encoder(new FormEncoder())\n-                .target(IntrospectionClient.class, introspectionEndpoint);\n-        scopeClient = Feign.builder()\n-                .client(new OkHttpClient())\n-                .encoder(new GsonEncoder())\n-                .decoder(new GsonDecoder())\n-                .logger(new Slf4jLogger())\n-                .requestInterceptor(new BearerInterceptor(accessTokenGenerator))\n-                .errorDecoder(new KMClientErrorDecoder())\n-                .target(ScopeClient.class, scopeEndpoint);\n     }\n \n     @Override\n"}}, {"oid": "e77aee47a9436792d62ee296382d46f2d0eb315a", "url": "https://github.com/wso2/carbon-apimgt/commit/e77aee47a9436792d62ee296382d46f2d0eb315a", "message": "add feign jars as bundles", "committedDate": "2020-06-18T07:48:58Z", "type": "commit"}, {"oid": "b63683986196c48bb1dac8c8f9457938354c88f2", "url": "https://github.com/wso2/carbon-apimgt/commit/b63683986196c48bb1dac8c8f9457938354c88f2", "message": "refactor scope client to feign", "committedDate": "2020-06-18T07:49:47Z", "type": "commit"}, {"oid": "b63683986196c48bb1dac8c8f9457938354c88f2", "url": "https://github.com/wso2/carbon-apimgt/commit/b63683986196c48bb1dac8c8f9457938354c88f2", "message": "refactor scope client to feign", "committedDate": "2020-06-18T07:49:47Z", "type": "forcePushed"}, {"oid": "20698321e81574fcf733b60ec92b780d3c7bd040", "url": "https://github.com/wso2/carbon-apimgt/commit/20698321e81574fcf733b60ec92b780d3c7bd040", "message": "fix tenantcy in introspection endpoint", "committedDate": "2020-06-19T04:06:37Z", "type": "forcePushed"}, {"oid": "72ffa02e5b4e44fc72ca097b0fc1a3287c7be4cb", "url": "https://github.com/wso2/carbon-apimgt/commit/72ffa02e5b4e44fc72ca097b0fc1a3287c7be4cb", "message": "fix tenantcy in introspection endpoint", "committedDate": "2020-06-19T07:31:43Z", "type": "commit"}, {"oid": "72ffa02e5b4e44fc72ca097b0fc1a3287c7be4cb", "url": "https://github.com/wso2/carbon-apimgt/commit/72ffa02e5b4e44fc72ca097b0fc1a3287c7be4cb", "message": "fix tenantcy in introspection endpoint", "committedDate": "2020-06-19T07:31:43Z", "type": "forcePushed"}]}