{"pr_number": 8251, "pr_title": "Adding visibility of docs when API is made public from the restricted by roles", "pr_createdAt": "2020-02-25T11:21:02Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8251", "timeline": [{"oid": "da593ef2fbff45f1496b205ad5928e4b9552f801", "url": "https://github.com/wso2/carbon-apimgt/commit/da593ef2fbff45f1496b205ad5928e4b9552f801", "message": "Added visibility of doc when API is made public from restricted by roles", "committedDate": "2020-02-25T11:12:57Z", "type": "commit"}, {"oid": "2c1fc4019ef8da12ce9548410f03ecd9708a948d", "url": "https://github.com/wso2/carbon-apimgt/commit/2c1fc4019ef8da12ce9548410f03ecd9708a948d", "message": "Removed commented lines.", "committedDate": "2020-02-25T11:19:11Z", "type": "commit"}, {"oid": "e1ac162ed3524cadebf35d38f9754f17c8e7f313", "url": "https://github.com/wso2/carbon-apimgt/commit/e1ac162ed3524cadebf35d38f9754f17c8e7f313", "message": "Reformatted.", "committedDate": "2020-02-25T11:35:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MDY1MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r383890651", "bodyText": "Shall we make this a constant?", "author": "mushthaq33", "createdAt": "2020-02-25T13:52:40Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java", "diffHunk": "@@ -2282,6 +2281,23 @@ public void testUpdateAPI_InCreatedState() throws RegistryException, UserStoreEx\n \n \n         List<Documentation> documentationList = getDocumentationList();\n+        Documentation documentation = documentationList.get(1);\n+        Mockito.when(APIUtil.getAPIDocPath(api.getId())).thenReturn(documentation.getFilePath());\n+        APIProviderImplWrapper apiProviderImplWrapper = new APIProviderImplWrapper(apimgtDAO, null, null);\n+        Resource docResource = Mockito.mock(Resource.class);\n+        Mockito.when(docResource.getUUID()).thenReturn(documentation.getId());\n+        Mockito.when(apiProviderImplWrapper.registry.get(documentation.getFilePath())).thenReturn(docResource);\n+\n+        GenericArtifact docArtifact = Mockito.mock(GenericArtifact.class);\n+        Mockito.when(artifactManager.getGenericArtifact(documentation.getId())).thenReturn(docArtifact);\n+        Mockito.when(APIUtil.getDocumentation(docArtifact)).thenReturn(documentation);\n+        Mockito.when(docArtifact.getPath()).thenReturn(\"artifact/path\");", "originalCommit": "e1ac162ed3524cadebf35d38f9754f17c8e7f313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2MTUxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r384261517", "bodyText": "fixed with f49c9d3", "author": "Meruja", "createdAt": "2020-02-26T03:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MDY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f49c9d3f081876d70d326565a7a5ea85b31633df", "chunk": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java\nindex a0c94448e94..6e8c091e5a5 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/java/org/wso2/carbon/apimgt/impl/APIProviderImplTest.java\n\n@@ -2291,12 +2291,13 @@ public class APIProviderImplTest {\n         GenericArtifact docArtifact = Mockito.mock(GenericArtifact.class);\n         Mockito.when(artifactManager.getGenericArtifact(documentation.getId())).thenReturn(docArtifact);\n         Mockito.when(APIUtil.getDocumentation(docArtifact)).thenReturn(documentation);\n-        Mockito.when(docArtifact.getPath()).thenReturn(\"artifact/path\");\n+        String artifactPath = \"artifact/path\";\n+        Mockito.when(docArtifact.getPath()).thenReturn(artifactPath);\n         PowerMockito.doNothing().when(APIUtil.class, \"clearResourcePermissions\", Mockito.any(), Mockito.any(),\n                 Mockito.anyInt());\n \n         String[] roles = {\"admin\", \"subscriber\"};\n-        APIUtil.setResourcePermissions(\"admin\", \"Public\", roles, \"artifact/path\");\n+        APIUtil.setResourcePermissions(\"admin\", \"Public\", roles, artifactPath);\n         Mockito.when(docArtifact.getAttribute(APIConstants.DOC_FILE_PATH)).thenReturn(\"docFilePath\");\n \n         final APIProviderImplWrapper apiProvider = new APIProviderImplWrapper(apimgtDAO, documentationList, null);\n"}}, {"oid": "f49c9d3f081876d70d326565a7a5ea85b31633df", "url": "https://github.com/wso2/carbon-apimgt/commit/f49c9d3f081876d70d326565a7a5ea85b31633df", "message": "Added constant.", "committedDate": "2020-02-26T03:47:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTcwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450049708", "bodyText": "Add context information to error logs", "author": "tgtshanika", "createdAt": "2020-07-06T08:02:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);\n+            }\n+        } catch (RegistryException e) {\n+            handleException(\"Failed to update visibility of documentation\", e);", "originalCommit": "f49c9d3f081876d70d326565a7a5ea85b31633df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMDkyMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450330923", "bodyText": "Fixed with ec30343", "author": "Meruja", "createdAt": "2020-07-06T16:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTcwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MDk2Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450050966", "bodyText": "This operation is not related to API creation right? This is related to doc visibility update. Please modify the error messages accrdingly.", "author": "tgtshanika", "createdAt": "2020-07-06T08:04:47Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -3154,6 +3163,57 @@ public void addDocumentationContent(API api, String documentationName, String te\n         }\n     }\n \n+    /**\n+     * Updates a visibility of the documentation\n+     *\n+     * @param api               API\n+     * @param documentation    Documentation\n+     * @throws APIManagementException if failed to update visibility\n+     */\n+    private void updateDocVisibility(API api, Documentation documentation) throws APIManagementException {\n+        try {\n+            GenericArtifactManager artifactManager = APIUtil.getArtifactManager(registry,APIConstants.DOCUMENTATION_KEY);\n+            if (artifactManager == null) {\n+                String errorMessage = \"Artifact manager is null when updating documentation of API \" +\n+                        api.getId().getApiName();\n+                throw new APIManagementException(errorMessage);\n+            }\n+\n+            GenericArtifact artifact = artifactManager.getGenericArtifact(documentation.getId());\n+            String[] authorizedRoles = new String[0];\n+            String visibleRolesList = api.getVisibleRoles();\n+            if (visibleRolesList != null) {\n+                authorizedRoles = visibleRolesList.split(\",\");\n+            }\n+\n+            int tenantId;\n+            String tenantDomain =\n+                    MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(api.getId().getProviderName()));\n+            try {\n+                tenantId = getTenantId(tenantDomain);\n+\n+                GenericArtifact updateApiArtifact = APIUtil.createDocArtifactContent(artifact, api.getId(), documentation);\n+                artifactManager.updateGenericArtifact(updateApiArtifact);\n+                APIUtil.clearResourcePermissions(artifact.getPath(), api.getId(), tenantId);\n+\n+                APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), authorizedRoles,\n+                        artifact.getPath(), registry);\n+\n+                String docFilePath = artifact.getAttribute(APIConstants.DOC_FILE_PATH);\n+                if (org.apache.commons.lang.StringUtils.isEmpty(docFilePath)) {\n+                    int startIndex = docFilePath.indexOf(\"governance\") + \"governance\".length();\n+                    String filePath = docFilePath.substring(startIndex, docFilePath.length());\n+                    APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(),\n+                            authorizedRoles, filePath, registry);\n+                }\n+            } catch (UserStoreException e) {\n+                throw new APIManagementException(\"Error in retrieving Tenant Information while adding api :\"\n+                        + api.getId().getApiName(), e);", "originalCommit": "f49c9d3f081876d70d326565a7a5ea85b31633df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMDk4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8251#discussion_r450330981", "bodyText": "Fixed with ec30343", "author": "Meruja", "createdAt": "2020-07-06T16:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA1MDk2Ng=="}], "type": "inlineReview", "revised_code": null}]}