{"pr_number": 86, "pr_title": "Copy NdArrays to standard arrays of n-dimensions", "pr_createdAt": "2020-07-21T20:15:01Z", "pr_url": "https://github.com/tensorflow/java/pull/86", "timeline": [{"oid": "201489ed1ffaff3be0c6b4e639ccb603821ac7d8", "url": "https://github.com/tensorflow/java/commit/201489ed1ffaff3be0c6b4e639ccb603821ac7d8", "message": "Copy NdArrays to standard arrays", "committedDate": "2020-07-22T02:47:06Z", "type": "commit"}, {"oid": "201489ed1ffaff3be0c6b4e639ccb603821ac7d8", "url": "https://github.com/tensorflow/java/commit/201489ed1ffaff3be0c6b4e639ccb603821ac7d8", "message": "Copy NdArrays to standard arrays", "committedDate": "2020-07-22T02:47:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NjIwMg==", "url": "https://github.com/tensorflow/java/pull/86#discussion_r458946202", "bodyText": "dimensions should probably be dimensional, but I don't think it's necessary.", "author": "Craigacp", "createdAt": "2020-07-22T17:02:56Z", "path": "ndarray/src/main/java/org/tensorflow/ndarray/StdArrays.java", "diffHunk": "@@ -585,663 +588,2216 @@ public static BooleanNdArray ndCopyOf(boolean[][][][][][] array) {\n   public static <T> NdArray<T> ndCopyOf(T[][][][][][] array) {\n     @SuppressWarnings(\"unchecked\")\n     NdArray<T>ndArray = NdArrays.ofObjects(componentTypeOf(array), shapeOf(array));\n-    copyTo(ndArray, array);\n+    copyTo(array, ndArray);\n     return ndArray;\n   }\n \n+  /**\n+   * Copy a {@link IntNdArray} in a new 1-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[] array1dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    int[] array = new int[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link IntNdArray} in a new 2-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[][] array2dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    int[][] array = new int[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link IntNdArray} in a new 3-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[][][] array3dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    int[][][] array = new int[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link IntNdArray} in a new 4-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[][][][] array4dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    int[][][][] array = new int[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link IntNdArray} in a new 5-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[][][][][] array5dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    int[][][][][] array = new int[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link IntNdArray} in a new 6-dimension standard array of ints\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static int[][][][][][] array6dCopyOf(IntNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    int[][][][][][] array = new int[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 1-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[] array1dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    long[] array = new long[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 2-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[][] array2dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    long[][] array = new long[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 3-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[][][] array3dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    long[][][] array = new long[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 4-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[][][][] array4dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    long[][][][] array = new long[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 5-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[][][][][] array5dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    long[][][][][] array = new long[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link LongNdArray} in a new 6-dimension standard array of longs\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static long[][][][][][] array6dCopyOf(LongNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    long[][][][][][] array = new long[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 1-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[] array1dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    float[] array = new float[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 2-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[][] array2dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    float[][] array = new float[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 3-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[][][] array3dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    float[][][] array = new float[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 4-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[][][][] array4dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    float[][][][] array = new float[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 5-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[][][][][] array5dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    float[][][][][] array = new float[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link FloatNdArray} in a new 6-dimension standard array of floats\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static float[][][][][][] array6dCopyOf(FloatNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    float[][][][][][] array = new float[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 1-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[] array1dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    double[] array = new double[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 2-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[][] array2dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    double[][] array = new double[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 3-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[][][] array3dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    double[][][] array = new double[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 4-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[][][][] array4dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    double[][][][] array = new double[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 5-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[][][][][] array5dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    double[][][][][] array = new double[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link DoubleNdArray} in a new 6-dimension standard array of doubles\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static double[][][][][][] array6dCopyOf(DoubleNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    double[][][][][][] array = new double[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 1-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[] array1dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    byte[] array = new byte[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 2-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[][] array2dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    byte[][] array = new byte[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 3-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[][][] array3dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    byte[][][] array = new byte[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 4-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[][][][] array4dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    byte[][][][] array = new byte[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 5-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[][][][][] array5dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    byte[][][][][] array = new byte[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ByteNdArray} in a new 6-dimension standard array of bytes\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static byte[][][][][][] array6dCopyOf(ByteNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    byte[][][][][][] array = new byte[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 1-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[] array1dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    short[] array = new short[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 2-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[][] array2dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    short[][] array = new short[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 3-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[][][] array3dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    short[][][] array = new short[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 4-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[][][][] array4dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    short[][][][] array = new short[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 5-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[][][][][] array5dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    short[][][][][] array = new short[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link ShortNdArray} in a new 6-dimension standard array of shorts\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static short[][][][][][] array6dCopyOf(ShortNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    short[][][][][][] array = new short[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 1-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[] array1dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    boolean[] array = new boolean[dims[0]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 2-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[][] array2dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    boolean[][] array = new boolean[dims[0]][dims[1]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 3-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[][][] array3dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    boolean[][][] array = new boolean[dims[0]][dims[1]][dims[2]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 4-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[][][][] array4dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    boolean[][][][] array = new boolean[dims[0]][dims[1]][dims[2]][dims[3]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 5-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[][][][][] array5dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    boolean[][][][][] array = new boolean[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link BooleanNdArray} in a new 6-dimension standard array of booleans\n+   *\n+   * @param ndArray source array\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static boolean[][][][][][] array6dCopyOf(BooleanNdArray ndArray) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    boolean[][][][][][] array = new boolean[dims[0]][dims[1]][dims[2]][dims[3]][dims[4]][dims[5]];\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 1-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-1 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[] array1dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 1);\n+    T[] array = (T[])Array.newInstance(objectType, dims[0]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 2-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-2 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[][] array2dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 2);\n+    T[][] array = (T[][])Array.newInstance(objectType, dims[0], dims[1]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 3-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-3 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[][][] array3dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 3);\n+    T[][][] array = (T[][][])Array.newInstance(objectType, dims[0], dims[1], dims[2]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 4-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-4 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[][][][] array4dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 4);\n+    T[][][][] array = (T[][][][])Array.newInstance(objectType, dims[0], dims[1], dims[2], dims[3]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 5-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-5 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[][][][][] array5dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 5);\n+    T[][][][][] array =\n+        (T[][][][][])Array.newInstance(objectType, dims[0], dims[1], dims[2], dims[3], dims[4]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n+  /**\n+   * Copy a {@link NdArray<T>} in a new 6-dimension standard array of objects\n+   *\n+   * @param ndArray source array\n+   * @param objectType type of object\n+   * @return the array copy\n+   * @throws IllegalArgumentException if {@code ndArray} is not of rank-6 or has a shape that\n+   *                                  exceeds standard arrays limits\n+   */\n+  public static <T> T[][][][][][] array6dCopyOf(NdArray<T> ndArray, Class<T> objectType) {\n+    int[] dims = computeArrayDims(ndArray, 6);\n+    T[][][][][][] array =\n+        (T[][][][][][])Array.newInstance(objectType, dims[0], dims[1], dims[2], dims[3], dims[4], dims[5]);\n+    copyFrom(ndArray, array);\n+    return array;\n+  }\n+\n   /**\n    * Copy a single-dimension array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-1 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-1 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[] array) {\n-    NdArrays.vectorOf(array).copyTo(dst);\n+  public static void copyTo(int[] src, IntNdArray dst) {\n+    NdArrays.vectorOf(src).copyTo(dst);\n   }\n \n   /**\n    * Copy a 2-dimensions array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-2 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-2 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[][] array) {\n+  public static void copyTo(int[][] src, IntNdArray dst) {\n     dst.elements(0).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 3-dimensions array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-3 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-3 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[][][] array) {\n+  public static void copyTo(int[][][] src, IntNdArray dst) {\n     dst.elements(1).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]][(int)idx[1]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]][(int)idx[1]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 4-dimensions array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-4 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-4 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[][][][] array) {\n+  public static void copyTo(int[][][][] src, IntNdArray dst) {\n     dst.elements(2).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]][(int)idx[1]][(int)idx[2]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]][(int)idx[1]][(int)idx[2]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 5-dimensions array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-5 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-5 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[][][][][] array) {\n+  public static void copyTo(int[][][][][] src, IntNdArray dst) {\n     dst.elements(3).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]][(int)idx[1]][(int)idx[2]][(int)idx[3]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]][(int)idx[1]][(int)idx[2]][(int)idx[3]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 6-dimensions array of ints into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-6 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-6 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(IntNdArray dst, int[][][][][][] array) {\n+  public static void copyTo(int[][][][][][] src, IntNdArray dst) {\n     dst.elements(4).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]][(int)idx[1]][(int)idx[2]][(int)idx[3]][(int)idx[4]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]][(int)idx[1]][(int)idx[2]][(int)idx[3]][(int)idx[4]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a single-dimension array of longs into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-1 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-1 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(LongNdArray dst, long[] array) {\n-    NdArrays.vectorOf(array).copyTo(dst);\n+  public static void copyTo(long[] src, LongNdArray dst) {\n+    NdArrays.vectorOf(src).copyTo(dst);\n   }\n \n   /**\n    * Copy a 2-dimensions array of longs into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-2 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-2 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(LongNdArray dst, long[][] array) {\n+  public static void copyTo(long[][] src, LongNdArray dst) {\n     dst.elements(0).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 3-dimensions array of longs into the {@code dst} {@link NdArray}\n    *\n+   * @param src source array\n    * @param dst destination rank-3 array\n-   * @param array source array\n    * @throws IllegalArgumentException if {@code dst} is not of rank-3 or has an incompatible shape\n    *                                  with the source array\n    */\n-  public static void copyTo(LongNdArray dst, long[][][] array) {\n+  public static void copyTo(long[][][] src, LongNdArray dst) {\n     dst.elements(1).forEachIndexed((idx, e) ->\n-        NdArrays.vectorOf(array[(int)idx[0]][(int)idx[1]]).copyTo(e)\n+        NdArrays.vectorOf(src[(int)idx[0]][(int)idx[1]]).copyTo(e)\n     );\n   }\n \n   /**\n    * Copy a 4-dimensions array of longs into the {@code dst} {@link NdArray}", "originalCommit": "201489ed1ffaff3be0c6b4e639ccb603821ac7d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18c0cd68d4848c953b74f16f0fb201908c66641c", "chunk": "diff --git a/ndarray/src/main/java/org/tensorflow/ndarray/StdArrays.java b/ndarray/src/main/java/org/tensorflow/ndarray/StdArrays.java\nindex 62ad2853..84a2a84e 100644\n--- a/ndarray/src/main/java/org/tensorflow/ndarray/StdArrays.java\n+++ b/ndarray/src/main/java/org/tensorflow/ndarray/StdArrays.java\n\n@@ -580,7 +580,7 @@ public final class StdArrays {\n   }\n \n   /**\n-   * Copy a 6-dimensions array of objects in a new {@link NdArray}\n+   * Copy a 6-dimensional array of objects in a new {@link NdArray}\n    *\n    * @param array source array\n    * @return the {@code NdArray} copy\n"}}, {"oid": "18c0cd68d4848c953b74f16f0fb201908c66641c", "url": "https://github.com/tensorflow/java/commit/18c0cd68d4848c953b74f16f0fb201908c66641c", "message": "Fix documentation", "committedDate": "2020-07-23T01:09:59Z", "type": "commit"}]}