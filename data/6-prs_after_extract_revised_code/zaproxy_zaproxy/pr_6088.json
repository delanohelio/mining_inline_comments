{"pr_number": 6088, "pr_title": "Add partial CSRF token search", "pr_createdAt": "2020-07-21T21:12:59Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6088", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNjg0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499836840", "bodyText": "The IS_ could be removed, more common without it, same for the key.", "author": "thc202", "createdAt": "2020-10-05T19:56:28Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -43,6 +43,9 @@\n     private static final String CONFIRM_REMOVE_TOKEN_KEY =\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n+    private static final String IS_PARTIAL_MATCHING_ENABLED_KEY =", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 708d00934..8d568e4c6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -43,8 +43,8 @@ public class AntiCsrfParam extends AbstractParam {\n     private static final String CONFIRM_REMOVE_TOKEN_KEY =\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n-    private static final String IS_PARTIAL_MATCHING_ENABLED_KEY =\n-            ANTI_CSRF_BASE_KEY + \".isPartialMatchingEnable\";\n+    private static final String PARTIAL_MATCHING_ENABLED =\n+            ANTI_CSRF_BASE_KEY + \".partialMatchingEnable\";\n \n     private static final String[] DEFAULT_TOKENS_NAMES = {\n         \"anticsrf\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNjg2MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499836861", "bodyText": "partial...", "author": "thc202", "createdAt": "2020-10-05T19:56:30Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -54,14 +57,17 @@\n         \"csrf_token\",\n         \"_csrf\",\n         \"_csrfSecret\",\n-        \"__csrf_magic\"\n+        \"__csrf_magic\",\n+        \"CSRF\"\n     };\n \n     private List<AntiCsrfParamToken> tokens = null;\n     private List<String> enabledTokensNames = null;\n \n     private boolean confirmRemoveToken = true;\n \n+    private boolean isPartialMatchingEnabled = true;", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 708d00934..8d568e4c6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -66,7 +66,7 @@ public class AntiCsrfParam extends AbstractParam {\n \n     private boolean confirmRemoveToken = true;\n \n-    private boolean isPartialMatchingEnabled = true;\n+    private boolean partialMatchingEnabled = true;\n \n     public AntiCsrfParam() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzAxMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837011", "bodyText": "Any reason to not have this exposed in the API? (Same for the setter.)", "author": "thc202", "createdAt": "2020-10-05T19:56:48Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 708d00934..8d568e4c6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -205,15 +205,17 @@ public class AntiCsrfParam extends AbstractParam {\n     }\n \n     /** Returns true if should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public boolean getIsPartialMatchingEnabled() {\n-        return isPartialMatchingEnabled;\n+    public boolean isPartialMatchingEnabled() {\n+        return partialMatchingEnabled;\n     }\n \n-    /** Define if ZAP should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public void setIsPartialMatchingEnabled(boolean enabled) {\n-        this.isPartialMatchingEnabled = enabled;\n-        getConfig().setProperty(IS_PARTIAL_MATCHING_ENABLED_KEY, isPartialMatchingEnabled);\n+    /**\n+     * Define if ZAP should detect CSRF variables by searching for partial matches.\n+     *\n+     * @param enabled\n+     */\n+    public void setPartialMatchingEnabled(boolean enabled) {\n+        this.partialMatchingEnabled = enabled;\n+        getConfig().setProperty(PARTIAL_MATCHING_ENABLED, partialMatchingEnabled);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzA0OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837049", "bodyText": "isPartial...", "author": "thc202", "createdAt": "2020-10-05T19:56:52Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public boolean getIsPartialMatchingEnabled() {", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 708d00934..8d568e4c6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -205,15 +205,17 @@ public class AntiCsrfParam extends AbstractParam {\n     }\n \n     /** Returns true if should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public boolean getIsPartialMatchingEnabled() {\n-        return isPartialMatchingEnabled;\n+    public boolean isPartialMatchingEnabled() {\n+        return partialMatchingEnabled;\n     }\n \n-    /** Define if ZAP should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public void setIsPartialMatchingEnabled(boolean enabled) {\n-        this.isPartialMatchingEnabled = enabled;\n-        getConfig().setProperty(IS_PARTIAL_MATCHING_ENABLED_KEY, isPartialMatchingEnabled);\n+    /**\n+     * Define if ZAP should detect CSRF variables by searching for partial matches.\n+     *\n+     * @param enabled\n+     */\n+    public void setPartialMatchingEnabled(boolean enabled) {\n+        this.partialMatchingEnabled = enabled;\n+        getConfig().setProperty(PARTIAL_MATCHING_ENABLED, partialMatchingEnabled);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzEzOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837138", "bodyText": "setPartial...", "author": "thc202", "createdAt": "2020-10-05T19:57:02Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,17 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public boolean getIsPartialMatchingEnabled() {\n+        return isPartialMatchingEnabled;\n+    }\n+\n+    /** Define if ZAP should detect CSRF variables by searching for partial matches. */\n+    @ZapApiIgnore\n+    public void setIsPartialMatchingEnabled(boolean enabled) {", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 708d00934..8d568e4c6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -205,15 +205,17 @@ public class AntiCsrfParam extends AbstractParam {\n     }\n \n     /** Returns true if should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public boolean getIsPartialMatchingEnabled() {\n-        return isPartialMatchingEnabled;\n+    public boolean isPartialMatchingEnabled() {\n+        return partialMatchingEnabled;\n     }\n \n-    /** Define if ZAP should detect CSRF variables by searching for partial matches. */\n-    @ZapApiIgnore\n-    public void setIsPartialMatchingEnabled(boolean enabled) {\n-        this.isPartialMatchingEnabled = enabled;\n-        getConfig().setProperty(IS_PARTIAL_MATCHING_ENABLED_KEY, isPartialMatchingEnabled);\n+    /**\n+     * Define if ZAP should detect CSRF variables by searching for partial matches.\n+     *\n+     * @param enabled\n+     */\n+    public void setPartialMatchingEnabled(boolean enabled) {\n+        this.partialMatchingEnabled = enabled;\n+        getConfig().setProperty(PARTIAL_MATCHING_ENABLED, partialMatchingEnabled);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzM5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837396", "bodyText": "Does it need to be public? The following could be called directly in the method.", "author": "thc202", "createdAt": "2020-10-05T19:57:32Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -196,6 +197,11 @@ protected AntiCsrfParam getParam() {\n         return this.getParam().getTokensNames();\n     }\n \n+    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    public Boolean getIsPartialMatchingEnabled() {", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\nindex 6d65ad9d9..1d576bf35 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n\n@@ -197,11 +201,6 @@ public class ExtensionAntiCSRF extends ExtensionAdaptor implements SessionChange\n         return this.getParam().getTokensNames();\n     }\n \n-    /** Returns true if should detect CSRF variables by searching for partial matches. */\n-    public Boolean getIsPartialMatchingEnabled() {\n-        return this.getParam().getIsPartialMatchingEnabled();\n-    }\n-\n     /**\n      * Adds the given token name, enabled by default.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNzU2Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r499837562", "bodyText": "The null check could be moved to isKnownAntiCsrfToken as well.", "author": "thc202", "createdAt": "2020-10-05T19:57:56Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -362,24 +368,14 @@ public String getTokenValue(HttpMessage tokenMsg, String tokenName) {\n \n                         String attId = inputElement.getAttributeValue(\"ID\");\n                         boolean found = false;\n-                        if (attId != null) {\n-                            for (String tokenName : this.getAntiCsrfTokenNames()) {\n-                                if (tokenName.equalsIgnoreCase(attId)) {\n-                                    list.add(new AntiCsrfToken(msg, attId, value, formIndex));\n-                                    found = true;\n-                                    break;\n-                                }\n-                            }\n+                        if (attId != null && isKnownAntiCsrfToken(attId)) {", "originalCommit": "a131708d1a00eea153633bc291ff14533b71e37c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\nindex 6d65ad9d9..1d576bf35 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n\n@@ -368,13 +367,13 @@ public class ExtensionAntiCSRF extends ExtensionAdaptor implements SessionChange\n \n                         String attId = inputElement.getAttributeValue(\"ID\");\n                         boolean found = false;\n-                        if (attId != null && isKnownAntiCsrfToken(attId)) {\n+                        if (isKnownAntiCsrfToken(attId)) {\n                             list.add(new AntiCsrfToken(msg, attId, value, formIndex));\n                             found = true;\n                         }\n                         if (!found) {\n                             String name = inputElement.getAttributeValue(\"NAME\");\n-                            if (name != null && isKnownAntiCsrfToken(name)) {\n+                            if (isKnownAntiCsrfToken(name)) {\n                                 list.add(new AntiCsrfToken(msg, name, value, formIndex));\n                             }\n                         }\n"}}, {"oid": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "url": "https://github.com/zaproxy/zaproxy/commit/2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "message": "Add Tests\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-10-09T09:30:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNDc2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502434768", "bodyText": "Just noticed that it's missing the d in Enabled.", "author": "thc202", "createdAt": "2020-10-09T13:40:57Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -43,6 +43,9 @@\n     private static final String CONFIRM_REMOVE_TOKEN_KEY =\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n+    private static final String PARTIAL_MATCHING_ENABLED =\n+            ANTI_CSRF_BASE_KEY + \".partialMatchingEnable\";", "originalCommit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7148d4a56f5926a13b56a423965aa845b27784db", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 8d568e4c6..043c04bb3 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -44,7 +44,7 @@ public class AntiCsrfParam extends AbstractParam {\n             ANTI_CSRF_BASE_KEY + \".confirmRemoveToken\";\n \n     private static final String PARTIAL_MATCHING_ENABLED =\n-            ANTI_CSRF_BASE_KEY + \".partialMatchingEnable\";\n+            ANTI_CSRF_BASE_KEY + \".partialMatchingEnabled\";\n \n     private static final String[] DEFAULT_TOKENS_NAMES = {\n         \"anticsrf\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzQ0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437440", "bodyText": "Could you move this to after the comment? (Same comment for the following test.)", "author": "thc202", "createdAt": "2020-10-09T13:45:09Z", "path": "zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java", "diffHunk": "@@ -240,6 +240,49 @@ void shouldGetTokensFromInputFieldsIfIdAndNameIsAKnownTokenWithDifferentCase() {\n             assertAntiCsrfToken(\n                     tokens.get(1), message, KNOWN_TOKEN_2.toLowerCase(Locale.ROOT), \"value2\", 0);\n         }\n+\n+        @Test\n+        void\n+                shouldGetTokensFromInputFieldsIfIdAndNameIncludesAKnownTokenAndPartialMatchingEnabled() {\n+            given(antiCsrfParam.isPartialMatchingEnabled()).willReturn(true);", "originalCommit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7148d4a56f5926a13b56a423965aa845b27784db", "chunk": "diff --git a/zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java b/zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java\nindex db6a455a1..09ffc2722 100644\n--- a/zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRFUnitTest.java\n\n@@ -244,8 +244,8 @@ class ExtensionAntiCSRFUnitTest {\n         @Test\n         void\n                 shouldGetTokensFromInputFieldsIfIdAndNameIncludesAKnownTokenAndPartialMatchingEnabled() {\n-            given(antiCsrfParam.isPartialMatchingEnabled()).willReturn(true);\n             // Given\n+            given(antiCsrfParam.isPartialMatchingEnabled()).willReturn(true);\n             String stringWithKnownToken1 = \"xxx\" + KNOWN_TOKEN_1 + \"xxx\";\n             String stringWithKnownToken2 = \"xxx\" + KNOWN_TOKEN_2 + \"xxx\";\n             String stringWithKnownToken3 = \"xxx\" + KNOWN_TOKEN_3 + \"xxx\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzNzU3Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6088#discussion_r502437577", "bodyText": "variables \u2192 tokens (Same comment for the following JavaDoc.)", "author": "thc202", "createdAt": "2020-10-09T13:45:22Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java", "diffHunk": "@@ -196,4 +203,19 @@ public void setConfirmRemoveToken(boolean confirmRemove) {\n         this.confirmRemoveToken = confirmRemove;\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n+\n+    /** Returns true if should detect CSRF variables by searching for partial matches. */", "originalCommit": "2fd4a133d9b73b40fd3669e5f306da1dc6dc4b2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7148d4a56f5926a13b56a423965aa845b27784db", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\nindex 8d568e4c6..043c04bb3 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/AntiCsrfParam.java\n\n@@ -204,13 +204,13 @@ public class AntiCsrfParam extends AbstractParam {\n         getConfig().setProperty(CONFIRM_REMOVE_TOKEN_KEY, confirmRemoveToken);\n     }\n \n-    /** Returns true if should detect CSRF variables by searching for partial matches. */\n+    /** Returns true if should detect CSRF tokens by searching for partial matches. */\n     public boolean isPartialMatchingEnabled() {\n         return partialMatchingEnabled;\n     }\n \n     /**\n-     * Define if ZAP should detect CSRF variables by searching for partial matches.\n+     * Define if ZAP should detect CSRF tokens by searching for partial matches.\n      *\n      * @param enabled\n      */\n"}}, {"oid": "7148d4a56f5926a13b56a423965aa845b27784db", "url": "https://github.com/zaproxy/zaproxy/commit/7148d4a56f5926a13b56a423965aa845b27784db", "message": "Fix messages, relocated comments\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-10-09T22:20:59Z", "type": "forcePushed"}, {"oid": "40e5039108dd9453701dab8ff43863997ec25529", "url": "https://github.com/zaproxy/zaproxy/commit/40e5039108dd9453701dab8ff43863997ec25529", "message": "Add partial CSRF token search\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-10-15T17:19:54Z", "type": "commit"}, {"oid": "6055ae95da0e1e084959dbad56b62e8cf90a31b1", "url": "https://github.com/zaproxy/zaproxy/commit/6055ae95da0e1e084959dbad56b62e8cf90a31b1", "message": "Add CSRF default token\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-10-15T17:19:54Z", "type": "commit"}, {"oid": "6055ae95da0e1e084959dbad56b62e8cf90a31b1", "url": "https://github.com/zaproxy/zaproxy/commit/6055ae95da0e1e084959dbad56b62e8cf90a31b1", "message": "Add CSRF default token\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-10-15T17:19:54Z", "type": "forcePushed"}]}