{"pr_number": 6284, "pr_title": "Address exceptions related to parameter parsing", "pr_createdAt": "2020-11-09T09:57:59Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6284", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODQyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6284#discussion_r519748426", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {\n          \n          \n            \n                void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {", "author": "ricekot", "createdAt": "2020-11-09T11:46:37Z", "path": "zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java", "diffHunk": "@@ -78,6 +80,114 @@ public void defaultParser() {\n         assertEquals(res2.get(3).getValue(), \"g\");\n     }\n \n+    @Test\n+    void shouldReturnEmptyListWhenParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameValuePairWhenParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalNameIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"%x=1&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalValueIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a=%x&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldParseParametersKeepingEmptyValueWhenAbsent() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a&b\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyListWhenRawParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameAndNullValueWhenRawParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(nullValue()));\n+    }\n+\n+    @Test\n+    void shouldNotDecodeNameNorValueWhenRawParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"%x=1&b%25=%20\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b%25\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"%20\")));\n+    }\n+\n+    @Test\n+    void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {", "originalCommit": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd97068ae94d7447627ae2721ad34681e060d2f", "chunk": "diff --git a/zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java b/zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java\nindex 50c17d7b6..8c56acdf0 100644\n--- a/zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java\n\n@@ -165,7 +165,7 @@ public class StandardParameterParserUnitTest {\n     }\n \n     @Test\n-    void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {\n+    void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {\n         // Given / When\n         List<NameValuePair> parameters = spp.parseRawParameters(\"=1&=2\");\n         // Then\n"}}, {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>", "committedDate": "2020-11-09T12:42:10Z", "type": "commit"}, {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>", "committedDate": "2020-11-09T12:42:10Z", "type": "forcePushed"}]}