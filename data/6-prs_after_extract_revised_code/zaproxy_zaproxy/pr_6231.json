{"pr_number": 6231, "pr_title": "#6098: Allowing to pass request headers from a spider parser to the spider task", "pr_createdAt": "2020-10-07T17:17:17Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6231", "timeline": [{"oid": "90c4d799b8566e6b35b427fe1645e799ad756717", "url": "https://github.com/zaproxy/zaproxy/commit/90c4d799b8566e6b35b427fe1645e799ad756717", "message": "Allowing to add request headers from a spider parser incl. refactoring \u2026\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Introduction of new unit tests in class\n'SpiderParserAdditionalHeadersUnitTest' which create a custom test\nspider parser + controller (incl. spider) and cover header-related\nhandling in the spider controller\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-16T15:00:24Z", "type": "forcePushed"}, {"oid": "17f7c64e194d20dac4955a52657730f84348ecee", "url": "https://github.com/zaproxy/zaproxy/commit/17f7c64e194d20dac4955a52657730f84348ecee", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Introduction of new unit tests in class\n'SpiderParserAdditionalHeadersUnitTest' which create a custom test\nspider parser + controller (incl. spider) and cover header-related\nhandling in the spider controller\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-16T15:34:53Z", "type": "forcePushed"}, {"oid": "40bf8d868a7fe9f2dd8192443546f3ba1866269e", "url": "https://github.com/zaproxy/zaproxy/commit/40bf8d868a7fe9f2dd8192443546f3ba1866269e", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Introduction of new unit tests in class\n'SpiderParserAdditionalHeadersUnitTest' which create a custom test\nspider parser + controller (incl. spider) and cover header-related\nhandling in the spider controller\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-16T16:18:04Z", "type": "forcePushed"}, {"oid": "3e60de713d9b2048d3daeb759c80d24696977a7a", "url": "https://github.com/zaproxy/zaproxy/commit/3e60de713d9b2048d3daeb759c80d24696977a7a", "message": "Merge branch 'develop' into customer-headers-for-spider\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-16T16:22:21Z", "type": "forcePushed"}, {"oid": "05e937591c470fe95c5b586b9c745cc3bae0a2eb", "url": "https://github.com/zaproxy/zaproxy/commit/05e937591c470fe95c5b586b9c745cc3bae0a2eb", "message": "Merge pull request #6360 from psiinon/2.10/addons\n\nUpdate for 2.10 add-ons", "committedDate": "2020-12-16T15:04:14Z", "type": "forcePushed"}, {"oid": "086fbbadc66f477055f93af3ff216bb12a0633c5", "url": "https://github.com/zaproxy/zaproxy/commit/086fbbadc66f477055f93af3ff216bb12a0633c5", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Introduction of new unit tests in class\n'SpiderParserAdditionalHeadersUnitTest' which create a custom test\nspider parser + controller (incl. spider) and cover header-related\nhandling in the spider controller\n- Added binary incompatible methods to \"japicmp\" task in\n\"zap.gradle.kts\"\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-18T16:00:57Z", "type": "forcePushed"}, {"oid": "31bed36cbef65f17be031e9e40d109fc778b96ec", "url": "https://github.com/zaproxy/zaproxy/commit/31bed36cbef65f17be031e9e40d109fc778b96ec", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Introduction of new unit tests in class\n'SpiderParserAdditionalHeadersUnitTest' which create a custom test\nspider parser + controller (incl. spider) and cover header-related\nhandling in the spider controller\n- Added binary incompatible methods to \"japicmp\" task in\n\"zap.gradle.kts\"\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-18T17:20:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgwMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659800", "bodyText": "Should be reverted.", "author": "thc202", "createdAt": "2020-12-21T11:40:58Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -40,7 +42,7 @@\n     /**\n      * The Constant log.\n      *\n-     * @deprecated (2.10.0) Use {@link #getLogger()} instead.\n+     * @deprecated (TODO add version) Use {@link #getLogger()} instead.", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MDk5OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547970998", "bodyText": "Resolved via last commit", "author": "vladidx", "createdAt": "2020-12-23T13:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\nindex adfa968fe..17b876ae8 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n\n@@ -42,7 +41,7 @@ public abstract class SpiderParser {\n     /**\n      * The Constant log.\n      *\n-     * @deprecated (TODO add version) Use {@link #getLogger()} instead.\n+     * @deprecated (2.10.0) Use {@link #getLogger()} instead.\n      */\n     @Deprecated\n     protected static final org.apache.log4j.Logger log =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgxNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659817", "bodyText": "Should be reverted.", "author": "thc202", "createdAt": "2020-12-21T11:41:00Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -52,7 +54,7 @@\n      * Gets the logger.\n      *\n      * @return the logger, never {@code null}.\n-     * @since 2.10.0\n+     * @since TODO add version", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTA4OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971088", "bodyText": "Resolved via last commit", "author": "vladidx", "createdAt": "2020-12-23T13:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\nindex adfa968fe..17b876ae8 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n\n@@ -54,7 +53,7 @@ public abstract class SpiderParser {\n      * Gets the logger.\n      *\n      * @return the logger, never {@code null}.\n-     * @since TODO add version\n+     * @since 2.10.0\n      */\n     protected Logger getLogger() {\n         return logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTg0Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659843", "bodyText": "This should be the only method being added, older methods should be deprecated.", "author": "thc202", "createdAt": "2020-12-21T11:41:04Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java", "diffHunk": "@@ -76,6 +78,18 @@ public void removeSpiderParserListener(SpiderParserListener listener) {\n         this.listeners.remove(listener);\n     }\n \n+    /**\n+     * Notify the listeners that a resource was found.\n+     *\n+     * @param resourceFound the http message containing the response.\n+     * @since 2.11.0\n+     */\n+    protected void notifyListenersResourceFound(SpiderResourceFound resourceFound) {", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTU5Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971593", "bodyText": "Resolved via last commit, previous notify... methods are now deprecated", "author": "vladidx", "createdAt": "2020-12-23T13:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\nindex adfa968fe..17b876ae8 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderParser.java\n\n@@ -96,25 +95,16 @@ public abstract class SpiderParser {\n      * @param message the http message containing the response.\n      * @param depth the depth of this resource in the crawling tree\n      * @param uri the uri\n+     * @deprecated (2.11.0) Use {@link #notifyListenersResourceFound(SpiderResourceFound)} instead.\n      */\n+    @Deprecated\n     protected void notifyListenersResourceFound(HttpMessage message, int depth, String uri) {\n-        notifyListenersResourceFound(message, depth, uri, new ArrayList<HttpHeaderField>());\n-    }\n-\n-    /**\n-     * Notify the listeners that a resource was found.\n-     *\n-     * @param message the http message containing the response.\n-     * @param depth the depth of this resource in the crawling tree\n-     * @param uri the uri\n-     * @param requestHeaders list of custom request headers to be set by the spider task\n-     * @since 2.11.0\n-     */\n-    protected void notifyListenersResourceFound(\n-            HttpMessage message, int depth, String uri, List<HttpHeaderField> requestHeaders) {\n-        SpiderResourceFound resourceFound = new SpiderResourceFound(message, depth, uri);\n-        resourceFound.setRequestHeaders(requestHeaders);\n-        notifyListenersResourceFound(resourceFound);\n+        notifyListenersResourceFound(\n+                SpiderResourceFound.builder()\n+                        .setMessage(message)\n+                        .setDepth(depth)\n+                        .setUri(uri)\n+                        .build());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTk4NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546659985", "bodyText": "Better provide a builder, can be immutable.", "author": "thc202", "createdAt": "2020-12-21T11:41:24Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTkxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547971919", "bodyText": "Resolved via last commit, SpiderResourceFound now offers a builder returning immutable instances", "author": "vladidx", "createdAt": "2020-12-23T13:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1OTk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\nindex 122ce6a35..8fdb33cb4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n\n@@ -20,8 +20,8 @@\n package org.zaproxy.zap.spider.parser;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import org.parosproxy.paros.network.HttpHeaderField;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDAwNQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546660005", "bodyText": "The default should be Collections.emptyList(), otherwise it will create a lot of garbage.", "author": "thc202", "createdAt": "2020-12-21T11:41:26Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;\n+    /** Spider depth for resource. */\n+    private int depth;\n+    /** HTTP method for resource. */\n+    private String method;\n+    /** Uniform resource identifier of resource. */\n+    private String uri;\n+    /** Body for the resource. */\n+    private String body = \"\";\n+    /** Defines resource as useful or not useful in the fetching process. */\n+    private boolean shouldIgnore = false;\n+    /** Additional request headers to be passed for the resource. */\n+    private List<HttpHeaderField> requestHeaders = new ArrayList<>();", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjAyMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972021", "bodyText": "Resolved via last commit, now part of the builder", "author": "vladidx", "createdAt": "2020-12-23T13:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\nindex 122ce6a35..8fdb33cb4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n\n@@ -20,8 +20,8 @@\n package org.zaproxy.zap.spider.parser;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import org.parosproxy.paros.network.HttpHeaderField;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDI1Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546660253", "bodyText": "Typo in resource.", "author": "thc202", "createdAt": "2020-12-21T11:42:02Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -76,73 +78,20 @@\n \n     /**\n      * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method) {\n-        this(parent, null, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @since 2.4.0\n-     */\n-    public SpiderTask(Spider parent, URI sourceUri, URI uri, int depth, String method) {\n-        this(parent, sourceUri, uri, depth, method, null);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n-     *\n-     * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n-     * and will be used when fetching the resource from the specified uri.\n-     *\n-     * @param parent the spider controlling the crawling process\n-     * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     */\n-    public SpiderTask(Spider parent, URI uri, int depth, String method, String requestBody) {\n-        this(parent, null, uri, depth, method, requestBody);\n-    }\n-\n-    /**\n-     * Instantiates a new spider task using the target URI. The purpose of this task is to crawl the\n-     * given uri, using the provided method, find any other uris in the fetched resource and create\n-     * other tasks.\n+     * given uri, using the provided method and supplied request headers, find any other uris in the\n+     * fetched resource and create other tasks.\n      *\n      * <p>The body of the request message is also provided in the {@literal requestBody} parameter\n      * and will be used when fetching the resource from the specified uri.\n      *\n      * @param parent the spider controlling the crawling process\n-     * @param sourceUri the URI where the given {@code uri} was found\n+     * @param resoureFound information about found resource\n      * @param uri the uri that this task should process\n-     * @param depth the depth where this uri is located in the spidering process\n-     * @param method the HTTP method that should be used to fetch the resource\n-     * @param requestBody the body of the request\n-     * @since 2.4.0\n+     * @since 2.11.0\n      */\n-    public SpiderTask(\n-            Spider parent, URI sourceUri, URI uri, int depth, String method, String requestBody) {\n+    public SpiderTask(Spider parent, SpiderResourceFound resoureFound, URI uri) {", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjI2Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972266", "bodyText": "Corrected via last commit", "author": "vladidx", "createdAt": "2020-12-23T14:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MDI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\nindex 393e2374e..178822e10 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\n\n@@ -85,13 +85,14 @@ public class SpiderTask implements Runnable {\n      * and will be used when fetching the resource from the specified uri.\n      *\n      * @param parent the spider controlling the crawling process\n-     * @param resoureFound information about found resource\n+     * @param resourceFound the spider resource found\n      * @param uri the uri that this task should process\n      * @since 2.11.0\n      */\n-    public SpiderTask(Spider parent, SpiderResourceFound resoureFound, URI uri) {\n+    public SpiderTask(Spider parent, SpiderResourceFound resourceFound, URI uri) {\n         super();\n         this.parent = parent;\n+        this.resourceFound = resourceFound;\n \n         // Log the new task\n         if (log.isDebugEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk3OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546662978", "bodyText": "The message where the resource was found.", "author": "thc202", "createdAt": "2020-12-21T11:48:33Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjM3Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972376", "bodyText": "Corrected via last commit", "author": "vladidx", "createdAt": "2020-12-23T14:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\nindex 122ce6a35..8fdb33cb4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n\n@@ -20,8 +20,8 @@\n package org.zaproxy.zap.spider.parser;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import org.parosproxy.paros.network.HttpHeaderField;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk5NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546662994", "bodyText": "message.", "author": "thc202", "createdAt": "2020-12-21T11:48:36Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.spider.parser;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.parosproxy.paros.network.HttpHeaderField;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+/**\n+ * Class SpiderResourceFound is used to store information about found resources by spider parsers.\n+ *\n+ * @since 2.11.0\n+ */\n+public class SpiderResourceFound {\n+    /** Original response message. */\n+    private HttpMessage responseMessage;", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MjQ0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972447", "bodyText": "Corrected via last commit", "author": "vladidx", "createdAt": "2020-12-23T14:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2Mjk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\nindex 122ce6a35..8fdb33cb4 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/parser/SpiderResourceFound.java\n\n@@ -20,8 +20,8 @@\n package org.zaproxy.zap.spider.parser;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import org.parosproxy.paros.network.HttpHeaderField;\n import org.parosproxy.paros.network.HttpMessage;\n import org.parosproxy.paros.network.HttpRequestHeader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MzIwMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546663200", "bodyText": "The request header is never null.", "author": "thc202", "createdAt": "2020-12-21T11:49:06Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java", "diffHunk": "@@ -153,14 +102,29 @@ public SpiderTask(\n         // using\n         // HistoryReference\n         try {\n-            HttpRequestHeader requestHeader = new HttpRequestHeader(method, uri, HttpHeader.HTTP11);\n-            if (sourceUri != null && parent.getSpiderParam().isSendRefererHeader()) {\n-                requestHeader.setHeader(HttpRequestHeader.REFERER, sourceUri.toString());\n+            HttpRequestHeader requestHeader =\n+                    new HttpRequestHeader(resoureFound.getMethod(), uri, HttpHeader.HTTP11);\n+            if (resoureFound.getRequestHeaders() != null) {\n+                // Intentionally adding supplied request headers before the referer header\n+                // to prioritize \"send referer header\" option\n+                for (HttpHeaderField header : resoureFound.getRequestHeaders()) {\n+                    if (header != null && header.getName() != null && header.getValue() != null) {\n+                        requestHeader.addHeader(header.getName(), header.getValue());\n+                    }\n+                }\n+            }\n+            if (resoureFound.getResponseMessage() != null\n+                    && resoureFound.getResponseMessage().getRequestHeader() != null", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3Mjc3Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972777", "bodyText": "Corrected via last commit", "author": "vladidx", "createdAt": "2020-12-23T14:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2MzIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\nindex 393e2374e..178822e10 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderTask.java\n\n@@ -103,28 +104,26 @@ public class SpiderTask implements Runnable {\n         // HistoryReference\n         try {\n             HttpRequestHeader requestHeader =\n-                    new HttpRequestHeader(resoureFound.getMethod(), uri, HttpHeader.HTTP11);\n-            if (resoureFound.getRequestHeaders() != null) {\n+                    new HttpRequestHeader(resourceFound.getMethod(), uri, HttpHeader.HTTP11);\n+            if (resourceFound.getRequestHeaders() != null) {\n                 // Intentionally adding supplied request headers before the referer header\n                 // to prioritize \"send referer header\" option\n-                for (HttpHeaderField header : resoureFound.getRequestHeaders()) {\n+                for (HttpHeaderField header : resourceFound.getRequestHeaders()) {\n                     if (header != null && header.getName() != null && header.getValue() != null) {\n                         requestHeader.addHeader(header.getName(), header.getValue());\n                     }\n                 }\n             }\n-            if (resoureFound.getResponseMessage() != null\n-                    && resoureFound.getResponseMessage().getRequestHeader() != null\n-                    && resoureFound.getResponseMessage().getRequestHeader().getURI() != null\n+            if (resourceFound.getMessage() != null\n                     && parent.getSpiderParam().isSendRefererHeader()) {\n                 requestHeader.setHeader(\n                         HttpRequestHeader.REFERER,\n-                        resoureFound.getResponseMessage().getRequestHeader().getURI().toString());\n+                        resourceFound.getMessage().getRequestHeader().getURI().toString());\n             }\n             HttpMessage msg = new HttpMessage(requestHeader);\n-            if (resoureFound.getBody() != null) {\n-                msg.getRequestHeader().setContentLength(resoureFound.getBody().length());\n-                msg.setRequestBody(resoureFound.getBody());\n+            if (resourceFound.getBody() != null) {\n+                msg.getRequestHeader().setContentLength(resourceFound.getBody().length());\n+                msg.setRequestBody(resourceFound.getBody());\n             }\n             this.reference =\n                     new HistoryReference(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664142", "bodyText": "Is this needed?", "author": "thc202", "createdAt": "2020-12-21T11:51:41Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3Mjk2Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547972963", "bodyText": "Removed check in last commit as not needed", "author": "vladidx", "createdAt": "2020-12-23T14:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\nindex 58050dd27..a576a3a0a 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n\n@@ -266,33 +260,25 @@ public class SpiderController implements SpiderParserListener {\n     private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n             throws URIException {\n         StringBuilder identifierBuilder = new StringBuilder(50);\n-        if (resourceFound != null) {\n-            String visitedURI =\n-                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n-                            uri,\n-                            spider.getSpiderParam().getHandleParameters(),\n-                            spider.getSpiderParam().isHandleODataParametersVisited());\n-            identifierBuilder.append(resourceFound.getMethod());\n-            identifierBuilder.append(\" \");\n-            identifierBuilder.append(visitedURI);\n-            identifierBuilder.append(\"\\n\");\n-            String canonicalHeaderRepresentation =\n-                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n-            identifierBuilder.append(\"\\n\");\n-            identifierBuilder.append(resourceFound.getBody());\n-        }\n+        String visitedURI =\n+                URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                        uri,\n+                        spider.getSpiderParam().getHandleParameters(),\n+                        spider.getSpiderParam().isHandleODataParametersVisited());\n+        identifierBuilder.append(resourceFound.getMethod());\n+        identifierBuilder.append(\" \");\n+        identifierBuilder.append(visitedURI);\n+        identifierBuilder.append(\"\\n\");\n+        String canonicalHeaderRepresentation =\n+                getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+        identifierBuilder.append(\"\\n\");\n+        identifierBuilder.append(resourceFound.getBody());\n         return identifierBuilder.toString();\n     }\n \n     @Override\n     public void resourceFound(SpiderResourceFound resourceFound) {\n-        if (resourceFound == null\n-                || resourceFound.getUri() == null\n-                || resourceFound.getMethod() == null) {\n-            return;\n-        }\n-\n-        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());\n+        log.debug(\"New {} resource found: {}\", resourceFound.getMethod(), resourceFound.getUri());\n \n         // Create the uri\n         URI uriV = createURI(resourceFound.getUri());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE3NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664175", "bodyText": "Better do these validations when the resource is created, here it should just be used.", "author": "thc202", "createdAt": "2020-12-21T11:51:45Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzE1MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973151", "bodyText": "Resolved via last commit, validations are now done as part of the builder", "author": "vladidx", "createdAt": "2020-12-23T14:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\nindex 58050dd27..a576a3a0a 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n\n@@ -266,33 +260,25 @@ public class SpiderController implements SpiderParserListener {\n     private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n             throws URIException {\n         StringBuilder identifierBuilder = new StringBuilder(50);\n-        if (resourceFound != null) {\n-            String visitedURI =\n-                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n-                            uri,\n-                            spider.getSpiderParam().getHandleParameters(),\n-                            spider.getSpiderParam().isHandleODataParametersVisited());\n-            identifierBuilder.append(resourceFound.getMethod());\n-            identifierBuilder.append(\" \");\n-            identifierBuilder.append(visitedURI);\n-            identifierBuilder.append(\"\\n\");\n-            String canonicalHeaderRepresentation =\n-                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n-            identifierBuilder.append(\"\\n\");\n-            identifierBuilder.append(resourceFound.getBody());\n-        }\n+        String visitedURI =\n+                URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                        uri,\n+                        spider.getSpiderParam().getHandleParameters(),\n+                        spider.getSpiderParam().isHandleODataParametersVisited());\n+        identifierBuilder.append(resourceFound.getMethod());\n+        identifierBuilder.append(\" \");\n+        identifierBuilder.append(visitedURI);\n+        identifierBuilder.append(\"\\n\");\n+        String canonicalHeaderRepresentation =\n+                getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+        identifierBuilder.append(\"\\n\");\n+        identifierBuilder.append(resourceFound.getBody());\n         return identifierBuilder.toString();\n     }\n \n     @Override\n     public void resourceFound(SpiderResourceFound resourceFound) {\n-        if (resourceFound == null\n-                || resourceFound.getUri() == null\n-                || resourceFound.getMethod() == null) {\n-            return;\n-        }\n-\n-        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());\n+        log.debug(\"New {} resource found: {}\", resourceFound.getMethod(), resourceFound.getUri());\n \n         // Create the uri\n         URI uriV = createURI(resourceFound.getUri());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE4Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664187", "bodyText": "log.debug(\"New {} resource found: {}\", resourceFound.getMethod(),resourceFound.getUri())", "author": "thc202", "createdAt": "2020-12-21T11:51:47Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -251,46 +248,71 @@ public void init() {\n \n     /** Clears the previous process. */\n     public void reset() {\n-        visitedGet.clear();\n-        visitedPost.clear();\n+        visitedResources.clear();\n \n         for (SpiderParser parser : parsers) {\n             parser.removeSpiderParserListener(this);\n         }\n     }\n \n-    @Override\n-    public void resourceURIFound(\n-            HttpMessage responseMessage, int depth, String uri, boolean shouldIgnore) {\n-        log.debug(\"New resource found: \" + uri);\n+    /**\n+     * Builds a canonical identifier for found resources considering the method, URI, headers, and\n+     * body.\n+     *\n+     * @param uri uniform resource identifier for resource\n+     * @param resourceFound resource found\n+     * @return identifier as a string representation usable for equality checks\n+     */\n+    private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n+            throws URIException {\n+        StringBuilder identifierBuilder = new StringBuilder(50);\n+        if (resourceFound != null) {\n+            String visitedURI =\n+                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                            uri,\n+                            spider.getSpiderParam().getHandleParameters(),\n+                            spider.getSpiderParam().isHandleODataParametersVisited());\n+            identifierBuilder.append(resourceFound.getMethod());\n+            identifierBuilder.append(\" \");\n+            identifierBuilder.append(visitedURI);\n+            identifierBuilder.append(\"\\n\");\n+            String canonicalHeaderRepresentation =\n+                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+            identifierBuilder.append(\"\\n\");\n+            identifierBuilder.append(resourceFound.getBody());\n+        }\n+        return identifierBuilder.toString();\n+    }\n \n-        if (uri == null) {\n+    @Override\n+    public void resourceFound(SpiderResourceFound resourceFound) {\n+        if (resourceFound == null\n+                || resourceFound.getUri() == null\n+                || resourceFound.getMethod() == null) {\n             return;\n         }\n \n+        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzI0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973242", "bodyText": "Corrected via last commit", "author": "vladidx", "createdAt": "2020-12-23T14:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\nindex 58050dd27..a576a3a0a 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n\n@@ -266,33 +260,25 @@ public class SpiderController implements SpiderParserListener {\n     private String buildCanonicalResourceIdentifier(URI uri, SpiderResourceFound resourceFound)\n             throws URIException {\n         StringBuilder identifierBuilder = new StringBuilder(50);\n-        if (resourceFound != null) {\n-            String visitedURI =\n-                    URLCanonicalizer.buildCleanedParametersURIRepresentation(\n-                            uri,\n-                            spider.getSpiderParam().getHandleParameters(),\n-                            spider.getSpiderParam().isHandleODataParametersVisited());\n-            identifierBuilder.append(resourceFound.getMethod());\n-            identifierBuilder.append(\" \");\n-            identifierBuilder.append(visitedURI);\n-            identifierBuilder.append(\"\\n\");\n-            String canonicalHeaderRepresentation =\n-                    getCanonicalHeadersString(resourceFound.getRequestHeaders());\n-            identifierBuilder.append(\"\\n\");\n-            identifierBuilder.append(resourceFound.getBody());\n-        }\n+        String visitedURI =\n+                URLCanonicalizer.buildCleanedParametersURIRepresentation(\n+                        uri,\n+                        spider.getSpiderParam().getHandleParameters(),\n+                        spider.getSpiderParam().isHandleODataParametersVisited());\n+        identifierBuilder.append(resourceFound.getMethod());\n+        identifierBuilder.append(\" \");\n+        identifierBuilder.append(visitedURI);\n+        identifierBuilder.append(\"\\n\");\n+        String canonicalHeaderRepresentation =\n+                getCanonicalHeadersString(resourceFound.getRequestHeaders());\n+        identifierBuilder.append(\"\\n\");\n+        identifierBuilder.append(resourceFound.getBody());\n         return identifierBuilder.toString();\n     }\n \n     @Override\n     public void resourceFound(SpiderResourceFound resourceFound) {\n-        if (resourceFound == null\n-                || resourceFound.getUri() == null\n-                || resourceFound.getMethod() == null) {\n-            return;\n-        }\n-\n-        log.debug(\"New \" + resourceFound.getMethod() + \"resource found: \" + resourceFound.getUri());\n+        log.debug(\"New {} resource found: {}\", resourceFound.getMethod(), resourceFound.getUri());\n \n         // Create the uri\n         URI uriV = createURI(resourceFound.getUri());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDI0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r546664240", "bodyText": "Better do these validations when the resource is created, here it should just be used.", "author": "thc202", "createdAt": "2020-12-21T11:51:56Z", "path": "zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java", "diffHunk": "@@ -299,107 +321,51 @@ public void resourceURIFound(\n             FetchStatus s = f.checkFilter(uriV);\n             if (s != FetchStatus.VALID) {\n                 log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, s);\n+                spider.notifyListenersFoundURI(\n+                        resourceFound.getUri(), resourceFound.getMethod(), s);\n                 return;\n             }\n         }\n \n-        // Check if should be ignored and not fetched\n-        if (shouldIgnore) {\n+        // Check if resource should be ignored and not fetched\n+        if (resourceFound.isShouldIgnore()) {\n             log.debug(\n                     \"URI: \"\n                             + uriV\n                             + \" is valid, but will not be fetched, by parser recommendation.\");\n-            spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+            spider.notifyListenersFoundURI(\n+                    resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n             return;\n         }\n \n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.GET, FetchStatus.VALID);\n+        spider.notifyListenersFoundURI(\n+                resourceFound.getUri(), resourceFound.getMethod(), FetchStatus.VALID);\n \n         // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.GET);\n-        spider.submitTask(task);\n-    }\n-\n-    @Override\n-    public void resourceURIFound(HttpMessage responseMessage, int depth, String uri) {\n-        resourceURIFound(responseMessage, depth, uri, false);\n-    }\n-\n-    @Override\n-    public void resourcePostURIFound(\n-            HttpMessage responseMessage, int depth, String uri, String requestBody) {\n-        log.debug(\"New POST resource found: \" + uri);\n-\n-        // Check if the uri was processed already\n-        synchronized (visitedPost) {\n-            if (arrayKeyValueExists(uri, requestBody)) {\n-                log.debug(\"URI already visited: \" + uri);\n-                return;\n-            } else {\n-                if (visitedPost.containsKey(uri)) {\n-                    visitedPost.get(uri).add(requestBody);\n-                } else {\n-                    ArrayList<String> l = new ArrayList<String>();\n-                    l.add(requestBody);\n-                    visitedPost.put(uri, l);\n-                }\n-            }\n-        }\n-\n-        // Create the uri\n-        URI uriV = createURI(uri);\n-        if (uriV == null) {\n-            return;\n-        }\n-\n-        // Check if any of the filters disallows this uri\n-        for (FetchFilter f : fetchFilters) {\n-            FetchStatus s = f.checkFilter(uriV);\n-            if (s != FetchStatus.VALID) {\n-                log.debug(\"URI: \" + uriV + \" was filtered by a filter with reason: \" + s);\n-                spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, s);\n-                return;\n-            }\n-        }\n-\n-        spider.notifyListenersFoundURI(uri, HttpRequestHeader.POST, FetchStatus.VALID);\n-\n-        // Submit the task\n-        SpiderTask task =\n-                new SpiderTask(\n-                        spider,\n-                        responseMessage.getRequestHeader().getURI(),\n-                        uriV,\n-                        depth,\n-                        HttpRequestHeader.POST,\n-                        requestBody);\n+        SpiderTask task = new SpiderTask(spider, resourceFound, uriV);\n         spider.submitTask(task);\n     }\n \n     /**\n      * Checks whether the value exists in an ArrayList of certain key.\n      *\n-     * @param key the string of the uri\n-     * @param value the request body of the uri\n-     * @return true or false depending whether the uri and request body have already been processed\n+     * @param headers list of HTTP headers\n+     * @return canonical string representation of headers\n      */\n-    private boolean arrayKeyValueExists(String key, String value) {\n-        if (visitedPost.containsKey(key)) {\n-            for (String s : visitedPost.get(key)) {\n-                if (s.equals(value)) {\n-                    return true;\n-                }\n-            }\n+    private String getCanonicalHeadersString(List<HttpHeaderField> headers) {\n+        if (headers != null && !headers.isEmpty()) {\n+            headers.removeIf(", "originalCommit": "31bed36cbef65f17be031e9e40d109fc778b96ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MzYyNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6231#discussion_r547973627", "bodyText": "Resolved via last commit, validations are now done as part of the builder", "author": "vladidx", "createdAt": "2020-12-23T14:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2NDI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "005720f9b9a3b5d7efa0844b6413026f90857201", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\nindex 58050dd27..a576a3a0a 100644\n--- a/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n+++ b/zap/src/main/java/org/zaproxy/zap/spider/SpiderController.java\n\n@@ -347,25 +333,16 @@ public class SpiderController implements SpiderParserListener {\n     }\n \n     /**\n-     * Checks whether the value exists in an ArrayList of certain key.\n+     * Builds a canonical string representation for HTTP header fields.\n      *\n      * @param headers list of HTTP headers\n      * @return canonical string representation of headers\n      */\n     private String getCanonicalHeadersString(List<HttpHeaderField> headers) {\n-        if (headers != null && !headers.isEmpty()) {\n-            headers.removeIf(\n-                    h ->\n-                            h == null\n-                                    || h.getName() == null\n-                                    || h.getName().trim().isEmpty()\n-                                    || h.getValue() == null);\n-            return headers.stream()\n-                    .sorted((h1, h2) -> h1.getName().compareTo(h2.getName()))\n-                    .map(h -> h.getName().trim() + \"=\" + h.getValue().trim())\n-                    .collect(Collectors.joining(\"|\"));\n-        }\n-        return \"\";\n+        return headers.stream()\n+                .sorted((h1, h2) -> h1.getName().compareTo(h2.getName()))\n+                .map(h -> h.getName().trim() + \"=\" + h.getValue().trim())\n+                .collect(Collectors.joining(\"|\"));\n     }\n \n     /**\n"}}, {"oid": "005720f9b9a3b5d7efa0844b6413026f90857201", "url": "https://github.com/zaproxy/zaproxy/commit/005720f9b9a3b5d7efa0844b6413026f90857201", "message": "Further adaptations for spider resource handling\n\n- Removed \"TODO\" version references for logger\n- SpiderParser now offers only a single notifyListenersResourceFound\nmethod using SpiderResourceFound, other notification methods are\ndeprecated\n- Added a builder for SpiderResourceFound instances used by the\nSpiderController and SpiderParser (incl. SpiderHtmlFormParser)\n- Removed validation routines from spider controller (now part of\nbuilder)\n- Replaced \"depth\" attribute of SpiderTask with the SpiderResourceFound\ninstance\n- Minor adjustments in docs, logging, and comments\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2020-12-23T13:41:39Z", "type": "forcePushed"}, {"oid": "fc25ceced5949bbc23485249c37e4381a331d76a", "url": "https://github.com/zaproxy/zaproxy/commit/fc25ceced5949bbc23485249c37e4381a331d76a", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Added tests.\n- Added binary incompatible methods to \"japicmp\" task in\n\"zap.gradle.kts\"\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2021-08-31T16:35:00Z", "type": "forcePushed"}, {"oid": "b156f19f3d619cb5e86c3b1cd5243bf86ecfe9f7", "url": "https://github.com/zaproxy/zaproxy/commit/b156f19f3d619cb5e86c3b1cd5243bf86ecfe9f7", "message": "Revert accessibility change in SpiderController\n\nThe tests no longer require it.\n\nSigned-off-by: thc202 <thc202@gmail.com>", "committedDate": "2021-09-12T14:21:31Z", "type": "forcePushed"}, {"oid": "a6fe4392b271af7e03357c7f454b48bf4cca6d3b", "url": "https://github.com/zaproxy/zaproxy/commit/a6fe4392b271af7e03357c7f454b48bf4cca6d3b", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Added tests.\n- Added binary incompatible methods to \"japicmp\" task in\n\"zap.gradle.kts\"\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2021-09-13T11:47:06Z", "type": "commit"}, {"oid": "a6fe4392b271af7e03357c7f454b48bf4cca6d3b", "url": "https://github.com/zaproxy/zaproxy/commit/a6fe4392b271af7e03357c7f454b48bf4cca6d3b", "message": "Allowing to add request headers from a spider parser incl. refactoring\n\n- Introduction of a new class 'SpiderResourceFound' storing resource\ndetails used within SpiderParser, SpiderParserListener,\nSpiderController, SpiderTask, and SpiderParserTestUtils\n- Simplified canonicalization of visited resources (incl. supplied\nheaders) using one hash set\n- Added tests.\n- Added binary incompatible methods to \"japicmp\" task in\n\"zap.gradle.kts\"\n\nSigned-off-by: Vladislav Dexheimer <vladislav.dexheimer@sap.com>", "committedDate": "2021-09-13T11:47:06Z", "type": "forcePushed"}]}