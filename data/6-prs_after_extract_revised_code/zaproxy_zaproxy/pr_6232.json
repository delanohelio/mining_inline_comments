{"pr_number": 6232, "pr_title": "Custom Pages add initial unittests", "pr_createdAt": "2020-10-09T01:29:13Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6232", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NTMzNw==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502455337", "bodyText": "Could be just package accessible, just for tests.", "author": "thc202", "createdAt": "2020-10-09T14:11:28Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java", "diffHunk": "@@ -149,6 +150,10 @@ public String getName() {\n             return name;\n         }\n \n+        public String getNameKey() {", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java b/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java\nindex bdf03c416..da4d04a6c 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPage.java\n\n@@ -150,7 +150,7 @@ public interface CustomPage extends EnableableInterface {\n             return name;\n         }\n \n-        public String getNameKey() {\n+        String getNameKey() {\n             return nameKey;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NTUzNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502455534", "bodyText": "Same here.", "author": "thc202", "createdAt": "2020-10-09T14:11:46Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPageMatcherLocation.java", "diffHunk": "@@ -50,14 +51,16 @@ public int getId() {\n     /**\n      * Gets the name of this custom page page matcher location.\n      *\n-     * <p>\n-     *\n      * @return the name of the custom page page matcher location\n      */\n     public String getName() {\n         return name;\n     }\n \n+    public String getNameKey() {", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPageMatcherLocation.java b/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPageMatcherLocation.java\nindex 7ef9fa232..77d42fa0d 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPageMatcherLocation.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/custompages/CustomPageMatcherLocation.java\n\n@@ -57,7 +57,7 @@ public enum CustomPageMatcherLocation {\n         return name;\n     }\n \n-    public String getNameKey() {\n+    String getNameKey() {\n         return nameKey;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NTYyNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502455624", "bodyText": "Remove.", "author": "thc202", "createdAt": "2020-10-09T14:11:53Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java", "diffHunk": "@@ -267,6 +268,7 @@ protected static DefaultCustomPage decode(int contextId, String encodedString) {\n                             Type.getCustomPageTypeWithId(Integer.parseInt(pieces[3])), // Type\n                             Boolean.parseBoolean(pieces[4])); // Enabled\n         } catch (Exception ex) {\n+            System.out.println(ex.getMessage());", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java b/zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java\nindex e187cf513..6ccd085a6 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/custompages/DefaultCustomPage.java\n\n@@ -268,7 +268,6 @@ public class DefaultCustomPage extends Enableable implements CustomPage {\n                             Type.getCustomPageTypeWithId(Integer.parseInt(pieces[3])), // Type\n                             Boolean.parseBoolean(pieces[4])); // Enabled\n         } catch (Exception ex) {\n-            System.out.println(ex.getMessage());\n             LOGGER.error(\n                     \"An error occured while decoding DefaultCustomPage from: \" + encodedString, ex);\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NjMwOA==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502456308", "bodyText": "The parameter could be removed (and this be a normal test), not used.", "author": "thc202", "createdAt": "2020-10-09T14:13:01Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1220,6 +1243,101 @@ public void shouldSaveToConfig() {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParent(boolean expectedResult) {", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\nindex 9f8c53841..00745c34a 100644\n--- a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n+++ b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n\n@@ -1243,9 +1243,8 @@ public class AbstractPluginUnitTest extends PluginTestUtils {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage200WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.OK_200;\n         given(parent.isCustomPage(message, type)).willReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NjYxNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502456614", "bodyText": "Remove.", "author": "thc202", "createdAt": "2020-10-09T14:13:29Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1220,6 +1243,101 @@ public void shouldSaveToConfig() {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verifyNoInteractions(analyser);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParentAndFallbackToAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        given(analyser.isFileExist(message)).willReturn(expectedResult);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(expectedResult)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(analyser).isFileExist(message);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage404WithParent() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\nindex 9f8c53841..00745c34a 100644\n--- a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n+++ b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n\n@@ -1243,9 +1243,8 @@ public class AbstractPluginUnitTest extends PluginTestUtils {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage200WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.OK_200;\n         given(parent.isCustomPage(message, type)).willReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1NzAyMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502457021", "bodyText": "AndFallback?", "author": "thc202", "createdAt": "2020-10-09T14:14:02Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1220,6 +1243,101 @@ public void shouldSaveToConfig() {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verifyNoInteractions(analyser);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParentAndFallbackToAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        given(analyser.isFileExist(message)).willReturn(expectedResult);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(expectedResult)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(analyser).isFileExist(message);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage404WithParent() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage404(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage404WithParentWithFallbacktoAnalyser(boolean expectedResult) {", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\nindex 9f8c53841..00745c34a 100644\n--- a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n+++ b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n\n@@ -1243,9 +1243,8 @@ public class AbstractPluginUnitTest extends PluginTestUtils {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage200WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.OK_200;\n         given(parent.isCustomPage(message, type)).willReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODA3Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502458077", "bodyText": "Remove.", "author": "thc202", "createdAt": "2020-10-09T14:15:41Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1220,6 +1243,101 @@ public void shouldSaveToConfig() {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verifyNoInteractions(analyser);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParentAndFallbackToAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        given(analyser.isFileExist(message)).willReturn(expectedResult);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(expectedResult)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(analyser).isFileExist(message);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage404WithParent() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage404(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage404WithParentWithFallbacktoAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\nindex 9f8c53841..00745c34a 100644\n--- a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n+++ b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n\n@@ -1243,9 +1243,8 @@ public class AbstractPluginUnitTest extends PluginTestUtils {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage200WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.OK_200;\n         given(parent.isCustomPage(message, type)).willReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODM5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502458396", "bodyText": "Remove.", "author": "thc202", "createdAt": "2020-10-09T14:16:11Z", "path": "zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java", "diffHunk": "@@ -1220,6 +1243,101 @@ public void shouldSaveToConfig() {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+        verifyNoInteractions(analyser);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage200WithParentAndFallbackToAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.OK_200;\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        given(analyser.isFileExist(message)).willReturn(expectedResult);\n+        // When\n+        boolean result = plugin.isPage200(message);\n+        // Then\n+        assertThat(result, is(equalTo(expectedResult)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(analyser).isFileExist(message);\n+    }\n+\n+    @Test\n+    public void shouldCheckPage404WithParent() {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;\n+        given(parent.isCustomPage(message, type)).willReturn(true);\n+        plugin.init(message, parent);\n+        // When\n+        boolean result = plugin.isPage404(message);\n+        // Then\n+        assertThat(result, is(equalTo(true)));\n+        verify(parent).isCustomPage(message, type);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage404WithParentWithFallbacktoAnalyser(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.NOTFOUND_404;\n+        ;\n+        given(parent.isCustomPage(message, type)).willReturn(false);\n+        given(parent.getAnalyser()).willReturn(analyser);\n+        plugin.init(message, parent);\n+        // 404 is the opposite of isFileExist\n+        given(analyser.isFileExist(message)).willReturn(!expectedResult);\n+        // When\n+        boolean result = plugin.isPage404(message);\n+        // Then\n+        assertThat(result, is(equalTo(expectedResult)));\n+        verify(parent).isCustomPage(message, type);\n+        verify(analyser).isFileExist(message);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = {true, false})\n+    public void shouldCheckPage500WithParent(boolean expectedResult) {\n+        // Given\n+        CustomPage.Type type = CustomPage.Type.ERROR_500;\n+        ;", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\nindex 9f8c53841..00745c34a 100644\n--- a/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n+++ b/zap/src/test/java/org/parosproxy/paros/core/scanner/AbstractPluginUnitTest.java\n\n@@ -1243,9 +1243,8 @@ public class AbstractPluginUnitTest extends PluginTestUtils {\n                 is(equalTo(Plugin.AttackStrength.INSANE.name())));\n     }\n \n-    @ParameterizedTest\n-    @ValueSource(booleans = {true, false})\n-    public void shouldCheckPage200WithParent(boolean expectedResult) {\n+    @Test\n+    public void shouldCheckPage200WithParent() {\n         // Given\n         CustomPage.Type type = CustomPage.Type.OK_200;\n         given(parent.isCustomPage(message, type)).willReturn(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2MzIxMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6232#discussion_r502463210", "bodyText": "getBytes(StandardCharsets.UTF_8)), StandardCharsets.US_ASCII", "author": "thc202", "createdAt": "2020-10-09T14:23:21Z", "path": "zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.custompages;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.Base64;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.Constant;\n+import org.zaproxy.zap.utils.I18N;\n+\n+class DefaultCustomPageUnitTest {\n+\n+    private static final String TEST_MATCH_PATTERN = \".*Something went wrong.*\";\n+    private static final String BASE64_TEST_PATTERN =\n+            new String(Base64.getEncoder().encode(TEST_MATCH_PATTERN.getBytes()));", "originalCommit": "408e0052a092e713c22f4b9b556b2a7424045fe4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "chunk": "diff --git a/zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java b/zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java\nindex c975328de..b81ac39e9 100644\n--- a/zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java\n+++ b/zap/src/test/java/org/zaproxy/zap/extension/custompages/DefaultCustomPageUnitTest.java\n\n@@ -22,6 +22,7 @@ package org.zaproxy.zap.extension.custompages;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "url": "https://github.com/zaproxy/zaproxy/commit/b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "message": "Custom Pages add initial unittests\n\nAdd UnitTests for new `AbstractPlugin` functionality,\n`CustomPageMatcherLocation`, `CustomPage.Type`, `DefaultCustomPage`\nencode/decode functionality.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-10-09T21:54:19Z", "type": "commit"}, {"oid": "b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "url": "https://github.com/zaproxy/zaproxy/commit/b9224ebbd2dcc37560b7f0c31c7f865c275e3c83", "message": "Custom Pages add initial unittests\n\nAdd UnitTests for new `AbstractPlugin` functionality,\n`CustomPageMatcherLocation`, `CustomPage.Type`, `DefaultCustomPage`\nencode/decode functionality.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-10-09T21:54:19Z", "type": "forcePushed"}, {"oid": "faae585bf08cc83a07acbb8c3421477d3a598bb1", "url": "https://github.com/zaproxy/zaproxy/commit/faae585bf08cc83a07acbb8c3421477d3a598bb1", "message": "Custom Pages add initial unittests\n\nAdd UnitTests for new `AbstractPlugin` functionality,\n`CustomPageMatcherLocation`, `CustomPage.Type`, `DefaultCustomPage`\nencode/decode functionality.\n\nSigned-off-by: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-10-09T21:50:57Z", "type": "forcePushed"}]}