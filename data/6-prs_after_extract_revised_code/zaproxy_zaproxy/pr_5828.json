{"pr_number": 5828, "pr_title": "Add a button on the resend screen to inject a CSRF token", "pr_createdAt": "2020-01-25T09:10:43Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/5828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMzYzMA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r370923630", "bodyText": "This seems to be done", "author": "kingthorin", "createdAt": "2020-01-25T09:23:54Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +278,22 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        // TODO: Add resources for icon and tooltip", "originalCommit": "c9b9845977aa4f3c6e8f0f3eafaa55b97e0af02c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 546463cc7..c13a00031 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -279,17 +286,15 @@ public class HttpPanelSender implements MessageSender {\n     }\n \n     private JToggleButton getButtonUseCsrf() {\n-        // TODO: Add resources for icon and tooltip\n         if (useCsrf == null) {\n             useCsrf =\n                     new JToggleButton(\n                             new ImageIcon(\n                                     HttpPanelSender.class.getResource(\n-                                            \"/resource/icon/fugue/csrf.png\")),\n+                                            \"/resource/icon/fugue/target.png\")),\n                             true);\n             useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n-            useCsrf.addItemListener(\n-                    e -> setUseCsrf(e.getStateChange() == ItemEvent.SELECTED));\n+            useCsrf.setSelected(true);\n         }\n         return useCsrf;\n     }\n"}}, {"oid": "c4e1ed8c436740536d25fd73e2412bef78a75e46", "url": "https://github.com/zaproxy/zaproxy/commit/c4e1ed8c436740536d25fd73e2412bef78a75e46", "message": "Setup UI\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-01-25T09:30:13Z", "type": "commit"}, {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "url": "https://github.com/zaproxy/zaproxy/commit/e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "message": "Invoke ExtensionAntiCSRF in HttpPanelSender\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-01-25T14:37:10Z", "type": "commit"}, {"oid": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "url": "https://github.com/zaproxy/zaproxy/commit/e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "message": "Invoke ExtensionAntiCSRF in HttpPanelSender\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-01-25T14:37:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010582", "bodyText": "It's not necessary to change it.", "author": "thc202", "createdAt": "2020-01-26T16:06:52Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2012 The ZAP Development Team\n+ * Copyright 2020 The ZAP Development Team", "originalCommit": "e4b8b16a7e067bfdc79962a6a72e089c93e3b72d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDgzMg==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010832", "bodyText": "spotlessApply does that sometimes, I haven\u2019t figured out the trigger...", "author": "kingthorin", "createdAt": "2020-01-26T16:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDk4Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371010983", "bodyText": "Ah, it was because of the ZAP comment (not needed in this class).", "author": "thc202", "createdAt": "2020-01-26T16:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA2NTQ0Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371065446", "bodyText": "Yea it was done by spotlessApply, should I change it back then?", "author": "madanalogy", "createdAt": "2020-01-27T05:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDA2Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774067", "bodyText": "Yes please", "author": "kingthorin", "createdAt": "2020-02-01T11:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex c13a00031..1483a32ad 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -3,7 +3,7 @@\n  *\n  * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n  *\n- * Copyright 2020 The ZAP Development Team\n+ * Copyright 2012 The ZAP Development Team\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "57c02840d30e3412f43b4930a3a111dd9185289a", "url": "https://github.com/zaproxy/zaproxy/commit/57c02840d30e3412f43b4930a3a111dd9185289a", "message": "Implement CSRF injection into HTTP message body\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-01-27T09:51:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTQ1Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371169456", "bodyText": "You ended up calling it replace*", "author": "kingthorin", "createdAt": "2020-01-27T10:44:56Z", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -54,6 +54,7 @@\n // ZAP: 2019/06/01 Normalise line endings.\n // ZAP: 2019/06/05 Normalise format/style.\n // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.\n+// ZAP: 2020/01/27 Added injectCsrfToken method", "originalCommit": "57c02840d30e3412f43b4930a3a111dd9185289a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwMDEzMg==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371200132", "bodyText": "Thanks for pointing that out", "author": "madanalogy", "createdAt": "2020-01-27T11:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7e762efd1e39fd2979af5af3ef479fef5370700b", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\nindex 15cf7a95c..6ccf06584 100644\n--- a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n+++ b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n\n@@ -54,7 +54,7 @@\n // ZAP: 2019/06/01 Normalise line endings.\n // ZAP: 2019/06/05 Normalise format/style.\n // ZAP: 2019/12/09 Address deprecation of getHeaders(String) Vector method.\n-// ZAP: 2020/01/27 Added injectCsrfToken method\n+// ZAP: 2020/01/27 Added replaceCsrfToken method\n package org.parosproxy.paros.network;\n \n import java.net.HttpCookie;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r371169749", "bodyText": "replace*", "author": "kingthorin", "createdAt": "2020-01-27T10:45:33Z", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,27 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(\n+            HttpMessage msg,\n+            AntiCsrfToken antiCsrfToken,\n+            String tokenValue,\n+            Logger log,\n+            Encoder encoder,\n+            ExtensionAntiCSRF extAntiCSRF) {\n+        log.debug(\n+                \"regenerateAntiCsrfToken replacing \"", "originalCommit": "57c02840d30e3412f43b4930a3a111dd9185289a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDI3Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774273", "bodyText": "This replace method may only currently be called from regenerate but there\u2019s no way we can be sure that\u2019ll always be the case.\nAlso I think it\u2019ll be more confusing than helpful for future debugging/ maintenance if the message isn\u2019t aligned to the local most function name.", "author": "kingthorin", "createdAt": "2020-02-01T11:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDc2MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373774760", "bodyText": "So I should move the logging out of the method and have it instead being done right before the method invocation?", "author": "madanalogy", "createdAt": "2020-02-01T11:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NTMxMw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r373775313", "bodyText": "Sure it could be moved into the regenerate method ahead of the call", "author": "kingthorin", "createdAt": "2020-02-01T11:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNjI0Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375906243", "bodyText": "replace*\n\nSorry I think I missed this, did you mean to replace the word \"replacing\" with \"replace\"?", "author": "madanalogy", "createdAt": "2020-02-06T15:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzA3MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375907070", "bodyText": "Probably doesn't apply anymore, this was when you'd implemented a replace method not a regenerate......", "author": "kingthorin", "createdAt": "2020-02-06T15:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNzgxOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375907819", "bodyText": "Gotcha haha, thanks for the clarification :)", "author": "madanalogy", "createdAt": "2020-02-06T15:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\nindex 15cf7a95c..dda8ee018 100644\n--- a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n+++ b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n\n@@ -1102,11 +1102,6 @@ public class HttpMessage implements Message {\n             Logger log,\n             Encoder encoder,\n             ExtensionAntiCSRF extAntiCSRF) {\n-        log.debug(\n-                \"regenerateAntiCsrfToken replacing \"\n-                        + antiCsrfToken.getValue()\n-                        + \" with \"\n-                        + encoder.getURLEncode(tokenValue));\n         String replaced = msg.getRequestBody().toString();\n         replaced =\n                 replaced.replace(\n"}}, {"oid": "7e762efd1e39fd2979af5af3ef479fef5370700b", "url": "https://github.com/zaproxy/zaproxy/commit/7e762efd1e39fd2979af5af3ef479fef5370700b", "message": "Fix typo in comment\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-01-27T11:55:54Z", "type": "commit"}, {"oid": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "url": "https://github.com/zaproxy/zaproxy/commit/13eaefb7b457e30eface52855b8ee3ceb246ae5e", "message": "Move debug logging to parent methods\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-01T12:39:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Mjk0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374982942", "bodyText": "It's not necessary to include the class, the logger is already adding it.", "author": "thc202", "createdAt": "2020-02-04T23:29:48Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -345,22 +346,11 @@ private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToke\n         if (tokenValue != null) {\n             // Replace token value - only supported in the body right now\n             log.debug(\n-                    \"regenerateAntiCsrfToken replacing \"\n+                    \"regenerateAntiCsrfToken in AbstractPlugin replacing \"", "originalCommit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Nzc5MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374987790", "bodyText": "I think one of my earlier comments may have lead to this. Sorry", "author": "kingthorin", "createdAt": "2020-02-04T23:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4Mjk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java b/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\nindex 94b47afa3..be77215de 100644\n--- a/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\n+++ b/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\n\n@@ -325,35 +315,6 @@ public abstract class AbstractPlugin implements Plugin, Comparable<Object> {\n         parent.performScannerHookAfterScan(message, this);\n     }\n \n-    private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToken) {\n-        if (antiCsrfToken == null) {\n-            return;\n-        }\n-\n-        String tokenValue = null;\n-        try {\n-            HttpMessage tokenMsg = antiCsrfToken.getMsg().cloneAll();\n-\n-            // Ensure we dont loop\n-            sendAndReceive(tokenMsg, true, false);\n-\n-            tokenValue = extAntiCSRF.getTokenValue(tokenMsg, antiCsrfToken.getName());\n-\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-        }\n-\n-        if (tokenValue != null) {\n-            // Replace token value - only supported in the body right now\n-            log.debug(\n-                    \"regenerateAntiCsrfToken in AbstractPlugin replacing \"\n-                            + antiCsrfToken.getValue()\n-                            + \" with \"\n-                            + encoder.getURLEncode(tokenValue));\n-            HttpMessage.replaceCsrfToken(msg, antiCsrfToken, tokenValue, log, encoder, extAntiCSRF);\n-        }\n-    }\n-\n     @Override\n     public void run() {\n         // ZAP : set skipped to false otherwise the plugin should stop continuously\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzAzOQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983039", "bodyText": "Needs to resend the message before attempting to get the new token value.", "author": "thc202", "createdAt": "2020-02-04T23:30:04Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -146,6 +174,33 @@ public void run() {\n         }\n     }\n \n+    private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToken) {\n+        if (antiCsrfToken == null) {\n+            return;\n+        }\n+\n+        String tokenValue = null;\n+        try {\n+            HttpMessage tokenMsg = antiCsrfToken.getMsg().cloneAll();\n+            tokenValue = extAntiCSRF.getTokenValue(tokenMsg, antiCsrfToken.getName());", "originalCommit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 1483a32ad..80bcc4d09 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -174,33 +168,6 @@ public class HttpPanelSender implements MessageSender {\n         }\n     }\n \n-    private void regenerateAntiCsrfToken(HttpMessage msg, AntiCsrfToken antiCsrfToken) {\n-        if (antiCsrfToken == null) {\n-            return;\n-        }\n-\n-        String tokenValue = null;\n-        try {\n-            HttpMessage tokenMsg = antiCsrfToken.getMsg().cloneAll();\n-            tokenValue = extAntiCSRF.getTokenValue(tokenMsg, antiCsrfToken.getName());\n-\n-        } catch (Exception e) {\n-            logger.error(e.getMessage(), e);\n-        }\n-\n-        if (tokenValue != null) {\n-            // Replace token value - only supported in the body right now\n-            Encoder encoder = new Encoder();\n-            logger.debug(\n-                    \"regenerateAntiCsrfToken in HttpPanelSender replacing \"\n-                            + antiCsrfToken.getValue()\n-                            + \" with \"\n-                            + encoder.getURLEncode(tokenValue));\n-            HttpMessage.replaceCsrfToken(\n-                    msg, antiCsrfToken, tokenValue, logger, encoder, extAntiCSRF);\n-        }\n-    }\n-\n     private void persistAndShowMessage(HttpMessage httpMessage) {\n         if (!EventQueue.isDispatchThread()) {\n             EventQueue.invokeLater(() -> persistAndShowMessage(httpMessage));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983073", "bodyText": "I'd suggest using a toggle button with an icon, don't know which one though :)", "author": "thc202", "createdAt": "2020-02-04T23:30:11Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +329,14 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JCheckBox getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf = new JCheckBox();", "originalCommit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNTYwNw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375025607", "bodyText": "Would it be okay for me to reuse one of the icons already available in the resources directory? I can pick an appropriate one and put it into my next update to this PR haha", "author": "madanalogy", "createdAt": "2020-02-05T02:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjc0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375026740", "bodyText": "Absolutely, or something from the Fugue collection which we've used a bunch already.", "author": "kingthorin", "createdAt": "2020-02-05T02:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 1483a32ad..80bcc4d09 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -329,10 +296,15 @@ public class HttpPanelSender implements MessageSender {\n         return useCookies;\n     }\n \n-    private JCheckBox getButtonUseCsrf() {\n+    private JToggleButton getButtonUseCsrf() {\n         if (useCsrf == null) {\n-            useCsrf = new JCheckBox();\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n             useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(true);\n         }\n         return useCsrf;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r374983249", "bodyText": "This would be better in ExtensionAntiCSRF, this class does not need to know about the anti-CSRF tokens.\nIt can be extracted the whole method (regenerateAntiCsrfToken) and also some of the previous logic (starting at List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);) it's the same for both/all.", "author": "thc202", "createdAt": "2020-02-04T23:30:42Z", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java", "diffHunk": "@@ -1090,4 +1094,22 @@ public void setResponseFromTargetHost(final boolean responseFromTargetHost) {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n+\n+    public static void replaceCsrfToken(", "originalCommit": "13eaefb7b457e30eface52855b8ee3ceb246ae5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAyNjAwOA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375026008", "bodyText": "It can be extracted the whole method (regenerateAntiCsrfToken) and also some of the previous logic (starting at List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);) it's the same for both/all.\n\n\nDid you mean that instead of just extracting replaceCsrfToken I could extract the entire method regenerateAntiCsrfToken?", "author": "madanalogy", "createdAt": "2020-02-05T02:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2MDQ4OQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375160489", "bodyText": "Yes.", "author": "thc202", "createdAt": "2020-02-05T10:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNTQ3MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r375905471", "bodyText": "Just a note, I ran into some issues doing this because AbstractPlugin had it's own implementation of sendAndReceive() so I implemented a similar logic in the new extracted method. It works fine on manual testing and the regression tests were green so I'm hoping my implementation was correct", "author": "madanalogy", "createdAt": "2020-02-06T15:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NTE5MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376165190", "bodyText": "It's better to leave the actual send to the caller, the HttpSender might have state (e.g. user, session) which would be lost if the message is sent by the extension. The method could accept a function which sends the HttpMessage, e.g.:\npublic interface HttpMessageSender {\n    void sendAndReceive(HttpMessage message) throws IOException;\n}", "author": "thc202", "createdAt": "2020-02-07T00:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2ODY2MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376168661", "bodyText": "I did not know that was possible haha, thanks again for pointing me in the right direction :)", "author": "madanalogy", "createdAt": "2020-02-07T01:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\nindex dda8ee018..9e2f80dc2 100644\n--- a/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n+++ b/zap/src/main/java/org/parosproxy/paros/network/HttpMessage.java\n\n@@ -1094,22 +1090,4 @@ public class HttpMessage implements Message {\n     public String getType() {\n         return MESSAGE_TYPE;\n     }\n-\n-    public static void replaceCsrfToken(\n-            HttpMessage msg,\n-            AntiCsrfToken antiCsrfToken,\n-            String tokenValue,\n-            Logger log,\n-            Encoder encoder,\n-            ExtensionAntiCSRF extAntiCSRF) {\n-        String replaced = msg.getRequestBody().toString();\n-        replaced =\n-                replaced.replace(\n-                        encoder.getURLEncode(antiCsrfToken.getValue()),\n-                        encoder.getURLEncode(tokenValue));\n-        msg.setRequestBody(replaced);\n-        extAntiCSRF.registerAntiCsrfToken(\n-                new AntiCsrfToken(\n-                        msg, antiCsrfToken.getName(), tokenValue, antiCsrfToken.getFormIndex()));\n-    }\n }\n"}}, {"oid": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "url": "https://github.com/zaproxy/zaproxy/commit/b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "message": "Refactor injectCsrfToken method to ExtensionAntiCSRF\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-06T15:29:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzQ2MQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376163461", "bodyText": "Could add only when the extension is enabled.", "author": "thc202", "createdAt": "2020-02-07T00:51:54Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -78,6 +81,7 @@ public HttpPanelSender(HttpPanelRequest requestPanel, HttpPanelResponse response\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        requestPanel.addOptions(getButtonUseCsrf(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);", "originalCommit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d02e33ba2d34b503a27f1770dc6936e19f75f7ea", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 80bcc4d09..a822055d0 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -76,12 +76,17 @@ public class HttpPanelSender implements MessageSender {\n     public HttpPanelSender(HttpPanelRequest requestPanel, HttpPanelResponse responsePanel) {\n         this.responsePanel = responsePanel;\n \n+        extAntiCSRF =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.class);\n+\n         requestPanel.addOptions(\n                 getButtonUseTrackingSessionState(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n-        requestPanel.addOptions(getButtonUseCsrf(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        if (extAntiCSRF.isEnabled()) {\n+            requestPanel.addOptions(getButtonUseCsrf(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        }\n \n         final boolean isSessionTrackingEnabled =\n                 Model.getSingleton().getOptionsParam().getConnectionParam().isHttpStateEnabled();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376163503", "bodyText": "Should be disabled by default (other options are).", "author": "thc202", "createdAt": "2020-02-07T00:52:00Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +296,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(true);", "originalCommit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTczNA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376199734", "bodyText": "I was trying to follow the implementation of getButtonFollowRedirects() which set the default as enabled. But disabled by default makes more sense especially since the button shouldn't even be there unless the ExtensionAntiCSRF is enabled.", "author": "madanalogy", "createdAt": "2020-02-07T03:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNjA2OA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379836068", "bodyText": "Right, was thinking on the session options.", "author": "thc202", "createdAt": "2020-02-15T14:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d02e33ba2d34b503a27f1770dc6936e19f75f7ea", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 80bcc4d09..a822055d0 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -304,7 +301,7 @@ public class HttpPanelSender implements MessageSender {\n                                     HttpPanelSender.class.getResource(\n                                             \"/resource/icon/fugue/document-target.png\")));\n             useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n-            useCsrf.setSelected(true);\n+            useCsrf.setSelected(false);\n         }\n         return useCsrf;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDY0NA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376164644", "bodyText": "I'd suggest using the \"old\" nameregenerateAntiCsrfToken, it's not injecting (just replacing and clear with \"anti\").\nThe two methods can be merged (and feel free to clean up).", "author": "thc202", "createdAt": "2020-02-07T00:55:54Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +528,67 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    public void injectCsrfToken(HttpMessage message, HttpRequestConfig config) {", "originalCommit": "b7e651c9fab6a40e496ef83f6ca6d997d5ded0dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NjE3MA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r376166170", "bodyText": "Also worth adding some JavaDoc (and since tag).", "author": "thc202", "createdAt": "2020-02-07T01:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "d02e33ba2d34b503a27f1770dc6936e19f75f7ea", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\nindex fe0b5ef06..320e24b61 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n\n@@ -529,24 +529,17 @@ public class ExtensionAntiCSRF extends ExtensionAdaptor implements SessionChange\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n \n-    public void injectCsrfToken(HttpMessage message, HttpRequestConfig config) {\n+    // TODO: Add JavaDoc\n+    public void regenerateAntiCsrfToken(HttpMessage message, HttpRequestConfig config) {\n         List<AntiCsrfToken> tokens = getTokens(message);\n         AntiCsrfToken antiCsrfToken = null;\n         if (tokens.size() > 0) {\n             antiCsrfToken = tokens.get(0);\n         }\n \n-        if (antiCsrfToken != null) {\n-            regenerateAntiCsrfToken(message, antiCsrfToken, config);\n-        }\n-    }\n-\n-    private void regenerateAntiCsrfToken(\n-            HttpMessage msg, AntiCsrfToken antiCsrfToken, HttpRequestConfig config) {\n         if (antiCsrfToken == null) {\n             return;\n         }\n-\n         String tokenValue = null;\n         try {\n             HttpMessage tokenMsg = antiCsrfToken.getMsg().cloneAll();\n"}}, {"oid": "d02e33ba2d34b503a27f1770dc6936e19f75f7ea", "url": "https://github.com/zaproxy/zaproxy/commit/d02e33ba2d34b503a27f1770dc6936e19f75f7ea", "message": "Added ExtensionAntiCSRF.isEnabled() check in HttpPanelSender\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-07T03:54:48Z", "type": "commit"}, {"oid": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "url": "https://github.com/zaproxy/zaproxy/commit/1e028ff1d27181a919d6afb6c236fabde40c9dc7", "message": "Refactor regenerateAntiCsrfToken method\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-07T05:49:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTg5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835896", "bodyText": "It can be sent with the correct parameters instead, e.g.:\nextAntiCSRF.regenerateAntiCsrfToken(message, tokenMsg -> sendAndReceive(tokenMsg, true, false));", "author": "thc202", "createdAt": "2020-02-15T14:53:58Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java", "diffHunk": "@@ -277,15 +277,11 @@ protected void sendAndReceive(\n                                 .getExtension(ExtensionAntiCSRF.class);\n             }\n             if (extAntiCSRF != null) {\n-                List<AntiCsrfToken> tokens = extAntiCSRF.getTokens(message);\n-                AntiCsrfToken antiCsrfToken = null;\n-                if (tokens.size() > 0) {\n-                    antiCsrfToken = tokens.get(0);\n-                }\n-\n-                if (antiCsrfToken != null) {\n-                    regenerateAntiCsrfToken(message, antiCsrfToken);\n+                if (!isRegenCsrfCalled) {", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java b/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\nindex cd935cbc9..9bff22ee4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\n+++ b/zap/src/main/java/org/parosproxy/paros/core/scanner/AbstractPlugin.java\n\n@@ -277,11 +276,8 @@ public abstract class AbstractPlugin implements Plugin, Comparable<Object> {\n                                 .getExtension(ExtensionAntiCSRF.class);\n             }\n             if (extAntiCSRF != null) {\n-                if (!isRegenCsrfCalled) {\n-                    isRegenCsrfCalled = true;\n-                    extAntiCSRF.regenerateAntiCsrfToken(message, this::sendAndReceive);\n-                }\n-                isRegenCsrfCalled = false;\n+                extAntiCSRF.regenerateAntiCsrfToken(\n+                        message, tokenMsg -> sendAndReceive(tokenMsg, true, false));\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTkwMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835901", "bodyText": "extAntiCSRF != null, it's null when not enabled.", "author": "thc202", "createdAt": "2020-02-15T14:54:12Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -61,23 +62,31 @@\n \n     private final HttpPanelResponse responsePanel;\n     private ExtensionHistory extension;\n+    private ExtensionAntiCSRF extAntiCSRF = null;\n \n     private HttpSender delegate;\n \n     private JToggleButton followRedirect = null;\n     private JToggleButton useTrackingSessionState = null;\n     private JToggleButton useCookies = null;\n+    private JToggleButton useCsrf = null;\n \n     private List<PersistentConnectionListener> persistentConnectionListener = new ArrayList<>();\n \n     public HttpPanelSender(HttpPanelRequest requestPanel, HttpPanelResponse responsePanel) {\n         this.responsePanel = responsePanel;\n \n+        extAntiCSRF =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionAntiCSRF.class);\n+\n         requestPanel.addOptions(\n                 getButtonUseTrackingSessionState(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n+        if (extAntiCSRF.isEnabled()) {", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 1467ebd7a..ce53d39b4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -84,7 +84,7 @@ public class HttpPanelSender implements MessageSender {\n         requestPanel.addOptions(getButtonUseCookies(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         requestPanel.addOptions(\n                 getButtonFollowRedirects(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n-        if (extAntiCSRF.isEnabled()) {\n+        if (extAntiCSRF != null) {\n             requestPanel.addOptions(getButtonUseCsrf(), HttpPanel.OptionsLocation.AFTER_COMPONENTS);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0Mg==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835942", "bodyText": "Worth swapping the operands and inline the isSelected check to avoid creating the button when the extension is disabled.", "author": "thc202", "createdAt": "2020-02-15T14:55:20Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -91,7 +100,13 @@ public void handleSendMessage(Message aMessage) throws IllegalArgumentException,\n         httpMessage.setRequestingUser(null);\n         try {\n             final ModeRedirectionValidator redirectionValidator = new ModeRedirectionValidator();\n+            boolean useAntiCSRF = getButtonUseCsrf().isSelected();\n             boolean followRedirects = getButtonFollowRedirects().isSelected();\n+\n+            if (useAntiCSRF && extAntiCSRF != null) {", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 1467ebd7a..ce53d39b4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -100,10 +100,9 @@ public class HttpPanelSender implements MessageSender {\n         httpMessage.setRequestingUser(null);\n         try {\n             final ModeRedirectionValidator redirectionValidator = new ModeRedirectionValidator();\n-            boolean useAntiCSRF = getButtonUseCsrf().isSelected();\n             boolean followRedirects = getButtonFollowRedirects().isSelected();\n \n-            if (useAntiCSRF && extAntiCSRF != null) {\n+            if (extAntiCSRF != null && getButtonUseCsrf().isSelected()) {\n                 extAntiCSRF.regenerateAntiCsrfToken(httpMessage, getDelegate()::sendAndReceive);\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835945", "bodyText": "Can be removed, it's not selected by default.", "author": "thc202", "createdAt": "2020-02-15T14:55:24Z", "path": "zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java", "diffHunk": "@@ -274,6 +289,19 @@ private JToggleButton getButtonUseCookies() {\n         return useCookies;\n     }\n \n+    private JToggleButton getButtonUseCsrf() {\n+        if (useCsrf == null) {\n+            useCsrf =\n+                    new JToggleButton(\n+                            new ImageIcon(\n+                                    HttpPanelSender.class.getResource(\n+                                            \"/resource/icon/fugue/document-target.png\")));\n+            useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n+            useCsrf.setSelected(false);", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\nindex 1467ebd7a..ce53d39b4 100644\n--- a/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n+++ b/zap/src/main/java/org/parosproxy/paros/extension/manualrequest/http/impl/HttpPanelSender.java\n\n@@ -297,7 +296,6 @@ public class HttpPanelSender implements MessageSender {\n                                     HttpPanelSender.class.getResource(\n                                             \"/resource/icon/fugue/document-target.png\")));\n             useCsrf.setToolTipText(Constant.messages.getString(\"manReq.checkBox.useCSRF\"));\n-            useCsrf.setSelected(false);\n         }\n         return useCsrf;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk0Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835947", "bodyText": "I'd keep this in ExtensionAntiCSRF for now.", "author": "thc202", "createdAt": "2020-02-15T14:55:27Z", "path": "zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.parosproxy.paros.network;\n+\n+import java.io.IOException;\n+\n+public interface HttpMessageSender {", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java b/zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java\ndeleted file mode 100644\nindex a764d3493..000000000\n--- a/zap/src/main/java/org/parosproxy/paros/network/HttpMessageSender.java\n+++ /dev/null\n\n@@ -1,7 +0,0 @@\n-package org.parosproxy.paros.network;\n-\n-import java.io.IOException;\n-\n-public interface HttpMessageSender {\n-    void sendAndReceive(HttpMessage message) throws IOException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk1NA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835954", "bodyText": "... to obtain the new anti-csrf token.?", "author": "thc202", "createdAt": "2020-02-15T14:55:30Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +525,55 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    /**\n+     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     *\n+     * @param message The {@link HttpMessage} to be checked.\n+     * @param httpSender The {@code sendAndReceive} implementation of the caller.", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\nindex d7bb8697a..8fb86058b 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n\n@@ -527,11 +526,12 @@ public class ExtensionAntiCSRF extends ExtensionAdaptor implements SessionChange\n     }\n \n     /**\n-     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     * Regenerates the {@link AntiCsrfToken} of a {@link HttpMessage} if one exists to obtain the\n+     * new {@link AntiCsrfToken}.\n      *\n      * @param message The {@link HttpMessage} to be checked.\n      * @param httpSender The {@code sendAndReceive} implementation of the caller.\n-     * @since 2.9.0\n+     * @since 2.10.0\n      */\n     public void regenerateAntiCsrfToken(HttpMessage message, HttpMessageSender httpSender) {\n         List<AntiCsrfToken> tokens = getTokens(message);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNTk1OA==", "url": "https://github.com/zaproxy/zaproxy/pull/5828#discussion_r379835958", "bodyText": "2.10.0 or TODO add version.", "author": "thc202", "createdAt": "2020-02-15T14:55:32Z", "path": "zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java", "diffHunk": "@@ -524,4 +525,55 @@ public String generateForm(HttpMessage msg) throws UnsupportedEncodingException\n         HistoryReference createHistoryReference(int id)\n                 throws DatabaseException, HttpMalformedHeaderException;\n     }\n+\n+    /**\n+     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     *\n+     * @param message The {@link HttpMessage} to be checked.\n+     * @param httpSender The {@code sendAndReceive} implementation of the caller.\n+     * @since 2.9.0", "originalCommit": "1e028ff1d27181a919d6afb6c236fabde40c9dc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "chunk": "diff --git a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\nindex d7bb8697a..8fb86058b 100644\n--- a/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n+++ b/zap/src/main/java/org/zaproxy/zap/extension/anticsrf/ExtensionAntiCSRF.java\n\n@@ -527,11 +526,12 @@ public class ExtensionAntiCSRF extends ExtensionAdaptor implements SessionChange\n     }\n \n     /**\n-     * Regenerates the Anti-CSRF Token of a HttpMessage if one exists.\n+     * Regenerates the {@link AntiCsrfToken} of a {@link HttpMessage} if one exists to obtain the\n+     * new {@link AntiCsrfToken}.\n      *\n      * @param message The {@link HttpMessage} to be checked.\n      * @param httpSender The {@code sendAndReceive} implementation of the caller.\n-     * @since 2.9.0\n+     * @since 2.10.0\n      */\n     public void regenerateAntiCsrfToken(HttpMessage message, HttpMessageSender httpSender) {\n         List<AntiCsrfToken> tokens = getTokens(message);\n"}}, {"oid": "7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "url": "https://github.com/zaproxy/zaproxy/commit/7789710ee3818e5ddf23065f3e4e59fbd63e10d4", "message": "Documentation Update\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-16T02:54:41Z", "type": "commit"}, {"oid": "d009f6fc1c69fb3b67478f098ab50a6e4f95f657", "url": "https://github.com/zaproxy/zaproxy/commit/d009f6fc1c69fb3b67478f098ab50a6e4f95f657", "message": "Remove comment in AbstractPlugin\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-16T02:57:41Z", "type": "commit"}, {"oid": "32d9e1953b90c7b3b9c55867ad6f66590e511076", "url": "https://github.com/zaproxy/zaproxy/commit/32d9e1953b90c7b3b9c55867ad6f66590e511076", "message": "Change button icon implementation\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-19T01:42:04Z", "type": "commit"}]}