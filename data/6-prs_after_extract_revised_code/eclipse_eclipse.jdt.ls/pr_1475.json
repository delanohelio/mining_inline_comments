{"pr_number": 1475, "pr_title": "Java runtimes should be configured before projects are imported", "pr_createdAt": "2020-06-09T18:39:03Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NzA3Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r437667073", "bodyText": "nope. We need the very 1st time the \"Workspace\" is opened/initialized, i.e. when .metadata is created", "author": "fbricon", "createdAt": "2020-06-09T19:28:33Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java", "diffHunk": "@@ -103,6 +111,15 @@ public InitializeResult initialize(InitializeParams param) {\n \t\t\tPreferences prefs = Preferences.createFrom((Map<String, Object>) settings);\n \t\t\tprefs.setRootPaths(rootPaths);\n \t\t\tpreferenceManager.update(prefs);\n+\t\t\tif (!firstTimeWorkspaceIsOpened) {\n+\t\t\t\t// We don't care about triggering a full build here, like in onDidChangeConfiguration\n+\t\t\t\ttry {\n+\t\t\t\t\tJVMConfigurator.configureJVMs(prefs);\n+\t\t\t\t\tfirstTimeWorkspaceIsOpened = true;", "originalCommit": "954fcc1be07eba8068f817980190e4eabde7941a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMzk5MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r437703990", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-09T20:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NzA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c72ed666c52ee4890c724f243778aac3a462b04f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\nindex 85c96791..1c480c5b 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n\n@@ -111,11 +114,11 @@ public abstract class BaseInitHandler {\n \t\t\tPreferences prefs = Preferences.createFrom((Map<String, Object>) settings);\n \t\t\tprefs.setRootPaths(rootPaths);\n \t\t\tpreferenceManager.update(prefs);\n-\t\t\tif (!firstTimeWorkspaceIsOpened) {\n+\t\t\tif (firstTimeWorkspaceIsCreated()) {\n \t\t\t\t// We don't care about triggering a full build here, like in onDidChangeConfiguration\n \t\t\t\ttry {\n \t\t\t\t\tJVMConfigurator.configureJVMs(prefs);\n-\t\t\t\t\tfirstTimeWorkspaceIsOpened = true;\n+\t\t\t\t\tregisterWorkspaceCreated();\n \t\t\t\t} catch (CoreException e) {\n \t\t\t\t\tJavaLanguageServerPlugin.logException(\"Failed to configure Java Runtimes\", e);\n \t\t\t\t}\n"}}, {"oid": "c72ed666c52ee4890c724f243778aac3a462b04f", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c72ed666c52ee4890c724f243778aac3a462b04f", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-09T20:38:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyODMxNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438628314", "bodyText": "WORKSPACE_INITIALIZED=\"workspaceInitialized\"", "author": "fbricon", "createdAt": "2020-06-11T08:33:59Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java", "diffHunk": "@@ -24,6 +24,13 @@\n \t */\n \tpublic static final String PLUGIN_ID = \"org.eclipse.jdt.ls.core\";\n \n+\t/**\n+\t * Is workspace created for the first time\n+\t */\n+\tpublic static final String FIRST_TIME_WORKSPACE_IS_CREATED = \"firstTimeWorkspaceIsCreated\";", "originalCommit": "c72ed666c52ee4890c724f243778aac3a462b04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NzkxMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438977910", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-11T18:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyODMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\nindex 620db266..5d3806a4 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\n\n@@ -25,11 +25,9 @@ public interface IConstants {\n \tpublic static final String PLUGIN_ID = \"org.eclipse.jdt.ls.core\";\n \n \t/**\n-\t * Is workspace created for the first time\n+\t * Is workspace initialized\n \t */\n-\tpublic static final String FIRST_TIME_WORKSPACE_IS_CREATED = \"firstTimeWorkspaceIsCreated\";\n-\n-\tpublic static final boolean FIRST_TIME_WORKSPACE_IS_CREATED_DEFAULT = true;\n+\tpublic static final String WORKSPACE_INITIALIZED = \"workspaceInitialized\";\n \n \t/**\n \t * Jobs family id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyODc3MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438628770", "bodyText": "registerWorkspaceInitialized", "author": "fbricon", "createdAt": "2020-06-11T08:34:57Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java", "diffHunk": "@@ -126,6 +146,21 @@ public InitializeResult initialize(InitializeParams param) {\n \t\treturn initializationOptions;\n \t}\n \n+\tprivate void registerWorkspaceCreated() {", "originalCommit": "c72ed666c52ee4890c724f243778aac3a462b04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3ODAyNQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438978025", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-11T18:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyODc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\nindex 1c480c5b..434b6a75 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n\n@@ -146,9 +147,9 @@ public abstract class BaseInitHandler {\n \t\treturn initializationOptions;\n \t}\n \n-\tprivate void registerWorkspaceCreated() {\n+\tprivate void registerWorkspaceInitialized() {\n \t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n-\t\tprefs.putBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, false);\n+\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, true);\n \t\ttry {\n \t\t\tprefs.flush();\n \t\t} catch (BackingStoreException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyOTA4MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438629080", "bodyText": "prefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, true);", "author": "fbricon", "createdAt": "2020-06-11T08:35:29Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java", "diffHunk": "@@ -126,6 +146,21 @@ public InitializeResult initialize(InitializeParams param) {\n \t\treturn initializationOptions;\n \t}\n \n+\tprivate void registerWorkspaceCreated() {\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\tprefs.putBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, false);", "originalCommit": "c72ed666c52ee4890c724f243778aac3a462b04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3ODE4OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438978189", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-11T18:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyOTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\nindex 1c480c5b..434b6a75 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n\n@@ -146,9 +147,9 @@ public abstract class BaseInitHandler {\n \t\treturn initializationOptions;\n \t}\n \n-\tprivate void registerWorkspaceCreated() {\n+\tprivate void registerWorkspaceInitialized() {\n \t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n-\t\tprefs.putBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, false);\n+\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, true);\n \t\ttry {\n \t\t\tprefs.flush();\n \t\t} catch (BackingStoreException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyOTgwMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438629800", "bodyText": "not necessary", "author": "fbricon", "createdAt": "2020-06-11T08:36:44Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java", "diffHunk": "@@ -24,6 +24,13 @@\n \t */\n \tpublic static final String PLUGIN_ID = \"org.eclipse.jdt.ls.core\";\n \n+\t/**\n+\t * Is workspace created for the first time\n+\t */\n+\tpublic static final String FIRST_TIME_WORKSPACE_IS_CREATED = \"firstTimeWorkspaceIsCreated\";\n+\n+\tpublic static final boolean FIRST_TIME_WORKSPACE_IS_CREATED_DEFAULT = true;", "originalCommit": "c72ed666c52ee4890c724f243778aac3a462b04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3ODQ3Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438978473", "bodyText": "Fixed", "author": "snjeza", "createdAt": "2020-06-11T18:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyOTgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\nindex 620db266..5d3806a4 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IConstants.java\n\n@@ -25,11 +25,9 @@ public interface IConstants {\n \tpublic static final String PLUGIN_ID = \"org.eclipse.jdt.ls.core\";\n \n \t/**\n-\t * Is workspace created for the first time\n+\t * Is workspace initialized\n \t */\n-\tpublic static final String FIRST_TIME_WORKSPACE_IS_CREATED = \"firstTimeWorkspaceIsCreated\";\n-\n-\tpublic static final boolean FIRST_TIME_WORKSPACE_IS_CREATED_DEFAULT = true;\n+\tpublic static final String WORKSPACE_INITIALIZED = \"workspaceInitialized\";\n \n \t/**\n \t * Jobs family id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NTU0Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438845543", "bodyText": "prefs.getBoolean(IConstants.WORKSPACE_INITIALIZED, false);", "author": "fbricon", "createdAt": "2020-06-11T14:53:05Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java", "diffHunk": "@@ -126,6 +146,21 @@ public InitializeResult initialize(InitializeParams param) {\n \t\treturn initializationOptions;\n \t}\n \n+\tprivate void registerWorkspaceCreated() {\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\tprefs.putBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, false);\n+\t\ttry {\n+\t\t\tprefs.flush();\n+\t\t} catch (BackingStoreException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\tprivate boolean firstTimeWorkspaceIsCreated() {\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\treturn prefs.getBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, IConstants.FIRST_TIME_WORKSPACE_IS_CREATED_DEFAULT);", "originalCommit": "c72ed666c52ee4890c724f243778aac3a462b04f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3ODMyNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r438978327", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-11T18:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NTU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\nindex 1c480c5b..434b6a75 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n\n@@ -146,9 +147,9 @@ public abstract class BaseInitHandler {\n \t\treturn initializationOptions;\n \t}\n \n-\tprivate void registerWorkspaceCreated() {\n+\tprivate void registerWorkspaceInitialized() {\n \t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n-\t\tprefs.putBoolean(IConstants.FIRST_TIME_WORKSPACE_IS_CREATED, false);\n+\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, true);\n \t\ttry {\n \t\t\tprefs.flush();\n \t\t} catch (BackingStoreException e) {\n"}}, {"oid": "7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/7d1e3c73bc7809dc3f0f07798ff149ef4486e22d", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-11T18:07:37Z", "type": "forcePushed"}, {"oid": "6b78503403d35c12ae6541a3cac1773c9d810f32", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/6b78503403d35c12ae6541a3cac1773c9d810f32", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-12T17:52:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTMwNQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439831305", "bodyText": "extra ; here.", "author": "testforstephen", "createdAt": "2020-06-14T13:42:20Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java", "diffHunk": "@@ -103,6 +114,16 @@ public InitializeResult initialize(InitializeParams param) {\n \t\t\tPreferences prefs = Preferences.createFrom((Map<String, Object>) settings);\n \t\t\tprefs.setRootPaths(rootPaths);\n \t\t\tpreferenceManager.update(prefs);\n+\t\t\tif (!isWorkspaceInitialized()) {\n+\t\t\t\t// We don't care about triggering a full build here, like in onDidChangeConfiguration\n+\t\t\t\ttry {\n+\t\t\t\t\tJVMConfigurator.configureJVMs(prefs);\n+\t\t\t\t\tregisterWorkspaceInitialized();\n+\t\t\t\t\t;", "originalCommit": "6b78503403d35c12ae6541a3cac1773c9d810f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2ODQ3NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439868474", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-14T21:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "93e2db553fca740648dd8404618de69362cd9890", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\nindex 434b6a75..d55615a1 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/BaseInitHandler.java\n\n@@ -117,7 +117,7 @@ public abstract class BaseInitHandler {\n \t\t\tif (!isWorkspaceInitialized()) {\n \t\t\t\t// We don't care about triggering a full build here, like in onDidChangeConfiguration\n \t\t\t\ttry {\n-\t\t\t\t\tJVMConfigurator.configureJVMs(prefs);\n+\t\t\t\t\tJVMConfigurator.configureDefaultVM(prefs);\n \t\t\t\t\tregisterWorkspaceInitialized();\n \t\t\t\t\t;\n \t\t\t\t} catch (CoreException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMjA2NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439832065", "bodyText": "variable name is same as method name, not good. Rename to oldInitializedStatus?", "author": "testforstephen", "createdAt": "2020-06-14T13:51:05Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java", "diffHunk": "@@ -210,6 +213,29 @@ public void testRegisterDelayedCapability() throws Exception {\n \t\tverify(client, times(9)).registerCapability(any());\n \t}\n \n+\t@Test\n+\tpublic void testConfigureJVMs() throws Exception {\n+\t\tInitHandler handler = new InitHandler(projectsManager, preferenceManager, server.getClientConnection(), commandHandler);\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\tboolean isWorkspaceInitialized = isWorkspaceInitialized(prefs);", "originalCommit": "6b78503403d35c12ae6541a3cac1773c9d810f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2ODQ4NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439868485", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-14T21:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMjA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7779b1e5a34d3c44df0d311a26475a4437419b5f", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\nindex beca4894..7ea2c884 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n\n@@ -214,7 +214,7 @@ public class InitHandlerTest extends AbstractProjectsManagerBasedTest {\n \t}\n \n \t@Test\n-\tpublic void testConfigureJVMs() throws Exception {\n+\tpublic void testWorkspaceInitialized() throws Exception {\n \t\tInitHandler handler = new InitHandler(projectsManager, preferenceManager, server.getClientConnection(), commandHandler);\n \t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n \t\tboolean isWorkspaceInitialized = isWorkspaceInitialized(prefs);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1OTc5MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439859791", "bodyText": "This test actually does not check the JVMs have been configured, as it's supposed to", "author": "fbricon", "createdAt": "2020-06-14T19:21:09Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java", "diffHunk": "@@ -210,6 +213,29 @@ public void testRegisterDelayedCapability() throws Exception {\n \t\tverify(client, times(9)).registerCapability(any());\n \t}\n \n+\t@Test\n+\tpublic void testConfigureJVMs() throws Exception {\n+\t\tInitHandler handler = new InitHandler(projectsManager, preferenceManager, server.getClientConnection(), commandHandler);\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\tboolean isWorkspaceInitialized = isWorkspaceInitialized(prefs);\n+\t\ttry {\n+\t\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, false);\n+\t\t\tInitializeParams params = new InitializeParams();\n+\t\t\tMap<String, Object> initializationOptions = new HashMap<>();\n+\t\t\tinitializationOptions.put(InitHandler.SETTINGS_KEY, new HashMap<>());\n+\t\t\tparams.setInitializationOptions(initializationOptions);\n+\t\t\tassertFalse(isWorkspaceInitialized(prefs));", "originalCommit": "6b78503403d35c12ae6541a3cac1773c9d810f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg2ODUwMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439868503", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-14T21:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1OTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7779b1e5a34d3c44df0d311a26475a4437419b5f", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\nindex beca4894..7ea2c884 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n\n@@ -214,7 +214,7 @@ public class InitHandlerTest extends AbstractProjectsManagerBasedTest {\n \t}\n \n \t@Test\n-\tpublic void testConfigureJVMs() throws Exception {\n+\tpublic void testWorkspaceInitialized() throws Exception {\n \t\tInitHandler handler = new InitHandler(projectsManager, preferenceManager, server.getClientConnection(), commandHandler);\n \t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n \t\tboolean isWorkspaceInitialized = isWorkspaceInitialized(prefs);\n"}}, {"oid": "7779b1e5a34d3c44df0d311a26475a4437419b5f", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/7779b1e5a34d3c44df0d311a26475a4437419b5f", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-14T20:08:28Z", "type": "forcePushed"}, {"oid": "93e2db553fca740648dd8404618de69362cd9890", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/93e2db553fca740648dd8404618de69362cd9890", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-14T21:02:28Z", "type": "forcePushed"}, {"oid": "6cb5e0d7f0fef5b829c8f06d2c06fe7b3b0f5e52", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/6cb5e0d7f0fef5b829c8f06d2c06fe7b3b0f5e52", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-14T21:12:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyMjE0Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r439922147", "bodyText": "Call handler.handleInitializationOptions(params) twice and verify JVM not changed at the second time.", "author": "testforstephen", "createdAt": "2020-06-15T04:15:27Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java", "diffHunk": "@@ -210,6 +219,58 @@ public void testRegisterDelayedCapability() throws Exception {\n \t\tverify(client, times(9)).registerCapability(any());\n \t}\n \n+\t@Test\n+\tpublic void testConfigureJVMs() throws Exception {\n+\t\tInitHandler handler = new InitHandler(projectsManager, preferenceManager, server.getClientConnection(), commandHandler);\n+\t\tIEclipsePreferences prefs = InstanceScope.INSTANCE.getNode(IConstants.PLUGIN_ID);\n+\t\tboolean isWorkspaceInitialized = isWorkspaceInitialized(prefs);\n+\t\tboolean[] changed = new boolean[] { false };\n+\t\tIVMInstall defaultVM = JavaRuntime.getDefaultVMInstall();\n+\t\tIVMInstallChangedListener listener = new IVMInstallChangedListener() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void defaultVMInstallChanged(IVMInstall previous, IVMInstall current) {\n+\t\t\t\tchanged[0] = true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void vmChanged(PropertyChangeEvent event) {\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void vmAdded(IVMInstall vm) {\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void vmRemoved(IVMInstall vm) {\n+\t\t\t}\n+\n+\t\t};\n+\t\ttry {\n+\t\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, false);\n+\t\t\tInitializeParams params = new InitializeParams();\n+\t\t\tMap<String, Object> initializationOptions = new HashMap<>();\n+\t\t\tString javaHome = new File(TestVMType.getFakeJDKsLocation(), \"9\").getAbsolutePath();\n+\t\t\tHashMap<String, Object> homeMap = getMap(\"home\", javaHome);\n+\t\t\tMap<String, Object> javaMap = getMap(\"java\", homeMap);\n+\t\t\tinitializationOptions.put(InitHandler.SETTINGS_KEY, javaMap);\n+\t\t\tparams.setInitializationOptions(initializationOptions);\n+\t\t\tassertFalse(isWorkspaceInitialized(prefs));\n+\t\t\tJavaRuntime.addVMInstallChangedListener(listener);\n+\t\t\thandler.handleInitializationOptions(params);\n+\t\t\tassertTrue(isWorkspaceInitialized(prefs));\n+\t\t\tassertTrue(changed[0]);", "originalCommit": "6cb5e0d7f0fef5b829c8f06d2c06fe7b3b0f5e52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI2ODIwOQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1475#discussion_r440268209", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-06-15T15:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyMjE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d3e69c18e4a7414e84bf3b142b292fac820b8d82", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\nindex 877cccc6..34343459 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/handlers/InitHandlerTest.java\n\n@@ -260,6 +260,9 @@ public class InitHandlerTest extends AbstractProjectsManagerBasedTest {\n \t\t\thandler.handleInitializationOptions(params);\n \t\t\tassertTrue(isWorkspaceInitialized(prefs));\n \t\t\tassertTrue(changed[0]);\n+\t\t\tchanged[0] = false;\n+\t\t\thandler.handleInitializationOptions(params);\n+\t\t\tassertFalse(changed[0]);\n \t\t} finally {\n \t\t\tprefs.putBoolean(IConstants.WORKSPACE_INITIALIZED, isWorkspaceInitialized);\n \t\t\tJavaRuntime.removeVMInstallChangedListener(listener);\n"}}, {"oid": "d3e69c18e4a7414e84bf3b142b292fac820b8d82", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3e69c18e4a7414e84bf3b142b292fac820b8d82", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-15T15:39:48Z", "type": "commit"}, {"oid": "d3e69c18e4a7414e84bf3b142b292fac820b8d82", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3e69c18e4a7414e84bf3b142b292fac820b8d82", "message": "Java runtimes should be configured before projects are imported\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-06-15T15:39:48Z", "type": "forcePushed"}]}