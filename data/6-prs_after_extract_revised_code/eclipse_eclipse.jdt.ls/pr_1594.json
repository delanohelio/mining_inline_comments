{"pr_number": 1594, "pr_title": "Support to specify output location for invisible project", "pr_createdAt": "2020-11-09T08:04:14Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594", "timeline": [{"oid": "14edc307564f93003faff0eaf21c5351d5cc8d41", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/14edc307564f93003faff0eaf21c5351d5cc8d41", "message": "Rename the setting key to 'java.unmanagedFolder.outputPath'\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>", "committedDate": "2020-11-16T05:30:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNDM1OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r524634359", "bodyText": "need to check preferencesManager.getClientPreferences().isActionableRuntimeNotificationSupport(), else send regular notification", "author": "fbricon", "createdAt": "2020-11-16T21:52:15Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.ls.core.internal.ActionableNotification;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.lsp4j.MessageType;\n+\n+public class InvisiblePreferenceChangeListener implements IPreferencesChangeListener {\n+\n+\t@Override\n+\tpublic void preferencesChange(Preferences oldPreferences, Preferences newPreferences) {\n+\t\tboolean projectOutputPathChanged = !Objects.equals(oldPreferences.getInvisibleProjectOutputPath(), newPreferences.getInvisibleProjectOutputPath());\n+\t\tif (projectOutputPathChanged) {\n+\t\t\tfor (IJavaProject javaProject : ProjectUtils.getJavaProjects()) {\n+\t\t\t\tIProject project = javaProject.getProject();\n+\t\t\t\tif (ProjectUtils.isVisibleProject(project)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (project.equals(ProjectsManager.getDefaultProject())) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tProjectUtils.setInvisibleProjectOutputPath(javaProject, newPreferences.getInvisibleProjectOutputPath(), new NullProgressMonitor());\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tActionableNotification invalidOutputPathNotification = new ActionableNotification().withSeverity(MessageType.Error)\n+\t\t\t\t\t\t\t.withMessage(e.getMessage());\n+\t\t\t\t\tJavaLanguageServerPlugin.getProjectsManager().getConnection().sendActionableNotification(invalidOutputPathNotification);", "originalCommit": "14edc307564f93003faff0eaf21c5351d5cc8d41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MTEwMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r524881103", "bodyText": "Thanks for pointing out! Since there is actually no actions here, I changed to the regular notification directly.", "author": "jdneo", "createdAt": "2020-11-17T04:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDYzNDM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\nsimilarity index 75%\nrename from org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java\nrename to org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\nindex e0f23157..587d725e 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2020 Microsoft Corporation and others.\n+ * Copyright (c) 2021 Microsoft Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License 2.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDU1MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r530064550", "bodyText": "I would use IPath.SEPARATOR just to avoid any confusion. Otherwise, it seems to be working with the property, so I'd be fine with merging.", "author": "rgrunber", "createdAt": "2020-11-25T02:18:55Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + \"/\" + outputPath;", "originalCommit": "6a03c5d5fd731453d5ae9aa258e425bd1163d4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4MTk2NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r530081964", "bodyText": "Thanks for the suggestion, I've updated the PR", "author": "jdneo", "createdAt": "2020-11-25T03:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NDU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\nindex e8e171b5..ed14ddfd 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n\n@@ -235,72 +235,6 @@ public final class ProjectUtils {\n \t\treturn false;\n \t}\n \n-\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n-\t\tIProject project = javaProject.getProject();\n-\t\tif (isVisibleProject(project)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (outputPath == null) {\n-\t\t\toutputPath = \"\";\n-\t\t} else {\n-\t\t\toutputPath = outputPath.trim();\n-\t\t}\n-\t\t\n-\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n-\t\t}\n-\n-\t\tif (StringUtils.isEmpty(outputPath)) {\n-\t\t\t// blank means using default output path\n-\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\toutputPath = WORKSPACE_LINK + \"/\" + outputPath;\n-\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n-\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n-\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n-\t\tfor (IClasspathEntry entry : existingEntries) {\n-\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n-\t\t\t\tnewEntries.add(entry);\n-\t\t\t} else {\n-\t\t\t\tIPath entryPath = entry.getPath();\n-\t\t\t\tif (entryPath.equals(outputFullPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n-\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n-\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n-\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n-\t\t\t\t\tboolean hasExcluded = false;\n-\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n-\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n-\t\t\t\t\t\t\thasExcluded = true;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!hasExcluded) {\n-\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n-\t\t\t\t\t}\n-\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tnewEntries.add(entry);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);\n-\t\t} catch (JavaModelException e) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"Failed to set the output path.\", e));\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n \tpublic static IPath findBelongedWorkspaceRoot(IPath filePath) {\n \t\tPreferenceManager manager = JavaLanguageServerPlugin.getPreferencesManager();\n \t\tCollection<IPath> rootPaths = manager.getPreferences().getRootPaths();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMzUwMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531403502", "bodyText": "This utility is just used for invisible project only, it's better to move to InvisibleProjectImporter.java.", "author": "testforstephen", "createdAt": "2020-11-27T06:24:41Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {", "originalCommit": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\nindex 1f4bafcd..ed14ddfd 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n\n@@ -235,72 +235,6 @@ public final class ProjectUtils {\n \t\treturn false;\n \t}\n \n-\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n-\t\tIProject project = javaProject.getProject();\n-\t\tif (isVisibleProject(project)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (outputPath == null) {\n-\t\t\toutputPath = \"\";\n-\t\t} else {\n-\t\t\toutputPath = outputPath.trim();\n-\t\t}\n-\t\t\n-\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n-\t\t}\n-\n-\t\tif (StringUtils.isEmpty(outputPath)) {\n-\t\t\t// blank means using default output path\n-\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n-\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n-\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n-\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n-\t\tfor (IClasspathEntry entry : existingEntries) {\n-\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n-\t\t\t\tnewEntries.add(entry);\n-\t\t\t} else {\n-\t\t\t\tIPath entryPath = entry.getPath();\n-\t\t\t\tif (entryPath.equals(outputFullPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n-\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n-\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n-\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n-\t\t\t\t\tboolean hasExcluded = false;\n-\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n-\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n-\t\t\t\t\t\t\thasExcluded = true;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!hasExcluded) {\n-\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n-\t\t\t\t\t}\n-\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tnewEntries.add(entry);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);\n-\t\t} catch (JavaModelException e) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"Failed to set the output path.\", e));\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n \tpublic static IPath findBelongedWorkspaceRoot(IPath filePath) {\n \t\tPreferenceManager manager = JavaLanguageServerPlugin.getPreferencesManager();\n \t\tCollection<IPath> rootPaths = manager.getPreferences().getRootPaths();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNTQ3Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531405477", "bodyText": "The output path cannot be equal to the source folder path, please provide a new path.", "author": "testforstephen", "createdAt": "2020-11-27T06:31:51Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n+\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n+\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n+\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n+\t\tfor (IClasspathEntry entry : existingEntries) {\n+\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n+\t\t\t\tnewEntries.add(entry);\n+\t\t\t} else {\n+\t\t\t\tIPath entryPath = entry.getPath();\n+\t\t\t\tif (entryPath.equals(outputFullPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));", "originalCommit": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\nindex 1f4bafcd..ed14ddfd 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n\n@@ -235,72 +235,6 @@ public final class ProjectUtils {\n \t\treturn false;\n \t}\n \n-\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n-\t\tIProject project = javaProject.getProject();\n-\t\tif (isVisibleProject(project)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (outputPath == null) {\n-\t\t\toutputPath = \"\";\n-\t\t} else {\n-\t\t\toutputPath = outputPath.trim();\n-\t\t}\n-\t\t\n-\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n-\t\t}\n-\n-\t\tif (StringUtils.isEmpty(outputPath)) {\n-\t\t\t// blank means using default output path\n-\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n-\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n-\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n-\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n-\t\tfor (IClasspathEntry entry : existingEntries) {\n-\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n-\t\t\t\tnewEntries.add(entry);\n-\t\t\t} else {\n-\t\t\t\tIPath entryPath = entry.getPath();\n-\t\t\t\tif (entryPath.equals(outputFullPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n-\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n-\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n-\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n-\t\t\t\t\tboolean hasExcluded = false;\n-\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n-\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n-\t\t\t\t\t\t\thasExcluded = true;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!hasExcluded) {\n-\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n-\t\t\t\t\t}\n-\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tnewEntries.add(entry);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);\n-\t\t} catch (JavaModelException e) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"Failed to set the output path.\", e));\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n \tpublic static IPath findBelongedWorkspaceRoot(IPath filePath) {\n \t\tPreferenceManager manager = JavaLanguageServerPlugin.getPreferencesManager();\n \t\tCollection<IPath> rootPaths = manager.getPreferences().getRootPaths();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwODE0Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531408146", "bodyText": "InvisibleProjectPreferenceChangeListener", "author": "testforstephen", "createdAt": "2020-11-27T06:41:15Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n+import org.eclipse.jdt.ls.core.internal.preferences.IPreferencesChangeListener;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.lsp4j.MessageParams;\n+import org.eclipse.lsp4j.MessageType;\n+\n+public class InvisiblePreferenceChangeListener implements IPreferencesChangeListener {", "originalCommit": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\nsimilarity index 85%\nrename from org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java\nrename to org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\nindex 6bb3be4b..587d725e 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisiblePreferenceChangeListener.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/InvisibleProjectPreferenceChangeListener.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2020 Microsoft Corporation and others.\n+ * Copyright (c) 2021 Microsoft Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License 2.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDAyNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531420027", "bodyText": "When i'm trying this feature, i found this operation may delete my existing files in the output folder.\nReproduce steps:\n\nOpen a standalone folder as below.\n\n |\u2500\u2500 app\n \u2502   ...\n \u2502   \u2514\u2500\u2500 build\n |          \u2514\u2500\u2500 run.script\n |   \u2514\u2500\u2500 src\n |          \u2514\u2500\u2500 Hello.java\n\n\nset build in the setting as the output path. -> The language server will auto delete my existing files in this folder. This is risky without the user's awareness.\n\nIMO, we should ask user for confirmation if the specified output path is not empty. Or just let the operation fail directly, and provide a specific error message to explain why.", "author": "testforstephen", "createdAt": "2020-11-27T07:19:20Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java", "diffHunk": "@@ -235,6 +235,72 @@ public static boolean isOnSourcePath(IPath sourcePath, IJavaProject project) thr\n \t\treturn false;\n \t}\n \n+\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n+\t\tIProject project = javaProject.getProject();\n+\t\tif (isVisibleProject(project)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (outputPath == null) {\n+\t\t\toutputPath = \"\";\n+\t\t} else {\n+\t\t\toutputPath = outputPath.trim();\n+\t\t}\n+\t\t\n+\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n+\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n+\t\t}\n+\n+\t\tif (StringUtils.isEmpty(outputPath)) {\n+\t\t\t// blank means using default output path\n+\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n+\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n+\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n+\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n+\t\tfor (IClasspathEntry entry : existingEntries) {\n+\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n+\t\t\t\tnewEntries.add(entry);\n+\t\t\t} else {\n+\t\t\t\tIPath entryPath = entry.getPath();\n+\t\t\t\tif (entryPath.equals(outputFullPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n+\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n+\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n+\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n+\t\t\t\t\tboolean hasExcluded = false;\n+\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n+\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n+\t\t\t\t\t\t\thasExcluded = true;\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!hasExcluded) {\n+\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n+\t\t\t\t\t}\n+\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n+\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n+\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n+\t\t\t\t} else {\n+\t\t\t\t\tnewEntries.add(entry);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);", "originalCommit": "d9f0cd6715e4ad2d9b8775ba062b22ad7f18b14c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzAwMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r531437000", "bodyText": "Thanks for catching that, I changed to throw a CoreException instead.", "author": "jdneo", "createdAt": "2020-11-27T08:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4MjYzMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r532682632", "bodyText": "Good catch on this case. Was thinking of the case of a non-writeable output folder, but given that the folder is relative to the project, this is pretty unlikely so not a huge issue.\nDo we plan this for 0.71.0 ?", "author": "rgrunber", "createdAt": "2020-11-30T15:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODMzOQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1594#discussion_r533018339", "bodyText": "@rgrunber there are some new concerns about the UX on our side. The current solution has two problems:\n\nit will automatically apply to JDT.LS just after the user finishes typing\nit allow the user to save into the global scoped setting, which might pollute other unmanaged folders\n\nA rough thinking right now is to change to expose a command, which is to set a folder to the compiled output path, and expose the command at the client extension. This is an initial idea, if you have any feedback, please let me know :)", "author": "jdneo", "createdAt": "2020-12-01T01:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\nindex 1f4bafcd..ed14ddfd 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/ProjectUtils.java\n\n@@ -235,72 +235,6 @@ public final class ProjectUtils {\n \t\treturn false;\n \t}\n \n-\tpublic static boolean setInvisibleProjectOutputPath(IJavaProject javaProject, String outputPath, IProgressMonitor monitor) throws CoreException {\n-\t\tIProject project = javaProject.getProject();\n-\t\tif (isVisibleProject(project)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\tif (outputPath == null) {\n-\t\t\toutputPath = \"\";\n-\t\t} else {\n-\t\t\toutputPath = outputPath.trim();\n-\t\t}\n-\t\t\n-\t\tif (new org.eclipse.core.runtime.Path(outputPath).isAbsolute()) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"The output path must be a relative path to the workspace.\"));\n-\t\t}\n-\n-\t\tif (StringUtils.isEmpty(outputPath)) {\n-\t\t\t// blank means using default output path\n-\t\t\tjavaProject.setOutputLocation(project.getFolder(\"bin\").getFullPath(), monitor);\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\toutputPath = WORKSPACE_LINK + IPath.SEPARATOR + outputPath;\n-\t\tIPath outputFullPath = project.getFolder(outputPath).getFullPath();\n-\t\tIClasspathEntry[] existingEntries = javaProject.getRawClasspath();\n-\t\tList<IClasspathEntry> newEntries = new ArrayList<>();\n-\t\tfor (IClasspathEntry entry : existingEntries) {\n-\t\t\tif (entry.getEntryKind() != IClasspathEntry.CPE_SOURCE) {\n-\t\t\t\tnewEntries.add(entry);\n-\t\t\t} else {\n-\t\t\t\tIPath entryPath = entry.getPath();\n-\t\t\t\tif (entryPath.equals(outputFullPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The output path cannot equal to source folder path, please provide a new path instead.\"));\n-\t\t\t\t} else if (entryPath.isPrefixOf(outputFullPath)) {\n-\t\t\t\t\tList<IPath> exclusionPatterns = new ArrayList<>(Arrays.asList(entry.getExclusionPatterns()));\n-\t\t\t\t\tIPath excludePath = outputFullPath.makeRelativeTo(entryPath);\n-\t\t\t\t\tboolean hasExcluded = false;\n-\t\t\t\t\tfor (IPath exclusionPattern : exclusionPatterns) {\n-\t\t\t\t\t\tif (exclusionPattern.isPrefixOf(excludePath)) {\n-\t\t\t\t\t\t\thasExcluded = true;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!hasExcluded) {\n-\t\t\t\t\t\texclusionPatterns.add(excludePath.addTrailingSeparator());\n-\t\t\t\t\t}\n-\t\t\t\t\tnewEntries.add(JavaCore.newSourceEntry(entryPath, exclusionPatterns.toArray(new IPath[0])));\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} else if (outputFullPath.isPrefixOf(entryPath)) {\n-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID,\n-\t\t\t\t\t\t\t\"The specified output path contains source folders, please provide a new path instead.\"));\n-\t\t\t\t} else {\n-\t\t\t\t\tnewEntries.add(entry);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tjavaProject.setRawClasspath(newEntries.toArray(new IClasspathEntry[0]), outputFullPath, monitor);\n-\t\t} catch (JavaModelException e) {\n-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, IConstants.PLUGIN_ID, \"Failed to set the output path.\", e));\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n \tpublic static IPath findBelongedWorkspaceRoot(IPath filePath) {\n \t\tPreferenceManager manager = JavaLanguageServerPlugin.getPreferencesManager();\n \t\tCollection<IPath> rootPaths = manager.getPreferences().getRootPaths();\n"}}, {"oid": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3f17943fa2e0c2a788296f5a4aecfe19727d0038", "message": "Support to specify output location for invisible project\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>", "committedDate": "2021-01-22T08:24:19Z", "type": "commit"}, {"oid": "3f17943fa2e0c2a788296f5a4aecfe19727d0038", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3f17943fa2e0c2a788296f5a4aecfe19727d0038", "message": "Support to specify output location for invisible project\n\nSigned-off-by: Sheng Chen <sheche@microsoft.com>", "committedDate": "2021-01-22T08:24:19Z", "type": "forcePushed"}]}