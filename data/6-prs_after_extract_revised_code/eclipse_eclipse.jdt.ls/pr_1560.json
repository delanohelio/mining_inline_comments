{"pr_number": 1560, "pr_title": "Created type doesn't implement sealed interface.", "pr_createdAt": "2020-10-06T18:52:47Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500951530", "bodyText": "I'd say the default would be final. Since the user is trying to restrict implementations, it'd make more sense to leave those restricted as well by default", "author": "fbricon", "createdAt": "2020-10-07T11:55:42Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"non-sealed \");", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1NjQ5Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500956492", "bodyText": "I don't remember if we're allowed to return snippets at that point, but if yes, and provided the client supports snippets, then returning ${1:|final,non-sealed,sealed|} would be the best.", "author": "fbricon", "createdAt": "2020-10-07T12:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyODEyNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501228127", "bodyText": "Cool feature. It would seem to be a great replacement for what JDT UI calls \"linked proposals\". There are proposals that allow cycling through a set of fixed values at various points of an applied code snippet/template.\nFrom what I can tell, only CompletionItem supports snippets through the CompletionItem#setInsertTextFormat(InsertTextFormat.Snippet), assuming the client supports it. However, quick fixes/assists are represented as CodeAction, and I don't see a way of indicating the TextEdit(s) may contain snippets for resolution.\nFor now I've set it to final.", "author": "rgrunber", "createdAt": "2020-10-07T18:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..42f19352 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n\n@@ -392,7 +390,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MjEwNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500952106", "bodyText": "We already know parent and type are not null, since they're an instance of Type.\nI think you want to check if typeDecl != null at some point", "author": "fbricon", "createdAt": "2020-10-07T11:56:49Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java", "diffHunk": "@@ -550,6 +550,25 @@ private static boolean hasFieldWithName(ITypeBinding typeBinding, String name) {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n+\n+\t\t/*\n+\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)\n+\t\t *  Support determining type of the 'permits' node type.\n+\t\t */\n+\t\tASTNode parent = node.getParent();\n+\t\tif (parent instanceof Type) {\n+\t\t\tType type = (Type) parent;\n+\t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n+\t\t\tif (parent != null && type != null) {", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjQ3NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222474", "bodyText": "Done. Moved typeDecl non-null check prior to calling typeDecl.isInterface().", "author": "rgrunber", "createdAt": "2020-10-07T18:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1MjEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\nindex 55f9a94c..b9665829 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java\n\n@@ -559,12 +559,10 @@ public class UnresolvedElementsSubProcessor {\n \t\tif (parent instanceof Type) {\n \t\t\tType type = (Type) parent;\n \t\t\tTypeDeclaration typeDecl = ASTNodes.getParent(node, TypeDeclaration.class);\n-\t\t\tif (parent != null && type != null) {\n-\t\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n-\t\t\t\t\tkind = TypeKinds.CLASSES;\n-\t\t\t\t\tif (typeDecl.isInterface()) {\n-\t\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n-\t\t\t\t\t}\n+\t\t\tif (type.getLocationInParent() == TypeDeclaration.PERMITS_TYPES_PROPERTY) {\n+\t\t\t\tkind = TypeKinds.CLASSES;\n+\t\t\t\tif (typeDecl != null && typeDecl.isInterface()) {\n+\t\t\t\t\tkind |= TypeKinds.INTERFACES;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mzg5NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500953895", "bodyText": "public final", "author": "fbricon", "createdAt": "2020-10-07T12:00:08Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");\n+\t\tbuf.append(\"}\\n\");\n+\t\tICompilationUnit cu = pack1.createCompilationUnit(\"E.java\", buf.toString(), false, null);\n+\n+\t\tbuf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"\\n\");\n+\t\tbuf.append(\"public non-sealed class F implements E {\\n\");", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjY0Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222647", "bodyText": "Done.", "author": "rgrunber", "createdAt": "2020-10-07T18:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk1Mzg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\nindex 9fef296f..75e93052 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java\n\n@@ -1421,7 +1421,7 @@ public class UnresolvedTypesQuickFixTest extends AbstractQuickFixTest {\n \t\tbuf = new StringBuilder();\n \t\tbuf.append(\"package test1;\\n\");\n \t\tbuf.append(\"\\n\");\n-\t\tbuf.append(\"public non-sealed class F implements E {\\n\");\n+\t\tbuf.append(\"public final class F implements E {\\n\");\n \t\tbuf.append(\"\\n\");\n \t\tbuf.append(\"}\\n\");\n \t\tExpected e1 = new Expected(\"Create class 'F'\", buf.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NTkxMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r500965911", "bodyText": "on L 395, please change StringBuilder buf = new StringBuilder();", "author": "fbricon", "createdAt": "2020-10-07T12:20:23Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -397,16 +398,26 @@ private String constructTypeStub(ICompilationUnit parentCU, String name, int mod\n \t\tif (modifiers != 0) {", "originalCommit": "73d99ee8cb099e0ed186e0810ae53e8e389668ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyMjgxOA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501222818", "bodyText": "Done.", "author": "rgrunber", "createdAt": "2020-10-07T18:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk2NTkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 1b4fcd9d..42f19352 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n\n@@ -392,7 +390,7 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n"}}, {"oid": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-07T18:21:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDM5NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550394", "bodyText": "we could avoid calling fCompilationUnit.findPrimaryType() several times in the same method, since a bunch of processing is happening behind the scene every time.", "author": "fbricon", "createdAt": "2020-10-08T08:46:42Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n+\t\tif (isPermitted) {\n+\t\t\tbuf.append(\"final \");\n+\t\t}\n+\n \t\tString type = \"\"; //$NON-NLS-1$\n \t\tString templateID = \"\"; //$NON-NLS-1$\n+\t\tString superType = \"\"; //$NON-NLS-1$\n \t\tswitch (fTypeKind) {\n \t\t\tcase K_CLASS:\n \t\t\t\ttype = \"class \"; //$NON-NLS-1$\n \t\t\t\ttemplateID = CodeGeneration.CLASS_BODY_TEMPLATE_ID;\n+\t\t\t\tsuperType = fCompilationUnit.findPrimaryType().isInterface() ? \"implements \" : \"extends \";", "originalCommit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n\n@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1MDkyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r501550920", "bodyText": "Assign fCompilationUnit.findPrimaryType() to a variable and reuse it on L413 and L434", "author": "fbricon", "createdAt": "2020-10-08T08:47:31Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java", "diffHunk": "@@ -391,22 +390,32 @@ private String constructCUContent(ICompilationUnit cu, String typeContent, Strin\n \t * Called from createType to construct the source for this type\n \t */\n \tprivate String constructTypeStub(ICompilationUnit parentCU, String name, int modifiers, String lineDelimiter) throws CoreException {\n-\t\tStringBuffer buf = new StringBuffer();\n+\t\tStringBuilder buf = new StringBuilder();\n \n \t\tbuf.append(Flags.toString(modifiers));\n \t\tif (modifiers != 0) {\n \t\t\tbuf.append(' ');\n \t\t}\n+\n+\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();", "originalCommit": "d3cc0967f13407f0cae0eac37ec1d46c8a04423a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\nindex 42f19352..37a21c39 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/NewCUProposal.java\n\n@@ -397,7 +397,8 @@ public class NewCUProposal extends ChangeCorrectionProposal {\n \t\t\tbuf.append(' ');\n \t\t}\n \n-\t\tString[] permittedNames = fCompilationUnit.findPrimaryType().getPermittedSubtypeNames();\n+\t\tIType cuType = fCompilationUnit.findPrimaryType();\n+\t\tString[] permittedNames = cuType.getPermittedSubtypeNames();\n \t\tboolean isPermitted = Arrays.asList(permittedNames).stream().anyMatch(p -> name.equals(p));\n \t\tif (isPermitted) {\n \t\t\tbuf.append(\"final \");\n"}}, {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-08T21:16:31Z", "type": "commit"}, {"oid": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c8dbec12a74fc071d3456305e98f374e8b2b60bf", "message": "Created type doesn't implement sealed interface.\n\n- Add quick fix to generate proper type declaration for sealed type\n- Fixes #1553\n- Add testcase\n\nSigned-off-by: Roland Grunberg <rgrunber@redhat.com>", "committedDate": "2020-10-08T21:16:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzAzMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r503967032", "bodyText": "Note : Attempting to upstream this as https://git.eclipse.org/r/c/jdt/eclipse.jdt.ui/+/170568 .", "author": "rgrunber", "createdAt": "2020-10-13T13:48:39Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/corrections/proposals/UnresolvedElementsSubProcessor.java", "diffHunk": "@@ -550,6 +550,23 @@ private static boolean hasFieldWithName(ITypeBinding typeBinding, String name) {\n \n \tprivate static int evauateTypeKind(ASTNode node, IJavaProject project) {\n \t\tint kind = ASTResolving.getPossibleTypeKinds(node, JavaModelUtil.is50OrHigher(project));\n+\n+\t\t/*\n+\t\t *  TODO : This code block should be contributed to ASTResolving.getPossibleTypeKinds(..)", "originalCommit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5MTE5OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r508891199", "bodyText": "When M2 is released, this block may be deleted ( https://bugs.eclipse.org/bugs/show_bug.cgi?id=567770 )", "author": "rgrunber", "createdAt": "2020-10-20T23:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NzAzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r503996381", "bodyText": "if E declares methods, then class F implements E but not those methods, leading to a compilation error", "author": "fbricon", "createdAt": "2020-10-13T14:25:08Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/correction/UnresolvedTypesQuickFixTest.java", "diffHunk": "@@ -1400,4 +1403,30 @@ public void testDontImportTestClassesInMainCode() throws Exception {\n \t\tassertCodeActionNotExists(cu1, \"Import 'Tests' (pt)\");\n \t}\n \n+\t@Test\n+\tpublic void testTypeInSealedTypeDeclaration() throws Exception {\n+\t\tMap<String, String> options15 = new HashMap<>();\n+\t\tJavaModelUtil.setComplianceOptions(options15, JavaCore.VERSION_15);\n+\t\toptions15.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, JavaCore.ENABLED);\n+\t\toptions15.put(JavaCore.COMPILER_PB_REPORT_PREVIEW_FEATURES, JavaCore.IGNORE);\n+\t\tfJProject1.setOptions(options15);\n+\n+\t\tIPackageFragment pack1 = fSourceFolder.createPackageFragment(\"test1\", false, null);\n+\t\tStringBuilder buf = new StringBuilder();\n+\t\tbuf.append(\"package test1;\\n\");\n+\t\tbuf.append(\"public sealed interface E permits F {\\n\");", "originalCommit": "c8dbec12a74fc071d3456305e98f374e8b2b60bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5MzMwNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r504093307", "bodyText": "I'll have another look at this. The initial problem I had was that adding the \"add unimplemented methods\" quick fix to the end of the existing one would fail because the ASTRewrite complained if the underlying CU didn't yet exist (which is the case here for F). This is why a lot of the code uses literal values to generate the code (eg. StubUtility* helpers). I could try calling StubUtility2Core.createImplementationStubCore(..) directly once we get the unimplemented methods but even that seems to require an ASTRewrite.\nWhen E declares methods, and after the create type is applied, there should be a separate quick fix to add those unimplemented methods.", "author": "rgrunber", "createdAt": "2020-10-13T16:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5ODUwNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1560#discussion_r504698504", "bodyText": "So given this is a more global issue with generated types, we'll address this in a separate issue.", "author": "fbricon", "createdAt": "2020-10-14T13:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjM4MQ=="}], "type": "inlineReview", "revised_code": null}]}