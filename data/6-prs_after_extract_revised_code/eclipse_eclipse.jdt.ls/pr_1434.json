{"pr_number": 1434, "pr_title": "Check for suspicious gradle-wrapper.jar", "pr_createdAt": "2020-05-05T18:07:55Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2NjMxNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420766316", "bodyText": "please remove that check", "author": "fbricon", "createdAt": "2020-05-06T12:54:10Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+public class WrapperValidator {\n+\n+\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n+\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n+\tprivate HashProvider hashProvider;\n+\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\n+\n+\tpublic WrapperValidator() {\n+\t\tthis(new HashProvider());\n+\t}\n+\n+\tpublic WrapperValidator(HashProvider hashProvider) {\n+\t\tthis.hashProvider = hashProvider;\n+\t}\n+\n+\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n+\t\tif (DISABLED) {", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDIzMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670232", "bodyText": "Removed.", "author": "snjeza", "createdAt": "2020-05-10T16:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2NjMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 1cb9f891..25dd0eec 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -12,86 +12,218 @@\n  *******************************************************************************/\n package org.eclipse.jdt.ls.internal.gradle.checksums;\n \n-import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.net.URL;\n-import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n \n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n public class WrapperValidator {\n \n-\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n-\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n \tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n-\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n-\tprivate HashProvider hashProvider;\n-\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final String SHA256 = \"SHA-256\";\n \n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n \n \tpublic WrapperValidator() {\n-\t\tthis(new HashProvider());\n \t}\n \n-\tpublic WrapperValidator(HashProvider hashProvider) {\n-\t\tthis.hashProvider = hashProvider;\n-\t}\n-\n-\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n-\t\tif (DISABLED) {\n-\t\t\treturn null;\n-\t\t}\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n \t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n \t\tif (!wrapperJar.toFile().exists()) {\n-\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n-\t\t}\n-\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n-\t\tif (!wrapperProperties.toFile().exists()) {\n-\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n \t\t}\n-\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n-\t\t\tProperties props = new Properties();\n-\t\t\tprops.load(is);\n-\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n-\t\t\tif (distributionUrl == null) {\n-\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n \t\t\t}\n-\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";\n-\t\t\tString checksum = hashProvider.getChecksum(wrapperJar.toFile());\n-\t\t\tString remoteChecksum = downloadRequestsCache.getIfPresent(sha256Url);\n-\t\t\tif (remoteChecksum == null) {\n-\t\t\t\tURL url = new URL(sha256Url);\n-\t\t\t\tBufferedReader in = null;\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleJobs();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n \t\t\t\ttry {\n-\t\t\t\t\tURLConnection urlConnection = url.openConnection();\n-\t\t\t\t\tin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-\t\t\t\t\tremoteChecksum = in.readLine();\n-\t\t\t\t\tdownloadRequestsCache.put(sha256Url, remoteChecksum);\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tJavaLanguageServerPlugin.logException(\"sha256url='\" + sha256Url + \"'. You can try to add '-Dgradle.wrapper.check.disabled=true' to 'java.jdt.ls.vmargs'\", e);\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n \t\t\t\t} finally {\n-\t\t\t\t\tif (in != null) {\n-\t\t\t\t\t\tin.close();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (remoteChecksum != null && remoteChecksum.equals(checksum)) {\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\treturn \"Invalid wrapper checksum: local=\" + checksum + \",remote=\" + remoteChecksum;\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n \t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n \t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {\n+\t\treturn allowed;\n+\t}\n+\n+\t/**\n+\t * @return the disallowed\n+\t */\n+\tpublic static Set<String> getDisallowed() {\n+\t\treturn disallowed;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2NzA2OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420767068", "bodyText": "validator should instead accept a list of authorized sha256s, provided via preferences", "author": "fbricon", "createdAt": "2020-05-06T12:55:18Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+public class WrapperValidator {\n+\n+\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n+\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDc5Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670792", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-10T16:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2NzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 1cb9f891..25dd0eec 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -12,86 +12,218 @@\n  *******************************************************************************/\n package org.eclipse.jdt.ls.internal.gradle.checksums;\n \n-import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.net.URL;\n-import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n \n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n public class WrapperValidator {\n \n-\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n-\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n \tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n-\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n-\tprivate HashProvider hashProvider;\n-\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final String SHA256 = \"SHA-256\";\n \n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n \n \tpublic WrapperValidator() {\n-\t\tthis(new HashProvider());\n \t}\n \n-\tpublic WrapperValidator(HashProvider hashProvider) {\n-\t\tthis.hashProvider = hashProvider;\n-\t}\n-\n-\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n-\t\tif (DISABLED) {\n-\t\t\treturn null;\n-\t\t}\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n \t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n \t\tif (!wrapperJar.toFile().exists()) {\n-\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n-\t\t}\n-\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n-\t\tif (!wrapperProperties.toFile().exists()) {\n-\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n \t\t}\n-\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n-\t\t\tProperties props = new Properties();\n-\t\t\tprops.load(is);\n-\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n-\t\t\tif (distributionUrl == null) {\n-\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n \t\t\t}\n-\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";\n-\t\t\tString checksum = hashProvider.getChecksum(wrapperJar.toFile());\n-\t\t\tString remoteChecksum = downloadRequestsCache.getIfPresent(sha256Url);\n-\t\t\tif (remoteChecksum == null) {\n-\t\t\t\tURL url = new URL(sha256Url);\n-\t\t\t\tBufferedReader in = null;\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleJobs();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n \t\t\t\ttry {\n-\t\t\t\t\tURLConnection urlConnection = url.openConnection();\n-\t\t\t\t\tin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-\t\t\t\t\tremoteChecksum = in.readLine();\n-\t\t\t\t\tdownloadRequestsCache.put(sha256Url, remoteChecksum);\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tJavaLanguageServerPlugin.logException(\"sha256url='\" + sha256Url + \"'. You can try to add '-Dgradle.wrapper.check.disabled=true' to 'java.jdt.ls.vmargs'\", e);\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n \t\t\t\t} finally {\n-\t\t\t\t\tif (in != null) {\n-\t\t\t\t\t\tin.close();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (remoteChecksum != null && remoteChecksum.equals(checksum)) {\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\treturn \"Invalid wrapper checksum: local=\" + checksum + \",remote=\" + remoteChecksum;\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n \t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n \t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {\n+\t\treturn allowed;\n+\t}\n+\n+\t/**\n+\t * @return the disallowed\n+\t */\n+\tpublic static Set<String> getDisallowed() {\n+\t\treturn disallowed;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MDQ4Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420770482", "bodyText": "no. we should instead check the checksum exists in :\n1- a cache version of https://services.gradle.org/versions/all\n2- a live version of https://services.gradle.org/versions/all, if it wasn't found in the cache\nThis is fairly similar to https://github.com/gradle/wrapper-validation-action/blob/master/src/checksums.ts, but with a local cache", "author": "fbricon", "createdAt": "2020-05-06T13:00:16Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+public class WrapperValidator {\n+\n+\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n+\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n+\tprivate HashProvider hashProvider;\n+\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\n+\n+\tpublic WrapperValidator() {\n+\t\tthis(new HashProvider());\n+\t}\n+\n+\tpublic WrapperValidator(HashProvider hashProvider) {\n+\t\tthis.hashProvider = hashProvider;\n+\t}\n+\n+\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n+\t\tif (DISABLED) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n+\t\t}\n+\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n+\t\tif (!wrapperProperties.toFile().exists()) {\n+\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t}\n+\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n+\t\t\tProperties props = new Properties();\n+\t\t\tprops.load(is);\n+\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n+\t\t\tif (distributionUrl == null) {\n+\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\t\t}\n+\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDI4Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670282", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-10T16:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 1cb9f891..25dd0eec 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -12,86 +12,218 @@\n  *******************************************************************************/\n package org.eclipse.jdt.ls.internal.gradle.checksums;\n \n-import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.net.URL;\n-import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n \n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n public class WrapperValidator {\n \n-\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n-\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n \tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n-\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n-\tprivate HashProvider hashProvider;\n-\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final String SHA256 = \"SHA-256\";\n \n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n \n \tpublic WrapperValidator() {\n-\t\tthis(new HashProvider());\n \t}\n \n-\tpublic WrapperValidator(HashProvider hashProvider) {\n-\t\tthis.hashProvider = hashProvider;\n-\t}\n-\n-\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n-\t\tif (DISABLED) {\n-\t\t\treturn null;\n-\t\t}\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n \t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n \t\tif (!wrapperJar.toFile().exists()) {\n-\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n-\t\t}\n-\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n-\t\tif (!wrapperProperties.toFile().exists()) {\n-\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n \t\t}\n-\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n-\t\t\tProperties props = new Properties();\n-\t\t\tprops.load(is);\n-\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n-\t\t\tif (distributionUrl == null) {\n-\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n \t\t\t}\n-\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";\n-\t\t\tString checksum = hashProvider.getChecksum(wrapperJar.toFile());\n-\t\t\tString remoteChecksum = downloadRequestsCache.getIfPresent(sha256Url);\n-\t\t\tif (remoteChecksum == null) {\n-\t\t\t\tURL url = new URL(sha256Url);\n-\t\t\t\tBufferedReader in = null;\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleJobs();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n \t\t\t\ttry {\n-\t\t\t\t\tURLConnection urlConnection = url.openConnection();\n-\t\t\t\t\tin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-\t\t\t\t\tremoteChecksum = in.readLine();\n-\t\t\t\t\tdownloadRequestsCache.put(sha256Url, remoteChecksum);\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tJavaLanguageServerPlugin.logException(\"sha256url='\" + sha256Url + \"'. You can try to add '-Dgradle.wrapper.check.disabled=true' to 'java.jdt.ls.vmargs'\", e);\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n \t\t\t\t} finally {\n-\t\t\t\t\tif (in != null) {\n-\t\t\t\t\t\tin.close();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (remoteChecksum != null && remoteChecksum.equals(checksum)) {\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\treturn \"Invalid wrapper checksum: local=\" + checksum + \",remote=\" + remoteChecksum;\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n \t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n \t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {\n+\t\treturn allowed;\n+\t}\n+\n+\t/**\n+\t * @return the disallowed\n+\t */\n+\tpublic static Set<String> getDisallowed() {\n+\t\treturn disallowed;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjE1NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420772155", "bodyText": "I'd rather throw an exception here", "author": "fbricon", "createdAt": "2020-05-06T13:03:01Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+\n+public class WrapperValidator {\n+\n+\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n+\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n+\tprivate HashProvider hashProvider;\n+\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\n+\n+\tpublic WrapperValidator() {\n+\t\tthis(new HashProvider());\n+\t}\n+\n+\tpublic WrapperValidator(HashProvider hashProvider) {\n+\t\tthis.hashProvider = hashProvider;\n+\t}\n+\n+\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n+\t\tif (DISABLED) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n+\t\t}\n+\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n+\t\tif (!wrapperProperties.toFile().exists()) {\n+\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t}\n+\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n+\t\t\tProperties props = new Properties();\n+\t\t\tprops.load(is);\n+\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n+\t\t\tif (distributionUrl == null) {\n+\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\t\t}\n+\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";\n+\t\t\tString checksum = hashProvider.getChecksum(wrapperJar.toFile());\n+\t\t\tString remoteChecksum = downloadRequestsCache.getIfPresent(sha256Url);\n+\t\t\tif (remoteChecksum == null) {\n+\t\t\t\tURL url = new URL(sha256Url);\n+\t\t\t\tBufferedReader in = null;\n+\t\t\t\ttry {\n+\t\t\t\t\tURLConnection urlConnection = url.openConnection();\n+\t\t\t\t\tin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n+\t\t\t\t\tremoteChecksum = in.readLine();\n+\t\t\t\t\tdownloadRequestsCache.put(sha256Url, remoteChecksum);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tJavaLanguageServerPlugin.logException(\"sha256url='\" + sha256Url + \"'. You can try to add '-Dgradle.wrapper.check.disabled=true' to 'java.jdt.ls.vmargs'\", e);\n+\t\t\t\t} finally {\n+\t\t\t\t\tif (in != null) {\n+\t\t\t\t\t\tin.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (remoteChecksum != null && remoteChecksum.equals(checksum)) {\n+\t\t\t\treturn null;\n+\t\t\t} else {", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDgxMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670813", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-10T16:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 1cb9f891..25dd0eec 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -12,86 +12,218 @@\n  *******************************************************************************/\n package org.eclipse.jdt.ls.internal.gradle.checksums;\n \n-import java.io.BufferedReader;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.net.URL;\n-import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n-import java.util.Properties;\n-import java.util.concurrent.TimeUnit;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n \n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n public class WrapperValidator {\n \n-\tprivate static final String DISTRIBUTION_URL = \"distributionUrl\";\n-\tprivate static final String GRADLE_WRAPPER_PROPERTIES = \"gradle/wrapper/gradle-wrapper.properties\";\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n \tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n-\tprivate final boolean DISABLED = Boolean.getBoolean(\"gradle.wrapper.check.disabled\");\n-\tprivate HashProvider hashProvider;\n-\tprotected static Cache<String, String> downloadRequestsCache = CacheBuilder.newBuilder().maximumSize(100).expireAfterWrite(1, TimeUnit.HOURS).build();\n+\tprivate static final String SHA256 = \"SHA-256\";\n \n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n \n \tpublic WrapperValidator() {\n-\t\tthis(new HashProvider());\n \t}\n \n-\tpublic WrapperValidator(HashProvider hashProvider) {\n-\t\tthis.hashProvider = hashProvider;\n-\t}\n-\n-\tpublic String checkWrapper(String baseDir) throws IOException, NoSuchAlgorithmException {\n-\t\tif (DISABLED) {\n-\t\t\treturn null;\n-\t\t}\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n \t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n \t\tif (!wrapperJar.toFile().exists()) {\n-\t\t\treturn wrapperJar.toString() + \" doesn't exist.\";\n-\t\t}\n-\t\tPath wrapperProperties = Paths.get(baseDir, GRADLE_WRAPPER_PROPERTIES);\n-\t\tif (!wrapperProperties.toFile().exists()) {\n-\t\t\treturn wrapperProperties.toString() + \" doesn't exist.\";\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n \t\t}\n-\t\ttry (InputStream is = new FileInputStream(wrapperProperties.toFile())) {\n-\t\t\tProperties props = new Properties();\n-\t\t\tprops.load(is);\n-\t\t\tString distributionUrl = props.getProperty(DISTRIBUTION_URL);\n-\t\t\tif (distributionUrl == null) {\n-\t\t\t\treturn \"Invalid the distributionUrl property\";\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n \t\t\t}\n-\t\t\tString sha256Url = distributionUrl.replace(\"-bin.zip\",\"\").replace(\"-all.zip\", \"\") + \"-wrapper.jar.sha256\";\n-\t\t\tString checksum = hashProvider.getChecksum(wrapperJar.toFile());\n-\t\t\tString remoteChecksum = downloadRequestsCache.getIfPresent(sha256Url);\n-\t\t\tif (remoteChecksum == null) {\n-\t\t\t\tURL url = new URL(sha256Url);\n-\t\t\t\tBufferedReader in = null;\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleJobs();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n \t\t\t\ttry {\n-\t\t\t\t\tURLConnection urlConnection = url.openConnection();\n-\t\t\t\t\tin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n-\t\t\t\t\tremoteChecksum = in.readLine();\n-\t\t\t\t\tdownloadRequestsCache.put(sha256Url, remoteChecksum);\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tJavaLanguageServerPlugin.logException(\"sha256url='\" + sha256Url + \"'. You can try to add '-Dgradle.wrapper.check.disabled=true' to 'java.jdt.ls.vmargs'\", e);\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n \t\t\t\t} finally {\n-\t\t\t\t\tif (in != null) {\n-\t\t\t\t\t\tin.close();\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (remoteChecksum != null && remoteChecksum.equals(checksum)) {\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\treturn \"Invalid wrapper checksum: local=\" + checksum + \",remote=\" + remoteChecksum;\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n \t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n \t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {\n+\t\treturn allowed;\n+\t}\n+\n+\t/**\n+\t * @return the disallowed\n+\t */\n+\tpublic static Set<String> getDisallowed() {\n+\t\treturn disallowed;\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjYzNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420772636", "bodyText": "needs to move to a WrapperValidatorTest class", "author": "fbricon", "createdAt": "2020-05-06T13:03:48Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java", "diffHunk": "@@ -158,6 +159,14 @@ public void testDisableGradleWrapper() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testGradleWrapper() throws Exception {", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MzE5OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420773199", "bodyText": "also need to add tests checking we can actually detect suspicious wrappers", "author": "fbricon", "createdAt": "2020-05-06T13:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDMyMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670323", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-10T16:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java\nindex 7d87a136..d83795cd 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporterTest.java\n\n@@ -159,14 +158,6 @@ public class GradleProjectImporterTest extends AbstractGradleBasedTest{\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testGradleWrapper() throws Exception {\n-\t\tFile file = new File(getSourceProjectDirectory(), \"gradle/simple-gradle\");\n-\t\tassertTrue(file.isDirectory());\n-\t\tString result = new WrapperValidator().checkWrapper(file.getAbsolutePath());\n-\t\tassertNull(result);\n-\t}\n-\n \t@Test\n \tpublic void testGradleUserHome() throws Exception {\n \t\tString gradleUserHomePreference = JavaLanguageServerPlugin.getPreferencesManager().getPreferences().getGradleUserHome();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Njg2NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r420776865", "bodyText": "A meaningful error message should eventually bubble up to the client. Listing all suspicious wrappers (if we find several)", "author": "fbricon", "createdAt": "2020-05-06T13:10:20Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java", "diffHunk": "@@ -105,7 +108,18 @@ private void importDir(Path rootFolder, IProgressMonitor monitor) {\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n \t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n-\t\t\treturn GradleDistribution.fromBuild();\n+\t\t\tWrapperValidator validator = new WrapperValidator();\n+\t\t\ttry {\n+\t\t\t\tString result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result == null) {\n+\t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n+\t\t\t\t\treturn gradleDistribution;\n+\t\t\t\t} else {", "originalCommit": "8df1aed87ae777b75799d2bda49b2ca404e54926", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY3MDUyNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r422670526", "bodyText": "Fixed. We use/check only jars included to WrapperGradleDistribution.", "author": "snjeza", "createdAt": "2020-05-10T16:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3Njg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\nindex 322e1422..dee2135d 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n\n@@ -107,24 +110,37 @@ public class GradleProjectImporter extends AbstractProjectImporter {\n \t}\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n \t\t\tWrapperValidator validator = new WrapperValidator();\n \t\t\ttry {\n-\t\t\t\tString result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n-\t\t\t\tif (result == null) {\n+\t\t\t\tValidationResult result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result.isValid()) {\n \t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n \t\t\t\t\treturn gradleDistribution;\n \t\t\t\t} else {\n-\t\t\t\t\tJavaLanguageServerPlugin.logInfo(result);\n+\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getSha256())) {\n+\t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n+\t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n+\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_SHA256__\";\n+\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getSha256()));\n+\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\t} catch (CoreException e) {\n \t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n \t\t\t}\n \t\t}\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().getGradleVersion() != null) {\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().getGradleVersion() != null) {\n \t\t\tList<GradleVersion> versions = CorePlugin.publishedGradleVersions().getVersions();\n \t\t\tGradleVersion gradleVersion = null;\n-\t\t\tString versionString = JavaLanguageServerPlugin.getPreferencesManager().getPreferences().getGradleVersion();\n+\t\t\tString versionString = preferencesManager.getPreferences().getGradleVersion();\n \t\t\tGradleVersion requiredVersion = GradleVersion.version(versionString);\n \t\t\tfor (GradleVersion version : versions) {\n \t\t\t\tif (version.compareTo(requiredVersion) == 0) {\n"}}, {"oid": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/fef3cf9718efc81e513ed692e218332fe74e4e9f", "message": "Check gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-10T16:50:14Z", "type": "forcePushed"}, {"oid": "60b458349b780484594682b93dffaf2db16e2f0f", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/60b458349b780484594682b93dffaf2db16e2f0f", "message": "Check gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-13T14:56:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyMzgzOA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424423838", "bodyText": "waitForLoadingGradleVersionJob", "author": "fbricon", "createdAt": "2020-05-13T13:10:19Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JobHelpers.java", "diffHunk": "@@ -210,6 +210,10 @@ public static void waitForJobs(String jobFamily, IProgressMonitor monitor) {\n \t\t}\n \t}\n \n+\tpublic static void waitForLoadingGradleJobs() {", "originalCommit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzA4OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424697089", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-13T20:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyMzgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JobHelpers.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JobHelpers.java\nindex 90b73a5f..f5a79e1b 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JobHelpers.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/JobHelpers.java\n\n@@ -210,7 +210,7 @@ public final class JobHelpers {\n \t\t}\n \t}\n \n-\tpublic static void waitForLoadingGradleJobs() {\n+\tpublic static void waitForLoadingGradleVersionJob() {\n \t\twaitForJobs(LoadingGradleVersionJobMatcher.INSTANCE, MAX_TIME_MILLIS);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNzQ5Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424427493", "bodyText": "java.imports.gradle.wrapper.checksums", "author": "fbricon", "createdAt": "2020-05-13T13:15:29Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -209,6 +213,15 @@\n \t */\n \tpublic static final String SELECTIONRANGE_ENABLED_KEY = \"java.selectionRange.enabled\";\n \n+\t/**\n+\t * A named preference that holds the allowed gradle wrapper sha256 checksums.\n+\t * <p>\n+\t * Value is of type <code>String</code>: list of checksums.\n+\t * </p>\n+\t */\n+\tpublic static final String JAVA_GRADLE_WRAPPER_SHA256_KEY = \"java.gradle.wrapper.sha256.checksums\";", "originalCommit": "fef3cf9718efc81e513ed692e218332fe74e4e9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNDM1Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427404352", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNzQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex f0015b14..07628744 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -219,7 +219,7 @@ public class Preferences {\n \t * Value is of type <code>String</code>: list of checksums.\n \t * </p>\n \t */\n-\tpublic static final String JAVA_GRADLE_WRAPPER_SHA256_KEY = \"java.gradle.wrapper.sha256.checksums\";\n+\tpublic static final String JAVA_GRADLE_WRAPPER_SHA256_KEY = \"java.imports.gradle.wrapper.checksums\";\n \tpublic static final List<String> JAVA_GRADLE_WRAPPER_SHA256_DEFAULT;\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTg4Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424585882", "bodyText": "you need to check if client supports actionable notifications and specifically supports gradle wrapper management", "author": "fbricon", "createdAt": "2020-05-13T16:50:05Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java", "diffHunk": "@@ -107,13 +113,37 @@ private void importDir(Path rootFolder, IProgressMonitor monitor) {\n \t}\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n-\t\t\treturn GradleDistribution.fromBuild();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n+\t\t\tWrapperValidator validator = new WrapperValidator();\n+\t\t\ttry {\n+\t\t\t\tValidationResult result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result.isValid()) {\n+\t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n+\t\t\t\t\treturn gradleDistribution;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getSha256())) {\n+\t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n+\t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n+\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_SHA256__\";\n+\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()", "originalCommit": "60b458349b780484594682b93dffaf2db16e2f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjEzMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424586133", "bodyText": "else need to send a regular notification to the client", "author": "fbricon", "createdAt": "2020-05-13T16:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MTY2NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424671665", "bodyText": "... specifically supports gradle wrapper management\n\nWe check it at https://github.com/eclipse/eclipse.jdt.ls/pull/1434/files/60b458349b780484594682b93dffaf2db16e2f0f#diff-e696f471c869cd239fd5dbb142db81efR117", "author": "snjeza", "createdAt": "2020-05-13T19:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzI0Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424697247", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-13T20:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\nindex d05e866b..e08f8026 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n\n@@ -122,17 +123,24 @@ public class GradleProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n \t\t\t\t\treturn gradleDistribution;\n \t\t\t\t} else {\n-\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getSha256())) {\n+\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getChecksum())) {\n \t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n \t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n-\t\t\t\t\t\t\t//@formatter:off\n-\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_SHA256__\";\n-\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n-\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n-\t\t\t\t\t\t\t\t.withMessage(message)\n-\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getSha256()));\n-\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n-\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n+\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n+\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t\t//@formatter:on\n+\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString id = \"gradle/checksum\";\n+\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Njg4Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424586886", "bodyText": "ChecksumWrapper", "author": "fbricon", "createdAt": "2020-05-13T16:51:38Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -1367,4 +1443,9 @@ public Preferences setStaticImportOnDemandThreshold(int staticImportOnDemandThre\n \t\tdefEclipsePrefs.put(CodeStyleConfiguration.ORGIMPORTS_STATIC_ONDEMANDTHRESHOLD, String.valueOf(this.staticImportOnDemandThreshold));\n \t\treturn this;\n \t}\n+\n+\tclass Sha256 {", "originalCommit": "60b458349b780484594682b93dffaf2db16e2f0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex f0015b14..07628744 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -1444,8 +1444,8 @@ public class Preferences {\n \t\treturn this;\n \t}\n \n-\tclass Sha256 {\n-\t\tprivate String sha256;\n+\tclass ChecksumWrapper {\n+\t\tprivate String checksum;\n \t\tprivate boolean allowed;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Njk3OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424586978", "bodyText": "checksum", "author": "fbricon", "createdAt": "2020-05-13T16:51:49Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -1367,4 +1443,9 @@ public Preferences setStaticImportOnDemandThreshold(int staticImportOnDemandThre\n \t\tdefEclipsePrefs.put(CodeStyleConfiguration.ORGIMPORTS_STATIC_ONDEMANDTHRESHOLD, String.valueOf(this.staticImportOnDemandThreshold));\n \t\treturn this;\n \t}\n+\n+\tclass Sha256 {\n+\t\tprivate String sha256;", "originalCommit": "60b458349b780484594682b93dffaf2db16e2f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzM3Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424697376", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-13T20:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Njk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex f0015b14..07628744 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -1444,8 +1444,8 @@ public class Preferences {\n \t\treturn this;\n \t}\n \n-\tclass Sha256 {\n-\t\tprivate String sha256;\n+\tclass ChecksumWrapper {\n+\t\tprivate String checksum;\n \t\tprivate boolean allowed;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODU5OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424588598", "bodyText": "HttpURLConnection connection = (HttpURLConnection) obj.openConnection();\ntry (AutoCloseable closer = () -> connection.disconnect()) {", "author": "fbricon", "createdAt": "2020-05-13T16:54:28Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.core.runtime.jobs.Job;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.gradle.api.UncheckedIOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class DownloadChecksumJob extends Job {\n+\n+\tpublic static final String WRAPPER_VALIDATOR_JOBS = \"WrapperValidatorJobs\";\n+\n+\tprivate final BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n+\n+\tpublic DownloadChecksumJob() {\n+\t\tsuper(\"Download gradle sha256\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)\n+\t */\n+\t@Override\n+\tprotected IStatus run(IProgressMonitor monitor) {\n+\t\tint totalWork = 2 * queue.size();\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, totalWork);\n+\t\twhile (!queue.isEmpty() && !monitor.isCanceled()) {\n+\t\t\tString urlStr = queue.poll();\n+\t\t\tURL url;\n+\t\t\ttry {\n+\t\t\t\turl = new URL(urlStr);\n+\t\t\t} catch (MalformedURLException e1) {\n+\t\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + urlStr);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tsubMonitor.setTaskName(url.toString());\n+\t\t\tHttpURLConnection connection = null;\n+\t\t\tInputStreamReader reader = null;\n+\t\t\ttry {", "originalCommit": "60b458349b780484594682b93dffaf2db16e2f0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NzUxMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r424697511", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-13T20:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "71622b72f686a484942499b2922add895a8c0ee2", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\nindex 3cb50863..7e23dfe6 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n\n@@ -33,7 +33,6 @@ import org.gradle.api.UncheckedIOException;\n \n import com.google.common.base.Charsets;\n import com.google.common.io.CharStreams;\n-import com.google.common.io.Closeables;\n \n /**\n  *\n"}}, {"oid": "71622b72f686a484942499b2922add895a8c0ee2", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/71622b72f686a484942499b2922add895a8c0ee2", "message": "Check gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-13T19:56:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MjkxNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426572916", "bodyText": "move to utility class", "author": "fbricon", "createdAt": "2020-05-18T11:59:27Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNDY4Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427404686", "bodyText": "Fixed", "author": "snjeza", "createdAt": "2020-05-19T15:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MjkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NjA5NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426576095", "bodyText": "use StatusFactory.newErrorStatus\nWe prolly need a new ExceptionFactory class, with methods like\npublic static CoreException newException(String message) {\n   return new CoreException(StatusFactory.newErrorStatus(message));\n}", "author": "fbricon", "createdAt": "2020-05-18T12:05:43Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNDg0NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427404845", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3Njg5NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426576894", "bodyText": "again move to factory like:\npublic static CoreException newException(Exception exception) {\n   return new CoreException(StatusFactory.newErrorStatus(exception.getMessage(), exception));\n}", "author": "fbricon", "createdAt": "2020-05-18T12:07:14Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNjczMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427406730", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3Njg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NzI3MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426577271", "bodyText": ".tooling/gradle/checksums", "author": "fbricon", "createdAt": "2020-05-18T12:07:54Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNjkzNQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427406935", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3ODA2Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426578067", "bodyText": "Download Gradle Wrapper checksums", "author": "fbricon", "createdAt": "2020-05-18T12:09:32Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.core.runtime.jobs.Job;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.gradle.api.UncheckedIOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.CharStreams;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class DownloadChecksumJob extends Job {\n+\n+\tpublic static final String WRAPPER_VALIDATOR_JOBS = \"WrapperValidatorJobs\";\n+\n+\tprivate final BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n+\n+\tpublic DownloadChecksumJob() {\n+\t\tsuper(\"Download gradle sha256\");", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzEzNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427407137", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3ODA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\nindex 7e23dfe6..48ef5177 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n\n@@ -46,7 +46,7 @@ public class DownloadChecksumJob extends Job {\n \tprivate final BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n \n \tpublic DownloadChecksumJob() {\n-\t\tsuper(\"Download gradle sha256\");\n+\t\tsuper(\"Download Gradle Wrapper checksums\");\n \t}\n \n \t/* (non-Javadoc)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MTEzNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426581136", "bodyText": "add\npublic boolean isEmpty() {\n  return queue.isEmpty();\n}", "author": "fbricon", "createdAt": "2020-05-18T12:15:29Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.SubMonitor;\n+import org.eclipse.core.runtime.jobs.Job;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.gradle.api.UncheckedIOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.CharStreams;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class DownloadChecksumJob extends Job {\n+\n+\tpublic static final String WRAPPER_VALIDATOR_JOBS = \"WrapperValidatorJobs\";\n+\n+\tprivate final BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n+\n+\tpublic DownloadChecksumJob() {\n+\t\tsuper(\"Download gradle sha256\");\n+\t}\n+\n+\t/* (non-Javadoc)\n+\t * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)\n+\t */\n+\t@Override\n+\tprotected IStatus run(IProgressMonitor monitor) {\n+\t\tint totalWork = 2 * queue.size();\n+\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, totalWork);\n+\t\twhile (!queue.isEmpty() && !monitor.isCanceled()) {\n+\t\t\tString urlStr = queue.poll();\n+\t\t\tURL url;\n+\t\t\ttry {\n+\t\t\t\turl = new URL(urlStr);\n+\t\t\t} catch (MalformedURLException e1) {\n+\t\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + urlStr);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tsubMonitor.setTaskName(url.toString());\n+\t\t\tfinal HttpURLConnection connection;\n+\t\t\ttry {\n+\t\t\t\tconnection = (HttpURLConnection) url.openConnection();\n+\t\t\t\tconnection.setConnectTimeout(10000);\n+\t\t\t\tconnection.setReadTimeout(10000);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\ttry (AutoCloseable closer = (() -> connection.disconnect()); InputStreamReader reader = new InputStreamReader(connection.getInputStream(), Charsets.UTF_8);) {\n+\t\t\t\tString sha256 = CharStreams.toString(reader);\n+\t\t\t\tFile sha256File = new File(WrapperValidator.getSha256CacheFile(), WrapperValidator.getFileName(urlStr));\n+\t\t\t\twrite(sha256File, sha256);\n+\t\t\t\tWrapperValidator.getAllowed().add(sha256);\n+\t\t\t\tsubMonitor.worked(2);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tthrow new UncheckedIOException(\"Cannot download Gradle sha256 checksum: \" + url.toString(), e);\n+\t\t\t}\n+\t\t}\n+\t\tsubMonitor.done();\n+\t\treturn Status.OK_STATUS;\n+\t}\n+\n+\tpublic void add(String urlStr) {\n+\t\tqueue.add(urlStr);\n+\t}", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzQyMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427407423", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MTEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\nindex 7e23dfe6..48ef5177 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/DownloadChecksumJob.java\n\n@@ -46,7 +46,7 @@ public class DownloadChecksumJob extends Job {\n \tprivate final BlockingQueue<String> queue = new LinkedBlockingQueue<>();\n \n \tpublic DownloadChecksumJob() {\n-\t\tsuper(\"Download gradle sha256\");\n+\t\tsuper(\"Download Gradle Wrapper checksums\");\n \t}\n \n \t/* (non-Javadoc)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MTk0MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426581940", "bodyText": "I don't like performing stuff like that here in the setter. For later: use a preference listener to do that kind of things", "author": "fbricon", "createdAt": "2020-05-18T12:17:01Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -888,6 +941,25 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t\treturn this;\n \t}\n \n+\tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n+\t\tList<String> oldAllowed = this.sha256Allowed;\n+\t\tList<String> oldDisallowed = this.sha256Disallowed;\n+\t\tWrapperValidator.getAllowed().clear();\n+\t\tthis.sha256Allowed = sha256Allowed;\n+\t\tWrapperValidator.getDisallowed().clear();\n+\t\tif (sha256Disallowed != null) {\n+\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);\n+\t\t}\n+\t\tthis.sha256Disallowed = sha256Disallowed;\n+\t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n+\t\tif (projectsManager != null && (!Objects.equals(oldAllowed, this.sha256Allowed) || !Objects.equals(oldDisallowed, this.sha256Disallowed))) {\n+\t\t\tfor (IProject project : ProjectUtils.getGradleProjects()) {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex 07628744..0b437f24 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -944,11 +944,10 @@ public class Preferences {\n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n \t\tList<String> oldAllowed = this.sha256Allowed;\n \t\tList<String> oldDisallowed = this.sha256Disallowed;\n-\t\tWrapperValidator.getAllowed().clear();\n+\t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n-\t\tWrapperValidator.getDisallowed().clear();\n \t\tif (sha256Disallowed != null) {\n-\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);\n+\t\t\tWrapperValidator.disallow(sha256Disallowed);\n \t\t}\n \t\tthis.sha256Disallowed = sha256Disallowed;\n \t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NDUyMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426584522", "bodyText": "if (!downloadJob.isEmpty()) {\n   downloadJob.schedule();\n}", "author": "fbricon", "createdAt": "2020-05-18T12:21:52Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzU2MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427407561", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NDUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NjkyOQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426586929", "bodyText": "NoSuchAlgorithmException should be safely swallowed since SHA-256 should always be supported, unless I'm wrong", "author": "fbricon", "createdAt": "2020-05-18T12:26:10Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTM2Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427409367", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NjkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NzUyMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426587521", "bodyText": "return immutable Set", "author": "fbricon", "createdAt": "2020-05-18T12:27:10Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n+\t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n+\t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzc2MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427407760", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NzUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NzU4NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426587584", "bodyText": "return immutable Set", "author": "fbricon", "createdAt": "2020-05-18T12:27:17Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {\n+\t\tFile file = new File(System.getProperty(\"user.home\"), \".tooling/gradle/sha256cache\");\n+\t\tfile.mkdirs();\n+\t\treturn file;\n+\t}\n+\n+\tpublic String getChecksum(File file) throws IOException, NoSuchAlgorithmException {\n+\t\tMessageDigest messageDigest = MessageDigest.getInstance(SHA256);\n+\t\ttry (DigestInputStream dis = new DigestInputStream(new FileInputStream(file), messageDigest)) {\n+\t\t\tbyte[] bytes = new byte[32768];\n+\t\t\twhile (dis.read(bytes) != -1) {\n+\t\t\t\t;\n+\t\t\t}\n+\t\t\tmessageDigest = dis.getMessageDigest();\n+\t\t}\n+\t\tStringBuilder result = new StringBuilder();\n+\t\tfor (byte b : messageDigest.digest()) {\n+\t\t\tresult.append(String.format(\"%02x\", b));\n+\t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tpublic static Set<String> getAllowed() {\n+\t\treturn allowed;\n+\t}\n+\n+\t/**\n+\t * @return the disallowed\n+\t */\n+\tpublic static Set<String> getDisallowed() {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTIyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427409220", "bodyText": "Fixed", "author": "snjeza", "createdAt": "2020-05-19T15:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4NzU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4ODUwNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426588507", "bodyText": "no, getAllowed() should be immutable", "author": "fbricon", "createdAt": "2020-05-18T12:28:50Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -888,6 +941,25 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t\treturn this;\n \t}\n \n+\tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n+\t\tList<String> oldAllowed = this.sha256Allowed;\n+\t\tList<String> oldDisallowed = this.sha256Disallowed;\n+\t\tWrapperValidator.getAllowed().clear();", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzkxNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427407916", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4ODUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex 07628744..0b437f24 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -944,11 +944,10 @@ public class Preferences {\n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n \t\tList<String> oldAllowed = this.sha256Allowed;\n \t\tList<String> oldDisallowed = this.sha256Disallowed;\n-\t\tWrapperValidator.getAllowed().clear();\n+\t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n-\t\tWrapperValidator.getDisallowed().clear();\n \t\tif (sha256Disallowed != null) {\n-\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);\n+\t\t\tWrapperValidator.disallow(sha256Disallowed);\n \t\t}\n \t\tthis.sha256Disallowed = sha256Disallowed;\n \t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4ODc3OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426588778", "bodyText": "no, getDisallowed() should be immutable", "author": "fbricon", "createdAt": "2020-05-18T12:29:13Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -888,6 +941,25 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t\treturn this;\n \t}\n \n+\tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n+\t\tList<String> oldAllowed = this.sha256Allowed;\n+\t\tList<String> oldDisallowed = this.sha256Disallowed;\n+\t\tWrapperValidator.getAllowed().clear();\n+\t\tthis.sha256Allowed = sha256Allowed;\n+\t\tWrapperValidator.getDisallowed().clear();", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4OTc4Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426589786", "bodyText": "there should be a WrapperValidator.clear() method that encapsulates allowed.clear() &  disallowed.clear()", "author": "fbricon", "createdAt": "2020-05-18T12:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4ODc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODA2NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408065", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4ODc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex 07628744..0b437f24 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -944,11 +944,10 @@ public class Preferences {\n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n \t\tList<String> oldAllowed = this.sha256Allowed;\n \t\tList<String> oldDisallowed = this.sha256Disallowed;\n-\t\tWrapperValidator.getAllowed().clear();\n+\t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n-\t\tWrapperValidator.getDisallowed().clear();\n \t\tif (sha256Disallowed != null) {\n-\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);\n+\t\t\tWrapperValidator.disallow(sha256Disallowed);\n \t\t}\n \t\tthis.sha256Disallowed = sha256Disallowed;\n \t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MDEyMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426590123", "bodyText": "No, expose/use a static  WrapperValidator.disallow(sha256Disallowed) instead", "author": "fbricon", "createdAt": "2020-05-18T12:31:47Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java", "diffHunk": "@@ -888,6 +941,25 @@ public Preferences setJavaCompletionFavoriteMembers(List<String> javaCompletionF\n \t\treturn this;\n \t}\n \n+\tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n+\t\tList<String> oldAllowed = this.sha256Allowed;\n+\t\tList<String> oldDisallowed = this.sha256Disallowed;\n+\t\tWrapperValidator.getAllowed().clear();\n+\t\tthis.sha256Allowed = sha256Allowed;\n+\t\tWrapperValidator.getDisallowed().clear();\n+\t\tif (sha256Disallowed != null) {\n+\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODI2Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408263", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\nindex 07628744..0b437f24 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/preferences/Preferences.java\n\n@@ -944,11 +944,10 @@ public class Preferences {\n \tpublic Preferences putSha256(List<String> sha256Allowed, List<String> sha256Disallowed) {\n \t\tList<String> oldAllowed = this.sha256Allowed;\n \t\tList<String> oldDisallowed = this.sha256Disallowed;\n-\t\tWrapperValidator.getAllowed().clear();\n+\t\tWrapperValidator.clear();\n \t\tthis.sha256Allowed = sha256Allowed;\n-\t\tWrapperValidator.getDisallowed().clear();\n \t\tif (sha256Disallowed != null) {\n-\t\t\tWrapperValidator.getDisallowed().addAll(sha256Disallowed);\n+\t\t\tWrapperValidator.disallow(sha256Disallowed);\n \t\t}\n \t\tthis.sha256Disallowed = sha256Disallowed;\n \t\tProjectsManager projectsManager = JavaLanguageServerPlugin.getProjectsManager();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NDYzMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426594631", "bodyText": "it should be possible to override that value, for testing purposes, like\nString checksumCache = System.getProperty(\"gradle.checksum.cacheDir\");\nif (checksumCache == null){\n  checksumCache = System.getProperty(\"user.home\"), \".tooling/gradle/checksums\");\n}\nFile checksumCacheDir =  new File(checksumCache);\nchecksumCacheDir.mkdirs();\nreturn checksumCacheDir;", "author": "fbricon", "createdAt": "2020-05-18T12:39:43Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.internal.gradle.checksums;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.OperationCanceledException;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jdt.ls.core.internal.IConstants;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.JobHelpers;\n+import org.eclipse.jdt.ls.core.internal.preferences.PreferenceManager;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.io.CharStreams;\n+import com.google.common.io.Closeables;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ *\n+ * @author snjeza\n+ *\n+ */\n+public class WrapperValidator {\n+\n+\tprivate static final String WRAPPER_CHECKSUM_URL = \"wrapperChecksumUrl\";\n+\tprivate static final String GRADLE_WRAPPER_JAR = \"gradle/wrapper/gradle-wrapper.jar\";\n+\tprivate static final String SHA256 = \"SHA-256\";\n+\n+\tprivate static Set<String> allowed = new HashSet<>();\n+\tprivate static Set<String> disallowed = new HashSet<>();\n+\tprivate static AtomicBoolean downloaded = new AtomicBoolean(false);\n+\n+\tpublic WrapperValidator() {\n+\t}\n+\n+\tpublic ValidationResult checkWrapper(String baseDir) throws CoreException {\n+\t\tPath wrapperJar = Paths.get(baseDir, GRADLE_WRAPPER_JAR);\n+\t\tif (!wrapperJar.toFile().exists()) {\n+\t\t\tthrow getException(wrapperJar.toString() + \" doesn't exist.\");\n+\t\t}\n+\t\tif (!downloaded.get() || allowed.isEmpty()) {\n+\t\t\tPreferenceManager preferenceManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\t\tif (preferenceManager != null && preferenceManager.getPreferences().getSha256Allowed() != null) {\n+\t\t\t\tgetAllowed().addAll(preferenceManager.getPreferences().getSha256Allowed());\n+\t\t\t}\n+\t\t\tFile versionFile = getVersionCacheFile();\n+\t\t\tif (!versionFile.exists()) {\n+\t\t\t\tJobHelpers.waitForLoadingGradleVersionJob();\n+\t\t\t}\n+\t\t\tif (versionFile.exists()) {\n+\t\t\t\tInputStreamReader reader = null;\n+\t\t\t\ttry {\n+\t\t\t\t\treader = new InputStreamReader(new FileInputStream(versionFile), Charsets.UTF_8);\n+\t\t\t\t\tString json = CharStreams.toString(reader);\n+\t\t\t\t\tGson gson = new GsonBuilder().create();\n+\t\t\t\t\tTypeToken<List<Map<String, String>>> typeToken = new TypeToken<List<Map<String, String>>>() {\n+\t\t\t\t\t};\n+\t\t\t\t\tList<Map<String, String>> versions = gson.fromJson(json, typeToken.getType());\n+\t\t\t\t\t//@formatter:off\n+\t\t\t\t\tImmutableList<String> wrapperChecksumUrls = FluentIterable\n+\t\t\t\t\t\t.from(versions)\n+\t\t\t\t\t\t.filter(new Predicate<Map<String, String>>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic boolean apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL) != null;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t\t.transform(new Function<Map<String, String>, String>() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic String apply(Map<String, String> input) {\n+\t\t\t\t\t\t\t\treturn input.get(WRAPPER_CHECKSUM_URL);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t})\n+\t\t\t\t\t.toList();\n+\t\t\t\t\t// @formatter:on\n+\t\t\t\t\tDownloadChecksumJob downloadJob = new DownloadChecksumJob();\n+\t\t\t\t\tint count = 0;\n+\t\t\t\t\tfor (String wrapperChecksumUrl : wrapperChecksumUrls) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tString fileName = getFileName(wrapperChecksumUrl);\n+\t\t\t\t\t\t\tif (fileName == null) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tFile sha256File = new File(getSha256CacheFile(), fileName);\n+\t\t\t\t\t\t\tif (!sha256File.exists() || sha256File.lastModified() < versionFile.lastModified()) {\n+\t\t\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\t\t\tif (count > 20) {\n+\t\t\t\t\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\t\t\t\t\tdownloadJob = new DownloadChecksumJob();\n+\t\t\t\t\t\t\t\t\tcount = 0;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdownloadJob.add(wrapperChecksumUrl);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString sha256 = read(sha256File);\n+\t\t\t\t\t\t\t\tallowed.add(sha256);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t\tJavaLanguageServerPlugin.logException(e.getMessage(), e);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tdownloadJob.schedule();\n+\t\t\t\t\tJobHelpers.waitForJobs(DownloadChecksumJob.WRAPPER_VALIDATOR_JOBS, new NullProgressMonitor());\n+\t\t\t\t\tdownloaded.set(true);\n+\t\t\t\t} catch (IOException | OperationCanceledException e) {\n+\t\t\t\t\tthrow getException(e);\n+\t\t\t\t} finally {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tCloseables.close(reader, false);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t// ignore\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\ttry {\n+\t\t\tString sha256 = getChecksum(wrapperJar.toFile());\n+\t\t\treturn new ValidationResult(wrapperJar.toString(), sha256, allowed.contains(sha256));\n+\t\t} catch (NoSuchAlgorithmException | IOException e) {\n+\t\t\tthrow getException(e);\n+\t\t}\n+\t}\n+\n+\tpublic static String getFileName(String url) {\n+\t\tint index = url.lastIndexOf(\"/\");\n+\t\tif (index < 0 || url.length() < index + 1) {\n+\t\t\tJavaLanguageServerPlugin.logInfo(\"Invalid wrapper URL \" + url);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn url.substring(index + 1);\n+\t}\n+\n+\tprivate static String read(File file) {\n+\t\tOptional<String> firstLine;\n+\t\ttry {\n+\t\t\tfirstLine = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst();\n+\t\t} catch (IOException e) {\n+\t\t\tJavaLanguageServerPlugin.logException(e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (firstLine.isPresent()) {\n+\t\t\treturn firstLine.get();\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CoreException getException(String message) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, message);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate CoreException getException(Exception e) throws CoreException {\n+\t\tIStatus status = new Status(IStatus.ERROR, IConstants.PLUGIN_ID, e.getMessage(), e);\n+\t\treturn new CoreException(status);\n+\t}\n+\n+\tprivate static File getVersionCacheFile() {\n+\t\treturn new File(System.getProperty(\"user.home\"), \".tooling/gradle/versions.json\");\n+\t}\n+\n+\tpublic static File getSha256CacheFile() {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODQ0Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408443", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NDYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\nindex 0c042019..4bef90b0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/internal/gradle/checksums/WrapperValidator.java\n\n@@ -20,9 +20,7 @@ import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.security.DigestInputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NTcyMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426595723", "bodyText": "all tests should set System.setProperty(\"gradle.checksum.cacheDir\", \"target/gradle/checksums\")", "author": "fbricon", "createdAt": "2020-05-18T12:41:32Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class WrapperValidatorTest extends AbstractGradleBasedTest{", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODU5OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408599", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NTcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\nindex f1694d1e..e40fcb4e 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\n\n@@ -28,6 +28,8 @@ import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.runners.MockitoJUnitRunner;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczNzM0Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426737342", "bodyText": "gradle/checksum/prompt", "author": "fbricon", "createdAt": "2020-05-18T16:06:38Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java", "diffHunk": "@@ -107,13 +114,44 @@ private void importDir(Path rootFolder, IProgressMonitor monitor) {\n \t}\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n-\t\t\treturn GradleDistribution.fromBuild();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n+\t\t\tWrapperValidator validator = new WrapperValidator();\n+\t\t\ttry {\n+\t\t\t\tValidationResult result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result.isValid()) {\n+\t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n+\t\t\t\t\treturn gradleDistribution;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getChecksum())) {\n+\t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n+\t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n+\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n+\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t\t//@formatter:on\n+\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tString id = \"gradle/checksum\";", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODc2Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408762", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczNzM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\nindex e08f8026..b487b034 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n\n@@ -123,23 +135,30 @@ public class GradleProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n \t\t\t\t\treturn gradleDistribution;\n \t\t\t\t} else {\n-\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getChecksum())) {\n+\t\t\t\t\tif (!WrapperValidator.contains(result.getChecksum())) {\n \t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n \t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n-\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n-\t\t\t\t\t\t\t\t//@formatter:off\n-\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n-\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n-\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n-\t\t\t\t\t\t\t\t\t.withMessage(message)\n-\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n-\t\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isGradleChecksumWrapperPromptSupport()) {\n+\t\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n+\t\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n+\t\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t\t\t//@formatter:on\n \n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tString id = \"gradle/checksum/prompt\";\n+\t\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tString id = \"gradle/checksum\";\n-\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n+\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\tString message = GRADLE_WRAPPER_CHEKSUM_WARNING_TEMPLATE.replaceAll(\"@wrapper@\", result.getWrapperJar()).replaceAll(\"@checksum@\", result.getChecksum());\n+\t\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t\t\tpm.getConnection().showMessage(new MessageParams(MessageType.Error, message));\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczODY5Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r426738693", "bodyText": "this is not sufficient. Some clients may support actionable notifications, but we don't know if they support gradle wrapper checksum management too.\nI'd suggest to test for \"gradleChecksumWrapperPromptSupport\":\"true\" instead. If it's not supported, then do something like:\n//@formatter:off\nString message = GRADLE_WRAPPER_CHEKSUM_WARNING_TEMPLATE.replaceAll(\"@wrapper@\", result.getWrapperJar()).replaceAll(\"@checksum@\", result.getChecksum());\n//@formatter:on\npm.getConnection().showMessage(new MessageParams(MessageType.Error, message));\nWith\n\t//@formatter:off\n\tpublic static final String GRADLE_WRAPPER_CHEKSUM_WARNING_TEMPLATE =\n\t\t\t\"Security Warning! The gradle wrapper '@wrapper@' could be malicious. \"\n\t\t\t+ \"If you trust it, please add \\n\"\n\t\t\t+ \"`{\\\"sha256\\\": \\\"@checksum@\\\",\"\n\t\t\t+ \"\\n\\\"allowed\\\": true}`\"\n\t\t\t+ \"\\n to the `java.import.gradle.wrapper.checksums` preference.\"\n\t\t\t+ \"\"\n\t\t\t.replaceAll(\"\\n\", System.lineSeparator());\n\t//@formatter:on", "author": "fbricon", "createdAt": "2020-05-18T16:08:40Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java", "diffHunk": "@@ -107,13 +114,44 @@ private void importDir(Path rootFolder, IProgressMonitor monitor) {\n \t}\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n-\t\t\treturn GradleDistribution.fromBuild();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n+\t\t\tWrapperValidator validator = new WrapperValidator();\n+\t\t\ttry {\n+\t\t\t\tValidationResult result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result.isValid()) {\n+\t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n+\t\t\t\t\treturn gradleDistribution;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getChecksum())) {\n+\t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n+\t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {", "originalCommit": "71622b72f686a484942499b2922add895a8c0ee2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwODk3OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427408979", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-05-19T15:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczODY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c12552fc7302b8ffebebed2dba9038dca453400a", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\nindex e08f8026..b487b034 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n\n@@ -123,23 +135,30 @@ public class GradleProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n \t\t\t\t\treturn gradleDistribution;\n \t\t\t\t} else {\n-\t\t\t\t\tif (!WrapperValidator.getDisallowed().contains(result.getChecksum())) {\n+\t\t\t\t\tif (!WrapperValidator.contains(result.getChecksum())) {\n \t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n \t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n-\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n-\t\t\t\t\t\t\t\t//@formatter:off\n-\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n-\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n-\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n-\t\t\t\t\t\t\t\t\t.withMessage(message)\n-\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n-\t\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isGradleChecksumWrapperPromptSupport()) {\n+\t\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n+\t\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n+\t\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t\t\t//@formatter:on\n \n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tString id = \"gradle/checksum/prompt\";\n+\t\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n+\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tString id = \"gradle/checksum\";\n-\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n+\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\tString message = GRADLE_WRAPPER_CHEKSUM_WARNING_TEMPLATE.replaceAll(\"@wrapper@\", result.getWrapperJar()).replaceAll(\"@checksum@\", result.getChecksum());\n+\t\t\t\t\t\t\t\t//@formatter:on\n+\t\t\t\t\t\t\t\tpm.getConnection().showMessage(new MessageParams(MessageType.Error, message));\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n"}}, {"oid": "c12552fc7302b8ffebebed2dba9038dca453400a", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/c12552fc7302b8ffebebed2dba9038dca453400a", "message": "Check gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-19T15:40:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNDUzMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427414533", "bodyText": "please delete", "author": "fbricon", "createdAt": "2020-05-19T15:57:00Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java", "diffHunk": "@@ -107,13 +126,51 @@ private void importDir(Path rootFolder, IProgressMonitor monitor) {\n \t}\n \n \tpublic static GradleDistribution getGradleDistribution(Path rootFolder) {\n-\t\tif (JavaLanguageServerPlugin.getPreferencesManager() != null && JavaLanguageServerPlugin.getPreferencesManager().getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n-\t\t\treturn GradleDistribution.fromBuild();\n+\t\tPreferenceManager preferencesManager = JavaLanguageServerPlugin.getPreferencesManager();\n+\t\tif (preferencesManager != null && preferencesManager.getPreferences().isGradleWrapperEnabled() && Files.exists(rootFolder.resolve(\"gradlew\"))) {\n+\t\t\tWrapperValidator validator = new WrapperValidator();\n+\t\t\ttry {\n+\t\t\t\tValidationResult result = validator.checkWrapper(rootFolder.toFile().getAbsolutePath());\n+\t\t\t\tif (result.isValid()) {\n+\t\t\t\t\tWrapperGradleDistribution gradleDistribution = GradleDistribution.fromBuild();\n+\t\t\t\t\treturn gradleDistribution;\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!WrapperValidator.contains(result.getChecksum())) {\n+\t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n+\t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n+\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isGradleChecksumWrapperPromptSupport()) {\n+\t\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n+\t\t\t\t\t\t\t\t\t//@formatter:off\n+\t\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n+\t\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n+\t\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n+\t\t\t\t\t\t\t\t\t\t.withMessage(message)\n+\t\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n+\t\t\t\t\t\t\t\t\t//@formatter:on\n+\n+\t\t\t\t\t\t\t\t} else {", "originalCommit": "c12552fc7302b8ffebebed2dba9038dca453400a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNjkzNQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427436935", "bodyText": "What to delete? Fixed.", "author": "snjeza", "createdAt": "2020-05-19T16:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNDUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "3d89de8c6afdb17ccc671030bdb31c84dced2336", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\nindex b487b034..2909c4bf 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/GradleProjectImporter.java\n\n@@ -139,21 +138,9 @@ public class GradleProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\t\tProjectsManager pm = JavaLanguageServerPlugin.getProjectsManager();\n \t\t\t\t\t\tif (pm != null && pm.getConnection() != null) {\n \t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isGradleChecksumWrapperPromptSupport()) {\n-\t\t\t\t\t\t\t\tif (preferencesManager.getClientPreferences().isActionableNotificationSupported()) {\n-\t\t\t\t\t\t\t\t\t//@formatter:off\n-\t\t\t\t\t\t\t\t\tString message = \"__GRADLE_WRAPPER_CHECKSUM__\";\n-\t\t\t\t\t\t\t\t\tActionableNotification notification = new ActionableNotification()\n-\t\t\t\t\t\t\t\t\t\t.withSeverity(MessageType.Warning)\n-\t\t\t\t\t\t\t\t\t\t.withMessage(message)\n-\t\t\t\t\t\t\t\t\t\t.withData(asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\t\tpm.getConnection().sendActionableNotification(notification);\n-\t\t\t\t\t\t\t\t\t//@formatter:on\n-\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tString id = \"gradle/checksum/prompt\";\n-\t\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n-\t\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tString id = \"gradle/checksum/prompt\";\n+\t\t\t\t\t\t\t\tExecuteCommandParams params = new ExecuteCommandParams(id, asList(result.getWrapperJar(), result.getChecksum()));\n+\t\t\t\t\t\t\t\tpm.getConnection().sendNotification(params);\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t//@formatter:off\n \t\t\t\t\t\t\t\tString message = GRADLE_WRAPPER_CHEKSUM_WARNING_TEMPLATE.replaceAll(\"@wrapper@\", result.getWrapperJar()).replaceAll(\"@checksum@\", result.getChecksum());\n"}}, {"oid": "3d89de8c6afdb17ccc671030bdb31c84dced2336", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/3d89de8c6afdb17ccc671030bdb31c84dced2336", "message": "Check gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-19T16:52:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTQ4OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427545488", "bodyText": "java.nio.file.NoSuchFileException: /Users/fbricon/Dev/projects/eclipse.jdt.ls/org.eclipse.jdt.ls.tests/target/gradle/checksums/gradle-6.4-wrapper.jar.sha256\nat org.eclipse.jdt.ls.core.internal.managers.WrapperValidatorTest.testGradleWrapper(WrapperValidatorTest.java:63)", "author": "fbricon", "createdAt": "2020-05-19T19:24:59Z", "path": "org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Red Hat Inc. and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Red Hat Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.jdt.ls.core.internal.managers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.ValidationResult;\n+import org.eclipse.jdt.ls.internal.gradle.checksums.WrapperValidator;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+/**\n+ * @author snjeza\n+ *\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class WrapperValidatorTest extends AbstractGradleBasedTest{\n+\n+\t@Before\n+\tpublic void setProperty() throws Exception {\n+\t\tSystem.setProperty(\"gradle.checksum.cacheDir\", \"target/gradle/checksums\");\n+\t}\n+\n+\t@After\n+\tpublic void clearProperty() {\n+\t\tSystem.clearProperty(\"gradle.checksum.cacheDir\");\n+\t}\n+\n+\t@Test\n+\tpublic void testGradleWrapper() throws Exception {\n+\t\tFile file = new File(getSourceProjectDirectory(), \"gradle/simple-gradle\");\n+\t\tassertTrue(file.isDirectory());\n+\t\tValidationResult result = new WrapperValidator().checkWrapper(file.getAbsolutePath());\n+\t\tassertTrue(result.isValid());\n+\t\tFile sha256Directory = WrapperValidator.getSha256CacheFile();\n+\t\t// test cache\n+\t\tfile = new File(sha256Directory, \"gradle-6.4-wrapper.jar.sha256\");\n+\t\tString sha256 = Files.lines(Paths.get(file.getAbsolutePath()), StandardCharsets.UTF_8).findFirst().get();", "originalCommit": "3d89de8c6afdb17ccc671030bdb31c84dced2336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2Mjg2Ng==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1434#discussion_r427562866", "bodyText": "See #1450", "author": "snjeza", "createdAt": "2020-05-19T19:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "31c55fb5cb5f29f534f09180fbd93315ec4642a3", "chunk": "diff --git a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\nindex e40fcb4e..ea85e40b 100644\n--- a/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\n+++ b/org.eclipse.jdt.ls.tests/src/org/eclipse/jdt/ls/core/internal/managers/WrapperValidatorTest.java\n\n@@ -18,11 +18,13 @@ import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n import org.eclipse.jdt.ls.core.internal.preferences.Preferences;\n"}}, {"oid": "9d8498d19e30ca9f7a8023280e0adfc9f04499f7", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/9d8498d19e30ca9f7a8023280e0adfc9f04499f7", "message": "Check for suspicious gradle-wrapper.jar\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-20T18:25:16Z", "type": "commit"}, {"oid": "31c55fb5cb5f29f534f09180fbd93315ec4642a3", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/31c55fb5cb5f29f534f09180fbd93315ec4642a3", "message": "Fix WrapperValidatorTest.testGradleWrapper\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-20T18:25:16Z", "type": "commit"}, {"oid": "31c55fb5cb5f29f534f09180fbd93315ec4642a3", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/31c55fb5cb5f29f534f09180fbd93315ec4642a3", "message": "Fix WrapperValidatorTest.testGradleWrapper\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-05-20T18:25:16Z", "type": "forcePushed"}]}