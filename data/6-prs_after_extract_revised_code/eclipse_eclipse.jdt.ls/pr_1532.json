{"pr_number": 1532, "pr_title": "Importing mixed (maven,gradle,eclipse) projects", "pr_createdAt": "2020-08-24T18:45:58Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTU1NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476565554", "bodyText": "break;", "author": "fbricon", "createdAt": "2020-08-25T16:07:06Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,18 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif (ProjectUtils.isMavenProject(project)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tString pattern = project.getLocation().toOSString();\n+\t\t\t\tPathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\n+\t\t\t\tif (matcher.matches(path)) {\n+\t\t\t\t\texcluded = true;", "originalCommit": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjY4MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732681", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-25T20:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java\nindex 94117474..cc6569f3 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java\n\n@@ -122,6 +122,7 @@ public class MavenProjectImporter extends AbstractProjectImporter {\n \t\t\t\tPathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\n \t\t\t\tif (matcher.matches(path)) {\n \t\t\t\t\texcluded = true;\n+\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MTE5Mw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476571193", "bodyText": "mmm might be an issue with 3rd party importers (eg. Salesforce's Bazel). Ideally we'd need a generic way to tell if a project is something other than an Eclipse project", "author": "fbricon", "createdAt": "2020-08-25T16:15:47Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n+\t\t\t\tif ((preferences.isImportGradleEnabled() && ProjectUtils.isGradleProject(project)) || (preferences.isImportMavenEnabled() && ProjectUtils.isMavenProject(project))) {", "originalCommit": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjc5MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732790", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-25T20:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex cf389986..ca318eaf 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -45,11 +48,19 @@ public class EclipseProjectImporter extends AbstractProjectImporter {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n-\t\t\tPreferences preferences = getPreferences();\n-\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n-\t\t\t\tif ((preferences.isImportGradleEnabled() && ProjectUtils.isGradleProject(project)) || (preferences.isImportMavenEnabled() && ProjectUtils.isMavenProject(project))) {\n-\t\t\t\t\tString path = project.getLocation().toOSString();\n-\t\t\t\t\teclipseDetector.addExclusions(path);\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {\n+\t\t\t\t\t\t\teclipseDetector.addExclusions(projectFile.getAbsolutePath());\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tdirectories = eclipseDetector.scan(monitor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MjM4NA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476572384", "bodyText": "we might need a getAllProjects(boolean includeInvisibleProjects) method", "author": "fbricon", "createdAt": "2020-08-25T16:17:31Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +45,13 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tPreferences preferences = getPreferences();\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {", "originalCommit": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjk0Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476732942", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-25T20:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MjM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex cf389986..ca318eaf 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -45,11 +48,19 @@ public class EclipseProjectImporter extends AbstractProjectImporter {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n-\t\t\tPreferences preferences = getPreferences();\n-\t\t\tfor (IProject project : ProjectUtils.getAllProjects()) {\n-\t\t\t\tif ((preferences.isImportGradleEnabled() && ProjectUtils.isGradleProject(project)) || (preferences.isImportMavenEnabled() && ProjectUtils.isMavenProject(project))) {\n-\t\t\t\t\tString path = project.getLocation().toOSString();\n-\t\t\t\t\teclipseDetector.addExclusions(path);\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {\n+\t\t\t\t\t\t\teclipseDetector.addExclusions(projectFile.getAbsolutePath());\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tdirectories = eclipseDetector.scan(monitor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NDA1OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476574059", "bodyText": "please delete", "author": "fbricon", "createdAt": "2020-08-25T16:20:11Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +269,8 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n+\t\t// Collection<IProjectImporter> importers = importers();", "originalCommit": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzA3Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476733077", "bodyText": "deleted.", "author": "snjeza", "createdAt": "2020-08-25T20:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NDA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\nindex 656d5804..1aa3d89a 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n\n@@ -270,7 +274,6 @@ public abstract class ProjectsManager implements ISaveParticipant, IProjectsMana\n \t}\n \n \tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\t// Collection<IProjectImporter> importers = importers();\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, importers.size());\n \t\tfor (IProjectImporter importer : importers) {\n \t\t\timporter.initialize(rootFolder);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzEyNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476577126", "bodyText": "We actually should remove all importers before and including the current importer.\nSay you have a Maven and Eclipse project in your directory:\n1st pass:\n\ngradle, doesn't apply\nMaven, applies, is removed\nEclipse, not checked\n\n2nd pass:\n\nGradle, retested, still doesn't apply\nEclipse applies, is removed\n\n3rd pass:\n\nGradle retested, still doesn't apply", "author": "fbricon", "createdAt": "2020-08-25T16:24:51Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +109,12 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIProjectImporter importer = getImporter(rootFolder, importers, subMonitor.split(30));\n+\t\t\twhile (importer != null) {\n \t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\timporters.remove(importer);", "originalCommit": "53fa0638f1c6dabc5f800d5b1c2aa598467db5d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMzE5Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r476733192", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-25T20:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\nindex 656d5804..1aa3d89a 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n\n@@ -110,11 +111,14 @@ public abstract class ProjectsManager implements ISaveParticipant, IProjectsMana\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n \t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, importers, subMonitor.split(30));\n-\t\t\twhile (importer != null) {\n-\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n-\t\t\t\timporters.remove(importer);\n-\t\t\t\timporter = getImporter(rootFolder, importers, subMonitor.split(30));\n+\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\timporter.initialize(rootFolder);\n+\t\t\t\tif (importer.applies(subMonitor.split(1))) {\n+\t\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\t}\n+\t\t\t\titer.remove();\n \t\t\t}\n \t\t}\n \t}\n"}}, {"oid": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-25T20:56:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1Mzk1MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477253950", "bodyText": "unused method", "author": "fbricon", "createdAt": "2020-08-26T12:16:03Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -266,8 +273,7 @@ public boolean isBuildLikeFileName(String fileName) {\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tCollection<IProjectImporter> importers = importers();\n+\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {", "originalCommit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNjcyMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477316722", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-26T13:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1Mzk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\nindex 1aa3d89a..3c582b6d 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n\n@@ -273,17 +268,6 @@ public abstract class ProjectsManager implements ISaveParticipant, IProjectsMana\n \t\treturn buildSupports().filter(bs -> bs.isBuildLikeFileName(fileName)).findAny().isPresent();\n \t}\n \n-\tprivate IProjectImporter getImporter(File rootFolder, List<IProjectImporter> importers, IProgressMonitor monitor) throws OperationCanceledException, CoreException {\n-\t\tSubMonitor subMonitor = SubMonitor.convert(monitor, importers.size());\n-\t\tfor (IProjectImporter importer : importers) {\n-\t\t\timporter.initialize(rootFolder);\n-\t\t\tif (importer.applies(subMonitor.split(1))) {\n-\t\t\t\treturn importer;\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n \tpublic static IProject getDefaultProject() {\n \t\treturn getWorkspaceRoot().getProject(DEFAULT_PROJECT_NAME);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1NTAxNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477255016", "bodyText": "there's no point in removing the importer anymore. can even use a regular foreach loop from importers()", "author": "fbricon", "createdAt": "2020-08-26T12:18:01Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java", "diffHunk": "@@ -109,9 +110,15 @@ protected void importProjects(Collection<IPath> rootPaths, IProgressMonitor moni\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tIProjectImporter importer = getImporter(rootFolder, subMonitor.split(30));\n-\t\t\tif (importer != null) {\n-\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n+\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\timporter.initialize(rootFolder);\n+\t\t\t\tif (importer.applies(subMonitor.split(1))) {\n+\t\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n+\t\t\t\t}\n+\t\t\t\titer.remove();", "originalCommit": "4dfa0ef5d90fbefa3b4bc3973556bf26face57e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNjg5MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r477316890", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-26T13:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI1NTAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\nindex 1aa3d89a..3c582b6d 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/ProjectsManager.java\n\n@@ -110,15 +109,11 @@ public abstract class ProjectsManager implements ISaveParticipant, IProjectsMana\n \t\tSubMonitor subMonitor = SubMonitor.convert(monitor, rootPaths.size() * 100);\n \t\tfor (IPath rootPath : rootPaths) {\n \t\t\tFile rootFolder = rootPath.toFile();\n-\t\t\tList<IProjectImporter> importers = new ArrayList<>(importers());\n-\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n-\t\t\twhile (iter.hasNext()) {\n-\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\tfor (IProjectImporter importer : importers()) {\n \t\t\t\timporter.initialize(rootFolder);\n \t\t\t\tif (importer.applies(subMonitor.split(1))) {\n \t\t\t\t\timporter.importToWorkspace(subMonitor.split(70));\n \t\t\t\t}\n-\t\t\t\titer.remove();\n \t\t\t}\n \t\t}\n \t}\n"}}, {"oid": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-26T13:50:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAzMzcwMw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478033703", "bodyText": "I'm cautious about using importer.applies here. The applies is a heavy operation, and usually it will scan the root folder recursively. When iterating the importers list, it means each importer will scan the root again.", "author": "testforstephen", "createdAt": "2020-08-27T03:26:45Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -43,6 +48,21 @@ public boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "originalCommit": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NTI5Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478565297", "bodyText": "I have updated the PR. Please review.", "author": "snjeza", "createdAt": "2020-08-27T17:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODAzMzcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex ca318eaf..fe15e279 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -41,8 +41,6 @@ import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA0MzE0NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478043145", "bodyText": "Currently LocalProjectScanner used by MavenProjectImporter won't respect the java.import.exclusions but scan the whole workspace recursively, this is not efficient if the workspace is a polyglot project with node_modules.\nIs it possible to move the exclusion logic to the scanner?", "author": "testforstephen", "createdAt": "2020-08-27T03:33:41Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/MavenProjectImporter.java", "diffHunk": "@@ -113,6 +113,19 @@ private boolean exclude(java.nio.file.Path path) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\tif (!excluded) {", "originalCommit": "67a81a40573d500d59f4b0eaa4d282599ac8a1c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NTA5OA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478565098", "bodyText": "LocalProjectScanner is within m2e. Could you create a new issue at https://bugs.eclipse.org/bugs/enter_bug.cgi?product=m2e ?", "author": "snjeza", "createdAt": "2020-08-27T17:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA0MzE0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-27T16:58:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTg2MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478891861", "bodyText": "ProjectsManage.importers() will return a group of new instances of importers. The state of the importers that have been run previously won't apply to here.", "author": "testforstephen", "createdAt": "2020-08-28T07:37:54Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());", "originalCommit": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzMzNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387334", "bodyText": "It is intentional. Otherwise tests fail.", "author": "snjeza", "createdAt": "2020-08-28T15:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg5MTg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2472e556359d013eea7891f7b952f8bff53e1350", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex fe15e279..7f8defeb 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -54,7 +54,7 @@ public class EclipseProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\tIProjectImporter importer = iter.next();\n \t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n \t\t\t\t\t\timporter.initialize(projectFile);\n-\t\t\t\t\t\tif (importer.applies(monitor)) {\n+\t\t\t\t\t\tif (importer.isResolved(rootFolder) || importer.applies(monitor)) {\n \t\t\t\t\t\t\teclipseDetector.addExclusions(projectFile.getAbsolutePath());\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMDQ5NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478910495", "bodyText": "should provide a default implementation such as return false. This will avoid breaking other plugins that registered importer but not implemented the new interface.", "author": "testforstephen", "createdAt": "2020-08-28T07:59:28Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "originalCommit": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzQ3MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387471", "bodyText": "Fixed", "author": "snjeza", "createdAt": "2020-08-28T15:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMDQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2472e556359d013eea7891f7b952f8bff53e1350", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\nindex 7ab8d224..ce80cef6 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\n\n@@ -24,7 +24,9 @@ public interface IProjectImporter {\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n-\tboolean applies(File folder) throws OperationCanceledException, CoreException;\n+\tdefault boolean isResolved(File folder) throws OperationCanceledException, CoreException {\n+\t\treturn false;\n+\t};\n \n \tvoid importToWorkspace(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMTY3OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478911679", "bodyText": "Rename to isResolved(File folder)?", "author": "testforstephen", "createdAt": "2020-08-28T08:00:42Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java", "diffHunk": "@@ -24,6 +24,8 @@\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n+\tboolean applies(File folder) throws OperationCanceledException, CoreException;", "originalCommit": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzYyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387620", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-28T15:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxMTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2472e556359d013eea7891f7b952f8bff53e1350", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\nindex 7ab8d224..ce80cef6 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/IProjectImporter.java\n\n@@ -24,7 +24,9 @@ public interface IProjectImporter {\n \n \tboolean applies(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n-\tboolean applies(File folder) throws OperationCanceledException, CoreException;\n+\tdefault boolean isResolved(File folder) throws OperationCanceledException, CoreException {\n+\t\treturn false;\n+\t};\n \n \tvoid importToWorkspace(IProgressMonitor monitor) throws OperationCanceledException, CoreException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxNDgwOQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r478914809", "bodyText": "If the project is already resolved by other importer, should return early.\nif (importer.applies(folder) || importer.applies(monitor))", "author": "testforstephen", "createdAt": "2020-08-28T08:03:50Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {\n+\t\t\t\tFile projectFile = project.getLocation().toFile();\n+\t\t\t\tIterator<IProjectImporter> iter = importers.iterator();\n+\t\t\t\twhile (iter.hasNext()) {\n+\t\t\t\t\tIProjectImporter importer = iter.next();\n+\t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n+\t\t\t\t\t\timporter.initialize(projectFile);\n+\t\t\t\t\t\tif (importer.applies(monitor)) {", "originalCommit": "95a55b0c93c81e0ceaafb4325e5a9a747c39536c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NzczNw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r479387737", "bodyText": "Fixed.", "author": "snjeza", "createdAt": "2020-08-28T15:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxNDgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2472e556359d013eea7891f7b952f8bff53e1350", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex fe15e279..7f8defeb 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -54,7 +54,7 @@ public class EclipseProjectImporter extends AbstractProjectImporter {\n \t\t\t\t\tIProjectImporter importer = iter.next();\n \t\t\t\t\tif (!(importer instanceof EclipseProjectImporter)) {\n \t\t\t\t\t\timporter.initialize(projectFile);\n-\t\t\t\t\t\tif (importer.applies(monitor)) {\n+\t\t\t\t\t\tif (importer.isResolved(rootFolder) || importer.applies(monitor)) {\n \t\t\t\t\t\t\teclipseDetector.addExclusions(projectFile.getAbsolutePath());\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n"}}, {"oid": "2472e556359d013eea7891f7b952f8bff53e1350", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/2472e556359d013eea7891f7b952f8bff53e1350", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-28T15:43:52Z", "type": "forcePushed"}, {"oid": "dff0608854a57e8ea167dd6717987004160444d5", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/dff0608854a57e8ea167dd6717987004160444d5", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-28T15:59:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MTYyMA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r480051620", "bodyText": "I'm wondering whether we can exclude these projects directly. These projects are probably from the importer with higher priority, if so, then importer.applies must return true. Or come from the projects cached from the last time the workspace was opened, if the project is already on open state, looks not necessary to scan it and reopen it via EclipseProjectImporter. Is there any missing corner case?", "author": "testforstephen", "createdAt": "2020-08-31T10:59:02Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java", "diffHunk": "@@ -32,17 +35,32 @@\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n+import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n public class EclipseProjectImporter extends AbstractProjectImporter {\n \n-\tprivate Collection<java.nio.file.Path> directories;\n-\n \t@Override\n \tpublic boolean applies(IProgressMonitor monitor) throws CoreException {\n \t\tif (directories == null) {\n \t\t\tBasicFileDetector eclipseDetector = new BasicFileDetector(rootFolder.toPath(), DESCRIPTION_FILE_NAME)\n \t\t\t\t\t.addExclusions(\"**/bin\");//default Eclipse build dir\n+\t\t\tList<IProjectImporter> importers = new ArrayList<>(ProjectsManager.importers());\n+\t\t\tfor (IProject project : ProjectUtils.getAllProjects(false)) {", "originalCommit": "dff0608854a57e8ea167dd6717987004160444d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4Mjc1MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1532#discussion_r480282751", "bodyText": "You are right. Fixed.", "author": "snjeza", "createdAt": "2020-08-31T17:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MTYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "1cab079c2a6de1f6052dffba0092928ca0c5e0d0", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\nindex 7f8defeb..f2d31551 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/managers/EclipseProjectImporter.java\n\n@@ -35,7 +32,6 @@ import org.eclipse.core.runtime.SubMonitor;\n import org.eclipse.jdt.core.IJavaProject;\n import org.eclipse.jdt.core.JavaCore;\n import org.eclipse.jdt.ls.core.internal.AbstractProjectImporter;\n-import org.eclipse.jdt.ls.core.internal.IProjectImporter;\n import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n import org.eclipse.jdt.ls.core.internal.ProjectUtils;\n \n"}}, {"oid": "1cab079c2a6de1f6052dffba0092928ca0c5e0d0", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/1cab079c2a6de1f6052dffba0092928ca0c5e0d0", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-31T17:36:18Z", "type": "commit"}, {"oid": "1cab079c2a6de1f6052dffba0092928ca0c5e0d0", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/1cab079c2a6de1f6052dffba0092928ca0c5e0d0", "message": "Importing mixed (maven,gradle,eclipse) projects\n\nSigned-off-by: Snjezana Peco <snjezana.peco@redhat.com>", "committedDate": "2020-08-31T17:36:18Z", "type": "forcePushed"}]}