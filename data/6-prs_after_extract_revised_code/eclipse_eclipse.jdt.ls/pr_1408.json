{"pr_number": 1408, "pr_title": "Support semantic tokens", "pr_createdAt": "2020-04-14T18:19:54Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408", "timeline": [{"oid": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/f74bbcc613623a1ba3cc8a3401747fdb793e6d35", "message": "Support semantic tokens\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>\n\nremove unused file\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-04-14T18:02:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NjMxMg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408676312", "bodyText": "please add javadoc", "author": "fbricon", "createdAt": "2020-04-15T08:39:39Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.semantictokens;\n+\n+import org.eclipse.jdt.core.dom.IBinding;\n+", "originalCommit": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da2847f91b14ca7795f5413aafba2f002154c13c", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java\nindex 083ab14b..db9ee573 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/ITokenModifier.java\n\n@@ -16,6 +16,16 @@ package org.eclipse.jdt.ls.core.internal.semantictokens;\n import org.eclipse.jdt.core.dom.IBinding;\n \n public interface ITokenModifier {\n+    /**\n+     * Determine whether this modifier applies to a named entity.\n+     * @param binding corresponding binding of the named entity.\n+     * @return <code>true</code> if this modifier applies to the binding and\n+\t *    <code>false</code> otherwise\n+     */\n     public boolean applies(IBinding binding);\n+\n+    /**\n+     * identifier of the modifier\n+     */\n     public String toString();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3Njg1NQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408676855", "bodyText": "if document is null at this point, we should return", "author": "fbricon", "createdAt": "2020-04-15T08:40:34Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.commands;\n+\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.JavaModelException;\n+import org.eclipse.jdt.core.dom.CompilationUnit;\n+import org.eclipse.jdt.core.manipulation.CoreASTProvider;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.JavaLanguageServerPlugin;\n+import org.eclipse.jdt.ls.core.internal.handlers.JsonRpcHelpers;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokenManager;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokens;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokensLegend;\n+import org.eclipse.jdt.ls.core.internal.semantictokens.SemanticTokensVisitor;\n+import org.eclipse.jface.text.IDocument;\n+\n+public class SemanticTokensCommand {\n+\n+    public static SemanticTokens provide(String uri) {\n+\n+        IDocument document = null;\n+\n+        ICompilationUnit cu = JDTUtils.resolveCompilationUnit(uri);\n+        if (cu != null) {\n+            try {\n+                document = JsonRpcHelpers.toDocument(cu.getBuffer());\n+            } catch (JavaModelException e) {\n+                JavaLanguageServerPlugin.logException(\"Failed to provide semantic tokens for \" + uri, e);\n+            }\n+        }", "originalCommit": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da2847f91b14ca7795f5413aafba2f002154c13c", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java\nindex d7a02be0..fa6e89c0 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/commands/SemanticTokensCommand.java\n\n@@ -13,6 +13,8 @@\n \n package org.eclipse.jdt.ls.core.internal.commands;\n \n+import java.util.Collections;\n+\n import org.eclipse.core.runtime.NullProgressMonitor;\n import org.eclipse.jdt.core.ICompilationUnit;\n import org.eclipse.jdt.core.JavaModelException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3OTMzNg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1408#discussion_r408679336", "bodyText": "new ArrayList<>(manager.getTokenModifiers().values().size());", "author": "fbricon", "createdAt": "2020-04-15T08:44:34Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.semantictokens;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.ASTVisitor;\n+import org.eclipse.jdt.core.dom.IBinding;\n+import org.eclipse.jdt.core.dom.IVariableBinding;\n+import org.eclipse.jdt.core.dom.MethodInvocation;\n+import org.eclipse.jdt.core.dom.SimpleName;\n+import org.eclipse.jdt.ls.core.internal.handlers.JsonRpcHelpers;\n+import org.eclipse.jface.text.IDocument;\n+\n+public class SemanticTokensVisitor extends ASTVisitor {\n+    private IDocument document;\n+    private SemanticTokenManager manager;\n+    private List<SemanticToken> tokens;\n+\n+    public SemanticTokensVisitor(IDocument document, SemanticTokenManager manager) {\n+        this.manager = manager;\n+        this.document = document;\n+        this.tokens = new ArrayList<>();\n+    }\n+\n+    private class SemanticToken {\n+        private final TokenType tokenType;\n+        private final ITokenModifier[] tokenModifiers;\n+        private final int offset;\n+        private final int length;\n+\n+        public SemanticToken(int offset, int length, TokenType tokenType, ITokenModifier[] tokenModifiers) {\n+            this.offset = offset;\n+            this.length = length;\n+            this.tokenType = tokenType;\n+            this.tokenModifiers = tokenModifiers;\n+        }\n+\n+        public TokenType getTokenType() {\n+            return tokenType;\n+        }\n+\n+        public ITokenModifier[] getTokenModifiers() {\n+            return tokenModifiers;\n+        }\n+\n+        public int getOffset() {\n+            return offset;\n+        }\n+\n+        public int getLength() {\n+            return length;\n+        }\n+    }\n+\n+    public SemanticTokens getSemanticTokens() {\n+        List<Integer> data = encoded();\n+        return new SemanticTokens(data);\n+    }\n+\n+    private List<Integer> encoded() {\n+        List<Integer> data = new ArrayList<>();\n+        int currentLine = 0;\n+        int currentColumn = 0;\n+        for (SemanticToken token : this.tokens) {\n+            int[] lineAndColumn = JsonRpcHelpers.toLine(this.document, token.getOffset());\n+            int line = lineAndColumn[0];\n+            int column = lineAndColumn[1];\n+            int deltaLine = line - currentLine;\n+            if (deltaLine != 0) {\n+                currentLine = line;\n+                currentColumn = 0;\n+            }\n+            int deltaColumn = column - currentColumn;\n+            int tokenTypeIndex = manager.getTokenTypes().indexOf(token.getTokenType());\n+            ITokenModifier[] modifiers = token.getTokenModifiers();\n+            int encodedModifiers = 0;\n+            for (ITokenModifier modifier : modifiers) {\n+                int bit = manager.getTokenModifiers().indexOf(modifier);\n+                if (bit >= 0) {\n+                    encodedModifiers = encodedModifiers | (0b00000001 << bit);\n+                }\n+            }\n+            data.add(deltaLine);\n+            data.add(deltaColumn);\n+            data.add(token.getLength());\n+            data.add(tokenTypeIndex);\n+            data.add(encodedModifiers);\n+        }\n+        return data;\n+    }\n+\n+    private void addToken(ASTNode node, TokenType tokenType, ITokenModifier[] modifiers) {\n+        int offset = node.getStartPosition();\n+        int length = node.getLength();\n+        SemanticToken token = new SemanticToken(offset, length, tokenType, modifiers);\n+        tokens.add(token);\n+    }\n+\n+    @Override\n+    public boolean visit(SimpleName node) {\n+        IBinding binding = node.resolveBinding();\n+        if (binding == null) {\n+            return super.visit(node);\n+        }\n+\n+        TokenType tokenType = null;\n+        switch (binding.getKind()) {\n+            case IBinding.VARIABLE: {\n+                if (((IVariableBinding) binding).isField()) {\n+                    tokenType = TokenType.VARIABLE;\n+                }\n+                break;\n+            }\n+            case IBinding.METHOD: {\n+                tokenType = TokenType.METHOD;\n+                break;\n+            }\n+            default:\n+                break;\n+        }\n+\n+        if (tokenType != null) {\n+            List<ITokenModifier> modifierList = new ArrayList<>();", "originalCommit": "f74bbcc613623a1ba3cc8a3401747fdb793e6d35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da2847f91b14ca7795f5413aafba2f002154c13c", "chunk": "diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java\nindex b16a272d..de91e61c 100644\n--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java\n+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/semantictokens/SemanticTokensVisitor.java\n\n@@ -134,7 +134,7 @@ public class SemanticTokensVisitor extends ASTVisitor {\n         }\n \n         if (tokenType != null) {\n-            List<ITokenModifier> modifierList = new ArrayList<>();\n+            List<ITokenModifier> modifierList = new ArrayList<>(manager.getTokenModifiers().values().size());\n             for (ITokenModifier tokenModifier : manager.getTokenModifiers().values()) {\n                 if (tokenModifier.applies(binding)) {\n                     modifierList.add(tokenModifier);\n"}}, {"oid": "da2847f91b14ca7795f5413aafba2f002154c13c", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/da2847f91b14ca7795f5413aafba2f002154c13c", "message": "address comments\n\nSigned-off-by: Yan Zhang <yanzh@microsoft.com>", "committedDate": "2020-04-15T12:47:32Z", "type": "commit"}]}