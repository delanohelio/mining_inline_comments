{"pr_number": 506, "pr_title": "Add jsonschema and protobuf support for ccompat api", "pr_createdAt": "2020-05-20T14:02:05Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/506", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDk1MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428190951", "bodyText": "Are Confluent's schema type constants the same as ours??", "author": "EricWittmann", "createdAt": "2020-05-20T17:37:53Z", "path": "app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java", "diffHunk": "@@ -68,9 +68,8 @@ public CompatibilityCheckResponse testCompatibilityBySubjectName(\n             SchemaContent request) throws Exception {\r\n \r\n         CompatibilityCheckResponse result = facade.parseVersionString(subject, versionString, version -> {\r\n-            // TODO are we safe to assume AVRO?\r\n             try {\r\n-                rules.applyRule(subject, version, ArtifactType.AVRO, ContentHandle.create(request.getSchema()));\r\n+                rules.applyRule(subject, version, ArtifactType.fromValue(request.getSchemaType()), ContentHandle.create(request.getSchema()));\r", "originalCommit": "87fafda4565ccaab077cedc13bef08b771b1e4fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwMDI4NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428200284", "bodyText": "Yep, same constant values.", "author": "carlesarnal", "createdAt": "2020-05-20T17:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDk1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MjU3OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428192579", "bodyText": "I would prefer to not sure wildcards for imports.", "author": "EricWittmann", "createdAt": "2020-05-20T17:40:37Z", "path": "app/src/test/java/io/apicurio/registry/ConfluentClientTest.java", "diffHunk": "@@ -16,38 +16,43 @@\n \n package io.apicurio.registry;\n \n+import io.apicurio.registry.ccompat.dto.SchemaContent;\n import io.apicurio.registry.support.HealthUtils;\n-import io.confluent.connect.avro.AvroConverter;\n+import io.apicurio.registry.support.TestCmmn;\n+import io.confluent.kafka.schemaregistry.SchemaProvider;\n+import io.confluent.kafka.schemaregistry.avro.AvroSchemaProvider;\n import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.RestService;\n import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n-import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;\n+import io.confluent.kafka.schemaregistry.json.JsonSchemaProvider;\n+import io.confluent.kafka.schemaregistry.protobuf.ProtobufSchemaProvider;\n import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializerConfig;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializerConfig;\n import io.quarkus.test.junit.QuarkusTest;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericData;\n-import org.apache.kafka.connect.data.SchemaAndValue;\n-import org.apache.kafka.connect.data.Struct;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import static io.apicurio.registry.utils.tests.TestUtils.retry;\n \n-import java.nio.ByteBuffer;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n+import java.util.*;", "originalCommit": "87fafda4565ccaab077cedc13bef08b771b1e4fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5ODUxOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428198518", "bodyText": "Automatically changed by the IDE, I'll change that.", "author": "carlesarnal", "createdAt": "2020-05-20T17:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MjU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "afb53fec216a10403fdbf67730833a981c7855ad", "chunk": "diff --git a/app/src/test/java/io/apicurio/registry/ConfluentClientTest.java b/app/src/test/java/io/apicurio/registry/ConfluentClientTest.java\nindex c48801ae..f61c10c5 100644\n--- a/app/src/test/java/io/apicurio/registry/ConfluentClientTest.java\n+++ b/app/src/test/java/io/apicurio/registry/ConfluentClientTest.java\n\n@@ -41,16 +41,22 @@ import org.apache.avro.generic.GenericData;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.HashMap;\n+\n import static io.apicurio.registry.utils.tests.TestUtils.retry;\n \n-import java.util.*;\n \n @QuarkusTest\n public class ConfluentClientTest extends AbstractResourceTestBase {\n \n     private SchemaRegistryClient buildClient() {\n \n-        final List<SchemaProvider> schemaProviders = Arrays.asList(new JsonSchemaProvider(), new AvroSchemaProvider(), new ProtobufSchemaProvider());\n+        final List<SchemaProvider> schemaProviders = Arrays\n+                .asList(new JsonSchemaProvider(), new AvroSchemaProvider(), new ProtobufSchemaProvider());\n \n         return new CachedSchemaRegistryClient(new RestService(\"http://localhost:8081/api/ccompat\"), 3, schemaProviders, null, null);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDAxMA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428194010", "bodyText": "Why is this all removed?", "author": "EricWittmann", "createdAt": "2020-05-20T17:43:03Z", "path": "app/src/test/java/io/apicurio/registry/ConfluentClientTest.java", "diffHunk": "@@ -184,81 +233,4 @@ public void testDelete() throws Exception {\n             return null;\n         });\n     }\n-\n-    @Test\n-    public void testConverter_PreRegisterSchema() {\n-        String subject = generateArtifactId();\n-        String name = \"myr\" + ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);\n-        testConverter(\n-            subject,\n-            name,\n-            false,\n-            (client) -> {\n-                try {\n-                    Schema schema = new Schema.Parser().parse(String.format(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"%s\\\",\\\"fields\\\":[{\\\"name\\\":\\\"bar\\\",\\\"type\\\":\\\"string\\\"}],\\\"connect.name\\\":\\\"%s\\\"}\", name, name));\n-                    int id = client.register(subject + \"-value\", schema);\n-                    client.reset();\n-                    // can be async ...\n-                    Schema retry = retry(() -> client.getById(id));\n-                    Assertions.assertNotNull(retry);\n-                } catch (Exception e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            },\n-            (c, b) -> {\n-            }\n-        );\n-    }\n-\n-    @Test\n-    public void testConverter_AutoRegisterSchema() {\n-        String name = \"myr\" + ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);\n-        testConverter(\n-            generateArtifactId(),\n-            name,\n-            true,\n-            (c) -> {\n-            },\n-            (client, bytes) -> {\n-                try {\n-                    client.reset();\n-                    Schema retry = retry(() -> {\n-                        ByteBuffer buffer = ByteBuffer.wrap(bytes);\n-                        buffer.get(); // magic-byte\n-                        int id = buffer.getInt();\n-                        return client.getById(id);\n-                    });\n-                    Assertions.assertNotNull(retry);\n-                } catch (Exception e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }\n-        );\n-    }\n-\n-    private void testConverter(String subject, String name, boolean autoRegister, Consumer<SchemaRegistryClient> pre, BiConsumer<SchemaRegistryClient, byte[]> post) {\n-        SchemaRegistryClient client = buildClient();\n-\n-        pre.accept(client);\n-\n-        org.apache.kafka.connect.data.Schema cs =\n-            org.apache.kafka.connect.data.SchemaBuilder.struct()\n-                                                       .name(name).field(\"bar\", org.apache.kafka.connect.data.Schema.STRING_SCHEMA);\n-        Struct struct = new Struct(cs);\n-        struct.put(\"bar\", \"somebar\");\n-\n-        AvroConverter converter = new AvroConverter(client);\n-        Map<String, Object> config = new HashMap<>();\n-        config.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, \"dummy\");\n-        config.put(AbstractKafkaAvroSerDeConfig.AUTO_REGISTER_SCHEMAS, autoRegister);\n-        converter.configure(config, false);\n-\n-        byte[] bytes = converter.fromConnectData(subject, cs, struct);\n-\n-        post.accept(client, bytes);\n-\n-        SchemaAndValue sav = converter.toConnectData(subject, bytes);\n-        Struct ir = (Struct) sav.value();\n-        Assertions.assertEquals(\"somebar\", ir.get(\"bar\").toString());\n-    }", "originalCommit": "87fafda4565ccaab077cedc13bef08b771b1e4fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDQ0NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428194445", "bodyText": "And the converter classes too.  Why are they all gone?", "author": "EricWittmann", "createdAt": "2020-05-20T17:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwMjcyMg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428202722", "bodyText": "The converter has a comment from @alesj indicating that can be removed once confluent changes Avro version from 1.8.x to 1.9.x and that's what happened in the version 5.5.0.", "author": "carlesarnal", "createdAt": "2020-05-20T17:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MTY4Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428681687", "bodyText": "OK great, thanks.", "author": "EricWittmann", "createdAt": "2020-05-21T14:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDAxMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c1ce5744bd3e1718a1c66e9decca0188812a1190", "url": "https://github.com/Apicurio/apicurio-registry/commit/c1ce5744bd3e1718a1c66e9decca0188812a1190", "message": "Add jsonschema and protobuf support for ccompat api", "committedDate": "2020-05-21T08:58:53Z", "type": "forcePushed"}, {"oid": "afb53fec216a10403fdbf67730833a981c7855ad", "url": "https://github.com/Apicurio/apicurio-registry/commit/afb53fec216a10403fdbf67730833a981c7855ad", "message": "Fix problem with jersey already present in the classpath", "committedDate": "2020-05-25T11:35:59Z", "type": "forcePushed"}, {"oid": "b8ec675191dd7d1dae35c6e1e538989a2d711f9d", "url": "https://github.com/Apicurio/apicurio-registry/commit/b8ec675191dd7d1dae35c6e1e538989a2d711f9d", "message": "Add jsonschema and protobuf support for ccompat api", "committedDate": "2020-05-28T07:12:13Z", "type": "commit"}, {"oid": "3f676d604f848e78229b43f7999a4cb1954dd0a7", "url": "https://github.com/Apicurio/apicurio-registry/commit/3f676d604f848e78229b43f7999a4cb1954dd0a7", "message": "Remove import wildcard", "committedDate": "2020-05-28T07:12:13Z", "type": "commit"}, {"oid": "868eb3e3859931bf78e0f220c52eef69b1d4daaa", "url": "https://github.com/Apicurio/apicurio-registry/commit/868eb3e3859931bf78e0f220c52eef69b1d4daaa", "message": "Fix problem with jersey already present in the classpath", "committedDate": "2020-05-28T07:12:13Z", "type": "commit"}, {"oid": "242f2fa2805e14a63e1fc168252a0ee0f433e618", "url": "https://github.com/Apicurio/apicurio-registry/commit/242f2fa2805e14a63e1fc168252a0ee0f433e618", "message": "Add scope provided to registry client test dependency", "committedDate": "2020-05-28T07:12:13Z", "type": "commit"}, {"oid": "a419178d3f57bdc93b72803ca1d7e51690a38700", "url": "https://github.com/Apicurio/apicurio-registry/commit/a419178d3f57bdc93b72803ca1d7e51690a38700", "message": "Add registered types endpoint", "committedDate": "2020-05-28T07:12:13Z", "type": "commit"}, {"oid": "a419178d3f57bdc93b72803ca1d7e51690a38700", "url": "https://github.com/Apicurio/apicurio-registry/commit/a419178d3f57bdc93b72803ca1d7e51690a38700", "message": "Add registered types endpoint", "committedDate": "2020-05-28T07:12:13Z", "type": "forcePushed"}, {"oid": "9ae1dbc30f652b4ca5f55d9477b6c61e1735470c", "url": "https://github.com/Apicurio/apicurio-registry/commit/9ae1dbc30f652b4ca5f55d9477b6c61e1735470c", "message": "Add get subject versions endpoint to ccompat api", "committedDate": "2020-05-28T08:29:43Z", "type": "commit"}, {"oid": "ab1b2252c460e74a9229330b30fe755e6fe598fd", "url": "https://github.com/Apicurio/apicurio-registry/commit/ab1b2252c460e74a9229330b30fe755e6fe598fd", "message": "Add referencedby endpoint and update some references", "committedDate": "2020-05-28T09:53:10Z", "type": "commit"}]}