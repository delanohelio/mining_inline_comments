{"pr_number": 1102, "pr_title": "Auth tests", "pr_createdAt": "2020-12-21T17:37:57Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/1102", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE3OTIwMw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547179203", "bodyText": "Here we need to also enable auth by adding the appropriate property.", "author": "carlesarnal", "createdAt": "2020-12-22T09:54:07Z", "path": "app/src/test/java/io/apicurio/registry/auth/KeycloakTestResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.auth;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import dasniko.testcontainers.keycloak.KeycloakContainer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class KeycloakTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KeycloakTestResource.class);\n+\n+    private KeycloakContainer container;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        log.info(\"Starting Keycloak Test Container\");\n+\n+        container = new KeycloakContainer()\n+                .withRealmImportFile(\"test-realm.json\");\n+        container.start();\n+\n+        Map<String, String> props = new HashMap<>();\n+        props.put(\"registry.keycloak.url\", container.getAuthServerUrl());\n+        props.put(\"registry.keycloak.realm\", \"registry\");", "originalCommit": "e286a9f8ce18f15354358aef65998766cc0fa225", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db20a446940b54335c2c1e3fc79bf03313d03d61", "chunk": "diff --git a/app/src/test/java/io/apicurio/registry/auth/KeycloakTestResource.java b/app/src/test/java/io/apicurio/registry/auth/KeycloakTestResource.java\nindex 01840357..fb8e01db 100644\n--- a/app/src/test/java/io/apicurio/registry/auth/KeycloakTestResource.java\n+++ b/app/src/test/java/io/apicurio/registry/auth/KeycloakTestResource.java\n\n@@ -40,6 +40,7 @@ public class KeycloakTestResource implements QuarkusTestResourceLifecycleManager\n         Map<String, String> props = new HashMap<>();\n         props.put(\"registry.keycloak.url\", container.getAuthServerUrl());\n         props.put(\"registry.keycloak.realm\", \"registry\");\n+        props.put(\"registry.auth.enabled\", \"true\");\n         return props;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNTgyNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547225827", "bodyText": "@carlesarnal auth is being enabled here", "author": "famartinrh", "createdAt": "2020-12-22T11:31:01Z", "path": "app/src/test/java/io/apicurio/registry/auth/AuthTestProfile.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.auth;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+\n+public class AuthTestProfile implements QuarkusTestProfile {\n+\n+    @Override\n+    public Map<String, String> getConfigOverrides() {\n+        return Collections.singletonMap(\"registry.auth.enabled\", \"true\");", "originalCommit": "e286a9f8ce18f15354358aef65998766cc0fa225", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNzI0MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547237241", "bodyText": "Hm, then I'm doing something wrong, I'm getting the message auth is false.", "author": "carlesarnal", "createdAt": "2020-12-22T11:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNTgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "de5bd829300877e2e12140b8a50e83e37a603fd7", "chunk": "diff --git a/app/src/test/java/io/apicurio/registry/auth/AuthTestProfile.java b/app/src/test/java/io/apicurio/registry/auth/AuthTestProfile.java\nindex 831e96f5..8edb0a81 100644\n--- a/app/src/test/java/io/apicurio/registry/auth/AuthTestProfile.java\n+++ b/app/src/test/java/io/apicurio/registry/auth/AuthTestProfile.java\n\n@@ -25,7 +25,7 @@ public class AuthTestProfile implements QuarkusTestProfile {\n \n     @Override\n     public Map<String, String> getConfigOverrides() {\n-        return Collections.singletonMap(\"registry.auth.enabled\", \"true\");\n+        return Collections.emptyMap();\n     }\n \n     @Override\n"}}, {"oid": "db20a446940b54335c2c1e3fc79bf03313d03d61", "url": "https://github.com/Apicurio/apicurio-registry/commit/db20a446940b54335c2c1e3fc79bf03313d03d61", "message": "fix tests, implement auth exceptions and fix properties", "committedDate": "2020-12-22T17:20:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwNzIzNQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547807235", "bodyText": "Let's try to avoid adding jax-rs classes to the rest-client.", "author": "carlesarnal", "createdAt": "2020-12-23T08:35:28Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java", "diffHunk": "@@ -19,8 +19,12 @@\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.ws.rs.NotAuthorizedException;", "originalCommit": "db20a446940b54335c2c1e3fc79bf03313d03d61", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1088b1030eaddcdc72a621f47956ce85c0b5b145", "chunk": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\nindex 929a45d8..1105a105 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\n\n@@ -19,12 +19,9 @@ package io.apicurio.registry.client.request;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Optional;\n \n-import javax.ws.rs.NotAuthorizedException;\n \n import io.apicurio.registry.auth.Auth;\n-import io.apicurio.registry.rest.beans.Error;\n import okhttp3.Headers;\n import okhttp3.Headers.Builder;\n import okhttp3.Interceptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxMDI4MA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547810280", "bodyText": "I don't see how this can throw a NotAuthorizedException from jax-rs.", "author": "carlesarnal", "createdAt": "2020-12-23T08:39:07Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java", "diffHunk": "@@ -39,7 +43,19 @@ public AuthInterceptor(Auth auth) {\n     public Response intercept(Chain chain) throws IOException {\n         final Request request = chain.request();\n         Map<String, String> headers = new HashMap<>();\n-        auth.apply(headers);\n+        try {\n+            auth.apply(headers);", "originalCommit": "db20a446940b54335c2c1e3fc79bf03313d03d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgyMTA4Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r547821083", "bodyText": "keycloak client does", "author": "famartinrh", "createdAt": "2020-12-23T08:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgxMDI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1088b1030eaddcdc72a621f47956ce85c0b5b145", "chunk": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java b/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\nindex 929a45d8..1105a105 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/AuthInterceptor.java\n\n@@ -43,20 +40,7 @@ public class AuthInterceptor implements Interceptor {\n     public Response intercept(Chain chain) throws IOException {\n         final Request request = chain.request();\n         Map<String, String> headers = new HashMap<>();\n-        try {\n-            auth.apply(headers);\n-        } catch (Exception e) {\n-            if (e instanceof NotAuthorizedException) {\n-                NotAuthorizedException nae = (NotAuthorizedException) e;\n-                Error error = new Error();\n-                error.setErrorCode(nae.getResponse().getStatus());\n-                error.setMessage(nae.getResponse().getStatusInfo().getReasonPhrase());\n-                error.setDetail(Optional.ofNullable(nae.getChallenges()).map(Object::toString).orElse(null));\n-                throw new io.apicurio.registry.client.exception.NotAuthorizedException(error);\n-            }\n-            throw e;\n-        }\n-\n+        auth.apply(headers);\n         Builder builder = request.headers().newBuilder();\n         headers.entrySet().forEach(entry -> builder.add(entry.getKey(), entry.getValue()));\n         final Headers requestHeaders = builder.build();\n"}}, {"oid": "1088b1030eaddcdc72a621f47956ce85c0b5b145", "url": "https://github.com/Apicurio/apicurio-registry/commit/1088b1030eaddcdc72a621f47956ce85c0b5b145", "message": "auth tests", "committedDate": "2020-12-23T14:42:33Z", "type": "commit"}, {"oid": "0b0bd8dba6ed2369d01b3c1bc9bd34a6ac8bc2fa", "url": "https://github.com/Apicurio/apicurio-registry/commit/0b0bd8dba6ed2369d01b3c1bc9bd34a6ac8bc2fa", "message": "fix tests, implement auth exceptions and fix properties", "committedDate": "2020-12-23T14:45:21Z", "type": "commit"}, {"oid": "fb3aa8cc20c989e29ce417b234d8925fa92f5bd1", "url": "https://github.com/Apicurio/apicurio-registry/commit/fb3aa8cc20c989e29ce417b234d8925fa92f5bd1", "message": "fix properties handling", "committedDate": "2020-12-23T14:45:26Z", "type": "commit"}, {"oid": "de5bd829300877e2e12140b8a50e83e37a603fd7", "url": "https://github.com/Apicurio/apicurio-registry/commit/de5bd829300877e2e12140b8a50e83e37a603fd7", "message": "fix tests again", "committedDate": "2020-12-23T15:48:42Z", "type": "commit"}, {"oid": "de5bd829300877e2e12140b8a50e83e37a603fd7", "url": "https://github.com/Apicurio/apicurio-registry/commit/de5bd829300877e2e12140b8a50e83e37a603fd7", "message": "fix tests again", "committedDate": "2020-12-23T15:48:42Z", "type": "forcePushed"}, {"oid": "8e911f48586b1228c307238f7b1107f3885c55f2", "url": "https://github.com/Apicurio/apicurio-registry/commit/8e911f48586b1228c307238f7b1107f3885c55f2", "message": "fix tests properties", "committedDate": "2020-12-23T16:26:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4Njk4Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r549286986", "bodyText": "Since we're not overring properties in the profile you can remove it and use the @QuarkusTestResource annotation instead.", "author": "carlesarnal", "createdAt": "2020-12-28T09:57:20Z", "path": "app/src/test/java/io/apicurio/registry/auth/SimpleAuthTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.auth;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.AbstractResourceTestBase;\n+import io.apicurio.registry.client.RegistryRestClient;\n+import io.apicurio.registry.client.RegistryRestClientFactory;\n+import io.apicurio.registry.client.exception.ArtifactNotFoundException;\n+import io.apicurio.registry.client.exception.ForbiddenException;\n+import io.apicurio.registry.client.exception.NotAuthorizedException;\n+import io.apicurio.registry.rest.beans.ArtifactMetaData;\n+import io.apicurio.registry.rest.beans.Rule;\n+import io.apicurio.registry.rules.validity.ValidityLevel;\n+import io.apicurio.registry.types.ArtifactType;\n+import io.apicurio.registry.types.RuleType;\n+import io.apicurio.registry.utils.tests.TestUtils;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.TestProfile;\n+\n+@QuarkusTest\n+@TestProfile(AuthTestProfile.class)", "originalCommit": "8e911f48586b1228c307238f7b1107f3885c55f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb1624f9c5e8e22006b4edec6d22e050089318a9", "chunk": "diff --git a/app/src/test/java/io/apicurio/registry/auth/SimpleAuthTest.java b/app/src/test/java/io/apicurio/registry/auth/SimpleAuthTest.java\nindex 40b7f0a5..aa51c843 100644\n--- a/app/src/test/java/io/apicurio/registry/auth/SimpleAuthTest.java\n+++ b/app/src/test/java/io/apicurio/registry/auth/SimpleAuthTest.java\n\n@@ -125,14 +125,15 @@ public class SimpleAuthTest extends AbstractResourceTestBase {\n             client.createArtifact(\"ccc\", ArtifactType.JSON, new ByteArrayInputStream(\"{}\".getBytes()));\n         });\n \n+        String artifactId = TestUtils.generateArtifactId();\n         {\n             Auth devAuth = new KeycloakAuth(authServerUrl, realm, developerClientId, \"test1\");\n             RegistryRestClient devClient = RegistryRestClientFactory.create(registryUrl, Collections.emptyMap(), devAuth);\n-            ArtifactMetaData meta = devClient.createArtifact(\"ccc\", ArtifactType.JSON, new ByteArrayInputStream(\"{}\".getBytes()));\n+            ArtifactMetaData meta = devClient.createArtifact(artifactId, ArtifactType.JSON, new ByteArrayInputStream(\"{}\".getBytes()));\n             TestUtils.retry(() -> devClient.getArtifactMetaDataByGlobalId(meta.getGlobalId()));\n         }\n \n-        assertNotNull(client.getLatestArtifact(\"ccc\"));\n+        assertNotNull(client.getLatestArtifact(artifactId));\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4OTA1Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/1102#discussion_r549289056", "bodyText": "This will likely be the case but maybe is a good idea to also check the error code since Keycloak can throw other exceptions, not just the 401.", "author": "carlesarnal", "createdAt": "2020-12-28T10:04:19Z", "path": "rest-client/src/main/java/io/apicurio/registry/client/request/ResultCallback.java", "diffHunk": "@@ -71,7 +92,18 @@ public void onResponse(Call<T> call, retrofit2.Response<T> response) {\n \n     @Override\n     public void onFailure(Call<T> call, Throwable t) {\n-        result.completeExceptionally(t);\n+        Throwable rootCause = extractRootCause(t);\n+        if (rootCause instanceof HttpResponseException) {\n+            //authorization error", "originalCommit": "8e911f48586b1228c307238f7b1107f3885c55f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32e4310e3af1586a3c08bf9b59e9333eb64779ca", "chunk": "diff --git a/rest-client/src/main/java/io/apicurio/registry/client/request/ResultCallback.java b/rest-client/src/main/java/io/apicurio/registry/client/request/ResultCallback.java\nindex a6a58e13..06f18c83 100644\n--- a/rest-client/src/main/java/io/apicurio/registry/client/request/ResultCallback.java\n+++ b/rest-client/src/main/java/io/apicurio/registry/client/request/ResultCallback.java\n\n@@ -100,7 +100,11 @@ public class ResultCallback<T> implements Callback<T> {\n             error.setErrorCode(hre.getStatusCode());\n             error.setMessage(hre.getMessage());\n             error.setDetail(hre.getReasonPhrase());\n-            result.completeExceptionally(new NotAuthorizedException(error));\n+            if (hre.getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n+                result.completeExceptionally(new NotAuthorizedException(error));\n+            } else {\n+                result.completeExceptionally(new RestClientException(error));\n+            }\n         } else {\n             result.completeExceptionally(t);\n         }\n"}}, {"oid": "32e4310e3af1586a3c08bf9b59e9333eb64779ca", "url": "https://github.com/Apicurio/apicurio-registry/commit/32e4310e3af1586a3c08bf9b59e9333eb64779ca", "message": "fix test deps and improve not authorized error handling", "committedDate": "2021-01-04T09:56:27Z", "type": "commit"}, {"oid": "49c225b37f35be8d2ba15d99e12a21d15a15439b", "url": "https://github.com/Apicurio/apicurio-registry/commit/49c225b37f35be8d2ba15d99e12a21d15a15439b", "message": "fix sql deps", "committedDate": "2021-01-05T15:33:45Z", "type": "commit"}, {"oid": "cb1624f9c5e8e22006b4edec6d22e050089318a9", "url": "https://github.com/Apicurio/apicurio-registry/commit/cb1624f9c5e8e22006b4edec6d22e050089318a9", "message": "improve tests, artifactId", "committedDate": "2021-01-05T16:12:24Z", "type": "commit"}, {"oid": "6669bcf28e38f2194e0d66e1d30432c663e8424a", "url": "https://github.com/Apicurio/apicurio-registry/commit/6669bcf28e38f2194e0d66e1d30432c663e8424a", "message": "fix streams unstable tests (#1125)\n\n* fix streams unstable tests\r\n\r\n* fix RegistryConverterIT closing RegistryRestClient\r\n\r\n* fix waitFor leaking exception", "committedDate": "2021-01-07T13:31:56Z", "type": "commit"}]}