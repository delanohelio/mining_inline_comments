{"pr_number": 233, "pr_title": "Initial IBM-like states.", "pr_createdAt": "2020-01-22T15:36:55Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/233", "timeline": [{"oid": "26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "url": "https://github.com/Apicurio/apicurio-registry/commit/26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "message": "Initial IBM-like states.", "committedDate": "2020-01-23T09:29:25Z", "type": "forcePushed"}, {"oid": "f1a282eedb0df6ddebf30a3b02ff208a81fa18b7", "url": "https://github.com/Apicurio/apicurio-registry/commit/f1a282eedb0df6ddebf30a3b02ff208a81fa18b7", "message": "Simplify JPA metadata handling a bit ...", "committedDate": "2020-01-23T14:06:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDcwMw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370124703", "bodyText": "Why two methods instead of a single method with a Nullable version?  Either way, some javadoc here would be helpful.", "author": "EricWittmann", "createdAt": "2020-01-23T13:46:13Z", "path": "app/src/main/java/io/apicurio/registry/storage/RegistryStorage.java", "diffHunk": "@@ -28,10 +29,28 @@\n \n /**\n  * The storage layer for the registry.\n+ *\n  * @author eric.wittmann@gmail.com\n  */\n public interface RegistryStorage {\n \n+    /**\n+     * Update artifact state.\n+     *\n+     * @param artifactId\n+     * @param state\n+     */\n+    void updateArtifactState(String artifactId, ArtifactState state);\n+\n+    /**\n+     * Update artifact state.\n+     *\n+     * @param artifactId\n+     * @param state\n+     * @param version\n+     */\n+    void updateArtifactState(String artifactId, ArtifactState state, Integer version);", "originalCommit": "26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Njc5Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370166796", "bodyText": "We have similar for all other ops, hence I added both.\nFeel free to remove one.", "author": "alesj", "createdAt": "2020-01-23T14:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDcwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNjU4Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370126583", "bodyText": "Why remove VersionNotFoundException when the method can definitely throw it?", "author": "EricWittmann", "createdAt": "2020-01-23T13:49:44Z", "path": "app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java", "diffHunk": "@@ -93,29 +98,37 @@ protected void afterInit() {\n         return v2c;\n     }\n \n-    private Map<String, String> getContentMap(String artifactId, Long version) throws ArtifactNotFoundException, VersionNotFoundException {\n+    private Map<String, String> getContentMap(String artifactId, Long version, EnumSet<ArtifactState> states) throws ArtifactNotFoundException {", "originalCommit": "26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNzM0Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370127342", "bodyText": "Also maybe add ArtifactStateInvalidException?  I realize these are all unchecked exceptions.  It seems like we should either declare them or not declare them...but not declare only some of them.", "author": "EricWittmann", "createdAt": "2020-01-23T13:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNjU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2ODcxOQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370168719", "bodyText": "Yeah, IntelliJ was pointing it out, since VNFE extends ANFE, hence it's obsolete (even more).\nImo, we should cleanup these unchecked exceptions ...", "author": "alesj", "createdAt": "2020-01-23T15:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a033c1fdae2a850dc2a74fb4f64ce2f90f987696", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java b/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\nindex 537571fe..7c7130e5 100644\n--- a/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\n+++ b/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\n\n@@ -113,12 +114,13 @@ public abstract class AbstractMapRegistryStorage implements RegistryStorage {\n \n     private Map<String, String> getLatestContentMap(String artifactId, EnumSet<ArtifactState> states) throws ArtifactNotFoundException, RegistryStorageException {\n         Map<Long, Map<String, String>> v2c = getVersion2ContentMap(artifactId);\n-        Map<String, String> latest = v2c.entrySet()\n-                                        .stream()\n-                                        .filter(e -> states.contains(ArtifactStateExt.getState(e.getValue())))\n-                                        .max((e1, e2) -> (int) (e1.getKey() - e2.getKey()))\n-                                        .orElseThrow(() -> new RegistryStorageException(\"Race-condition?!\", null))\n-                                        .getValue();\n+        Stream<Map.Entry<Long, Map<String, String>>> stream = v2c.entrySet().stream();\n+        if (states != null) {\n+            stream = stream.filter(e -> states.contains(ArtifactStateExt.getState(e.getValue())));\n+        }\n+        Map<String, String> latest = stream.max((e1, e2) -> (int) (e1.getKey() - e2.getKey()))\n+                                           .orElseThrow(() -> new RegistryStorageException(\"Race-condition?!\", null))\n+                                           .getValue();\n \n         ArtifactStateExt.logIfDeprecated(artifactId, ArtifactStateExt.getState(latest), latest.get(VERSION));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDMyNA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370130324", "bodyText": "I know we don't have an answer on this yet, but IMO this should be ACTIVE_STATES", "author": "EricWittmann", "createdAt": "2020-01-23T13:56:35Z", "path": "app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java", "diffHunk": "@@ -267,7 +304,7 @@ public StoredArtifact getArtifact(String artifactId) throws ArtifactNotFoundExce\n      */\n     @Override\n     public ArtifactMetaDataDto getArtifactMetaData(String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n-        Map<String, String> content = getLatestContentMap(artifactId);\n+        Map<String, String> content = getLatestContentMap(artifactId, ArtifactStateExt.ALL);", "originalCommit": "26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTI0OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370169248", "bodyText": "Yup, makes the most sense.\nI'll fix this asap, and adjust the tests to fit this behavior.", "author": "alesj", "createdAt": "2020-01-23T15:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMDMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a033c1fdae2a850dc2a74fb4f64ce2f90f987696", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java b/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\nindex 537571fe..7c7130e5 100644\n--- a/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\n+++ b/app/src/main/java/io/apicurio/registry/storage/impl/AbstractMapRegistryStorage.java\n\n@@ -304,7 +309,7 @@ public abstract class AbstractMapRegistryStorage implements RegistryStorage {\n      */\n     @Override\n     public ArtifactMetaDataDto getArtifactMetaData(String artifactId) throws ArtifactNotFoundException, RegistryStorageException {\n-        Map<String, String> content = getLatestContentMap(artifactId, ArtifactStateExt.ALL);\n+        Map<String, String> content = getLatestContentMap(artifactId, null);\n         return MetaDataKeys.toArtifactMetaData(content);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NDM0MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370144341", "bodyText": "Is this needed?  Are we actually soft-deleting artifacts in the storage layer?  If so, I think a side effect of this is that a user could delete an artifact by calling \"updateArtifactState\" and passing it DELETE.  Maybe that's ok?", "author": "EricWittmann", "createdAt": "2020-01-23T14:21:10Z", "path": "common/src/main/java/io/apicurio/registry/types/ArtifactState.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2019 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.types;\n+\n+/**\n+ * @author Ales Justin\n+ */\n+public enum ArtifactState {\n+\n+    ENABLED,\n+    DISABLED,\n+    DEPRECATED,\n+    DELETED", "originalCommit": "26afcba8905b2d1c450c6ca2e0e71ceb32a9fca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2OTk4OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/233#discussion_r370169989", "bodyText": "That's how I have it now ...\nI added it since it (the DELETE state) came around when we discussed it with Andrew ...", "author": "alesj", "createdAt": "2020-01-23T15:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NDM0MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a033c1fdae2a850dc2a74fb4f64ce2f90f987696", "url": "https://github.com/Apicurio/apicurio-registry/commit/a033c1fdae2a850dc2a74fb4f64ce2f90f987696", "message": "Move JPA state into metadata.\nReplace ALL states with null.", "committedDate": "2020-01-29T11:49:16Z", "type": "forcePushed"}, {"oid": "cd685ebc285c959594ce712322ca64992117cc10", "url": "https://github.com/Apicurio/apicurio-registry/commit/cd685ebc285c959594ce712322ca64992117cc10", "message": "Initial IBM-like states.", "committedDate": "2020-01-29T13:05:09Z", "type": "commit"}, {"oid": "87295e9a6ed8c52282b2becefb44e6ad4c453325", "url": "https://github.com/Apicurio/apicurio-registry/commit/87295e9a6ed8c52282b2becefb44e6ad4c453325", "message": "Simplify JPA metadata handling a bit ...", "committedDate": "2020-01-29T13:05:09Z", "type": "commit"}, {"oid": "e4ab630b0b043c7dfe7804c5d144d73910d97b68", "url": "https://github.com/Apicurio/apicurio-registry/commit/e4ab630b0b043c7dfe7804c5d144d73910d97b68", "message": "Move JPA state into metadata.\nReplace ALL states with null.", "committedDate": "2020-01-29T13:05:09Z", "type": "commit"}, {"oid": "e4ab630b0b043c7dfe7804c5d144d73910d97b68", "url": "https://github.com/Apicurio/apicurio-registry/commit/e4ab630b0b043c7dfe7804c5d144d73910d97b68", "message": "Move JPA state into metadata.\nReplace ALL states with null.", "committedDate": "2020-01-29T13:05:09Z", "type": "forcePushed"}, {"oid": "d77325da705a35e7f6953fdaeafb3603fd6157cc", "url": "https://github.com/Apicurio/apicurio-registry/commit/d77325da705a35e7f6953fdaeafb3603fd6157cc", "message": "Always use just active latest.", "committedDate": "2020-01-29T14:35:34Z", "type": "commit"}]}