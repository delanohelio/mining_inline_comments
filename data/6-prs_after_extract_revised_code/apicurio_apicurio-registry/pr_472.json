{"pr_number": 472, "pr_title": "Added a query param to Create Artifact (ifExists)", "pr_createdAt": "2020-05-14T17:01:11Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/472", "timeline": [{"oid": "59ff57d0eee55596ad4f09b55e191d3d5464d377", "url": "https://github.com/Apicurio/apicurio-registry/commit/59ff57d0eee55596ad4f09b55e191d3d5464d377", "message": "Added a query param to Create Artifact to determine what happens when the artifact already exists.", "committedDate": "2020-05-14T16:59:33Z", "type": "commit"}, {"oid": "3a58f5e1040306d7ca9d2bc241fb52a21835b762", "url": "https://github.com/Apicurio/apicurio-registry/commit/3a58f5e1040306d7ca9d2bc241fb52a21835b762", "message": "Merge branch 'master' into issues/362", "committedDate": "2020-05-14T17:01:23Z", "type": "commit"}, {"oid": "4130223eda4b2258441dbee69f6f738dc714cafd", "url": "https://github.com/Apicurio/apicurio-registry/commit/4130223eda4b2258441dbee69f6f738dc714cafd", "message": "Add if exists operation variants for artifact creation", "committedDate": "2020-05-15T11:20:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425748142", "bodyText": "I think this introduces a race condition, but I'm not sure if we should care.  What do you think?  If two attempts to create the same artifact happen at the same time, they might both return null from handleIfExists and then both try to do the create.  The result would be a failure for one of them even if they passed something like RETURN for the new query param.\nAn alternative could be to actually go ahead and try the create.  Then if it fails handle the \"if exists\" logic at that point.  Thoughts?", "author": "EricWittmann", "createdAt": "2020-05-15T11:49:04Z", "path": "app/src/main/java/io/apicurio/registry/rest/ArtifactsResourceImpl.java", "diffHunk": "@@ -225,23 +258,21 @@ public void testUpdateArtifact(String artifactId, ArtifactType xRegistryArtifact\n     }\n \n     /**\n-     * @see io.apicurio.registry.rest.ArtifactsResource#createArtifact(io.apicurio.registry.types.ArtifactType, java.lang.String, java.io.InputStream)\n+     * @see io.apicurio.registry.rest.ArtifactsResource#createArtifact(io.apicurio.registry.types.ArtifactType, java.lang.String, io.apicurio.registry.rest.beans.IfExistsType, java.io.InputStream)\n      */\n     @Override\n-    public CompletionStage<ArtifactMetaData> createArtifact(ArtifactType xRegistryArtifactType, String xRegistryArtifactId,\n-                                                            InputStream data) {\n-        String artifactId = xRegistryArtifactId;\n-        if (artifactId == null || artifactId.trim().isEmpty()) {\n-            artifactId = idGenerator.generate();\n+    public CompletionStage<ArtifactMetaData> createArtifact(ArtifactType xRegistryArtifactType,\n+            String xRegistryArtifactId, IfExistsType ifExists, InputStream data) {\n+\n+        final CompletionStage<ArtifactMetaData> alreadyExistingArtifactResult = handleIfExists(\n+                xRegistryArtifactType, xRegistryArtifactId, ifExists, data);\n+\n+        if ( null != alreadyExistingArtifactResult) {\n+\n+            return alreadyExistingArtifactResult;\n         }\n-        ContentHandle content = ContentHandle.create(data);\n \n-        ArtifactType artifactType = determineArtifactType(content, xRegistryArtifactType, request);\n-        rulesService.applyRules(artifactId, artifactType, content, RuleApplicationType.CREATE);\n-        String finalArtifactId = artifactId;\n-        return storage.createArtifact(artifactId, artifactType, content)\n-                      .thenCompose(amdd -> indexArtifact(finalArtifactId, content, amdd))\n-                      .thenApply(dto -> DtoUtil.dtoToMetaData(finalArtifactId, artifactType, dto));\n+        return handleNotExistingArtifactCreation(xRegistryArtifactType, xRegistryArtifactId, data);", "originalCommit": "4130223eda4b2258441dbee69f6f738dc714cafd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODAwMw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425758003", "bodyText": "Yes, I agree that the race condition exists. Another option would be to sync the handleIfExists method, but I don't really like that solution.\nI think I prefer the option of catching the ArtifactAlreadyExistsException at a higher level (instead of storage level) and at that point apply the if exists logic.", "author": "carlesarnal", "createdAt": "2020-05-15T12:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3MDU5MA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425770590", "bodyText": "Another option would be to sync\n\nWhat about in cluster?", "author": "alesj", "createdAt": "2020-05-15T12:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc4MDM3Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425780376", "bodyText": "Not an option then. That's one of the reasons for me to prefer the exception handling.", "author": "carlesarnal", "createdAt": "2020-05-15T12:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNjA2NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425806065", "bodyText": "Do we need a storage-specific feature for this?  In-memory and JPA will work if we take the approach of handling the ArtifactAlreadyExistsException.  But I suspect Streams might not work if multiple requests to create an artifact come in at the same time to different registry pods.  Am I correct on that, @alesj ?\nIf so, is there a solution that will work for Streams if we push the functionality into the storage?", "author": "EricWittmann", "createdAt": "2020-05-15T13:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjYyNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425812627", "bodyText": "Having a look at the streams storage code, this situation is being handled and also throwing an ArtifactAlreadyExistsException.", "author": "carlesarnal", "createdAt": "2020-05-15T13:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkxNTA4OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425915088", "bodyText": "OK if that's the case - then I'd vote for the approach where we try to create it in the JAX-RS layer and then handle the ArtifactAlreadyExistsException ... reacting based on the new query param.  Sound good @carlesarnal ?", "author": "EricWittmann", "createdAt": "2020-05-15T16:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk4MTM1Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r425981352", "bodyText": "Sure, ArtifactAlreadyExistException handling approach.", "author": "carlesarnal", "createdAt": "2020-05-15T18:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NTAxOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r426565018", "bodyText": "To add to this wrt Streams (and Kafka) ... the problem there is that it's all async -- when the msg/action hits storage -- as we handle this via Kafka producer/consumer.\nWe do have some initial checks, and we ignore dups when consuming the message, but afais, that's the best we can do; e.g. no point in throwing and exception when things are async.\nFor Streams I do try a bit better, with that remote Function call, but that's still async -- as you'll get callback only when things are consumed.", "author": "alesj", "createdAt": "2020-05-18T11:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwMDY5OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/472#discussion_r426600698", "bodyText": "Sorry, I was thinking about earlier stages of the creation operation like this one. If the operation fails/clashes at the consumer level, right, no point in throwing exceptions.", "author": "carlesarnal", "createdAt": "2020-05-18T12:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0ODE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7fa5bbb243a896afd45289cca6b5b76a8ec3fd46", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rest/ArtifactsResourceImpl.java b/app/src/main/java/io/apicurio/registry/rest/ArtifactsResourceImpl.java\nindex 22424bde..ad3feb21 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/ArtifactsResourceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/ArtifactsResourceImpl.java\n\n@@ -272,7 +272,11 @@ public class ArtifactsResourceImpl implements ArtifactsResource, Headers {\n             return alreadyExistingArtifactResult;\n         }\n \n-        return handleNotExistingArtifactCreation(xRegistryArtifactType, xRegistryArtifactId, data);\n+        try {\n+            return handleNotExistingArtifactCreation(xRegistryArtifactType, xRegistryArtifactId, data);\n+        } catch (ArtifactAlreadyExistsException ex) {\n+            return CompletableFuture.completedFuture(getArtifactMetaData(xRegistryArtifactId));\n+        }\n     }\n \n     /**\n"}}, {"oid": "7fa5bbb243a896afd45289cca6b5b76a8ec3fd46", "url": "https://github.com/Apicurio/apicurio-registry/commit/7fa5bbb243a896afd45289cca6b5b76a8ec3fd46", "message": "Fix search tests", "committedDate": "2020-05-15T15:22:02Z", "type": "commit"}, {"oid": "b4af9c9179e7fd7a264018965c6ff84081303beb", "url": "https://github.com/Apicurio/apicurio-registry/commit/b4af9c9179e7fd7a264018965c6ff84081303beb", "message": "Randomize artifactId for test", "committedDate": "2020-05-15T16:04:48Z", "type": "commit"}, {"oid": "4395c10e56d013dc37cd60a1453fcf7cfc6e2a3f", "url": "https://github.com/Apicurio/apicurio-registry/commit/4395c10e56d013dc37cd60a1453fcf7cfc6e2a3f", "message": "Add ifexists param handling", "committedDate": "2020-05-18T07:29:58Z", "type": "commit"}, {"oid": "9ccac653d59e66ea4495b3522797eed56d69a23f", "url": "https://github.com/Apicurio/apicurio-registry/commit/9ccac653d59e66ea4495b3522797eed56d69a23f", "message": "Merge branch 'master' into issues/362", "committedDate": "2020-05-18T07:39:10Z", "type": "commit"}, {"oid": "b48590f6dc93ba9c38032c4b05d481dde64a17b1", "url": "https://github.com/Apicurio/apicurio-registry/commit/b48590f6dc93ba9c38032c4b05d481dde64a17b1", "message": "Fixed indentation of handleIfExists()", "committedDate": "2020-05-18T12:24:20Z", "type": "commit"}]}