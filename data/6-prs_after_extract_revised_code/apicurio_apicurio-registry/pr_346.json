{"pr_number": 346, "pr_title": "Extract new test utils - to be used in app and IT tests.", "pr_createdAt": "2020-03-23T14:29:09Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/346", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNTcyOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396505728", "bodyText": "?", "author": "EricWittmann", "createdAt": "2020-03-23T14:46:57Z", "path": "tests/src/main/java/io/apicurio/tests/serdes/KafkaClients.java", "diffHunk": "@@ -222,6 +222,8 @@\n         try {\n             resultPromise.get(30, TimeUnit.SECONDS);\n         } catch (Exception e) {\n+            LOGGER.warn(\"qazx\");", "originalCommit": "8908175a7b39226de628fb6f7a3673cf704795ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTQ3OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396545479", "bodyText": "Ah ... debug leftover ... good catch!", "author": "alesj", "createdAt": "2020-03-23T15:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNTcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "11c49c343a625c56539353c3a4f719076017ab06", "chunk": "diff --git a/tests/src/main/java/io/apicurio/tests/serdes/KafkaClients.java b/tests/src/main/java/io/apicurio/tests/serdes/KafkaClients.java\nindex a48943fe..f32e81d4 100644\n--- a/tests/src/main/java/io/apicurio/tests/serdes/KafkaClients.java\n+++ b/tests/src/main/java/io/apicurio/tests/serdes/KafkaClients.java\n\n@@ -222,8 +222,6 @@ public class KafkaClients {\n         try {\n             resultPromise.get(30, TimeUnit.SECONDS);\n         } catch (Exception e) {\n-            LOGGER.warn(\"qazx\");\n-            e.printStackTrace();\n             resultPromise.completeExceptionally(e);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzM2MA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396507360", "bodyText": "We need to do something about this - it breaks every time the version # changes.  I wonder if the default code can be updated to actually look for a pattern:  ../app/target/apicurio-registry-app-$VERSION-runner.jar\nNot something that is relevant to this PR, just an observation. :)  I'll open a ticket.", "author": "EricWittmann", "createdAt": "2020-03-23T14:49:00Z", "path": "tests/src/main/java/io/apicurio/tests/RegistryFacade.java", "diffHunk": "@@ -19,38 +19,26 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.net.Socket;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CompletionException;\n-import java.util.concurrent.Future;\n \n public class RegistryFacade {\n     static final Logger LOGGER = LoggerFactory.getLogger(RegistryFacade.class);\n \n     public static final String DEFAULT_REGISTRY_JAR_PATH = \"../app/target/apicurio-registry-app-1.1.2-SNAPSHOT-runner.jar\";", "originalCommit": "8908175a7b39226de628fb6f7a3673cf704795ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwODkxMQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396508911", "bodyText": "Ticket created.", "author": "EricWittmann", "createdAt": "2020-03-23T14:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NjgwNA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396546804", "bodyText": "Yeah, was thinking the same ... @Frawless any idea?", "author": "alesj", "createdAt": "2020-03-23T15:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTk5NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396549994", "bodyText": "Not sure if it's possible to get it from pom somehow. Maybe it could be parsed (it's xml) and get it from there. We do something similar in Strimzi.", "author": "Frawless", "createdAt": "2020-03-23T15:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMDcyNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396610726", "bodyText": "We could just use some file system code to search a directory for a file of the right pattern.", "author": "EricWittmann", "createdAt": "2020-03-23T17:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNzM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "b16a12f1f3ec22d41bc0905e2568e4c47cdc80a4", "chunk": "diff --git a/tests/src/main/java/io/apicurio/tests/RegistryFacade.java b/tests/src/main/java/io/apicurio/tests/RegistryFacade.java\nindex 5f1d91ca..63ac5779 100644\n--- a/tests/src/main/java/io/apicurio/tests/RegistryFacade.java\n+++ b/tests/src/main/java/io/apicurio/tests/RegistryFacade.java\n\n@@ -25,8 +25,8 @@ import java.util.concurrent.CompletionException;\n public class RegistryFacade {\n     static final Logger LOGGER = LoggerFactory.getLogger(RegistryFacade.class);\n \n-    public static final String DEFAULT_REGISTRY_JAR_PATH = \"../app/target/apicurio-registry-app-1.1.2-SNAPSHOT-runner.jar\";\n-    public static final String REGISTRY_JAR_PATH = System.getenv().getOrDefault(\"REGISTRY_JAR_PATH\", DEFAULT_REGISTRY_JAR_PATH);\n+    private static final String REGISTRY_JAR_PATH_FORMAT = \"../app/target/apicurio-registry-app-%s-runner.jar\";\n+    private static final String REGISTRY_JAR_PATH = System.getenv().get(\"REGISTRY_JAR_PATH\");\n \n     private Exec executor = new Exec();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMjM5MA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396512390", "bodyText": "This change loses the test method name from the topic name.  That seems like potentially useful debugging information lost - do we not care?", "author": "EricWittmann", "createdAt": "2020-03-23T14:55:19Z", "path": "tests/src/test/java/io/apicurio/tests/serdes/apicurio/BasicApicurioSerDesIT.java", "diffHunk": "@@ -44,104 +44,104 @@\n @Tag(CLUSTER)\n public class BasicApicurioSerDesIT extends BaseIT {\n \n-    @Test\n-    void testAvroApicurioSerDes(TestInfo testInfo) throws InterruptedException, ExecutionException, TimeoutException {\n-        String topicName = \"topic-\" + testInfo.getTestMethod().get().getName();\n+    @RegistryServiceTest(localOnly = false)\n+    void testAvroApicurioSerDes(RegistryService apicurioService) throws InterruptedException, ExecutionException, TimeoutException {\n+        String topicName = TestUtils.generateTopic();\n         String subjectName = topicName + \"-value\";\n         String schemaKey = \"key1\";\n         kafkaCluster.createTopic(topicName, 1, 1);\n \n         Schema schema = new Schema.Parser().parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"myrecordapicurio1\\\",\\\"fields\\\":[{\\\"name\\\":\\\"\" + schemaKey + \"\\\",\\\"type\\\":\\\"string\\\"}]}\");\n-        createArtifactViaApicurioClient(schema, subjectName);\n+        createArtifactViaApicurioClient(apicurioService, schema, subjectName);\n \n         KafkaClients.produceAvroApicurioMessagesTopicStrategy(topicName, subjectName, schema, 10, schemaKey).get(5, TimeUnit.SECONDS);\n         KafkaClients.consumeAvroApicurioMessages(topicName, 10).get(5, TimeUnit.SECONDS);\n     }\n \n-    @Test\n-    void testAvroApicurioSerDesFail(TestInfo testInfo) throws TimeoutException {\n-        String topicName = \"topic-\" + testInfo.getTestMethod().get().getName();\n-        String subjectName = \"myrecordapicurio2\";\n+    @RegistryServiceTest(localOnly = false)\n+    void testAvroApicurioSerDesFail(RegistryService apicurioService) throws TimeoutException {\n+        String topicName = TestUtils.generateTopic();", "originalCommit": "8908175a7b39226de628fb6f7a3673cf704795ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1MDkwNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396550906", "bodyText": "For topics I guess we could leave it, for artifactIds it needs to be something unique, as now we get 2 runs of the same test - non-cached vs cached client.", "author": "alesj", "createdAt": "2020-03-23T15:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMjM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMDg2NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396610864", "bodyText": "Good point.", "author": "EricWittmann", "createdAt": "2020-03-23T17:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMjM5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDAwMA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396514000", "bodyText": "Here too - we're going to be losing potentially important context info.  Perhaps a variant of these generate methods that can take a string to use as part of the name?", "author": "EricWittmann", "createdAt": "2020-03-23T14:57:22Z", "path": "tests/src/test/java/io/apicurio/tests/smokeTests/apicurio/AllArtifactTypesIT.java", "diffHunk": "@@ -15,116 +15,116 @@\n  */\n package io.apicurio.tests.smokeTests.apicurio;\n \n-import static io.apicurio.tests.Constants.SMOKE;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-import javax.ws.rs.WebApplicationException;\n-\n-import org.junit.jupiter.api.Tag;\n-import org.junit.jupiter.api.Test;\n-\n+import io.apicurio.registry.client.RegistryService;\n import io.apicurio.registry.rest.beans.ArtifactMetaData;\n import io.apicurio.registry.rest.beans.Rule;\n import io.apicurio.registry.types.ArtifactType;\n import io.apicurio.registry.types.RuleType;\n import io.apicurio.registry.utils.IoUtil;\n+import io.apicurio.registry.utils.tests.RegistryServiceTest;\n+import io.apicurio.registry.utils.tests.TestUtils;\n import io.apicurio.tests.BaseIT;\n import io.apicurio.tests.utils.subUtils.ArtifactUtils;\n+import org.junit.jupiter.api.Tag;\n+\n+import static io.apicurio.tests.Constants.SMOKE;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n @Tag(SMOKE)\n class AllArtifactTypesIT extends BaseIT {\n     \n-    void doTest(String v1Resource, String v2Resource, ArtifactType atype) throws Exception {\n-        String artifactId = getClass().getSimpleName() + \"-\" + atype.name();\n+    void doTest(RegistryService apicurioService, String v1Resource, String v2Resource, ArtifactType atype) {\n+        String artifactId = TestUtils.generateArtifactId();", "originalCommit": "8908175a7b39226de628fb6f7a3673cf704795ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NzY2Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/346#discussion_r396547662", "bodyText": "Nah, this doesn't pose any useful info, at least it didn't for me.", "author": "alesj", "createdAt": "2020-03-23T15:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNDAwMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "11c49c343a625c56539353c3a4f719076017ab06", "url": "https://github.com/Apicurio/apicurio-registry/commit/11c49c343a625c56539353c3a4f719076017ab06", "message": "Extract new test utils - to be used in app and IT tests.", "committedDate": "2020-03-23T15:42:09Z", "type": "commit"}, {"oid": "11c49c343a625c56539353c3a4f719076017ab06", "url": "https://github.com/Apicurio/apicurio-registry/commit/11c49c343a625c56539353c3a4f719076017ab06", "message": "Extract new test utils - to be used in app and IT tests.", "committedDate": "2020-03-23T15:42:09Z", "type": "forcePushed"}, {"oid": "b16a12f1f3ec22d41bc0905e2568e4c47cdc80a4", "url": "https://github.com/Apicurio/apicurio-registry/commit/b16a12f1f3ec22d41bc0905e2568e4c47cdc80a4", "message": "Grab version from \"project.version\" Maven property, #347", "committedDate": "2020-03-23T18:48:56Z", "type": "commit"}]}