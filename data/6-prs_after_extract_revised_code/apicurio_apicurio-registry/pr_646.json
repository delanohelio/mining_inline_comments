{"pr_number": 646, "pr_title": "Simplify properties handling, remove retry from poll (handle with exception consumer), change KeyValue store lookup", "pr_createdAt": "2020-06-22T12:43:20Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/646", "timeline": [{"oid": "086c4e412dc42a9ac60f88728d92c51ff9df78cb", "url": "https://github.com/Apicurio/apicurio-registry/commit/086c4e412dc42a9ac60f88728d92c51ff9df78cb", "message": "Simplify Kafka container and properties.", "committedDate": "2020-06-22T12:36:00Z", "type": "commit"}, {"oid": "6977411e8a822cec573e84dceacb5267a8fc25f7", "url": "https://github.com/Apicurio/apicurio-registry/commit/6977411e8a822cec573e84dceacb5267a8fc25f7", "message": "Fix store lookup.", "committedDate": "2020-06-22T12:36:00Z", "type": "commit"}, {"oid": "36a2dc768650550f4e3bb474d3306457946f8cf9", "url": "https://github.com/Apicurio/apicurio-registry/commit/36a2dc768650550f4e3bb474d3306457946f8cf9", "message": "Use Quarkus 1.5.1.Final", "committedDate": "2020-06-22T12:36:00Z", "type": "commit"}, {"oid": "c4da634882804383f270a20f643f48a6b5d529f2", "url": "https://github.com/Apicurio/apicurio-registry/commit/c4da634882804383f270a20f643f48a6b5d529f2", "message": "Use concurrent set.", "committedDate": "2020-06-22T14:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NDA0Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/646#discussion_r444064042", "bodyText": "Maybe extract a method here could be a good idea.", "author": "carlesarnal", "createdAt": "2020-06-23T08:47:53Z", "path": "utils/kafka/src/main/java/io/apicurio/registry/utils/kafka/ConsumerContainer.java", "diffHunk": "@@ -132,42 +147,46 @@ public ConsumerContainer(\n \n     private void consumerLoop() {\n         boolean waitingForSubscriptionOrAssignment = false;\n-        Map<TopicPartition, Long> activeTopics = idlePingConsumer == null ? null : new HashMap<>();\n+        Map<TopicPartition, Long> activeTopics = idlePingHandler == null ? null : new HashMap<>();\n         try (KafkaConsumer<K, V> consumer = new KafkaConsumer<>(consumerProperties, keyDeserializer, valueDeserializer)) {\n-            while (!stopping) {\n-                CompletableFuture<Consumer<K, V>> task = waitingForSubscriptionOrAssignment\n-                                                         ? tasks.take()\n-                                                         : tasks.poll();\n+            while (!closed) {\n+                CompletableFuture<Consumer<K, V>> task;\n+                boolean interrupted = false;\n+                try {\n+                    task = waitingForSubscriptionOrAssignment ? tasks.take() : tasks.poll();\n+                } catch (InterruptedException e) {\n+                    log.warn(\"Consumer thread interrupted\", e);\n+                    task = null;\n+                    interrupted = true;\n+                }\n                 if (task != null) {\n                     task.complete(consumer);\n                     if (waitingForSubscriptionOrAssignment) {\n                         waitingForSubscriptionOrAssignment = consumer.subscription().isEmpty() &&\n-                                                             consumer.assignment().isEmpty();\n+                                consumer.assignment().isEmpty();\n                     }\n-                } else {\n+                } else if (!interrupted) {\n                     assert !waitingForSubscriptionOrAssignment;\n \n-                    boolean[] flag = new boolean[1];\n-                    ConsumerRecords<K, V> records = consumeRetryable(null, r -> {\n-                        try {\n-                            return consumer.poll(consumerPollTimeout);\n-                        } catch (IllegalStateException e) { // thrown when there's no subscription or assignment\n-                            log.info(\"{} - will wait\", e.getMessage());\n-                            flag[0] = true;\n-                            return null;\n-                        }\n-                    }, consumer);\n-                    waitingForSubscriptionOrAssignment = flag[0];\n+                    ConsumerRecords<K, V> records = null;\n+                    try {", "originalCommit": "c4da634882804383f270a20f643f48a6b5d529f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e72fa1ae26ceae7753f89966ff88707cba98a7af", "url": "https://github.com/Apicurio/apicurio-registry/commit/e72fa1ae26ceae7753f89966ff88707cba98a7af", "message": "Update pom.xml", "committedDate": "2020-06-23T19:23:25Z", "type": "commit"}, {"oid": "4593daeb4f60950b8b436c9fa3686c1753f62fb9", "url": "https://github.com/Apicurio/apicurio-registry/commit/4593daeb4f60950b8b436c9fa3686c1753f62fb9", "message": "Merge branch 'master' into cont_props_1", "committedDate": "2020-06-23T19:29:48Z", "type": "commit"}, {"oid": "78decc79df6f72b149202c27ccd46fb7d578dca6", "url": "https://github.com/Apicurio/apicurio-registry/commit/78decc79df6f72b149202c27ccd46fb7d578dca6", "message": "Merge branch 'master' into cont_props_1", "committedDate": "2020-06-25T13:29:27Z", "type": "commit"}]}