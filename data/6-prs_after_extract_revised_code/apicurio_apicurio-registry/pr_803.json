{"pr_number": 803, "pr_title": "Add default global rules supplied via env vars", "pr_createdAt": "2020-09-03T20:19:58Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/803", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483613275", "bodyText": "If the same rule is configured in both places, won't it show up twice in the list?", "author": "EricWittmann", "createdAt": "2020-09-04T13:24:46Z", "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -55,12 +65,19 @@\n     @Current\n     RegistryStorage storage;\n \n+    @Inject\n+    RulesProperties rulesProperties;\n+\n     /**\n      * @see io.apicurio.registry.rest.RulesResource#listGlobalRules()\n      */\n     @Override\n     public List<RuleType> listGlobalRules() {\n-        return storage.getGlobalRules();\n+        List<RuleType> rules = storage.getGlobalRules();\n+        List<RuleType> defaultRules = rulesProperties.getDefaultGlobalRules(rules);\n+        return Stream.concat(rules.stream(), defaultRules.stream())\n+            .sorted()\n+            .collect(Collectors.toList());", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTIzOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579238", "bodyText": "getDefaultGlobalRules() takes a list of RuleType enums that will be filtered out of the returned list. So this concatenation of the 2 lists will only include the global rules that are in storage plus any default global rules that aren't in the list from storage.\nI have renamed getDefaultGlobalRules() to getFilteredDefaultGlobalRules() in the latest commit to hopefully make it clearer that it's (potentially) a sub-list that is returned.", "author": "ajborley", "createdAt": "2020-09-07T22:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNDE5Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485014192", "bodyText": "Ah yes - that is the part I missed.  I didn't notice that it was passing in the rules.", "author": "EricWittmann", "createdAt": "2020-09-08T15:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java b/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\nindex 36ca8c74..cb55344e 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\n\n@@ -74,7 +75,7 @@ public class RulesResourceImpl implements RulesResource {\n     @Override\n     public List<RuleType> listGlobalRules() {\n         List<RuleType> rules = storage.getGlobalRules();\n-        List<RuleType> defaultRules = rulesProperties.getDefaultGlobalRules(rules);\n+        List<RuleType> defaultRules = rulesProperties.getFilteredDefaultGlobalRules(rules);\n         return Stream.concat(rules.stream(), defaultRules.stream())\n             .sorted()\n             .collect(Collectors.toList());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNDY2NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483614665", "bodyText": "But if the global rule does exist then the API responds with a 20x (success) response without having done anything.  Do we need a new response for that?  Some sort of HTTP conflict response?", "author": "EricWittmann", "createdAt": "2020-09-04T13:27:18Z", "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -113,7 +149,15 @@ public Rule updateGlobalRuleConfig(RuleType rule, Rule data) {\n      */\n     @Override\n     public void deleteGlobalRule(RuleType rule) {\n-        storage.deleteGlobalRule(rule);\n+        try {\n+            storage.deleteGlobalRule(rule);\n+        } catch (RuleNotFoundException ruleNotFoundException) {\n+            // This global rule doesn't exist in storage - if the rule also does not exist in\n+            // the default global rules, throw the RuleNotFoundException\n+            if (rulesProperties.getDefaultGlobalRuleConfiguration(rule) == null) {\n+                throw ruleNotFoundException;\n+            }", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI1Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579253", "bodyText": "Good point - I have updated this to throw a new exception type (DefaultRuleDeletionException) and return a 409 Conflict response.", "author": "ajborley", "createdAt": "2020-09-07T22:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNDY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java b/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\nindex 36ca8c74..cb55344e 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java\n\n@@ -152,9 +153,12 @@ public class RulesResourceImpl implements RulesResource {\n         try {\n             storage.deleteGlobalRule(rule);\n         } catch (RuleNotFoundException ruleNotFoundException) {\n-            // This global rule doesn't exist in storage - if the rule also does not exist in\n-            // the default global rules, throw the RuleNotFoundException\n-            if (rulesProperties.getDefaultGlobalRuleConfiguration(rule) == null) {\n+            // This global rule doesn't exist in storage - if the rule exists in\n+            // the default global rules, return a DefaultRuleDeletionException.\n+            // Otherwise, return the RuleNotFoundException\n+            if (rulesProperties.isDefaultGlobalRuleConfigured(rule)) {\n+                throw new DefaultRuleDeletionException(rule);\n+            } else {\n                 throw ruleNotFoundException;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxODU3Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483618573", "bodyText": "I think this should remain - if there are no rules to apply we want to skip the UPDATE section below.", "author": "EricWittmann", "createdAt": "2020-09-04T13:34:07Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI3NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579275", "bodyText": "Good spot, have put it back!", "author": "ajborley", "createdAt": "2020-09-07T22:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxODU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 32ad6e47..0976165d 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -55,41 +56,51 @@ public class RulesServiceImpl implements RulesService {\n      */\n     @Override\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\n-        boolean useGlobalRules = false;\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\n         @SuppressWarnings(\"unchecked\")\n         List<RuleType> rules = Collections.EMPTY_LIST;\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\n             rules = storage.getArtifactRules(artifactId);\n         }\n-        if (rules.isEmpty()) {\n-            rules = storage.getGlobalRules();\n+        ContentHandle currentArtifactContent = null;\n+        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n+            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n+            currentArtifactContent = currentArtifact.getContent();\n+        }\n+\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\n+    }\n+\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\n+\n+        boolean useGlobalRules = false;\n+        if (artifactRules.isEmpty()) {\n+            artifactRules = storage.getGlobalRules();\n             useGlobalRules = true;\n         }\n \n-        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\n-        if (!defaultGlobalRules.isEmpty()) {\n-            // We have default global rules as well as rules from storage, so use the concatenated list\n-            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\n                 .collect(Collectors.toList());\n         }\n \n-        ContentHandle currentArtifactContent = null;\n-        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n-            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n-            currentArtifactContent = currentArtifact.getContent();\n+        if (artifactRules.isEmpty()) {\n+            return;\n         }\n-        for (RuleType ruleType : rules) {\n+\n+        for (RuleType ruleType : artifactRules) {\n             RuleConfigurationDto configurationDto;\n-            if (defaultGlobalRules.contains(ruleType)) {\n+            if (filteredDefaultGlobalRules.contains(ruleType)) {\n+                // This ruleType came from the default global rules with the rules from storage rules, so\n+                // this rule is only in the default global rules.\n                 configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n             } else {\n+                // This ruleType came from the storage rules\n                 configurationDto = useGlobalRules ? storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\n             }\n-            RuleExecutor executor = factory.createExecutor(ruleType);\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\n-                                                  currentArtifactContent, artifactContent);\n-            executor.execute(context);\n+            applyRule(artifactId, artifactType, currentArtifactContent, updatedArtifactContent, ruleType, configurationDto.getConfiguration());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNDU1OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483624558", "bodyText": "This could be me misunderstanding how concat() works, but won't this be a problem if the same rule exists in both?  We don't want to run the rules twice.  But maybe concat de-dupes the items in the stream?", "author": "EricWittmann", "createdAt": "2020-09-04T13:44:23Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI4NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579284", "bodyText": "This is down to my badly-named method again. Hopefully it's clearer now - in this case defaultGlobalRules only contains configured rules that are not found in the rules from storage.", "author": "ajborley", "createdAt": "2020-09-07T22:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 32ad6e47..0976165d 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -55,41 +56,51 @@ public class RulesServiceImpl implements RulesService {\n      */\n     @Override\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\n-        boolean useGlobalRules = false;\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\n         @SuppressWarnings(\"unchecked\")\n         List<RuleType> rules = Collections.EMPTY_LIST;\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\n             rules = storage.getArtifactRules(artifactId);\n         }\n-        if (rules.isEmpty()) {\n-            rules = storage.getGlobalRules();\n+        ContentHandle currentArtifactContent = null;\n+        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n+            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n+            currentArtifactContent = currentArtifact.getContent();\n+        }\n+\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\n+    }\n+\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\n+\n+        boolean useGlobalRules = false;\n+        if (artifactRules.isEmpty()) {\n+            artifactRules = storage.getGlobalRules();\n             useGlobalRules = true;\n         }\n \n-        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\n-        if (!defaultGlobalRules.isEmpty()) {\n-            // We have default global rules as well as rules from storage, so use the concatenated list\n-            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\n                 .collect(Collectors.toList());\n         }\n \n-        ContentHandle currentArtifactContent = null;\n-        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n-            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n-            currentArtifactContent = currentArtifact.getContent();\n+        if (artifactRules.isEmpty()) {\n+            return;\n         }\n-        for (RuleType ruleType : rules) {\n+\n+        for (RuleType ruleType : artifactRules) {\n             RuleConfigurationDto configurationDto;\n-            if (defaultGlobalRules.contains(ruleType)) {\n+            if (filteredDefaultGlobalRules.contains(ruleType)) {\n+                // This ruleType came from the default global rules with the rules from storage rules, so\n+                // this rule is only in the default global rules.\n                 configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n             } else {\n+                // This ruleType came from the storage rules\n                 configurationDto = useGlobalRules ? storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\n             }\n-            RuleExecutor executor = factory.createExecutor(ruleType);\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\n-                                                  currentArtifactContent, artifactContent);\n-            executor.execute(context);\n+            applyRule(artifactId, artifactType, currentArtifactContent, updatedArtifactContent, ruleType, configurationDto.getConfiguration());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNTcwNQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483625705", "bodyText": "Do we want the default rules to take precedent over configured rules?  Probably not?", "author": "EricWittmann", "createdAt": "2020-09-04T13:46:15Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n         }\r\n+\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n         for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI5Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579292", "bodyText": "As defaultGlobalRules only contains rules that are not found in the rules from storage, then we know to retrieve the rule configuration from the default global rules here. Otherwise the rule must be from storage, so we get the configuration from storage.", "author": "ajborley", "createdAt": "2020-09-07T22:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNTcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 32ad6e47..0976165d 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -55,41 +56,51 @@ public class RulesServiceImpl implements RulesService {\n      */\n     @Override\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\n-        boolean useGlobalRules = false;\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\n         @SuppressWarnings(\"unchecked\")\n         List<RuleType> rules = Collections.EMPTY_LIST;\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\n             rules = storage.getArtifactRules(artifactId);\n         }\n-        if (rules.isEmpty()) {\n-            rules = storage.getGlobalRules();\n+        ContentHandle currentArtifactContent = null;\n+        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n+            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n+            currentArtifactContent = currentArtifact.getContent();\n+        }\n+\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\n+    }\n+\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\n+\n+        boolean useGlobalRules = false;\n+        if (artifactRules.isEmpty()) {\n+            artifactRules = storage.getGlobalRules();\n             useGlobalRules = true;\n         }\n \n-        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\n-        if (!defaultGlobalRules.isEmpty()) {\n-            // We have default global rules as well as rules from storage, so use the concatenated list\n-            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\n                 .collect(Collectors.toList());\n         }\n \n-        ContentHandle currentArtifactContent = null;\n-        if (ruleApplicationType == RuleApplicationType.UPDATE) {\n-            StoredArtifact currentArtifact = storage.getArtifact(artifactId);\n-            currentArtifactContent = currentArtifact.getContent();\n+        if (artifactRules.isEmpty()) {\n+            return;\n         }\n-        for (RuleType ruleType : rules) {\n+\n+        for (RuleType ruleType : artifactRules) {\n             RuleConfigurationDto configurationDto;\n-            if (defaultGlobalRules.contains(ruleType)) {\n+            if (filteredDefaultGlobalRules.contains(ruleType)) {\n+                // This ruleType came from the default global rules with the rules from storage rules, so\n+                // this rule is only in the default global rules.\n                 configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n             } else {\n+                // This ruleType came from the storage rules\n                 configurationDto = useGlobalRules ? storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\n             }\n-            RuleExecutor executor = factory.createExecutor(ruleType);\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\n-                                                  currentArtifactContent, artifactContent);\n-            executor.execute(context);\n+            applyRule(artifactId, artifactType, currentArtifactContent, updatedArtifactContent, ruleType, configurationDto.getConfiguration());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyODkzNw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483628937", "bodyText": "While you're in here, can you rename this method to applyRules since I believe it applies all rules not just one?  IMO this was not properly named originally.", "author": "EricWittmann", "createdAt": "2020-09-04T13:51:48Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTMwMw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579303", "bodyText": "Done \ud83d\udc4d", "author": "ajborley", "createdAt": "2020-09-07T22:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyODkzNw=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 32ad6e47..0976165d 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -125,33 +136,13 @@ public class RulesServiceImpl implements RulesService {\n         executor.execute(context);\n     }\n \n-\n+    /**\n+     * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, long, io.apicurio.registry.types.ArtifactType, ContentHandle)\n+     */\n     @Override\n-    public void applyRule(String artifactId, long artifactVersion, ArtifactType artifactType, ContentHandle updatedContent)\n+    public void applyRules(String artifactId, long artifactVersion, ArtifactType artifactType, ContentHandle updatedContent)\n             throws RuleViolationException {\n         StoredArtifact versionContent = storage.getArtifactVersion(artifactId, artifactVersion);\n-        // Get the rules for this artifact\n-\n-        List<RuleType> globalRules = storage.getGlobalRules();\n-        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(globalRules);\n-        if (!defaultGlobalRules.isEmpty()) {\n-            // We have default global rules as well as rules from storage, so use the concatenated list\n-            globalRules = Stream.concat(\n-                globalRules.stream(),\n-                defaultGlobalRules.stream()).collect(Collectors.toList());\n-        }\n-        for (RuleType ruleType : globalRules) {\n-            RuleConfigurationDto configurationDto;\n-            if (defaultGlobalRules.contains(ruleType)) {\n-                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n-            } else {\n-                configurationDto = storage.getGlobalRule(ruleType);\n-            }\n-            applyRule(artifactId, artifactType, versionContent.getContent(), updatedContent, ruleType, configurationDto.getConfiguration());\n-        }\n-        for (RuleType ruleType : storage.getArtifactRules(artifactId)) {\n-            RuleConfigurationDto configurationDto = storage.getArtifactRule(artifactId, ruleType);\n-            applyRule(artifactId, artifactType, versionContent.getContent(), updatedContent, ruleType, configurationDto.getConfiguration());\n-        }\n+        applyGlobalAndArtifactRules(artifactId, artifactType, versionContent.getContent(), updatedContent, storage.getArtifactRules(artifactId));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyOTI3Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483629277", "bodyText": "Opportunity to share logic with the other applyRules impl?", "author": "EricWittmann", "createdAt": "2020-09-04T13:52:21Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r\n         StoredArtifact versionContent = storage.getArtifactVersion(artifactId, artifactVersion);\r\n         // Get the rules for this artifact\r\n-        for (RuleType ruleType : storage.getGlobalRules()) {\r\n-            RuleConfigurationDto configurationDto = storage.getGlobalRule(ruleType);\r\n+\r\n+        List<RuleType> globalRules = storage.getGlobalRules();\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(globalRules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            globalRules = Stream.concat(\r\n+                globalRules.stream(),\r\n+                defaultGlobalRules.stream()).collect(Collectors.toList());\r\n+        }\r\n+        for (RuleType ruleType : globalRules) {\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r\n+                configurationDto = storage.getGlobalRule(ruleType);\r\n+            }\r", "originalCommit": "0ea000da256127f624a9105c69abe6af6746f1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTMyMA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579320", "bodyText": "Good idea - have done some refactoring.", "author": "ajborley", "createdAt": "2020-09-07T22:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyOTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 32ad6e47..0976165d 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -125,33 +136,13 @@ public class RulesServiceImpl implements RulesService {\n         executor.execute(context);\n     }\n \n-\n+    /**\n+     * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, long, io.apicurio.registry.types.ArtifactType, ContentHandle)\n+     */\n     @Override\n-    public void applyRule(String artifactId, long artifactVersion, ArtifactType artifactType, ContentHandle updatedContent)\n+    public void applyRules(String artifactId, long artifactVersion, ArtifactType artifactType, ContentHandle updatedContent)\n             throws RuleViolationException {\n         StoredArtifact versionContent = storage.getArtifactVersion(artifactId, artifactVersion);\n-        // Get the rules for this artifact\n-\n-        List<RuleType> globalRules = storage.getGlobalRules();\n-        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(globalRules);\n-        if (!defaultGlobalRules.isEmpty()) {\n-            // We have default global rules as well as rules from storage, so use the concatenated list\n-            globalRules = Stream.concat(\n-                globalRules.stream(),\n-                defaultGlobalRules.stream()).collect(Collectors.toList());\n-        }\n-        for (RuleType ruleType : globalRules) {\n-            RuleConfigurationDto configurationDto;\n-            if (defaultGlobalRules.contains(ruleType)) {\n-                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n-            } else {\n-                configurationDto = storage.getGlobalRule(ruleType);\n-            }\n-            applyRule(artifactId, artifactType, versionContent.getContent(), updatedContent, ruleType, configurationDto.getConfiguration());\n-        }\n-        for (RuleType ruleType : storage.getArtifactRules(artifactId)) {\n-            RuleConfigurationDto configurationDto = storage.getArtifactRule(artifactId, ruleType);\n-            applyRule(artifactId, artifactType, versionContent.getContent(), updatedContent, ruleType, configurationDto.getConfiguration());\n-        }\n+        applyGlobalAndArtifactRules(artifactId, artifactType, versionContent.getContent(), updatedContent, storage.getArtifactRules(artifactId));\n     }\n }\n"}}, {"oid": "ee84fab45d3acf68111bac813f9dba7ccdd874cf", "url": "https://github.com/Apicurio/apicurio-registry/commit/ee84fab45d3acf68111bac813f9dba7ccdd874cf", "message": "Address review comments\n\n - Refactor code in RulesServiceImpl\n - Rename RulesProperties.getFilteredDefaultGlobalRules() method for\nclarity.\n - Add DefaultRuleDeletionException, thrown when attempting to delete a\ndefault global rule.\n - Rename version-specific RulesService.applyRule to applyRules.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-07T22:38:03Z", "type": "forcePushed"}, {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000", "url": "https://github.com/Apicurio/apicurio-registry/commit/70851ca7ae69d185e6a4ce795e7869c9209fe000", "message": "Add tests for default global rules\n\n - This commit uses a new implementation of the QuarkusTestProfile\ninterface to set a default global rule via configuration overrides. This\nallows the default global rule functionality to be tested in the new\ntest class.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-08T15:19:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485768058", "bodyText": "I think this should be wrapped in a check for useGlobalRules.  Basically, if there are rules defined at the artifact level, we always use those - we never merge the global rules (configured or default) with the artifact rules.", "author": "EricWittmann", "createdAt": "2020-09-09T16:48:14Z", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "originalCommit": "70851ca7ae69d185e6a4ce795e7869c9209fe000", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MDI1Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485770253", "bodyText": "The logic is that configured artifact rules always override globals... the idea was that the user needs a way to say \"enable validation but not compatibility\" even when the compatibility rule has been configured globally.  However, now that I write this out, there is no way for the user to say \"disable all rules\" at the artifact level, because that would look the same as \"no artifact rule configuration exists\".  :( :(", "author": "EricWittmann", "createdAt": "2020-09-09T16:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MjQ5OA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485772498", "bodyText": "I'm open to solutions. :)", "author": "EricWittmann", "createdAt": "2020-09-09T16:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MjY4Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485772682", "bodyText": "Ping @Apicurio/developers", "author": "EricWittmann", "createdAt": "2020-09-09T16:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NzQ3Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r486287472", "bodyText": "The Validity rule can be given a NONE value - if we add a NONE for the Compatibility rule (and handle it in the checking code) then a user could override any global rules for a specific artifact. Does that work?\nThanks for clarifying the precedence of rules - I have refactored that code to hopefully clarify things.\nStill working on why the tests are failing..", "author": "ajborley", "createdAt": "2020-09-10T12:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3OTk4MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r486379981", "bodyText": "Yeah I think using the NONE configuration option is the only solution I can think of as well.  I'll open a ticket to add that option to the compat rule.", "author": "EricWittmann", "createdAt": "2020-09-10T14:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b092bee745d9abb12ff44483ee76d44442b89fed", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\nindex 0976165d..df91ab5b 100644\n--- a/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java\n\n@@ -73,34 +73,26 @@ public class RulesServiceImpl implements RulesService {\n \n     private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\n \n-        boolean useGlobalRules = false;\n-        if (artifactRules.isEmpty()) {\n-            artifactRules = storage.getGlobalRules();\n-            useGlobalRules = true;\n-        }\n+        Map<RuleType, RuleConfigurationDto> globalOrArtifactRulesMap = artifactRules.stream()\n+            .collect(Collectors.toMap(ruleType -> ruleType, ruleType -> storage.getArtifactRule(artifactId, ruleType)));\n+\n+        if (globalOrArtifactRulesMap.isEmpty()) {\n+            List<RuleType> globalRules = storage.getGlobalRules();\n+            globalOrArtifactRulesMap = globalRules.stream()\n+                .collect(Collectors.toMap(ruleType -> ruleType, storage::getGlobalRule));\n \n-        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\n-        if (!filteredDefaultGlobalRules.isEmpty()) {\n-            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\n-            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\n-                .collect(Collectors.toList());\n+            // Add any default global rules to the map (after filtering out any global rules from storage)\n+            Map<RuleType, RuleConfigurationDto>  filteredDefaultGlobalRulesMap = rulesProperties.getFilteredDefaultGlobalRules(globalRules).stream()\n+                .collect(Collectors.toMap(ruleType -> ruleType, rulesProperties::getDefaultGlobalRuleConfiguration));\n+            globalOrArtifactRulesMap.putAll(filteredDefaultGlobalRulesMap);\n         }\n \n-        if (artifactRules.isEmpty()) {\n+        if (globalOrArtifactRulesMap.isEmpty()) {\n             return;\n         }\n \n-        for (RuleType ruleType : artifactRules) {\n-            RuleConfigurationDto configurationDto;\n-            if (filteredDefaultGlobalRules.contains(ruleType)) {\n-                // This ruleType came from the default global rules with the rules from storage rules, so\n-                // this rule is only in the default global rules.\n-                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\n-            } else {\n-                // This ruleType came from the storage rules\n-                configurationDto = useGlobalRules ? storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\n-            }\n-            applyRule(artifactId, artifactType, currentArtifactContent, updatedArtifactContent, ruleType, configurationDto.getConfiguration());\n+        for (RuleType ruleType : globalOrArtifactRulesMap.keySet()) {\n+            applyRule(artifactId, artifactType, currentArtifactContent, updatedArtifactContent, ruleType, globalOrArtifactRulesMap.get(ruleType).getConfiguration());\n         }\n     }\n \n"}}, {"oid": "b092bee745d9abb12ff44483ee76d44442b89fed", "url": "https://github.com/Apicurio/apicurio-registry/commit/b092bee745d9abb12ff44483ee76d44442b89fed", "message": "Refactor to ensure separation of artifact and global rules\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-10T12:12:42Z", "type": "forcePushed"}, {"oid": "b0ae5b5909fdd4c14414a656ab620cb5f2049740", "url": "https://github.com/Apicurio/apicurio-registry/commit/b0ae5b5909fdd4c14414a656ab620cb5f2049740", "message": "Add default global rules supplied via env vars\n\n - This commit adds the ability to supply default global rules on\nregistry start-up via environment variables. In the server config these\nare defined as:\n    - `%{profile}.registry.rules.global.compatibility`\n    - `%{profile}.registry.rules.global.validity`\n and are set with the configuration value for each rule (e.g. `FULL` or\n`BACKWARDS`).\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-10T21:54:24Z", "type": "commit"}, {"oid": "50195b0c8b9569eef703b669e172c87d0481631d", "url": "https://github.com/Apicurio/apicurio-registry/commit/50195b0c8b9569eef703b669e172c87d0481631d", "message": "Address review comments\n\n - Refactor code in RulesServiceImpl\n - Rename RulesProperties.getFilteredDefaultGlobalRules() method for\nclarity.\n - Add DefaultRuleDeletionException, thrown when attempting to delete a\ndefault global rule.\n - Rename version-specific RulesService.applyRule to applyRules.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-10T21:54:24Z", "type": "commit"}, {"oid": "9da006f70ce3bac7dc1243c47599fc7edd5d694a", "url": "https://github.com/Apicurio/apicurio-registry/commit/9da006f70ce3bac7dc1243c47599fc7edd5d694a", "message": "Add tests for default global rules\n\n - This commit uses a new implementation of the QuarkusTestProfile\ninterface to set a default global rule via configuration overrides. This\nallows the default global rule functionality to be tested in the new\ntest class.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-10T21:54:24Z", "type": "commit"}, {"oid": "c16bbe0d945ff47ab007817481bb2baee2c8eb5e", "url": "https://github.com/Apicurio/apicurio-registry/commit/c16bbe0d945ff47ab007817481bb2baee2c8eb5e", "message": "Refactor to ensure separation of artifact and global rules\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-09-10T21:54:24Z", "type": "commit"}, {"oid": "d1d66933d44eea56195c47471231b4a0419e91b8", "url": "https://github.com/Apicurio/apicurio-registry/commit/d1d66933d44eea56195c47471231b4a0419e91b8", "message": "Revert \"Add tests for default global rules\"\n\nThis reverts commit 9da006f70ce3bac7dc1243c47599fc7edd5d694a.", "committedDate": "2020-09-10T21:57:28Z", "type": "commit"}, {"oid": "d1d66933d44eea56195c47471231b4a0419e91b8", "url": "https://github.com/Apicurio/apicurio-registry/commit/d1d66933d44eea56195c47471231b4a0419e91b8", "message": "Revert \"Add tests for default global rules\"\n\nThis reverts commit 9da006f70ce3bac7dc1243c47599fc7edd5d694a.", "committedDate": "2020-09-10T21:57:28Z", "type": "forcePushed"}]}