{"pr_number": 972, "pr_title": "Apicurio Registry events", "pr_createdAt": "2020-11-02T12:07:09Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/972", "timeline": [{"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e", "url": "https://github.com/Apicurio/apicurio-registry/commit/c198622ea1721d35d325218576f85b4e7e2a6c6e", "message": "registry events - send events to kafka when using kafka storage", "committedDate": "2020-11-11T09:37:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MjM1NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521262355", "bodyText": "Is producerPproperties or producerProperties?", "author": "antonmry", "createdAt": "2020-11-11T10:30:02Z", "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;", "originalCommit": "c198622ea1721d35d325218576f85b4e7e2a6c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwMjY0Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521302643", "bodyText": "that's a typo", "author": "famartinrh", "createdAt": "2020-11-11T11:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MjM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ab5f04e16ecebd55d901a0c7e00f057614721da", "chunk": "diff --git a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\nindex 05f1e849..29e9bba4 100644\n--- a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n+++ b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n\n@@ -37,7 +37,7 @@ public class KafkaEventSink implements EventSink {\n             value = {\"registry.streams.common\", \"registry.streams.events\"},\n             empties = {\"ssl.endpoint.identification.algorithm=\"}\n     )\n-    Properties producerPproperties;\n+    Properties producerProperties;\n \n     private ProducerActions<UUID, byte[]> producer;\n     private Integer partition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDE0MQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521264141", "bodyText": "It should be Optional or Mandatory?", "author": "antonmry", "createdAt": "2020-11-11T10:33:24Z", "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;\n+\n+    private ProducerActions<UUID, byte[]> producer;\n+    private Integer partition;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic\")\n+    Optional<String> eventsTopic;", "originalCommit": "c198622ea1721d35d325218576f85b4e7e2a6c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwMzQ3OQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521303479", "bodyText": "it's optional, it's possible to do not define a topic, and of course, no events will be triggered in that case.", "author": "famartinrh", "createdAt": "2020-11-11T11:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ab5f04e16ecebd55d901a0c7e00f057614721da", "chunk": "diff --git a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\nindex 05f1e849..29e9bba4 100644\n--- a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n+++ b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n\n@@ -37,7 +37,7 @@ public class KafkaEventSink implements EventSink {\n             value = {\"registry.streams.common\", \"registry.streams.events\"},\n             empties = {\"ssl.endpoint.identification.algorithm=\"}\n     )\n-    Properties producerPproperties;\n+    Properties producerProperties;\n \n     private ProducerActions<UUID, byte[]> producer;\n     private Integer partition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521264716", "bodyText": "Where are the rest of Kafka properties defined? BOOTSTRAP_SERVERS_CONFIG, Auth, etc.", "author": "antonmry", "createdAt": "2020-11-11T10:34:18Z", "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;\n+\n+    private ProducerActions<UUID, byte[]> producer;\n+    private Integer partition;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic\")\n+    Optional<String> eventsTopic;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic-partition\")\n+    Optional<Integer> eventsTopicPartition;\n+\n+    @PostConstruct\n+    void init() {\n+        partition = eventsTopicPartition.orElse(0);\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"Kafka Sink\";\n+    }\n+\n+    @Override\n+    public boolean isConfigured() {\n+        return eventsTopic.isPresent();\n+    }\n+\n+    @Override\n+    public void handle(Message<Buffer> message) {\n+        String type = message.headers().get(\"type\");\n+\n+        log.info(\"Firing event \" + type);\n+\n+        UUID uuid = UUID.randomUUID();\n+\n+        Headers headers = new RecordHeaders();\n+        headers.add(\"ce_id\", uuid.toString().getBytes());\n+        headers.add(\"ce_specversion\", \"1.0\".getBytes());\n+        headers.add(\"ce_source\", \"apicurio-registry\".getBytes());\n+        headers.add(\"ce_type\", type.getBytes());\n+        headers.add(\"ce_time\", Instant.now().toString().getBytes());\n+        headers.add(\"content-type\", \"application/json\".getBytes());\n+\n+        getProducer()\n+            .apply(new ProducerRecord<UUID, byte[]>(\n+                    eventsTopic.get(),\n+                    partition,\n+                    uuid,\n+                    message.body().getBytes(),\n+                    headers));\n+\n+    }\n+\n+    public synchronized ProducerActions<UUID, byte[]> getProducer() {\n+        if (producer == null) {\n+            producer = new AsyncProducer<UUID, byte[]>(\n+                    producerPproperties,", "originalCommit": "c198622ea1721d35d325218576f85b4e7e2a6c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNDA4Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521304082", "bodyText": "they are picked from the main apicurio registry configuration. This means, events will be sent to the same kafka using the same connection config, authentication/authorization config as the registry is using for the storage", "author": "famartinrh", "createdAt": "2020-11-11T11:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNjEzMQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521306131", "bodyText": "That works for us but it may be a problem for someone using a different storage but they want to use Kafka to replicate schemas. I'm not sure if that's something you would like to approach in this stage. It works as it is for us", "author": "antonmry", "createdAt": "2020-11-11T11:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTcxOQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521311719", "bodyText": "great! I don't think it's necessary to add that possibility at this point. I'll prefer to wait until someone has a requirement for that.", "author": "famartinrh", "createdAt": "2020-11-11T12:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDgyNA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521554824", "bodyText": "I disagree - I think we'll definitely want the ability to send messages to Kafka even if the storage variant is e.g. SQL.", "author": "EricWittmann", "createdAt": "2020-11-11T18:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTE3Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521555172", "bodyText": "Also for many deployments that are using the Streams storage, the Kafka cluster used for registry storage may be different from the one handling registry events.", "author": "EricWittmann", "createdAt": "2020-11-11T18:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNDQ2Nw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521624467", "bodyText": "@famartinrh the original idea was send all events to the EventBus from storage and every consumer which is registered and configured can receive it and send to the destination regarding implemented technology i.e. Kafka, http, cloud event, etc.", "author": "dmvolod", "createdAt": "2020-11-11T20:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1NTg1Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r522255856", "bodyText": "ok, I reorganized things so kafka events are available for all registry variants", "author": "famartinrh", "createdAt": "2020-11-12T16:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "8ab5f04e16ecebd55d901a0c7e00f057614721da", "chunk": "diff --git a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\nindex 05f1e849..29e9bba4 100644\n--- a/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n+++ b/storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java\n\n@@ -37,7 +37,7 @@ public class KafkaEventSink implements EventSink {\n             value = {\"registry.streams.common\", \"registry.streams.events\"},\n             empties = {\"ssl.endpoint.identification.algorithm=\"}\n     )\n-    Properties producerPproperties;\n+    Properties producerProperties;\n \n     private ProducerActions<UUID, byte[]> producer;\n     private Integer partition;\n"}}, {"oid": "8ab5f04e16ecebd55d901a0c7e00f057614721da", "url": "https://github.com/Apicurio/apicurio-registry/commit/8ab5f04e16ecebd55d901a0c7e00f057614721da", "message": "fix typo", "committedDate": "2020-11-11T12:08:19Z", "type": "forcePushed"}, {"oid": "a168e30d1e0fb1f5c960bdfa85ad6f8ccdb49b06", "url": "https://github.com/Apicurio/apicurio-registry/commit/a168e30d1e0fb1f5c960bdfa85ad6f8ccdb49b06", "message": "apicurio events - first version", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "103839dd0f9066b7a5b58c57e5882381506085d7", "url": "https://github.com/Apicurio/apicurio-registry/commit/103839dd0f9066b7a5b58c57e5882381506085d7", "message": "registry events - v2 - implement events producing at storage layer level, plus using vertx event bus", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "9a57da0804e187fe66e28de9a678eb86ec519c3e", "url": "https://github.com/Apicurio/apicurio-registry/commit/9a57da0804e187fe66e28de9a678eb86ec519c3e", "message": "basic test", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "fc35371e10c2f4fda2456d3efb3c0c98678a4fd1", "url": "https://github.com/Apicurio/apicurio-registry/commit/fc35371e10c2f4fda2456d3efb3c0c98678a4fd1", "message": "registry events - send events to kafka when using kafka storage", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "02a8d896ae39b052c5fc2c38fa99f5e9c88dd01f", "url": "https://github.com/Apicurio/apicurio-registry/commit/02a8d896ae39b052c5fc2c38fa99f5e9c88dd01f", "message": "fix EventSourcedRegistryStorage", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "99377b56192d0cbf3bbe16ce00070d9d9c797271", "url": "https://github.com/Apicurio/apicurio-registry/commit/99377b56192d0cbf3bbe16ce00070d9d9c797271", "message": "fix typo", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "2a2d7e5b760affcb7158ece1e5b2a0c413969ebf", "url": "https://github.com/Apicurio/apicurio-registry/commit/2a2d7e5b760affcb7158ece1e5b2a0c413969ebf", "message": "improve structure and kafka events for everyone", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "78b9ab56dcebcfb8e08bdbe07fcd13bfb853b86f", "url": "https://github.com/Apicurio/apicurio-registry/commit/78b9ab56dcebcfb8e08bdbe07fcd13bfb853b86f", "message": "fix properties", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "url": "https://github.com/Apicurio/apicurio-registry/commit/ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "message": "improve kafka events", "committedDate": "2020-11-20T17:30:47Z", "type": "commit"}, {"oid": "ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "url": "https://github.com/Apicurio/apicurio-registry/commit/ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "message": "improve kafka events", "committedDate": "2020-11-20T17:30:47Z", "type": "forcePushed"}]}