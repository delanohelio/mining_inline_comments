{"pr_number": 975, "pr_title": "@RegistryRestClientTest tests not being executed", "pr_createdAt": "2020-11-02T15:58:49Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/975", "timeline": [{"oid": "648c4bbaae179b89b7b5febec60401132ffa24cb", "url": "https://github.com/Apicurio/apicurio-registry/commit/648c4bbaae179b89b7b5febec60401132ffa24cb", "message": "@RegistryRestClientTest tests not being executed", "committedDate": "2020-11-03T11:54:39Z", "type": "commit"}, {"oid": "e88d69726f437fd4650c13483c1ae45f25dc62cd", "url": "https://github.com/Apicurio/apicurio-registry/commit/e88d69726f437fd4650c13483c1ae45f25dc62cd", "message": "fix quarkus tests issue - argument type mismatch", "committedDate": "2020-11-03T11:54:39Z", "type": "commit"}, {"oid": "e88d69726f437fd4650c13483c1ae45f25dc62cd", "url": "https://github.com/Apicurio/apicurio-registry/commit/e88d69726f437fd4650c13483c1ae45f25dc62cd", "message": "fix quarkus tests issue - argument type mismatch", "committedDate": "2020-11-03T11:54:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2ODQ4Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/975#discussion_r516668486", "bodyText": "Can you re-use this rather than creating a new one each time?  Maybe inside LazyRegistryRestClient?", "author": "EricWittmann", "createdAt": "2020-11-03T13:34:12Z", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java", "diffHunk": "@@ -1,53 +1,35 @@\n package io.apicurio.registry.utils.tests;\n \n-import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n-\n import org.junit.jupiter.api.extension.ExtensionContext;\n import org.junit.jupiter.api.extension.ParameterContext;\n import org.junit.jupiter.api.extension.ParameterResolutionException;\n import org.junit.jupiter.api.extension.ParameterResolver;\n \n import io.apicurio.registry.client.RegistryRestClient;\n-import io.apicurio.registry.client.RegistryRestClientFactory;\n \n /**\n  * @author famartin\n  */\n public class RegistryRestClientExtension implements ParameterResolver {\n-    \n-    private static RegistryRestClient CLIENT;\n-    \n-    private static final RegistryRestClient getRestClient() {\n-        if (CLIENT == null) {\n-            CLIENT = RegistryRestClientFactory.create(TestUtils.getRegistryApiUrl());\n-        }\n-        return CLIENT;\n-    }\n-    \n+\n     @Override\n     public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n         Type type = parameterContext.getParameter().getParameterizedType();\n         if (type instanceof Class) {\n             if (type == RegistryRestClient.class) {\n                 return true;\n-            }\n-        } else if (type instanceof ParameterizedType) {\n-            ParameterizedType pt = (ParameterizedType) type;\n-            Type rawType = pt.getRawType();\n-            if (rawType == RegistryRestClient.class) {\n+            } else if (RegistryRestClient.class.isAssignableFrom((Class)type)){\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n     @Override\n     public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n-        ExtensionContext.Store store = extensionContext.getStore(ExtensionContext.Namespace.GLOBAL);\n-        return store.getOrComputeIfAbsent(\"registry_rest_client\", k -> {\n-            return getRestClient();\n-        });\n+        return new LazyRegistryRestClient(TestUtils.getRegistryApiUrl());", "originalCommit": "e88d69726f437fd4650c13483c1ae45f25dc62cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75cb1e9c08ee4257a97b9eab44b9dcec0f2e2499", "chunk": "diff --git a/utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java b/utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java\nindex 06e31920..82057b4b 100644\n--- a/utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java\n+++ b/utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java\n\n@@ -29,7 +29,10 @@ public class RegistryRestClientExtension implements ParameterResolver {\n \n     @Override\n     public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n-        return new LazyRegistryRestClient(TestUtils.getRegistryApiUrl());\n+        ExtensionContext.Store store = extensionContext.getStore(ExtensionContext.Namespace.GLOBAL);\n+        return store.getOrComputeIfAbsent(\"registry_rest_client\", k -> {\n+            return new LazyRegistryRestClient(TestUtils.getRegistryApiUrl());\n+        });\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2ODk1Mw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/975#discussion_r516668953", "bodyText": "Minor point, but I'd probably call this delegate rather than instance... unless you make this an actual singleton.", "author": "EricWittmann", "createdAt": "2020-11-03T13:34:54Z", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package io.apicurio.registry.utils.tests;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+import io.apicurio.registry.client.RegistryRestClient;\n+import io.apicurio.registry.client.RegistryRestClientFactory;\n+import io.apicurio.registry.rest.beans.ArtifactMetaData;\n+import io.apicurio.registry.rest.beans.ArtifactSearchResults;\n+import io.apicurio.registry.rest.beans.EditableMetaData;\n+import io.apicurio.registry.rest.beans.IfExistsType;\n+import io.apicurio.registry.rest.beans.Rule;\n+import io.apicurio.registry.rest.beans.SearchOver;\n+import io.apicurio.registry.rest.beans.SortOrder;\n+import io.apicurio.registry.rest.beans.UpdateState;\n+import io.apicurio.registry.rest.beans.VersionMetaData;\n+import io.apicurio.registry.rest.beans.VersionSearchResults;\n+import io.apicurio.registry.types.ArtifactType;\n+import io.apicurio.registry.types.RuleType;\n+\n+/**\n+ * @author famartin\n+ */\n+public class LazyRegistryRestClient implements RegistryRestClient {\n+\n+    private RegistryRestClient instance;\n+    private String apiUrl;\n+\n+    public LazyRegistryRestClient(String apiUrl) {\n+        this.apiUrl = apiUrl;\n+    }\n+\n+    private synchronized RegistryRestClient getInstance() {\n+        if (instance == null) {\n+            instance = RegistryRestClientFactory.create(apiUrl);\n+        }\n+        return instance;\n+    }", "originalCommit": "e88d69726f437fd4650c13483c1ae45f25dc62cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75cb1e9c08ee4257a97b9eab44b9dcec0f2e2499", "chunk": "diff --git a/utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java b/utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java\nindex 7b3a429e..031484b1 100644\n--- a/utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java\n+++ b/utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java\n\n@@ -22,188 +22,188 @@ import io.apicurio.registry.types.RuleType;\n  */\n public class LazyRegistryRestClient implements RegistryRestClient {\n \n-    private RegistryRestClient instance;\n+    private RegistryRestClient delegate;\n     private String apiUrl;\n \n     public LazyRegistryRestClient(String apiUrl) {\n         this.apiUrl = apiUrl;\n     }\n \n-    private synchronized RegistryRestClient getInstance() {\n-        if (instance == null) {\n-            instance = RegistryRestClientFactory.create(apiUrl);\n+    private synchronized RegistryRestClient getDelegate() {\n+        if (delegate == null) {\n+            delegate = RegistryRestClientFactory.create(apiUrl);\n         }\n-        return instance;\n+        return delegate;\n     }\n \n     @Override\n     public void close() throws Exception {\n-        getInstance().close();\n+        getDelegate().close();\n     }\n \n     @Override\n     public List<String> listArtifacts() {\n-        return getInstance().listArtifacts();\n+        return getDelegate().listArtifacts();\n     }\n \n     @Override\n     public ArtifactMetaData createArtifact(String artifactId, ArtifactType artifactType, IfExistsType ifExists, InputStream data) {\n-        return getInstance().createArtifact(artifactId, artifactType, ifExists, data);\n+        return getDelegate().createArtifact(artifactId, artifactType, ifExists, data);\n     }\n \n     @Override\n     public InputStream getLatestArtifact(String artifactId) {\n-        return getInstance().getLatestArtifact(artifactId);\n+        return getDelegate().getLatestArtifact(artifactId);\n     }\n \n     @Override\n     public ArtifactMetaData updateArtifact(String artifactId, ArtifactType artifactType, InputStream data) {\n-        return getInstance().updateArtifact(artifactId, artifactType, data);\n+        return getDelegate().updateArtifact(artifactId, artifactType, data);\n     }\n \n     @Override\n     public void deleteArtifact(String artifactId) {\n-        getInstance().deleteArtifact(artifactId);\n+        getDelegate().deleteArtifact(artifactId);\n     }\n \n     @Override\n     public void updateArtifactState(String artifactId, UpdateState newState) {\n-        getInstance().updateArtifactState(artifactId, newState);\n+        getDelegate().updateArtifactState(artifactId, newState);\n     }\n \n     @Override\n     public ArtifactMetaData getArtifactMetaData(String artifactId) {\n-        return getInstance().getArtifactMetaData(artifactId);\n+        return getDelegate().getArtifactMetaData(artifactId);\n     }\n \n     @Override\n     public void updateArtifactMetaData(String artifactId, EditableMetaData metaData) {\n-        getInstance().updateArtifactMetaData(artifactId, metaData);\n+        getDelegate().updateArtifactMetaData(artifactId, metaData);\n     }\n \n     @Override\n     public ArtifactMetaData getArtifactMetaDataByContent(String artifactId, InputStream data) {\n-        return getInstance().getArtifactMetaDataByContent(artifactId, data);\n+        return getDelegate().getArtifactMetaDataByContent(artifactId, data);\n     }\n \n     @Override\n     public List<Long> listArtifactVersions(String artifactId) {\n-        return getInstance().listArtifactVersions(artifactId);\n+        return getDelegate().listArtifactVersions(artifactId);\n     }\n \n     @Override\n     public VersionMetaData createArtifactVersion(String artifactId, ArtifactType artifactType, InputStream data) {\n-        return getInstance().createArtifactVersion(artifactId, artifactType, data);\n+        return getDelegate().createArtifactVersion(artifactId, artifactType, data);\n     }\n \n     @Override\n     public InputStream getArtifactVersion(String artifactId, Integer version) {\n-        return getInstance().getArtifactVersion(artifactId, version);\n+        return getDelegate().getArtifactVersion(artifactId, version);\n     }\n \n     @Override\n     public void updateArtifactVersionState(String artifactId, Integer version, UpdateState newState) {\n-        getInstance().updateArtifactVersionState(artifactId, version, newState);\n+        getDelegate().updateArtifactVersionState(artifactId, version, newState);\n     }\n \n     @Override\n     public VersionMetaData getArtifactVersionMetaData(String artifactId, Integer version) {\n-        return getInstance().getArtifactVersionMetaData(artifactId, version);\n+        return getDelegate().getArtifactVersionMetaData(artifactId, version);\n     }\n \n     @Override\n     public void updateArtifactVersionMetaData(String artifactId, Integer version, EditableMetaData metaData) {\n-        getInstance().updateArtifactVersionMetaData(artifactId, version, metaData);\n+        getDelegate().updateArtifactVersionMetaData(artifactId, version, metaData);\n     }\n \n     @Override\n     public void deleteArtifactVersionMetaData(String artifactId, Integer version) {\n-        getInstance().deleteArtifactVersionMetaData(artifactId, version);\n+        getDelegate().deleteArtifactVersionMetaData(artifactId, version);\n     }\n \n     @Override\n     public List<RuleType> listArtifactRules(String artifactId) {\n-        return getInstance().listArtifactRules(artifactId);\n+        return getDelegate().listArtifactRules(artifactId);\n     }\n \n     @Override\n     public void createArtifactRule(String artifactId, Rule ruleConfig) {\n-        getInstance().createArtifactRule(artifactId, ruleConfig);\n+        getDelegate().createArtifactRule(artifactId, ruleConfig);\n     }\n \n     @Override\n     public void deleteArtifactRules(String artifactId) {\n-        getInstance().deleteArtifactRules(artifactId);\n+        getDelegate().deleteArtifactRules(artifactId);\n     }\n \n     @Override\n     public Rule getArtifactRuleConfig(String artifactId, RuleType ruleType) {\n-        return getInstance().getArtifactRuleConfig(artifactId, ruleType);\n+        return getDelegate().getArtifactRuleConfig(artifactId, ruleType);\n     }\n \n     @Override\n     public Rule updateArtifactRuleConfig(String artifactId, RuleType ruleType, Rule ruleConfig) {\n-        return getInstance().updateArtifactRuleConfig(artifactId, ruleType, ruleConfig);\n+        return getDelegate().updateArtifactRuleConfig(artifactId, ruleType, ruleConfig);\n     }\n \n     @Override\n     public void deleteArtifactRule(String artifactId, RuleType ruleType) {\n-        getInstance().deleteArtifactRule(artifactId, ruleType);\n+        getDelegate().deleteArtifactRule(artifactId, ruleType);\n     }\n \n     @Override\n     public void testUpdateArtifact(String artifactId, ArtifactType artifactType, InputStream data) {\n-        getInstance().testUpdateArtifact(artifactId, artifactType, data);\n+        getDelegate().testUpdateArtifact(artifactId, artifactType, data);\n     }\n \n     @Override\n     public InputStream getArtifactByGlobalId(long globalId) {\n-        return getInstance().getArtifactByGlobalId(globalId);\n+        return getDelegate().getArtifactByGlobalId(globalId);\n     }\n \n     @Override\n     public ArtifactMetaData getArtifactMetaDataByGlobalId(long globalId) {\n-        return getInstance().getArtifactMetaDataByGlobalId(globalId);\n+        return getDelegate().getArtifactMetaDataByGlobalId(globalId);\n     }\n \n     @Override\n     public Rule getGlobalRuleConfig(RuleType ruleType) {\n-        return getInstance().getGlobalRuleConfig(ruleType);\n+        return getDelegate().getGlobalRuleConfig(ruleType);\n     }\n \n     @Override\n     public Rule updateGlobalRuleConfig(RuleType ruleType, Rule data) {\n-        return getInstance().updateGlobalRuleConfig(ruleType, data);\n+        return getDelegate().updateGlobalRuleConfig(ruleType, data);\n     }\n \n     @Override\n     public void deleteGlobalRule(RuleType ruleType) {\n-        getInstance().deleteGlobalRule(ruleType);\n+        getDelegate().deleteGlobalRule(ruleType);\n     }\n \n     @Override\n     public List<RuleType> listGlobalRules() {\n-        return getInstance().listGlobalRules();\n+        return getDelegate().listGlobalRules();\n     }\n \n     @Override\n     public void createGlobalRule(Rule data) {\n-        getInstance().createGlobalRule(data);\n+        getDelegate().createGlobalRule(data);\n     }\n \n     @Override\n     public void deleteAllGlobalRules() {\n-        getInstance().deleteAllGlobalRules();\n+        getDelegate().deleteAllGlobalRules();\n     }\n \n     @Override\n     public ArtifactSearchResults searchArtifacts(String search, SearchOver over, SortOrder order, Integer offset, Integer limit) {\n-        return getInstance().searchArtifacts(search, over, order, offset, limit);\n+        return getDelegate().searchArtifacts(search, over, order, offset, limit);\n     }\n \n     @Override\n     public VersionSearchResults searchVersions(String artifactId, Integer offset, Integer limit) {\n-        return getInstance().searchVersions(artifactId, offset, limit);\n+        return getDelegate().searchVersions(artifactId, offset, limit);\n     }\n \n }\n\\ No newline at end of file\n"}}, {"oid": "75cb1e9c08ee4257a97b9eab44b9dcec0f2e2499", "url": "https://github.com/Apicurio/apicurio-registry/commit/75cb1e9c08ee4257a97b9eab44b9dcec0f2e2499", "message": "minor improvements", "committedDate": "2020-11-03T13:55:18Z", "type": "commit"}]}