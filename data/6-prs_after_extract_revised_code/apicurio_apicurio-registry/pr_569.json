{"pr_number": 569, "pr_title": "Add name ordering for streams and map based storages", "pr_createdAt": "2020-05-29T17:44:01Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/569", "timeline": [{"oid": "0b5daec040f6c0ce0677b4451f226679b96eddbe", "url": "https://github.com/Apicurio/apicurio-registry/commit/0b5daec040f6c0ce0677b4451f226679b96eddbe", "message": "Add name ordering for streams and map based storages", "committedDate": "2020-05-29T17:42:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDEwNQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/569#discussion_r432650105", "bodyText": "Name could be null for either or both.", "author": "EricWittmann", "createdAt": "2020-05-29T18:01:39Z", "path": "app/src/main/java/io/apicurio/registry/util/SearchUtil.java", "diffHunk": "@@ -29,16 +29,30 @@\n  */\n public class SearchUtil {\n \n-    public static Comparator<String> comparator(SortOrder sortOrder) {\n-        return (id1, id2) -> compare(sortOrder, id1, id2);\n+    public static Comparator<ArtifactMetaDataDto> comparator(SortOrder sortOrder) {\n+\n+        final Comparator<ArtifactMetaDataDto> metaDataComparator = ((id1, id2) -> compare(sortOrder, id1, id2));\n+\n+        return metaDataComparator.thenComparing(idComparator(sortOrder));\n+    }\n+\n+    private static Comparator<ArtifactMetaDataDto> idComparator(SortOrder sortOrder) {\n+        return (artifactMetaDataDto1, artifactMetaDataDto2) -> {\n+            switch (sortOrder) {\n+                case desc:\n+                    return artifactMetaDataDto1.getId().compareTo(artifactMetaDataDto2.getId());\n+                default:\n+                    return artifactMetaDataDto2.getId().compareToIgnoreCase(artifactMetaDataDto1.getId());\n+            }\n+        };\n     }\n \n-    public static int compare(SortOrder sortOrder, String id1, String id2) {\n+    public static int compare(SortOrder sortOrder, ArtifactMetaDataDto id1, ArtifactMetaDataDto id2) {\n         switch (sortOrder) {\n             case desc:\n-                return id2.compareToIgnoreCase(id1);\n+                return id2.getName().compareToIgnoreCase(id1.getName());\n             default:\n-                return id1.compareToIgnoreCase(id2);\n+                return id1.getName().compareToIgnoreCase(id2.getName());", "originalCommit": "0b5daec040f6c0ce0677b4451f226679b96eddbe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0398522c05e9d5a3f0d634013b2fc5d15cda62f2", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/util/SearchUtil.java b/app/src/main/java/io/apicurio/registry/util/SearchUtil.java\nindex d8687cca..6294213d 100644\n--- a/app/src/main/java/io/apicurio/registry/util/SearchUtil.java\n+++ b/app/src/main/java/io/apicurio/registry/util/SearchUtil.java\n\n@@ -31,23 +31,28 @@ public class SearchUtil {\n \n     public static Comparator<ArtifactMetaDataDto> comparator(SortOrder sortOrder) {\n \n-        final Comparator<ArtifactMetaDataDto> metaDataComparator = ((id1, id2) -> compare(sortOrder, id1, id2));\n+        return (id1, id2) -> compare(sortOrder, id1, id2);\n+    }\n+\n+    public static int compare(SortOrder sortOrder, ArtifactMetaDataDto metaDataDto1, ArtifactMetaDataDto metaDataDto2) {\n \n-        return metaDataComparator.thenComparing(idComparator(sortOrder));\n+        if ((metaDataDto1.getName() != null) && (metaDataDto2.getName() != null)) {\n+            return compareName(sortOrder, metaDataDto1, metaDataDto2);\n+        } else {\n+            return compareId(sortOrder, metaDataDto1, metaDataDto2);\n+        }\n     }\n \n-    private static Comparator<ArtifactMetaDataDto> idComparator(SortOrder sortOrder) {\n-        return (artifactMetaDataDto1, artifactMetaDataDto2) -> {\n+    private static int  compareId(SortOrder sortOrder, ArtifactMetaDataDto metaDataDto1, ArtifactMetaDataDto metaDataDto2) {\n             switch (sortOrder) {\n                 case desc:\n-                    return artifactMetaDataDto1.getId().compareTo(artifactMetaDataDto2.getId());\n+                    return metaDataDto1.getId().compareTo(metaDataDto2.getId());\n                 default:\n-                    return artifactMetaDataDto2.getId().compareToIgnoreCase(artifactMetaDataDto1.getId());\n+                    return metaDataDto2.getId().compareToIgnoreCase(metaDataDto1.getId());\n             }\n-        };\n     }\n \n-    public static int compare(SortOrder sortOrder, ArtifactMetaDataDto id1, ArtifactMetaDataDto id2) {\n+    private static int compareName(SortOrder sortOrder, ArtifactMetaDataDto id1, ArtifactMetaDataDto id2) {\n         switch (sortOrder) {\n             case desc:\n                 return id2.getName().compareToIgnoreCase(id1.getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDQ4NQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/569#discussion_r432650485", "bodyText": "Also maybe throw in an artifact with no name.  In that case the ID should be used as the name.", "author": "EricWittmann", "createdAt": "2020-05-29T18:02:33Z", "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -188,6 +188,61 @@ public void testLabels(Supplier<RegistryService> supplier) throws Exception {\n         }\n     }\n \n+    @RegistryServiceTest\n+    void nameOrderingTest(Supplier<RegistryService> supplier) throws Exception {\n+\n+        final String firstArtifactId = generateArtifactId();\n+        final String secondArtifactId = generateArtifactId();\n+        RegistryService client = supplier.get();\n+\n+        try {\n+\n+            // warm-up\n+            client.listArtifacts();\n+\n+            String name = \"aaaTestorder\" + ThreadLocalRandom.current().nextInt(1000000);\n+            ByteArrayInputStream artifactData = new ByteArrayInputStream(\n+                    (\"{\\\"type\\\":\\\"record\\\",\\\"title\\\":\\\"\" + name + \"\\\",\\\"fields\\\":[{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"string\\\"}]}\")\n+                            .getBytes(StandardCharsets.UTF_8));\n+\n+            CompletionStage<ArtifactMetaData> cs = client.createArtifact(ArtifactType.JSON, firstArtifactId, null, artifactData);\n+            long id = ConcurrentUtil.result(cs).getGlobalId();\n+\n+            retry(() -> {\n+                ArtifactMetaData artifactMetaData = client.getArtifactMetaDataByGlobalId(id);\n+                Assertions.assertNotNull(artifactMetaData);\n+            });\n+\n+            String secondName = \"bbbTestorder\" + ThreadLocalRandom.current().nextInt(1000000);\n+            ByteArrayInputStream secondData = new ByteArrayInputStream(\n+                    (\"{\\\"type\\\":\\\"record\\\",\\\"title\\\":\\\"\" + secondName + \"\\\",\\\"fields\\\":[{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"string\\\"}]}\")\n+                            .getBytes(StandardCharsets.UTF_8));\n+\n+            CompletionStage<ArtifactMetaData> secondCs = client.createArtifact(ArtifactType.JSON, secondArtifactId, null, secondData);\n+            long secondId = ConcurrentUtil.result(secondCs).getGlobalId();\n \n+            retry(() -> {\n+                ArtifactMetaData artifactMetaData = client.getArtifactMetaDataByGlobalId(secondId);\n+                Assertions.assertNotNull(artifactMetaData);\n+            });", "originalCommit": "0b5daec040f6c0ce0677b4451f226679b96eddbe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "906d3c3da6d75f5523ac2bc2e10575d4737b11f7", "url": "https://github.com/Apicurio/apicurio-registry/commit/906d3c3da6d75f5523ac2bc2e10575d4737b11f7", "message": "Merge branch 'master' into artifact-search-ordering-by-name-485", "committedDate": "2020-05-29T18:04:08Z", "type": "commit"}, {"oid": "0398522c05e9d5a3f0d634013b2fc5d15cda62f2", "url": "https://github.com/Apicurio/apicurio-registry/commit/0398522c05e9d5a3f0d634013b2fc5d15cda62f2", "message": "Null check for name comparator", "committedDate": "2020-05-30T09:46:19Z", "type": "commit"}, {"oid": "0398522c05e9d5a3f0d634013b2fc5d15cda62f2", "url": "https://github.com/Apicurio/apicurio-registry/commit/0398522c05e9d5a3f0d634013b2fc5d15cda62f2", "message": "Null check for name comparator", "committedDate": "2020-05-30T09:46:19Z", "type": "forcePushed"}, {"oid": "7d3e9d5b8d935297c15f2c0ba0e795320d112d2f", "url": "https://github.com/Apicurio/apicurio-registry/commit/7d3e9d5b8d935297c15f2c0ba0e795320d112d2f", "message": "Fix ordering for jpa", "committedDate": "2020-05-30T10:58:01Z", "type": "commit"}, {"oid": "7d3e9d5b8d935297c15f2c0ba0e795320d112d2f", "url": "https://github.com/Apicurio/apicurio-registry/commit/7d3e9d5b8d935297c15f2c0ba0e795320d112d2f", "message": "Fix ordering for jpa", "committedDate": "2020-05-30T10:58:01Z", "type": "forcePushed"}, {"oid": "2276b2d2f178180b4b4875355c231a335ac680ba", "url": "https://github.com/Apicurio/apicurio-registry/commit/2276b2d2f178180b4b4875355c231a335ac680ba", "message": "Proposed change to comparator for artifact meta-data\n\nThis is what I was thinking for the comparator - what do you think, @carlesarnal ?", "committedDate": "2020-05-30T13:39:25Z", "type": "commit"}]}