{"pr_number": 357, "pr_title": "Improve compat REST endpoint not following specification", "pr_createdAt": "2020-04-02T10:41:19Z", "pr_url": "https://github.com/Apicurio/apicurio-registry/pull/357", "timeline": [{"oid": "56aa42a168d50a2574534f86c0cbc128d1b953b5", "url": "https://github.com/Apicurio/apicurio-registry/commit/56aa42a168d50a2574534f86c0cbc128d1b953b5", "message": "Fix REST endpoint not following specification", "committedDate": "2020-04-02T10:42:38Z", "type": "forcePushed"}, {"oid": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "url": "https://github.com/Apicurio/apicurio-registry/commit/f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "message": "Fix REST endpoint not following specification", "committedDate": "2020-04-02T10:44:06Z", "type": "commit"}, {"oid": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "url": "https://github.com/Apicurio/apicurio-registry/commit/f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "message": "Fix REST endpoint not following specification", "committedDate": "2020-04-02T10:44:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTEyMw==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402251123", "bodyText": "Yeah, they now support different types as well.\nBut is this reflected in their API?", "author": "alesj", "createdAt": "2020-04-02T11:47:44Z", "path": "app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\r\n+ * Copyright 2019 Red Hat\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package io.apicurio.registry.ccompat.rest.impl;\r\n+\r\n+import io.apicurio.registry.ccompat.dto.CompatibilityCheckResponse;\r\n+import io.apicurio.registry.ccompat.dto.SchemaContent;\r\n+import io.apicurio.registry.ccompat.rest.CompatibilityResource;\r\n+import io.apicurio.registry.ccompat.store.RegistryStorageFacade;\r\n+import io.apicurio.registry.content.ContentHandle;\r\n+import io.apicurio.registry.metrics.ResponseErrorLivenessCheck;\r\n+import io.apicurio.registry.metrics.ResponseTimeoutReadinessCheck;\r\n+import io.apicurio.registry.metrics.RestMetricsApply;\r\n+import io.apicurio.registry.rules.RuleViolationException;\r\n+import io.apicurio.registry.rules.RulesService;\r\n+import io.apicurio.registry.types.ArtifactType;\r\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\r\n+import org.eclipse.microprofile.metrics.annotation.Counted;\r\n+import org.eclipse.microprofile.metrics.annotation.Timed;\r\n+\r\n+import javax.enterprise.context.ApplicationScoped;\r\n+import javax.inject.Inject;\r\n+import javax.interceptor.Interceptors;\r\n+\r\n+import static io.apicurio.registry.metrics.MetricIDs.*;\r\n+import static org.eclipse.microprofile.metrics.MetricUnits.MILLISECONDS;\r\n+\r\n+/**\r\n+ * @author Ales Justin\r\n+ * @author Jakub Senko <jsenko@redhat.com>\r\n+ */\r\n+\r\n+@ApplicationScoped\r\n+@Interceptors({ResponseErrorLivenessCheck.class, ResponseTimeoutReadinessCheck.class})\r\n+@RestMetricsApply\r\n+@Counted(name = REST_REQUEST_COUNT, description = REST_REQUEST_COUNT_DESC, tags = {\"group=\" + REST_GROUP_TAG, \"metric=\" + REST_REQUEST_COUNT})\r\n+@ConcurrentGauge(name = REST_CONCURRENT_REQUEST_COUNT, description = REST_CONCURRENT_REQUEST_COUNT_DESC, tags = {\"group=\" + REST_GROUP_TAG, \"metric=\" + REST_CONCURRENT_REQUEST_COUNT})\r\n+@Timed(name = REST_REQUEST_RESPONSE_TIME, description = REST_REQUEST_RESPONSE_TIME_DESC, tags = {\"group=\" + REST_GROUP_TAG, \"metric=\" + REST_REQUEST_RESPONSE_TIME}, unit = MILLISECONDS)\r\n+public class CompatibilityResourceImpl extends AbstractResource implements CompatibilityResource {\r\n+\r\n+    @Inject\r\n+    RulesService rules;\r\n+\r\n+    @Inject\r\n+    RegistryStorageFacade storage;\r\n+\r\n+    @Override\r\n+    public CompatibilityCheckResponse testCompatibilityBySubjectName(\r\n+            String subject,\r\n+            String versionString,\r\n+            SchemaContent request) throws Exception {\r\n+\r\n+        CompatibilityCheckResponse result = storage.parseVersionString(subject, versionString, version -> {\r\n+            // TODO are we safe to assume AVRO?\r", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19cc79231c9ce0c7e0ef3ae20e4d40686abba3a3", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java b/app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java\nindex 0cbe3fb0..dee81a7b 100644\n--- a/app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java\n\n@@ -19,7 +19,6 @@ package io.apicurio.registry.ccompat.rest.impl;\n import io.apicurio.registry.ccompat.dto.CompatibilityCheckResponse;\n import io.apicurio.registry.ccompat.dto.SchemaContent;\n import io.apicurio.registry.ccompat.rest.CompatibilityResource;\n-import io.apicurio.registry.ccompat.store.RegistryStorageFacade;\n import io.apicurio.registry.content.ContentHandle;\n import io.apicurio.registry.metrics.ResponseErrorLivenessCheck;\n import io.apicurio.registry.metrics.ResponseTimeoutReadinessCheck;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzA3Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402253072", "bodyText": "Missing header ...", "author": "alesj", "createdAt": "2020-04-02T11:51:29Z", "path": "app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.apicurio.registry.ccompat.store;", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f7c7ac5dc6fb5747fcbb8c14ecdb92609f301a4", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java b/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java\nindex c02fd9b5..de0701c6 100644\n--- a/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java\n+++ b/app/src/main/java/io/apicurio/registry/ccompat/store/FacadeConverter.java\n\n@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2019 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package io.apicurio.registry.ccompat.store;\n \n import io.apicurio.registry.ccompat.dto.SchemaContent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzY5Ng==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402253696", "bodyText": "We need to check how they now support different types, and extend this facade accordingly.", "author": "alesj", "createdAt": "2020-04-02T11:52:41Z", "path": "app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java", "diffHunk": "@@ -17,39 +17,66 @@\n package io.apicurio.registry.ccompat.store;\n \n import io.apicurio.registry.ccompat.dto.Schema;\n+import io.apicurio.registry.ccompat.dto.SchemaContent;\n+import io.apicurio.registry.ccompat.rest.error.SchemaNotFoundException;\n import io.apicurio.registry.storage.ArtifactAlreadyExistsException;\n import io.apicurio.registry.storage.ArtifactNotFoundException;\n import io.apicurio.registry.storage.RegistryStorageException;\n+import io.apicurio.registry.storage.RuleConfigurationDto;\n import io.apicurio.registry.storage.VersionNotFoundException;\n+import io.apicurio.registry.types.RuleType;\n \n import java.util.List;\n-import java.util.Set;\n-import java.util.SortedSet;\n import java.util.concurrent.CompletionStage;\n+import java.util.function.Function;\n \n /**\n+ * Note: This facade is only expected to be used for AVRO artifact type.", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NTE4Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402285182", "bodyText": "Agreed.", "author": "EricWittmann", "createdAt": "2020-04-02T12:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "440fabf9dcdaaa3b10ec96a51c968c6dc016a4c6", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java b/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java\nindex c8cf6844..6b10ef84 100644\n--- a/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java\n+++ b/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacade.java\n\n@@ -18,7 +18,6 @@ package io.apicurio.registry.ccompat.store;\n \n import io.apicurio.registry.ccompat.dto.Schema;\n import io.apicurio.registry.ccompat.dto.SchemaContent;\n-import io.apicurio.registry.ccompat.rest.error.SchemaNotFoundException;\n import io.apicurio.registry.storage.ArtifactAlreadyExistsException;\n import io.apicurio.registry.storage.ArtifactNotFoundException;\n import io.apicurio.registry.storage.RegistryStorageException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NjEyNA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402256124", "bodyText": "This should rather be to catch AlreadyExists on create, then to do previous check.\nSince while you check for an existing artifact, and you get false, one can be created.\nHighly unlikely, but still better to handle it \"defensively\", as that way there is no concurrency error.", "author": "alesj", "createdAt": "2020-04-02T11:57:13Z", "path": "app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java", "diffHunk": "@@ -46,84 +53,144 @@\n     @Current\n     RegistryStorage storage;\n \n-    private static Schema toSchema(String subject, StoredArtifact storedArtifact) {\n-        return new Schema(\n-            subject,\n-            storedArtifact.version.intValue(),\n-            storedArtifact.id.intValue(),\n-            storedArtifact.content.content()\n-        );\n-    }\n \n-    public Set<String> listSubjects() {\n-        return storage.getArtifactIds();\n+    public List<String> getSubjects() {\n+        // TODO maybe not necessary...\n+        return new ArrayList<>(storage.getArtifactIds());\n     }\n \n     @Override\n-    public SortedSet<Long> deleteSubject(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n-        return storage.deleteArtifact(subject);\n+    public List<Integer> deleteSubject(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n+        return storage.deleteArtifact(subject)\n+                .stream()\n+                .map(FacadeConverter::convertUnsigned)\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n-    public String getSchema(Integer id) throws ArtifactNotFoundException, RegistryStorageException {\n-        return storage.getArtifactVersion(id).content.content();\n+    public SchemaContent getSchemaContent(int globalId) throws ArtifactNotFoundException, RegistryStorageException {\n+        try {\n+            return FacadeConverter.convert(storage.getArtifactVersion(globalId));\n+            // TODO StoredArtifact should contain artifactId IF we are not treating globalId separately\n+        } catch (ArtifactNotFoundException ex) {\n+            throw new SchemaNotFoundException(ex);\n+        }\n     }\n \n     @Override\n     public Schema getSchema(String subject, String versionString) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n-        try {\n-            long version = Long.parseLong(versionString);\n-            return toSchema(subject, storage.getArtifactVersion(subject, version));\n-        } catch (NumberFormatException e) {\n-            // return latest\n-            return toSchema(subject, storage.getArtifact(subject));\n-        }\n+        return parseVersionString(subject, versionString,\n+                version -> FacadeConverter.convert(subject, storage.getArtifactVersion(subject, version)));\n     }\n \n     @Override\n-    public List<Integer> listVersions(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n+    public List<Integer> getVersions(String subject) throws ArtifactNotFoundException, RegistryStorageException {\n         return storage.getArtifactVersions(subject)\n-                      .stream()\n-                      .map(Long::intValue)\n-                      .collect(Collectors.toList());\n+                .stream()\n+                .map(FacadeConverter::convertUnsigned)\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n-    public Schema findSchemaWithSubject(String subject, boolean checkDeletedSchema, String schema) throws ArtifactNotFoundException, RegistryStorageException {\n+    public Schema getSchema(String subject, SchemaContent schema) throws ArtifactNotFoundException, RegistryStorageException {\n         // TODO -- handle deleted?\n-        ArtifactMetaDataDto amd = storage.getArtifactMetaData(subject, ContentHandle.create(schema));\n+        ArtifactMetaDataDto amd = storage.getArtifactMetaData(subject, ContentHandle.create(schema.getSchema()));\n         StoredArtifact storedArtifact = storage.getArtifactVersion(subject, amd.getVersion());\n-        return toSchema(subject, storedArtifact);\n+        return FacadeConverter.convert(subject, storedArtifact);\n+    }\n+\n+    @Override\n+    public CompletionStage<Long> createSchema(String subject, String schema) throws ArtifactAlreadyExistsException, ArtifactNotFoundException, RegistryStorageException {\n+\n+        // TODO Should this creation and updating of an artifact be a different operation?\n+        // TODO method that returns a completion stage should not throw an exception\n+        CompletionStage<ArtifactMetaDataDto> artifactMeta = createOrUpdateArtifact(subject, schema);\n+\n+        return artifactMeta.thenApply(ArtifactMetaDataDto::getGlobalId);\n+    }\n+\n+    @Override\n+    public int deleteSchema(String subject, String versionString) throws ArtifactNotFoundException, VersionNotFoundException, RegistryStorageException {\n+        return FacadeConverter.convertUnsigned(parseVersionString(subject, versionString, version -> {\n+            storage.deleteArtifactVersion(subject, version);\n+            return version;\n+        }));\n+    }\n+\n+    @Override\n+    public void createOrUpdateArtifactRule(String subject, RuleType type, RuleConfigurationDto dto) {\n+        if (!doesArtifactRuleExist(subject, RuleType.COMPATIBILITY)) {\n+            storage.createArtifactRule(subject, RuleType.COMPATIBILITY, dto);\n+        } else {\n+            storage.updateArtifactRule(subject, RuleType.COMPATIBILITY, dto);\n+        }\n     }\n \n     @Override\n-    public CompletionStage<Long> registerSchema(String subject, Integer id, Integer version, String schema) throws ArtifactAlreadyExistsException, ArtifactNotFoundException, RegistryStorageException {\n-        ArtifactMetaDataDto metadata = null;\n+    public void createOrUpdateGlobalRule(RuleType type, RuleConfigurationDto dto) {\n+        if (!doesGlobalRuleExist(RuleType.COMPATIBILITY)) {\n+            storage.createGlobalRule(RuleType.COMPATIBILITY, dto);\n+        } else {\n+            storage.updateGlobalRule(RuleType.COMPATIBILITY, dto);\n+        }\n+    }\n+\n+    private CompletionStage<ArtifactMetaDataDto> createOrUpdateArtifact(String subject, String schema) {\n+        if (!doesArtifactExist(subject)) {", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NjM0Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402286342", "bodyText": "Even doing that we probably have a race condition in the Streams storage implementation when running more than one instance, right?", "author": "EricWittmann", "createdAt": "2020-04-02T12:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NjEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3NDE1Mg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402574152", "bodyText": "I'm not sure it would be a race condition, since all artifacts with same artifactId are handled on the same node, in ordered (sync) fashion.\nFor create, if two requests would be concurrent, one would fail -- see StreamsRegistryStorage impl.\nFor update, it would also fail -- if someone would delete the artifacts during that async op.", "author": "alesj", "createdAt": "2020-04-02T19:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NjEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "440fabf9dcdaaa3b10ec96a51c968c6dc016a4c6", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java b/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java\nindex 47b56594..dbf6b5c2 100644\n--- a/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java\n+++ b/app/src/main/java/io/apicurio/registry/ccompat/store/RegistryStorageFacadeImpl.java\n\n@@ -53,6 +58,8 @@ public class RegistryStorageFacadeImpl implements RegistryStorageFacade {\n     @Current\n     RegistryStorage storage;\n \n+    @Inject\n+    RulesService rulesService;\n \n     public List<String> getSubjects() {\n         // TODO maybe not necessary...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NjkyOA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402256928", "bodyText": "It should be -- that's the purpose of the handle!", "author": "alesj", "createdAt": "2020-04-02T11:58:39Z", "path": "app/src/main/java/io/apicurio/registry/content/ContentHandle.java", "diffHunk": "@@ -21,6 +21,7 @@\n /**\n  * @author Ales Justin\n  */\n+// TODO Can a single CH be used multiple times?", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NzI4NA==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402257284", "bodyText": "No enum / constant for 422 ?", "author": "alesj", "createdAt": "2020-04-02T11:59:12Z", "path": "app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java", "diffHunk": "@@ -76,6 +76,7 @@\n         map.put(RuleNotFoundException.class, HTTP_NOT_FOUND);\n         map.put(RuleViolationException.class, HTTP_BAD_REQUEST);\n         map.put(VersionNotFoundException.class, HTTP_NOT_FOUND);\n+        map.put(IllegalArgumentException.class, 422);", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MjgzOQ==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402482839", "bodyText": "There is no existing one so I've added it.", "author": "jsenko", "createdAt": "2020-04-02T17:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NzI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "440fabf9dcdaaa3b10ec96a51c968c6dc016a4c6", "chunk": "diff --git a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\nindex 3852dbf3..dd1566a0 100644\n--- a/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n+++ b/app/src/main/java/io/apicurio/registry/rest/RegistryExceptionMapper.java\n\n@@ -76,7 +80,8 @@ public class RegistryExceptionMapper implements ExceptionMapper<Throwable> {\n         map.put(RuleNotFoundException.class, HTTP_NOT_FOUND);\n         map.put(RuleViolationException.class, HTTP_BAD_REQUEST);\n         map.put(VersionNotFoundException.class, HTTP_NOT_FOUND);\n-        map.put(IllegalArgumentException.class, 422);\n+        map.put(ConflictException.class, HTTP_CONFLICT);\n+        map.put(UnprocessableEntityException.class, HTTP_UNPROCESSABLE_ENTITY);\n         CODE_MAP = Collections.unmodifiableMap(map);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1OTEwNg==", "url": "https://github.com/Apicurio/apicurio-registry/pull/357#discussion_r402259106", "bodyText": "It looks like it could be, unless you have some constraint on the tuple (<aritfactId, version>) ?\nThen you must handle this constraint in a loop -- allowing it to fail, and get next version, ...", "author": "alesj", "createdAt": "2020-04-02T12:02:32Z", "path": "storage/jpa/src/main/java/io/apicurio/registry/storage/impl/jpa/JPARegistryStorage.java", "diffHunk": "@@ -95,6 +95,7 @@\n     @Inject\n     ArtifactTypeUtilProviderFactory factory;\n \n+    // TODO Could there be a race condition here? The new max+1 version is saved with a new artifact", "originalCommit": "f7f3a9b0aff2b74018d05308b7eb64c15953fc4f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "440fabf9dcdaaa3b10ec96a51c968c6dc016a4c6", "url": "https://github.com/Apicurio/apicurio-registry/commit/440fabf9dcdaaa3b10ec96a51c968c6dc016a4c6", "message": "Improve validation and error handling when registering scheme", "committedDate": "2020-04-02T16:57:32Z", "type": "commit"}, {"oid": "edaa7c88d4447c794205c31fe51761cc668806b3", "url": "https://github.com/Apicurio/apicurio-registry/commit/edaa7c88d4447c794205c31fe51761cc668806b3", "message": "Fix imports", "committedDate": "2020-04-02T17:21:57Z", "type": "commit"}, {"oid": "19cc79231c9ce0c7e0ef3ae20e4d40686abba3a3", "url": "https://github.com/Apicurio/apicurio-registry/commit/19cc79231c9ce0c7e0ef3ae20e4d40686abba3a3", "message": "Fix ambiguous dependency injection", "committedDate": "2020-04-03T11:49:22Z", "type": "commit"}, {"oid": "7f7c7ac5dc6fb5747fcbb8c14ecdb92609f301a4", "url": "https://github.com/Apicurio/apicurio-registry/commit/7f7c7ac5dc6fb5747fcbb8c14ecdb92609f301a4", "message": "Add copyright headers", "committedDate": "2020-04-03T11:57:51Z", "type": "commit"}, {"oid": "24d48bd70f4c17357ee7268697830f919bc18626", "url": "https://github.com/Apicurio/apicurio-registry/commit/24d48bd70f4c17357ee7268697830f919bc18626", "message": "Fix failing tests", "committedDate": "2020-04-06T17:00:10Z", "type": "commit"}, {"oid": "47cd144b8d94b54324fc5ac5daeed1230b542b4e", "url": "https://github.com/Apicurio/apicurio-registry/commit/47cd144b8d94b54324fc5ac5daeed1230b542b4e", "message": "Better fix for #358", "committedDate": "2020-04-06T22:15:53Z", "type": "commit"}, {"oid": "fa23a2fc9234a96f87a4fb5fb91c3c2716a0a465", "url": "https://github.com/Apicurio/apicurio-registry/commit/fa23a2fc9234a96f87a4fb5fb91c3c2716a0a465", "message": "Merge branch 'master' into rest-spec-bug", "committedDate": "2020-04-08T15:46:49Z", "type": "commit"}]}