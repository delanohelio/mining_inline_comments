{"pr_number": 14889, "pr_title": "Fix operation dispatch (parse once, throw on concurrent dispatch, exc\u2026", "pr_createdAt": "2020-10-15T07:27:24Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14889", "timeline": [{"oid": "463729c529464ecea03388b9f2dcf94993d03a7f", "url": "https://github.com/vespa-engine/vespa/commit/463729c529464ecea03388b9f2dcf94993d03a7f", "message": "Fix operation dispatch (parse once, throw on concurrent dispatch, excpetion safe)", "committedDate": "2020-10-15T07:27:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2MzU1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505263553", "bodyText": "This shouldn't happen, so throw on it. It would cause multiple operations to be sent to the backend for a single request. Can guard here against buggy usage of this class.", "author": "jonmv", "createdAt": "2020-10-15T07:28:28Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");", "originalCommit": "463729c529464ecea03388b9f2dcf94993d03a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "chunk": "diff --git a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\nindex 1ef8694262..3192c09184 100644\n--- a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n+++ b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n\n@@ -612,6 +612,9 @@ public class DocumentV1ApiHandler extends AbstractRequestHandler {\n          * dispatch should be retried at a later time.\n          */\n         boolean dispatch() {\n+            if (request.isCancelled())\n+                return true;\n+            \n             if ( ! lock.tryLock())\n                 throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDE0NA==", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505264144", "bodyText": "Old code stupidly tried to parse every time ... \u30fd( \u0ca0\u76ca\u0ca0 )\uff89", "author": "jonmv", "createdAt": "2020-10-15T07:29:03Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n-                return true;\n-            };\n+            try {\n+                if (operation == null)\n+                    operation = parse();", "originalCommit": "463729c529464ecea03388b9f2dcf94993d03a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "chunk": "diff --git a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\nindex 1ef8694262..3192c09184 100644\n--- a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n+++ b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n\n@@ -612,6 +612,9 @@ public class DocumentV1ApiHandler extends AbstractRequestHandler {\n          * dispatch should be retried at a later time.\n          */\n         boolean dispatch() {\n+            if (request.isCancelled())\n+                return true;\n+            \n             if ( ! lock.tryLock())\n                 throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDg3Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505264876", "bodyText": "Exception handling now run for all operations \u2014\u00a0not just the lazily parsed ones.", "author": "jonmv", "createdAt": "2020-10-15T07:29:42Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n-                return true;\n-            };\n+            try {\n+                if (operation == null)\n+                    operation = parse();\n+\n+                return operation.get();\n+            }\n+            catch (IllegalArgumentException e) {\n+                badRequest(request, e, handler);\n+            }\n+            catch (RuntimeException e) {\n+                serverError(request, e, handler);\n+            }", "originalCommit": "463729c529464ecea03388b9f2dcf94993d03a7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "chunk": "diff --git a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\nindex 1ef8694262..3192c09184 100644\n--- a/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n+++ b/vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java\n\n@@ -612,6 +612,9 @@ public class DocumentV1ApiHandler extends AbstractRequestHandler {\n          * dispatch should be retried at a later time.\n          */\n         boolean dispatch() {\n+            if (request.isCancelled())\n+                return true;\n+            \n             if ( ! lock.tryLock())\n                 throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n"}}, {"oid": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "url": "https://github.com/vespa-engine/vespa/commit/1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "message": "Re-add \"request.isCancelled() clause", "committedDate": "2020-10-15T07:30:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NzI5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505267291", "bodyText": "This is now also run for all operations \u2014\u00a0not just those against the async-session.", "author": "jonmv", "createdAt": "2020-10-15T07:31:34Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,60 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n-\n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n+        boolean dispatch() {\n+            if (request.isCancelled())", "originalCommit": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}