{"pr_number": 13293, "pr_title": "Reporting metrics from audit log with user as dimension", "pr_createdAt": "2020-05-18T20:58:17Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13293", "timeline": [{"oid": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "url": "https://github.com/vespa-engine/vespa/commit/7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "message": "Reporting metrics from audit log with user as dimension", "committedDate": "2020-05-18T20:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MTEzMw==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427091133", "bodyText": "Variable should be lowercase, and final can be removed (we typically don't use final for local variables).", "author": "mpolden", "createdAt": "2020-05-19T07:37:36Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java", "diffHunk": "@@ -71,6 +73,24 @@ public void maintain() {\n         reportRemainingRotations();\n         reportQueuedNameServiceRequests();\n         reportInfrastructureUpgradeMetrics();\n+        reportAuditLog();\n+    }\n+\n+    private void reportAuditLog() {\n+        final String OPERATOR = \"operator\";", "originalCommit": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\nindex b9612655fe..565de9f89d 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n\n@@ -77,16 +77,14 @@ public class MetricsReporter extends ControllerMaintainer {\n     }\n \n     private void reportAuditLog() {\n-        final String OPERATOR = \"operator\";\n-\n         AuditLog log = controller().auditLogger().readLog();\n         for (AuditLog.Entry entry : log.entries()) {\n             String[] resource = entry.resource().split(\"/\");\n             String operationMetric;\n-            if(resource[1] != null) {\n+            if(resource.length > 1 && resource[1] != null) {\n                 String api = resource[1];\n                 operationMetric = OPERATION_PREFIX + api;\n-                Metric.Context context = metric.createContext(Map.of(OPERATOR, entry.principal()));\n+                Metric.Context context = metric.createContext(Map.of(\"operator\", entry.principal()));\n \n                 metric.add(operationMetric, 1, context);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MTUxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427091519", "bodyText": "Array length should be checked.", "author": "mpolden", "createdAt": "2020-05-19T07:38:19Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java", "diffHunk": "@@ -71,6 +73,24 @@ public void maintain() {\n         reportRemainingRotations();\n         reportQueuedNameServiceRequests();\n         reportInfrastructureUpgradeMetrics();\n+        reportAuditLog();\n+    }\n+\n+    private void reportAuditLog() {\n+        final String OPERATOR = \"operator\";\n+\n+        AuditLog log = controller().auditLogger().readLog();\n+        for (AuditLog.Entry entry : log.entries()) {\n+            String[] resource = entry.resource().split(\"/\");\n+            String operationMetric;\n+            if(resource[1] != null) {", "originalCommit": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\nindex b9612655fe..565de9f89d 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n\n@@ -77,16 +77,14 @@ public class MetricsReporter extends ControllerMaintainer {\n     }\n \n     private void reportAuditLog() {\n-        final String OPERATOR = \"operator\";\n-\n         AuditLog log = controller().auditLogger().readLog();\n         for (AuditLog.Entry entry : log.entries()) {\n             String[] resource = entry.resource().split(\"/\");\n             String operationMetric;\n-            if(resource[1] != null) {\n+            if(resource.length > 1 && resource[1] != null) {\n                 String api = resource[1];\n                 operationMetric = OPERATION_PREFIX + api;\n-                Metric.Context context = metric.createContext(Map.of(OPERATOR, entry.principal()));\n+                Metric.Context context = metric.createContext(Map.of(\"operator\", entry.principal()));\n \n                 metric.add(operationMetric, 1, context);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MzMwMQ==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427093301", "bodyText": "Since MetricsReporter runs at an interval and this loops over all entries every time, this metric will end up counting the same entries multiple times.\nI suggest that you instead calculate the total count and use metric.set. You can verify that the metric is as expected by calling metricsReporter.maintain() more than once in the test.", "author": "mpolden", "createdAt": "2020-05-19T07:41:31Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java", "diffHunk": "@@ -71,6 +73,24 @@ public void maintain() {\n         reportRemainingRotations();\n         reportQueuedNameServiceRequests();\n         reportInfrastructureUpgradeMetrics();\n+        reportAuditLog();\n+    }\n+\n+    private void reportAuditLog() {\n+        final String OPERATOR = \"operator\";\n+\n+        AuditLog log = controller().auditLogger().readLog();\n+        for (AuditLog.Entry entry : log.entries()) {\n+            String[] resource = entry.resource().split(\"/\");\n+            String operationMetric;\n+            if(resource[1] != null) {\n+                String api = resource[1];\n+                operationMetric = OPERATION_PREFIX + api;\n+                Metric.Context context = metric.createContext(Map.of(OPERATOR, entry.principal()));\n+\n+                metric.add(operationMetric, 1, context);", "originalCommit": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\nindex b9612655fe..565de9f89d 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n\n@@ -77,16 +77,14 @@ public class MetricsReporter extends ControllerMaintainer {\n     }\n \n     private void reportAuditLog() {\n-        final String OPERATOR = \"operator\";\n-\n         AuditLog log = controller().auditLogger().readLog();\n         for (AuditLog.Entry entry : log.entries()) {\n             String[] resource = entry.resource().split(\"/\");\n             String operationMetric;\n-            if(resource[1] != null) {\n+            if(resource.length > 1 && resource[1] != null) {\n                 String api = resource[1];\n                 operationMetric = OPERATION_PREFIX + api;\n-                Metric.Context context = metric.createContext(Map.of(OPERATOR, entry.principal()));\n+                Metric.Context context = metric.createContext(Map.of(\"operator\", entry.principal()));\n \n                 metric.add(operationMetric, 1, context);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5NDEwMA==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427094100", "bodyText": "Test should use fake hostnames, applications and users.", "author": "mpolden", "createdAt": "2020-05-19T07:42:57Z", "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java", "diffHunk": "@@ -43,6 +44,34 @@\n \n     private final MetricsMock metrics = new MetricsMock();\n \n+    @Test\n+    public void audit_log() {\n+        var tester = new ControllerTester();\n+        // Data to audit log\n+\n+        MetricsReporter metricsReporter = createReporter(tester.controller());\n+        // Log some operator actions\n+        HttpRequest req1 = HttpRequest.createTestRequest(\n+                \"http://localhost:8080/zone/v2/prod/us-west-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.gq1.yahoo.com\",\n+                com.yahoo.jdisc.http.HttpRequest.Method.PUT\n+        );\n+        req1.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        tester.controller().auditLogger().log((req1));\n+        HttpRequest req2 = HttpRequest.createTestRequest(\n+                \"http://localhost:8080/routing/v1/inactive/tenant/partner_publishing/application/contentindexing/instance/default/environment/prod/region/us-west-1\",\n+                com.yahoo.jdisc.http.HttpRequest.Method.POST\n+        );\n+        req2.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");", "originalCommit": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "chunk": "diff --git a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\nindex 682399a172..aec590f113 100644\n--- a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\n+++ b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\n\n@@ -52,22 +52,22 @@ public class MetricsReporterTest {\n         MetricsReporter metricsReporter = createReporter(tester.controller());\n         // Log some operator actions\n         HttpRequest req1 = HttpRequest.createTestRequest(\n-                \"http://localhost:8080/zone/v2/prod/us-west-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.gq1.yahoo.com\",\n+                \"http://localhost:8080/zone/v2/prod/us-northeast-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.ca1.yahoo.com\",\n                 com.yahoo.jdisc.http.HttpRequest.Method.PUT\n         );\n-        req1.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        req1.getJDiscRequest().setUserPrincipal(() -> \"user.johndoe\");\n         tester.controller().auditLogger().log((req1));\n         HttpRequest req2 = HttpRequest.createTestRequest(\n-                \"http://localhost:8080/routing/v1/inactive/tenant/partner_publishing/application/contentindexing/instance/default/environment/prod/region/us-west-1\",\n+                \"http://localhost:8080/routing/v1/inactive/tenant/some_publishing/application/someindexing/instance/default/environment/prod/region/us-northeast-1\",\n                 com.yahoo.jdisc.http.HttpRequest.Method.POST\n         );\n-        req2.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        req2.getJDiscRequest().setUserPrincipal(() -> \"user.johndoe\");\n         tester.controller().auditLogger().log((req2));\n \n         // End data to audit log\n         metricsReporter.maintain();\n-        getMetric(MetricsReporter.OPERATION_PREFIX + \"zone\", \"user.bjormel\");\n-        getMetric(MetricsReporter.OPERATION_PREFIX + \"routing\", \"user.bjormel\");\n+        assertEquals(1, getMetric(MetricsReporter.OPERATION_PREFIX + \"zone\", \"user.johndoe\"));\n+        assertEquals(1, getMetric(MetricsReporter.OPERATION_PREFIX + \"routing\", \"user.johndoe\"));\n \n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5NDQxNw==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427094417", "bodyText": "This should assert the metric value.", "author": "mpolden", "createdAt": "2020-05-19T07:43:32Z", "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java", "diffHunk": "@@ -43,6 +44,34 @@\n \n     private final MetricsMock metrics = new MetricsMock();\n \n+    @Test\n+    public void audit_log() {\n+        var tester = new ControllerTester();\n+        // Data to audit log\n+\n+        MetricsReporter metricsReporter = createReporter(tester.controller());\n+        // Log some operator actions\n+        HttpRequest req1 = HttpRequest.createTestRequest(\n+                \"http://localhost:8080/zone/v2/prod/us-west-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.gq1.yahoo.com\",\n+                com.yahoo.jdisc.http.HttpRequest.Method.PUT\n+        );\n+        req1.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        tester.controller().auditLogger().log((req1));\n+        HttpRequest req2 = HttpRequest.createTestRequest(\n+                \"http://localhost:8080/routing/v1/inactive/tenant/partner_publishing/application/contentindexing/instance/default/environment/prod/region/us-west-1\",\n+                com.yahoo.jdisc.http.HttpRequest.Method.POST\n+        );\n+        req2.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        tester.controller().auditLogger().log((req2));\n+\n+        // End data to audit log\n+        metricsReporter.maintain();\n+        getMetric(MetricsReporter.OPERATION_PREFIX + \"zone\", \"user.bjormel\");\n+        getMetric(MetricsReporter.OPERATION_PREFIX + \"routing\", \"user.bjormel\");", "originalCommit": "7c2a7921ffecea00ab401cb3ade68d841bcee8f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "chunk": "diff --git a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\nindex 682399a172..aec590f113 100644\n--- a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\n+++ b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporterTest.java\n\n@@ -52,22 +52,22 @@ public class MetricsReporterTest {\n         MetricsReporter metricsReporter = createReporter(tester.controller());\n         // Log some operator actions\n         HttpRequest req1 = HttpRequest.createTestRequest(\n-                \"http://localhost:8080/zone/v2/prod/us-west-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.gq1.yahoo.com\",\n+                \"http://localhost:8080/zone/v2/prod/us-northeast-1/nodes/v2/state/dirty/le04614.ostk.bm2.prod.ca1.yahoo.com\",\n                 com.yahoo.jdisc.http.HttpRequest.Method.PUT\n         );\n-        req1.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        req1.getJDiscRequest().setUserPrincipal(() -> \"user.johndoe\");\n         tester.controller().auditLogger().log((req1));\n         HttpRequest req2 = HttpRequest.createTestRequest(\n-                \"http://localhost:8080/routing/v1/inactive/tenant/partner_publishing/application/contentindexing/instance/default/environment/prod/region/us-west-1\",\n+                \"http://localhost:8080/routing/v1/inactive/tenant/some_publishing/application/someindexing/instance/default/environment/prod/region/us-northeast-1\",\n                 com.yahoo.jdisc.http.HttpRequest.Method.POST\n         );\n-        req2.getJDiscRequest().setUserPrincipal(() -> \"user.bjormel\");\n+        req2.getJDiscRequest().setUserPrincipal(() -> \"user.johndoe\");\n         tester.controller().auditLogger().log((req2));\n \n         // End data to audit log\n         metricsReporter.maintain();\n-        getMetric(MetricsReporter.OPERATION_PREFIX + \"zone\", \"user.bjormel\");\n-        getMetric(MetricsReporter.OPERATION_PREFIX + \"routing\", \"user.bjormel\");\n+        assertEquals(1, getMetric(MetricsReporter.OPERATION_PREFIX + \"zone\", \"user.johndoe\"));\n+        assertEquals(1, getMetric(MetricsReporter.OPERATION_PREFIX + \"routing\", \"user.johndoe\"));\n \n \n     }\n"}}, {"oid": "1d26a30aa50bd5b0e999b57287ee50d2cb340176", "url": "https://github.com/vespa-engine/vespa/commit/1d26a30aa50bd5b0e999b57287ee50d2cb340176", "message": "Clean up after code review", "committedDate": "2020-05-19T08:36:21Z", "type": "commit"}, {"oid": "ad22e17d16c28f639fe39337e4374d169e1ccd06", "url": "https://github.com/vespa-engine/vespa/commit/ad22e17d16c28f639fe39337e4374d169e1ccd06", "message": "Iterate over audit log first, then set metrics", "committedDate": "2020-05-19T10:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwOTMyOA==", "url": "https://github.com/vespa-engine/vespa/pull/13293#discussion_r427209328", "bodyText": "You can simplify this and drop a key lookup by always doing metricCounts.get and checking for null value  instead of the explicit containsKey. Same for the code below.", "author": "mpolden", "createdAt": "2020-05-19T10:51:57Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java", "diffHunk": "@@ -78,15 +78,33 @@ public void maintain() {\n \n     private void reportAuditLog() {\n         AuditLog log = controller().auditLogger().readLog();\n+        HashMap<String, HashMap<String, Integer>> metricCounts = new HashMap<>();\n+\n         for (AuditLog.Entry entry : log.entries()) {\n             String[] resource = entry.resource().split(\"/\");\n-            String operationMetric;\n-            if(resource.length > 1 && resource[1] != null) {\n+            if((resource.length > 1) && (resource[1] != null)) {\n                 String api = resource[1];\n-                operationMetric = OPERATION_PREFIX + api;\n-                Metric.Context context = metric.createContext(Map.of(\"operator\", entry.principal()));\n-\n-                metric.add(operationMetric, 1, context);\n+                String operationMetric = OPERATION_PREFIX + api;\n+\n+                if (metricCounts.containsKey(operationMetric)) {\n+                    HashMap<String, Integer> dimension = metricCounts.get(operationMetric);", "originalCommit": "ad22e17d16c28f639fe39337e4374d169e1ccd06", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "496788fbbd3f8e71501f86858e1e6ea23ccfd372", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\nindex 417f6c7f10..cc4a8c628e 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/MetricsReporter.java\n\n@@ -85,18 +85,17 @@ public class MetricsReporter extends ControllerMaintainer {\n             if((resource.length > 1) && (resource[1] != null)) {\n                 String api = resource[1];\n                 String operationMetric = OPERATION_PREFIX + api;\n-\n-                if (metricCounts.containsKey(operationMetric)) {\n-                    HashMap<String, Integer> dimension = metricCounts.get(operationMetric);\n-                    if (dimension.containsKey(entry.principal())) {\n-                        Integer count = dimension.get(entry.principal());\n+                HashMap<String, Integer> dimension = metricCounts.get(operationMetric);\n+                if (dimension != null) {\n+                    Integer count = dimension.get(entry.principal());\n+                    if (count != null) {\n                         dimension.replace(entry.principal(), ++count);\n                     } else {\n                         dimension.put(entry.principal(), 1);\n                     }\n \n                 } else {\n-                    HashMap<String, Integer> dimension = new HashMap<>();\n+                    dimension = new HashMap<>();\n                     dimension.put(entry.principal(),1);\n                     metricCounts.put(operationMetric, dimension);\n                 }\n"}}, {"oid": "496788fbbd3f8e71501f86858e1e6ea23ccfd372", "url": "https://github.com/vespa-engine/vespa/commit/496788fbbd3f8e71501f86858e1e6ea23ccfd372", "message": "Simplify", "committedDate": "2020-05-19T14:59:47Z", "type": "commit"}]}