{"pr_number": 12626, "pr_title": "Serialize and deserialize docker image repo", "pr_createdAt": "2020-03-19T12:50:52Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12626", "timeline": [{"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1", "url": "https://github.com/vespa-engine/vespa/commit/1760ca738f4d0d463535299ba64a06f50811c3b1", "message": "Serialize and deserialize docker image repo", "committedDate": "2020-03-19T12:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395008436", "bodyText": "I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.", "author": "freva", "createdAt": "2020-03-19T13:03:35Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "diffHunk": "@@ -187,8 +187,7 @@ private void toSlime(Allocation allocation, Cursor object) {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        // TODO serialize dockerImageRepo\n-        //object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzU5Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173596", "bodyText": "Yeah, fixed", "author": "hmusum", "createdAt": "2020-03-19T16:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "a681535b066cfc7c08d54603b811da8e0472736d", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java\nindex bd5ba514a1..94f4dab124 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java\n\n@@ -187,7 +187,7 @@ public class NodeSerializer {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        allocation.membership().cluster().dockerImageRepo().ifPresent(repo -> object.setString(wantedDockerImageRepoKey, repo));\n         allocation.networkPorts().ifPresent(ports -> NetworkPortsSerializer.toSlime(ports, object.setArray(networkPortsKey)));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395010186", "bodyText": "Consider having a method on ClusterSpec that returns the full docker image", "author": "freva", "createdAt": "2020-03-19T13:06:36Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,11 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzY1MA==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173650", "bodyText": "Done", "author": "hmusum", "createdAt": "2020-03-19T16:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a681535b066cfc7c08d54603b811da8e0472736d", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\nindex c96458a043..6b308a9627 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n\n@@ -158,9 +158,8 @@ class NodesResponse extends HttpResponse {\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n             String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n-            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();\n-            object.setString(\"wantedDockerImage\", dockerImageRepo.map(s -> s + \":\" + wantedVespaVersion)\n-                    .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n+                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n             object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n             toSlime(allocation.requestedResources(), object.setObject(\"requestedResources\"));\n             allocation.networkPorts().ifPresent(ports -> NetworkPortsSerializer.toSlime(ports, object.setArray(\"networkPorts\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395014621", "bodyText": "Why is this the case?", "author": "freva", "createdAt": "2020-03-19T13:13:56Z", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzc1MA==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173750", "bodyText": "Should not have been there, removed", "author": "hmusum", "createdAt": "2020-03-19T16:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a681535b066cfc7c08d54603b811da8e0472736d", "chunk": "diff --git a/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java b/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\nindex 0919e53742..931d87a326 100644\n--- a/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\n+++ b/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\n\n@@ -172,16 +172,17 @@ public class ProvisioningTest {\n         tester.activate(application1, state1.allHosts);\n \n         HostSpec host1 = state1.container0.iterator().next();\n-        assertFalse(host1.version().isPresent());\n         Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n-        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});\n+        DockerImage dockerImage = DockerImage.fromString(dockerImageRepo).withTag(Version.fromString(\"1.2.3\"));\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(dockerImage)), () -> {});\n \n         // redeploy\n         SystemState state2 = prepare(application1, tester, 1, 1, 1 ,1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n         tester.activate(application1, state2.allHosts);\n \n         host1 = state2.container0.iterator().next();\n-        assertEquals(dockerImageRepo, host1.dockerImageRepo().get());\n+        node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        assertEquals(dockerImage, node1.status().dockerImage().get());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395015012", "bodyText": "This actually shouldn't be allowed, current docker image should always include the version as well.", "author": "freva", "createdAt": "2020-03-19T13:14:34Z", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());\n+        Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzg5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173897", "bodyText": "test code updated", "author": "hmusum", "createdAt": "2020-03-19T16:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a681535b066cfc7c08d54603b811da8e0472736d", "chunk": "diff --git a/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java b/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\nindex 0919e53742..931d87a326 100644\n--- a/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\n+++ b/node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java\n\n@@ -172,16 +172,17 @@ public class ProvisioningTest {\n         tester.activate(application1, state1.allHosts);\n \n         HostSpec host1 = state1.container0.iterator().next();\n-        assertFalse(host1.version().isPresent());\n         Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n-        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});\n+        DockerImage dockerImage = DockerImage.fromString(dockerImageRepo).withTag(Version.fromString(\"1.2.3\"));\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(dockerImage)), () -> {});\n \n         // redeploy\n         SystemState state2 = prepare(application1, tester, 1, 1, 1 ,1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n         tester.activate(application1, state2.allHosts);\n \n         host1 = state2.container0.iterator().next();\n-        assertEquals(dockerImageRepo, host1.dockerImageRepo().get());\n+        node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        assertEquals(dockerImage, node1.status().dockerImage().get());\n     }\n \n     @Test\n"}}, {"oid": "a681535b066cfc7c08d54603b811da8e0472736d", "url": "https://github.com/vespa-engine/vespa/commit/a681535b066cfc7c08d54603b811da8e0472736d", "message": "Fixes after code review", "committedDate": "2020-03-19T16:51:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MTAzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395181039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n          \n      \n    \n    \n  \n\n(Changing back to orElseGet() and setting wantedVespaVersion directly)", "author": "freva", "createdAt": "2020-03-19T17:02:27Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,10 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n+                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedVespaVersion\", wantedVespaVersion);", "originalCommit": "a681535b066cfc7c08d54603b811da8e0472736d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e734680099b9482d4acc187a89fa59a0c0faa8d9", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\nindex 6b308a9627..248cfbec66 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n\n@@ -157,10 +157,9 @@ class NodesResponse extends HttpResponse {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n             object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n-                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n-            object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n+                    .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n             toSlime(allocation.requestedResources(), object.setObject(\"requestedResources\"));\n             allocation.networkPorts().ifPresent(ports -> NetworkPortsSerializer.toSlime(ports, object.setArray(\"networkPorts\")));\n             orchestrator.apply(new HostName(node.hostname()))\n"}}, {"oid": "e734680099b9482d4acc187a89fa59a0c0faa8d9", "url": "https://github.com/vespa-engine/vespa/commit/e734680099b9482d4acc187a89fa59a0c0faa8d9", "message": "Update node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n\nCo-Authored-By: Valerij Fredriksen <freva@users.noreply.github.com>", "committedDate": "2020-03-19T17:08:51Z", "type": "commit"}]}