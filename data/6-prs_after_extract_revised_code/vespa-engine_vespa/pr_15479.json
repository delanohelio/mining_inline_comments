{"pr_number": 15479, "pr_title": "Bjorncs/support sanuri rules", "pr_createdAt": "2020-11-26T08:58:04Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15479", "timeline": [{"oid": "64e97d099cb33c32a1c890e734f50c66701b17a6", "url": "https://github.com/vespa-engine/vespa/commit/64e97d099cb33c32a1c890e734f50c66701b17a6", "message": "Encapsulate pattern implementation in RequiredPeerCredential", "committedDate": "2020-11-25T16:52:42Z", "type": "commit"}, {"oid": "340042594187f907968bac445bf2ae085fdb9d45", "url": "https://github.com/vespa-engine/vespa/commit/340042594187f907968bac445bf2ae085fdb9d45", "message": "Add convenience method for adding SAN", "committedDate": "2020-11-25T17:15:07Z", "type": "commit"}, {"oid": "3488082ed378f300c40328891e0ce8dcdd8c4475", "url": "https://github.com/vespa-engine/vespa/commit/3488082ed378f300c40328891e0ce8dcdd8c4475", "message": "Support SAN URI based rules in authorization policies", "committedDate": "2020-11-26T08:57:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAyNzcxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15479#discussion_r531027719", "bodyText": "Consider adding a test of SAN URI mismatching as well", "author": "vekterli", "createdAt": "2020-11-26T13:25:56Z", "path": "security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java", "diffHunk": "@@ -91,12 +96,24 @@ public void must_match_all_cn_and_san_patterns() {\n         PeerAuthorizer peerAuthorizer = createPeerAuthorizer(\n                 createPolicy(POLICY_1, emptySet(), cnSuffixRequirement, cnPrefixRequirement, sanPrefixRequirement, sanSuffixRequirement));\n \n-        assertAuthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", \"matching.prefix.matching.suffix.san\")));\n-        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", \"matching.prefix.invalid.suffix.san\")));\n-        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"invalid.prefix.matching.suffix.cn\", \"matching.prefix.matching.suffix.san\")));\n+        assertAuthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.matching.suffix.san\"), emptyList())));\n+        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.invalid.suffix.san\"), emptyList())));\n+        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"invalid.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.matching.suffix.san\"), emptyList())));\n     }\n \n-    private static X509Certificate createCertificate(String subjectCn, String... sanCns) {\n+    @Test\n+    public void can_exact_match_policy_with_san_uri_pattern() {\n+        RequiredPeerCredential cnRequirement = createRequiredCredential(CN, \"*.matching.cn\");\n+        RequiredPeerCredential sanUriRequirement = createRequiredCredential(SAN_URI, \"myscheme://my/exact/uri\");\n+        PeerAuthorizer authorizer = createPeerAuthorizer(createPolicy(POLICY_1, createRoles(ROLE_1), cnRequirement, sanUriRequirement));\n+\n+        AuthorizationResult result = authorizer.authorizePeer(createCertificate(\"foo.matching.cn\", singletonList(\"foo.irrelevant.san\"), singletonList(\"myscheme://my/exact/uri\")));\n+        assertAuthorized(result);\n+        assertThat(result.assumedRoles()).extracting(Role::name).containsOnly(ROLE_1);\n+        assertThat(result.matchedPolicies()).containsOnly(POLICY_1);", "originalCommit": "3488082ed378f300c40328891e0ce8dcdd8c4475", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b164273f39228b56ad475d257d4c6311d7c18cf", "chunk": "diff --git a/security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java b/security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java\nindex 4440b96409..6fa7207cb9 100644\n--- a/security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java\n+++ b/security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java\n\n@@ -111,6 +111,8 @@ public class PeerAuthorizerTest {\n         assertAuthorized(result);\n         assertThat(result.assumedRoles()).extracting(Role::name).containsOnly(ROLE_1);\n         assertThat(result.matchedPolicies()).containsOnly(POLICY_1);\n+\n+        assertUnauthorized(authorizer.authorizePeer(createCertificate(\"foo.matching.cn\", emptyList(), singletonList(\"myscheme://my/nonmatching/uri\"))));\n     }\n \n     private static X509Certificate createCertificate(String subjectCn, List<String> sanDns, List<String> sanUri) {\n"}}, {"oid": "8b164273f39228b56ad475d257d4c6311d7c18cf", "url": "https://github.com/vespa-engine/vespa/commit/8b164273f39228b56ad475d257d4c6311d7c18cf", "message": "Test that certificate with non-matching SAN URI is rejected", "committedDate": "2020-11-26T13:35:44Z", "type": "commit"}]}