{"pr_number": 11940, "pr_title": "Jvenstad/adaptive deployment job timeout", "pr_createdAt": "2020-01-24T19:44:37Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11940", "timeline": [{"oid": "d844eccc4630693396fd39c33697746b22bdbfbb", "url": "https://github.com/vespa-engine/vespa/commit/d844eccc4630693396fd39c33697746b22bdbfbb", "message": "Time out when no nodes are suspended, or the same node is suspended, for too long", "committedDate": "2020-01-24T16:47:56Z", "type": "commit"}, {"oid": "5257e10908b499a697c6fe3e821353a15ab49ec6", "url": "https://github.com/vespa-engine/vespa/commit/5257e10908b499a697c6fe3e821353a15ab49ec6", "message": "Remove duplicate (but half?) unit test", "committedDate": "2020-01-24T16:48:10Z", "type": "commit"}, {"oid": "3eb2874fc865fe6daa9170f60dd2f13f37930b7e", "url": "https://github.com/vespa-engine/vespa/commit/3eb2874fc865fe6daa9170f60dd2f13f37930b7e", "message": "Test adaptive timeout, and fix comparison >_<", "committedDate": "2020-01-24T17:42:13Z", "type": "commit"}, {"oid": "dcf38adc6fdafccd8c2a7e541ce034bbada75d9e", "url": "https://github.com/vespa-engine/vespa/commit/dcf38adc6fdafccd8c2a7e541ce034bbada75d9e", "message": "Add info about ongoing firmware checks as well", "committedDate": "2020-01-24T19:44:16Z", "type": "commit"}, {"oid": "db8398109702b1af78a8b613e31741fece882ce9", "url": "https://github.com/vespa-engine/vespa/commit/db8398109702b1af78a8b613e31741fece882ce9", "message": "Rename and refactor away code duplication", "committedDate": "2020-01-25T20:05:30Z", "type": "commit"}, {"oid": "91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "url": "https://github.com/vespa-engine/vespa/commit/91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "message": "Treat newly provisioned nodes as allowed to be down", "committedDate": "2020-01-25T20:06:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MzkyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370953921", "bodyText": "Now that I see it - this needs to be called suspendedSinceMillis.", "author": "hakonhall", "createdAt": "2020-01-25T20:23:38Z", "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/noderepository/NodeRepositoryNode.java", "diffHunk": "@@ -76,6 +82,8 @@\n     private NodeHistory[] history;\n     @JsonProperty(\"allowedToBeDown\")\n     private Boolean allowedToBeDown;\n+    @JsonProperty(\"suspendedSince\")", "originalCommit": "91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDgxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370954811", "bodyText": "Fair enough.", "author": "jonmv", "createdAt": "2020-01-25T20:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MzkyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDE1NA==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370954154", "bodyText": "Instead of \"Some nodes\" - write the list or a sample node? (btw, I think you should write a util to convert a list of hosts to String, and write the full list if the number of elements is below some reasonable threshold, while otherwise write a prefix of the list and then something like ... (and X more hosts). You could use this util here.)", "author": "hakonhall", "createdAt": "2020-01-25T20:28:34Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -346,20 +347,48 @@ else if (timedOut(id, deployment.get(), endpointTimeout)) {\n                 return Optional.of(error);\n             }\n         }\n-        controller.jobController().locked(id, lockedRun -> lockedRun.withSummary(summary));\n \n-        if (timedOut(id, deployment.get(), installationTimeout)) {\n+        boolean failed = false;\n+\n+        NodeList suspendedTooLong = nodeList.suspendedSince(controller.clock().instant().minus(installationTimeout));\n+        if ( ! suspendedTooLong.isEmpty()) {\n+            logger.log(INFO, \"Some nodes have been suspended for more than \" + installationTimeout.toMinutes() + \" minutes.\");", "originalCommit": "91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDc2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370954762", "bodyText": "Would the number of allowed down hosts ever exceed this threshold? For the start and end (with failure), I think all ghosts should be printed.", "author": "jonmv", "createdAt": "2020-01-25T20:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1OTMyMg==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370959322", "bodyText": "Possibly - I'm just thinking such a util might be used to dump out a lot of hosts - like all hosts or all but a few - but if that's not possible there is no point is making it complicated.", "author": "hakonhall", "createdAt": "2020-01-25T22:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDE1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDI1MQ==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370954251", "bodyText": "Should probably add some advise on what the customer should do next when the deployment fails?", "author": "hakonhall", "createdAt": "2020-01-25T20:30:42Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -346,20 +347,48 @@ else if (timedOut(id, deployment.get(), endpointTimeout)) {\n                 return Optional.of(error);\n             }\n         }\n-        controller.jobController().locked(id, lockedRun -> lockedRun.withSummary(summary));\n \n-        if (timedOut(id, deployment.get(), installationTimeout)) {\n+        boolean failed = false;\n+\n+        NodeList suspendedTooLong = nodeList.suspendedSince(controller.clock().instant().minus(installationTimeout));\n+        if ( ! suspendedTooLong.isEmpty()) {\n+            logger.log(INFO, \"Some nodes have been suspended for more than \" + installationTimeout.toMinutes() + \" minutes.\");\n+            failed = true;\n+        }\n+\n+        if (run.noNodesDownSince()\n+               .map(since -> since.isBefore(controller.clock().instant().minus(installationTimeout)))\n+               .orElse(false)) {\n+            if (summary.needPlatformUpgrade() > 0 || summary.needReboot() > 0 || summary.needRestart() > 0)\n+                logger.log(INFO, \"No nodes allowed to suspend to progress installation for \" + installationTimeout.toMinutes() + \" minutes.\");\n+            else\n+                logger.log(INFO, \"Nodes not able to start with new application package.\");\n+            failed = true;\n+        }\n+\n+        Duration timeout = JobRunner.jobTimeout.minusHours(1); // Time out before job dies.\n+        if (timedOut(id, deployment.get(), timeout)) {\n+            logger.log(INFO, \"Installation failed to complete within \" + timeout.toHours() + \"hours!\");", "originalCommit": "91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDc3OA==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370954778", "bodyText": "Yes.", "author": "jonmv", "createdAt": "2020-01-25T20:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDI1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4NDA2Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11940#discussion_r370984063", "bodyText": "Argh, forgot the previous, with 11 entries, was merged already >_<", "author": "jonmv", "createdAt": "2020-01-26T09:13:29Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RunSerializer.java", "diffHunk": "@@ -180,8 +180,8 @@ private ApplicationVersion applicationVersionFrom(Inspector versionObject) {\n         if ( ! summaryArray.valid())\n             return Optional.empty();\n \n-        if (summaryArray.entries() != 11)\n-            throw new IllegalArgumentException(\"Convergence summary must have 11 entries\");\n+        if (summaryArray.entries() != 12)\n+            throw new IllegalArgumentException(\"Convergence summary must have 12 entries\");", "originalCommit": "91d5b1c4b828b8c8a85c40ed0a507533e7c2aa47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}