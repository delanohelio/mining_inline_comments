{"pr_number": 11903, "pr_title": "Implement /routing/v1/ API", "pr_createdAt": "2020-01-23T11:44:27Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11903", "timeline": [{"oid": "c3f347d7b524307cb1486500b80359221c13d05b", "url": "https://github.com/vespa-engine/vespa/commit/c3f347d7b524307cb1486500b80359221c13d05b", "message": "Simplify MessageResponse", "committedDate": "2020-01-23T11:43:54Z", "type": "commit"}, {"oid": "fd801a574e9c452ad09a5198106f2a1517094def", "url": "https://github.com/vespa-engine/vespa/commit/fd801a574e9c452ad09a5198106f2a1517094def", "message": "Implement /routing/v1/ API", "committedDate": "2020-01-23T11:43:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzE2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/11903#discussion_r370133165", "bodyText": "Nit: wouldn't it be more succinct if the parameter to this method was the enum constant? You could just print it(s name) in the output, as well.", "author": "jonmv", "createdAt": "2020-01-23T14:01:29Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/routing/RoutingApiHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.restapi.routing;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.config.provision.zone.ZoneId;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import com.yahoo.restapi.Path;\n+import com.yahoo.restapi.SlimeJsonResponse;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.vespa.hosted.controller.Controller;\n+import com.yahoo.vespa.hosted.controller.api.identifiers.DeploymentId;\n+import com.yahoo.vespa.hosted.controller.auditlog.AuditLoggingRequestHandler;\n+import com.yahoo.vespa.hosted.controller.routing.GlobalRouting;\n+import com.yahoo.vespa.hosted.controller.routing.RoutingPolicy;\n+import com.yahoo.vespa.hosted.controller.routing.RoutingPolicyId;\n+import com.yahoo.vespa.hosted.controller.routing.ZoneRoutingPolicy;\n+import com.yahoo.yolean.Exceptions;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+\n+/**\n+ * This implements the /routing/v1 API, which provides operator with global routing control at both zone- and\n+ * deployment-level.\n+ *\n+ * @author mpolden\n+ */\n+// TODO(mpolden): Add support for zones/deployments using rotations.\n+public class RoutingApiHandler extends AuditLoggingRequestHandler {\n+\n+    private final Controller controller;\n+\n+    public RoutingApiHandler(Context ctx, Controller controller) {\n+        super(ctx, controller.auditLogger());\n+        this.controller = Objects.requireNonNull(controller, \"controller must be non-null\");\n+    }\n+\n+    @Override\n+    public HttpResponse auditAndHandle(HttpRequest request) {\n+        try {\n+            var path = new Path(request.getUri());\n+            switch (request.getMethod()) {\n+                case GET: return get(path);\n+                case POST: return post(path);\n+                case DELETE: return delete(path);\n+                default: return ErrorResponse.methodNotAllowed(\"Method '\" + request.getMethod() + \"' is not supported\");\n+            }\n+        } catch (IllegalArgumentException e) {\n+            return ErrorResponse.badRequest(Exceptions.toMessageString(e));\n+        } catch (RuntimeException e) {\n+            log.log(Level.WARNING, \"Unexpected error handling '\" + request.getUri() + \"'\", e);\n+            return ErrorResponse.internalServerError(Exceptions.toMessageString(e));\n+        }\n+    }\n+\n+    private HttpResponse delete(Path path) {\n+        if (path.matches(\"/routing/v1/inactive/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return setDeploymentStatus(path, true);\n+        if (path.matches(\"/routing/v1/inactive/environment/{environment}/region/{region}\")) return setZoneStatus(path, true);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse post(Path path) {\n+        if (path.matches(\"/routing/v1/inactive/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return setDeploymentStatus(path, false);\n+        if (path.matches(\"/routing/v1/inactive/environment/{environment}/region/{region}\")) return setZoneStatus(path, false);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse get(Path path) {\n+        if (path.matches(\"/routing/v1/status/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return deploymentStatus(path);\n+        if (path.matches(\"/routing/v1/status/environment/{environment}/region/{region}\")) return zoneStatus(path);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse setZoneStatus(Path path, boolean in) {\n+        var zone = zoneFrom(path);\n+        var status = in ? GlobalRouting.Status.in : GlobalRouting.Status.out;", "originalCommit": "fd801a574e9c452ad09a5198106f2a1517094def", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzIwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/11903#discussion_r370147209", "bodyText": "Maybe, will consider it in next PR. Realised I have to resolve the TODO I added here now anyway. \ud83d\ude1e", "author": "mpolden", "createdAt": "2020-01-23T14:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzE2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMzQxOA==", "url": "https://github.com/vespa-engine/vespa/pull/11903#discussion_r370133418", "bodyText": "Same.", "author": "jonmv", "createdAt": "2020-01-23T14:01:54Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/routing/RoutingApiHandler.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.restapi.routing;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.config.provision.zone.ZoneId;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import com.yahoo.restapi.Path;\n+import com.yahoo.restapi.SlimeJsonResponse;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.vespa.hosted.controller.Controller;\n+import com.yahoo.vespa.hosted.controller.api.identifiers.DeploymentId;\n+import com.yahoo.vespa.hosted.controller.auditlog.AuditLoggingRequestHandler;\n+import com.yahoo.vespa.hosted.controller.routing.GlobalRouting;\n+import com.yahoo.vespa.hosted.controller.routing.RoutingPolicy;\n+import com.yahoo.vespa.hosted.controller.routing.RoutingPolicyId;\n+import com.yahoo.vespa.hosted.controller.routing.ZoneRoutingPolicy;\n+import com.yahoo.yolean.Exceptions;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+\n+/**\n+ * This implements the /routing/v1 API, which provides operator with global routing control at both zone- and\n+ * deployment-level.\n+ *\n+ * @author mpolden\n+ */\n+// TODO(mpolden): Add support for zones/deployments using rotations.\n+public class RoutingApiHandler extends AuditLoggingRequestHandler {\n+\n+    private final Controller controller;\n+\n+    public RoutingApiHandler(Context ctx, Controller controller) {\n+        super(ctx, controller.auditLogger());\n+        this.controller = Objects.requireNonNull(controller, \"controller must be non-null\");\n+    }\n+\n+    @Override\n+    public HttpResponse auditAndHandle(HttpRequest request) {\n+        try {\n+            var path = new Path(request.getUri());\n+            switch (request.getMethod()) {\n+                case GET: return get(path);\n+                case POST: return post(path);\n+                case DELETE: return delete(path);\n+                default: return ErrorResponse.methodNotAllowed(\"Method '\" + request.getMethod() + \"' is not supported\");\n+            }\n+        } catch (IllegalArgumentException e) {\n+            return ErrorResponse.badRequest(Exceptions.toMessageString(e));\n+        } catch (RuntimeException e) {\n+            log.log(Level.WARNING, \"Unexpected error handling '\" + request.getUri() + \"'\", e);\n+            return ErrorResponse.internalServerError(Exceptions.toMessageString(e));\n+        }\n+    }\n+\n+    private HttpResponse delete(Path path) {\n+        if (path.matches(\"/routing/v1/inactive/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return setDeploymentStatus(path, true);\n+        if (path.matches(\"/routing/v1/inactive/environment/{environment}/region/{region}\")) return setZoneStatus(path, true);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse post(Path path) {\n+        if (path.matches(\"/routing/v1/inactive/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return setDeploymentStatus(path, false);\n+        if (path.matches(\"/routing/v1/inactive/environment/{environment}/region/{region}\")) return setZoneStatus(path, false);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse get(Path path) {\n+        if (path.matches(\"/routing/v1/status/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}\")) return deploymentStatus(path);\n+        if (path.matches(\"/routing/v1/status/environment/{environment}/region/{region}\")) return zoneStatus(path);\n+        return ErrorResponse.notFoundError(\"Nothing at \" + path);\n+    }\n+\n+    private HttpResponse setZoneStatus(Path path, boolean in) {\n+        var zone = zoneFrom(path);\n+        var status = in ? GlobalRouting.Status.in : GlobalRouting.Status.out;\n+        controller.applications().routingPolicies().setGlobalRoutingStatus(zone, status);\n+        return new MessageResponse(\"Set global routing status for deployments in \" + zone + \" to '\" +\n+                                   (in ? \"in\" : \"out\") + \"'\");\n+    }\n+\n+    private HttpResponse zoneStatus(Path path) {\n+        var zone = zoneFrom(path);\n+        var slime = new Slime();\n+        var root = slime.setObject();\n+        var zonePolicy = controller.applications().routingPolicies().get(zone);\n+        zoneStatusToSlime(root, zonePolicy);\n+        return new SlimeJsonResponse(slime);\n+    }\n+\n+    private HttpResponse setDeploymentStatus(Path path, boolean in) {\n+        var deployment = deploymentFrom(path);\n+        routingPoliciesOf(deployment);\n+        var status = in ? GlobalRouting.Status.in : GlobalRouting.Status.out;", "originalCommit": "fd801a574e9c452ad09a5198106f2a1517094def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}