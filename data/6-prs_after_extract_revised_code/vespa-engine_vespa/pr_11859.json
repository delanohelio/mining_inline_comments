{"pr_number": 11859, "pr_title": "Support overriding global routing status of routing policies", "pr_createdAt": "2020-01-20T13:31:06Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11859", "timeline": [{"oid": "9e56be6568b68f1e2dd6e7c5e4fdb703f8a4060e", "url": "https://github.com/vespa-engine/vespa/commit/9e56be6568b68f1e2dd6e7c5e4fdb703f8a4060e", "message": "Rename active -> loadBalancerActive", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "bcef3c0b55b9cb153b62bd85e3ec0c8232441a7e", "url": "https://github.com/vespa-engine/vespa/commit/bcef3c0b55b9cb153b62bd85e3ec0c8232441a7e", "message": "Remove support for legacy serialized format", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "08c3555d2f4e6547a7ed26334aaaa5aa6536df47", "url": "https://github.com/vespa-engine/vespa/commit/08c3555d2f4e6547a7ed26334aaaa5aa6536df47", "message": "Improve names", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "2ac7dbe56cf00751164c14d711e3466509c782c5", "url": "https://github.com/vespa-engine/vespa/commit/2ac7dbe56cf00751164c14d711e3466509c782c5", "message": "Move RoutingPolicies to routing package", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "9ea2ad3c3f2cd7ec9e0f44150937b06e63bda5e9", "url": "https://github.com/vespa-engine/vespa/commit/9ea2ad3c3f2cd7ec9e0f44150937b06e63bda5e9", "message": "Move RoutingPolicy to routing package", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "63ce305d9728e7a8676b75f8263da0b08e5c4d4e", "url": "https://github.com/vespa-engine/vespa/commit/63ce305d9728e7a8676b75f8263da0b08e5c4d4e", "message": "Move RoutingId to routing package", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "fbe39b00eab82c561bd6a531e0c27b547c85210d", "url": "https://github.com/vespa-engine/vespa/commit/fbe39b00eab82c561bd6a531e0c27b547c85210d", "message": "Extract RoutingPolicyId", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "ff5cb1626ae172aba997b9af67f5765d195b805c", "url": "https://github.com/vespa-engine/vespa/commit/ff5cb1626ae172aba997b9af67f5765d195b805c", "message": "Group routing policies by RoutingPolicyId", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "94af145a942bd38b4e8029b8f508822b5cf8bd84", "url": "https://github.com/vespa-engine/vespa/commit/94af145a942bd38b4e8029b8f508822b5cf8bd84", "message": "Extract Status", "committedDate": "2020-01-20T12:19:08Z", "type": "commit"}, {"oid": "ce49e6b13b713a14439dd6e5dc4f398a986bb309", "url": "https://github.com/vespa-engine/vespa/commit/ce49e6b13b713a14439dd6e5dc4f398a986bb309", "message": "Simplify test code using routing policies", "committedDate": "2020-01-20T12:19:48Z", "type": "commit"}, {"oid": "aa8452b6d0c60c45a77e205cd0adac0a02ed1dd4", "url": "https://github.com/vespa-engine/vespa/commit/aa8452b6d0c60c45a77e205cd0adac0a02ed1dd4", "message": "Remove unused imports", "committedDate": "2020-01-20T12:19:48Z", "type": "commit"}, {"oid": "713fe22418654aa88b22232f8d20e96c7e69aa24", "url": "https://github.com/vespa-engine/vespa/commit/713fe22418654aa88b22232f8d20e96c7e69aa24", "message": "Support overriding global endpoint status at deployment level", "committedDate": "2020-01-20T13:26:13Z", "type": "commit"}, {"oid": "e57e76ef56dd38731f080aa0477708f547b39307", "url": "https://github.com/vespa-engine/vespa/commit/e57e76ef56dd38731f080aa0477708f547b39307", "message": "Support overriding global endpoint status at zone level", "committedDate": "2020-01-20T13:26:31Z", "type": "commit"}, {"oid": "3d0f3aef927403f6e4ac80b35edc99db2923ed0f", "url": "https://github.com/vespa-engine/vespa/commit/3d0f3aef927403f6e4ac80b35edc99db2923ed0f", "message": "Support overriding global routing status through deployment.xml", "committedDate": "2020-01-20T13:26:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxMDY4OQ==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368910689", "bodyText": "They should not happen - but consider ID collisions?", "author": "oyving", "createdAt": "2020-01-21T10:09:09Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java", "diffHunk": "@@ -57,22 +59,23 @@ public Slime toSlime(Set<RoutingPolicy> routingPolicies) {\n         return slime;\n     }\n \n-    public Set<RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n-        var policies = new LinkedHashSet<RoutingPolicy>();\n+    public Map<RoutingPolicyId, RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n+        var policies = new LinkedHashMap<RoutingPolicyId, RoutingPolicy>();\n         var root = slime.get();\n         var field = root.field(routingPoliciesField);\n         field.traverse((ArrayTraverser) (i, inspect) -> {\n             var endpointIds = new LinkedHashSet<EndpointId>();\n             inspect.field(rotationsField).traverse((ArrayTraverser) (j, endpointId) -> endpointIds.add(EndpointId.of(endpointId.asString())));\n-            policies.add(new RoutingPolicy(new RoutingPolicyId(owner,\n-                                                               ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n-                                                               ZoneId.from(inspect.field(zoneField).asString())),\n-                                           HostName.from(inspect.field(canonicalNameField).asString()),\n-                                           Serializers.optionalString(inspect.field(dnsZoneField)),\n-                                           endpointIds,\n-                                           inspect.field(loadBalancerActiveField).asBool()));\n+            var id = new RoutingPolicyId(owner,\n+                                         ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n+                                         ZoneId.from(inspect.field(zoneField).asString()));\n+            policies.put(id, new RoutingPolicy(id,\n+                                               HostName.from(inspect.field(canonicalNameField).asString()),\n+                                               Serializers.optionalString(inspect.field(dnsZoneField)),\n+                                               endpointIds,\n+                                               inspect.field(loadBalancerActiveField).asBool()));", "originalCommit": "ff5cb1626ae172aba997b9af67f5765d195b805c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTE5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368999191", "bodyText": "The data read here is the result of toSlime(Map<RoutingPolicyId, RoutingPolicy>), so collisions can only occur if toSlime somehow writes the same cluster+zone pair more than once or if an external entity messes with the ZK data. The former is covered by RoutingPolicySerializerTest.", "author": "mpolden", "createdAt": "2020-01-21T13:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxMDY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java\nindex 0e9b91b6ba..36f1387cce 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java\n\n@@ -54,7 +62,8 @@ public class RoutingPolicySerializer {\n             policy.endpoints().forEach(endpointId -> {\n                 rotationArray.addString(endpointId.id());\n             });\n-            policyObject.setBool(loadBalancerActiveField, policy.loadBalancerActive());\n+            policyObject.setBool(loadBalancerActiveField, policy.status().loadBalancerActive());\n+            globalRoutingToSlime(policy.status().globalRouting(), policyObject.setObject(globalRoutingField));\n         });\n         return slime;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNjUwMA==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368916500", "bodyText": "This method returns nothing.", "author": "oyving", "createdAt": "2020-01-21T10:20:46Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java", "diffHunk": "@@ -103,15 +104,11 @@ private void registerEndpointsInDns(AllocatedLoadBalancers loadBalancers, @Suppr\n \n     /** Store routing policies for given route. Returns the persisted policies. */", "originalCommit": "ff5cb1626ae172aba997b9af67f5765d195b805c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java\nindex 2b32321bc6..c05152e779 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java\n\n@@ -73,67 +74,110 @@ public class RoutingPolicies {\n      */\n     public void refresh(ApplicationId application, DeploymentSpec deploymentSpec, ZoneId zone) {\n         if (!controller.zoneRegistry().zones().directlyRouted().ids().contains(zone)) return;\n-        var lbs = new AllocatedLoadBalancers(application, zone, controller.serviceRegistry().configServer().getLoadBalancers(application, zone),\n-                                             deploymentSpec);\n+        var loadBalancers = new AllocatedLoadBalancers(application, zone, controller.serviceRegistry().configServer()\n+                                                                                    .getLoadBalancers(application, zone),\n+                                                       deploymentSpec);\n+        var inactiveZones = inactiveZones(application, deploymentSpec);\n         try (var lock = db.lockRoutingPolicies()) {\n-            removeObsoleteEndpointsFromDns(lbs, lock);\n-            storePoliciesOf(lbs, lock);\n-            removeObsoletePolicies(lbs, lock);\n-            registerEndpointsInDns(lbs, lock);\n+            removeGlobalDnsUnreferencedBy(loadBalancers, lock);\n+            storePoliciesOf(loadBalancers, lock);\n+            removePoliciesUnreferencedBy(loadBalancers, lock);\n+            updateGlobalDnsOf(get(loadBalancers.application).values(), inactiveZones, lock);\n         }\n     }\n \n-    /** Create global endpoints for given route, if any */\n-    private void registerEndpointsInDns(AllocatedLoadBalancers loadBalancers, @SuppressWarnings(\"unused\") Lock lock) {\n-        Map<RoutingId, List<RoutingPolicy>> routingTable = routingTableFrom(get(loadBalancers.application).values());\n+    /** Set the status of all global endpoints in given zone */\n+    public void setGlobalRoutingStatus(ZoneId zone, GlobalRouting.Status status) {\n+        try (var lock = db.lockRoutingPolicies()) {\n+            db.writeZoneRoutingPolicy(new ZoneRoutingPolicy(zone, GlobalRouting.status(status, GlobalRouting.Agent.operator,\n+                                                                                       controller.clock().instant())));\n+            var allPolicies = db.readRoutingPolicies();\n+            for (var applicationPolicies : allPolicies.values()) {\n+                updateGlobalDnsOf(applicationPolicies.values(), Set.of(), lock);\n+            }\n+        }\n+    }\n+\n+    /** Set the status of all global endpoints for given deployment */\n+    public void setGlobalRoutingStatus(DeploymentId deployment, GlobalRouting.Status status, GlobalRouting.Agent agent) {\n+        try (var lock = db.lockRoutingPolicies()) {\n+            var policies = get(deployment.applicationId());\n+            var newPolicies = new LinkedHashMap<>(policies);\n+            for (var policy : policies.values()) {\n+                if (!policy.id().zone().equals(deployment.zoneId())) continue; // Wrong zone\n+                var newPolicy = policy.with(policy.status().with(GlobalRouting.status(status, agent,\n+                                                                                      controller.clock().instant())));\n+                newPolicies.put(policy.id(), newPolicy);\n+            }\n+            db.writeRoutingPolicies(deployment.applicationId(), newPolicies);\n+            updateGlobalDnsOf(newPolicies.values(), Set.of(), lock);\n+        }\n+    }\n \n+    /** Update global DNS record for given policies */\n+    private void updateGlobalDnsOf(Collection<RoutingPolicy> routingPolicies, Set<ZoneId> inactiveZones, @SuppressWarnings(\"unused\") Lock lock) {\n         // Create DNS record for each routing ID\n+        var routingTable = routingTableFrom(routingPolicies);\n         for (Map.Entry<RoutingId, List<RoutingPolicy>> routeEntry : routingTable.entrySet()) {\n-            Endpoint endpoint = RoutingPolicy.globalEndpointOf(routeEntry.getKey().application(), routeEntry.getKey().endpointId(),\n-                                                               controller.system());\n-            Set<AliasTarget> targets = routeEntry.getValue()\n-                                                 .stream()\n-                                                 .filter(policy -> policy.dnsZone().isPresent())\n-                                                 .map(policy -> new AliasTarget(policy.canonicalName(),\n-                                                                                policy.dnsZone().get(),\n-                                                                                policy.id().zone()))\n-                                                 .collect(Collectors.toSet());\n-            controller.nameServiceForwarder().createAlias(RecordName.from(endpoint.dnsName()), targets, Priority.normal);\n+            var targets = new LinkedHashSet<AliasTarget>();\n+            var staleTargets = new LinkedHashSet<AliasTarget>();\n+            for (var policy : routeEntry.getValue()) {\n+                if (policy.dnsZone().isEmpty()) continue;\n+                var target = new AliasTarget(policy.canonicalName(), policy.dnsZone().get(), policy.id().zone());\n+                var zonePolicy = db.readZoneRoutingPolicy(policy.id().zone());\n+                // Remove target zone if global routing status is set out at:\n+                // - zone level (ZoneRoutingPolicy)\n+                // - deployment level (RoutingPolicy)\n+                // - application package level (deployment.xml)\n+                if (anyOut(zonePolicy.globalRouting(), policy.status().globalRouting()) ||\n+                    inactiveZones.contains(policy.id().zone())) {\n+                    staleTargets.add(target);\n+                } else {\n+                    targets.add(target);\n+                }\n+            }\n+            if (!targets.isEmpty()) {\n+                var endpoint = RoutingPolicy.globalEndpointOf(routeEntry.getKey().application(),\n+                                                              routeEntry.getKey().endpointId(), controller.system());\n+                controller.nameServiceForwarder().createAlias(RecordName.from(endpoint.dnsName()), targets, Priority.normal);\n+            }\n+            staleTargets.forEach(t -> controller.nameServiceForwarder().removeRecords(Record.Type.ALIAS, t.asData(), Priority.normal));\n         }\n     }\n \n-    /** Store routing policies for given route. Returns the persisted policies. */\n+    /** Store routing policies for given load balancers */\n     private void storePoliciesOf(AllocatedLoadBalancers loadBalancers, @SuppressWarnings(\"unused\") Lock lock) {\n         var policies = new LinkedHashMap<>(get(loadBalancers.application));\n         for (LoadBalancer loadBalancer : loadBalancers.list) {\n-            var endpointIds = loadBalancers.endpointIdsOf(loadBalancer);\n-            var policy = createPolicy(loadBalancers.application, loadBalancers.zone, loadBalancer, endpointIds);\n-            policies.put(policy.id(), policy);\n+            var policyId = new RoutingPolicyId(loadBalancer.application(), loadBalancer.cluster(), loadBalancers.zone);\n+            var existingPolicy = policies.get(policyId);\n+            var newPolicy = new RoutingPolicy(policyId, loadBalancer.hostname(), loadBalancer.dnsZone(),\n+                                              loadBalancers.endpointIdsOf(loadBalancer),\n+                                              new Status(isActive(loadBalancer), GlobalRouting.DEFAULT_STATUS));\n+            // Preserve global routing status for existing policy\n+            if (existingPolicy != null) {\n+                newPolicy = newPolicy.with(newPolicy.status().with(existingPolicy.status().globalRouting()));\n+            }\n+            updateZoneDnsOf(newPolicy);\n+            policies.put(newPolicy.id(), newPolicy);\n         }\n         db.writeRoutingPolicies(loadBalancers.application, policies);\n     }\n \n-    /** Create a policy for given load balancer and register a CNAME for it */\n-    private RoutingPolicy createPolicy(ApplicationId application, ZoneId zone, LoadBalancer loadBalancer,\n-                                       Set<EndpointId> endpointIds) {\n-        var routingPolicy = new RoutingPolicy(new RoutingPolicyId(application, loadBalancer.cluster(), zone),\n-                                              loadBalancer.hostname(),\n-                                              loadBalancer.dnsZone(), endpointIds, isActive(loadBalancer));\n-        var name = RecordName.from(routingPolicy.endpointIn(controller.system()).dnsName());\n-        var data = RecordData.fqdn(loadBalancer.hostname().value());\n+    /** Update zone DNS record for given policy */\n+    private void updateZoneDnsOf(RoutingPolicy policy) {\n+        var name = RecordName.from(policy.endpointIn(controller.system()).dnsName());\n+        var data = RecordData.fqdn(policy.canonicalName().value());\n         controller.nameServiceForwarder().createCname(name, data, Priority.normal);\n-        return routingPolicy;\n     }\n \n-    /** Remove obsolete policies for given route and their CNAME records */\n-    private void removeObsoletePolicies(AllocatedLoadBalancers loadBalancers, @SuppressWarnings(\"unused\") Lock lock) {\n+    /** Remove policies and zone DNS records unreferenced by given load balancers */\n+    private void removePoliciesUnreferencedBy(AllocatedLoadBalancers loadBalancers, @SuppressWarnings(\"unused\") Lock lock) {\n         var policies = get(loadBalancers.application);\n         var newPolicies = new LinkedHashMap<>(policies);\n-        var activeLoadBalancers = loadBalancers.list.stream()\n-                                                    .map(LoadBalancer::hostname)\n-                                                    .collect(Collectors.toSet());\n+        var activeLoadBalancers = loadBalancers.list.stream().map(LoadBalancer::hostname).collect(Collectors.toSet());\n         for (var policy : policies.values()) {\n-            // Skip active load balancers and irrelevant zones from candidates\n+            // Leave active load balancers and irrelevant zones alone\n             if (activeLoadBalancers.contains(policy.canonicalName()) ||\n                 !policy.id().zone().equals(loadBalancers.zone)) continue;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTU4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368939583", "bodyText": "isActive() instead?", "author": "oyving", "createdAt": "2020-01-21T11:08:20Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.routing;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the status of a routing policy.\n+ *\n+ * This is immutable.\n+ *\n+ * @author mpolden\n+ */\n+public class Status {\n+\n+    private final boolean loadBalancerActive;\n+\n+    /** DO NOT USE. Public for serialization purposes */\n+    public Status(boolean loadBalancerActive) {\n+        this.loadBalancerActive = loadBalancerActive;\n+    }\n+\n+    /** Returns whether the load balancer is active in node repository */\n+    public boolean loadBalancerActive() {", "originalCommit": "94af145a942bd38b4e8029b8f508822b5cf8bd84", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\nindex 79c971f56f..c5c668b19c 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\n\n@@ -13,10 +13,12 @@ import java.util.Objects;\n public class Status {\n \n     private final boolean loadBalancerActive;\n+    private final GlobalRouting globalRouting;\n \n     /** DO NOT USE. Public for serialization purposes */\n-    public Status(boolean loadBalancerActive) {\n+    public Status(boolean loadBalancerActive, GlobalRouting globalRouting) {\n         this.loadBalancerActive = loadBalancerActive;\n+        this.globalRouting = Objects.requireNonNull(globalRouting, \"globalRouting must be non-null\");\n     }\n \n     /** Returns whether the load balancer is active in node repository */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDUzOA==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368940538", "bodyText": "Call this LoadBalancerStatus? Or were we thinking of putting other things in the Status class in the future?", "author": "oyving", "createdAt": "2020-01-21T11:10:25Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.routing;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the status of a routing policy.\n+ *\n+ * This is immutable.\n+ *\n+ * @author mpolden\n+ */\n+public class Status {", "originalCommit": "94af145a942bd38b4e8029b8f508822b5cf8bd84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5Mjc5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368992791", "bodyText": "It's two things now: Load balancer active status and global routing status.", "author": "mpolden", "createdAt": "2020-01-21T13:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDUzOA=="}], "type": "inlineReview", "revised_code": {"commit": "7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\nindex 79c971f56f..c5c668b19c 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java\n\n@@ -13,10 +13,12 @@ import java.util.Objects;\n public class Status {\n \n     private final boolean loadBalancerActive;\n+    private final GlobalRouting globalRouting;\n \n     /** DO NOT USE. Public for serialization purposes */\n-    public Status(boolean loadBalancerActive) {\n+    public Status(boolean loadBalancerActive, GlobalRouting globalRouting) {\n         this.loadBalancerActive = loadBalancerActive;\n+        this.globalRouting = Objects.requireNonNull(globalRouting, \"globalRouting must be non-null\");\n     }\n \n     /** Returns whether the load balancer is active in node repository */\n"}}, {"oid": "7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "url": "https://github.com/vespa-engine/vespa/commit/7fcbf34f69c7dc00688fd2d1f2ba6f2e621f87c0", "message": "Fix stale javadoc", "committedDate": "2020-01-21T13:32:10Z", "type": "commit"}, {"oid": "31a68b6e3f8ffc601bdb4573b6df148175eaf5af", "url": "https://github.com/vespa-engine/vespa/commit/31a68b6e3f8ffc601bdb4573b6df148175eaf5af", "message": "Rename loadBalancerActive -> isActive", "committedDate": "2020-01-21T13:32:27Z", "type": "commit"}, {"oid": "c5bbc53a26674ed11ebc342e2f7470a7eb5342e6", "url": "https://github.com/vespa-engine/vespa/commit/c5bbc53a26674ed11ebc342e2f7470a7eb5342e6", "message": "Test legacy format", "committedDate": "2020-01-21T13:43:00Z", "type": "commit"}]}