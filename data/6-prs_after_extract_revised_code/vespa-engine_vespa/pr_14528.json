{"pr_number": 14528, "pr_title": "Expose locks info in REST API", "pr_createdAt": "2020-09-24T11:53:46Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14528", "timeline": [{"oid": "069716d610dbea6fa58e009cac8c5495c5e7d06d", "url": "https://github.com/vespa-engine/vespa/commit/069716d610dbea6fa58e009cac8c5495c5e7d06d", "message": "Expose locks info in REST API", "committedDate": "2020-09-24T11:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MzYxOA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494283618", "bodyText": "Is this done to track the re-entry count?", "author": "mpolden", "createdAt": "2020-09-24T12:40:01Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/ThreadLockInfo.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Consumer;\n+\n+/**\n+ * This class contains process-wide statistics and information related to acquiring and releasing\n+ * {@link Lock}.  Instances of this class contain information tied to a specific thread and lock path.\n+ *\n+ * <p>Instances of this class are thread-safe as long as foreign threads (!= this.thread) avoid mutable methods.</p>\n+ */\n+public class ThreadLockInfo {\n+\n+    private static final ConcurrentHashMap<Thread, ThreadLockInfo> locks = new ConcurrentHashMap<>();\n+\n+    private static final int MAX_COMPLETED_LOCK_INFOS_SIZE = 10;\n+    private static final ConcurrentLinkedDeque<LockInfo> completedLockInfos = new ConcurrentLinkedDeque<>();\n+\n+    private static final AtomicInteger invokeAcquireCount = new AtomicInteger(0);\n+    private static final AtomicInteger inCriticalRegionCount = new AtomicInteger(0);\n+    private static final AtomicInteger acquireTimedOutCount = new AtomicInteger(0);\n+    private static final AtomicInteger lockAcquiredCount = new AtomicInteger(0);\n+    private static final AtomicInteger locksReleasedCount = new AtomicInteger(0);\n+\n+    private static final AtomicInteger failedToAcquireReentrantLockCount = new AtomicInteger(0);\n+    private static final AtomicInteger noLocksErrorCount = new AtomicInteger(0);\n+    private static final AtomicInteger timeoutOnReentrancyErrorCount = new AtomicInteger(0);\n+\n+    private final Thread thread;\n+    private final String lockPath;\n+    private final ReentrantLock lock;\n+\n+    /** The locks are reentrant so there may be more than 1 lock for this thread. */\n+    private final ConcurrentLinkedQueue<LockInfo> lockInfos = new ConcurrentLinkedQueue<>();\n+\n+    public static int invokeAcquireCount() { return invokeAcquireCount.get(); }\n+    public static int inCriticalRegionCount() { return inCriticalRegionCount.get(); }\n+    public static int acquireTimedOutCount() { return acquireTimedOutCount.get(); }\n+    public static int lockAcquiredCount() { return lockAcquiredCount.get(); }\n+    public static int locksReleasedCount() { return locksReleasedCount.get(); }\n+    public static int noLocksErrorCount() { return noLocksErrorCount.get(); }\n+    public static int failedToAcquireReentrantLockCount() { return failedToAcquireReentrantLockCount.get(); }\n+    public static int timeoutOnReentrancyErrorCount() { return timeoutOnReentrancyErrorCount.get(); }\n+    public static List<ThreadLockInfo> getThreadLockInfos() { return List.copyOf(locks.values()); }\n+\n+    /** Returns the per-thread singleton ThreadLockInfo. */\n+    static ThreadLockInfo getCurrentThreadLockInfo(String lockPath, ReentrantLock lock) {\n+        return locks.computeIfAbsent(\n+                Thread.currentThread(),\n+                currentThread -> new ThreadLockInfo(currentThread, lockPath, lock));\n+    }\n+\n+    ThreadLockInfo(Thread currentThread, String lockPath, ReentrantLock lock) {\n+        this.thread = currentThread;\n+        this.lockPath = lockPath;\n+        this.lock = lock;\n+    }\n+\n+    public String getThreadName() { return thread.getName(); }\n+    public String getLockPath() { return lockPath; }\n+    public List<LockInfo> getLockInfos() { return List.copyOf(lockInfos); }\n+\n+    /** Mutable method (see class doc) */\n+    void invokingAcquire(Duration timeout) {\n+        invokeAcquireCount.incrementAndGet();\n+        inCriticalRegionCount.incrementAndGet();\n+        lockInfos.add(LockInfo.invokingAcquire(lock.getHoldCount(), timeout));", "originalCommit": "069716d610dbea6fa58e009cac8c5495c5e7d06d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5Nzk3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494297973", "bodyText": "The getHoldCount() ? Yes - just to sanity-check it", "author": "hakonhall", "createdAt": "2020-09-24T13:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/ThreadLockInfo.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java\nsimilarity index 57%\nrename from zkfacade/src/main/java/com/yahoo/vespa/curator/ThreadLockInfo.java\nrename to zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java\nindex 9fbcb550dd..bba39e6dc4 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/ThreadLockInfo.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java\n\n@@ -1,8 +1,11 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n-package com.yahoo.vespa.curator;\n+package com.yahoo.vespa.curator.stats;\n+\n+import com.yahoo.vespa.curator.Lock;\n \n import java.time.Duration;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentLinkedDeque;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NzA5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494287093", "bodyText": "Maybe LockMetrics is a better name for this?", "author": "mpolden", "createdAt": "2020-09-24T12:45:51Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/LockInfo.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+/**\n+ * Information about a lock.\n+ *\n+ * <p>Should be mutated by a single thread.  Other threads may see an inconsistent state of this instance.</p>\n+ */\n+public class LockInfo {", "originalCommit": "069716d610dbea6fa58e009cac8c5495c5e7d06d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMDIyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494300221", "bodyText": "Hm, adding a LockCounters now with all the AtomicIntegers - hold on to this thought until you see that: Perhaps that should be called LockMetrics?  Although we are also adding metrics later, and those classes tend to be named *Metrics.", "author": "hakonhall", "createdAt": "2020-09-24T13:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NzA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/LockInfo.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java\nsimilarity index 97%\nrename from zkfacade/src/main/java/com/yahoo/vespa/curator/LockInfo.java\nrename to zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java\nindex 870ee12ebd..b192210c3d 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/LockInfo.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java\n\n@@ -1,5 +1,5 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n-package com.yahoo.vespa.curator;\n+package com.yahoo.vespa.curator.stats;\n \n import java.time.Duration;\n import java.time.Instant;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDE5OA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494294198", "bodyText": "Missing author/javadoc. Applies to some of the other classes as well.", "author": "mpolden", "createdAt": "2020-09-24T12:56:20Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/LocksResponse.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.restapi;\n+\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.vespa.curator.LockInfo;\n+import com.yahoo.vespa.curator.ThreadLockInfo;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.time.Instant;\n+import java.util.List;\n+\n+public class LocksResponse extends HttpResponse {", "originalCommit": "069716d610dbea6fa58e009cac8c5495c5e7d06d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTY2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494301665", "bodyText": "Fixed", "author": "hakonhall", "createdAt": "2020-09-24T13:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/LocksResponse.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/LocksResponse.java\nindex 817063592b..bc4401ee03 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/LocksResponse.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/LocksResponse.java\n\n@@ -5,14 +5,22 @@ import com.yahoo.container.jdisc.HttpResponse;\n import com.yahoo.slime.Cursor;\n import com.yahoo.slime.JsonFormat;\n import com.yahoo.slime.Slime;\n-import com.yahoo.vespa.curator.LockInfo;\n-import com.yahoo.vespa.curator.ThreadLockInfo;\n+import com.yahoo.vespa.curator.stats.LockCounters;\n+import com.yahoo.vespa.curator.stats.LockInfo;\n+import com.yahoo.vespa.curator.stats.ThreadLockInfo;\n \n import java.io.IOException;\n import java.io.OutputStream;\n import java.time.Instant;\n import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n \n+/**\n+ * Returns information related to ZooKeeper locks.\n+ *\n+ * @author hakon\n+ */\n public class LocksResponse extends HttpResponse {\n \n     private final Slime slime;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDU3MA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494294570", "bodyText": "Unintentional reformatting?", "author": "mpolden", "createdAt": "2020-09-24T12:56:55Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -32,12 +32,20 @@ public Lock(String lockPath, Curator curator) {\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n+        ThreadLockInfo threadLockInfo = getThreadLockInfo();\n+        threadLockInfo.invokingAcquire(timeout);\n         try {\n-            if ( ! mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS))\n+            if ( ! mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n+                threadLockInfo.acquireTimedOut();\n+\n                 throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n-                                                    \" to acquire lock '\" + lockPath + \"'\");\n+                        \" to acquire lock '\" + lockPath + \"'\");", "originalCommit": "069716d610dbea6fa58e009cac8c5495c5e7d06d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMDY4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r494300687", "bodyText": "Fixed", "author": "hakonhall", "createdAt": "2020-09-24T13:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5NDU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\nindex 299fceb8d7..da6e310969 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n\n@@ -39,7 +40,7 @@ public class Lock implements Mutex {\n                 threadLockInfo.acquireTimedOut();\n \n                 throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n-                        \" to acquire lock '\" + lockPath + \"'\");\n+                                                    \" to acquire lock '\" + lockPath + \"'\");\n             }\n             threadLockInfo.lockAcquired();\n \n"}}, {"oid": "88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "url": "https://github.com/vespa-engine/vespa/commit/88db94528ecbb96f88e30c5fa69ea9427e8ef0a7", "message": "Count events per zk path and move to separate package", "committedDate": "2020-09-24T13:15:32Z", "type": "commit"}, {"oid": "731ec8fb898164b066b64d26019a74aa13b08710", "url": "https://github.com/vespa-engine/vespa/commit/731ec8fb898164b066b64d26019a74aa13b08710", "message": "Also show the longest-living historical locks, with stack trace", "committedDate": "2020-09-24T15:05:54Z", "type": "commit"}, {"oid": "18cf8e6154be4d6d1fb0399ba9fec2d26408740d", "url": "https://github.com/vespa-engine/vespa/commit/18cf8e6154be4d6d1fb0399ba9fec2d26408740d", "message": "Make stacktraces for active locks during request handling", "committedDate": "2020-09-24T15:25:11Z", "type": "commit"}, {"oid": "ed06bab257cbaba2a2ea21df3d51f91d5ba6470c", "url": "https://github.com/vespa-engine/vespa/commit/ed06bab257cbaba2a2ea21df3d51f91d5ba6470c", "message": "Avoid double iteration", "committedDate": "2020-09-25T06:58:45Z", "type": "commit"}, {"oid": "032d45a7cdab3ab4f358ac0371a5d6b0eb57415a", "url": "https://github.com/vespa-engine/vespa/commit/032d45a7cdab3ab4f358ac0371a5d6b0eb57415a", "message": "Add duration of acquire, in locked, and total", "committedDate": "2020-09-25T07:23:24Z", "type": "commit"}, {"oid": "afbbe9c191ebdaf9ab8d84c727d53825f69fe64f", "url": "https://github.com/vespa-engine/vespa/commit/afbbe9c191ebdaf9ab8d84c727d53825f69fe64f", "message": "Remove reentrant lock no longer needed", "committedDate": "2020-09-25T10:18:27Z", "type": "commit"}, {"oid": "ce446b7bc567d541b061d72ec0c5d2aa6fe7392e", "url": "https://github.com/vespa-engine/vespa/commit/ce446b7bc567d541b061d72ec0c5d2aa6fe7392e", "message": "Adds method name to stack trace and adds timeout count and test", "committedDate": "2020-09-25T13:40:48Z", "type": "commit"}, {"oid": "3097883d260238fdd883034f9448c4d63e08e3fc", "url": "https://github.com/vespa-engine/vespa/commit/3097883d260238fdd883034f9448c4d63e08e3fc", "message": "Fill stack trace for all threads in critical region", "committedDate": "2020-09-25T21:34:10Z", "type": "commit"}, {"oid": "e38ba64f8253746739674720035d11bdcda5e155", "url": "https://github.com/vespa-engine/vespa/commit/e38ba64f8253746739674720035d11bdcda5e155", "message": "Dump stack trace once per thread", "committedDate": "2020-09-25T22:20:28Z", "type": "commit"}, {"oid": "d7118a218d4704b52ed9883e4ff381a519adb7c1", "url": "https://github.com/vespa-engine/vespa/commit/d7118a218d4704b52ed9883e4ff381a519adb7c1", "message": "Mock lock path from thread to per-lock (bug)", "committedDate": "2020-09-26T16:33:19Z", "type": "commit"}, {"oid": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "url": "https://github.com/vespa-engine/vespa/commit/6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "message": "Use deque as stack", "committedDate": "2020-09-28T10:10:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTk5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495855991", "bodyText": "Did it became redundant now or has it always been?", "author": "mpolden", "createdAt": "2020-09-28T10:59:56Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -21,51 +20,38 @@\n  */\n public class Lock implements Mutex {\n \n-    private final ReentrantLock lock;\n     private final InterProcessLock mutex;\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n         this.lockPath = lockPath;\n-        this.lock = new ReentrantLock(true);", "originalCommit": "afbbe9c191ebdaf9ab8d84c727d53825f69fe64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MzQxMA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495873410", "bodyText": "It was added by @jonmv in the hope it would catch issue with orphaned lock, but it has never been able to catch the problem and complicates the code as I was adding more instrumentation.  Discussed offline with Jon Marius.", "author": "hakonhall", "createdAt": "2020-09-28T11:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNjI1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r496106253", "bodyText": "It did trigger a few times, but this really only verified something we already suspected \u2014\u00a0that the same Curator lock may be held by several parties simultaneously as a result of connection issues, etc..", "author": "jonmv", "createdAt": "2020-09-28T17:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNjUyMw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r496106523", "bodyText": "(It also would prevent this intra-JVM, of course, but not inter-JVM.)", "author": "jonmv", "createdAt": "2020-09-28T17:09:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNTE0MQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r496115141", "bodyText": "AFAIK lock.tryLock() can only return false after a successful InterProcessMutex.acquire() if there is a ZK connection loss between two acquire(), and the respective threads would then both appear to have the lock.  I didn't know that was observed.  But yeah, the reentrant lock would only guard intra-JVM.", "author": "hakonhall", "createdAt": "2020-09-28T17:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\nindex 7fb6b88cf9..6e3b79ec5c 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n\n@@ -24,38 +24,39 @@ public class Lock implements Mutex {\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n+        this(lockPath, curator.createMutex(lockPath));\n+    }\n+\n+    /** Public for testing only */\n+    public Lock(String lockPath, InterProcessLock mutex) {\n         this.lockPath = lockPath;\n-        mutex = curator.createMutex(lockPath);\n+        this.mutex = mutex;\n     }\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        ThreadLockInfo threadLockInfo = getThreadLockInfo();\n-        threadLockInfo.invokingAcquire(timeout);\n+        ThreadLockStats threadLockStats = ThreadLockStats.getCurrentThreadLockInfo();\n+        threadLockStats.invokingAcquire(lockPath, timeout);\n \n         final boolean acquired;\n         try {\n             acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n         } catch (Exception e) {\n-            threadLockInfo.acquireFailed();\n+            threadLockStats.acquireFailed(lockPath);\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n \n         if (!acquired) {\n-            threadLockInfo.acquireTimedOut();\n+            threadLockStats.acquireTimedOut(lockPath);\n             throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n                     \" to acquire lock '\" + lockPath + \"'\");\n         }\n-        threadLockInfo.lockAcquired();\n+        threadLockStats.lockAcquired(lockPath);\n     }\n \n     @Override\n     public void close() {\n-        release();\n-    }\n-\n-    private void release() {\n-        getThreadLockInfo().lockReleased();\n+        ThreadLockStats.getCurrentThreadLockInfo().lockReleased(lockPath);\n         try {\n             mutex.release();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjQ0NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495856445", "bodyText": "Fine for now, but I think we should extract this into a top-level /debug/ API if we intend to keep it.", "author": "mpolden", "createdAt": "2020-09-28T11:00:56Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/NodesV2ApiHandler.java", "diffHunk": "@@ -116,6 +116,7 @@ private HttpResponse handleGET(HttpRequest request) {\n         if (pathS.startsWith(\"/nodes/v2/state/\")) return new NodesResponse(ResponseType.nodesInStateList, request, orchestrator, nodeRepository);\n         if (pathS.startsWith(\"/nodes/v2/acl/\")) return new NodeAclResponse(request, nodeRepository);\n         if (pathS.equals(    \"/nodes/v2/command/\")) return new ResourceResponse(request.getUri(), \"restart\", \"reboot\");\n+        if (pathS.equals(    \"/nodes/v2/locks\")) return new LocksResponse();", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDA1NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495874055", "bodyText": "+1", "author": "hakonhall", "createdAt": "2020-09-28T11:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NjQ0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1ODgwMA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495858800", "bodyText": "Bug in test template? Copyright should be on first line.", "author": "mpolden", "createdAt": "2020-09-28T11:05:49Z", "path": "zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3Mzk2OA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495873968", "bodyText": "Bug in IntelliJ/have never been able to figure it out.  Fixed.", "author": "hakonhall", "createdAt": "2020-09-28T11:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1ODgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\nsimilarity index 59%\nrename from zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java\nrename to zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\nindex 4a14b0cc1b..6f877631b7 100644\n--- a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java\n+++ b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\n\n@@ -1,4 +1,5 @@\n-package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n \n import org.junit.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTIyOA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495859228", "bodyText": "Same as above.", "author": "mpolden", "createdAt": "2020-09-28T11:06:44Z", "path": "zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDIzMg==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495874232", "bodyText": "Fixed", "author": "hakonhall", "createdAt": "2020-09-28T11:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\nindex 984a04c6d4..477fe650bb 100644\n--- a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\n+++ b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\n\n@@ -1,4 +1,5 @@\n-package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n \n import com.yahoo.vespa.curator.Lock;\n import org.apache.curator.framework.recipes.locks.InterProcessLock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTY2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495859669", "bodyText": "Missing @author.", "author": "mpolden", "createdAt": "2020-09-28T11:07:43Z", "path": "zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class LockInfoSamplesTest {", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDQxNg==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495874416", "bodyText": "Fixed", "author": "hakonhall", "createdAt": "2020-09-28T11:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\nsimilarity index 59%\nrename from zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java\nrename to zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\nindex 4a14b0cc1b..6f877631b7 100644\n--- a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockInfoSamplesTest.java\n+++ b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockAttemptSamplesTest.java\n\n@@ -1,4 +1,5 @@\n-package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n \n import org.junit.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTcxOA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495859718", "bodyText": "Same as above.", "author": "mpolden", "createdAt": "2020-09-28T11:07:50Z", "path": "zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+import com.yahoo.vespa.curator.Lock;\n+import org.apache.curator.framework.recipes.locks.InterProcessLock;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class LockTest {", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDQ2Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495874463", "bodyText": "Fixed", "author": "hakonhall", "createdAt": "2020-09-28T11:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1OTcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\nindex 984a04c6d4..477fe650bb 100644\n--- a/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\n+++ b/zkfacade/src/test/java/com/yahoo/vespa/curator/stats/LockTest.java\n\n@@ -1,4 +1,5 @@\n-package com.yahoo.vespa.curator.stats;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n \n import com.yahoo.vespa.curator.Lock;\n import org.apache.curator.framework.recipes.locks.InterProcessLock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTMwNw==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495865307", "bodyText": "How about LockAttempt? Info is very generic.", "author": "mpolden", "createdAt": "2020-09-28T11:19:25Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+/**\n+ * Information about a lock.\n+ *\n+ * <p>Should be mutated by a single thread, except {@link #fillStackTrace()} which can be\n+ * invoked by any threads.  Other threads may see an inconsistent state of this instance.</p>\n+ *\n+ * @author hakon\n+ */\n+public class LockInfo {", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NTkyOA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495875928", "bodyText": "Done", "author": "hakonhall", "createdAt": "2020-09-28T11:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockAttempt.java\nsimilarity index 85%\nrename from zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java\nrename to zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockAttempt.java\nindex f40c6f0498..c092fb6c28 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockInfo.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/LockAttempt.java\n\n@@ -13,9 +13,9 @@ import java.util.Optional;\n  *\n  * @author hakon\n  */\n-public class LockInfo {\n+public class LockAttempt {\n \n-    private final ThreadLockInfo threadLockInfo;\n+    private final ThreadLockStats threadLockStats;\n     private final String lockPath;\n     private final Instant callAcquireInstant;\n     private final Duration timeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTkwOA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495865908", "bodyText": "ThreadLockStats? Matches the javadoc.", "author": "mpolden", "createdAt": "2020-09-28T11:20:36Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.curator.stats;\n+\n+import com.yahoo.vespa.curator.Lock;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+import java.util.function.Consumer;\n+\n+/**\n+ * This class contains process-wide statistics and information related to acquiring and releasing\n+ * {@link Lock}.  Instances of this class contain information tied to a specific thread and lock path.\n+ *\n+ * <p>Instances of this class are thread-safe as long as foreign threads (!= this.thread) avoid mutable methods.</p>\n+ *\n+ * @author hakon\n+ */\n+public class ThreadLockInfo {", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDk0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495874949", "bodyText": "Done", "author": "hakonhall", "createdAt": "2020-09-28T11:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockStats.java\nsimilarity index 69%\nrename from zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java\nrename to zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockStats.java\nindex 92e6eb453b..117844e17e 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockInfo.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/stats/ThreadLockStats.java\n\n@@ -18,39 +18,39 @@ import java.util.function.Consumer;\n  *\n  * @author hakon\n  */\n-public class ThreadLockInfo {\n+public class ThreadLockStats {\n \n-    private static final ConcurrentHashMap<Thread, ThreadLockInfo> locks = new ConcurrentHashMap<>();\n+    private static final ConcurrentHashMap<Thread, ThreadLockStats> locks = new ConcurrentHashMap<>();\n \n-    private static final LockInfoSamples completedLockInfoSamples = new LockInfoSamples();\n+    private static final LockAttemptSamples COMPLETED_LOCK_ATTEMPT_SAMPLES = new LockAttemptSamples();\n \n     private static final ConcurrentHashMap<String, LockCounters> countersByLockPath = new ConcurrentHashMap<>();\n \n     private final Thread thread;\n \n     /** The locks are reentrant so there may be more than 1 lock for this thread. */\n-    private final ConcurrentLinkedDeque<LockInfo> lockInfos = new ConcurrentLinkedDeque<>();\n+    private final ConcurrentLinkedDeque<LockAttempt> lockAttempts = new ConcurrentLinkedDeque<>();\n \n     public static Map<String, LockCounters> getLockCountersByPath() { return Map.copyOf(countersByLockPath); }\n \n-    public static List<ThreadLockInfo> getThreadLockInfos() { return List.copyOf(locks.values()); }\n+    public static List<ThreadLockStats> getThreadLockInfos() { return List.copyOf(locks.values()); }\n \n-    public static List<LockInfo> getLockInfoSamples() {\n-        return completedLockInfoSamples.asList();\n+    public static List<LockAttempt> getLockInfoSamples() {\n+        return COMPLETED_LOCK_ATTEMPT_SAMPLES.asList();\n     }\n \n-    /** Returns the per-thread singleton ThreadLockInfo. */\n-    public static ThreadLockInfo getCurrentThreadLockInfo() {\n-        return locks.computeIfAbsent(Thread.currentThread(), ThreadLockInfo::new);\n+    /** Returns the per-thread singleton ThreadLockStats. */\n+    public static ThreadLockStats getCurrentThreadLockInfo() {\n+        return locks.computeIfAbsent(Thread.currentThread(), ThreadLockStats::new);\n     }\n \n     static void clearStaticDataForTesting() {\n         locks.clear();\n-        completedLockInfoSamples.clear();\n+        COMPLETED_LOCK_ATTEMPT_SAMPLES.clear();\n         countersByLockPath.clear();\n     }\n \n-    ThreadLockInfo(Thread currentThread) {\n+    ThreadLockStats(Thread currentThread) {\n         this.thread = currentThread;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzIxNg==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495867216", "bodyText": "Shouldn't this happen after the mutex.release() below?", "author": "mpolden", "createdAt": "2020-09-28T11:23:07Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -20,54 +20,50 @@\n  */\n public class Lock implements Mutex {\n \n-    private final ReentrantLock lock;\n     private final InterProcessLock mutex;\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n+        this(lockPath, curator.createMutex(lockPath));\n+    }\n+\n+    /** Public for testing only */\n+    public Lock(String lockPath, InterProcessLock mutex) {\n         this.lockPath = lockPath;\n-        this.lock = new ReentrantLock(true);\n-        mutex = curator.createMutex(lockPath);\n+        this.mutex = mutex;\n     }\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n+        ThreadLockInfo threadLockInfo = ThreadLockInfo.getCurrentThreadLockInfo();\n+        threadLockInfo.invokingAcquire(lockPath, timeout);\n+\n+        final boolean acquired;\n         try {\n-            if ( ! mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS))\n-                throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n-                                                    \" to acquire lock '\" + lockPath + \"'\");\n-            if ( ! lock.tryLock()) { // Should be available to only this thread, while holding the above mutex.\n-                release();\n-                throw new IllegalStateException(\"InterProcessMutex acquired, but guarded lock held by someone else, for lock '\" + lockPath + \"'\");\n-            }\n-        }\n-        catch (UncheckedTimeoutException | IllegalStateException e) {\n-            throw e;\n-        }\n-        catch (Exception e) {\n+            acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+        } catch (Exception e) {\n+            threadLockInfo.acquireFailed(lockPath);\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n-    }\n \n-    @Override\n-    public void close() {\n-        try {\n-            lock.unlock();\n-        }\n-        finally {\n-            release();\n+        if (!acquired) {\n+            threadLockInfo.acquireTimedOut(lockPath);\n+            throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n+                    \" to acquire lock '\" + lockPath + \"'\");\n         }\n+        threadLockInfo.lockAcquired(lockPath);\n     }\n \n-    private void release() {\n+    @Override\n+    public void close() {\n+        ThreadLockInfo.getCurrentThreadLockInfo().lockReleased(lockPath);", "originalCommit": "6e284ef06a2e6dafbaeae8e486b6f68fa53d5d48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3Nzk1OA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495877958", "bodyText": "To get any Instant.now() to include the time in release?", "author": "hakonhall", "createdAt": "2020-09-28T11:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MTQzMA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495881430", "bodyText": "No, currently if mutex.release() fails  you will still have tagged it as released in ThreadLockInfo.", "author": "mpolden", "createdAt": "2020-09-28T11:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MzAyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495883020", "bodyText": "I could count an error, but the lock must be assumed to be released whether an exception is thrown or not", "author": "hakonhall", "createdAt": "2020-09-28T11:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzIxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5NTkwMA==", "url": "https://github.com/vespa-engine/vespa/pull/14528#discussion_r495895900", "bodyText": "Added count", "author": "hakonhall", "createdAt": "2020-09-28T12:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2NzIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\nindex b630995d6b..6e3b79ec5c 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n\n@@ -35,28 +35,28 @@ public class Lock implements Mutex {\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        ThreadLockInfo threadLockInfo = ThreadLockInfo.getCurrentThreadLockInfo();\n-        threadLockInfo.invokingAcquire(lockPath, timeout);\n+        ThreadLockStats threadLockStats = ThreadLockStats.getCurrentThreadLockInfo();\n+        threadLockStats.invokingAcquire(lockPath, timeout);\n \n         final boolean acquired;\n         try {\n             acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n         } catch (Exception e) {\n-            threadLockInfo.acquireFailed(lockPath);\n+            threadLockStats.acquireFailed(lockPath);\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n \n         if (!acquired) {\n-            threadLockInfo.acquireTimedOut(lockPath);\n+            threadLockStats.acquireTimedOut(lockPath);\n             throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n                     \" to acquire lock '\" + lockPath + \"'\");\n         }\n-        threadLockInfo.lockAcquired(lockPath);\n+        threadLockStats.lockAcquired(lockPath);\n     }\n \n     @Override\n     public void close() {\n-        ThreadLockInfo.getCurrentThreadLockInfo().lockReleased(lockPath);\n+        ThreadLockStats.getCurrentThreadLockInfo().lockReleased(lockPath);\n         try {\n             mutex.release();\n         }\n"}}, {"oid": "4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "url": "https://github.com/vespa-engine/vespa/commit/4fd2db62039bf5fed95dcb71bd3ff59267812c7c", "message": "LockInfo -> LockAttempt, ThreadLockInfo -> ThreadLockStats, and more", "committedDate": "2020-09-28T11:49:49Z", "type": "commit"}, {"oid": "c888ea9295ea84216a920d9ceca3883f75f1ce32", "url": "https://github.com/vespa-engine/vespa/commit/c888ea9295ea84216a920d9ceca3883f75f1ce32", "message": "More info -> attempt renames", "committedDate": "2020-09-28T11:52:23Z", "type": "commit"}, {"oid": "314aa652acd2409def51ac051093a99c8bdf0ce0", "url": "https://github.com/vespa-engine/vespa/commit/314aa652acd2409def51ac051093a99c8bdf0ce0", "message": "Add count of failed releases", "committedDate": "2020-09-28T12:20:36Z", "type": "commit"}]}