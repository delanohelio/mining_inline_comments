{"pr_number": 12072, "pr_title": "reduce certificate log spam", "pr_createdAt": "2020-02-05T10:38:26Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12072", "timeline": [{"oid": "d55929be2d6d498c0df66691c99d6202651f8c85", "url": "https://github.com/vespa-engine/vespa/commit/d55929be2d6d498c0df66691c99d6202651f8c85", "message": "reduce certificate log spam", "committedDate": "2020-02-05T10:31:48Z", "type": "commit"}, {"oid": "0116cde0673ea2897df5e83c8620911c7331d342", "url": "https://github.com/vespa-engine/vespa/commit/0116cde0673ea2897df5e83c8620911c7331d342", "message": "update abi spec", "committedDate": "2020-02-05T10:39:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5OTU2OA==", "url": "https://github.com/vespa-engine/vespa/pull/12072#discussion_r375199568", "bodyText": "Log the expected set and actual set?", "author": "tokle", "createdAt": "2020-02-05T11:23:12Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -139,10 +140,13 @@ private boolean verifyEndpointCertificate(EndpointCertificateMetadata endpointCe\n                     .filter(san -> san.getType().equals(SubjectAlternativeName.Type.DNS_NAME))\n                     .map(SubjectAlternativeName::getValue).collect(Collectors.toSet());\n \n-            if (!subjectAlternativeNames.equals(Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))))\n-                return logWarning(warningPrefix, \"The list of SANs in the certificate does not match what we expect\");\n+            if(Sets.intersection(subjectAlternativeNames, Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))).isEmpty()) {\n+                return logWarning(warningPrefix, \"No overlap between SANs in certificate and expected SANs\");", "originalCommit": "0116cde0673ea2897df5e83c8620911c7331d342", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjY5MA==", "url": "https://github.com/vespa-engine/vespa/pull/12072#discussion_r375202690", "bodyText": "This is expected on first time deployment, but not on the subsequent deployments. Consider not invoking this code path on first time deployment or include a log stating that this can be expected in certain cases.\nOn any subsequent calls this should be considered Error, not warning.", "author": "tokle", "createdAt": "2020-02-05T11:30:10Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -139,10 +140,13 @@ private boolean verifyEndpointCertificate(EndpointCertificateMetadata endpointCe\n                     .filter(san -> san.getType().equals(SubjectAlternativeName.Type.DNS_NAME))\n                     .map(SubjectAlternativeName::getValue).collect(Collectors.toSet());\n \n-            if (!subjectAlternativeNames.equals(Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))))\n-                return logWarning(warningPrefix, \"The list of SANs in the certificate does not match what we expect\");\n+            if(Sets.intersection(subjectAlternativeNames, Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))).isEmpty()) {\n+                return logWarning(warningPrefix, \"No overlap between SANs in certificate and expected SANs\");\n+            }\n \n             return true; // All good then, hopefully\n+        } catch (SecretNotFoundException s) {\n+            return logWarning(warningPrefix, \"Certificate not found in secret store\");", "originalCommit": "0116cde0673ea2897df5e83c8620911c7331d342", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc0Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12072#discussion_r375202742", "bodyText": "error?", "author": "tokle", "createdAt": "2020-02-05T11:30:18Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -139,10 +140,13 @@ private boolean verifyEndpointCertificate(EndpointCertificateMetadata endpointCe\n                     .filter(san -> san.getType().equals(SubjectAlternativeName.Type.DNS_NAME))\n                     .map(SubjectAlternativeName::getValue).collect(Collectors.toSet());\n \n-            if (!subjectAlternativeNames.equals(Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))))\n-                return logWarning(warningPrefix, \"The list of SANs in the certificate does not match what we expect\");\n+            if(Sets.intersection(subjectAlternativeNames, Set.copyOf(dnsNamesOf(instance.id(), List.of(zone)))).isEmpty()) {\n+                return logWarning(warningPrefix, \"No overlap between SANs in certificate and expected SANs\");\n+            }\n \n             return true; // All good then, hopefully\n+        } catch (SecretNotFoundException s) {\n+            return logWarning(warningPrefix, \"Certificate not found in secret store\");\n         } catch (Exception e) {\n             log.log(LogLevel.WARNING, \"Exception thrown when verifying endpoint certificate\", e);", "originalCommit": "0116cde0673ea2897df5e83c8620911c7331d342", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/12072#discussion_r375202783", "bodyText": "error?", "author": "tokle", "createdAt": "2020-02-05T11:30:24Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -116,7 +116,8 @@ private boolean verifyEndpointCertificate(EndpointCertificateMetadata endpointCe\n         try {\n             var pemEncodedEndpointCertificate = secretStore.getSecret(endpointCertificateMetadata.certName(), endpointCertificateMetadata.version());\n \n-            if (pemEncodedEndpointCertificate == null) return logWarning(warningPrefix, \"Certificate not found in secret store\");\n+            if (pemEncodedEndpointCertificate == null)\n+                return logWarning(warningPrefix, \"Secret store returned null for certificate\");", "originalCommit": "0116cde0673ea2897df5e83c8620911c7331d342", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}