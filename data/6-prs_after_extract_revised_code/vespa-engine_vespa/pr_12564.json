{"pr_number": 12564, "pr_title": "When you have a container with both feed and query, you risk that dur\u2026", "pr_createdAt": "2020-03-13T21:52:00Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12564", "timeline": [{"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93", "url": "https://github.com/vespa-engine/vespa/commit/2c52421478d1e47db32ec8ff8c482f861fd93b93", "message": "When you have a container with both feed and query, you risk that during warmup the throughput optimized\nfeed pipeline will overwhelm the search pipeline during warmup.\nHere we add an option to enforce a soft start of the feed pipeline, by gradually increasing max number of feed threads.\nIt might not be the perfect solution as mesages will pile up in the dynamic throttle policy, but that should have a builtin\nsoftstart already. So I think this might a good fit.", "committedDate": "2020-03-13T21:49:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NTMxNg==", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392845316", "bodyText": "Minor: I would have used Duration and Instant for these two", "author": "hmusum", "createdAt": "2020-03-16T08:15:19Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -43,6 +43,9 @@\n     protected final ReplyHandler feedReplyHandler;\n     private final Metric metric;\n     private final Object monitor = new Object();\n+    private int remainingThreadsForFeedingAllowance;\n+    private final long msBetweenBumpingMaxThreads;\n+    private long nextTimeToAllocateAnotherThread;", "originalCommit": "2c52421478d1e47db32ec8ff8c482f861fd93b93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDM3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392854372", "bodyText": "Thanks, now I will use that for time in java from now on.", "author": "baldersheim", "createdAt": "2020-03-16T08:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NTMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "49c6107c09e539e575f71c2f2b8a148780c28ff8", "chunk": "diff --git a/vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java b/vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java\nindex 1b34236304..90421b11a7 100644\n--- a/vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java\n+++ b/vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java\n\n@@ -44,8 +46,8 @@ public class FeedHandlerV3 extends LoggingRequestHandler {\n     private final Metric metric;\n     private final Object monitor = new Object();\n     private int remainingThreadsForFeedingAllowance;\n-    private final long msBetweenBumpingMaxThreads;\n-    private long nextTimeToAllocateAnotherThread;\n+    private final Duration timeBetweenBumpingMaxThreads;\n+    private Instant nextTimeToAllocateAnotherThread;\n     private final AtomicInteger threadsAvailableForFeeding;\n     private static final Logger log = Logger.getLogger(FeedHandlerV3.class.getName());\n \n"}}, {"oid": "49c6107c09e539e575f71c2f2b8a148780c28ff8", "url": "https://github.com/vespa-engine/vespa/commit/49c6107c09e539e575f71c2f2b8a148780c28ff8", "message": "Use Instant/Duration for time.", "committedDate": "2020-03-16T08:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNDY2MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392904661", "bodyText": "Why are these member variables not protected by a monitor?", "author": "bjorncs", "createdAt": "2020-03-16T10:08:34Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -43,6 +43,9 @@\n     protected final ReplyHandler feedReplyHandler;\n     private final Metric metric;\n     private final Object monitor = new Object();\n+    private int remainingThreadsForFeedingAllowance;", "originalCommit": "2c52421478d1e47db32ec8ff8c482f861fd93b93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNTI0NA==", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392905244", "bodyText": "Consider using Duration.ZERO as sentinel value instead.", "author": "bjorncs", "createdAt": "2020-03-16T10:09:35Z", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -66,17 +68,17 @@ public FeedHandlerV3(LoggingRequestHandler.Context parentCtx,\n             remainingThreadsForFeedingAllowance = Math.max((int) (0.4 * threadpoolConfig.maxthreads()), 1);\n             if (threadpoolConfig.softStartSeconds() > 0.0) {\n                 threadsAvailableForFeeding = new AtomicInteger(0);\n-                msBetweenBumpingMaxThreads = (long)threadpoolConfig.softStartSeconds() * 1000 / remainingThreadsForFeedingAllowance;\n+                timeBetweenBumpingMaxThreads = Duration.ofMillis((long)(threadpoolConfig.softStartSeconds() * 1000) / remainingThreadsForFeedingAllowance);\n             } else {\n                 threadsAvailableForFeeding = new AtomicInteger(remainingThreadsForFeedingAllowance);\n                 remainingThreadsForFeedingAllowance = 0;\n-                msBetweenBumpingMaxThreads = 0;\n+                timeBetweenBumpingMaxThreads = null;", "originalCommit": "49c6107c09e539e575f71c2f2b8a148780c28ff8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}