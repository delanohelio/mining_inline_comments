{"pr_number": 11683, "pr_title": "Deprovision tenant hosts affected by cloud event", "pr_createdAt": "2020-01-07T14:17:57Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11683", "timeline": [{"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "url": "https://github.com/vespa-engine/vespa/commit/406295ad6bfcd050017a4b4b90c2854b9f84e48d", "message": "Deprovision tenant host affected by cloud event", "committedDate": "2020-01-07T14:00:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDc1Nw==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364150757", "bodyText": "If this is possible, this needs to be moved to the parent method so we can skip deprovisionHosts() as well.", "author": "freva", "createdAt": "2020-01-08T10:03:10Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n+                        event.affectedInstances.removeIf(hostname::contains);\n+                    });\n+        }\n+    }\n+\n+    private void submitIssue(CloudEvent event) {\n+        if (event.affectedInstances.isEmpty())", "originalCommit": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3NzEzMA==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364177130", "bodyText": "The idea was to remove instances from affectedInstances if they were deprovisioned. I can make it more clear, by letting deprovisionHosts return the list of deprovisioned hosts, and skip ticket submission if event.affectedInstances.size() == deprovisionedHosts.size()", "author": "olaaun", "createdAt": "2020-01-08T11:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5OTIwNA==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364199204", "bodyText": "Sounds good. Event should be immutable.", "author": "freva", "createdAt": "2020-01-08T12:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "922b993d409c74543953dcff4b91297906b6fb05", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\nindex 73b13bb79a..bd8faaed2e 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n\n@@ -49,28 +49,31 @@ public class CloudEventReporter extends Maintainer {\n         for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                deprovisionHosts(awsRegion, event);\n-                submitIssue(event);\n+                List<String> deprovisionedHosts = deprovisionHosts(awsRegion, event);\n+                submitIssue(event, deprovisionedHosts);\n             }\n         }\n     }\n \n-    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n-        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n-            nodeRepository.list(zone.getId())\n-                    .stream()\n-                    .filter(shouldDeprovisionHost(event))\n-                    .map(node -> node.hostname().value())\n-                    .forEach(hostname -> {\n-                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n-                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n-                        event.affectedInstances.removeIf(hostname::contains);\n-                    });\n-        }\n+    private List<String> deprovisionHosts(String awsRegion, CloudEvent event) {\n+        return zonesByCloudNativeRegion.get(awsRegion)\n+                .stream()\n+                .flatMap(zone ->\n+                    nodeRepository.list(zone.getId())\n+                            .stream()\n+                            .filter(shouldDeprovisionHost(event))\n+                            .map(node -> {\n+                                if (!node.wantToDeprovision() || !node.wantToRetire())\n+                                    log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", node.hostname().value()));\n+                                    nodeRepository.retireAndDeprovision(zone.getId(), node.hostname().value());\n+                                return node.hostname().value();\n+                            })\n+                )\n+                .collect(Collectors.toList());\n     }\n \n-    private void submitIssue(CloudEvent event) {\n-        if (event.affectedInstances.isEmpty())\n+    private void submitIssue(CloudEvent event, List<String> deprovisionedHosts) {\n+        if (event.affectedInstances.size() == deprovisionedHosts.size())\n             return;\n         Issue issue = eventFetcher.createIssue(event);\n         if (!issueHandler.issueExists(issue)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTE3MA==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151170", "bodyText": "Since you are iterating over multiple zones, I assume this will throw if you try to do this on the wrong zone?", "author": "freva", "createdAt": "2020-01-08T10:04:07Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);", "originalCommit": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE3ODMxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364178315", "bodyText": "If this is done in the wrong zone, all hosts should've been filtered away by shouldDeprovisionHost", "author": "olaaun", "createdAt": "2020-01-08T11:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "922b993d409c74543953dcff4b91297906b6fb05", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\nindex 73b13bb79a..bd8faaed2e 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n\n@@ -49,28 +49,31 @@ public class CloudEventReporter extends Maintainer {\n         for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                deprovisionHosts(awsRegion, event);\n-                submitIssue(event);\n+                List<String> deprovisionedHosts = deprovisionHosts(awsRegion, event);\n+                submitIssue(event, deprovisionedHosts);\n             }\n         }\n     }\n \n-    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n-        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n-            nodeRepository.list(zone.getId())\n-                    .stream()\n-                    .filter(shouldDeprovisionHost(event))\n-                    .map(node -> node.hostname().value())\n-                    .forEach(hostname -> {\n-                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n-                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n-                        event.affectedInstances.removeIf(hostname::contains);\n-                    });\n-        }\n+    private List<String> deprovisionHosts(String awsRegion, CloudEvent event) {\n+        return zonesByCloudNativeRegion.get(awsRegion)\n+                .stream()\n+                .flatMap(zone ->\n+                    nodeRepository.list(zone.getId())\n+                            .stream()\n+                            .filter(shouldDeprovisionHost(event))\n+                            .map(node -> {\n+                                if (!node.wantToDeprovision() || !node.wantToRetire())\n+                                    log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", node.hostname().value()));\n+                                    nodeRepository.retireAndDeprovision(zone.getId(), node.hostname().value());\n+                                return node.hostname().value();\n+                            })\n+                )\n+                .collect(Collectors.toList());\n     }\n \n-    private void submitIssue(CloudEvent event) {\n-        if (event.affectedInstances.isEmpty())\n+    private void submitIssue(CloudEvent event, List<String> deprovisionedHosts) {\n+        if (event.affectedInstances.size() == deprovisionedHosts.size())\n             return;\n         Issue issue = eventFetcher.createIssue(event);\n         if (!issueHandler.issueExists(issue)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTU1NQ==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151555", "bodyText": "Instance name contains zone name in it, so this is not really needed.", "author": "freva", "createdAt": "2020-01-08T10:05:05Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {", "originalCommit": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "922b993d409c74543953dcff4b91297906b6fb05", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\nindex 73b13bb79a..bd8faaed2e 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n\n@@ -49,28 +49,31 @@ public class CloudEventReporter extends Maintainer {\n         for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                deprovisionHosts(awsRegion, event);\n-                submitIssue(event);\n+                List<String> deprovisionedHosts = deprovisionHosts(awsRegion, event);\n+                submitIssue(event, deprovisionedHosts);\n             }\n         }\n     }\n \n-    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n-        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n-            nodeRepository.list(zone.getId())\n-                    .stream()\n-                    .filter(shouldDeprovisionHost(event))\n-                    .map(node -> node.hostname().value())\n-                    .forEach(hostname -> {\n-                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n-                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n-                        event.affectedInstances.removeIf(hostname::contains);\n-                    });\n-        }\n+    private List<String> deprovisionHosts(String awsRegion, CloudEvent event) {\n+        return zonesByCloudNativeRegion.get(awsRegion)\n+                .stream()\n+                .flatMap(zone ->\n+                    nodeRepository.list(zone.getId())\n+                            .stream()\n+                            .filter(shouldDeprovisionHost(event))\n+                            .map(node -> {\n+                                if (!node.wantToDeprovision() || !node.wantToRetire())\n+                                    log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", node.hostname().value()));\n+                                    nodeRepository.retireAndDeprovision(zone.getId(), node.hostname().value());\n+                                return node.hostname().value();\n+                            })\n+                )\n+                .collect(Collectors.toList());\n     }\n \n-    private void submitIssue(CloudEvent event) {\n-        if (event.affectedInstances.isEmpty())\n+    private void submitIssue(CloudEvent event, List<String> deprovisionedHosts) {\n+        if (event.affectedInstances.size() == deprovisionedHosts.size())\n             return;\n         Issue issue = eventFetcher.createIssue(event);\n         if (!issueHandler.issueExists(issue)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTgwOA==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151808", "bodyText": "Also check if the node already has wantToDeprovision and wantToRetire set already.", "author": "freva", "createdAt": "2020-01-08T10:05:43Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n+                        event.affectedInstances.removeIf(hostname::contains);\n+                    });\n+        }\n+    }\n+\n+    private void submitIssue(CloudEvent event) {\n+        if (event.affectedInstances.isEmpty())\n+            return;\n+        Issue issue = eventFetcher.createIssue(event);\n+        if (!issueHandler.issueExists(issue)) {\n+            issueHandler.file(issue);\n+            log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n+        }\n+    }\n+\n+    private Predicate<Node> shouldDeprovisionHost(CloudEvent event) {", "originalCommit": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "922b993d409c74543953dcff4b91297906b6fb05", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\nindex 73b13bb79a..bd8faaed2e 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java\n\n@@ -49,28 +49,31 @@ public class CloudEventReporter extends Maintainer {\n         for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                deprovisionHosts(awsRegion, event);\n-                submitIssue(event);\n+                List<String> deprovisionedHosts = deprovisionHosts(awsRegion, event);\n+                submitIssue(event, deprovisionedHosts);\n             }\n         }\n     }\n \n-    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n-        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n-            nodeRepository.list(zone.getId())\n-                    .stream()\n-                    .filter(shouldDeprovisionHost(event))\n-                    .map(node -> node.hostname().value())\n-                    .forEach(hostname -> {\n-                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n-                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n-                        event.affectedInstances.removeIf(hostname::contains);\n-                    });\n-        }\n+    private List<String> deprovisionHosts(String awsRegion, CloudEvent event) {\n+        return zonesByCloudNativeRegion.get(awsRegion)\n+                .stream()\n+                .flatMap(zone ->\n+                    nodeRepository.list(zone.getId())\n+                            .stream()\n+                            .filter(shouldDeprovisionHost(event))\n+                            .map(node -> {\n+                                if (!node.wantToDeprovision() || !node.wantToRetire())\n+                                    log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", node.hostname().value()));\n+                                    nodeRepository.retireAndDeprovision(zone.getId(), node.hostname().value());\n+                                return node.hostname().value();\n+                            })\n+                )\n+                .collect(Collectors.toList());\n     }\n \n-    private void submitIssue(CloudEvent event) {\n-        if (event.affectedInstances.isEmpty())\n+    private void submitIssue(CloudEvent event, List<String> deprovisionedHosts) {\n+        if (event.affectedInstances.size() == deprovisionedHosts.size())\n             return;\n         Issue issue = eventFetcher.createIssue(event);\n         if (!issueHandler.issueExists(issue)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MjY5MA==", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364152690", "bodyText": "Consider returning Set from getHostnames() and use assertEquals(Set.of(..), getHostnames(...));", "author": "freva", "createdAt": "2020-01-08T10:07:49Z", "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.yahoo.vespa.hosted.controller.maintenance;\n+\n+import com.yahoo.config.provision.HostName;\n+import com.yahoo.config.provision.NodeType;\n+import com.yahoo.config.provision.zone.ZoneId;\n+import com.yahoo.vespa.hosted.controller.ControllerTester;\n+import com.yahoo.vespa.hosted.controller.api.integration.aws.CloudEvent;\n+import com.yahoo.vespa.hosted.controller.api.integration.aws.MockAwsEventFetcher;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n+import com.yahoo.vespa.hosted.controller.api.integration.organization.IssueId;\n+import com.yahoo.vespa.hosted.controller.api.integration.organization.MockIssueHandler;\n+import com.yahoo.vespa.hosted.controller.integration.ZoneApiMock;\n+import com.yahoo.vespa.jdk8compat.Set;\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author olaa\n+ */\n+public class CloudEventReporterTest {\n+\n+    private ControllerTester tester = new ControllerTester();\n+    private ZoneApiMock nonAwsZone = createZone(\"prod.zone3\", \"region-1\", \"other\");\n+    private ZoneApiMock awsZone1 = createZone(\"prod.zone1\", \"region-1\", \"aws\");\n+    private ZoneApiMock awsZone2 = createZone(\"prod.zone2\", \"region-2\", \"aws\");\n+\n+\n+    /**\n+     * Test scenario:\n+     * Consider three zones, two of which are based in AWS\n+     * We want to test the following:\n+     * 1. Non-AWS zone is completely ignored\n+     * 2. Tenant hosts affected by cloud event are deprovisioned\n+     * 3. Infrastructure hosts affected by cloud event are reported by IssueHandler\n+     */\n+    @Test\n+    public void maintain() {\n+        setUpZones();\n+        CloudEventReporter cloudEventReporter = new CloudEventReporter(tester.controller(), Duration.ofMinutes(15), new JobControl(tester.curator()));\n+\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(nonAwsZone.getId()));\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(awsZone1.getId()));\n+        equalListsIgnoreOrder(List.of(\"host4.com\", \"host5.com\", \"confighost.com\"), getHostnames(awsZone2.getId()));\n+\n+        mockEvents();\n+        cloudEventReporter.maintain();\n+\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(nonAwsZone.getId()));\n+        equalListsIgnoreOrder(List.of(\"host3.com\"), getHostnames(awsZone1.getId()));\n+        equalListsIgnoreOrder(List.of(\"host4.com\", \"confighost.com\"), getHostnames(awsZone2.getId()));\n+\n+        Map<IssueId, MockIssueHandler.MockIssue> createdIssues = tester.serviceRegistry().issueHandler().issues();\n+        assertEquals(1, createdIssues.size());\n+        String description = createdIssues.get(IssueId.from(\"1\")).issue().description();\n+        assertEquals(\"[confighost]\", description);\n+\n+    }\n+\n+    private void equalListsIgnoreOrder(List<?> l1, List<?> l2) {", "originalCommit": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "922b993d409c74543953dcff4b91297906b6fb05", "chunk": "diff --git a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java\nindex 231c5876c4..cd2a4fd845 100644\n--- a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java\n+++ b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java\n\n@@ -10,7 +10,6 @@ import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n import com.yahoo.vespa.hosted.controller.api.integration.organization.IssueId;\n import com.yahoo.vespa.hosted.controller.api.integration.organization.MockIssueHandler;\n import com.yahoo.vespa.hosted.controller.integration.ZoneApiMock;\n-import com.yahoo.vespa.jdk8compat.Set;\n import org.junit.Test;\n \n import java.time.Duration;\n"}}, {"oid": "623eb417c98ee2595faa877777a97d9ca99191d0", "url": "https://github.com/vespa-engine/vespa/commit/623eb417c98ee2595faa877777a97d9ca99191d0", "message": "Add wantToDeprovision and wantToRetire fields to Node", "committedDate": "2020-01-08T12:53:28Z", "type": "commit"}, {"oid": "922b993d409c74543953dcff4b91297906b6fb05", "url": "https://github.com/vespa-engine/vespa/commit/922b993d409c74543953dcff4b91297906b6fb05", "message": "Check if number of affected instances is equal to number of deprovisioned hosts.\nCheck if host already wants to deprovision/retire\nChange from list to set in test", "committedDate": "2020-01-08T12:56:02Z", "type": "commit"}]}