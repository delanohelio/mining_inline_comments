{"pr_number": 15639, "pr_title": "Bjorncs/feature flag owners", "pr_createdAt": "2020-12-03T13:14:58Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15639", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMwMDcwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15639#discussion_r535300709", "bodyText": "Say the PR will be merged at some Vespa x.y.z, at the LATEST.  x.y.z could be found by e.g. taking the current version (e.g. 7.324.14), and then add 4-5 to the minor version (7.330.1).\nOne must wait until all versions <x.y.z is gone from production.\nIt would be nice to document this version number with the tombstone default implementations below.\nAn alternative heuristic is to use timestamps, but then one would have to add a month or two to take into account long moratoriums, or even much longer when the major version is incremented.", "author": "hakonhall", "createdAt": "2020-12-03T14:54:15Z", "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ModelContext.java", "diffHunk": "@@ -50,8 +49,35 @@\n     /** The Vespa version we want nodes to become */\n     Version wantedNodeVespaVersion();\n \n+    /**\n+     * How to remove temporary feature flags:\n+     * 1)\n+     * - Remove flag definition from Flags\n+     * - Remove method implementation from ModelContextImpl.FeatureFlags\n+     * - Modify default implementation of below method to return the new default value\n+     * - Remove all usage of below method from config-model\n+     *\n+     * 2)\n+     *  - Wait for all config-model versions in hosted production to include above changes", "originalCommit": "8a60e54d578234738058e1287f729de08ba65448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MjU2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15639#discussion_r535382562", "bodyText": "Good idea \ud83d\udc4d  See 1ffe545 for an implementation of your proposal.", "author": "bjorncs", "createdAt": "2020-12-03T16:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMwMDcwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f58978baba81c7b9a5154da528fb07333993ebbb", "chunk": "diff --git a/config-model-api/src/main/java/com/yahoo/config/model/api/ModelContext.java b/config-model-api/src/main/java/com/yahoo/config/model/api/ModelContext.java\nindex 8fafa7e604..843e850d55 100644\n--- a/config-model-api/src/main/java/com/yahoo/config/model/api/ModelContext.java\n+++ b/config-model-api/src/main/java/com/yahoo/config/model/api/ModelContext.java\n\n@@ -49,35 +50,8 @@ public interface ModelContext {\n     /** The Vespa version we want nodes to become */\n     Version wantedNodeVespaVersion();\n \n-    /**\n-     * How to remove temporary feature flags:\n-     * 1)\n-     * - Remove flag definition from Flags\n-     * - Remove method implementation from ModelContextImpl.FeatureFlags\n-     * - Modify default implementation of below method to return the new default value\n-     * - Remove all usage of below method from config-model\n-     *\n-     * 2)\n-     *  - Wait for all config-model versions in hosted production to include above changes\n-     *  - Remove below method\n-     */\n     interface FeatureFlags {\n         @ModelFeatureFlag(owners = {\"bjorncs\", \"jonmv\"}) default boolean enableAutomaticReindexing() { return false; }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}, comment = \"Revisit in May or June 2020\") default double defaultTermwiseLimit() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"vekterli\"}) default boolean useThreePhaseUpdates() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"geirst\"}, comment = \"Remove on 7.XXX when this is default on\") default boolean useDirectStorageApiRpc() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"geirst\"}, comment = \"Remove on 7.XXX when this is default on\") default boolean useFastValueTensorImplementation() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}, comment = \"Select sequencer type use while feeding\") default String feedSequencerType() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default String responseSequencerType() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default int defaultNumResponseThreads() { return 2; }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default boolean skipCommunicationManagerThread() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default boolean skipMbusRequestThread() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default boolean skipMbusReplyThread() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"tokle\"}) default boolean useAccessControlTlsHandshakeClientAuth() { return false; }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default boolean useAsyncMessageHandlingOnSchedule() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default int contentNodeBucketDBStripeBits() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default int mergeChunkSize() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n-        @ModelFeatureFlag(owners = {\"baldersheim\"}) default double feedConcurrency() { throw new UnsupportedOperationException(\"TODO specify default value\"); }\n     }\n \n     /** Warning: As elsewhere in this package, do not make backwards incompatible changes that will break old config models! */\n"}}, {"oid": "f58978baba81c7b9a5154da528fb07333993ebbb", "url": "https://github.com/vespa-engine/vespa/commit/f58978baba81c7b9a5154da528fb07333993ebbb", "message": "Specify owner(s) for all flags", "committedDate": "2020-12-03T16:07:51Z", "type": "commit"}, {"oid": "2d74fce845d4203708efde58a13f6a121c58751b", "url": "https://github.com/vespa-engine/vespa/commit/2d74fce845d4203708efde58a13f6a121c58751b", "message": "Fix handling of timestamp for permanent flags", "committedDate": "2020-12-03T16:07:56Z", "type": "commit"}, {"oid": "1cfd01b4ec24abff206c9fcdb7e20fea8a664c59", "url": "https://github.com/vespa-engine/vespa/commit/1cfd01b4ec24abff206c9fcdb7e20fea8a664c59", "message": "Move definition of permanent flags to separate class", "committedDate": "2020-12-03T16:11:36Z", "type": "commit"}, {"oid": "5832d0d6182f69bcd67403cb219420ddbe29487c", "url": "https://github.com/vespa-engine/vespa/commit/5832d0d6182f69bcd67403cb219420ddbe29487c", "message": "Remove unused methods in ModelContext.Properties", "committedDate": "2020-12-03T16:11:36Z", "type": "commit"}, {"oid": "fb21ab2649cd20e2361926404e1843c47c15d4fd", "url": "https://github.com/vespa-engine/vespa/commit/fb21ab2649cd20e2361926404e1843c47c15d4fd", "message": "Move non-permanent feature flags to ModelContext.FeatureFlags", "committedDate": "2020-12-03T16:11:36Z", "type": "commit"}, {"oid": "1ffe5453a05bc650c313885fe1a743010978cea4", "url": "https://github.com/vespa-engine/vespa/commit/1ffe5453a05bc650c313885fe1a743010978cea4", "message": "Improve workflow on how to remove a temporary flag", "committedDate": "2020-12-03T16:18:54Z", "type": "commit"}, {"oid": "1ffe5453a05bc650c313885fe1a743010978cea4", "url": "https://github.com/vespa-engine/vespa/commit/1ffe5453a05bc650c313885fe1a743010978cea4", "message": "Improve workflow on how to remove a temporary flag", "committedDate": "2020-12-03T16:18:54Z", "type": "forcePushed"}, {"oid": "cf321a8278dc8051e152511cff3e73e92294e74f", "url": "https://github.com/vespa-engine/vespa/commit/cf321a8278dc8051e152511cff3e73e92294e74f", "message": "Add sample value for 'removeAfter'", "committedDate": "2020-12-03T17:31:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNjI3MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15639#discussion_r535926271", "bodyText": "This was marked as permanent in the speadsheet...", "author": "freva", "createdAt": "2020-12-04T08:39:33Z", "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -46,207 +42,133 @@\n public class Flags {\n     private static volatile TreeMap<FlagId, FlagDefinition> flags = new TreeMap<>();\n \n-    public static final UnboundBooleanFlag FLEET_CANARY = defineFeatureFlag(\n-            \"fleet-canary\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"Whether the host is a fleet canary.\",\n-            \"Takes effect on next host admin tick.\",\n-            HOSTNAME);\n-\n-    public static final UnboundListFlag<String> DISABLED_HOST_ADMIN_TASKS = defineListFlag(\n-            \"disabled-host-admin-tasks\", List.of(), String.class,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"List of host-admin task names (as they appear in the log, e.g. root>main>UpgradeTask), or some node-agent \" +\n-            \"functionality (see NodeAgentTask), that should be skipped\",\n-            \"Takes effect on next host admin tick\",\n-            HOSTNAME, NODE_TYPE);\n-\n-    public static final UnboundStringFlag DOCKER_VERSION = defineStringFlag(\n-            \"docker-version\", \"1.13.1-102.git7f2769b\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"The version of the docker to use of the format VERSION-REL: The YUM package to be installed will be \" +\n-            \"2:docker-VERSION-REL.el7.centos.x86_64 in AWS (and without '.centos' otherwise). \" +\n-            \"If docker-version is not of this format, it must be parseable by YumPackageName::fromString.\",\n-            \"Takes effect on next tick.\",\n-            HOSTNAME);\n-\n-    public static final UnboundDoubleFlag CONTAINER_CPU_CAP = defineDoubleFlag(\n-            \"container-cpu-cap\", 0,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"Hard limit on how many CPUs a container may use. This value is multiplied by CPU allocated to node, so \" +\n-            \"to cap CPU at 200%, set this to 2, etc.\",\n-            \"Takes effect on next node agent tick. Change is orchestrated, but does NOT require container restart\",\n-            HOSTNAME, APPLICATION_ID);\n-\n-    public static final UnboundIntFlag REBOOT_INTERVAL_IN_DAYS = defineIntFlag(\n-            \"reboot-interval-in-days\", 30,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"No reboots are scheduled 0x-1x reboot intervals after the previous reboot, while reboot is \" +\n-            \"scheduled evenly distributed in the 1x-2x range (and naturally guaranteed at the 2x boundary).\",\n-            \"Takes effect on next run of NodeRebooter\");\n-\n     public static final UnboundBooleanFlag RETIRE_WITH_PERMANENTLY_DOWN = defineFeatureFlag(\n             \"retire-with-permanently-down\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"hakonhall\"), \"2020-12-02\", \"2021-02-01\",\n             \"If enabled, retirement will end with setting the host status to PERMANENTLY_DOWN, \" +\n             \"instead of ALLOWED_TO_BE_DOWN (old behavior).\",\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<ClusterCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), ClusterCapacity.class,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"Specifies the resources that ought to be immediately available for additional cluster \" +\n-            \"allocations.  If the resources are not available, additional hosts will be provisioned. \" +\n-            \"Only applies to dynamically provisioned zones.\",\n-            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n-\n-    public static final UnboundJacksonFlag<SharedHost> SHARED_HOST = defineJacksonFlag(\n-            \"shared-host\", SharedHost.createDisabled(), SharedHost.class,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"Specifies whether shared hosts can be provisioned, and if so, the advertised \" +\n-            \"node resources of the host, the maximum number of containers, etc.\",\n-            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n-\n-    public static final UnboundListFlag<String> INACTIVE_MAINTENANCE_JOBS = defineListFlag(\n-            \"inactive-maintenance-jobs\", List.of(), String.class,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"The list of maintenance jobs that are inactive.\",\n-            \"Takes effect immediately, but any currently running jobs will run until completion.\");\n-\n     public static final UnboundDoubleFlag DEFAULT_TERM_WISE_LIMIT = defineDoubleFlag(\n             \"default-term-wise-limit\", 1.0,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Default limit for when to apply termwise query evaluation\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n-    public static final UnboundStringFlag JVM_GC_OPTIONS = defineStringFlag(\n-            \"jvm-gc-options\", \"\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"Sets deafult jvm gc options\",\n-            \"Takes effect at redeployment\",\n-            ZONE_ID, APPLICATION_ID);\n-\n     public static final UnboundStringFlag FEED_SEQUENCER_TYPE = defineStringFlag(\n             \"feed-sequencer-type\", \"LATENCY\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Selects type of sequenced executor used for feeding, valid values are LATENCY, ADAPTIVE, THROUGHPUT\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundStringFlag RESPONSE_SEQUENCER_TYPE = defineStringFlag(\n             \"response-sequencer-type\", \"ADAPTIVE\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Selects type of sequenced executor used for mbus responses, valid values are LATENCY, ADAPTIVE, THROUGHPUT\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundIntFlag RESPONSE_NUM_THREADS = defineIntFlag(\n             \"response-num-threads\", 2,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Number of threads used for mbus responses, default is 2, negative number = numcores/4\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag SKIP_COMMUNICATIONMANAGER_THREAD = defineFeatureFlag(\n             \"skip-communicatiomanager-thread\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Should we skip the communicationmanager thread\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag SKIP_MBUS_REQUEST_THREAD = defineFeatureFlag(\n             \"skip-mbus-request-thread\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Should we skip the mbus request thread\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag SKIP_MBUS_REPLY_THREAD = defineFeatureFlag(\n             \"skip-mbus-reply-thread\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"baldersheim\"), \"2020-12-02\", \"2021-02-01\",\n             \"Should we skip the mbus reply thread\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag USE_THREE_PHASE_UPDATES = defineFeatureFlag(\n             \"use-three-phase-updates\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"vekterli\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to enable the use of three-phase updates when bucket replicas are out of sync.\",\n             \"Takes effect at redeployment\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag USE_DIRECT_STORAGE_API_RPC = defineFeatureFlag(\n             \"use-direct-storage-api-rpc\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"geirst\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to use direct RPC for Storage API communication between content cluster nodes.\",\n             \"Takes effect at restart of distributor and content node process\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag USE_FAST_VALUE_TENSOR_IMPLEMENTATION = defineFeatureFlag(\n             \"use-fast-value-tensor-implementation\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"geirst\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to use FastValueBuilderFactory as the tensor implementation on all content nodes.\",\n             \"Takes effect at restart of content node process\",\n             ZONE_ID, APPLICATION_ID);\n \n     public static final UnboundBooleanFlag HOST_HARDENING = defineFeatureFlag(\n             \"host-hardening\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"hakonhall\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to enable host hardening Linux baseline.\",\n             \"Takes effect on next tick or on host-admin restart (may vary where used).\",\n             HOSTNAME);\n \n     public static final UnboundBooleanFlag TCP_ABORT_ON_OVERFLOW = defineFeatureFlag(\n             \"tcp-abort-on-overflow\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"andreer\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to set /proc/sys/net/ipv4/tcp_abort_on_overflow to 0 (false) or 1 (true)\",\n             \"Takes effect on next host-admin tick.\",\n             HOSTNAME);\n \n-    public static final UnboundStringFlag ZOOKEEPER_SERVER_VERSION = defineStringFlag(\n-            \"zookeeper-server-version\", \"3.5.6\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n-            \"ZooKeeper server version, a jar file zookeeper-server-<ZOOKEEPER_SERVER_VERSION>-jar-with-dependencies.jar must exist\",\n-            \"Takes effect on restart of Docker container\",\n-            NODE_TYPE, APPLICATION_ID, HOSTNAME);\n-\n     public static final UnboundStringFlag TLS_FOR_ZOOKEEPER_CLIENT_SERVER_COMMUNICATION = defineStringFlag(\n             \"tls-for-zookeeper-client-server-communication\", \"OFF\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"hmusum\"), \"2020-12-02\", \"2021-02-01\",\n             \"How to setup TLS for ZooKeeper client/server communication. Valid values are OFF, PORT_UNIFICATION, TLS_WITH_PORT_UNIFICATION, TLS_ONLY\",\n             \"Takes effect on restart of config server\",\n             NODE_TYPE, HOSTNAME);\n \n     public static final UnboundBooleanFlag USE_TLS_FOR_ZOOKEEPER_CLIENT = defineFeatureFlag(\n             \"use-tls-for-zookeeper-client\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"hmusum\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to use TLS for ZooKeeper clients\",\n             \"Takes effect on restart of process\",\n             NODE_TYPE, HOSTNAME);\n \n     public static final UnboundBooleanFlag VALIDATE_ENDPOINT_CERTIFICATES = defineFeatureFlag(\n             \"validate-endpoint-certificates\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"andreer\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether endpoint certificates should be validated before use\",\n             \"Takes effect on the next deployment of the application\");\n \n     public static final UnboundStringFlag DELETE_UNUSED_ENDPOINT_CERTIFICATES = defineStringFlag(\n             \"delete-unused-endpoint-certificates\", \"disable\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"andreer\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether the endpoint certificate maintainer should delete unused certificates in cameo/zk\",\n             \"Takes effect on next scheduled run of maintainer - set to \\\"disable\\\", \\\"dryrun\\\" or \\\"enable\\\"\");\n \n     public static final UnboundBooleanFlag USE_ALTERNATIVE_ENDPOINT_CERTIFICATE_PROVIDER = defineFeatureFlag(\n             \"use-alternative-endpoint-certificate-provider\", false,\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"andreer\"), \"2020-12-02\", \"2021-02-01\",\n             \"Whether to use an alternative CA when provisioning new certificates\",\n             \"Takes effect only on initial application deployment - not on later certificate refreshes!\");\n \n     public static final UnboundStringFlag DOCKER_IMAGE_REPO = defineStringFlag(\n             \"docker-image-repo\", \"\",\n-            List.of(\"nobody\"), \"2020-12-02\", \"2021-02-01\",\n+            List.of(\"valerijf\"), \"2020-12-02\", \"2021-02-01\",", "originalCommit": "cf321a8278dc8051e152511cff3e73e92294e74f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzOTM1Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15639#discussion_r535939357", "bodyText": "Thanks for noticing, I'll move in next PR \ud83d\udc4d", "author": "bjorncs", "createdAt": "2020-12-04T08:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyNjI3MQ=="}], "type": "inlineReview", "revised_code": null}]}