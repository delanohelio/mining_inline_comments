{"pr_number": 14978, "pr_title": "Bjorncs/jetty threadpool", "pr_createdAt": "2020-10-20T14:58:15Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14978", "timeline": [{"oid": "d2379fb5dbf598923f719847cf759ad54a90747e", "url": "https://github.com/vespa-engine/vespa/commit/d2379fb5dbf598923f719847cf759ad54a90747e", "message": "Increase minimum Jetty threadpool size to 16\n\nAlso add HostProvisionerWithCustomRealResource constructor setting number of vcpu.", "committedDate": "2020-10-20T14:57:19Z", "type": "commit"}, {"oid": "5b80f539311a6dac6629890568ab65022f907894", "url": "https://github.com/vespa-engine/vespa/commit/5b80f539311a6dac6629890568ab65022f907894", "message": "Reimplement HealthCheckProxyHandler as an asynchronous handler", "committedDate": "2020-10-20T14:57:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNjczMA==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509016730", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));\n          \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client-\"));", "author": "jonmv", "createdAt": "2020-10-21T06:21:57Z", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -49,6 +53,7 @@\n \n     private static final String HEALTH_CHECK_PATH = \"/status.html\";\n \n+    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));", "originalCommit": "5b80f539311a6dac6629890568ab65022f907894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTIxMA==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509051210", "bodyText": "Fixed", "author": "bjorncs", "createdAt": "2020-10-21T07:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "chunk": "diff --git a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\nindex 5a27354879..1a24521e10 100644\n--- a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n+++ b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n\n@@ -53,7 +53,7 @@ class HealthCheckProxyHandler extends HandlerWrapper {\n \n     private static final String HEALTH_CHECK_PATH = \"/status.html\";\n \n-    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));\n+    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client-\"));\n     private final Map<Integer, ProxyTarget> portToProxyTargetMapping;\n \n     HealthCheckProxyHandler(List<JDiscServerConnector> connectors) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTQ3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509021472", "bodyText": "Super-nitty: this field could just be a local variable in the run method.", "author": "jonmv", "createdAt": "2020-10-21T06:33:37Z", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;", "originalCommit": "5b80f539311a6dac6629890568ab65022f907894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0NzI0Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509047247", "bodyText": "getOuputStream() may throw IOException, so I want to do it in the handle method.", "author": "bjorncs", "createdAt": "2020-10-21T07:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "chunk": "diff --git a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\nindex 5a27354879..1a24521e10 100644\n--- a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n+++ b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n\n@@ -174,9 +174,7 @@ class HealthCheckProxyHandler extends HandlerWrapper {\n             if (response != null && !response.isExpired()) {\n                 return response;\n             }\n-            StatusResponse statusResponse = getStatusResponse();\n-            lastResponse = statusResponse;\n-            return statusResponse;\n+            return this.lastResponse = getStatusResponse();\n         }\n \n         private StatusResponse getStatusResponse() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDM0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024343", "bodyText": "I don't like the spec here. How much can you write without blocking? Generally, this should be a while loop, but since you only do a single write here, and then close, I guess this is fine.", "author": "jonmv", "createdAt": "2020-10-21T06:40:18Z", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();", "originalCommit": "5b80f539311a6dac6629890568ab65022f907894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MDE2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509050165", "bodyText": "Yes, it's a bad interface. The servlet has no clue on how much data to produce. This method typically implemented as a while loop if the servlet had multiple byte buffers to write.", "author": "bjorncs", "createdAt": "2020-10-21T07:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "chunk": "diff --git a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\nindex 5a27354879..1a24521e10 100644\n--- a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n+++ b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n\n@@ -174,9 +174,7 @@ class HealthCheckProxyHandler extends HandlerWrapper {\n             if (response != null && !response.isExpired()) {\n                 return response;\n             }\n-            StatusResponse statusResponse = getStatusResponse();\n-            lastResponse = statusResponse;\n-            return statusResponse;\n+            return this.lastResponse = getStatusResponse();\n         }\n \n         private StatusResponse getStatusResponse() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDYyOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StatusResponse statusResponse = getStatusResponse();\n          \n          \n            \n                        lastResponse = statusResponse;\n          \n          \n            \n                        return statusResponse;\n          \n          \n            \n                        return lastResponse = getStatusResponse();\n          \n      \n    \n    \n  \n\nI find this easier to read, but personal preference I guess :)", "author": "jonmv", "createdAt": "2020-10-21T06:40:54Z", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(Throwable t) {\n+                    log.log(Level.FINE, t, () -> \"Failed to write status response: \" + t.getMessage());\n+                    asyncContext.complete();\n+                }\n+            });\n+        }\n+    }\n+\n     private static class ProxyTarget implements AutoCloseable {\n         final int port;\n         final Duration timeout;\n         final SslContextFactory.Server sslContextFactory;\n         volatile CloseableHttpClient client;\n+        volatile StatusResponse lastResponse;\n \n         ProxyTarget(int port, Duration timeout, SslContextFactory.Server sslContextFactory) {\n             this.port = port;\n             this.timeout = timeout;\n             this.sslContextFactory = sslContextFactory;\n         }\n \n-        CloseableHttpResponse requestStatusHtml() throws IOException {\n-            return client()\n-                    .execute(new HttpGet(\"https://localhost:\" + port + HEALTH_CHECK_PATH));\n+        StatusResponse requestStatusHtml() {\n+            StatusResponse response = lastResponse;\n+            if (response != null && !response.isExpired()) {\n+                return response;\n+            }\n+            StatusResponse statusResponse = getStatusResponse();\n+            lastResponse = statusResponse;\n+            return statusResponse;", "originalCommit": "5b80f539311a6dac6629890568ab65022f907894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTI5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509051299", "bodyText": "Done :)", "author": "bjorncs", "createdAt": "2020-10-21T07:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "chunk": "diff --git a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\nindex 5a27354879..1a24521e10 100644\n--- a/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n+++ b/jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java\n\n@@ -174,9 +174,7 @@ class HealthCheckProxyHandler extends HandlerWrapper {\n             if (response != null && !response.isExpired()) {\n                 return response;\n             }\n-            StatusResponse statusResponse = getStatusResponse();\n-            lastResponse = statusResponse;\n-            return statusResponse;\n+            return this.lastResponse = getStatusResponse();\n         }\n \n         private StatusResponse getStatusResponse() {\n"}}, {"oid": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "url": "https://github.com/vespa-engine/vespa/commit/e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "message": "Add suffix in thread name. Combine return statement + assignment.", "committedDate": "2020-10-21T07:31:05Z", "type": "commit"}]}