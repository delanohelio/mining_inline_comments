{"pr_number": 14818, "pr_title": "Rebalance nodes to exclusive switches", "pr_createdAt": "2020-10-12T13:04:11Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14818", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzMyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r503997320", "bodyText": "Also add to https://github.com/vespa-engine/vespa/blob/master/controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/noderepository/NodeHistory.java", "author": "freva", "createdAt": "2020-10-13T14:26:14Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/node/Agent.java", "diffHunk": "@@ -22,6 +22,7 @@\n     ReservationExpirer,\n     DynamicProvisioningMaintainer,\n     RetiringUpgrader,\n-    SpareCapacityMaintainer\n+    SpareCapacityMaintainer,\n+    SwitchRebalancer,", "originalCommit": "59b63536dd563a3a69b29b5bd875c3a5d325cb1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "408ee5ad7b66a93766ac52da062531a0972a5e97", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/node/Agent.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/node/Agent.java\nindex b82c99ac26..eba9e4a1ac 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/node/Agent.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/node/Agent.java\n\n@@ -22,7 +22,6 @@ public enum Agent {\n     ReservationExpirer,\n     DynamicProvisioningMaintainer,\n     RetiringUpgrader,\n-    SpareCapacityMaintainer,\n-    SwitchRebalancer,\n+    SpareCapacityMaintainer\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504027362", "bodyText": "When we will try to add new nodes in addNewDockerNodesOn(), wont this lead to us only considering the node on the first host that we read from ZK (or whatever order the hosts in allNodes are)?", "author": "freva", "createdAt": "2020-10-13T15:03:59Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -168,14 +171,38 @@ private NodeCandidate candidateFrom(Node node, boolean isSurplus) {\n                                                                          currentClusterSize));\n         }\n         else {\n-            return NodeCandidate.createStandalone(node, isSurplus, false);\n+            return NodeCandidate.createStandalone(node, isSurplus, false, exclusiveSwitch);\n         }\n     }\n \n-    private boolean isReplacement(int nofNodesInCluster, int nodeFailedNodes) {\n-        if (nodeFailedNodes == 0) return false;\n+    /** Returns whether given node is on an exclusive switch */\n+    private boolean onExclusiveSwitch(Node node, Optional<Node> parent) {\n+        Node host = parent.orElse(node);\n+        return unusedSwitch(host, node.allocation()\n+                                      .map(allocation -> allocation.membership().cluster().id())\n+                                      .orElseGet(clusterSpec::id));\n+    }\n+\n+    /** Returns whether switch of host is unused by any existing candidates for given cluster */\n+    private boolean unusedSwitch(Node host, ClusterSpec.Id cluster) {\n+        if (host.switchHostname().isEmpty()) return true;\n+        String switchHostname = host.switchHostname().get();\n+        for (var candidate : nodes) {", "originalCommit": "59b63536dd563a3a69b29b5bd875c3a5d325cb1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1Njg2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504256869", "bodyText": "How? Each node added is checked against all the (parents of) candidates already added.", "author": "mpolden", "createdAt": "2020-10-13T21:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MjQxMw==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504452413", "bodyText": "Lets say we need to allocate 1 node, we have 2 hosts: a and b. b has massive skew, so allocation to a should be preferred. Both a and b are on the same switch, s.\nSince we need to allocate 1 node, we start by creating a virtual reserved node on both a and b: a1 and b1, as we create them, we check if nodes already has a node on s (initially, that is not the case). After we add the first of a1 and b1, the second one will be deemed as not on exclusive switch, so skew is completely ignored.", "author": "freva", "createdAt": "2020-10-14T07:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1OTk1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504459953", "bodyText": "So given two hosts on the same switch, you want to prefer the candidate on the host with the least skew?", "author": "mpolden", "createdAt": "2020-10-14T07:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MjIzOA==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504462238", "bodyText": "The point is that while a1 and b1 are on the same switch, only 1 of them will be actually allocated anyway, so they cant be in conflict with each other", "author": "freva", "createdAt": "2020-10-14T07:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MDcwOA==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r504470708", "bodyText": "only 1 of them will be actually allocated anyway\n\nThe exclusive switch isn't a hard requirement though. If you ask for 2 nodes, you will allocate both a1 and b1 if no better candidate on an exclusive switch exists.", "author": "mpolden", "createdAt": "2020-10-14T07:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyNzM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "408ee5ad7b66a93766ac52da062531a0972a5e97", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java\nindex a4d2707fac..d2163fc9b5 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java\n\n@@ -199,10 +199,10 @@ public class NodePrioritizer {\n         return true;\n     }\n \n-    /** Returns whether we are allocating to replace a failed node */\n-    private boolean isReplacement(int nodesInCluster, int failedNodesInCluster) {\n-        if (failedNodesInCluster == 0) return false;\n-        return requestedNodes.fulfilledBy(nodesInCluster - failedNodesInCluster);\n+    private boolean isReplacement(int nofNodesInCluster, int nodeFailedNodes) {\n+        if (nodeFailedNodes == 0) return false;\n+\n+        return requestedNodes.fulfilledBy(nofNodesInCluster - nodeFailedNodes);\n     }\n \n     /**\n"}}, {"oid": "408ee5ad7b66a93766ac52da062531a0972a5e97", "url": "https://github.com/vespa-engine/vespa/commit/408ee5ad7b66a93766ac52da062531a0972a5e97", "message": "Prefer nodes on exclusive switches", "committedDate": "2020-10-16T07:33:00Z", "type": "commit"}, {"oid": "de2afb16321a45a92670924876cebe9ebb1739b7", "url": "https://github.com/vespa-engine/vespa/commit/de2afb16321a45a92670924876cebe9ebb1739b7", "message": "Add javadoc", "committedDate": "2020-10-16T07:33:00Z", "type": "commit"}, {"oid": "cad37364f64e6a9d369d99c9b49b73729e0274c8", "url": "https://github.com/vespa-engine/vespa/commit/cad37364f64e6a9d369d99c9b49b73729e0274c8", "message": "Rebalance nodes to exclusive switches", "committedDate": "2020-10-16T07:33:00Z", "type": "commit"}, {"oid": "6d0477f5a592bdacf1850c914899e123ce2aa518", "url": "https://github.com/vespa-engine/vespa/commit/6d0477f5a592bdacf1850c914899e123ce2aa518", "message": "Add agent to wire class", "committedDate": "2020-10-16T07:33:00Z", "type": "commit"}, {"oid": "d89a5bca6ee8b6dd8cd33f9e227ed7e20cb3b20b", "url": "https://github.com/vespa-engine/vespa/commit/d89a5bca6ee8b6dd8cd33f9e227ed7e20cb3b20b", "message": "Prioritize nodes locally on switch", "committedDate": "2020-10-16T21:13:46Z", "type": "commit"}, {"oid": "cf094490f143a8fa342d1bb021d8389578823147", "url": "https://github.com/vespa-engine/vespa/commit/cf094490f143a8fa342d1bb021d8389578823147", "message": "Hide node collection details", "committedDate": "2020-10-16T21:13:46Z", "type": "commit"}, {"oid": "f53cd32ca6bff33a336e84d279c4961fd1f19f9c", "url": "https://github.com/vespa-engine/vespa/commit/f53cd32ca6bff33a336e84d279c4961fd1f19f9c", "message": "Simplify", "committedDate": "2020-10-16T21:31:09Z", "type": "commit"}, {"oid": "f53cd32ca6bff33a336e84d279c4961fd1f19f9c", "url": "https://github.com/vespa-engine/vespa/commit/f53cd32ca6bff33a336e84d279c4961fd1f19f9c", "message": "Simplify", "committedDate": "2020-10-16T21:31:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0Mjc2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r507042769", "bodyText": "All the nodes should be on the same cluster, but they aren't because we add all application nodes (addApplicationNodes()) instead of just adding cluster nodes. I think we should fix addApplicationNodes() to just add cluster nodes (they are immediately just dropped in NodeAllocation::offer anyway) and then we wont need this class, just group by switchHostname.", "author": "freva", "createdAt": "2020-10-18T08:32:02Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -191,9 +222,38 @@ private boolean canStillAllocateToParentOf(Node node) {\n         return nodeRepository.canAllocateTenantNodeTo(parent.get());\n     }\n \n-    private static NodeResources resources(NodeSpec requestedNodes) {\n-        if ( ! (requestedNodes instanceof NodeSpec.CountNodeSpec)) return null;\n-        return requestedNodes.resources().get();\n+    /** A cluster and its network switch */\n+    private static class ClusterSwitch {\n+\n+        private static final ClusterSwitch unknown = new ClusterSwitch(null, null);\n+\n+        private final ClusterSpec.Id cluster;", "originalCommit": "f53cd32ca6bff33a336e84d279c4961fd1f19f9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMzYxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14818#discussion_r507513615", "bodyText": "I'll look into it. \ud83d\udc4d", "author": "mpolden", "createdAt": "2020-10-19T06:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0Mjc2OQ=="}], "type": "inlineReview", "revised_code": null}]}