{"pr_number": 15815, "pr_title": "Shut down ZooKeeper properly", "pr_createdAt": "2020-12-15T10:24:56Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15815", "timeline": [{"oid": "1468a9df93196f38d8fc86d5d2be61650a94980f", "url": "https://github.com/vespa-engine/vespa/commit/1468a9df93196f38d8fc86d5d2be61650a94980f", "message": "Shut down ZooKeeper properly", "committedDate": "2020-12-15T10:23:14Z", "type": "commit"}, {"oid": "56d4bd75d2d7cfb9fa3fe5095cf39fb7903a8bab", "url": "https://github.com/vespa-engine/vespa/commit/56d4bd75d2d7cfb9fa3fe5095cf39fb7903a8bab", "message": "Use exponential backoff for ZooKeeper restart", "committedDate": "2020-12-15T10:23:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1NDUyMg==", "url": "https://github.com/vespa-engine/vespa/pull/15815#discussion_r543454522", "bodyText": "I think this should have worked as follows:\n\nquorumPeer.running should be set to false (under a synchronized(quorumPeer)), which means the quorumPeer thread will eventually exit its thread\nwait until quorumPeer thread exits with quorumPeer.join(),\nthen do the rest of shutdown() tearing down resources.\n\nAs it is now (3) happens before (2), tearing down resources that might be used concurrently by the quorum peer thread.\nAnd (2) may happen a long time after we return from this method, meaning it may still run concurrently with trying to start another instance of ZK.", "author": "hakonhall", "createdAt": "2020-12-15T15:40:03Z", "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/VespaQuorumPeer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import org.apache.zookeeper.server.admin.AdminServer;\n+import org.apache.zookeeper.server.quorum.QuorumPeerConfig;\n+import org.apache.zookeeper.server.quorum.QuorumPeerMain;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Starts/stops a ZooKeeper server. Extends QuorumPeerMain to be able to call initializeAndRun() and wraps\n+ * exceptions so it can be used by code that does not depend on ZooKeeper.\n+ *\n+ * @author hmusum\n+ */\n+class VespaQuorumPeer extends QuorumPeerMain {\n+\n+    private static final Logger LOG = Logger.getLogger(VespaQuorumPeer.class.getName());\n+\n+    public void start(Path path) {\n+        initializeAndRun(new String[]{ path.toFile().getAbsolutePath()});\n+    }\n+\n+    public void shutdown() {\n+        if (quorumPeer != null) {\n+            try {\n+                quorumPeer.shutdown();", "originalCommit": "56d4bd75d2d7cfb9fa3fe5095cf39fb7903a8bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2NzEzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15815#discussion_r543467131", "bodyText": "quorumPeer.running should be set to false (under a synchronized(quorumPeer)), which means the quorumPeer thread will eventually exit its thread\n\nquorumPeer.running is private though, as far as I can tell we can only initiate shutdown through quorumPeer.shutdown()\n\nwait until quorumPeer thread exits with quorumPeer.join(),\n\nYes, will fix.\n\nAnd (2) may happen a long time after we return from this method, meaning it may still run concurrently with trying to start another instance of ZK.\n\nYes, there any many reasons that the old server will linger. Component destruction only happens after 60s for example. This is why server start is retried.", "author": "mpolden", "createdAt": "2020-12-15T15:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1NDUyMg=="}], "type": "inlineReview", "revised_code": null}]}