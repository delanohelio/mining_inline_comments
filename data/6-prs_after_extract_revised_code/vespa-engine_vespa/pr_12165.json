{"pr_number": 12165, "pr_title": "Balder/add support for trace in accesslog", "pr_createdAt": "2020-02-12T14:25:48Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12165", "timeline": [{"oid": "7e935f177c2c5195fc3055d649fa962d84b275e9", "url": "https://github.com/vespa-engine/vespa/commit/7e935f177c2c5195fc3055d649fa962d84b275e9", "message": "- Add trace as a field in the josn access log.\n- Add the trace top the accesslog entry if debugging is enabled in SearchHandler.", "committedDate": "2020-02-12T13:42:08Z", "type": "commit"}, {"oid": "a809a9d8939d39baad3f75ee3d7a72ed2f3104d7", "url": "https://github.com/vespa-engine/vespa/commit/a809a9d8939d39baad3f75ee3d7a72ed2f3104d7", "message": "Render Inspectable.", "committedDate": "2020-02-12T14:08:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxMzkxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378313911", "bodyText": "Why are you removing the function indirection in these?", "author": "bratseth", "createdAt": "2020-02-12T15:13:21Z", "path": "container-search/src/main/java/com/yahoo/search/handler/SearchHandler.java", "diffHunk": "@@ -410,7 +413,7 @@ private Result search(String request, Query query, Chain<Searcher> searchChain)\n         } catch (ParseException e) {\n             ErrorMessage error = ErrorMessage.createIllegalQuery(\"Could not parse query [\" + request + \"]: \"\n                                                                  + Exceptions.toMessageString(e));\n-            log.log(LogLevel.DEBUG, () -> error.getDetailedMessage());", "originalCommit": "a809a9d8939d39baad3f75ee3d7a72ed2f3104d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyMDEzNA==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378520134", "bodyText": "That was supposed to be method reference, not method call. Fixed", "author": "baldersheim", "createdAt": "2020-02-12T21:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxMzkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "94b00309052e520213f63a39e0ef7f5929d88272", "chunk": "diff --git a/container-search/src/main/java/com/yahoo/search/handler/SearchHandler.java b/container-search/src/main/java/com/yahoo/search/handler/SearchHandler.java\nindex dc066e6543..dad106570a 100644\n--- a/container-search/src/main/java/com/yahoo/search/handler/SearchHandler.java\n+++ b/container-search/src/main/java/com/yahoo/search/handler/SearchHandler.java\n\n@@ -413,7 +413,7 @@ public class SearchHandler extends LoggingRequestHandler {\n         } catch (ParseException e) {\n             ErrorMessage error = ErrorMessage.createIllegalQuery(\"Could not parse query [\" + request + \"]: \"\n                                                                  + Exceptions.toMessageString(e));\n-            log.log(LogLevel.DEBUG, error.getDetailedMessage());\n+            log.log(LogLevel.DEBUG, error::getDetailedMessage);\n             return new Result(query, error);\n         } catch (IllegalArgumentException e) {\n             if (\"Comparison method violates its general contract!\".equals(e.getMessage())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNTM3OA==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378315378", "bodyText": "Isn't the naming convention here \"acceptX\"?", "author": "bratseth", "createdAt": "2020-02-12T15:15:28Z", "path": "container-search/src/main/java/com/yahoo/search/rendering/JsonRenderer.java", "diffHunk": "@@ -788,11 +642,11 @@ protected void renderFieldContents(Object field) throws IOException {\n             if (field instanceof Inspectable && ! (field instanceof FeatureData)) {\n                 renderInspector(((Inspectable)field).inspect());\n             } else {\n-                renderFieldContentsDirect(field);\n+                consume(field);\n             }\n         }\n \n-        private void renderFieldContentsDirect(Object field) throws IOException {\n+        public void consume(Object field) throws IOException {", "originalCommit": "a809a9d8939d39baad3f75ee3d7a72ed2f3104d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODE4MA==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378528180", "bodyText": "Correct -> fixed", "author": "baldersheim", "createdAt": "2020-02-12T21:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNTM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "1a6abd7597167c066d419fc408f2a2fdd4a4dddd", "chunk": "diff --git a/container-search/src/main/java/com/yahoo/search/rendering/JsonRenderer.java b/container-search/src/main/java/com/yahoo/search/rendering/JsonRenderer.java\nindex 89135128cb..31f8194b3b 100644\n--- a/container-search/src/main/java/com/yahoo/search/rendering/JsonRenderer.java\n+++ b/container-search/src/main/java/com/yahoo/search/rendering/JsonRenderer.java\n\n@@ -642,11 +642,12 @@ public class JsonRenderer extends AsynchronousSectionedRenderer<Result> {\n             if (field instanceof Inspectable && ! (field instanceof FeatureData)) {\n                 renderInspector(((Inspectable)field).inspect());\n             } else {\n-                consume(field);\n+                accept(field);\n             }\n         }\n \n-        public void consume(Object field) throws IOException {\n+        @Override\n+        public void accept(Object field) throws IOException {\n             if (field == null) {\n                 generator.writeNull();\n             } else if (field instanceof Boolean) {\n"}}, {"oid": "94b00309052e520213f63a39e0ef7f5929d88272", "url": "https://github.com/vespa-engine/vespa/commit/94b00309052e520213f63a39e0ef7f5929d88272", "message": "Use method reference.", "committedDate": "2020-02-12T21:22:25Z", "type": "commit"}, {"oid": "1a6abd7597167c066d419fc408f2a2fdd4a4dddd", "url": "https://github.com/vespa-engine/vespa/commit/1a6abd7597167c066d419fc408f2a2fdd4a4dddd", "message": "consume -> accept", "committedDate": "2020-02-12T21:38:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0NzM0Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378747346", "bodyText": "Missing copyright header and author.", "author": "bjorncs", "createdAt": "2020-02-13T09:38:49Z", "path": "container-accesslogging/src/main/java/com/yahoo/container/logging/TraceRenderer.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.yahoo.container.logging;", "originalCommit": "7e935f177c2c5195fc3055d649fa962d84b275e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0Nzg0MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378747841", "bodyText": "Consider TraceRenderer to yolean (unless it has dependencies to types in container-accesslogging). Both TraceVisitor and TraceNode are classes from yolean.", "author": "bjorncs", "createdAt": "2020-02-13T09:39:51Z", "path": "container-accesslogging/src/main/java/com/yahoo/container/logging/TraceRenderer.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.yahoo.container.logging;\n+\n+import com.yahoo.yolean.trace.TraceNode;\n+import com.yahoo.yolean.trace.TraceVisitor;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import java.io.IOException;\n+\n+public class TraceRenderer extends TraceVisitor {", "originalCommit": "7e935f177c2c5195fc3055d649fa962d84b275e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0ODA5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/12165#discussion_r378748091", "bodyText": "This could be replaced with java.io.UncheckedIOException", "author": "bjorncs", "createdAt": "2020-02-13T09:40:21Z", "path": "container-accesslogging/src/main/java/com/yahoo/container/logging/TraceRenderer.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.yahoo.container.logging;\n+\n+import com.yahoo.yolean.trace.TraceNode;\n+import com.yahoo.yolean.trace.TraceVisitor;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import java.io.IOException;\n+\n+public class TraceRenderer extends TraceVisitor {\n+    private static final String TRACE_CHILDREN = \"children\";\n+    private static final String TRACE_MESSAGE = \"message\";\n+    private static final String TRACE_TIMESTAMP = \"timestamp\";\n+    private static final String TRACE = \"trace\";\n+\n+    private final long basetime;\n+    private final JsonGenerator generator;\n+    private final FieldConsumer fieldConsumer;\n+    private boolean hasFieldName = false;\n+    int emittedChildNesting = 0;\n+    int currentChildNesting = 0;\n+    private boolean insideOpenObject = false;\n+\n+    public interface FieldConsumer {\n+        void consume(Object object) throws IOException;\n+    }\n+\n+    private static class Consumer implements FieldConsumer {\n+        private final JsonGenerator generator;\n+\n+        Consumer(JsonGenerator generator) {\n+            this.generator = generator;\n+        }\n+\n+        @Override\n+        public void consume(Object object) throws IOException {\n+            generator.writeObject(object);\n+        }\n+    }\n+\n+    TraceRenderer(JsonGenerator generator, long basetime) {\n+        this(generator, new Consumer(generator), basetime);\n+    }\n+    public TraceRenderer(JsonGenerator generator, FieldConsumer consumer, long basetime) {\n+        this.generator = generator;\n+        this.fieldConsumer = consumer;\n+        this.basetime = basetime;\n+    }\n+\n+    @Override\n+    public void entering(TraceNode node) {\n+        ++currentChildNesting;\n+    }\n+\n+    @Override\n+    public void leaving(TraceNode node) {\n+        conditionalEndObject();\n+        if (currentChildNesting == emittedChildNesting) {\n+            try {\n+                generator.writeEndArray();\n+                generator.writeEndObject();\n+            } catch (IOException e) {\n+                throw new TraceRenderWrapper(e);\n+            }\n+            --emittedChildNesting;\n+        }\n+        --currentChildNesting;\n+    }\n+\n+    @Override\n+    public void visit(TraceNode node) {\n+        try {\n+            doVisit(node.timestamp(), node.payload(), node.children().iterator().hasNext());\n+        } catch (IOException e) {\n+            throw new TraceRenderWrapper(e);\n+        }\n+    }\n+\n+    private void doVisit(long timestamp, Object payload, boolean hasChildren) throws IOException {\n+        boolean dirty = false;\n+        if (timestamp != 0L) {\n+            header();\n+            generator.writeStartObject();\n+            generator.writeNumberField(TRACE_TIMESTAMP, timestamp - basetime);\n+            dirty = true;\n+        }\n+        if (payload != null) {\n+            if (!dirty) {\n+                header();\n+                generator.writeStartObject();\n+            }\n+            generator.writeFieldName(TRACE_MESSAGE);\n+            fieldConsumer.consume(payload);\n+            dirty = true;\n+        }\n+        if (dirty) {\n+            if (!hasChildren) {\n+                generator.writeEndObject();\n+            } else {\n+                setInsideOpenObject(true);\n+            }\n+        }\n+    }\n+    private void header() {\n+        fieldName();\n+        for (int i = 0; i < (currentChildNesting - emittedChildNesting); ++i) {\n+            startChildArray();\n+        }\n+        emittedChildNesting = currentChildNesting;\n+    }\n+\n+    private void startChildArray() {\n+        try {\n+            conditionalStartObject();\n+            generator.writeArrayFieldStart(TRACE_CHILDREN);\n+        } catch (IOException e) {\n+            throw new TraceRenderWrapper(e);\n+        }\n+    }\n+\n+    private void conditionalStartObject() throws IOException {\n+        if (!isInsideOpenObject()) {\n+            generator.writeStartObject();\n+        } else {\n+            setInsideOpenObject(false);\n+        }\n+    }\n+\n+    private void conditionalEndObject() {\n+        if (isInsideOpenObject()) {\n+            // This triggers if we were inside a data node with payload and\n+            // subnodes, but none of the subnodes contained data\n+            try {\n+                generator.writeEndObject();\n+                setInsideOpenObject(false);\n+            } catch (IOException e) {\n+                throw new TraceRenderWrapper(e);\n+            }\n+        }\n+    }\n+\n+    private void fieldName() {\n+        if (hasFieldName) {\n+            return;\n+        }\n+\n+        try {\n+            generator.writeFieldName(TRACE);\n+        } catch (IOException e) {\n+            throw new TraceRenderWrapper(e);\n+        }\n+        hasFieldName = true;\n+    }\n+\n+    boolean isInsideOpenObject() {\n+        return insideOpenObject;\n+    }\n+\n+    void setInsideOpenObject(boolean insideOpenObject) {\n+        this.insideOpenObject = insideOpenObject;\n+    }\n+    public static final class TraceRenderWrapper extends RuntimeException {", "originalCommit": "7e935f177c2c5195fc3055d649fa962d84b275e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}