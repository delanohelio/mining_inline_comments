{"pr_number": 11952, "pr_title": "Use testerReady call via config server for tester containers if flag \u2026", "pr_createdAt": "2020-01-26T15:45:20Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11952", "timeline": [{"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "url": "https://github.com/vespa-engine/vespa/commit/3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "message": "Use testerReady call via config server for tester containers if flag is set", "committedDate": "2020-01-26T15:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzUxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371017515", "bodyText": "Should this use the config server way as well?", "author": "jonmv", "createdAt": "2020-01-26T17:47:09Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -455,6 +456,22 @@ private boolean containersAreUp(ApplicationId id, ZoneId zoneId, DualLogger logg\n         return true;\n     }\n \n+    /** Returns true iff all containers in the tester deployment give 100 consecutive 200 OK responses on /status.html. */\n+    private boolean testerContainersAreUp(ApplicationId id, ZoneId zoneId, DualLogger logger) {\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            DeploymentId deploymentId = new DeploymentId(id, zoneId);\n+            if (controller.jobController().cloud().testerReady(deploymentId)) {", "originalCommit": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjUyOA==", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371022528", "bodyText": "It does (if argument is deployment id the config server will be used)", "author": "hmusum", "createdAt": "2020-01-26T19:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzUxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzYxNw==", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371017617", "bodyText": "Was this used? (Reviewing on phone...)", "author": "jonmv", "createdAt": "2020-01-26T17:48:57Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -525,38 +542,58 @@ private String humanize(Node.ServiceState state) {\n                                     .productionDeployments().keySet().stream()\n                                     .map(zone -> new DeploymentId(id.application(), zone))\n                                     .collect(Collectors.toSet());\n-        deployments.add(new DeploymentId(id.application(), id.type().zone(controller.system())));\n+        ZoneId zoneId = id.type().zone(controller.system());\n+        deployments.add(new DeploymentId(id.application(), zoneId));\n \n         logger.log(\"Attempting to find endpoints ...\");\n         var endpoints = controller.applications().clusterEndpoints(deployments);\n-        if ( ! endpoints.containsKey(id.type().zone(controller.system()))) {\n+        if ( ! endpoints.containsKey(zoneId)) {\n             logger.log(WARNING, \"Endpoints for the deployment to test vanished again, while it was still active!\");\n             return Optional.of(error);\n         }\n         logEndpoints(endpoints, logger);\n \n         Optional<URI> testerEndpoint = controller.jobController().testerEndpoint(id);\n-        if (testerEndpoint.isEmpty()) {\n-            logger.log(WARNING, \"Endpoints for the tester container vanished again, while it was still active!\");\n-            return Optional.of(error);\n-        }\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            if ( ! controller.serviceRegistry().configServer().isTesterReady(getTesterDeploymentId(id))) {\n+                logger.log(WARNING, \"Tester container went bad!\");\n+                return Optional.of(error);\n+            }\n+        } else {\n+            if (testerEndpoint.isEmpty()) {\n+                logger.log(WARNING, \"Endpoints for the tester container vanished again, while it was still active!\");\n+                return Optional.of(error);\n+            }\n \n-        if ( ! controller.jobController().cloud().testerReady(testerEndpoint.get())) {\n-            logger.log(WARNING, \"Tester container went bad!\");\n-            return Optional.of(error);\n+            if ( ! controller.jobController().cloud().testerReady(testerEndpoint.get())) {\n+                logger.log(WARNING, \"Tester container went bad!\");\n+                return Optional.of(error);\n+            }\n         }\n \n         logger.log(\"Starting tests ...\");\n-        controller.jobController().cloud().startTests(testerEndpoint.get(),\n-                                                      TesterCloud.Suite.of(id.type(), isSetup),\n-                                                      testConfigSerializer.configJson(id.application(),\n-                                                                                      id.type(),\n-                                                                                      true,\n-                                                                                      endpoints,\n-                                                                                      controller.applications().contentClustersByZone(deployments)));\n+        TesterCloud.Suite suite = TesterCloud.Suite.of(id.type(), isSetup);\n+        byte[] config = testConfigSerializer.configJson(id.application(),\n+                                                        id.type(),\n+                                                        true,\n+                                                        endpoints,\n+                                                        controller.applications().contentClustersByZone(deployments));\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            controller.serviceRegistry().configServer().startTests(getTesterDeploymentId(id), suite, config);\n+        } else {\n+            controller.jobController().cloud().startTests(testerEndpoint.get(), suite, config);\n+        }\n         return Optional.of(running);\n     }\n \n+    private boolean testerReady(RunId id, URI testerEndpoint) {", "originalCommit": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjU1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371022556", "bodyText": "Oh, forgot to remove that one (ended up not being able to use it after all), will remove in next PR", "author": "hmusum", "createdAt": "2020-01-26T19:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzYxNw=="}], "type": "inlineReview", "revised_code": null}]}