{"pr_number": 13401, "pr_title": "Support provisioning exact capacity", "pr_createdAt": "2020-05-27T13:38:09Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/13401", "timeline": [{"oid": "02ff99d7f5a567f891747be1eee3f443fd98487d", "url": "https://github.com/vespa-engine/vespa/commit/02ff99d7f5a567f891747be1eee3f443fd98487d", "message": "Rewrite test to not use Mockito", "committedDate": "2020-05-27T12:06:15Z", "type": "commit"}, {"oid": "f8400289c573467829db1d9fffa370d727b0487b", "url": "https://github.com/vespa-engine/vespa/commit/f8400289c573467829db1d9fffa370d727b0487b", "message": "Split provisioning logic", "committedDate": "2020-05-27T13:08:16Z", "type": "commit"}, {"oid": "9be54355fa8938c3537fbf9b0ede5c0e597b997c", "url": "https://github.com/vespa-engine/vespa/commit/9be54355fa8938c3537fbf9b0ede5c0e597b997c", "message": "Add Cloud builder", "committedDate": "2020-05-27T13:08:24Z", "type": "commit"}, {"oid": "e8d4b2c1ce8b5d52143d39682849e55d74d2ad54", "url": "https://github.com/vespa-engine/vespa/commit/e8d4b2c1ce8b5d52143d39682849e55d74d2ad54", "message": "Rename PreprovisionCapacity -> HostCapacity", "committedDate": "2020-05-27T13:08:24Z", "type": "commit"}, {"oid": "122aa54aefce5a04aab5b001f4d2840c99010aa4", "url": "https://github.com/vespa-engine/vespa/commit/122aa54aefce5a04aab5b001f4d2840c99010aa4", "message": "Extract method for host provision capability", "committedDate": "2020-05-27T13:08:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDAxMw==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431190013", "bodyText": "Sort by cost, otherwise you risk counting a large host as satisfying a small HostCapacity, but then you wont find match for a larget HostCapacity request", "author": "freva", "createdAt": "2020-05-27T14:40:36Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);\n+        List<Node> excessHosts;\n+        if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n+            excessHosts = preprovisionCapacity(removableHosts);\n+        } else {\n+            excessHosts = provisionExactCapacity(removableHosts);\n+        }\n+        excessHosts.forEach(host -> {\n+            try {\n+                hostProvisioner.deprovision(host);\n+                nodeRepository().removeRecursively(host, true);\n+            } catch (RuntimeException e) {\n+                log.log(Level.WARNING, \"Failed to deprovision \" + host.hostname() + \", will retry in \" + interval(), e);\n+            }\n+        });\n+    }\n \n+    /** Provision the exact capacity declared for this zone, if any.\n+     *\n+     * @return Excess hosts that can be deprovisioned.\n+     */\n+    private List<Node> provisionExactCapacity(List<Node> removableHosts) {\n+        List<NodeResources> capacity = capacityFrom(exactCapacityFlag);\n+        if (capacity.isEmpty()) return List.of();\n+\n+        List<Node> excessHosts = new ArrayList<>(removableHosts);\n+        List<NodeResources> unsatisfiedCapacity = new ArrayList<>(capacity);\n+        for (var resources : capacity) {\n+            for (var host : removableHosts) {", "originalCommit": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\nindex 4ed6291998..b1031715c2 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\n\n@@ -96,13 +94,15 @@ public class DynamicProvisioningMaintainer extends NodeRepositoryMaintainer {\n \n     /** Converge zone to wanted capacity */\n     private void convergeToCapacity(NodeList nodes) {\n-        List<Node> removableHosts = removableHostsOf(nodes);\n-        List<Node> excessHosts;\n+        List<NodeResources> capacity = targetCapacity();\n+        List<Node> existingHosts;\n         if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n-            excessHosts = preprovisionCapacity(removableHosts);\n+            existingHosts = removableHostsOf(nodes);\n         } else {\n-            excessHosts = provisionExactCapacity(removableHosts);\n+            if (capacity.isEmpty()) return;\n+            existingHosts = availableHostsOf(nodes);\n         }\n+        List<Node> excessHosts = provision(capacity, existingHosts);\n         excessHosts.forEach(host -> {\n             try {\n                 hostProvisioner.deprovision(host);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQ3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192472", "bodyText": "removableHosts() only contains \"free\" hosts, so if you were to allocate some of the host, this would lead to provisioning more hosts with exactly-provision-capacity?\nGenerally, I think preprovisionCapacity() and provisionExactCapacity() can be merged, instead you should have 2 variants of removableHostsOf()", "author": "freva", "createdAt": "2020-05-27T14:43:57Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);", "originalCommit": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwMDc1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431200753", "bodyText": "this would lead to provisioning more hosts with exactly-provision-capacity?\n\nGood catch, will fix.", "author": "mpolden", "createdAt": "2020-05-27T14:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\nindex 4ed6291998..b1031715c2 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java\n\n@@ -96,13 +94,15 @@ public class DynamicProvisioningMaintainer extends NodeRepositoryMaintainer {\n \n     /** Converge zone to wanted capacity */\n     private void convergeToCapacity(NodeList nodes) {\n-        List<Node> removableHosts = removableHostsOf(nodes);\n-        List<Node> excessHosts;\n+        List<NodeResources> capacity = targetCapacity();\n+        List<Node> existingHosts;\n         if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n-            excessHosts = preprovisionCapacity(removableHosts);\n+            existingHosts = removableHostsOf(nodes);\n         } else {\n-            excessHosts = provisionExactCapacity(removableHosts);\n+            if (capacity.isEmpty()) return;\n+            existingHosts = availableHostsOf(nodes);\n         }\n+        List<Node> excessHosts = provision(capacity, existingHosts);\n         excessHosts.forEach(host -> {\n             try {\n                 hostProvisioner.deprovision(host);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192969", "bodyText": "I'm not sure about introducing another effectively permanent flag, especially when these 2 flags are mutually exclusive...", "author": "freva", "createdAt": "2020-05-27T14:44:37Z", "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -122,11 +122,17 @@\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<PreprovisionCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), PreprovisionCapacity.class,\n-            \"List of node resources and their count that should be present in zone to receive new deployments. When a \" +\n-            \"preprovisioned is taken, new will be provisioned within next iteration of maintainer.\",\n-            \"Takes effect on next iteration of HostProvisionMaintainer.\");\n+    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+            \"preprovision-capacity\", List.of(), HostCapacity.class,\n+            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n+            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n+\n+    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(", "originalCommit": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwMDE1OA==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431200158", "bodyText": "Agree. Do you have something in mind? I suppose the other flag could be reused, but then we overload its meaning.", "author": "mpolden", "createdAt": "2020-05-27T14:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzNDc3NA==", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431234774", "bodyText": "Do you have something in mind?\n\nI was hoping we could reuse the other flag. It's not ideal, but I think in the long run it will be less confusing than having 2 flags and needing to validate the state (only 1 of them should be set at a given time).", "author": "freva", "createdAt": "2020-05-27T15:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "chunk": "diff --git a/flags/src/main/java/com/yahoo/vespa/flags/Flags.java b/flags/src/main/java/com/yahoo/vespa/flags/Flags.java\nindex 2ff1e6cb5f..ea03d8ca2e 100644\n--- a/flags/src/main/java/com/yahoo/vespa/flags/Flags.java\n+++ b/flags/src/main/java/com/yahoo/vespa/flags/Flags.java\n\n@@ -122,18 +122,13 @@ public class Flags {\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+    public static final UnboundListFlag<HostCapacity> TARGET_CAPACITY = defineListFlag(\n             \"preprovision-capacity\", List.of(), HostCapacity.class,\n-            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n-            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"List of node resources and their count that should be provisioned.\" +\n+            \"In a dynamically provisioned zone this specifies the unallocated (i.e. pre-provisioned) capacity. \" +\n+            \"Otherwise it specifies the total (unallocated or not) capacity.\",\n             \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n \n-    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(\n-            \"exact-provision-capacity\", List.of(), HostCapacity.class,\n-            \"List of exact node resources and their count that should be provisioned in a zone. Unlike \" +\n-            \"preprovision-capacity, this flag specifies the exact capacity that should exist, regardless of allocation.\",\n-            \"Takes effect on next iteration of DynamicProvisioningMaintainer\");\n-\n     public static final UnboundDoubleFlag DEFAULT_TERM_WISE_LIMIT = defineDoubleFlag(\n             \"default-term-wise-limit\", 1.0,\n             \"Default limit for when to apply termwise query evaluation\",\n"}}, {"oid": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "url": "https://github.com/vespa-engine/vespa/commit/31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "message": "Support provisioning exact capacity", "committedDate": "2020-05-28T08:04:53Z", "type": "commit"}, {"oid": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "url": "https://github.com/vespa-engine/vespa/commit/31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "message": "Support provisioning exact capacity", "committedDate": "2020-05-28T08:04:53Z", "type": "forcePushed"}, {"oid": "8903332a7a6ce57c7777b2f6976c1da781d8b52e", "url": "https://github.com/vespa-engine/vespa/commit/8903332a7a6ce57c7777b2f6976c1da781d8b52e", "message": "Ensure that capacity reduction does not remove non-empty hosts", "committedDate": "2020-05-28T09:16:19Z", "type": "commit"}]}