{"pr_number": 14238, "pr_title": "Ignore response filter chain bindings when constructing access contro\u2026", "pr_createdAt": "2020-09-02T08:26:17Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14238", "timeline": [{"oid": "0c96e5a85ffa61c5c922beeb18f84ddd1ae6599e", "url": "https://github.com/vespa-engine/vespa/commit/0c96e5a85ffa61c5c922beeb18f84ddd1ae6599e", "message": "Ignore response filter chain bindings when constructing access control filter chains", "committedDate": "2020-09-02T08:24:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTA5OA==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481885098", "bodyText": "How about comparing the types, instead of assuming this is a request type?", "author": "jonmv", "createdAt": "2020-09-02T08:30:33Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/http/AccessControl.java", "diffHunk": "@@ -154,14 +153,17 @@ private void removeDuplicateBindingsFromChain(Http http, ComponentId chainId) {\n         duplicateBindings.forEach(http.getBindings()::remove);\n     }\n \n-    private static boolean effectivelyDuplicateOf(BindingPattern accessControlBinding, BindingPattern other) {\n-        return accessControlBinding.equals(other)\n-                || (accessControlBinding.path().equals(other.path()) && other.matchesAnyPort());\n+    private static boolean effectivelyDuplicateOf(FilterBinding accessControlBinding, FilterBinding other) {\n+        if (accessControlBinding.chainId().equals(other.chainId())) return false; // Same filter chain\n+        if (other.type() == FilterBinding.Type.RESPONSE) return false;", "originalCommit": "0c96e5a85ffa61c5c922beeb18f84ddd1ae6599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NzAwNA==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481887004", "bodyText": "The first parameter is assumed to be an access control binding, meaning it cannot be a response filter binding.", "author": "bjorncs", "createdAt": "2020-09-02T08:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDUxNA==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481894514", "bodyText": "Well, it's a private in the AccessControl class, so I guess that's OK.", "author": "jonmv", "createdAt": "2020-09-02T08:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTA5OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTk0Nw==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481885947", "bodyText": "I assume this code isn't called by older versions of code, in the config server ... ?", "author": "jonmv", "createdAt": "2020-09-02T08:31:28Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/http/FilterBinding.java", "diffHunk": "@@ -11,16 +11,20 @@\n  */\n public class FilterBinding {\n \n+    public enum Type {REQUEST, RESPONSE}\n+\n+    private final Type type;\n     private final ComponentSpecification chainId;\n     private final BindingPattern binding;\n \n-    private FilterBinding(ComponentSpecification chainId, BindingPattern binding) {\n+    private FilterBinding(Type type, ComponentSpecification chainId, BindingPattern binding) {\n+        this.type = type;\n         this.chainId = chainId;\n         this.binding = binding;\n     }\n \n-    public static FilterBinding create(ComponentSpecification chainId, BindingPattern binding) {\n-        return new FilterBinding(chainId, binding);\n+    public static FilterBinding create(Type type, ComponentSpecification chainId, BindingPattern binding) {", "originalCommit": "0c96e5a85ffa61c5c922beeb18f84ddd1ae6599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NzYyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481887620", "bodyText": "Nope, this method is only used inside config-model module.", "author": "bjorncs", "createdAt": "2020-09-02T08:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4NTk0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4Njc5OA==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481886798", "bodyText": "Would prefer explicit check for \"response-chain\" and throw otherwise, just to be absolutely future-proff.", "author": "jonmv", "createdAt": "2020-09-02T08:32:24Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/container/http/xml/HttpBuilder.java", "diffHunk": "@@ -121,7 +121,8 @@ private static AthenzDomain getAccessControlDomain(DeployState deployState, Elem\n \n                 for (Element bindingSpec: XML.getChildren(child, \"binding\")) {\n                     String binding = XML.getValue(bindingSpec);\n-                    result.add(FilterBinding.create(chainId, UserBindingPattern.fromPattern(binding)));\n+                    FilterBinding.Type type = tagName.equals(\"request-chain\") ? FilterBinding.Type.REQUEST : FilterBinding.Type.RESPONSE;", "originalCommit": "0c96e5a85ffa61c5c922beeb18f84ddd1ae6599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg5NDQ1OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14238#discussion_r481894459", "bodyText": "I have improved the logic in new commit.", "author": "bjorncs", "createdAt": "2020-09-02T08:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg4Njc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0a6143ec80c40bcdd75b237656e430b3a299e7a4", "chunk": "diff --git a/config-model/src/main/java/com/yahoo/vespa/model/container/http/xml/HttpBuilder.java b/config-model/src/main/java/com/yahoo/vespa/model/container/http/xml/HttpBuilder.java\nindex 4d41bfed0c..5b360b478f 100644\n--- a/config-model/src/main/java/com/yahoo/vespa/model/container/http/xml/HttpBuilder.java\n+++ b/config-model/src/main/java/com/yahoo/vespa/model/container/http/xml/HttpBuilder.java\n\n@@ -116,19 +120,26 @@ public class HttpBuilder extends VespaDomBuilder.DomConfigProducerBuilder<Http>\n \n         for (Element child: XML.getChildren(filteringSpec)) {\n             String tagName = child.getTagName();\n-            if ((tagName.equals(\"request-chain\") || tagName.equals(\"response-chain\"))) {\n+            if (VALID_FILTER_CHAIN_TAG_NAMES.contains(tagName)) {\n                 ComponentSpecification chainId = XmlHelper.getIdRef(child);\n \n                 for (Element bindingSpec: XML.getChildren(child, \"binding\")) {\n                     String binding = XML.getValue(bindingSpec);\n-                    FilterBinding.Type type = tagName.equals(\"request-chain\") ? FilterBinding.Type.REQUEST : FilterBinding.Type.RESPONSE;\n-                    result.add(FilterBinding.create(type, chainId, UserBindingPattern.fromPattern(binding)));\n+                    result.add(FilterBinding.create(toFilterBindingType(tagName), chainId, UserBindingPattern.fromPattern(binding)));\n                 }\n             }\n         }\n         return result;\n     }\n \n+    private static FilterBinding.Type toFilterBindingType(String chainTag) {\n+        switch (chainTag) {\n+            case REQUEST_CHAIN_TAG_NAME: return FilterBinding.Type.REQUEST;\n+            case RESPONSE_CHAIN_TAG_NAME: return FilterBinding.Type.RESPONSE;\n+            default: throw new IllegalArgumentException(\"Unknown filter chain tag: \" + chainTag);\n+        }\n+    }\n+\n     static int readPort(ModelElement spec, boolean isHosted, DeployLogger logger) {\n         Integer port = spec.integerAttribute(\"port\");\n         if (port == null)\n"}}, {"oid": "0a6143ec80c40bcdd75b237656e430b3a299e7a4", "url": "https://github.com/vespa-engine/vespa/commit/0a6143ec80c40bcdd75b237656e430b3a299e7a4", "message": "Make tag name to binding type logic more resillient", "committedDate": "2020-09-02T08:39:23Z", "type": "commit"}]}