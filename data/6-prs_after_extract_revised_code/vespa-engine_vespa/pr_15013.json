{"pr_number": 15013, "pr_title": "Bratseth/persist metrics rebased", "pr_createdAt": "2020-10-22T13:40:01Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15013", "timeline": [{"oid": "aae6832c3aa905f063a9892ba7f799f0e7404d5a", "url": "https://github.com/vespa-engine/vespa/commit/aae6832c3aa905f063a9892ba7f799f0e7404d5a", "message": "Add QuestDb dependency and run basic test", "committedDate": "2020-10-22T13:06:37Z", "type": "commit"}, {"oid": "dd6fde6bfd38f24b6fff64f0eb81bb834f109adb", "url": "https://github.com/vespa-engine/vespa/commit/dd6fde6bfd38f24b6fff64f0eb81bb834f109adb", "message": "Store scaling events in ZooKeeper", "committedDate": "2020-10-22T13:13:13Z", "type": "commit"}, {"oid": "45ec64648963241b95ba2d71dd81f9fac352acba", "url": "https://github.com/vespa-engine/vespa/commit/45ec64648963241b95ba2d71dd81f9fac352acba", "message": "Pass ApplicationTransaction", "committedDate": "2020-10-22T13:22:32Z", "type": "commit"}, {"oid": "f4129d01a4ed3917010f1d98e002b3cab4903118", "url": "https://github.com/vespa-engine/vespa/commit/f4129d01a4ed3917010f1d98e002b3cab4903118", "message": "Write all values at once", "committedDate": "2020-10-22T13:23:55Z", "type": "commit"}, {"oid": "7ea86cfcc45382cffb13a39ed125683bac71840e", "url": "https://github.com/vespa-engine/vespa/commit/7ea86cfcc45382cffb13a39ed125683bac71840e", "message": "Rename some types", "committedDate": "2020-10-22T13:27:25Z", "type": "commit"}, {"oid": "430157f1157416984b8fffa904ce7066a6b7c5bf", "url": "https://github.com/vespa-engine/vespa/commit/430157f1157416984b8fffa904ce7066a6b7c5bf", "message": "Store and read all metrics together", "committedDate": "2020-10-22T13:28:11Z", "type": "commit"}, {"oid": "ef5bd4b5218e8ef7ab1307629c857f2ecbe8dc67", "url": "https://github.com/vespa-engine/vespa/commit/ef5bd4b5218e8ef7ab1307629c857f2ecbe8dc67", "message": "Look up metrics just once", "committedDate": "2020-10-22T13:28:47Z", "type": "commit"}, {"oid": "d4731bc1fbefc4efe1d26ca183e4510b5bd6861b", "url": "https://github.com/vespa-engine/vespa/commit/d4731bc1fbefc4efe1d26ca183e4510b5bd6861b", "message": "Minor cleanup", "committedDate": "2020-10-22T13:29:44Z", "type": "commit"}, {"oid": "64918c40aaf2d0ec632a91b699d4cd92886e9884", "url": "https://github.com/vespa-engine/vespa/commit/64918c40aaf2d0ec632a91b699d4cd92886e9884", "message": "Minor cleanup", "committedDate": "2020-10-22T13:30:30Z", "type": "commit"}, {"oid": "25bceedc5e24b2e27b34536b155119c70a673ecc", "url": "https://github.com/vespa-engine/vespa/commit/25bceedc5e24b2e27b34536b155119c70a673ecc", "message": "Clean up terminology", "committedDate": "2020-10-22T13:30:49Z", "type": "commit"}, {"oid": "3013538d73fc9546f5d3eba7a3211e6b5c41f485", "url": "https://github.com/vespa-engine/vespa/commit/3013538d73fc9546f5d3eba7a3211e6b5c41f485", "message": "Remove middleman", "committedDate": "2020-10-22T13:31:18Z", "type": "commit"}, {"oid": "53e5f06cd8e545be91a7fc1e9cf0e7eacb249aae", "url": "https://github.com/vespa-engine/vespa/commit/53e5f06cd8e545be91a7fc1e9cf0e7eacb249aae", "message": "Make NodeTimeseries immutable", "committedDate": "2020-10-22T13:31:33Z", "type": "commit"}, {"oid": "081c3fb60c09797e64f317563901c3aefa35f3f0", "url": "https://github.com/vespa-engine/vespa/commit/081c3fb60c09797e64f317563901c3aefa35f3f0", "message": "Create MetricsDb interface", "committedDate": "2020-10-22T13:34:50Z", "type": "commit"}, {"oid": "5c54905d8bf15e8e0d467ead1c4b919103055e0f", "url": "https://github.com/vespa-engine/vespa/commit/5c54905d8bf15e8e0d467ead1c4b919103055e0f", "message": "Quest MetricsDb implementation", "committedDate": "2020-10-22T13:35:55Z", "type": "commit"}, {"oid": "52594861d88a28c4c5c8ad128c91efaca9bf31d8", "url": "https://github.com/vespa-engine/vespa/commit/52594861d88a28c4c5c8ad128c91efaca9bf31d8", "message": "Switch to Quest metrics db implementation", "committedDate": "2020-10-22T13:36:23Z", "type": "commit"}, {"oid": "1c685a819f34b56ce98f8b436eef277d88b878f1", "url": "https://github.com/vespa-engine/vespa/commit/1c685a819f34b56ce98f8b436eef277d88b878f1", "message": "Set db file system location", "committedDate": "2020-10-22T13:36:37Z", "type": "commit"}, {"oid": "9b1d140dd34b202ced09b35e6e441df1aa25a8a0", "url": "https://github.com/vespa-engine/vespa/commit/9b1d140dd34b202ced09b35e6e441df1aa25a8a0", "message": "Use data dir for log config", "committedDate": "2020-10-22T13:36:54Z", "type": "commit"}, {"oid": "fcc7c5bc6c4e7e7812ab88f804da0a44e80a4fce", "url": "https://github.com/vespa-engine/vespa/commit/fcc7c5bc6c4e7e7812ab88f804da0a44e80a4fce", "message": "Create QuestMetricsDb component", "committedDate": "2020-10-22T13:43:44Z", "type": "commit"}, {"oid": "fe20011cf8d5c534eadc79cb5695915fbd9849d7", "url": "https://github.com/vespa-engine/vespa/commit/fe20011cf8d5c534eadc79cb5695915fbd9849d7", "message": "Remove printlns", "committedDate": "2020-10-22T13:47:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1ODc4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510258786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: Remove after November 2020", "author": "freva", "createdAt": "2020-10-22T15:33:24Z", "path": "config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java", "diffHunk": "@@ -58,8 +62,13 @@\n      * @param transaction Transaction with operations to commit together with any operations done within the provisioner.\n      * @param lock        A provision lock for the relevant application. This must be held when calling this.\n      */\n+    // TODO: Remove after November 2020\n     void remove(NestedTransaction transaction, ProvisionLock lock);\n \n+    /** Transactionally remove an application under lock. */\n+    // TODO: Remove after November 2020", "originalCommit": "fe20011cf8d5c534eadc79cb5695915fbd9849d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5df91f8833a342d4dda193e0d7c16b82a4407d87", "chunk": "diff --git a/config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java b/config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java\nindex 9e75e9278e..8042cc3b49 100644\n--- a/config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java\n+++ b/config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java\n\n@@ -66,7 +66,6 @@ public interface Provisioner {\n     void remove(NestedTransaction transaction, ProvisionLock lock);\n \n     /** Transactionally remove an application under lock. */\n-    // TODO: Remove after November 2020\n     void remove(ApplicationTransaction transaction);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDIxMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510294211", "bodyText": "Read this once from ZK?", "author": "freva", "createdAt": "2020-10-22T16:22:06Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java", "diffHunk": "@@ -53,41 +57,69 @@ public void activate(Collection<HostSpec> hosts, NestedTransaction transaction,\n      * Post condition: Nodes in reserved which are present in <code>hosts</code> are moved to active.\n      * Nodes in active which are not present in <code>hosts</code> are moved to inactive.\n      *\n-     * @param transaction Transaction with operations to commit together with any operations done within the repository.\n      * @param hosts the hosts to make the set of active nodes of this\n-     * @param lock provision lock that must be held when calling this\n+     * @param generation the application config generation that is activated\n+     * @param transaction transaction with operations to commit together with any operations done within the repository,\n+     *                    while holding the node repository lock on this application\n      */\n-    private void activateNodes(Collection<HostSpec> hosts, NestedTransaction transaction, ProvisionLock lock) {\n-        ApplicationId application = lock.application();\n+    private void activateNodes(Collection<HostSpec> hosts, long generation, ApplicationTransaction transaction) {\n+        ApplicationId application = transaction.application();\n         Set<String> hostnames = hosts.stream().map(HostSpec::hostname).collect(Collectors.toSet());\n         NodeList allNodes = nodeRepository.list();\n         NodeList applicationNodes = allNodes.owner(application);\n \n         List<Node> reserved = applicationNodes.state(Node.State.reserved).asList();\n-        List<Node> reservedToActivate = retainHostsInList(hostnames, reserved);\n-        List<Node> active = applicationNodes.state(Node.State.active).asList();\n-        List<Node> continuedActive = retainHostsInList(hostnames, active);\n-        List<Node> allActive = new ArrayList<>(continuedActive);\n-        allActive.addAll(reservedToActivate);\n-        if (!containsAll(hostnames, allActive))\n+        List<Node> reservedToActivate = updatePortsFrom(hosts, retainHostsInList(hostnames, reserved));\n+        List<Node> oldActive = applicationNodes.state(Node.State.active).asList(); // All nodes active now\n+        List<Node> continuedActive = retainHostsInList(hostnames, oldActive);\n+        List<Node> newActive = updateFrom(hosts, continuedActive); // All nodes that will be active when this is committed\n+        newActive.addAll(reservedToActivate);\n+        if ( ! containsAll(hostnames, newActive))\n             throw new IllegalArgumentException(\"Activation of \" + application + \" failed. \" +\n                                                \"Could not find all requested hosts.\" +\n                                                \"\\nRequested: \" + hosts +\n                                                \"\\nReserved: \" + toHostNames(reserved) +\n-                                               \"\\nActive: \" + toHostNames(active) +\n+                                               \"\\nActive: \" + toHostNames(oldActive) +\n                                                \"\\nThis might happen if the time from reserving host to activation takes \" +\n                                                \"longer time than reservation expiry (the hosts will then no longer be reserved)\");\n \n         validateParentHosts(application, allNodes, reservedToActivate);\n \n-        List<Node> activeToRemove = removeHostsFromList(hostnames, active);\n-        activeToRemove = activeToRemove.stream().map(Node::unretire).collect(Collectors.toList()); // only active nodes can be retired\n-        nodeRepository.deactivate(activeToRemove, transaction, lock);\n-        nodeRepository.activate(updateFrom(hosts, continuedActive), transaction); // update active with any changes\n-        nodeRepository.activate(updatePortsFrom(hosts, reservedToActivate), transaction);\n+        List<Node> activeToRemove = removeHostsFromList(hostnames, oldActive);\n+        activeToRemove = activeToRemove.stream().map(Node::unretire).collect(Collectors.toList()); // only active nodes can be retired. TODO: Move this line to deactivate\n+        nodeRepository.deactivate(activeToRemove, transaction);\n+        nodeRepository.activate(newActive, transaction.nested()); // activate also continued active to update node state\n+\n+        rememberResourceChange(transaction, generation,\n+                               NodeList.copyOf(oldActive).not().retired(),\n+                               NodeList.copyOf(newActive).not().retired());\n         unreserveParentsOf(reservedToActivate);\n     }\n \n+    private void rememberResourceChange(ApplicationTransaction transaction, long generation,\n+                                        NodeList oldNodes, NodeList newNodes) {\n+        if (nodeRepository.applications().get(transaction.application()).isEmpty()) return; // infrastructure app, hopefully\n+        Application application = nodeRepository.applications().get(transaction.application()).get();", "originalCommit": "fe20011cf8d5c534eadc79cb5695915fbd9849d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxNTU1NA==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510315554", "bodyText": "This is reading it once?", "author": "bratseth", "createdAt": "2020-10-22T16:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxNzU4Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510317587", "bodyText": "It's reading it in the if statement above as well?", "author": "freva", "createdAt": "2020-10-22T16:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMzAxNg==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510323016", "bodyText": "That is true. Changed.", "author": "bratseth", "createdAt": "2020-10-22T17:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f1e7d3d32e43f2ef5c23df482e5d3d9c197ea0e", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java\nindex ffeed74d94..8e691b538a 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java\n\n@@ -98,25 +98,25 @@ class Activator {\n \n     private void rememberResourceChange(ApplicationTransaction transaction, long generation,\n                                         NodeList oldNodes, NodeList newNodes) {\n-        if (nodeRepository.applications().get(transaction.application()).isEmpty()) return; // infrastructure app, hopefully\n-        Application application = nodeRepository.applications().get(transaction.application()).get();\n+        Optional<Application> application = nodeRepository.applications().get(transaction.application());\n+        if (application.isEmpty()) return; // infrastructure app, hopefully :-|\n \n         var currentNodesByCluster = newNodes.stream()\n                                             .collect(Collectors.groupingBy(node -> node.allocation().get().membership().cluster().id()));\n-        Application modified = application;\n+        Application modified = application.get();\n         for (var clusterEntry : currentNodesByCluster.entrySet()) {\n             var previousResources = oldNodes.cluster(clusterEntry.getKey()).toResources();\n             var currentResources = NodeList.copyOf(clusterEntry.getValue()).toResources();\n             if ( ! previousResources.equals(currentResources)) {\n-                modified = modified.with(application.cluster(clusterEntry.getKey()).get()\n-                                                    .with(new ScalingEvent(previousResources,\n-                                                                           currentResources,\n-                                                                           generation,\n-                                                                           nodeRepository.clock().instant())));\n+                modified = modified.with(application.get().cluster(clusterEntry.getKey()).get()\n+                                                          .with(new ScalingEvent(previousResources,\n+                                                                                 currentResources,\n+                                                                                 generation,\n+                                                                                 nodeRepository.clock().instant())));\n             }\n         }\n \n-        if (modified != application)\n+        if (modified != application.get())\n             nodeRepository.applications().put(modified, transaction);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NTMwMg==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510295302", "bodyText": "Shouldn't there be a map to to group id here?", "author": "freva", "createdAt": "2020-10-22T16:23:45Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeList.java", "diffHunk": "@@ -179,6 +180,13 @@ public NodeList group(int index) {\n                                                        .findFirst());\n     }\n \n+    public ClusterResources toResources() {\n+        if (isEmpty()) return new ClusterResources(0, 0, NodeResources.unspecified());\n+        return new ClusterResources(size(),\n+                                    (int)stream().distinct().count(),", "originalCommit": "fe20011cf8d5c534eadc79cb5695915fbd9849d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxODgyMg==", "url": "https://github.com/vespa-engine/vespa/pull/15013#discussion_r510318822", "bodyText": "Yes, thanks!", "author": "bratseth", "createdAt": "2020-10-22T17:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NTMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "78aa299fce0a04444fd34ee9dd438b01e18759d0", "chunk": "diff --git a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeList.java b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeList.java\nindex 4aedb5dde0..1727334459 100644\n--- a/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeList.java\n+++ b/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeList.java\n\n@@ -183,7 +183,9 @@ public class NodeList extends AbstractFilteringList<Node, NodeList> {\n     public ClusterResources toResources() {\n         if (isEmpty()) return new ClusterResources(0, 0, NodeResources.unspecified());\n         return new ClusterResources(size(),\n-                                    (int)stream().distinct().count(),\n+                                    (int)stream().map(node -> node.allocation().get().membership().cluster().group().get())\n+                                                 .distinct()\n+                                                 .count(),\n                                     first().get().resources());\n     }\n \n"}}, {"oid": "5df91f8833a342d4dda193e0d7c16b82a4407d87", "url": "https://github.com/vespa-engine/vespa/commit/5df91f8833a342d4dda193e0d7c16b82a4407d87", "message": "Update config-provisioning/src/main/java/com/yahoo/config/provision/Provisioner.java\n\nCo-authored-by: Valerij Fredriksen <freva@users.noreply.github.com>", "committedDate": "2020-10-22T16:53:09Z", "type": "commit"}, {"oid": "78aa299fce0a04444fd34ee9dd438b01e18759d0", "url": "https://github.com/vespa-engine/vespa/commit/78aa299fce0a04444fd34ee9dd438b01e18759d0", "message": "Actually count groups not nodes", "committedDate": "2020-10-22T16:58:44Z", "type": "commit"}, {"oid": "30850e3233a5a1999e25d86d63acf5e8083a4c69", "url": "https://github.com/vespa-engine/vespa/commit/30850e3233a5a1999e25d86d63acf5e8083a4c69", "message": "Merge branch 'bratseth/persist-metrics-rebased' of github.com:vespa-engine/vespa into bratseth/persist-metrics-rebased", "committedDate": "2020-10-22T16:59:26Z", "type": "commit"}, {"oid": "5f1e7d3d32e43f2ef5c23df482e5d3d9c197ea0e", "url": "https://github.com/vespa-engine/vespa/commit/5f1e7d3d32e43f2ef5c23df482e5d3d9c197ea0e", "message": "Read application once", "committedDate": "2020-10-22T17:05:54Z", "type": "commit"}, {"oid": "2cd60412954bec3717d2b0306622df36ecd3d770", "url": "https://github.com/vespa-engine/vespa/commit/2cd60412954bec3717d2b0306622df36ecd3d770", "message": "Expect spaces in Pair toString", "committedDate": "2020-10-22T17:11:37Z", "type": "commit"}, {"oid": "e15b70befdefd622b6682aa93f2d2f51b3675460", "url": "https://github.com/vespa-engine/vespa/commit/e15b70befdefd622b6682aa93f2d2f51b3675460", "message": "Follow API change", "committedDate": "2020-10-22T21:27:48Z", "type": "commit"}]}