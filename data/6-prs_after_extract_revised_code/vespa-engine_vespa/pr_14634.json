{"pr_number": 14634, "pr_title": "Async document v1", "pr_createdAt": "2020-09-30T10:03:32Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14634", "timeline": [{"oid": "11405e52f2853e44df0944bf7bbee13dc2e617a5", "url": "https://github.com/vespa-engine/vespa/commit/11405e52f2853e44df0944bf7bbee13dc2e617a5", "message": "Revert \"Revert \"Jonmv/async doc v1 implementation\"\"\n\nThis reverts commit c6aded1606112a54969f56403085ca90d61dac8f.", "committedDate": "2020-09-30T08:23:34Z", "type": "commit"}, {"oid": "264cd85f6aa90d08438d479b59598b833485ac0a", "url": "https://github.com/vespa-engine/vespa/commit/264cd85f6aa90d08438d479b59598b833485ac0a", "message": "Move setPhaser to LocalDocumentAccess", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "9a999a7a7b87d3c5f731c9c5a90d158b93359a1a", "url": "https://github.com/vespa-engine/vespa/commit/9a999a7a7b87d3c5f731c9c5a90d158b93359a1a", "message": "Actually add test for DocumentOperationExecutor", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "96c27a8107d572f624018f367a369989efa74f84", "url": "https://github.com/vespa-engine/vespa/commit/96c27a8107d572f624018f367a369989efa74f84", "message": "Add equals and hashCode to some classes", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "93f607279f17812125f95ee6c3203495c5264106", "url": "https://github.com/vespa-engine/vespa/commit/93f607279f17812125f95ee6c3203495c5264106", "message": "Separate out interface for DocumentOperationExecutor", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "24e874d8cbc5d132fce1811e25721c8b9c888b1e", "url": "https://github.com/vespa-engine/vespa/commit/24e874d8cbc5d132fce1811e25721c8b9c888b1e", "message": "Add handler test and various fixes", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "574989151329e44cd49b510b8e53aa822ec2b413", "url": "https://github.com/vespa-engine/vespa/commit/574989151329e44cd49b510b8e53aa822ec2b413", "message": "Throw IllegalArgumentException on bad input, rather than RuntimeException", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "85bffffb34ea959576baeef0affd73ea803fc93a", "url": "https://github.com/vespa-engine/vespa/commit/85bffffb34ea959576baeef0affd73ea803fc93a", "message": "More response tests \u2014\u00a0some more try-catch", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "f6b2e26033e09d220a6f58c42a793a169950cf8c", "url": "https://github.com/vespa-engine/vespa/commit/f6b2e26033e09d220a6f58c42a793a169950cf8c", "message": "Fix tests", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "374e7ae5caa94e2ba290fa5a85e88d95b972d3ca", "url": "https://github.com/vespa-engine/vespa/commit/374e7ae5caa94e2ba290fa5a85e88d95b972d3ca", "message": "Register operations with phaser in the caller thread", "committedDate": "2020-09-30T08:23:35Z", "type": "commit"}, {"oid": "a1917d6cc083d413f7cddcf154f159d067476bd7", "url": "https://github.com/vespa-engine/vespa/commit/a1917d6cc083d413f7cddcf154f159d067476bd7", "message": "Re-add test that was accidentally removed", "committedDate": "2020-09-30T08:37:58Z", "type": "commit"}, {"oid": "566162d1790d4ba851fc5e06bab07bf1d5699084", "url": "https://github.com/vespa-engine/vespa/commit/566162d1790d4ba851fc5e06bab07bf1d5699084", "message": "Add convenience for creating a LocalDocumentAccess", "committedDate": "2020-09-30T09:21:43Z", "type": "commit"}, {"oid": "24bfeefd369bca807776105746959896d46300ce", "url": "https://github.com/vespa-engine/vespa/commit/24bfeefd369bca807776105746959896d46300ce", "message": "Strict FIFO when throttling", "committedDate": "2020-09-30T10:02:43Z", "type": "commit"}, {"oid": "27632e92ff8182e1df0763fe6a9382e88c76dbf9", "url": "https://github.com/vespa-engine/vespa/commit/27632e92ff8182e1df0763fe6a9382e88c76dbf9", "message": "Test client close during request handling", "committedDate": "2020-09-30T10:15:29Z", "type": "commit"}, {"oid": "6a7d5bda4b22c179e57de440ff46a3ebe667939b", "url": "https://github.com/vespa-engine/vespa/commit/6a7d5bda4b22c179e57de440ff46a3ebe667939b", "message": "Allow closures for handling document api Responses", "committedDate": "2020-09-30T11:38:28Z", "type": "commit"}, {"oid": "b1a0ce6e16ba38dc342e2f5b9544e0f0b6329f4d", "url": "https://github.com/vespa-engine/vespa/commit/b1a0ce6e16ba38dc342e2f5b9544e0f0b6329f4d", "message": "Simplify with closures to handle async responses", "committedDate": "2020-09-30T11:48:28Z", "type": "commit"}, {"oid": "08016b3290700eb06e5c4c899a2d2e78ae746080", "url": "https://github.com/vespa-engine/vespa/commit/08016b3290700eb06e5c4c899a2d2e78ae746080", "message": "Preserve user callbacks through DocumentOperationExecutorImpl", "committedDate": "2020-09-30T11:55:28Z", "type": "commit"}, {"oid": "88e20c1dea7d982343d417ae55c04add0ebca99a", "url": "https://github.com/vespa-engine/vespa/commit/88e20c1dea7d982343d417ae55c04add0ebca99a", "message": "Use named threads for maintenance", "committedDate": "2020-09-30T12:18:03Z", "type": "commit"}, {"oid": "898e5e32b637e4509dce99ddaeb88f73114e50a8", "url": "https://github.com/vespa-engine/vespa/commit/898e5e32b637e4509dce99ddaeb88f73114e50a8", "message": "Update abi spec for application", "committedDate": "2020-09-30T13:24:18Z", "type": "commit"}, {"oid": "d653fb84a9cc5d5224cb4aea5c120dfac9e75a67", "url": "https://github.com/vespa-engine/vespa/commit/d653fb84a9cc5d5224cb4aea5c120dfac9e75a67", "message": "Add thread name argument to test code as well", "committedDate": "2020-09-30T14:11:09Z", "type": "commit"}, {"oid": "c068007feadd8c3f8332c7e80db9ad6e2e2a8093", "url": "https://github.com/vespa-engine/vespa/commit/c068007feadd8c3f8332c7e80db9ad6e2e2a8093", "message": "Enable compressed responses in feed client", "committedDate": "2020-09-30T14:11:12Z", "type": "commit"}, {"oid": "dc4f51621c0c965f97459c8c7f19aa3062d41567", "url": "https://github.com/vespa-engine/vespa/commit/dc4f51621c0c965f97459c8c7f19aa3062d41567", "message": "Make ManualClock thread safe", "committedDate": "2020-09-30T15:42:03Z", "type": "commit"}, {"oid": "6792ae6918439c535ff518107ad17351bb27fed1", "url": "https://github.com/vespa-engine/vespa/commit/6792ae6918439c535ff518107ad17351bb27fed1", "message": "Await advance from test thread to next arrive is in the intended phase", "committedDate": "2020-09-30T16:32:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzODgxOQ==", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498238819", "bodyText": "Use the JSON assert helper in testutils", "author": "bjorncs", "createdAt": "2020-10-01T13:21:24Z", "path": "vespaclient-container-plugin/src/test/java/com/yahoo/document/restapi/resource/DocumentV1ApiTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.document.restapi.resource;\n+\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import com.yahoo.docproc.jdisc.metric.NullMetric;\n+import com.yahoo.document.Document;\n+import com.yahoo.document.DocumentGet;\n+import com.yahoo.document.DocumentPut;\n+import com.yahoo.document.DocumentRemove;\n+import com.yahoo.document.DocumentType;\n+import com.yahoo.document.DocumentTypeManager;\n+import com.yahoo.document.DocumentUpdate;\n+import com.yahoo.document.TestAndSetCondition;\n+import com.yahoo.document.config.DocumentmanagerConfig;\n+import com.yahoo.document.datatypes.StringFieldValue;\n+import com.yahoo.document.restapi.DocumentOperationExecutor;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.Group;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.VisitorOptions;\n+import com.yahoo.document.restapi.DocumentOperationExecutorMock;\n+import com.yahoo.document.restapi.resource.DocumentV1ApiHandler.DocumentOperationParser;\n+import com.yahoo.document.update.FieldUpdate;\n+import com.yahoo.documentapi.DocumentAccessParams;\n+import com.yahoo.documentapi.local.LocalDocumentAccess;\n+import com.yahoo.jdisc.Metric;\n+import com.yahoo.jdisc.http.HttpRequest;\n+import com.yahoo.metrics.simple.MetricReceiver;\n+import com.yahoo.prelude.fastsearch.StringField;\n+import com.yahoo.searchdefinition.derived.Deriver;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.test.ManualClock;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.BAD_REQUEST;\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.ERROR;\n+import static com.yahoo.documentapi.DocumentOperationParameters.parameters;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.DELETE;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.POST;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.PUT;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author jonmv\n+ */\n+public class DocumentV1ApiTest {\n+\n+    final DocumentmanagerConfig docConfig = Deriver.getDocumentManagerConfig(\"src/test/cfg/music.sd\").build();\n+    final DocumentTypeManager manager = new DocumentTypeManager(docConfig);\n+    final Document doc1 = new Document(manager.getDocumentType(\"music\"), \"id:space:music::one\");\n+    final Document doc2 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:n=1:two\");\n+    final Document doc3 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+    {\n+        doc1.setFieldValue(\"artist\", \"Tom Waits\");\n+        doc2.setFieldValue(\"artist\", \"Asa-Chan & Jun-Ray\");\n+    }\n+\n+    ManualClock clock;\n+    DocumentOperationParser parser;\n+    LocalDocumentAccess access;\n+    DocumentOperationExecutorMock executor;\n+    Metric metric;\n+    MetricReceiver metrics;\n+    DocumentV1ApiHandler handler;\n+\n+    @Before\n+    public void setUp() {\n+        clock = new ManualClock();\n+        parser = new DocumentOperationParser(docConfig);\n+        access = new LocalDocumentAccess(new DocumentAccessParams().setDocumentmanagerConfig(docConfig));\n+        executor = new DocumentOperationExecutorMock();\n+        metric = new NullMetric();\n+        metrics = new MetricReceiver.MockReceiver();\n+        handler = new DocumentV1ApiHandler(clock, executor, parser, metric, metrics);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        handler.destroy();\n+    }\n+\n+    @Test\n+    public void testResponses() {\n+        try (RequestHandlerTestDriver driver = new RequestHandlerTestDriver(handler)) {\n+            // GET at non-existent path returns 404 with available paths\n+            var response = driver.sendRequest(\"http://localhost/document/v1/not-found\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/not-found\\\",\" +\n+                           \"  \\\"message\\\": \\\"Nothing at '/document/v1/not-found'. Available paths are:\\\\n\" +\n+                                                   \"/document/v1/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/{docid}\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(\"application/json; charset=UTF-8\", response.getResponse().headers().getFirst(\"Content-Type\"));\n+            assertEquals(404, response.getStatus());\n+\n+            // GET at root is a visit. Numeric parameters have an upper bound.\n+            response = driver.sendRequest(\"http://localhost/document/v1?cluster=lackluster&bucketSpace=default&wantedDocumentCount=1025&concurrency=123\" +\n+                                          \"&selection=all%20the%20things&fieldSet=[id]&continuation=token\");\n+            executor.lastVisitContext().document(doc1);\n+            executor.lastVisitContext().document(doc2);\n+            executor.lastVisitContext().document(doc3);\n+            executor.lastVisitContext().success(Optional.of(\"token\"));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1\\\",\" +\n+                           \"  \\\"documents\\\": [\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music:n=1:two\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"     \\\"id\\\": \\\"id:space:music:g=a:three\\\",\" +\n+                           \"     \\\"fields\\\": {}\" +\n+                           \"    }\" +\n+                           \"  ],\" +\n+                           \"  \\\"continuation\\\": \\\"token\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().cluster(\"lackluster\").bucketSpace(\"default\").wantedDocumentCount(1024)\n+                                       .concurrency(100).selection(\"all the things\").fieldSet(\"[id]\").continuation(\"token\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace and document type is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid\");\n+            executor.lastVisitContext().error(BAD_REQUEST, \"nope\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"nope\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(400, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and group is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/best\");\n+            executor.lastVisitContext().error(ERROR, \"error\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/best\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"error\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(500, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(\"best\")).build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and number is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/123\");\n+            executor.lastVisitContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/123\\\",\" +\n+                           \"  \\\"documents\\\": []\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(123)).build(),\n+                         executor.lastOptions());\n+\n+            // GET with full document ID is a document get operation which returns 404 when no document is found\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?cluster=lackluster&fieldSet=go\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(404, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route-to-lackluster\").withFieldSet(\"go\"), executor.lastParameters());\n+\n+            // GET with full document ID is a document get operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?\");\n+            executor.lastOperationContext().success(Optional.of(doc1));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"  \\\"fields\\\": {\" +\n+                           \"    \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"  }\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // POST with a document payload is a document put operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?condition=test%20it\", POST,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentPut put = new DocumentPut(doc2);\n+            put.setCondition(new TestAndSetCondition(\"test it\"));\n+            assertEquals(put, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // PUT with a document update payload is a document update operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/a/three?create=true\", PUT,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": { \\\"assign\\\": \\\"Lisa Ekdahl\\\" }\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/a/three\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:g=a:three\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentUpdate update = new DocumentUpdate(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+            update.addFieldUpdate(FieldUpdate.createAssign(manager.getDocumentType(\"music\").getField(\"artist\"),\n+                                                           new StringFieldValue(\"Lisa Ekdahl\")));\n+            update.setCreateIfNonExistent(true);\n+            assertEquals(update, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // DELETE with full document ID is a document remove operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?route=route\", DELETE);\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentRemove(doc2.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route\"), executor.lastParameters());\n+        }\n+    }\n+\n+    void assertSameJson(String expected, String actual) {\n+        ByteArrayOutputStream expectedPretty = new ByteArrayOutputStream();", "originalCommit": "24e874d8cbc5d132fce1811e25721c8b9c888b1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MjM2MA==", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498262360", "bodyText": "Nice, thanks.", "author": "jonmv", "createdAt": "2020-10-01T13:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzODgxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0OTgyNw==", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498249827", "bodyText": "Unintended change?", "author": "bjorncs", "createdAt": "2020-10-01T13:36:44Z", "path": "documentapi/src/main/java/com/yahoo/documentapi/local/LocalDocumentAccess.java", "diffHunk": "@@ -94,7 +95,7 @@ public SubscriptionSession openSubscription(SubscriptionParameters parameters) {\n      *   session.put(documentPut);\n      *   session.get(documentId);\n      *                                     // Operations wait for this thread to arrive at \"phaser\"\n-     *   phaser.arrive();                  // Let operations send their responses\n+     *   phaser.arriveAndAwaitAdvance();   // Let operations send their responses", "originalCommit": "6792ae6918439c535ff518107ad17351bb27fed1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MjUyMA==", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498262520", "bodyText": "No, it was wrong.", "author": "jonmv", "createdAt": "2020-10-01T13:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0OTgyNw=="}], "type": "inlineReview", "revised_code": null}]}