{"pr_number": 15095, "pr_title": "Smorgrav/tenantinfo", "pr_createdAt": "2020-10-29T14:49:07Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15095", "timeline": [{"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "url": "https://github.com/vespa-engine/vespa/commit/a8a3b5b0c874a02ab364898d56e2d482d268bac0", "message": "Add TenantInfo classes and wire them in CloudTenant and serialization code", "committedDate": "2020-10-29T09:34:18Z", "type": "commit"}, {"oid": "a7812b136b061fed17da514ab831a818bed7daf2", "url": "https://github.com/vespa-engine/vespa/commit/a7812b136b061fed17da514ab831a818bed7daf2", "message": "Add unit tests and fix accordingly", "committedDate": "2020-10-29T12:15:28Z", "type": "commit"}, {"oid": "029c1d48dbf1a6405134156bd8d19363f536d00e", "url": "https://github.com/vespa-engine/vespa/commit/029c1d48dbf1a6405134156bd8d19363f536d00e", "message": "Back and forth on which cursor to work with in tenantinfo serialization", "committedDate": "2020-10-29T13:10:36Z", "type": "commit"}, {"oid": "0683da2b6254a001dbcb2b109e3f79dddaf0c10a", "url": "https://github.com/vespa-engine/vespa/commit/0683da2b6254a001dbcb2b109e3f79dddaf0c10a", "message": "Remove rest api parser - for another pr", "committedDate": "2020-10-29T14:01:40Z", "type": "commit"}, {"oid": "2f87c7ea9fbc39bdc285db1357cc2af001309477", "url": "https://github.com/vespa-engine/vespa/commit/2f87c7ea9fbc39bdc285db1357cc2af001309477", "message": "Do not use wildcard imports", "committedDate": "2020-10-29T14:55:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062315", "bodyText": "Should be named simply EMPTY, same goes for the other classes.", "author": "mpolden", "createdAt": "2020-10-30T12:27:23Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MDczNg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515070736", "bodyText": "I wasn't aware of that. Is there a naming convention document that I have missed?", "author": "smorgrav", "createdAt": "2020-10-30T12:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3ODI5Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515078293", "bodyText": "In general the Java convention is UPPERCASE for constants. In this module we typically name such constants either EMPTY/NONE or empty/none.", "author": "mpolden", "createdAt": "2020-10-30T12:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MDA1NA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515080054", "bodyText": "Also, this should be final.", "author": "mpolden", "createdAt": "2020-10-30T13:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjMyMA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836320", "bodyText": "fixed", "author": "smorgrav", "createdAt": "2020-11-02T09:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\nindex 396a349402..d1f2dcbcf5 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n\n@@ -8,6 +8,8 @@ import java.util.Objects;\n  * This info is used to capture generic support information and invoiced billing information.\n  *\n  * All fields are non null but strings can be empty\n+ *\n+ * @author smorgrav\n  */\n public class TenantInfo {\n     private final String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062980", "bodyText": "This should just call the constructor directly as the immutable builder methods will create a new object per field.", "author": "mpolden", "createdAt": "2020-10-30T12:28:43Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MTYwMA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515071600", "bodyText": "Not sure I understand - what is the difference?", "author": "smorgrav", "createdAt": "2020-10-30T12:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3OTkyMw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515079923", "bodyText": "The difference is the number of objects you create. In the current state it's multiplied by the number of fields in TenantInfo (since each withXXX creates a new object), this is then multiplied by the number of tenants you're deserializing.", "author": "mpolden", "createdAt": "2020-10-30T13:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMTQ4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515101483", "bodyText": "Ah - an optimisation. Using builder methods adds some benefits that I think outweigh that - one is that the order of the constructor when using strings are prone to mistakes (and this eliminates that).", "author": "smorgrav", "createdAt": "2020-10-30T13:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\nindex 00904bf2d0..8b7590e88a 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n\n@@ -147,19 +151,22 @@ public class TenantSerializer {\n         return keys.build();\n     }\n \n-    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n-        return TenantInfo.EmptyInfo\n+    TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        if (!infoObject.valid()) return TenantInfo.EMPTY;\n+\n+        return TenantInfo.EMPTY\n                 .withName(infoObject.field(\"name\").asString())\n                 .withEmail(infoObject.field(\"email\").asString())\n                 .withWebsite(infoObject.field(\"website\").asString())\n                 .withContactName(infoObject.field(\"contactName\").asString())\n                 .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withInvoiceEmail(infoObject.field(\"invoiceEmail\").asString())\n                 .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n                 .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n     }\n \n     private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n-        return TenantInfoAddress.EmptyAddress\n+        return TenantInfoAddress.EMPTY\n                 .withAddressLines(addressObject.field(\"addressLines\").asString())\n                 .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n                 .withCity(addressObject.field(\"city\").asString())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzAzMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063031", "bodyText": "Same as above.", "author": "mpolden", "createdAt": "2020-10-30T12:28:50Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\nindex 00904bf2d0..8b7590e88a 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n\n@@ -147,19 +151,22 @@ public class TenantSerializer {\n         return keys.build();\n     }\n \n-    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n-        return TenantInfo.EmptyInfo\n+    TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        if (!infoObject.valid()) return TenantInfo.EMPTY;\n+\n+        return TenantInfo.EMPTY\n                 .withName(infoObject.field(\"name\").asString())\n                 .withEmail(infoObject.field(\"email\").asString())\n                 .withWebsite(infoObject.field(\"website\").asString())\n                 .withContactName(infoObject.field(\"contactName\").asString())\n                 .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withInvoiceEmail(infoObject.field(\"invoiceEmail\").asString())\n                 .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n                 .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n     }\n \n     private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n-        return TenantInfoAddress.EmptyAddress\n+        return TenantInfoAddress.EMPTY\n                 .withAddressLines(addressObject.field(\"addressLines\").asString())\n                 .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n                 .withCity(addressObject.field(\"city\").asString())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzA3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063073", "bodyText": "Same as above.", "author": "mpolden", "createdAt": "2020-10-30T12:28:55Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress\n+                .withAddressLines(addressObject.field(\"addressLines\").asString())\n+                .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n+                .withCity(addressObject.field(\"city\").asString())\n+                .withStateRegionProvince(addressObject.field(\"stateRegionProvince\").asString())\n+                .withCountry(addressObject.field(\"country\").asString());\n+    }\n+\n+    private TenantInfoBillingContact tenantInfoBillingContactFromSlime(Inspector billingObject) {\n+        return TenantInfoBillingContact.EmptyBillingContact", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\nindex 00904bf2d0..8b7590e88a 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java\n\n@@ -147,19 +151,22 @@ public class TenantSerializer {\n         return keys.build();\n     }\n \n-    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n-        return TenantInfo.EmptyInfo\n+    TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        if (!infoObject.valid()) return TenantInfo.EMPTY;\n+\n+        return TenantInfo.EMPTY\n                 .withName(infoObject.field(\"name\").asString())\n                 .withEmail(infoObject.field(\"email\").asString())\n                 .withWebsite(infoObject.field(\"website\").asString())\n                 .withContactName(infoObject.field(\"contactName\").asString())\n                 .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withInvoiceEmail(infoObject.field(\"invoiceEmail\").asString())\n                 .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n                 .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n     }\n \n     private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n-        return TenantInfoAddress.EmptyAddress\n+        return TenantInfoAddress.EMPTY\n                 .withAddressLines(addressObject.field(\"addressLines\").asString())\n                 .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n                 .withCity(addressObject.field(\"city\").asString())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063826", "bodyText": "If this implements equals/hashCode you can simply return this.equals(EMPTY). Same for the other classes. This will also simplify serialization testing.", "author": "mpolden", "createdAt": "2020-10-30T12:30:16Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTIyNw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515075227", "bodyText": "Good catch!\nCould you give a hint to what part of testing could be simplified due to this?", "author": "smorgrav", "createdAt": "2020-10-30T12:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MjI2NA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515082264", "bodyText": "If you add a fully populated TenantInfo to @Test public void cloud_tenant() you can do do assertEquals(tenant.tenantInfo(), serialized.tenantInfo()) to test that serialization works as expected in both directions.", "author": "mpolden", "createdAt": "2020-10-30T13:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4OTE4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515089186", "bodyText": "Ah you where referring to if it implemented equals/hashCode - not how to implement the isEmpty method?I think that is exactly what is done right?", "author": "smorgrav", "createdAt": "2020-10-30T13:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjAwMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515176001", "bodyText": "Yes, never mind! You should still be able to simplify isEmpty though, by just comparing with empty.", "author": "mpolden", "createdAt": "2020-10-30T15:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjUxMg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836512", "bodyText": "fixed", "author": "smorgrav", "createdAt": "2020-11-02T09:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\nindex 396a349402..d1f2dcbcf5 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n\n@@ -8,6 +8,8 @@ import java.util.Objects;\n  * This info is used to capture generic support information and invoiced billing information.\n  *\n  * All fields are non null but strings can be empty\n+ *\n+ * @author smorgrav\n  */\n public class TenantInfo {\n     private final String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515064875", "bodyText": "Should set a non-empty TenantInfo here, and assert the re-serialized value below to ensure that serialization is correct.", "author": "mpolden", "createdAt": "2020-10-30T12:32:15Z", "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MjYwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515092609", "bodyText": "I guess. The non empty case is covered below (albeit not in the context of a CloudTenant) - the normal case is that it is empty. I can create another test.", "author": "smorgrav", "createdAt": "2020-10-30T13:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjI1Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515176252", "bodyText": "Right, I didn't notice the other tests.", "author": "mpolden", "createdAt": "2020-10-30T15:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MDM3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515840372", "bodyText": "Fixed. Added one extra test there to cover that the info field is set correctly in the tenant object.", "author": "smorgrav", "createdAt": "2020-11-02T09:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java\nindex bf6ac26ab1..4787b0ca45 100644\n--- a/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java\n+++ b/controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java\n\n@@ -82,13 +85,57 @@ public class TenantSerializerTest {\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n                                                                otherPublicKey, new SimplePrincipal(\"jane\")),\n-                                             TenantInfo.EmptyInfo);\n+                                             TenantInfo.EMPTY);\n         CloudTenant serialized = (CloudTenant) serializer.tenantFrom(serializer.toSlime(tenant));\n         assertEquals(tenant.name(), serialized.name());\n         assertEquals(tenant.creator(), serialized.creator());\n         assertEquals(tenant.developerKeys(), serialized.developerKeys());\n     }\n \n+    @Test\n+    public void cloud_tenant_with_tenant_info_partial() {\n+        TenantInfo partialInfo = TenantInfo.EMPTY\n+                .withAddress(TenantInfoAddress.EMPTY.withCity(\"H\u00f8nefoss\"));\n+\n+        Slime slime = new Slime();\n+        Cursor parentObject = slime.setObject();\n+        serializer.toSlime(partialInfo, parentObject);\n+        assertEquals(\"{\\\"info\\\":{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"website\\\":\\\"\\\",\\\"invoiceEmail\\\":\\\"\\\",\\\"contactName\\\":\\\"\\\",\\\"contactEmail\\\":\\\"\\\",\\\"address\\\":{\\\"addressLines\\\":\\\"\\\",\\\"postalCodeOrZip\\\":\\\"\\\",\\\"city\\\":\\\"H\u00f8nefoss\\\",\\\"stateRegionProvince\\\":\\\"\\\",\\\"country\\\":\\\"\\\"}}}\", slime.toString());\n+    }\n+\n+    @Test\n+    public void cloud_tenant_with_tenant_info_full() {\n+        TenantInfo fullInfo = TenantInfo.EMPTY\n+                .withName(\"My Company\")\n+                .withEmail(\"email@mycomp.any\")\n+                .withWebsite(\"http://mycomp.any\")\n+                .withContactEmail(\"ceo@mycomp.any\")\n+                .withContactName(\"My Name\")\n+                .withInvoiceEmail(\"invoice@mycomp.any\")\n+                .withAddress(TenantInfoAddress.EMPTY\n+                        .withCity(\"H\u00f8nefoss\")\n+                        .withAddressLines(\"Riperbakken 2\")\n+                        .withCountry(\"Norway\")\n+                        .withPostalCodeOrZip(\"3510\")\n+                        .withStateRegionProvince(\"Viken\"))\n+                .withBillingContact(TenantInfoBillingContact.EMPTY\n+                        .withEmail(\"thomas@sodor.com\")\n+                        .withName(\"Thomas The Tank Engine\")\n+                        .withPhone(\"NA\")\n+                        .withAddress(TenantInfoAddress.EMPTY\n+                                .withCity(\"Suddery\")\n+                                .withCountry(\"Sodor\")\n+                                .withAddressLines(\"Central Station\")\n+                                .withStateRegionProvince(\"Irish Sea\")));\n+\n+        Slime slime = new Slime();\n+        Cursor parentCursor = slime.setObject();\n+        serializer.toSlime(fullInfo, parentCursor);\n+        TenantInfo roundTripInfo = serializer.tenantInfoFromSlime(parentCursor.field(\"info\"));\n+\n+        assertEquals(fullInfo, roundTripInfo);\n+    }\n+\n     private Contact contact() {\n         return new Contact(\n                 URI.create(\"http://contact1.test\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTM5MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065391", "bodyText": "Missing @author and license header.", "author": "mpolden", "createdAt": "2020-10-30T12:33:13Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjU2OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836569", "bodyText": "fixed", "author": "smorgrav", "createdAt": "2020-11-02T09:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTM5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\nindex 396a349402..d1f2dcbcf5 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java\n\n@@ -8,6 +8,8 @@ import java.util.Objects;\n  * This info is used to capture generic support information and invoiced billing information.\n  *\n  * All fields are non null but strings can be empty\n+ *\n+ * @author smorgrav\n  */\n public class TenantInfo {\n     private final String name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTQ3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065475", "bodyText": "Missing @author and license header.", "author": "mpolden", "createdAt": "2020-10-30T12:33:22Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Address formats are quite diverse across the world both in therms of what fields are used, named and\n+ * the order of them.\n+ *\n+ * To be generic a little future proof the address fields here are a mix of free text (address lines) and fixed fields.\n+ * The address lines can be street address, P.O box, c/o name, apartment, suite, unit, building floor etc etc.\n+ *\n+ * All fields are mandatory but can be an empty string (ie. not null)\n+ */\n+public class TenantInfoAddress {", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjYxNg==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836616", "bodyText": "fixed", "author": "smorgrav", "createdAt": "2020-11-02T09:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java\nindex 08ad1aa675..0b99a6f26a 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java\n\n@@ -10,6 +10,8 @@ import java.util.Objects;\n  * The address lines can be street address, P.O box, c/o name, apartment, suite, unit, building floor etc etc.\n  *\n  * All fields are mandatory but can be an empty string (ie. not null)\n+ *\n+ * @author smorgrav\n  */\n public class TenantInfoAddress {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTU0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065543", "bodyText": "Missing @author and license header.", "author": "mpolden", "createdAt": "2020-10-30T12:33:28Z", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+public class TenantInfoBillingContact {", "originalCommit": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjY3MA==", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836670", "bodyText": "fixed", "author": "smorgrav", "createdAt": "2020-11-02T09:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "chunk": "diff --git a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java\nindex 394e7860d6..a229ac28a1 100644\n--- a/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java\n+++ b/controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java\n\n@@ -2,6 +2,9 @@ package com.yahoo.vespa.hosted.controller.tenant;\n \n import java.util.Objects;\n \n+/**\n+ * @author smorgrav\n+ */\n public class TenantInfoBillingContact {\n     private final String name;\n     private final String email;\n"}}, {"oid": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "url": "https://github.com/vespa-engine/vespa/commit/c5ff46ba76da9fad3cc0a2281d84366df5025e72", "message": "Rename empty singletons, simplify isEmpty and add author tag", "committedDate": "2020-11-02T09:16:39Z", "type": "commit"}, {"oid": "e227423bf8709df56652e7197eccbeea1e057482", "url": "https://github.com/vespa-engine/vespa/commit/e227423bf8709df56652e7197eccbeea1e057482", "message": "Add license header", "committedDate": "2020-11-02T09:21:15Z", "type": "commit"}, {"oid": "426fe805f7520932367eb24e557ad0af5c5a1795", "url": "https://github.com/vespa-engine/vespa/commit/426fe805f7520932367eb24e557ad0af5c5a1795", "message": "Add one unit test of the cloud tenant serialization with non empty info", "committedDate": "2020-11-02T09:28:47Z", "type": "commit"}]}