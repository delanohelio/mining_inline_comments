{"pr_number": 11815, "pr_title": "Hold a JVM-wide reentrant lock to grab mutex \u2014\u00a0helps ZK stale reads?", "pr_createdAt": "2020-01-16T13:52:31Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11815", "timeline": [{"oid": "5dfe8e2421af5d9eaae31d779d1636180799ddef", "url": "https://github.com/vespa-engine/vespa/commit/5dfe8e2421af5d9eaae31d779d1636180799ddef", "message": "Hold a JVM-wide reentrant lock to grab mutex \u2014\u00a0helps ZK stale reads?", "committedDate": "2020-01-16T13:52:06Z", "type": "commit"}, {"oid": "9775572038f4d8c883a94e1fee1b957b37d0e2f5", "url": "https://github.com/vespa-engine/vespa/commit/9775572038f4d8c883a94e1fee1b957b37d0e2f5", "message": "Swap order of locks, to avoid doubling timeout duration", "committedDate": "2020-01-16T14:08:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDg5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11815#discussion_r367444892", "bodyText": "I found the previous version of this code easer to read, probably because of the implicit non-obvious assumption that tryLock() is assumed to always return true, and then relying on that here.", "author": "hakonhall", "createdAt": "2020-01-16T14:24:55Z", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -15,31 +16,46 @@\n  */\n public class Lock implements Mutex {\n \n+    private final ReentrantLock lock;\n     private final InterProcessLock mutex;\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n         this.lockPath = lockPath;\n+        this.lock = new ReentrantLock(true);\n         mutex = curator.createMutex(lockPath);\n     }\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        boolean acquired;\n+        boolean acquired = false;\n         try {\n             acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            lock.tryLock(); // Should be available to only this thread, while holding the above mutex.\n         }\n         catch (Exception e) {\n+            if (acquired) release();\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n \n-        if (! acquired)\n+        if ( ! lock.isHeldByCurrentThread()) {", "originalCommit": "9775572038f4d8c883a94e1fee1b957b37d0e2f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ1MjAyNg==", "url": "https://github.com/vespa-engine/vespa/pull/11815#discussion_r367452026", "bodyText": "Right. Fixed. PTAL.", "author": "jonmv", "createdAt": "2020-01-16T14:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9267392ca57cdd2aa642383ca652125975f7653c", "chunk": "diff --git a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\nindex 9a3c7095bb..98b5732eb6 100644\n--- a/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n+++ b/zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java\n\n@@ -28,21 +28,18 @@ public class Lock implements Mutex {\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        boolean acquired = false;\n         try {\n-            acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n-            lock.tryLock(); // Should be available to only this thread, while holding the above mutex.\n+            if ( ! mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS))\n+                throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n+                                                    \" to acquire lock '\" + lockPath + \"'\");\n+            if ( ! lock.tryLock()) { // Should be available to only this thread, while holding the above mutex.\n+                release();\n+                throw new IllegalStateException(\"InterProcessMutex acquired, but guarded lock held by someone else\");\n+            }\n         }\n         catch (Exception e) {\n-            if (acquired) release();\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n-\n-        if ( ! lock.isHeldByCurrentThread()) {\n-            if (acquired) release();\n-            throw new UncheckedTimeoutException(\"Timed out after waiting \" + timeout +\n-                                                \" to acquire lock '\" + lockPath + \"'\");\n-        }\n     }\n \n     @Override\n"}}, {"oid": "9267392ca57cdd2aa642383ca652125975f7653c", "url": "https://github.com/vespa-engine/vespa/commit/9267392ca57cdd2aa642383ca652125975f7653c", "message": "Differentiate between failing to acquire the two locks", "committedDate": "2020-01-16T14:36:21Z", "type": "commit"}, {"oid": "1f02dd7f9b53d32e2dbc1242de56dc1b6135b097", "url": "https://github.com/vespa-engine/vespa/commit/1f02dd7f9b53d32e2dbc1242de56dc1b6135b097", "message": "Be less stupoid", "committedDate": "2020-01-16T14:39:58Z", "type": "commit"}]}