{"pr_number": 11872, "pr_title": "Handle expections when finding file references to delete", "pr_createdAt": "2020-01-21T13:24:50Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/11872", "timeline": [{"oid": "8fbace7e7541d3511c2962c6b1aed4c8ad51c7a4", "url": "https://github.com/vespa-engine/vespa/commit/8fbace7e7541d3511c2962c6b1aed4c8ad51c7a4", "message": "Handle expections when finding file references to delete\n\nIf we get an exception when getting file references to delete catch\nexception and continue with other applications, as we want to make\nsure this is done even in case of some (transient) failure", "committedDate": "2020-01-21T13:23:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMTA5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/11872#discussion_r369021092", "bodyText": "I think this will still fail for the case we looked at earlier today (where getOptionalApplication is the method that throws, but it isn't called until forEach evaluates the stream calls).\nHow about rewriting it to a regular loop and wrap everything except listApplications in a try-catch?\nfor (var application : listApplications()) {\n    try {\n      ...\n    } catch (Exception e) {\n      ...\n    }\n}", "author": "mpolden", "createdAt": "2020-01-21T14:09:55Z", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java", "diffHunk": "@@ -426,12 +426,19 @@ public HttpResponse filedistributionStatus(ApplicationId applicationId, Duration\n \n         Set<String> fileReferencesInUse = new HashSet<>();\n         // Intentionally skip applications that we for some reason do not find\n+        // or that we fail to get file references for (they will be retried on the next run)\n         listApplications().stream()\n                 .map(this::getOptionalApplication)\n                 .map(Optional::get)\n-                .forEach(application -> fileReferencesInUse.addAll(application.getModel().fileReferences().stream()\n-                                                                           .map(FileReference::value)\n-                                                                           .collect(Collectors.toSet())));\n+                .forEach(application -> {", "originalCommit": "8fbace7e7541d3511c2962c6b1aed4c8ad51c7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MzcyNQ==", "url": "https://github.com/vespa-engine/vespa/pull/11872#discussion_r369263725", "bodyText": "Yes, thanks, done.", "author": "hmusum", "createdAt": "2020-01-21T21:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMTA5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c77d23f9875ed8f53519dca0f4ad2585ed8ca7b9", "chunk": "diff --git a/configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java b/configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java\nindex a5eb2b1942..9625547771 100644\n--- a/configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java\n+++ b/configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java\n\n@@ -427,18 +427,17 @@ public class ApplicationRepository implements com.yahoo.config.provision.Deploye\n         Set<String> fileReferencesInUse = new HashSet<>();\n         // Intentionally skip applications that we for some reason do not find\n         // or that we fail to get file references for (they will be retried on the next run)\n-        listApplications().stream()\n-                .map(this::getOptionalApplication)\n-                .map(Optional::get)\n-                .forEach(application -> {\n-                    try {\n-                        fileReferencesInUse.addAll(application.getModel().fileReferences().stream()\n-                                                           .map(FileReference::value)\n-                                                           .collect(Collectors.toSet()));\n-                    } catch (Exception e) {\n-                        log.log(LogLevel.WARNING, \"Getting file references in use from : \" + application + \" failed\", e);\n-                    }\n-                });\n+        for (var application : listApplications()) {\n+            try {\n+                Optional<Application> app = getOptionalApplication(application);\n+                if (app.isEmpty()) continue;\n+                fileReferencesInUse.addAll(app.get().getModel().fileReferences().stream()\n+                                                   .map(FileReference::value)\n+                                                   .collect(Collectors.toSet()));\n+            } catch (Exception e) {\n+                log.log(LogLevel.WARNING, \"Getting file references in use for '\" + application + \"' failed\", e);\n+            }\n+        }\n         log.log(LogLevel.DEBUG, \"File references in use : \" + fileReferencesInUse);\n \n         // Find those on disk that are not in use\n"}}, {"oid": "c77d23f9875ed8f53519dca0f4ad2585ed8ca7b9", "url": "https://github.com/vespa-engine/vespa/commit/c77d23f9875ed8f53519dca0f4ad2585ed8ca7b9", "message": "Catch exception also when trying to get application", "committedDate": "2020-01-21T21:53:39Z", "type": "commit"}]}