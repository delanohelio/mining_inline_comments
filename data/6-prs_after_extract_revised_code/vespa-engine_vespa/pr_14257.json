{"pr_number": 14257, "pr_title": "Allow setting a request type explicitly", "pr_createdAt": "2020-09-02T14:44:48Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/14257", "timeline": [{"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "url": "https://github.com/vespa-engine/vespa/commit/3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "message": "Allow setting a request type explicitly\n\nThis lets handler authors control the requestType explicitly\nby setting it on the HttpResponse, which is useful to avoid\nmisclassification of POST requests to reading handlers as writes.", "committedDate": "2020-09-02T14:42:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482827225", "bodyText": "Why is request type as member of HttpResponse? I would assume HttpRequest is more suitable as the \"type\" is a property of the request, not the response. It's also stored in the request type for the jdisc core abstraction layer.", "author": "bjorncs", "createdAt": "2020-09-03T09:10:00Z", "path": "container-core/src/main/java/com/yahoo/container/jdisc/HttpResponse.java", "diffHunk": "@@ -129,4 +125,13 @@ public void complete() { }\n         return Collections::emptyIterator;\n     }\n \n+    /** Sets the type classification of this request for metric collection purposes */\n+    public void setRequestType(Request.RequestType requestType) { this.requestType = requestType; }", "originalCommit": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2Njc4Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483466783", "bodyText": "That allows the handler/processors/searchers to process the request and decide the right classification based on its content.", "author": "bratseth", "createdAt": "2020-09-04T08:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2ODY0OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483468649", "bodyText": "Jdisc filters cannot perform this classification easily if it's not part of the request type.", "author": "bjorncs", "createdAt": "2020-09-04T08:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MjY5NQ==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483472695", "bodyText": "Well there's lots of things filters cannot perform easily - they are special purpose. Is there a good use case for filters doing this classification?", "author": "bratseth", "createdAt": "2020-09-04T08:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4NDg2Ng==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483484866", "bodyText": "Access control", "author": "bjorncs", "createdAt": "2020-09-04T08:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODY0Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482828643", "bodyText": "RequestType is a too generic term in my opinion. Consider naming the concept something more specific.", "author": "bjorncs", "createdAt": "2020-09-03T09:11:24Z", "path": "jdisc_core/src/main/java/com/yahoo/jdisc/Request.java", "diffHunk": "@@ -48,6 +48,11 @@\n     private boolean serverRequest;\n     private Long timeout;\n     private URI uri;\n+    private RequestType requestType;\n+\n+    public enum RequestType {", "originalCommit": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MzcwMg==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483453702", "bodyText": "That's what it's already called in the metric so using a different name here increases entropy a bit. Did you have a suggestion in mind?", "author": "bratseth", "createdAt": "2020-09-04T07:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NTY5OQ==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483455699", "bodyText": "Not really, good naming ain't easy :)", "author": "bjorncs", "createdAt": "2020-09-04T08:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODY0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMDY5Mg==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482830692", "bodyText": "I actually prefer the previous indentation style. The new style requires a re-indentation of all parameters if the name or return type of the method is changed.", "author": "bjorncs", "createdAt": "2020-09-03T09:14:51Z", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/JettyHttpServer.java", "diffHunk": "@@ -208,32 +203,26 @@ private static void initializeJettyLogging() {\n     private static void setupJmx(Server server, ServerConfig serverConfig) {\n         if (serverConfig.jmx().enabled()) {\n             System.setProperty(\"java.rmi.server.hostname\", \"localhost\");\n-            server.addBean(\n-                    new MBeanContainer(ManagementFactory.getPlatformMBeanServer()));\n-            server.addBean(\n-                    new ConnectorServer(\n-                            createJmxLoopbackOnlyServiceUrl(serverConfig.jmx().listenPort()),\n-                            \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"));\n+            server.addBean(new MBeanContainer(ManagementFactory.getPlatformMBeanServer()));\n+            server.addBean(new ConnectorServer(createJmxLoopbackOnlyServiceUrl(serverConfig.jmx().listenPort()),\n+                                               \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"));\n         }\n     }\n \n     private static JMXServiceURL createJmxLoopbackOnlyServiceUrl(int port) {\n         try {\n-            return new JMXServiceURL(\n-                    \"rmi\", \"localhost\", port, \"/jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n+            return new JMXServiceURL(\"rmi\", \"localhost\", port, \"/jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n         } catch (MalformedURLException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n-    private HandlerCollection getHandlerCollection(\n-            ServerConfig serverConfig,\n-            ServletPathsConfig servletPathsConfig,\n-            List<JDiscServerConnector> connectors,\n-            ServletHolder jdiscServlet,\n-            ComponentRegistry<ServletHolder> servletHolders,\n-            FilterHolder jDiscFilterInvokerFilter) {\n-\n+    private HandlerCollection getHandlerCollection(ServerConfig serverConfig,", "originalCommit": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1Mjk2Mw==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483452963", "bodyText": "But the IDE does that for you automatically ...", "author": "bratseth", "createdAt": "2020-09-04T07:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMDY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MzY2NA==", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r483453664", "bodyText": "Not mine, probably missing some non-default configuration.", "author": "bjorncs", "createdAt": "2020-09-04T07:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMDY5Mg=="}], "type": "inlineReview", "revised_code": null}]}