{"pr_number": 15357, "pr_title": "Jonmv/reindexing metrics", "pr_createdAt": "2020-11-16T12:27:31Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525093273", "bodyText": "Consider having \"percent\" removed from metric name, and instead represent it as a value between 0 and 1.", "author": "bjorncs", "createdAt": "2020-11-17T11:46:54Z", "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.reindexing;\n+\n+import com.yahoo.documentapi.ProgressToken;\n+import com.yahoo.jdisc.Metric;\n+\n+import java.time.Clock;\n+import java.util.Map;\n+\n+import static ai.vespa.reindexing.Reindexing.State.SUCCESSFUL;\n+\n+/**\n+ * Metrics for reindexing in a content cluster.\n+ *\n+ * @author jonmv\n+ */\n+class ReindexingMetrics {\n+\n+    private final Metric metric;\n+    private final String cluster;\n+\n+    ReindexingMetrics(Metric metric, String cluster) {\n+        this.metric = metric;\n+        this.cluster = cluster;\n+    }\n+\n+    void dump(Reindexing reindexing) {\n+        reindexing.status().forEach((type, status) -> {\n+            metric.set(\"reindexing.percent.done\",", "originalCommit": "fe5ea3f84adea4ae5aaf277f61651b35e71f463a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0NDAzNA==", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525144034", "bodyText": "Also, we should discuss the metric names in an architect meeting at some time.", "author": "geirst", "createdAt": "2020-11-17T13:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzODEzNw==", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525238137", "bodyText": "Yes, that\u2019s the intention :) Feel free to reach out early with suggestions.", "author": "jonmv", "createdAt": "2020-11-17T15:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4de0fc18bbe12a1646bfda2b505cef0d2fbe99c1", "chunk": "diff --git a/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java b/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java\ndeleted file mode 100644\nindex 5a5a866f15..0000000000\n--- a/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n-package ai.vespa.reindexing;\n-\n-import com.yahoo.documentapi.ProgressToken;\n-import com.yahoo.jdisc.Metric;\n-\n-import java.time.Clock;\n-import java.util.Map;\n-\n-import static ai.vespa.reindexing.Reindexing.State.SUCCESSFUL;\n-\n-/**\n- * Metrics for reindexing in a content cluster.\n- *\n- * @author jonmv\n- */\n-class ReindexingMetrics {\n-\n-    private final Metric metric;\n-    private final String cluster;\n-\n-    ReindexingMetrics(Metric metric, String cluster) {\n-        this.metric = metric;\n-        this.cluster = cluster;\n-    }\n-\n-    void dump(Reindexing reindexing) {\n-        reindexing.status().forEach((type, status) -> {\n-            metric.set(\"reindexing.percent.done\",\n-                       status.progress().map(ProgressToken::percentFinished).orElse(status.state() == SUCCESSFUL ? 100.0 : 0.0),\n-                       metric.createContext(Map.of(\"clusterid\", cluster,\n-                                                   \"documenttype\", type.getName(),\n-                                                   \"state\", toString(status.state()))));\n-        });\n-    }\n-\n-    private static String toString(Reindexing.State state) {\n-        switch (state) {\n-            case READY: return \"ready\";\n-            case RUNNING: return \"running\";\n-            case FAILED: return \"failed\";\n-            case SUCCESSFUL: return \"successful\";\n-            default: throw new IllegalArgumentException(\"Unknown reindexing state '\" + state + \"'\");\n-        }\n-    }\n-\n-}\n"}}, {"oid": "4de0fc18bbe12a1646bfda2b505cef0d2fbe99c1", "url": "https://github.com/vespa-engine/vespa/commit/4de0fc18bbe12a1646bfda2b505cef0d2fbe99c1", "message": "Non-functional updates to doc and comments", "committedDate": "2020-11-19T10:02:41Z", "type": "commit"}, {"oid": "5b110acc79bee12f6a3243d1e78697d5b11f5dcb", "url": "https://github.com/vespa-engine/vespa/commit/5b110acc79bee12f6a3243d1e78697d5b11f5dcb", "message": "Write metrics regularly when doing reindexing", "committedDate": "2020-11-19T10:04:46Z", "type": "commit"}, {"oid": "bf81e897a3dd05b1e0934d6234f5a9bf0ad9a150", "url": "https://github.com/vespa-engine/vespa/commit/bf81e897a3dd05b1e0934d6234f5a9bf0ad9a150", "message": "Avoid potential NPE in config server", "committedDate": "2020-11-19T10:04:46Z", "type": "commit"}, {"oid": "efee08d9b656445ddd13c31c14394e6031654047", "url": "https://github.com/vespa-engine/vespa/commit/efee08d9b656445ddd13c31c14394e6031654047", "message": "Metric \"reindexing.progress\" with value [0, 1] instead of percentage", "committedDate": "2020-11-19T10:04:46Z", "type": "commit"}, {"oid": "e70424ae2180ddd6c04267b009c0fb715a41fa5f", "url": "https://github.com/vespa-engine/vespa/commit/e70424ae2180ddd6c04267b009c0fb715a41fa5f", "message": "Status may be modified by different threads \u2014\u00a0wrap in AtomicRefence", "committedDate": "2020-11-19T10:04:46Z", "type": "commit"}, {"oid": "e70424ae2180ddd6c04267b009c0fb715a41fa5f", "url": "https://github.com/vespa-engine/vespa/commit/e70424ae2180ddd6c04267b009c0fb715a41fa5f", "message": "Status may be modified by different threads \u2014\u00a0wrap in AtomicRefence", "committedDate": "2020-11-19T10:04:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MTc1Mw==", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r526791753", "bodyText": "You should probably use a shared monitor/lock for both reindexing and status (unless they are used completely  independently of each other).", "author": "bjorncs", "createdAt": "2020-11-19T11:24:33Z", "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java", "diffHunk": "@@ -110,20 +107,20 @@ public void reindex() throws ReindexingLockException {\n     @SuppressWarnings(\"fallthrough\") // (\u30ce\u0ca0 \u2229\u0ca0)\u30ce\u5f61( \\o\u00b0o)\\\n     private void progress(DocumentType type) {\n         // If this is a new document type (or a new cluster), no reindexing is required.\n-        reindexing = database.readReindexing();\n-        status = reindexing.status().getOrDefault(type,\n-                                                  Status.ready(clock.instant())\n-                                                        .running()\n-                                                        .successful(clock.instant()));\n-        if (ready.get(type).isAfter(status.startedAt()))\n-            status = Status.ready(clock.instant()); // Need to restart, as a newer reindexing is required.\n-\n-        database.writeReindexing(reindexing = reindexing.with(type, status));\n-        metrics.dump(reindexing);\n-\n-        switch (status.state()) {\n+        AtomicReference<Reindexing> reindexing = new AtomicReference<>(database.readReindexing());", "originalCommit": "e70424ae2180ddd6c04267b009c0fb715a41fa5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2OTI2NQ==", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r527069265", "bodyText": "They are used independently enough imo.", "author": "jonmv", "createdAt": "2020-11-19T17:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b5af700358a57ffce0bac8dd3ffcac43d6f2cce6", "chunk": "diff --git a/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java b/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java\nindex e297cfe042..13ed9800db 100644\n--- a/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java\n+++ b/clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java\n\n@@ -104,16 +108,23 @@ public class Reindexer {\n         }\n     }\n \n+    static Reindexing updateWithReady(Map<DocumentType, Instant> ready, Reindexing reindexing, Instant now) {\n+        for (DocumentType type : ready.keySet()) { // We consider update for document types for which we have config.\n+            if ( ! ready.get(type).isAfter(now)) {\n+                Status status = reindexing.status().getOrDefault(type, Status.ready(now)\n+                                                                             .running()\n+                                                                             .successful(now));\n+                if (status.startedAt().isBefore(ready.get(type)))\n+                    status = Status.ready(now);\n+\n+                reindexing = reindexing.with(type, status);\n+            }\n+        }\n+        return reindexing;\n+    }\n+\n     @SuppressWarnings(\"fallthrough\") // (\u30ce\u0ca0 \u2229\u0ca0)\u30ce\u5f61( \\o\u00b0o)\\\n-    private void progress(DocumentType type) {\n-        // If this is a new document type (or a new cluster), no reindexing is required.\n-        AtomicReference<Reindexing> reindexing = new AtomicReference<>(database.readReindexing());\n-        AtomicReference<Status> status = new AtomicReference<>(reindexing.get().status().getOrDefault(type,\n-                                                                                                      Status.ready(clock.instant())\n-                                                                                                            .running()\n-                                                                                                            .successful(clock.instant())));\n-        // Need to restart if a newer indexing is required.\n-        status.updateAndGet(value -> ready.get(type).isAfter(value.startedAt()) ? Status.ready(clock.instant()) : value);\n+    private void progress(DocumentType type, AtomicReference<Reindexing> reindexing, AtomicReference<Status> status) {\n \n         database.writeReindexing(reindexing.updateAndGet(value -> value.with(type, status.get())));\n         metrics.dump(reindexing.get());\n"}}, {"oid": "b5af700358a57ffce0bac8dd3ffcac43d6f2cce6", "url": "https://github.com/vespa-engine/vespa/commit/b5af700358a57ffce0bac8dd3ffcac43d6f2cce6", "message": "Update with new ready-state immediately when ready", "committedDate": "2020-11-19T17:09:38Z", "type": "commit"}, {"oid": "0f500364861c7dffac4f136ce218ea22c3e9da8a", "url": "https://github.com/vespa-engine/vespa/commit/0f500364861c7dffac4f136ce218ea22c3e9da8a", "message": "Update metric state dimension name to \"pending\"", "committedDate": "2020-11-19T17:12:16Z", "type": "commit"}]}