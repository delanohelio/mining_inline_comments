{"pr_number": 12413, "pr_title": "Gjoranv/enforce read auth in aws ", "pr_createdAt": "2020-03-03T13:31:47Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12413", "timeline": [{"oid": "3cf78ada2bf6d6c6feebb609d17533a5b69b4680", "url": "https://github.com/vespa-engine/vespa/commit/3cf78ada2bf6d6c6feebb609d17533a5b69b4680", "message": "Move utilitiy functions to AccessControl", "committedDate": "2020-03-03T10:49:59Z", "type": "commit"}, {"oid": "2813c747433f03cec7eaf8a03faa79b8393eab77", "url": "https://github.com/vespa-engine/vespa/commit/2813c747433f03cec7eaf8a03faa79b8393eab77", "message": "Extract function that decides if the app needs validation.\n\n+ Remove '.' becuase it's added by the deployment-override message", "committedDate": "2020-03-03T12:56:13Z", "type": "commit"}, {"oid": "c3ce97f55e6ed566e63f7b623c670c89672f76f7", "url": "https://github.com/vespa-engine/vespa/commit/c3ce97f55e6ed566e63f7b623c670c89672f76f7", "message": "Add access control validator for AWS prod zones.\n\n- Read + write required for every deployment.", "committedDate": "2020-03-03T12:57:47Z", "type": "commit"}, {"oid": "a1cc7be7b176626719fc89b6f6a05874248eaa57", "url": "https://github.com/vespa-engine/vespa/commit/a1cc7be7b176626719fc89b6f6a05874248eaa57", "message": "Avoid code duplication by using abstract base class for tests.", "committedDate": "2020-03-03T13:30:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNTQwOQ==", "url": "https://github.com/vespa-engine/vespa/pull/12413#discussion_r387025409", "bodyText": "Missing copyright header", "author": "bjorncs", "createdAt": "2020-03-03T13:42:20Z", "path": "config-model/src/main/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.yahoo.vespa.model.application.validation;", "originalCommit": "c3ce97f55e6ed566e63f7b623c670c89672f76f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15c2261f308fb5de3200c6197450dbb325117d36", "chunk": "diff --git a/config-model/src/main/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidator.java b/config-model/src/main/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidator.java\nindex b5eaa36a21..631ab0e264 100644\n--- a/config-model/src/main/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidator.java\n+++ b/config-model/src/main/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidator.java\n\n@@ -1,3 +1,4 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n package com.yahoo.vespa.model.application.validation;\n \n import com.yahoo.config.application.api.ValidationId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNTQ3NQ==", "url": "https://github.com/vespa-engine/vespa/pull/12413#discussion_r387025475", "bodyText": "Missing copyright header", "author": "bjorncs", "createdAt": "2020-03-03T13:42:25Z", "path": "config-model/src/test/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidatorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.yahoo.vespa.model.application.validation;", "originalCommit": "c3ce97f55e6ed566e63f7b623c670c89672f76f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15c2261f308fb5de3200c6197450dbb325117d36", "chunk": "diff --git a/config-model/src/test/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidatorTest.java b/config-model/src/test/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidatorTest.java\nindex 547af9345e..4eb69ec405 100644\n--- a/config-model/src/test/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidatorTest.java\n+++ b/config-model/src/test/java/com/yahoo/vespa/model/application/validation/AwsAccessControlValidatorTest.java\n\n@@ -1,174 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n package com.yahoo.vespa.model.application.validation;\n \n-import com.yahoo.config.application.api.ApplicationPackage;\n-import com.yahoo.config.model.NullConfigModelRegistry;\n-import com.yahoo.config.model.deploy.DeployState;\n-import com.yahoo.config.model.deploy.TestProperties;\n-import com.yahoo.config.model.test.MockApplicationPackage;\n import com.yahoo.config.provision.CloudName;\n import com.yahoo.config.provision.Environment;\n import com.yahoo.config.provision.RegionName;\n import com.yahoo.config.provision.SystemName;\n import com.yahoo.config.provision.Zone;\n-import com.yahoo.vespa.model.VespaModel;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.xml.sax.SAXException;\n+import org.junit.Before;\n \n-import java.io.IOException;\n-import java.time.Instant;\n-import java.time.LocalDate;\n-import java.time.ZoneOffset;\n-import java.time.format.DateTimeFormatter;\n-\n-import static com.yahoo.config.model.test.TestUtil.joinLines;\n-import static com.yahoo.config.provision.Environment.prod;\n import static com.yahoo.vespa.model.application.validation.AwsAccessControlValidator.AWS_CLOUD_NAME;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n \n /**\n  * @author gjoranv\n  */\n-public class AwsAccessControlValidatorTest {\n-\n-    @Rule\n-    public final ExpectedException exceptionRule = ExpectedException.none();\n-\n-    private static String servicesXml(boolean addHandler, boolean protection) {\n-        return joinLines(\"<services version='1.0'>\",\n-                         \"  <container id='default' version='1.0'>\",\n-                         addHandler ? httpHandlerXml : \"\",\n-                         \"    <http>\",\n-                         \"      <filtering>\",\n-                         \"        <access-control domain='foo' read='\" + protection + \"' write='\" + protection + \"' />\",\n-                         \"      </filtering>\",\n-                         \"    </http>\",\n-                         \"  </container>\",\n-                         \"</services>\");\n-    }\n-\n-    private static final String httpHandlerXml =\n-            joinLines(\"    <handler id='foo'>\",\n-                      \"      <binding>http://foo/bar</binding>\",\n-                      \"    </handler>\");\n-\n-    @Test\n-    public void cluster_with_protection_passes_validation() throws IOException, SAXException {\n-        DeployState deployState = deployState(servicesXml(true, true));\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void cluster_with_no_handlers_passes_validation_without_protection() throws IOException, SAXException{\n-        DeployState deployState = deployState(servicesXml(false, false));\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void cluster_without_custom_components_passes_validation_without_protection() throws IOException, SAXException{\n-        String servicesXml = joinLines(\"<services version='1.0'>\",\n-                                       \"  <container id='default' version='1.0' />\",\n-                                       \"</services>\");\n-        DeployState deployState = deployState(servicesXml);\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void cluster_with_handler_fails_validation_without_protection() throws IOException, SAXException{\n-        exceptionRule.expect(IllegalArgumentException.class);\n-        exceptionRule.expectMessage(\n-                \"Access-control must be enabled for read/write operations to container clusters in AWS production zones: [default]\");\n-\n-        DeployState deployState = deployState(servicesXml(true, false));\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void no_http_element_has_same_effect_as_no_write_protection() throws IOException, SAXException{\n-        exceptionRule.expect(IllegalArgumentException.class);\n-        exceptionRule.expectMessage(\n-                \"Access-control must be enabled for read/write operations to container clusters in AWS production zones: [default]\");\n-\n-        String servicesXml = joinLines(\"<services version='1.0'>\",\n-                                       \"  <container id='default' version='1.0'>\",\n-                                       httpHandlerXml,\n-                                       \"  </container>\",\n-                                       \"</services>\");\n-        DeployState deployState = deployState(servicesXml);\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void cluster_with_mbus_handler_passes_validation_without_write_protection() throws IOException, SAXException{\n-        String servicesXml = joinLines(\"<services version='1.0'>\",\n-                                       \"  <container id='default' version='1.0'>\",\n-                                       \"    <handler id='foo'>\",\n-                                       \"      <binding>mbus://*/foo</binding>\",\n-                                       \"    </handler>\",\n-                                       \"  </container>\",\n-                                       \"</services>\");\n-        DeployState deployState = deployState(servicesXml);\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void write_protection_is_not_required_for_non_default_application_type() throws IOException, SAXException{\n-        String servicesXml = joinLines(\"<services version='1.0' application-type='hosted-infrastructure'>\",\n-                                       \"  <container id='default' version='1.0'>\",\n-                                       httpHandlerXml,\n-                                       \"  </container>\",\n-                                       \"</services>\");\n-        DeployState deployState = deployState(servicesXml);\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    @Test\n-    public void write_protection_is_not_required_with_validation_override() throws IOException, SAXException{\n-        DeployState deployState = deployState(servicesXml(true, false),\n-                                              \"<validation-overrides><allow until='2000-01-30'>access-control</allow></validation-overrides>\",\n-                                              LocalDate.parse(\"2000-01-01\", DateTimeFormatter.ISO_DATE).atStartOfDay().atZone(ZoneOffset.UTC).toInstant());\n-        VespaModel model = new VespaModel(new NullConfigModelRegistry(), deployState);\n-\n-        new AwsAccessControlValidator().validate(model, deployState);\n-    }\n-\n-    private static DeployState deployState(String servicesXml) {\n-        return deployState(servicesXml, \"<validation-overrides></validation-overrides>\", Instant.now());\n-    }\n-\n-    private static DeployState deployState(String servicesXml, String validationOverrides, Instant now) {\n-        ApplicationPackage app = new MockApplicationPackage.Builder()\n-                .withServices(servicesXml)\n-                .withValidationOverrides(validationOverrides)\n-                .build();\n-\n-        DeployState.Builder builder = new DeployState.Builder()\n-                .applicationPackage(app)\n-                .zone(new Zone(CloudName.from(AWS_CLOUD_NAME), SystemName.main, Environment.prod, RegionName.from(\"foo\")) )\n-                .properties(new TestProperties().setHostedVespa(true))\n-                .now(now);\n-        final DeployState deployState = builder.build();\n-\n-        assertTrue(\"Test must emulate a hosted deployment.\", deployState.isHosted());\n-        assertEquals(\"Test must emulate a prod environment.\", prod, deployState.zone().environment());\n+public class AwsAccessControlValidatorTest extends AccessControlValidatorTestBase {\n \n-        return deployState;\n+    @Before\n+    public void setup() {\n+        validator = new AwsAccessControlValidator();\n+        zone = new Zone(CloudName.from(AWS_CLOUD_NAME), SystemName.main, Environment.prod, RegionName.from(\"foo\"));\n     }\n \n }\n"}}, {"oid": "15c2261f308fb5de3200c6197450dbb325117d36", "url": "https://github.com/vespa-engine/vespa/commit/15c2261f308fb5de3200c6197450dbb325117d36", "message": "Add copyright headers", "committedDate": "2020-03-03T13:59:59Z", "type": "commit"}]}