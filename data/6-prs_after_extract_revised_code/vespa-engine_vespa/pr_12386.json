{"pr_number": 12386, "pr_title": "Only build part of application instance for host resource", "pr_createdAt": "2020-02-28T23:03:45Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12386", "timeline": [{"oid": "e4a06ace71acac5aa1e18176f7253649883fbaed", "url": "https://github.com/vespa-engine/vespa/commit/e4a06ace71acac5aa1e18176f7253649883fbaed", "message": "Moved to more specific methods on ServiceMonitor", "committedDate": "2020-02-28T16:49:28Z", "type": "commit"}, {"oid": "7d515c403035aeef430507acb6a166b6cfdba9ee", "url": "https://github.com/vespa-engine/vespa/commit/7d515c403035aeef430507acb6a166b6cfdba9ee", "message": "Add host indices to duper model", "committedDate": "2020-02-28T21:26:39Z", "type": "commit"}, {"oid": "159a116ae750968719de8a63052431ea0de11a31", "url": "https://github.com/vespa-engine/vespa/commit/159a116ae750968719de8a63052431ea0de11a31", "message": "Only build part of application instance for host resource", "committedDate": "2020-02-28T22:34:16Z", "type": "commit"}, {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877", "url": "https://github.com/vespa-engine/vespa/commit/801dd522bc2c38a35da62f3d5798b5acc4235877", "message": "Log and forward duper model completion", "committedDate": "2020-02-29T00:10:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg==", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386032636", "bodyText": "Most of the time oldHostnames and hostnames will be equal, maybe consider adding optimization to skip all that removal and addition if that is the case?", "author": "freva", "createdAt": "2020-02-29T14:45:02Z", "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "diffHunk": "@@ -20,37 +25,90 @@\n public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n-    private final Map<ApplicationId, ApplicationInfo> applications = new TreeMap<>();\n+    private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n+    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n+\n     private final List<DuperModelListener> listeners = new ArrayList<>();\n     private boolean isComplete = false;\n \n     public void registerListener(DuperModelListener listener) {\n-        applications.values().forEach(listener::applicationActivated);\n+        applicationsById.values().forEach(listener::applicationActivated);\n         listeners.add(listener);\n     }\n \n-    public void setCompleteness(boolean isComplete) { this.isComplete = isComplete; }\n+    void setComplete() {\n+        if (!isComplete) {\n+            logger.log(LogLevel.INFO, \"Bootstrap done - duper model is complete\");\n+            isComplete = true;\n+\n+            listeners.forEach(DuperModelListener::bootstrapComplete);\n+        }\n+    }\n+\n     public boolean isComplete() { return isComplete; }\n \n+    public int numberOfApplications() {\n+        return applicationsById.size();\n+    }\n+\n+    public int numberOfHosts() {\n+        return applicationsByHostname.size();\n+    }\n+\n     public boolean contains(ApplicationId applicationId) {\n-        return applications.containsKey(applicationId);\n+        return applicationsById.containsKey(applicationId);\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(ApplicationId applicationId) {\n+        return Optional.ofNullable(applicationsById.get(applicationId));\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(HostName hostName) {\n+        return Optional.ofNullable(applicationsByHostname.get(hostName));\n+    }\n+\n+    public List<ApplicationInfo> getApplicationInfos() {\n+        return List.copyOf(applicationsById.values());\n     }\n \n     public void add(ApplicationInfo applicationInfo) {\n-        applications.put(applicationInfo.getApplicationId(), applicationInfo);\n-        logger.log(LogLevel.DEBUG, \"Added \" + applicationInfo.getApplicationId());\n+        ApplicationInfo oldApplicationInfo = applicationsById.put(applicationInfo.getApplicationId(), applicationInfo);\n+\n+        final String logPrefix;\n+        if (oldApplicationInfo == null) {\n+            logPrefix = isComplete ? \"New application \" : \"Bootstrapped application \";\n+        } else {\n+            logPrefix = isComplete ? \"Reactivated application \" : \"Rebootstrapped application \";\n+        }\n+        logger.log(LogLevel.INFO, logPrefix + applicationInfo.getApplicationId());\n+\n+        Set<HostName> oldHostnames = hostnamesById.remove(applicationInfo.getApplicationId());", "originalCommit": "801dd522bc2c38a35da62f3d5798b5acc4235877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTcxNQ==", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386061715", "bodyText": "Something like the following?\n        HashSet<HostName> hostnames = hostnamesById\n                .computeIfAbsent(applicationInfo.getApplicationId(), k -> new HashSet<>());\n\n        Set<HostName> newHostnames;\n        Set<HostName> removedHostnames;\n        {\n            newHostnames = applicationInfo.getModel().getHosts().stream()\n                    .map(HostInfo::getHostname)\n                    .map(HostName::from)\n                    .collect(Collectors.toCollection(HashSet::new));\n\n            removedHostnames = new HashSet<>(hostnames);\n            removedHostnames.removeAll(newHostnames);\n\n            newHostnames.removeAll(hostnames);\n        }\n\n        // These corrects applicationById\n        hostnames.removeAll(removedHostnames);\n        hostnames.addAll(newHostnames);\n\n        // These corrects applicationByHostname\n        removedHostnames.forEach(applicationsByHostname::remove);\n        newHostnames.forEach(hostname -> applicationsByHostname.put(hostname, applicationInfo));\n\nThis will create more objects (1 additional HashSet) and will have one additional O(n) operation (removeAll) compared to current.\nIn addition, I would have to make applicationsByHostname map to ApplicationId instead of ApplicationInfo, otherwise unchanged hostnames may point to old ApplicationInfo. Which would incur a double map lookup to get ApplicationInfo instead of a single lookup.", "author": "hakonhall", "createdAt": "2020-02-29T23:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDkxOA==", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386090918", "bodyText": "No, I was thinking something like this:\n        Set<HostName> oldHostnames = hostnamesById.get(applicationInfo.getApplicationId());\n        Set<HostName> hostnames = applicationInfo.getModel().getHosts().stream()\n                .map(HostInfo::getHostname)\n                .map(HostName::from)\n                .collect(Collectors.toSet());\n\n        if (!Objects.equals(oldHostnames, hostnames)) {\n            if (oldHostnames != null) {\n                oldHostnames.forEach(applicationsByHostname::remove);\n            }\n\n            hostnamesById.put(applicationInfo.getApplicationId(), hostnames);\n            hostnames.forEach(hostname -> applicationsByHostname.put(hostname, applicationInfo));\n        }", "author": "freva", "createdAt": "2020-03-01T09:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExMDE2OA==", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386110168", "bodyText": "I now have a version I think is just as effective in the no-change case, but also performs well in the other cases. I have also added a log warning on duplicate host allocation.", "author": "hakonhall", "createdAt": "2020-03-01T13:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "496054ead605206c528eab589eca6f4e6f9d4f29", "chunk": "diff --git a/service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java b/service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java\nindex ca4a1e7f9c..a99c7b4219 100644\n--- a/service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java\n+++ b/service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java\n\n@@ -26,7 +26,7 @@ public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n     private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n-    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<HostName, ApplicationId> idsByHostname = new HashMap<>();\n     private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n \n     private final List<DuperModelListener> listeners = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjg1NA==", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386032854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();\n          \n          \n            \n                private static final ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();", "author": "freva", "createdAt": "2020-02-29T14:48:31Z", "path": "service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java", "diffHunk": "@@ -37,23 +43,73 @@\n \n     private final ApplicationInfo applicationInfo;\n     private final Zone zone;\n-    private ApplicationId configServerApplicationId;\n+\n+    // This is cheating a bit, but we don't expect DuperModel's config server application ID to be different.\n+    // We do this to avoid passing through the ID through multiple levels.\n+    private static ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();", "originalCommit": "801dd522bc2c38a35da62f3d5798b5acc4235877", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aae80e66af1e581b3bd3bdf67a48fb57bf8ac8f4", "chunk": "diff --git a/service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java b/service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java\nindex 412c47bee9..0116b992e2 100644\n--- a/service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java\n+++ b/service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java\n\n@@ -46,7 +46,7 @@ public class ApplicationInstanceGenerator {\n \n     // This is cheating a bit, but we don't expect DuperModel's config server application ID to be different.\n     // We do this to avoid passing through the ID through multiple levels.\n-    private static ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();\n+    private static final ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();\n \n     public ApplicationInstanceGenerator(ApplicationInfo applicationInfo, Zone zone) {\n         this.applicationInfo = applicationInfo;\n"}}, {"oid": "aae80e66af1e581b3bd3bdf67a48fb57bf8ac8f4", "url": "https://github.com/vespa-engine/vespa/commit/aae80e66af1e581b3bd3bdf67a48fb57bf8ac8f4", "message": "Update service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java\n\nCo-Authored-By: Valerij Fredriksen <freva@users.noreply.github.com>", "committedDate": "2020-02-29T21:46:08Z", "type": "commit"}, {"oid": "496054ead605206c528eab589eca6f4e6f9d4f29", "url": "https://github.com/vespa-engine/vespa/commit/496054ead605206c528eab589eca6f4e6f9d4f29", "message": "More effective duper model update on activation", "committedDate": "2020-03-01T13:56:11Z", "type": "commit"}, {"oid": "56e55e53e7b82f62116eb1286e60e855c6e47f90", "url": "https://github.com/vespa-engine/vespa/commit/56e55e53e7b82f62116eb1286e60e855c6e47f90", "message": "Get previous hostname set", "committedDate": "2020-03-01T14:10:19Z", "type": "commit"}]}