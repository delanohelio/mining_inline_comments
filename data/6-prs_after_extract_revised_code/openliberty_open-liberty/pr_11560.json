{"pr_number": 11560, "pr_title": "Initial check in of MessageImpl refactoring", "pr_createdAt": "2020-03-31T15:57:27Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11560", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzODk2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401938964", "bodyText": "Looks like getHttpRequestMethod() should be added here.", "author": "jhanders34", "createdAt": "2020-04-01T22:08:45Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.hc.3.2/src/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java", "diffHunk": "@@ -210,7 +211,7 @@ protected void setupConnection(Message message, Address address, HTTPClientPolic\n             (String)message.get(Message.HTTP_REQUEST_METHOD);", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.hc.3.2/src/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.hc.3.2/src/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java\nindex 9acdfdf5c2..1dd26b0876 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.hc.3.2/src/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.hc.3.2/src/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java\n\n@@ -207,8 +207,8 @@ public class AsyncHTTPConduit extends URLConnectionHTTPConduit {\n             LOG.fine(\"Asynchronous connection to \" + uri.toString() + \" has been set up\");\n         }\n         message.put(\"http.scheme\", uri.getScheme());\n-        String httpRequestMethod =\n-            (String)message.get(Message.HTTP_REQUEST_METHOD);\n+        //Liberty code change start\n+        String httpRequestMethod = (String) ((MessageImpl) message).getHttpRequestMethod();\n         if (httpRequestMethod == null) {\n             httpRequestMethod = \"POST\";\n             ((MessageImpl) message).setHttpRequestMethod(httpRequestMethod);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzOTU3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401939571", "bodyText": "General comment that will apply to all files:\n// Liberty Change Start\n// Liberty Change End\nchange comments are missing from all the files.", "author": "jhanders34", "createdAt": "2020-04-01T22:10:02Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/attachment/AttachmentDeserializer.java", "diffHunk": "@@ -132,7 +133,7 @@ public void initializeAttachments() throws IOException {\n     }\n \n     protected void initializeRootMessage() throws IOException {\n-        contentType = (String) message.get(Message.CONTENT_TYPE);\n+        contentType = (String) ((MessageImpl) message).getContentType();", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwNjQ4NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403306484", "bodyText": "Marking resolved.  I commented later about at least one I still saw that didn't have the change comments.  I still need to review the files that are new again to look at the code change comments on this files.", "author": "jhanders34", "createdAt": "2020-04-03T20:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkzOTU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/attachment/AttachmentDeserializer.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/attachment/AttachmentDeserializer.java\nindex a946041c4b..fa12e0097e 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/attachment/AttachmentDeserializer.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/attachment/AttachmentDeserializer.java\n\n@@ -133,7 +133,9 @@ public class AttachmentDeserializer {\n     }\n \n     protected void initializeRootMessage() throws IOException {\n+        //Liberty code change start\n         contentType = (String) ((MessageImpl) message).getContentType();\n+        //Liberty code change end\n \n         if (contentType == null) {\n             throw new IllegalStateException(\"Content-Type can not be empty!\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MDAyNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401940025", "bodyText": "This file looks like it should not be changed with this PR.", "author": "jhanders34", "createdAt": "2020-04-01T22:11:09Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/StringMapImpl.java", "diffHunk": "@@ -42,7 +42,6 @@ public StringMapImpl() {}\n     public StringMapImpl(Map<String, Object> i) {\n         super(i);\n     }", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/StringMapImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/StringMapImpl.java\nindex 7d6dc8b18b..3b7efdc0ca 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/StringMapImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/StringMapImpl.java\n\n@@ -42,6 +42,7 @@ public class StringMapImpl\n     public StringMapImpl(Map<String, Object> i) {\n         super(i);\n     }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T get(Class<T> key) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MDYxMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401940611", "bodyText": "This change should not be needed and this whole file can be removed from being changed in this PR.", "author": "jhanders34", "createdAt": "2020-04-01T22:12:33Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/ReadHeadersInterceptor.java", "diffHunk": "@@ -256,7 +258,7 @@ public void handleMessage(SoapMessage message) {\n                             } else {\n                                 dataBinding = p.getDataBinding();\n                                 DataReader<Node> dataReader = dataBinding.createReader(Node.class);\n-                                dataReader.setAttachments(message.getAttachments());\n+                                dataReader.setAttachments((Collection<Attachment>)message.getAttachments());", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/ReadHeadersInterceptor.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/ReadHeadersInterceptor.java\nindex 75f0ba0b01..3426d880eb 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/ReadHeadersInterceptor.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/ReadHeadersInterceptor.java\n\n@@ -258,7 +256,7 @@ public class ReadHeadersInterceptor extends AbstractSoapInterceptor {\n                             } else {\n                                 dataBinding = p.getDataBinding();\n                                 DataReader<Node> dataReader = dataBinding.createReader(Node.class);\n-                                dataReader.setAttachments((Collection<Attachment>)message.getAttachments());\n+                                dataReader.setAttachments(message.getAttachments());\n                                 dataReader.setProperty(DataReader.ENDPOINT, message.getExchange().getEndpoint());\n                                 dataReader.setProperty(Message.class.getName(), message);\n                                 obj = dataReader.read(hel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MDc2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401940767", "bodyText": "This change should not be needed and this whole file can be removed from being changed in this PR.", "author": "jhanders34", "createdAt": "2020-04-01T22:12:57Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java", "diffHunk": "@@ -279,7 +281,7 @@ private boolean handleHeaderPart(boolean preexistingHeaders, SoapMessage message\n             throw new Fault(new org.apache.cxf.common.i18n.Message(\"NO_DATAWRITER\", BUNDLE, service\n                 .getName()));\n         }\n-        dataWriter.setAttachments(message.getAttachments());\n+        dataWriter.setAttachments((Collection<Attachment>)message.getAttachments());", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java\nindex eff3923b11..4de835046d 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.bindings.soap.3.2/src/org/apache/cxf/binding/soap/interceptor/SoapOutInterceptor.java\n\n@@ -281,7 +279,7 @@ public class SoapOutInterceptor extends AbstractSoapInterceptor {\n             throw new Fault(new org.apache.cxf.common.i18n.Message(\"NO_DATAWRITER\", BUNDLE, service\n                 .getName()));\n         }\n-        dataWriter.setAttachments((Collection<Attachment>)message.getAttachments());\n+        dataWriter.setAttachments(message.getAttachments());\n         setDataWriterValidation(service, message, dataWriter);\n         return dataWriter;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NzcyNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401947726", "bodyText": "Should remove these commented out System.out.println's from the code.", "author": "jhanders34", "createdAt": "2020-04-01T22:29:44Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -184,7 +1608,217 @@ public void setInterceptorChain(InterceptorChain ic) {\n     \n     @Override\n     public Object getContextualProperty(String key) {\n-        Object o = getOrDefault(key, NOT_FOUND);\n+        //System.out.println(\"***JTD: getContextualProperty \" + key);", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 330532e66b..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -1567,261 +317,54 @@ public class MessageImpl extends StringMapImpl implements Message {\n                 }\n                 contents[index] = null;\n                 contents[index + 1] = null;\n-                return;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Set<Class<?>> getContentFormats() {\n-\n-        Set<Class<?>> c = new HashSet<>();\n-        for (int x = 0; x < index; x += 2) {\n-            c.add((Class<?>) contents[x]);\n-        }\n-        return c;\n-    }\n-\n-    public void setDestination(Destination d) {\n-        destination = d;\n-    }\n-\n-    @Override\n-    public void setExchange(Exchange e) {\n-        this.exchange = e;\n-    }\n-\n-    @Override\n-    public void setId(String i) {\n-        this.id = i;\n-    }\n-\n-    @Override\n-    public void setInterceptorChain(InterceptorChain ic) {\n-        this.interceptorChain = ic;\n-    }\n-\n-    //Liberty code change start\n-    // Since these maps can have null value, use the getOrDefault API\n-    // to prevent calling get twice under the covers\n-    private static final Object NOT_FOUND = new Object();\n-    \n-    @Override\n-    public Object getContextualProperty(String key) {\n-        //System.out.println(\"***JTD: getContextualProperty \" + key);\n-        Object o = null;\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                if (protoHeaders != NOT_FOUND) {\n-                    return protoHeaders;\n-                }\n-            } else if (key == CONTENT_TYPE) {\n-                if (contentType != NOT_FOUND) {\n-                    return contentType;\n-                }\n-            } else if (key == QUERY_STRING) {\n-                if (queryString != NOT_FOUND) {\n-                    return queryString;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                if (httpRequest != NOT_FOUND) {\n-                    return httpRequest;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                if (httpResponse != NOT_FOUND) {\n-                    return httpResponse;\n-                }\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                if (pathToMatchSlash != NOT_FOUND) {\n-                    return pathToMatchSlash;\n-                }\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                if (httpRequestMethod != NOT_FOUND) {\n-                    return httpRequestMethod;\n-                }\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                if (interceptorProviders != NOT_FOUND) {\n-                    return interceptorProviders;\n-                }\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                if (templateParameters != NOT_FOUND) {\n-                    return templateParameters;\n-                }\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                if (accept != NOT_FOUND) {\n-                    return accept;\n-                }\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                if (continuationProvider != NOT_FOUND) {\n-                    return continuationProvider;\n-                }\n-            } else if (key == OP_RES_INFO_STACK) {\n-                if (opStack != NOT_FOUND) {\n-                    return opStack;\n-                }\n-            } else if (key == DESTINATION) {\n-                if (destination != NOT_FOUND) {\n-                    return destination;\n-                }\n-            } else if (key == WSDL_DESCRIPTION) {\n-                if (wsdlDescription != NOT_FOUND) {\n-                    return wsdlDescription;\n-                }\n-            } else if (key == WSDL_INTERFACE) {\n-                if (wsdlInterface != NOT_FOUND) {\n-                    return wsdlInterface;\n-                }\n-            } else if (key == WSDL_OPERATION) {\n-                if (wsdlOperation != NOT_FOUND) {\n-                    return wsdlOperation;\n-                }\n-            } else if (key == WSDL_PORT) {\n-                if (wsdlPort != NOT_FOUND) {\n-                    return wsdlPort;\n-                }\n-            } else if (key == WSDL_SERVICE) {\n-                if (wsdlService != NOT_FOUND) {\n-                    return wsdlService;\n-                }\n-            } else if (key == REQUEST_URL) {\n-                if (requestUrl != NOT_FOUND) {\n-                    return requestUrl;\n-                }\n-            } else if (key == REQUEST_URI) {\n-                if (requestUri != NOT_FOUND) {\n-                    return requestUri;\n-                }\n-            } else if (key == PATH_INFO) {\n-                if (pathInfo != NOT_FOUND) {\n-                    return pathInfo;\n-                }\n-            } else if (key == BASE_PATH) {\n-                if (basePath != NOT_FOUND) {\n-                    return basePath;\n-                }\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                if (fixedParamOrder != NOT_FOUND) {\n-                    return fixedParamOrder;\n-                }\n-            } else if (key == IN_INTERCEPTORS) {\n-                if (inInterceptors != NOT_FOUND) {\n-                    return inInterceptors;\n-                }\n-            } else if (key == OUT_INTERCEPTORS) {\n-                if (outInterceptors != NOT_FOUND) {\n-                    return outInterceptors;\n-                }\n-            } else if (key == RESPONSE_CODE) {\n-                if (responseCode != NOT_FOUND) {\n-                    return responseCode;\n-                }\n-            } else if (key == ATTACHMENTS) {\n-                if (attachments != NOT_FOUND) {\n-                    return attachments;\n-                }\n-            } else if (key == ENCODING) {\n-                if (encoding != NOT_FOUND) {\n-                    return encoding;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                if (httpContext != NOT_FOUND) {\n-                    return httpContext;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                if (httpConfig != NOT_FOUND) {\n-                    return httpConfig;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                if (httpContextMatchStrategy != NOT_FOUND) {\n-                    return httpContextMatchStrategy;\n-                }\n-            } else if (key == HTTP_BASE_PATH) {\n-                if (httpBasePath != NOT_FOUND) {\n-                    return httpBasePath;\n-                }\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                if (asyncPostDispatch != NOT_FOUND) {\n-                    return asyncPostDispatch;\n-                }\n-            } else if (key == SECURITY_CONTEXT) {\n-                if (securityContext != NOT_FOUND) {\n-                    return securityContext;\n-                }\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                if (authorizationPolicy != NOT_FOUND) {\n-                    return authorizationPolicy;\n-                }\n-            } else if (key == CERT_CONSTRAINTS) {\n-                if (certConstraints != NOT_FOUND) {\n-                    return certConstraints;\n-                }\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                if (serviceRedirection != NOT_FOUND) {\n-                    return serviceRedirection;\n-                }\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                if (httpServletResponse != NOT_FOUND) {\n-                    return httpServletResponse;\n-                }\n-            } else if (key == RESOURCE_METHOD) {\n-                if (resourceMethod != NOT_FOUND) {\n-                    return resourceMethod;\n-                }\n-            } else if (key == ONE_WAY_REQUEST) {\n-                if (oneWayRequest != NOT_FOUND) {\n-                    return oneWayRequest;\n-                }\n-            } else if (key == ASYNC_RESPONSE) {\n-                if (asyncResponse != NOT_FOUND) {\n-                    return asyncResponse;\n-                }\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                if (threadContextSwitched != NOT_FOUND) {\n-                    return threadContextSwitched;\n-                }\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                if (cacheInputProperty != NOT_FOUND) {\n-                    return cacheInputProperty;\n-                }\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                if (previousMessage != NOT_FOUND) {\n-                    return previousMessage;\n-                }\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                if (responseHeadersCopied != NOT_FOUND) {\n-                    return responseHeadersCopied;\n-                }\n-            } else if (key == SSE_EVENT_SINK) {\n-                if (sseEventSink != NOT_FOUND) {\n-                    return sseEventSink;\n-                }\n-            } else if (key == REQUESTOR_ROLE) {\n-                if (requestorRole != NOT_FOUND) {\n-                    return requestorRole;\n-                }\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                if (partialResponse != NOT_FOUND) {\n-                    return partialResponse;\n-                }\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                if (emptyPartialResponse != NOT_FOUND) {\n-                    return emptyPartialResponse;\n-                }\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                if (endpointAddress != NOT_FOUND) {\n-                    return endpointAddress;\n-                }\n-            } else if (key == INBOUND_MESSAGE) {\n-                if (inboundMessage != NOT_FOUND) {\n-                    return inboundMessage;\n-                }\n+                return;\n             }\n         }\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getContentFormats() {\n+\n+        Set<Class<?>> c = new HashSet<>();\n+        for (int x = 0; x < index; x += 2) {\n+            c.add((Class<?>) contents[x]);\n+        }\n+        return c;\n+    }\n+\n+    public void setDestination(Destination d) {\n+        //Liberty code change start\n+    \tpropertyValues[destination] = d;\n+        //Liberty code change end\n+    }\n+\n+    @Override\n+    public void setExchange(Exchange e) {\n+        this.exchange = e;\n+    }\n+\n+    @Override\n+    public void setId(String i) {\n+        this.id = i;\n+    }\n+\n+    @Override\n+    public void setInterceptorChain(InterceptorChain ic) {\n+        this.interceptorChain = ic;\n+    }\n \n-        o = getOrDefault(key, NOT_FOUND);\n+    //Liberty code change start\n+    // Since these maps can have null value, use the getOrDefault API\n+    // to prevent calling get twice under the covers\n+    @Override\n+    public Object getContextualProperty(String key) {\n+        //Liberty code change start\n+        Object o = getOrDefault(key, NOT_FOUND);\n         if (o != NOT_FOUND) {\n             return o;\n         }\n+        //Liberty code change end\n+\n         return getFromExchange(key);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0ODcxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401948712", "bodyText": "The cast here should not be needed.", "author": "jhanders34", "createdAt": "2020-04-01T22:32:16Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java", "diffHunk": "@@ -302,7 +302,7 @@ private MultipartBody createAttachments(String propertyName) {\n         }\n \n \n-        Collection<org.apache.cxf.message.Attachment> childAttachments = inMessage.getAttachments();\n+        Collection<org.apache.cxf.message.Attachment> childAttachments = (Collection<org.apache.cxf.message.Attachment>)inMessage.getAttachments();", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java\nindex c4f7f44f54..76cc74345f 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java\n\n@@ -301,8 +301,7 @@ public class MessageContextImpl implements MessageContext {\n             throw ExceptionUtils.toInternalServerErrorException(ex, null);\n         }\n \n-\n-        Collection<org.apache.cxf.message.Attachment> childAttachments = (Collection<org.apache.cxf.message.Attachment>)inMessage.getAttachments();\n+        Collection<org.apache.cxf.message.Attachment> childAttachments = inMessage.getAttachments();\n         if (childAttachments == null) {\n             childAttachments = Collections.emptyList();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDcyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401950720", "bodyText": "should this call the new getFromHeaders method instead of getProtocolHeader?", "author": "jhanders34", "createdAt": "2020-04-01T22:37:32Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java", "diffHunk": "@@ -124,23 +124,27 @@ private void processRequest(Message message, Exchange exchange) throws IOExcepti\n             }\n         }\n         // HTTP method\n-        String httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,\n+        String httpMethod = ((MessageImpl) message).getHttpRequestMethod();\n+        if (httpMethod == null) {\n+            httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\nindex 90905ee6bd..1cc6a8ebcb 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n\n@@ -124,16 +122,18 @@ public class JAXRSInInterceptor extends AbstractPhaseInterceptor<Message> {\n             }\n         }\n         // HTTP method\n+        //Liberty code change start\n         String httpMethod = ((MessageImpl) message).getHttpRequestMethod();\n         if (httpMethod == null) {\n-            httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,\n+            httpMethod = HttpUtils.getFromHeaders(message, Message.HTTP_REQUEST_METHOD,\n                                                         HttpMethod.POST, true);\n         }\n+        //Liberty code change end\n         // Path to match\n         String rawPath = HttpUtils.getPathToMatch(message, true);\n \n-        //Map<String, List<String>> protocolHeaders = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n         @SuppressWarnings(\"unchecked\")\n+        //Liberty code change start\n         Map<String, List<String>> protocolHeaders = ((MessageImpl) message).getProtocolHeaders();\n \n         // Content-Type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MDkwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401950901", "bodyText": "No reason to leave the commented out code in.", "author": "jhanders34", "createdAt": "2020-04-01T22:38:06Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java", "diffHunk": "@@ -124,23 +124,27 @@ private void processRequest(Message message, Exchange exchange) throws IOExcepti\n             }\n         }\n         // HTTP method\n-        String httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,\n+        String httpMethod = ((MessageImpl) message).getHttpRequestMethod();\n+        if (httpMethod == null) {\n+            httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,\n                                                         HttpMethod.POST, true);\n-\n+        }\n         // Path to match\n         String rawPath = HttpUtils.getPathToMatch(message, true);\n \n-        Map<String, List<String>> protocolHeaders = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n+        //Map<String, List<String>> protocolHeaders = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\nindex 90905ee6bd..1cc6a8ebcb 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n\n@@ -124,16 +122,18 @@ public class JAXRSInInterceptor extends AbstractPhaseInterceptor<Message> {\n             }\n         }\n         // HTTP method\n+        //Liberty code change start\n         String httpMethod = ((MessageImpl) message).getHttpRequestMethod();\n         if (httpMethod == null) {\n-            httpMethod = HttpUtils.getProtocolHeader(message, Message.HTTP_REQUEST_METHOD,\n+            httpMethod = HttpUtils.getFromHeaders(message, Message.HTTP_REQUEST_METHOD,\n                                                         HttpMethod.POST, true);\n         }\n+        //Liberty code change end\n         // Path to match\n         String rawPath = HttpUtils.getPathToMatch(message, true);\n \n-        //Map<String, List<String>> protocolHeaders = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n         @SuppressWarnings(\"unchecked\")\n+        //Liberty code change start\n         Map<String, List<String>> protocolHeaders = ((MessageImpl) message).getProtocolHeaders();\n \n         // Content-Type\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2MDk2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401960965", "bodyText": "This cast should not be needed.", "author": "jhanders34", "createdAt": "2020-04-01T23:06:03Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java", "diffHunk": "@@ -597,10 +595,10 @@ private void cacheInput(Message outMessage) {\n         if (inMessage == null) {\n             return;\n         }\n-        Object o = inMessage.get(\"cxf.io.cacheinput\");\n+        Object o = ((MessageImpl) inMessage).getCacheInputProperty();\n         DelegatingInputStream in = inMessage.getContent(DelegatingInputStream.class);\n         if (PropertyUtils.isTrue(o)) {\n-            Collection<Attachment> atts = inMessage.getAttachments();\n+            Collection<Attachment> atts = (Collection<Attachment>) inMessage.getAttachments();", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\nindex c90f6ea25a..67e65c3d7c 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n\n@@ -595,10 +620,12 @@ public abstract class AbstractHTTPDestination\n         if (inMessage == null) {\n             return;\n         }\n+        //Liberty code change start\n         Object o = ((MessageImpl) inMessage).getCacheInputProperty();\n+        //Liberty code change end\n         DelegatingInputStream in = inMessage.getContent(DelegatingInputStream.class);\n         if (PropertyUtils.isTrue(o)) {\n-            Collection<Attachment> atts = (Collection<Attachment>) inMessage.getAttachments();\n+            Collection<Attachment> atts = inMessage.getAttachments();\n             if (atts != null) {\n                 for (Attachment a : atts) {\n                     if (a.getDataHandler().getDataSource() instanceof AttachmentDataSource) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2MjM4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r401962386", "bodyText": "Remove commented out code.  Same below.", "author": "jhanders34", "createdAt": "2020-04-01T23:10:22Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/Headers.java", "diffHunk": "@@ -264,16 +265,19 @@ public void setProxyAuthorization(String authorization) {\n      */\n     public static Map<String, List<String>> getSetProtocolHeaders(final Message message) {\n         Map<String, List<String>> headers =\n-            CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n+            //CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/Headers.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/Headers.java\nindex 426d8edcee..0dee19b159 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/Headers.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/Headers.java\n\n@@ -264,19 +266,17 @@ public class Headers {\n      * @return The PROTOCOL_HEADERS map\n      */\n     public static Map<String, List<String>> getSetProtocolHeaders(final Message message) {\n+        @SuppressWarnings(\"unchecked\")\n+        //Liberty code change start\n         Map<String, List<String>> headers =\n-            //CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n             ((MessageImpl) message).getProtocolHeaders();\n-        //Liberty code change start\n         if (null == headers) {\n             headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-            //message.put(Message.PROTOCOL_HEADERS, headers);\n             ((MessageImpl) message).setProtocolHeaders(headers);\n         } else if (headers instanceof HashMap) {\n             Map<String, List<String>> headers2\n                 = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n             headers2.putAll(headers);\n-            //message.put(Message.PROTOCOL_HEADERS, headers2);\n             ((MessageImpl) message).setProtocolHeaders(headers2);\n             headers = headers2;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NDM2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r402594362", "bodyText": "Instead of commenting out just remove it.", "author": "jhanders34", "createdAt": "2020-04-02T20:46:28Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java", "diffHunk": "@@ -37,7 +37,7 @@\n import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.common.util.PropertyUtils;\n import org.apache.cxf.endpoint.Endpoint;\n-import org.apache.cxf.helpers.CastUtils;\n+//import org.apache.cxf.helpers.CastUtils;", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\nindex 90905ee6bd..1cc6a8ebcb 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/interceptor/JAXRSInInterceptor.java\n\n@@ -37,7 +37,6 @@ import org.apache.cxf.common.i18n.BundleUtils;\n import org.apache.cxf.common.logging.LogUtils;\n import org.apache.cxf.common.util.PropertyUtils;\n import org.apache.cxf.endpoint.Endpoint;\n-//import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.interceptor.Fault;\n import org.apache.cxf.interceptor.OutgoingChainInterceptor;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMTMzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r402611334", "bodyText": "Don't leave in the commented out code.", "author": "jhanders34", "createdAt": "2020-04-02T21:38:44Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java", "diffHunk": "@@ -0,0 +1,341 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.jaxrs.impl;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.ws.rs.core.Cookie;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.jaxrs.utils.ExceptionUtils;\n+import org.apache.cxf.jaxrs.utils.HttpUtils;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.message.MessageImpl;\n+import org.apache.cxf.message.MessageUtils;\n+\n+public class HttpHeadersImpl implements HttpHeaders {\n+\n+    static final String HEADER_SPLIT_PROPERTY =\n+        \"org.apache.cxf.http.header.split\";\n+    static final String COOKIE_SEPARATOR_PROPERTY =\n+        \"org.apache.cxf.http.cookie.separator\";\n+    private static final String COOKIE_SEPARATOR_CRLF = \"crlf\";\n+    private static final String COOKIE_SEPARATOR_CRLF_EXPRESSION = \"\\r\\n\";\n+    private static final Pattern COOKIE_SEPARATOR_CRLF_PATTERN =\n+            Pattern.compile(COOKIE_SEPARATOR_CRLF_EXPRESSION);\n+    private static final String DEFAULT_SEPARATOR = \",\";\n+    private static final String DEFAULT_COOKIE_SEPARATOR = \";\";\n+    private static final String DOLLAR_CHAR = \"$\";\n+    private static final String COOKIE_VERSION_PARAM = DOLLAR_CHAR + \"Version\";\n+    private static final String COOKIE_PATH_PARAM = DOLLAR_CHAR + \"Path\";\n+    private static final String COOKIE_DOMAIN_PARAM = DOLLAR_CHAR + \"Domain\";\n+\n+    private static final String COMPLEX_HEADER_EXPRESSION =\n+        \"(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+))(;(([\\\\w]+=\\\"[^\\\"]*\\\")|([\\\\w]+=[\\\\w]+)|([\\\\w]+)))?\";\n+    private static final Pattern COMPLEX_HEADER_PATTERN =\n+        Pattern.compile(COMPLEX_HEADER_EXPRESSION);\n+    private static final String QUOTE = \"\\\"\";\n+    private static final Set<String> HEADERS_WITH_POSSIBLE_QUOTES;\n+    static {\n+        HEADERS_WITH_POSSIBLE_QUOTES = new HashSet<>();\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.CONTENT_TYPE);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.CACHE_CONTROL);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.ETAG);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.IF_MATCH);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.IF_NONE_MATCH);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.COOKIE);\n+        HEADERS_WITH_POSSIBLE_QUOTES.add(HttpHeaders.SET_COOKIE);\n+    }\n+\n+\n+    private Message message;\n+    private Map<String, List<String>> headers;\n+    public HttpHeadersImpl(Message message) {\n+        this.message = message;\n+        //this.headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java\nindex 778a8a18c1..36eaeee457 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java\n\n@@ -85,10 +85,12 @@ public class HttpHeadersImpl implements HttpHeaders {\n \n     private Message message;\n     private Map<String, List<String>> headers;\n+    @SuppressWarnings(\"unchecked\")\n     public HttpHeadersImpl(Message message) {\n         this.message = message;\n-        //this.headers = CastUtils.cast((Map<?, ?>)message.get(Message.PROTOCOL_HEADERS));\n+        //Liberty code change start\n         this.headers = ((MessageImpl) message).getProtocolHeaders();\n+        //Liberty code change end\n         if (headers == null) {\n             headers = Collections.emptyMap();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MDIzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403240233", "bodyText": "You will see why later, but should we just make this an Object[] and then have an static final int for each one of the properties for an index in that array for the property?", "author": "jhanders34", "createdAt": "2020-04-03T18:47:12Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -43,6 +53,129 @@\n     private Object[] contents = new Object[20];\n     private int index;\n \n+    private Object protoHeaders = NOT_FOUND;", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 330532e66b..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -53,57 +63,60 @@ public class MessageImpl extends StringMapImpl implements Message {\n     private Object[] contents = new Object[20];\n     private int index;\n \n-    private Object protoHeaders = NOT_FOUND;\n-    private Object opStack = NOT_FOUND;\n-    private Object contentType = NOT_FOUND;\n-    private Object destination = NOT_FOUND;\n-    private Object queryString = NOT_FOUND;\n-    private Object httpRequest = NOT_FOUND;\n-    private Object httpResponse = NOT_FOUND;\n-    private Object pathToMatchSlash = NOT_FOUND;\n-    private Object httpRequestMethod = NOT_FOUND;\n-    private Object interceptorProviders = NOT_FOUND;\n-    private Object templateParameters = NOT_FOUND;\n-    private Object accept = NOT_FOUND;\n-    private Object continuationProvider = NOT_FOUND;\n-    private Object wsdlDescription = NOT_FOUND;\n-    private Object wsdlInterface = NOT_FOUND;\n-    private Object wsdlOperation = NOT_FOUND;\n-    private Object wsdlPort = NOT_FOUND;\n-    private Object wsdlService = NOT_FOUND;\n-    private Object requestUrl = NOT_FOUND;\n-    private Object requestUri = NOT_FOUND;\n-    private Object pathInfo = NOT_FOUND;\n-    private Object basePath = NOT_FOUND;\n-    private Object fixedParamOrder = NOT_FOUND;\n-    private Object inInterceptors = NOT_FOUND;\n-    private Object outInterceptors = NOT_FOUND;\n-    private Object responseCode = NOT_FOUND;\n-    private Object attachments = NOT_FOUND;\n-    private Object encoding = NOT_FOUND;\n-    private Object httpContext = NOT_FOUND;\n-    private Object httpConfig = NOT_FOUND;\n-    private Object httpContextMatchStrategy = NOT_FOUND;\n-    private Object httpBasePath = NOT_FOUND;\n-    private Object asyncPostDispatch = NOT_FOUND;\n-    private Object securityContext = NOT_FOUND;\n-    private Object authorizationPolicy = NOT_FOUND;\n-    private Object certConstraints = NOT_FOUND;\n-    private Object serviceRedirection = NOT_FOUND;\n-    private Object httpServletResponse = NOT_FOUND;\n-    private Object resourceMethod = NOT_FOUND;\n-    private Object oneWayRequest = NOT_FOUND;\n-    private Object asyncResponse = NOT_FOUND;\n-    private Object threadContextSwitched = NOT_FOUND;\n-    private Object cacheInputProperty = NOT_FOUND;\n-    private Object previousMessage = NOT_FOUND;\n-    private Object responseHeadersCopied = NOT_FOUND;\n-    private Object sseEventSink = NOT_FOUND;\n-    private Object requestorRole = NOT_FOUND;\n-    private Object partialResponse = NOT_FOUND;\n-    private Object emptyPartialResponse = NOT_FOUND;\n-    private Object endpointAddress = NOT_FOUND;\n-    private Object inboundMessage = NOT_FOUND;\n+    //Liberty code change start\n+    private static int contentType = 0;\n+    private static int protoHeaders = 1;\n+    private static int queryString = 2;\n+    private static int httpRequest = 3;\n+    private static int httpResponse = 4;\n+    private static int pathToMatchSlash = 5;\n+    private static int httpRequestMethod = 6;\n+    private static int interceptorProviders = 7;\n+    private static int templateParameters = 8;\n+    private static int accept = 9;\n+    private static int continuationProvider = 10;\n+    private static int destination = 11;\n+    private static int opStack = 12;\n+    private static int wsdlDescription = 13;\n+    private static int wsdlInterface = 14;\n+    private static int wsdlOperation = 15;\n+    private static int wsdlPort = 16;\n+    private static int wsdlService = 17;\n+    private static int requestUrl = 18;\n+    private static int requestUri = 19;\n+    private static int pathInfo = 20;\n+    private static int basePath = 21;\n+    private static int fixedParamOrder = 22;\n+    private static int inInterceptors = 23;\n+    private static int outInterceptors = 24;\n+    private static int responseCode = 25;\n+    private static int attachments = 26;\n+    private static int encoding = 27;\n+    private static int httpContext = 28;\n+    private static int httpConfig = 29;\n+    private static int httpContextMatchStrategy = 30;\n+    private static int httpBasePath = 31;\n+    private static int asyncPostDispatch = 32;\n+    private static int securityContext = 33;\n+    private static int authorizationPolicy = 34;\n+    private static int certConstraints = 35;\n+    private static int serviceRedirection = 36;\n+    private static int httpServletResponse = 37;\n+    private static int resourceMethod = 38;\n+    private static int oneWayRequest = 39;\n+    private static int asyncResponse = 40;\n+    private static int threadContextSwitched = 41;\n+    private static int cacheInputProperty = 42;\n+    private static int previousMessage = 43;\n+    private static int responseHeadersCopied = 44;\n+    private static int sseEventSink = 45;\n+    private static int requestorRole = 46;\n+    private static int partialResponse = 47;\n+    private static int emptyPartialResponse = 48;\n+    private static int endpointAddress = 49;\n+    private static int inboundMessage = 50;\n+    private static int TOTAL = 51;\n+    private Object[] propertyValues = new Object[TOTAL];\n     \n     private static final String REQUEST_PATH_TO_MATCH_SLASH = \"path_to_match_slash\";\n     private static final String TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MDg4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403240880", "bodyText": "Again you will see later, but maybe this should be a HashMap with a key being the property name and the value being the int index in a property array.  Additionally you would need an static String[] with the properties.", "author": "jhanders34", "createdAt": "2020-04-03T18:48:29Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -43,6 +53,129 @@\n     private Object[] contents = new Object[20];\n     private int index;\n \n+    private Object protoHeaders = NOT_FOUND;\n+    private Object opStack = NOT_FOUND;\n+    private Object contentType = NOT_FOUND;\n+    private Object destination = NOT_FOUND;\n+    private Object queryString = NOT_FOUND;\n+    private Object httpRequest = NOT_FOUND;\n+    private Object httpResponse = NOT_FOUND;\n+    private Object pathToMatchSlash = NOT_FOUND;\n+    private Object httpRequestMethod = NOT_FOUND;\n+    private Object interceptorProviders = NOT_FOUND;\n+    private Object templateParameters = NOT_FOUND;\n+    private Object accept = NOT_FOUND;\n+    private Object continuationProvider = NOT_FOUND;\n+    private Object wsdlDescription = NOT_FOUND;\n+    private Object wsdlInterface = NOT_FOUND;\n+    private Object wsdlOperation = NOT_FOUND;\n+    private Object wsdlPort = NOT_FOUND;\n+    private Object wsdlService = NOT_FOUND;\n+    private Object requestUrl = NOT_FOUND;\n+    private Object requestUri = NOT_FOUND;\n+    private Object pathInfo = NOT_FOUND;\n+    private Object basePath = NOT_FOUND;\n+    private Object fixedParamOrder = NOT_FOUND;\n+    private Object inInterceptors = NOT_FOUND;\n+    private Object outInterceptors = NOT_FOUND;\n+    private Object responseCode = NOT_FOUND;\n+    private Object attachments = NOT_FOUND;\n+    private Object encoding = NOT_FOUND;\n+    private Object httpContext = NOT_FOUND;\n+    private Object httpConfig = NOT_FOUND;\n+    private Object httpContextMatchStrategy = NOT_FOUND;\n+    private Object httpBasePath = NOT_FOUND;\n+    private Object asyncPostDispatch = NOT_FOUND;\n+    private Object securityContext = NOT_FOUND;\n+    private Object authorizationPolicy = NOT_FOUND;\n+    private Object certConstraints = NOT_FOUND;\n+    private Object serviceRedirection = NOT_FOUND;\n+    private Object httpServletResponse = NOT_FOUND;\n+    private Object resourceMethod = NOT_FOUND;\n+    private Object oneWayRequest = NOT_FOUND;\n+    private Object asyncResponse = NOT_FOUND;\n+    private Object threadContextSwitched = NOT_FOUND;\n+    private Object cacheInputProperty = NOT_FOUND;\n+    private Object previousMessage = NOT_FOUND;\n+    private Object responseHeadersCopied = NOT_FOUND;\n+    private Object sseEventSink = NOT_FOUND;\n+    private Object requestorRole = NOT_FOUND;\n+    private Object partialResponse = NOT_FOUND;\n+    private Object emptyPartialResponse = NOT_FOUND;\n+    private Object endpointAddress = NOT_FOUND;\n+    private Object inboundMessage = NOT_FOUND;\n+    \n+    private static final String REQUEST_PATH_TO_MATCH_SLASH = \"path_to_match_slash\";\n+    private static final String TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\";\n+    private static final String CONTINUATION_PROVIDER = ContinuationProvider.class.getName();\n+    private static final String DESTINATION = Destination.class.getName();\n+    private static final String OP_RES_INFO_STACK = \"org.apache.cxf.jaxrs.model.OperationResourceInfoStack\";\n+    private static final String HTTP_BASE_PATH = \"http.base.path\";\n+    private static final String SECURITY_CONTEXT = SecurityContext.class.getName();\n+    private static final String AUTHORIZATION_POLICY = AuthorizationPolicy.class.getName();\n+    private static final String CERT_CONSTRAINTS = CertConstraints.class.getName();\n+    private static final String HTTP_SERVLET_RESPONSE = HttpServletResponse.class.getName();\n+    private static final String RESOURCE_METHOD = \"org.apache.cxf.resource.method\";\n+    private static final String ASYNC_RESPONSE = \"javax.ws.rs.container.AsyncResponse\";\n+    private static final String SSE_EVENT_SINK = \"javax.ws.rs.sse.SseEventSink\";\n+    private static final Set<String> KEYS;\n+\n+    static {", "originalCommit": "032723a10c6ee1e242736a1f8c32bb382a036849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 330532e66b..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -53,57 +63,60 @@ public class MessageImpl extends StringMapImpl implements Message {\n     private Object[] contents = new Object[20];\n     private int index;\n \n-    private Object protoHeaders = NOT_FOUND;\n-    private Object opStack = NOT_FOUND;\n-    private Object contentType = NOT_FOUND;\n-    private Object destination = NOT_FOUND;\n-    private Object queryString = NOT_FOUND;\n-    private Object httpRequest = NOT_FOUND;\n-    private Object httpResponse = NOT_FOUND;\n-    private Object pathToMatchSlash = NOT_FOUND;\n-    private Object httpRequestMethod = NOT_FOUND;\n-    private Object interceptorProviders = NOT_FOUND;\n-    private Object templateParameters = NOT_FOUND;\n-    private Object accept = NOT_FOUND;\n-    private Object continuationProvider = NOT_FOUND;\n-    private Object wsdlDescription = NOT_FOUND;\n-    private Object wsdlInterface = NOT_FOUND;\n-    private Object wsdlOperation = NOT_FOUND;\n-    private Object wsdlPort = NOT_FOUND;\n-    private Object wsdlService = NOT_FOUND;\n-    private Object requestUrl = NOT_FOUND;\n-    private Object requestUri = NOT_FOUND;\n-    private Object pathInfo = NOT_FOUND;\n-    private Object basePath = NOT_FOUND;\n-    private Object fixedParamOrder = NOT_FOUND;\n-    private Object inInterceptors = NOT_FOUND;\n-    private Object outInterceptors = NOT_FOUND;\n-    private Object responseCode = NOT_FOUND;\n-    private Object attachments = NOT_FOUND;\n-    private Object encoding = NOT_FOUND;\n-    private Object httpContext = NOT_FOUND;\n-    private Object httpConfig = NOT_FOUND;\n-    private Object httpContextMatchStrategy = NOT_FOUND;\n-    private Object httpBasePath = NOT_FOUND;\n-    private Object asyncPostDispatch = NOT_FOUND;\n-    private Object securityContext = NOT_FOUND;\n-    private Object authorizationPolicy = NOT_FOUND;\n-    private Object certConstraints = NOT_FOUND;\n-    private Object serviceRedirection = NOT_FOUND;\n-    private Object httpServletResponse = NOT_FOUND;\n-    private Object resourceMethod = NOT_FOUND;\n-    private Object oneWayRequest = NOT_FOUND;\n-    private Object asyncResponse = NOT_FOUND;\n-    private Object threadContextSwitched = NOT_FOUND;\n-    private Object cacheInputProperty = NOT_FOUND;\n-    private Object previousMessage = NOT_FOUND;\n-    private Object responseHeadersCopied = NOT_FOUND;\n-    private Object sseEventSink = NOT_FOUND;\n-    private Object requestorRole = NOT_FOUND;\n-    private Object partialResponse = NOT_FOUND;\n-    private Object emptyPartialResponse = NOT_FOUND;\n-    private Object endpointAddress = NOT_FOUND;\n-    private Object inboundMessage = NOT_FOUND;\n+    //Liberty code change start\n+    private static int contentType = 0;\n+    private static int protoHeaders = 1;\n+    private static int queryString = 2;\n+    private static int httpRequest = 3;\n+    private static int httpResponse = 4;\n+    private static int pathToMatchSlash = 5;\n+    private static int httpRequestMethod = 6;\n+    private static int interceptorProviders = 7;\n+    private static int templateParameters = 8;\n+    private static int accept = 9;\n+    private static int continuationProvider = 10;\n+    private static int destination = 11;\n+    private static int opStack = 12;\n+    private static int wsdlDescription = 13;\n+    private static int wsdlInterface = 14;\n+    private static int wsdlOperation = 15;\n+    private static int wsdlPort = 16;\n+    private static int wsdlService = 17;\n+    private static int requestUrl = 18;\n+    private static int requestUri = 19;\n+    private static int pathInfo = 20;\n+    private static int basePath = 21;\n+    private static int fixedParamOrder = 22;\n+    private static int inInterceptors = 23;\n+    private static int outInterceptors = 24;\n+    private static int responseCode = 25;\n+    private static int attachments = 26;\n+    private static int encoding = 27;\n+    private static int httpContext = 28;\n+    private static int httpConfig = 29;\n+    private static int httpContextMatchStrategy = 30;\n+    private static int httpBasePath = 31;\n+    private static int asyncPostDispatch = 32;\n+    private static int securityContext = 33;\n+    private static int authorizationPolicy = 34;\n+    private static int certConstraints = 35;\n+    private static int serviceRedirection = 36;\n+    private static int httpServletResponse = 37;\n+    private static int resourceMethod = 38;\n+    private static int oneWayRequest = 39;\n+    private static int asyncResponse = 40;\n+    private static int threadContextSwitched = 41;\n+    private static int cacheInputProperty = 42;\n+    private static int previousMessage = 43;\n+    private static int responseHeadersCopied = 44;\n+    private static int sseEventSink = 45;\n+    private static int requestorRole = 46;\n+    private static int partialResponse = 47;\n+    private static int emptyPartialResponse = 48;\n+    private static int endpointAddress = 49;\n+    private static int inboundMessage = 50;\n+    private static int TOTAL = 51;\n+    private Object[] propertyValues = new Object[TOTAL];\n     \n     private static final String REQUEST_PATH_TO_MATCH_SLASH = \"path_to_match_slash\";\n     private static final String TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTg3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403261871", "bodyText": "This method is still missing change flags", "author": "jhanders34", "createdAt": "2020-04-03T19:25:47Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java", "diffHunk": "@@ -299,25 +300,30 @@ protected void invokeComplete(final ServletContext context,\n                                   final HttpServletRequest req,\n                                   final HttpServletResponse resp,\n                                   Message m) throws IOException {\n-        ContinuationProvider p = m.get(ContinuationProvider.class);\n+        //Liberty code change start\n+        ContinuationProvider p = (ContinuationProvider) ((MessageImpl) m).getContinuationProvider();\n+        //Liberty code change end\n         if (p != null) {\n             p.complete();\n         }\n     }\n \n     private void copyKnownRequestAttributes(HttpServletRequest request, Message message) {\n-        message.put(SERVICE_REDIRECTION, request.getAttribute(SERVICE_REDIRECTION));\n+        //Liberty code change start\n+        ((MessageImpl) message).setServiceRedirection(request.getAttribute(SERVICE_REDIRECTION));\n+        //Liberty code change end\n     }\n \n-    protected void setupMessage(final Message inMessage,\n+    protected void setupMessage(final Message message,", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTg4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405145886", "bodyText": "Change flags still missing below:\n((MessageImpl) exchange.getInMessage()).setHttpRequest(new HttpServletRequestSnapshot(req));", "author": "jhanders34", "createdAt": "2020-04-07T22:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\nindex 362363117e..67e65c3d7c 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n\n@@ -314,6 +314,7 @@ public abstract class AbstractHTTPDestination\n         //Liberty code change end\n     }\n \n+    //Liberty code change start\n     protected void setupMessage(final Message message,\n                                 final ServletConfig config,\n                                 final ServletContext context,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2NTc5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403265793", "bodyText": "The cast is not needed here if you update inMessage a few lines up to be of type MessageImpl instead of Mesage.", "author": "jhanders34", "createdAt": "2020-04-03T19:31:27Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/HTTPConduit.java", "diffHunk": "@@ -1684,7 +1694,9 @@ protected void handleResponseInternal() throws IOException {\n             Message inMessage = new MessageImpl();\n             inMessage.setExchange(exchange);\n             updateResponseHeaders(inMessage);\n-            inMessage.put(Message.RESPONSE_CODE, responseCode);\n+            //Liberty code change start\n+            ((MessageImpl) inMessage).setResponseCode(responseCode);", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/HTTPConduit.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/HTTPConduit.java\nindex 5224040611..ad044f6872 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/HTTPConduit.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/HTTPConduit.java\n\n@@ -1691,11 +1691,11 @@ public abstract class HTTPConduit\n             InputStream in = null;\n             // oneway or decoupled twoway calls may expect HTTP 202 with no content\n \n-            Message inMessage = new MessageImpl();\n+            //Liberty code change start\n+            MessageImpl inMessage = new MessageImpl();\n             inMessage.setExchange(exchange);\n             updateResponseHeaders(inMessage);\n-            //Liberty code change start\n-            ((MessageImpl) inMessage).setResponseCode(responseCode);\n+            inMessage.setResponseCode(responseCode);\n             //Liberty code change end\n             if (MessageUtils.getContextualBoolean(outMessage, SET_HTTP_RESPONSE_MESSAGE, false)) {\n                 inMessage.put(HTTP_RESPONSE_MESSAGE, getResponseMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3NjExMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403276110", "bodyText": "This is where if the KEYS was a HashMap of keys to Integers, if it returned non null you could just update this complex logic with:\nInteger index = KEYS.get(key);\nif (index != null) {\nObject value = propertyValues[index];\nreturn value == NOT_FOUND ? null : value;\n}\nOtherwise right now if it is NOT_FOUND we still look the old way.  Not sure why we should do that.  If it isn't set, we should just return null right?\nThe other major flaw here is that we are doing == checks on the key.  So if you are going to do == check on the you would would have to flow down to the old way of doing things because non == versions of the key would be in the Map.  This all causes problems with consistency though and can't be done like that.  If you want an example, let me know.", "author": "jhanders34", "createdAt": "2020-04-03T19:44:33Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -184,7 +328,218 @@ public void setInterceptorChain(InterceptorChain ic) {\n     \n     @Override\n     public Object getContextualProperty(String key) {\n-        Object o = getOrDefault(key, NOT_FOUND);\n+        //Liberty code change start\n+        Object o = null;", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -324,225 +356,15 @@ public class MessageImpl extends StringMapImpl implements Message {\n     //Liberty code change start\n     // Since these maps can have null value, use the getOrDefault API\n     // to prevent calling get twice under the covers\n-    private static final Object NOT_FOUND = new Object();\n-    \n     @Override\n     public Object getContextualProperty(String key) {\n         //Liberty code change start\n-        Object o = null;\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                if (protoHeaders != NOT_FOUND) {\n-                    return protoHeaders;\n-                }\n-            } else if (key == CONTENT_TYPE) {\n-                if (contentType != NOT_FOUND) {\n-                    return contentType;\n-                }\n-            } else if (key == QUERY_STRING) {\n-                if (queryString != NOT_FOUND) {\n-                    return queryString;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                if (httpRequest != NOT_FOUND) {\n-                    return httpRequest;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                if (httpResponse != NOT_FOUND) {\n-                    return httpResponse;\n-                }\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                if (pathToMatchSlash != NOT_FOUND) {\n-                    return pathToMatchSlash;\n-                }\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                if (httpRequestMethod != NOT_FOUND) {\n-                    return httpRequestMethod;\n-                }\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                if (interceptorProviders != NOT_FOUND) {\n-                    return interceptorProviders;\n-                }\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                if (templateParameters != NOT_FOUND) {\n-                    return templateParameters;\n-                }\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                if (accept != NOT_FOUND) {\n-                    return accept;\n-                }\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                if (continuationProvider != NOT_FOUND) {\n-                    return continuationProvider;\n-                }\n-            } else if (key == OP_RES_INFO_STACK) {\n-                if (opStack != NOT_FOUND) {\n-                    return opStack;\n-                }\n-            } else if (key == DESTINATION) {\n-                if (destination != NOT_FOUND) {\n-                    return destination;\n-                }\n-            } else if (key == WSDL_DESCRIPTION) {\n-                if (wsdlDescription != NOT_FOUND) {\n-                    return wsdlDescription;\n-                }\n-            } else if (key == WSDL_INTERFACE) {\n-                if (wsdlInterface != NOT_FOUND) {\n-                    return wsdlInterface;\n-                }\n-            } else if (key == WSDL_OPERATION) {\n-                if (wsdlOperation != NOT_FOUND) {\n-                    return wsdlOperation;\n-                }\n-            } else if (key == WSDL_PORT) {\n-                if (wsdlPort != NOT_FOUND) {\n-                    return wsdlPort;\n-                }\n-            } else if (key == WSDL_SERVICE) {\n-                if (wsdlService != NOT_FOUND) {\n-                    return wsdlService;\n-                }\n-            } else if (key == REQUEST_URL) {\n-                if (requestUrl != NOT_FOUND) {\n-                    return requestUrl;\n-                }\n-            } else if (key == REQUEST_URI) {\n-                if (requestUri != NOT_FOUND) {\n-                    return requestUri;\n-                }\n-            } else if (key == PATH_INFO) {\n-                if (pathInfo != NOT_FOUND) {\n-                    return pathInfo;\n-                }\n-            } else if (key == BASE_PATH) {\n-                if (basePath != NOT_FOUND) {\n-                    return basePath;\n-                }\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                if (fixedParamOrder != NOT_FOUND) {\n-                    return fixedParamOrder;\n-                }\n-            } else if (key == IN_INTERCEPTORS) {\n-                if (inInterceptors != NOT_FOUND) {\n-                    return inInterceptors;\n-                }\n-            } else if (key == OUT_INTERCEPTORS) {\n-                if (outInterceptors != NOT_FOUND) {\n-                    return outInterceptors;\n-                }\n-            } else if (key == RESPONSE_CODE) {\n-                if (responseCode != NOT_FOUND) {\n-                    return responseCode;\n-                }\n-            } else if (key == ATTACHMENTS) {\n-                if (attachments != NOT_FOUND) {\n-                    return attachments;\n-                }\n-            } else if (key == ENCODING) {\n-                if (encoding != NOT_FOUND) {\n-                    return encoding;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                if (httpContext != NOT_FOUND) {\n-                    return httpContext;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                if (httpConfig != NOT_FOUND) {\n-                    return httpConfig;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                if (httpContextMatchStrategy != NOT_FOUND) {\n-                    return httpContextMatchStrategy;\n-                }\n-            } else if (key == HTTP_BASE_PATH) {\n-                if (httpBasePath != NOT_FOUND) {\n-                    return httpBasePath;\n-                }\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                if (asyncPostDispatch != NOT_FOUND) {\n-                    return asyncPostDispatch;\n-                }\n-            } else if (key == SECURITY_CONTEXT) {\n-                if (securityContext != NOT_FOUND) {\n-                    return securityContext;\n-                }\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                if (authorizationPolicy != NOT_FOUND) {\n-                    return authorizationPolicy;\n-                }\n-            } else if (key == CERT_CONSTRAINTS) {\n-                if (certConstraints != NOT_FOUND) {\n-                    return certConstraints;\n-                }\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                if (serviceRedirection != NOT_FOUND) {\n-                    return serviceRedirection;\n-                }\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                if (httpServletResponse != NOT_FOUND) {\n-                    return httpServletResponse;\n-                }\n-            } else if (key == RESOURCE_METHOD) {\n-                if (resourceMethod != NOT_FOUND) {\n-                    return resourceMethod;\n-                }\n-            } else if (key == ONE_WAY_REQUEST) {\n-                if (oneWayRequest != NOT_FOUND) {\n-                    return oneWayRequest;\n-                }\n-            } else if (key == ASYNC_RESPONSE) {\n-                if (asyncResponse != NOT_FOUND) {\n-                    return asyncResponse;\n-                }\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                if (threadContextSwitched != NOT_FOUND) {\n-                    return threadContextSwitched;\n-                }\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                if (cacheInputProperty != NOT_FOUND) {\n-                    return cacheInputProperty;\n-                }\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                if (previousMessage != NOT_FOUND) {\n-                    return previousMessage;\n-                }\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                if (responseHeadersCopied != NOT_FOUND) {\n-                    return responseHeadersCopied;\n-                }\n-            } else if (key == SSE_EVENT_SINK) {\n-                if (sseEventSink != NOT_FOUND) {\n-                    return sseEventSink;\n-                }\n-            } else if (key == REQUESTOR_ROLE) {\n-                if (requestorRole != NOT_FOUND) {\n-                    return requestorRole;\n-                }\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                if (partialResponse != NOT_FOUND) {\n-                    return partialResponse;\n-                }\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                if (emptyPartialResponse != NOT_FOUND) {\n-                    return emptyPartialResponse;\n-                }\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                if (endpointAddress != NOT_FOUND) {\n-                    return endpointAddress;\n-                }\n-            } else if (key == INBOUND_MESSAGE) {\n-                if (inboundMessage != NOT_FOUND) {\n-                    return inboundMessage;\n-                }\n-            }\n-        }\n-        //Liberty code change end\n-\n-        o = getOrDefault(key, NOT_FOUND);\n+        Object o = getOrDefault(key, NOT_FOUND);\n         if (o != NOT_FOUND) {\n             return o;\n         }\n+        //Liberty code change end\n+\n         return getFromExchange(key);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3ODExMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403278113", "bodyText": "This isn't needed in the sub class.  Its existence in the super class is sufficient", "author": "jhanders34", "createdAt": "2020-04-03T19:47:11Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -297,5 +652,1699 @@ void setContextualProperty(String key, Object v) {\n             put(key, v);\n         }\n     }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map protoHeaders) {\n+        this.protoHeaders = protoHeaders;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = protoHeaders;\n+                protoHeaders = NOT_FOUND;\n+            } else if (key == CONTENT_TYPE) {\n+                ret = contentType;\n+                contentType = NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                ret = queryString;\n+                queryString = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = httpRequest;\n+                httpRequest = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = httpResponse;\n+                httpResponse = NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = pathToMatchSlash;\n+                pathToMatchSlash = NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = httpRequestMethod;\n+                httpRequestMethod = NOT_FOUND;\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = interceptorProviders;\n+                interceptorProviders = NOT_FOUND;\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = templateParameters;\n+                templateParameters = NOT_FOUND;\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = accept;\n+                accept = NOT_FOUND;\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = continuationProvider;\n+                continuationProvider = NOT_FOUND;\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = opStack;\n+                opStack = NOT_FOUND;\n+            } else if (key == DESTINATION) {\n+                ret = destination;\n+                destination = NOT_FOUND;\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = wsdlDescription;\n+                wsdlDescription = NOT_FOUND;\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = wsdlInterface;\n+                wsdlInterface = NOT_FOUND;\n+            } else if (key == WSDL_OPERATION) {\n+                ret = wsdlOperation;\n+                wsdlOperation = NOT_FOUND;\n+            } else if (key == WSDL_PORT) {\n+                ret = wsdlPort;\n+                wsdlPort = NOT_FOUND;\n+            } else if (key == WSDL_SERVICE) {\n+                ret = wsdlService;\n+                wsdlService = NOT_FOUND;\n+            } else if (key == REQUEST_URL) {\n+                ret = requestUrl;\n+                requestUrl = NOT_FOUND;\n+            } else if (key == REQUEST_URI) {\n+                ret = requestUri;\n+                requestUri = NOT_FOUND;\n+            } else if (key == PATH_INFO) {\n+                ret = pathInfo;\n+                pathInfo = NOT_FOUND;\n+            } else if (key == BASE_PATH) {\n+                ret = basePath;\n+                basePath = NOT_FOUND;\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = fixedParamOrder;\n+                fixedParamOrder = NOT_FOUND;\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = inInterceptors;\n+                inInterceptors = NOT_FOUND;\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = outInterceptors;\n+                outInterceptors = NOT_FOUND;\n+            } else if (key == RESPONSE_CODE) {\n+                ret = responseCode;\n+                responseCode = NOT_FOUND;\n+            } else if (key == ATTACHMENTS) {\n+                ret = attachments;\n+                attachments = NOT_FOUND;\n+            } else if (key == ENCODING) {\n+                ret = encoding;\n+                encoding = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = httpContext;\n+                httpContext = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = httpConfig;\n+                httpConfig = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = httpContextMatchStrategy;\n+                httpContextMatchStrategy = NOT_FOUND;\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = httpBasePath;\n+                httpBasePath = NOT_FOUND;\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = asyncPostDispatch;\n+                asyncPostDispatch = NOT_FOUND;\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = securityContext;\n+                securityContext = NOT_FOUND;\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = authorizationPolicy;\n+                authorizationPolicy = NOT_FOUND;\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = certConstraints;\n+                certConstraints = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = serviceRedirection;\n+                serviceRedirection = NOT_FOUND;\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = httpServletResponse;\n+                httpServletResponse = NOT_FOUND;\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = resourceMethod;\n+                resourceMethod = NOT_FOUND;\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = oneWayRequest;\n+                oneWayRequest = NOT_FOUND;\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = asyncResponse;\n+                asyncResponse = NOT_FOUND;\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = threadContextSwitched;\n+                threadContextSwitched = NOT_FOUND;\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = cacheInputProperty;\n+                cacheInputProperty = NOT_FOUND;\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = previousMessage;\n+                previousMessage = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = responseHeadersCopied;\n+                responseHeadersCopied = NOT_FOUND;\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = sseEventSink;\n+                sseEventSink = NOT_FOUND;\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = requestorRole;\n+                requestorRole = NOT_FOUND;\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = partialResponse;\n+                partialResponse = NOT_FOUND;\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = emptyPartialResponse;\n+                emptyPartialResponse = NOT_FOUND;\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = endpointAddress;\n+                endpointAddress = NOT_FOUND;\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = inboundMessage;\n+                inboundMessage = NOT_FOUND;\n+            }\n+\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2ODUzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405168534", "bodyText": "This get method is still there.", "author": "jhanders34", "createdAt": "2020-04-07T23:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3ODExMw=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -648,479 +470,55 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n-        }\n+        putIfAbsent(key, v);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n     public Map getProtocolHeaders() {\n-        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+        return (Map) getFromPropertyArray(protoHeaders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setProtocolHeaders(Map protoHeaders) {\n-        this.protoHeaders = protoHeaders;\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n     }\n     \n     @Override\n     public Object remove(Object key) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = protoHeaders;\n-                protoHeaders = NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                ret = contentType;\n-                contentType = NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                ret = queryString;\n-                queryString = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = httpRequest;\n-                httpRequest = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = httpResponse;\n-                httpResponse = NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = pathToMatchSlash;\n-                pathToMatchSlash = NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = httpRequestMethod;\n-                httpRequestMethod = NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = interceptorProviders;\n-                interceptorProviders = NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = templateParameters;\n-                templateParameters = NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = accept;\n-                accept = NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = continuationProvider;\n-                continuationProvider = NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = opStack;\n-                opStack = NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                ret = destination;\n-                destination = NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = wsdlDescription;\n-                wsdlDescription = NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = wsdlInterface;\n-                wsdlInterface = NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                ret = wsdlOperation;\n-                wsdlOperation = NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                ret = wsdlPort;\n-                wsdlPort = NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                ret = wsdlService;\n-                wsdlService = NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                ret = requestUrl;\n-                requestUrl = NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                ret = requestUri;\n-                requestUri = NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                ret = pathInfo;\n-                pathInfo = NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                ret = basePath;\n-                basePath = NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = fixedParamOrder;\n-                fixedParamOrder = NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = inInterceptors;\n-                inInterceptors = NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = outInterceptors;\n-                outInterceptors = NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                ret = responseCode;\n-                responseCode = NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                ret = attachments;\n-                attachments = NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                ret = encoding;\n-                encoding = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = httpContext;\n-                httpContext = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = httpConfig;\n-                httpConfig = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = httpContextMatchStrategy;\n-                httpContextMatchStrategy = NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = httpBasePath;\n-                httpBasePath = NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = asyncPostDispatch;\n-                asyncPostDispatch = NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = securityContext;\n-                securityContext = NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = authorizationPolicy;\n-                authorizationPolicy = NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = certConstraints;\n-                certConstraints = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = serviceRedirection;\n-                serviceRedirection = NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = httpServletResponse;\n-                httpServletResponse = NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = resourceMethod;\n-                resourceMethod = NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = oneWayRequest;\n-                oneWayRequest = NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = asyncResponse;\n-                asyncResponse = NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = threadContextSwitched;\n-                threadContextSwitched = NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = cacheInputProperty;\n-                cacheInputProperty = NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = previousMessage;\n-                previousMessage = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = responseHeadersCopied;\n-                responseHeadersCopied = NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = sseEventSink;\n-                sseEventSink = NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = requestorRole;\n-                requestorRole = NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = partialResponse;\n-                partialResponse = NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = emptyPartialResponse;\n-                emptyPartialResponse = NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = endpointAddress;\n-                endpointAddress = NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = inboundMessage;\n-                inboundMessage = NOT_FOUND;\n-            }\n-\n-            return ret == NOT_FOUND ? null : ret;\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n         }\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3ODk0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403278945", "bodyText": "This isn't needed in the sub class. Its existence in the super class is sufficient", "author": "jhanders34", "createdAt": "2020-04-03T19:48:19Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -297,5 +652,1699 @@ void setContextualProperty(String key, Object v) {\n             put(key, v);\n         }\n     }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map protoHeaders) {\n+        this.protoHeaders = protoHeaders;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = protoHeaders;\n+                protoHeaders = NOT_FOUND;\n+            } else if (key == CONTENT_TYPE) {\n+                ret = contentType;\n+                contentType = NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                ret = queryString;\n+                queryString = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = httpRequest;\n+                httpRequest = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = httpResponse;\n+                httpResponse = NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = pathToMatchSlash;\n+                pathToMatchSlash = NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = httpRequestMethod;\n+                httpRequestMethod = NOT_FOUND;\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = interceptorProviders;\n+                interceptorProviders = NOT_FOUND;\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = templateParameters;\n+                templateParameters = NOT_FOUND;\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = accept;\n+                accept = NOT_FOUND;\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = continuationProvider;\n+                continuationProvider = NOT_FOUND;\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = opStack;\n+                opStack = NOT_FOUND;\n+            } else if (key == DESTINATION) {\n+                ret = destination;\n+                destination = NOT_FOUND;\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = wsdlDescription;\n+                wsdlDescription = NOT_FOUND;\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = wsdlInterface;\n+                wsdlInterface = NOT_FOUND;\n+            } else if (key == WSDL_OPERATION) {\n+                ret = wsdlOperation;\n+                wsdlOperation = NOT_FOUND;\n+            } else if (key == WSDL_PORT) {\n+                ret = wsdlPort;\n+                wsdlPort = NOT_FOUND;\n+            } else if (key == WSDL_SERVICE) {\n+                ret = wsdlService;\n+                wsdlService = NOT_FOUND;\n+            } else if (key == REQUEST_URL) {\n+                ret = requestUrl;\n+                requestUrl = NOT_FOUND;\n+            } else if (key == REQUEST_URI) {\n+                ret = requestUri;\n+                requestUri = NOT_FOUND;\n+            } else if (key == PATH_INFO) {\n+                ret = pathInfo;\n+                pathInfo = NOT_FOUND;\n+            } else if (key == BASE_PATH) {\n+                ret = basePath;\n+                basePath = NOT_FOUND;\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = fixedParamOrder;\n+                fixedParamOrder = NOT_FOUND;\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = inInterceptors;\n+                inInterceptors = NOT_FOUND;\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = outInterceptors;\n+                outInterceptors = NOT_FOUND;\n+            } else if (key == RESPONSE_CODE) {\n+                ret = responseCode;\n+                responseCode = NOT_FOUND;\n+            } else if (key == ATTACHMENTS) {\n+                ret = attachments;\n+                attachments = NOT_FOUND;\n+            } else if (key == ENCODING) {\n+                ret = encoding;\n+                encoding = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = httpContext;\n+                httpContext = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = httpConfig;\n+                httpConfig = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = httpContextMatchStrategy;\n+                httpContextMatchStrategy = NOT_FOUND;\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = httpBasePath;\n+                httpBasePath = NOT_FOUND;\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = asyncPostDispatch;\n+                asyncPostDispatch = NOT_FOUND;\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = securityContext;\n+                securityContext = NOT_FOUND;\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = authorizationPolicy;\n+                authorizationPolicy = NOT_FOUND;\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = certConstraints;\n+                certConstraints = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = serviceRedirection;\n+                serviceRedirection = NOT_FOUND;\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = httpServletResponse;\n+                httpServletResponse = NOT_FOUND;\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = resourceMethod;\n+                resourceMethod = NOT_FOUND;\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = oneWayRequest;\n+                oneWayRequest = NOT_FOUND;\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = asyncResponse;\n+                asyncResponse = NOT_FOUND;\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = threadContextSwitched;\n+                threadContextSwitched = NOT_FOUND;\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = cacheInputProperty;\n+                cacheInputProperty = NOT_FOUND;\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = previousMessage;\n+                previousMessage = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = responseHeadersCopied;\n+                responseHeadersCopied = NOT_FOUND;\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = sseEventSink;\n+                sseEventSink = NOT_FOUND;\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = requestorRole;\n+                requestorRole = NOT_FOUND;\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = partialResponse;\n+                partialResponse = NOT_FOUND;\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = emptyPartialResponse;\n+                emptyPartialResponse = NOT_FOUND;\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = endpointAddress;\n+                endpointAddress = NOT_FOUND;\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = inboundMessage;\n+                inboundMessage = NOT_FOUND;\n+            }\n+\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T get(Class<T> key) {\n+        return (T) get(key.getName());\n+    }\n+\n+    @Override", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2ODY2OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405168668", "bodyText": "this put method is still there.", "author": "jhanders34", "createdAt": "2020-04-07T23:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI3ODk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -648,479 +470,55 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n-        }\n+        putIfAbsent(key, v);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n     public Map getProtocolHeaders() {\n-        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+        return (Map) getFromPropertyArray(protoHeaders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setProtocolHeaders(Map protoHeaders) {\n-        this.protoHeaders = protoHeaders;\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n     }\n     \n     @Override\n     public Object remove(Object key) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = protoHeaders;\n-                protoHeaders = NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                ret = contentType;\n-                contentType = NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                ret = queryString;\n-                queryString = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = httpRequest;\n-                httpRequest = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = httpResponse;\n-                httpResponse = NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = pathToMatchSlash;\n-                pathToMatchSlash = NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = httpRequestMethod;\n-                httpRequestMethod = NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = interceptorProviders;\n-                interceptorProviders = NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = templateParameters;\n-                templateParameters = NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = accept;\n-                accept = NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = continuationProvider;\n-                continuationProvider = NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = opStack;\n-                opStack = NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                ret = destination;\n-                destination = NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = wsdlDescription;\n-                wsdlDescription = NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = wsdlInterface;\n-                wsdlInterface = NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                ret = wsdlOperation;\n-                wsdlOperation = NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                ret = wsdlPort;\n-                wsdlPort = NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                ret = wsdlService;\n-                wsdlService = NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                ret = requestUrl;\n-                requestUrl = NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                ret = requestUri;\n-                requestUri = NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                ret = pathInfo;\n-                pathInfo = NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                ret = basePath;\n-                basePath = NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = fixedParamOrder;\n-                fixedParamOrder = NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = inInterceptors;\n-                inInterceptors = NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = outInterceptors;\n-                outInterceptors = NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                ret = responseCode;\n-                responseCode = NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                ret = attachments;\n-                attachments = NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                ret = encoding;\n-                encoding = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = httpContext;\n-                httpContext = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = httpConfig;\n-                httpConfig = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = httpContextMatchStrategy;\n-                httpContextMatchStrategy = NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = httpBasePath;\n-                httpBasePath = NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = asyncPostDispatch;\n-                asyncPostDispatch = NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = securityContext;\n-                securityContext = NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = authorizationPolicy;\n-                authorizationPolicy = NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = certConstraints;\n-                certConstraints = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = serviceRedirection;\n-                serviceRedirection = NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = httpServletResponse;\n-                httpServletResponse = NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = resourceMethod;\n-                resourceMethod = NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = oneWayRequest;\n-                oneWayRequest = NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = asyncResponse;\n-                asyncResponse = NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = threadContextSwitched;\n-                threadContextSwitched = NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = cacheInputProperty;\n-                cacheInputProperty = NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = previousMessage;\n-                previousMessage = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = responseHeadersCopied;\n-                responseHeadersCopied = NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = sseEventSink;\n-                sseEventSink = NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = requestorRole;\n-                requestorRole = NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = partialResponse;\n-                partialResponse = NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = emptyPartialResponse;\n-                emptyPartialResponse = NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = endpointAddress;\n-                endpointAddress = NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = inboundMessage;\n-                inboundMessage = NOT_FOUND;\n-            }\n-\n-            return ret == NOT_FOUND ? null : ret;\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n         }\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NjE0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403286144", "bodyText": "This applies to keySet, entrySet and values.  Do we want to support this calling Iterator.remove methods on the returned Collections?  If so it would be a custom implementation of the Collection returned and the Iterator would be able to track where we are with the current key, value, entry and be able to do the remove method based off of that.  With us having an array of getter/setter properties it will be easier to track what should be removed on the Collection iterator.\nIf we keep this current mechanism, then we should make a copy of the Set that is returned for super.keySet() like you do in entrySet so we aren't modifying the parents returned Set object.", "author": "jhanders34", "createdAt": "2020-04-03T19:57:35Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -297,5 +652,1699 @@ void setContextualProperty(String key, Object v) {\n             put(key, v);\n         }\n     }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map protoHeaders) {\n+        this.protoHeaders = protoHeaders;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = protoHeaders;\n+                protoHeaders = NOT_FOUND;\n+            } else if (key == CONTENT_TYPE) {\n+                ret = contentType;\n+                contentType = NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                ret = queryString;\n+                queryString = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = httpRequest;\n+                httpRequest = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = httpResponse;\n+                httpResponse = NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = pathToMatchSlash;\n+                pathToMatchSlash = NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = httpRequestMethod;\n+                httpRequestMethod = NOT_FOUND;\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = interceptorProviders;\n+                interceptorProviders = NOT_FOUND;\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = templateParameters;\n+                templateParameters = NOT_FOUND;\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = accept;\n+                accept = NOT_FOUND;\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = continuationProvider;\n+                continuationProvider = NOT_FOUND;\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = opStack;\n+                opStack = NOT_FOUND;\n+            } else if (key == DESTINATION) {\n+                ret = destination;\n+                destination = NOT_FOUND;\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = wsdlDescription;\n+                wsdlDescription = NOT_FOUND;\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = wsdlInterface;\n+                wsdlInterface = NOT_FOUND;\n+            } else if (key == WSDL_OPERATION) {\n+                ret = wsdlOperation;\n+                wsdlOperation = NOT_FOUND;\n+            } else if (key == WSDL_PORT) {\n+                ret = wsdlPort;\n+                wsdlPort = NOT_FOUND;\n+            } else if (key == WSDL_SERVICE) {\n+                ret = wsdlService;\n+                wsdlService = NOT_FOUND;\n+            } else if (key == REQUEST_URL) {\n+                ret = requestUrl;\n+                requestUrl = NOT_FOUND;\n+            } else if (key == REQUEST_URI) {\n+                ret = requestUri;\n+                requestUri = NOT_FOUND;\n+            } else if (key == PATH_INFO) {\n+                ret = pathInfo;\n+                pathInfo = NOT_FOUND;\n+            } else if (key == BASE_PATH) {\n+                ret = basePath;\n+                basePath = NOT_FOUND;\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = fixedParamOrder;\n+                fixedParamOrder = NOT_FOUND;\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = inInterceptors;\n+                inInterceptors = NOT_FOUND;\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = outInterceptors;\n+                outInterceptors = NOT_FOUND;\n+            } else if (key == RESPONSE_CODE) {\n+                ret = responseCode;\n+                responseCode = NOT_FOUND;\n+            } else if (key == ATTACHMENTS) {\n+                ret = attachments;\n+                attachments = NOT_FOUND;\n+            } else if (key == ENCODING) {\n+                ret = encoding;\n+                encoding = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = httpContext;\n+                httpContext = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = httpConfig;\n+                httpConfig = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = httpContextMatchStrategy;\n+                httpContextMatchStrategy = NOT_FOUND;\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = httpBasePath;\n+                httpBasePath = NOT_FOUND;\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = asyncPostDispatch;\n+                asyncPostDispatch = NOT_FOUND;\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = securityContext;\n+                securityContext = NOT_FOUND;\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = authorizationPolicy;\n+                authorizationPolicy = NOT_FOUND;\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = certConstraints;\n+                certConstraints = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = serviceRedirection;\n+                serviceRedirection = NOT_FOUND;\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = httpServletResponse;\n+                httpServletResponse = NOT_FOUND;\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = resourceMethod;\n+                resourceMethod = NOT_FOUND;\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = oneWayRequest;\n+                oneWayRequest = NOT_FOUND;\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = asyncResponse;\n+                asyncResponse = NOT_FOUND;\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = threadContextSwitched;\n+                threadContextSwitched = NOT_FOUND;\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = cacheInputProperty;\n+                cacheInputProperty = NOT_FOUND;\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = previousMessage;\n+                previousMessage = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = responseHeadersCopied;\n+                responseHeadersCopied = NOT_FOUND;\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = sseEventSink;\n+                sseEventSink = NOT_FOUND;\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = requestorRole;\n+                requestorRole = NOT_FOUND;\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = partialResponse;\n+                partialResponse = NOT_FOUND;\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = emptyPartialResponse;\n+                emptyPartialResponse = NOT_FOUND;\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = endpointAddress;\n+                endpointAddress = NOT_FOUND;\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = inboundMessage;\n+                inboundMessage = NOT_FOUND;\n+            }\n+\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T get(Class<T> key) {\n+        return (T) get(key.getName());\n+    }\n+\n+    @Override\n+    public <T> void put(Class<T> key, T value) {\n+        put(key.getName(), value);\n+    }\n+\n+    @Override\n+    public Object get(Object key) {\n+        return get((String) key);\n+    }\n+\n+    public Object get(String key) {\n+        if (KEYS.contains(key)) {\n+            if (key == PROTOCOL_HEADERS) {\n+                return getProtocolHeaders();\n+            } else if (key == CONTENT_TYPE) {\n+                return getContentType();\n+            } else if (key == QUERY_STRING) {\n+                return getQueryString();\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return getHttpRequest();\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return getHttpResponse();\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return getPathToMatchSlash();\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                return getHttpRequestMethod();\n+            } else if (key == QUERY_STRING) {\n+                return getQueryString();\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return getHttpRequest();\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return getHttpResponse();\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return getPathToMatchSlash();\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                return getInterceptorProviders();\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                return getTemplateParameters();\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                return getAccept();\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                return getContinuationProvider();\n+            } else if (key == OP_RES_INFO_STACK) {\n+                return getOperationResourceInfoStack();\n+            } else if (key == DESTINATION) {\n+                return getDestination();\n+            } else if (key == WSDL_DESCRIPTION) {\n+                return getWsdlDescription();\n+            } else if (key == WSDL_INTERFACE) {\n+                return getWsdlInterface();\n+            } else if (key == WSDL_OPERATION) {\n+                return getWsdlOperation();\n+            } else if (key == WSDL_PORT) {\n+                return getWsdlPort();\n+            } else if (key == WSDL_SERVICE) {\n+                return getWsdlService();\n+            } else if (key == REQUEST_URL) {\n+                return getRequestUrl();\n+            } else if (key == REQUEST_URI) {\n+                return getRequestUri();\n+            } else if (key == PATH_INFO) {\n+                return getPathInfo();\n+            } else if (key == BASE_PATH) {\n+                return getBasePath();\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                return getFixedParamOrder();\n+            } else if (key == IN_INTERCEPTORS) {\n+                return getInInterceptors();\n+            } else if (key == OUT_INTERCEPTORS) {\n+                return getOutInterceptors();\n+            } else if (key == RESPONSE_CODE) {\n+                return getResponseCode();\n+            } else if (key == ATTACHMENTS) {\n+                return getAttachments();\n+            } else if (key == ENCODING) {\n+                return getEncoding();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                return getHttpContext();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                return getHttpConfig();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                return getHttpContextMatchStrategy();\n+            } else if (key == HTTP_BASE_PATH) {\n+                return getHttpBasePath();\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                return getAsyncPostDispatch();\n+            } else if (key == SECURITY_CONTEXT) {\n+                return getSecurityContext();\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                return getAuthorizationPolicy();\n+            } else if (key == CERT_CONSTRAINTS) {\n+                return getCertConstraints();\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                return getServiceRedirection();\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                return getHttpServletResponse();\n+            } else if (key == RESOURCE_METHOD) {\n+                return getResourceMethod();\n+            } else if (key == ONE_WAY_REQUEST) {\n+                return getOneWayRequest();\n+            } else if (key == ASYNC_RESPONSE) {\n+                return getAsyncResponse();\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                return getThreadContextSwitched();\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                return getCacheInputProperty();\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                return getPreviousMessage();\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                return getResponseHeadersCopied();\n+            } else if (key == SSE_EVENT_SINK) {\n+                return getSseEventSink();\n+            } else if (key == REQUESTOR_ROLE) {\n+                return getRequestorRole();\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                return getPartialResponse();\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                return getEmptyPartialResponse();\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                return getEndpointAddress();\n+            } else if (key == INBOUND_MESSAGE) {\n+                return getInboundMessage();\n+            }\n+        }\n+        \n+        return super.get(key);\n+    }\n+\n+    @Override\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Object put(String key, Object value) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = getProtocolHeaders();\n+                setProtocolHeaders((Map) value);\n+            } else if (key == CONTENT_TYPE) {\n+                ret = getContentType();\n+                setContentType((String) value);\n+            } else if (key == QUERY_STRING) {\n+                ret = getQueryString();\n+                setQueryString((String) value);\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = getHttpRequest();\n+                setHttpRequest(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = getHttpResponse();\n+                setHttpResponse(value);\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = getPathToMatchSlash();\n+                setPathToMatchSlash((String) value);\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = getHttpRequestMethod();\n+                setHttpRequestMethod((String) value);\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = getInterceptorProviders();\n+                setInterceptorProviders((Collection) value);\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = getTemplateParameters();\n+                setTemplateParameters(value);\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = getAccept();\n+                setAccept(value);\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = getContinuationProvider();\n+                setContinuationProvider(value);\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = getOperationResourceInfoStack();\n+                setOperationResourceInfoStack(value);\n+            } else if (key == DESTINATION) {\n+                ret = getDestination();\n+                setDestination((Destination) value);\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = getWsdlDescription();\n+                setWsdlDescription(value);\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = getWsdlInterface();\n+                setWsdlInterface(value);\n+            } else if (key == WSDL_OPERATION) {\n+                ret = getWsdlOperation();\n+                setWsdlOperation(value);\n+            } else if (key == WSDL_PORT) {\n+                ret = getWsdlPort();\n+                setWsdlPort(value);\n+            } else if (key == WSDL_SERVICE) {\n+                ret = getWsdlService();\n+                setWsdlService(value);\n+            } else if (key == REQUEST_URL) {\n+                ret = getRequestUrl();\n+                setRequestUrl(value);\n+            } else if (key == REQUEST_URI) {\n+                ret = getRequestUri();\n+                setRequestUri(value);\n+            } else if (key == PATH_INFO) {\n+                ret = getPathInfo();\n+                setPathInfo(value);\n+            } else if (key == BASE_PATH) {\n+                ret = getBasePath();\n+                setBasePath(value);\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = getFixedParamOrder();\n+                setFixedParamOrder(value);\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = getInInterceptors();\n+                setInInterceptors(value);\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = getOutInterceptors();\n+                setOutInterceptors(value);\n+            } else if (key == RESPONSE_CODE) {\n+                ret = getResponseCode();\n+                setResponseCode(value);\n+            } else if (key == ATTACHMENTS) {\n+                ret = getAttachments();\n+                setAttachments((Collection<Attachment>) value);\n+            } else if (key == ENCODING) {\n+                ret = getEncoding();\n+                setEncoding(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = getHttpContext();\n+                setHttpContext(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = getHttpConfig();\n+                setHttpConfig(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = getHttpContextMatchStrategy();\n+                setHttpContextMatchStrategy(value);\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = getHttpBasePath();\n+                setHttpBasePath(value);\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = getAsyncPostDispatch();\n+                setAsyncPostDispatch(value);\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = getSecurityContext();\n+                setSecurityContext(value);\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = getAuthorizationPolicy();\n+                setAuthorizationPolicy(value);\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = getCertConstraints();\n+                setCertConstraints(value);\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = getServiceRedirection();\n+                setServiceRedirection(value);\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = getHttpServletResponse();\n+                setHttpServletResponse(value);\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = getResourceMethod();\n+                setResourceMethod(value);\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = getOneWayRequest();\n+                setOneWayRequest(value);\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = getAsyncResponse();\n+                setAsyncResponse(value);\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = getThreadContextSwitched();\n+                setThreadContextSwitched(value);\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = getCacheInputProperty();\n+                setCacheInputProperty(value);\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = getPreviousMessage();\n+                setPreviousMessage(value);\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = getResponseHeadersCopied();\n+                setResponseHeadersCopied(value);\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = getSseEventSink();\n+                setSseEventSink(value);\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = getRequestorRole();\n+                setRequestorRole(value);\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = getPartialResponse();\n+                setPartialResponse(value);\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = getEmptyPartialResponse();\n+                setEmptyPartialResponse(value);\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = getEndpointAddress();\n+                setEndpointAddress(value);\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = getInboundMessage();\n+                setInboundMessage(value);\n+            }\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+\n+        return super.put(key, value);\n+    }\n+\n+    @Override\n+    public Set<String> keySet() {", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1NzU3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405157572", "bodyText": "So you decided to keep the current mechanism and not support Iterator.remove on the Set / Collection returned from keySet, entrySet and values?  If we do that we probably should have the Iterator remove return UnsupportedOperationException.  This is a change in behavior from the previous implementation of this classes where the Iterator would actually work.  I don't know if anyone calls keySet, entrySet or values on the MessageImpl class.", "author": "jhanders34", "createdAt": "2020-04-07T22:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NjE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -648,479 +470,55 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n-        }\n+        putIfAbsent(key, v);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n     public Map getProtocolHeaders() {\n-        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+        return (Map) getFromPropertyArray(protoHeaders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setProtocolHeaders(Map protoHeaders) {\n-        this.protoHeaders = protoHeaders;\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n     }\n     \n     @Override\n     public Object remove(Object key) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = protoHeaders;\n-                protoHeaders = NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                ret = contentType;\n-                contentType = NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                ret = queryString;\n-                queryString = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = httpRequest;\n-                httpRequest = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = httpResponse;\n-                httpResponse = NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = pathToMatchSlash;\n-                pathToMatchSlash = NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = httpRequestMethod;\n-                httpRequestMethod = NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = interceptorProviders;\n-                interceptorProviders = NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = templateParameters;\n-                templateParameters = NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = accept;\n-                accept = NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = continuationProvider;\n-                continuationProvider = NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = opStack;\n-                opStack = NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                ret = destination;\n-                destination = NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = wsdlDescription;\n-                wsdlDescription = NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = wsdlInterface;\n-                wsdlInterface = NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                ret = wsdlOperation;\n-                wsdlOperation = NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                ret = wsdlPort;\n-                wsdlPort = NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                ret = wsdlService;\n-                wsdlService = NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                ret = requestUrl;\n-                requestUrl = NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                ret = requestUri;\n-                requestUri = NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                ret = pathInfo;\n-                pathInfo = NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                ret = basePath;\n-                basePath = NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = fixedParamOrder;\n-                fixedParamOrder = NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = inInterceptors;\n-                inInterceptors = NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = outInterceptors;\n-                outInterceptors = NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                ret = responseCode;\n-                responseCode = NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                ret = attachments;\n-                attachments = NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                ret = encoding;\n-                encoding = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = httpContext;\n-                httpContext = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = httpConfig;\n-                httpConfig = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = httpContextMatchStrategy;\n-                httpContextMatchStrategy = NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = httpBasePath;\n-                httpBasePath = NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = asyncPostDispatch;\n-                asyncPostDispatch = NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = securityContext;\n-                securityContext = NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = authorizationPolicy;\n-                authorizationPolicy = NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = certConstraints;\n-                certConstraints = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = serviceRedirection;\n-                serviceRedirection = NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = httpServletResponse;\n-                httpServletResponse = NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = resourceMethod;\n-                resourceMethod = NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = oneWayRequest;\n-                oneWayRequest = NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = asyncResponse;\n-                asyncResponse = NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = threadContextSwitched;\n-                threadContextSwitched = NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = cacheInputProperty;\n-                cacheInputProperty = NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = previousMessage;\n-                previousMessage = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = responseHeadersCopied;\n-                responseHeadersCopied = NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = sseEventSink;\n-                sseEventSink = NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = requestorRole;\n-                requestorRole = NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = partialResponse;\n-                partialResponse = NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = emptyPartialResponse;\n-                emptyPartialResponse = NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = endpointAddress;\n-                endpointAddress = NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = inboundMessage;\n-                inboundMessage = NOT_FOUND;\n-            }\n-\n-            return ret == NOT_FOUND ? null : ret;\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n         }\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4Nzc5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403287792", "bodyText": "Should make a copy of the Map and then as you set fields instead of calling the super way of putting all, you should, remove them from the copy of the Map and only send the subset to the super.putAll", "author": "jhanders34", "createdAt": "2020-04-03T19:59:35Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -297,5 +652,1699 @@ void setContextualProperty(String key, Object v) {\n             put(key, v);\n         }\n     }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map protoHeaders) {\n+        this.protoHeaders = protoHeaders;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = protoHeaders;\n+                protoHeaders = NOT_FOUND;\n+            } else if (key == CONTENT_TYPE) {\n+                ret = contentType;\n+                contentType = NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                ret = queryString;\n+                queryString = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = httpRequest;\n+                httpRequest = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = httpResponse;\n+                httpResponse = NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = pathToMatchSlash;\n+                pathToMatchSlash = NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = httpRequestMethod;\n+                httpRequestMethod = NOT_FOUND;\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = interceptorProviders;\n+                interceptorProviders = NOT_FOUND;\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = templateParameters;\n+                templateParameters = NOT_FOUND;\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = accept;\n+                accept = NOT_FOUND;\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = continuationProvider;\n+                continuationProvider = NOT_FOUND;\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = opStack;\n+                opStack = NOT_FOUND;\n+            } else if (key == DESTINATION) {\n+                ret = destination;\n+                destination = NOT_FOUND;\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = wsdlDescription;\n+                wsdlDescription = NOT_FOUND;\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = wsdlInterface;\n+                wsdlInterface = NOT_FOUND;\n+            } else if (key == WSDL_OPERATION) {\n+                ret = wsdlOperation;\n+                wsdlOperation = NOT_FOUND;\n+            } else if (key == WSDL_PORT) {\n+                ret = wsdlPort;\n+                wsdlPort = NOT_FOUND;\n+            } else if (key == WSDL_SERVICE) {\n+                ret = wsdlService;\n+                wsdlService = NOT_FOUND;\n+            } else if (key == REQUEST_URL) {\n+                ret = requestUrl;\n+                requestUrl = NOT_FOUND;\n+            } else if (key == REQUEST_URI) {\n+                ret = requestUri;\n+                requestUri = NOT_FOUND;\n+            } else if (key == PATH_INFO) {\n+                ret = pathInfo;\n+                pathInfo = NOT_FOUND;\n+            } else if (key == BASE_PATH) {\n+                ret = basePath;\n+                basePath = NOT_FOUND;\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = fixedParamOrder;\n+                fixedParamOrder = NOT_FOUND;\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = inInterceptors;\n+                inInterceptors = NOT_FOUND;\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = outInterceptors;\n+                outInterceptors = NOT_FOUND;\n+            } else if (key == RESPONSE_CODE) {\n+                ret = responseCode;\n+                responseCode = NOT_FOUND;\n+            } else if (key == ATTACHMENTS) {\n+                ret = attachments;\n+                attachments = NOT_FOUND;\n+            } else if (key == ENCODING) {\n+                ret = encoding;\n+                encoding = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = httpContext;\n+                httpContext = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = httpConfig;\n+                httpConfig = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = httpContextMatchStrategy;\n+                httpContextMatchStrategy = NOT_FOUND;\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = httpBasePath;\n+                httpBasePath = NOT_FOUND;\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = asyncPostDispatch;\n+                asyncPostDispatch = NOT_FOUND;\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = securityContext;\n+                securityContext = NOT_FOUND;\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = authorizationPolicy;\n+                authorizationPolicy = NOT_FOUND;\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = certConstraints;\n+                certConstraints = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = serviceRedirection;\n+                serviceRedirection = NOT_FOUND;\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = httpServletResponse;\n+                httpServletResponse = NOT_FOUND;\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = resourceMethod;\n+                resourceMethod = NOT_FOUND;\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = oneWayRequest;\n+                oneWayRequest = NOT_FOUND;\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = asyncResponse;\n+                asyncResponse = NOT_FOUND;\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = threadContextSwitched;\n+                threadContextSwitched = NOT_FOUND;\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = cacheInputProperty;\n+                cacheInputProperty = NOT_FOUND;\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = previousMessage;\n+                previousMessage = NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = responseHeadersCopied;\n+                responseHeadersCopied = NOT_FOUND;\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = sseEventSink;\n+                sseEventSink = NOT_FOUND;\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = requestorRole;\n+                requestorRole = NOT_FOUND;\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = partialResponse;\n+                partialResponse = NOT_FOUND;\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = emptyPartialResponse;\n+                emptyPartialResponse = NOT_FOUND;\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = endpointAddress;\n+                endpointAddress = NOT_FOUND;\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = inboundMessage;\n+                inboundMessage = NOT_FOUND;\n+            }\n+\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T get(Class<T> key) {\n+        return (T) get(key.getName());\n+    }\n+\n+    @Override\n+    public <T> void put(Class<T> key, T value) {\n+        put(key.getName(), value);\n+    }\n+\n+    @Override\n+    public Object get(Object key) {\n+        return get((String) key);\n+    }\n+\n+    public Object get(String key) {\n+        if (KEYS.contains(key)) {\n+            if (key == PROTOCOL_HEADERS) {\n+                return getProtocolHeaders();\n+            } else if (key == CONTENT_TYPE) {\n+                return getContentType();\n+            } else if (key == QUERY_STRING) {\n+                return getQueryString();\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return getHttpRequest();\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return getHttpResponse();\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return getPathToMatchSlash();\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                return getHttpRequestMethod();\n+            } else if (key == QUERY_STRING) {\n+                return getQueryString();\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return getHttpRequest();\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return getHttpResponse();\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return getPathToMatchSlash();\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                return getInterceptorProviders();\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                return getTemplateParameters();\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                return getAccept();\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                return getContinuationProvider();\n+            } else if (key == OP_RES_INFO_STACK) {\n+                return getOperationResourceInfoStack();\n+            } else if (key == DESTINATION) {\n+                return getDestination();\n+            } else if (key == WSDL_DESCRIPTION) {\n+                return getWsdlDescription();\n+            } else if (key == WSDL_INTERFACE) {\n+                return getWsdlInterface();\n+            } else if (key == WSDL_OPERATION) {\n+                return getWsdlOperation();\n+            } else if (key == WSDL_PORT) {\n+                return getWsdlPort();\n+            } else if (key == WSDL_SERVICE) {\n+                return getWsdlService();\n+            } else if (key == REQUEST_URL) {\n+                return getRequestUrl();\n+            } else if (key == REQUEST_URI) {\n+                return getRequestUri();\n+            } else if (key == PATH_INFO) {\n+                return getPathInfo();\n+            } else if (key == BASE_PATH) {\n+                return getBasePath();\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                return getFixedParamOrder();\n+            } else if (key == IN_INTERCEPTORS) {\n+                return getInInterceptors();\n+            } else if (key == OUT_INTERCEPTORS) {\n+                return getOutInterceptors();\n+            } else if (key == RESPONSE_CODE) {\n+                return getResponseCode();\n+            } else if (key == ATTACHMENTS) {\n+                return getAttachments();\n+            } else if (key == ENCODING) {\n+                return getEncoding();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                return getHttpContext();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                return getHttpConfig();\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                return getHttpContextMatchStrategy();\n+            } else if (key == HTTP_BASE_PATH) {\n+                return getHttpBasePath();\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                return getAsyncPostDispatch();\n+            } else if (key == SECURITY_CONTEXT) {\n+                return getSecurityContext();\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                return getAuthorizationPolicy();\n+            } else if (key == CERT_CONSTRAINTS) {\n+                return getCertConstraints();\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                return getServiceRedirection();\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                return getHttpServletResponse();\n+            } else if (key == RESOURCE_METHOD) {\n+                return getResourceMethod();\n+            } else if (key == ONE_WAY_REQUEST) {\n+                return getOneWayRequest();\n+            } else if (key == ASYNC_RESPONSE) {\n+                return getAsyncResponse();\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                return getThreadContextSwitched();\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                return getCacheInputProperty();\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                return getPreviousMessage();\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                return getResponseHeadersCopied();\n+            } else if (key == SSE_EVENT_SINK) {\n+                return getSseEventSink();\n+            } else if (key == REQUESTOR_ROLE) {\n+                return getRequestorRole();\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                return getPartialResponse();\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                return getEmptyPartialResponse();\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                return getEndpointAddress();\n+            } else if (key == INBOUND_MESSAGE) {\n+                return getInboundMessage();\n+            }\n+        }\n+        \n+        return super.get(key);\n+    }\n+\n+    @Override\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public Object put(String key, Object value) {\n+        if (KEYS.contains(key)) {\n+            Object ret = null;\n+            if (key == PROTOCOL_HEADERS) {\n+                ret = getProtocolHeaders();\n+                setProtocolHeaders((Map) value);\n+            } else if (key == CONTENT_TYPE) {\n+                ret = getContentType();\n+                setContentType((String) value);\n+            } else if (key == QUERY_STRING) {\n+                ret = getQueryString();\n+                setQueryString((String) value);\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                ret = getHttpRequest();\n+                setHttpRequest(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                ret = getHttpResponse();\n+                setHttpResponse(value);\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                ret = getPathToMatchSlash();\n+                setPathToMatchSlash((String) value);\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                ret = getHttpRequestMethod();\n+                setHttpRequestMethod((String) value);\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                ret = getInterceptorProviders();\n+                setInterceptorProviders((Collection) value);\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                ret = getTemplateParameters();\n+                setTemplateParameters(value);\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                ret = getAccept();\n+                setAccept(value);\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                ret = getContinuationProvider();\n+                setContinuationProvider(value);\n+            } else if (key == OP_RES_INFO_STACK) {\n+                ret = getOperationResourceInfoStack();\n+                setOperationResourceInfoStack(value);\n+            } else if (key == DESTINATION) {\n+                ret = getDestination();\n+                setDestination((Destination) value);\n+            } else if (key == WSDL_DESCRIPTION) {\n+                ret = getWsdlDescription();\n+                setWsdlDescription(value);\n+            } else if (key == WSDL_INTERFACE) {\n+                ret = getWsdlInterface();\n+                setWsdlInterface(value);\n+            } else if (key == WSDL_OPERATION) {\n+                ret = getWsdlOperation();\n+                setWsdlOperation(value);\n+            } else if (key == WSDL_PORT) {\n+                ret = getWsdlPort();\n+                setWsdlPort(value);\n+            } else if (key == WSDL_SERVICE) {\n+                ret = getWsdlService();\n+                setWsdlService(value);\n+            } else if (key == REQUEST_URL) {\n+                ret = getRequestUrl();\n+                setRequestUrl(value);\n+            } else if (key == REQUEST_URI) {\n+                ret = getRequestUri();\n+                setRequestUri(value);\n+            } else if (key == PATH_INFO) {\n+                ret = getPathInfo();\n+                setPathInfo(value);\n+            } else if (key == BASE_PATH) {\n+                ret = getBasePath();\n+                setBasePath(value);\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                ret = getFixedParamOrder();\n+                setFixedParamOrder(value);\n+            } else if (key == IN_INTERCEPTORS) {\n+                ret = getInInterceptors();\n+                setInInterceptors(value);\n+            } else if (key == OUT_INTERCEPTORS) {\n+                ret = getOutInterceptors();\n+                setOutInterceptors(value);\n+            } else if (key == RESPONSE_CODE) {\n+                ret = getResponseCode();\n+                setResponseCode(value);\n+            } else if (key == ATTACHMENTS) {\n+                ret = getAttachments();\n+                setAttachments((Collection<Attachment>) value);\n+            } else if (key == ENCODING) {\n+                ret = getEncoding();\n+                setEncoding(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                ret = getHttpContext();\n+                setHttpContext(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                ret = getHttpConfig();\n+                setHttpConfig(value);\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                ret = getHttpContextMatchStrategy();\n+                setHttpContextMatchStrategy(value);\n+            } else if (key == HTTP_BASE_PATH) {\n+                ret = getHttpBasePath();\n+                setHttpBasePath(value);\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                ret = getAsyncPostDispatch();\n+                setAsyncPostDispatch(value);\n+            } else if (key == SECURITY_CONTEXT) {\n+                ret = getSecurityContext();\n+                setSecurityContext(value);\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                ret = getAuthorizationPolicy();\n+                setAuthorizationPolicy(value);\n+            } else if (key == CERT_CONSTRAINTS) {\n+                ret = getCertConstraints();\n+                setCertConstraints(value);\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                ret = getServiceRedirection();\n+                setServiceRedirection(value);\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                ret = getHttpServletResponse();\n+                setHttpServletResponse(value);\n+            } else if (key == RESOURCE_METHOD) {\n+                ret = getResourceMethod();\n+                setResourceMethod(value);\n+            } else if (key == ONE_WAY_REQUEST) {\n+                ret = getOneWayRequest();\n+                setOneWayRequest(value);\n+            } else if (key == ASYNC_RESPONSE) {\n+                ret = getAsyncResponse();\n+                setAsyncResponse(value);\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                ret = getThreadContextSwitched();\n+                setThreadContextSwitched(value);\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                ret = getCacheInputProperty();\n+                setCacheInputProperty(value);\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                ret = getPreviousMessage();\n+                setPreviousMessage(value);\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                ret = getResponseHeadersCopied();\n+                setResponseHeadersCopied(value);\n+            } else if (key == SSE_EVENT_SINK) {\n+                ret = getSseEventSink();\n+                setSseEventSink(value);\n+            } else if (key == REQUESTOR_ROLE) {\n+                ret = getRequestorRole();\n+                setRequestorRole(value);\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                ret = getPartialResponse();\n+                setPartialResponse(value);\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                ret = getEmptyPartialResponse();\n+                setEmptyPartialResponse(value);\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                ret = getEndpointAddress();\n+                setEndpointAddress(value);\n+            } else if (key == INBOUND_MESSAGE) {\n+                ret = getInboundMessage();\n+                setInboundMessage(value);\n+            }\n+            return ret == NOT_FOUND ? null : ret;\n+        }\n+\n+        return super.put(key, value);\n+    }\n+\n+    @Override\n+    public Set<String> keySet() {\n+        Set<String> keys = super.keySet();\n+        if (protoHeaders != NOT_FOUND) {\n+            keys.add(PROTOCOL_HEADERS);\n+        } \n+        if (contentType != NOT_FOUND) {\n+            keys.add(CONTENT_TYPE);\n+        }\n+        if (queryString != NOT_FOUND) {\n+            keys.add(QUERY_STRING);\n+        }\n+        if (httpRequest != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n+        }\n+        if (httpResponse != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n+        }\n+        if (pathToMatchSlash != NOT_FOUND) {\n+            keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n+        }\n+        if (httpRequestMethod != NOT_FOUND) {\n+            keys.add(HTTP_REQUEST_METHOD);\n+        }\n+        if (interceptorProviders != NOT_FOUND) {\n+            keys.add(INTERCEPTOR_PROVIDERS);\n+        }\n+        if (templateParameters != NOT_FOUND) {\n+            keys.add(TEMPLATE_PARAMETERS);\n+        }\n+        if (accept != NOT_FOUND) {\n+            keys.add(ACCEPT_CONTENT_TYPE);\n+        }\n+        if (continuationProvider != NOT_FOUND) {\n+            keys.add(CONTINUATION_PROVIDER);\n+        }\n+        if (opStack != NOT_FOUND) {\n+            keys.add(OP_RES_INFO_STACK);\n+        }\n+        if (destination != NOT_FOUND) {\n+            keys.add(DESTINATION);\n+        }\n+        if (wsdlDescription != NOT_FOUND) {\n+            keys.add(WSDL_DESCRIPTION);\n+        }\n+        if (wsdlInterface != NOT_FOUND) {\n+            keys.add(WSDL_INTERFACE);\n+        }\n+        if (wsdlOperation != NOT_FOUND) {\n+            keys.add(WSDL_OPERATION);\n+        }\n+        if (wsdlPort != NOT_FOUND) {\n+            keys.add(WSDL_PORT);\n+        }\n+        if (wsdlService != NOT_FOUND) {\n+            keys.add(WSDL_SERVICE);\n+        }\n+        if (requestUrl != NOT_FOUND) {\n+            keys.add(REQUEST_URL);\n+        }\n+        if (requestUri != NOT_FOUND) {\n+            keys.add(REQUEST_URI);\n+        }\n+        if (pathInfo != NOT_FOUND) {\n+            keys.add(PATH_INFO);\n+        }\n+        if (basePath != NOT_FOUND) {\n+            keys.add(BASE_PATH);\n+        }\n+        if (fixedParamOrder != NOT_FOUND) {\n+            keys.add(FIXED_PARAMETER_ORDER);\n+        }\n+        if (inInterceptors != NOT_FOUND) {\n+            keys.add(IN_INTERCEPTORS);\n+        }\n+        if (outInterceptors != NOT_FOUND) {\n+            keys.add(OUT_INTERCEPTORS);\n+        }\n+        if (responseCode != NOT_FOUND) {\n+            keys.add(RESPONSE_CODE);\n+        }\n+        if (attachments != NOT_FOUND) {\n+            keys.add(ATTACHMENTS);\n+        }\n+        if (encoding != NOT_FOUND) {\n+            keys.add(ENCODING);\n+        }\n+        if (httpContext != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n+        }\n+        if (httpConfig != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n+        }\n+        if (httpContextMatchStrategy != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n+        }\n+        if (httpBasePath != NOT_FOUND) {\n+            keys.add(HTTP_BASE_PATH);\n+        }\n+        if (asyncPostDispatch != NOT_FOUND) {\n+            keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n+        }\n+        if (securityContext != NOT_FOUND) {\n+            keys.add(SECURITY_CONTEXT);\n+        }\n+        if (authorizationPolicy != NOT_FOUND) {\n+            keys.add(AUTHORIZATION_POLICY);\n+        }\n+        if (certConstraints != NOT_FOUND) {\n+            keys.add(CERT_CONSTRAINTS);\n+        }\n+        if (serviceRedirection != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n+        }\n+        if (httpServletResponse != NOT_FOUND) {\n+            keys.add(HTTP_SERVLET_RESPONSE);\n+        }\n+        if (resourceMethod != NOT_FOUND) {\n+            keys.add(RESOURCE_METHOD);\n+        }\n+        if (oneWayRequest != NOT_FOUND) {\n+            keys.add(ONE_WAY_REQUEST);\n+        }\n+        if (asyncResponse != NOT_FOUND) {\n+            keys.add(ASYNC_RESPONSE);\n+        }\n+        if (threadContextSwitched != NOT_FOUND) {\n+            keys.add(THREAD_CONTEXT_SWITCHED);\n+        }\n+        if (cacheInputProperty != NOT_FOUND) {\n+            keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n+        }\n+        if (previousMessage != NOT_FOUND) {\n+            keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n+        }\n+        if (responseHeadersCopied != NOT_FOUND) {\n+            keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n+        }\n+        if (sseEventSink != NOT_FOUND) {\n+            keys.add(SSE_EVENT_SINK);\n+        }\n+        if (requestorRole != NOT_FOUND) {\n+            keys.add(REQUESTOR_ROLE);\n+        }\n+        if (partialResponse != NOT_FOUND) {\n+            keys.add(PARTIAL_RESPONSE_MESSAGE);\n+        }\n+        if (emptyPartialResponse != NOT_FOUND) {\n+            keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n+        }\n+        if (endpointAddress != NOT_FOUND) {\n+            keys.add(ENDPOINT_ADDRESS);\n+        }\n+        if (inboundMessage != NOT_FOUND) {\n+            keys.add(INBOUND_MESSAGE);\n+        }\n+\n+        return keys;\n+    }\n+    \n+    @Override\n+    public Set<Map.Entry<String,Object>> entrySet() {\n+        Set<Map.Entry<String,Object>> entrySet = super.entrySet();\n+        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>();\n+        myEntrySet.addAll(entrySet);\n+        Map.Entry<String,Object> entry;\n+        if (protoHeaders != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(PROTOCOL_HEADERS, protoHeaders);\n+            myEntrySet.add(entry);\n+        } \n+        if (contentType != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(CONTENT_TYPE, contentType);\n+            myEntrySet.add(entry);\n+        }\n+        if (queryString != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(QUERY_STRING, queryString);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpRequest != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpResponse != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n+            myEntrySet.add(entry);\n+        }\n+        if (pathToMatchSlash != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpRequestMethod != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_REQUEST_METHOD, httpRequestMethod);\n+            myEntrySet.add(entry);\n+        }\n+        if (interceptorProviders != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(INTERCEPTOR_PROVIDERS, interceptorProviders);\n+            myEntrySet.add(entry);\n+        }\n+        if (templateParameters != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(TEMPLATE_PARAMETERS, templateParameters);\n+            myEntrySet.add(entry);\n+        }\n+        if (accept != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ACCEPT_CONTENT_TYPE, accept);\n+            myEntrySet.add(entry);\n+        }\n+        if (continuationProvider != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(CONTINUATION_PROVIDER, continuationProvider);\n+            myEntrySet.add(entry);\n+        }\n+        if (opStack != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(OP_RES_INFO_STACK, opStack);\n+            myEntrySet.add(entry);\n+        }\n+        if (destination != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(DESTINATION, destination);\n+            myEntrySet.add(entry);\n+        }\n+        if (wsdlDescription != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_DESCRIPTION, wsdlDescription);\n+            myEntrySet.add(entry);\n+        }\n+        if (wsdlInterface != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_INTERFACE, wsdlInterface);\n+            myEntrySet.add(entry);\n+        }\n+        if (wsdlOperation != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_OPERATION, wsdlOperation);\n+            myEntrySet.add(entry);\n+        }\n+        if (wsdlPort != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_PORT, wsdlPort);\n+            myEntrySet.add(entry);\n+        }\n+        if (wsdlService != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_SERVICE, wsdlService);\n+            myEntrySet.add(entry);\n+        }\n+        if (requestUrl != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URL, requestUrl);\n+            myEntrySet.add(entry);\n+        }\n+        if (requestUri != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URI, requestUri);\n+            myEntrySet.add(entry);\n+        }\n+        if (pathInfo != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(PATH_INFO, pathInfo);\n+            myEntrySet.add(entry);\n+        }\n+        if (basePath != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(BASE_PATH, basePath);\n+            myEntrySet.add(entry);\n+        }\n+        if (fixedParamOrder != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(FIXED_PARAMETER_ORDER, fixedParamOrder);\n+            myEntrySet.add(entry);\n+        }\n+        if (inInterceptors != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(IN_INTERCEPTORS, inInterceptors);\n+            myEntrySet.add(entry);\n+        }\n+        if (outInterceptors != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(OUT_INTERCEPTORS, outInterceptors);\n+            myEntrySet.add(entry);\n+        }\n+        if (responseCode != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(RESPONSE_CODE, responseCode);\n+            myEntrySet.add(entry);\n+        }\n+        if (attachments != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ATTACHMENTS, attachments);\n+            myEntrySet.add(entry);\n+        }\n+        if (encoding != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ENCODING, encoding);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpContext != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpConfig != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpContextMatchStrategy != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpBasePath != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_BASE_PATH, httpBasePath);\n+            myEntrySet.add(entry);\n+        }\n+        if (asyncPostDispatch != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n+            myEntrySet.add(entry);\n+        }\n+        if (securityContext != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(SECURITY_CONTEXT, securityContext);\n+            myEntrySet.add(entry);\n+        }\n+        if (authorizationPolicy != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AUTHORIZATION_POLICY, authorizationPolicy);\n+            myEntrySet.add(entry);\n+        }\n+        if (certConstraints != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(CERT_CONSTRAINTS, certConstraints);\n+            myEntrySet.add(entry);\n+        }\n+        if (serviceRedirection != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n+            myEntrySet.add(entry);\n+        }\n+        if (httpServletResponse != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_SERVLET_RESPONSE, httpServletResponse);\n+            myEntrySet.add(entry);\n+        }\n+        if (resourceMethod != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(RESOURCE_METHOD, resourceMethod);\n+            myEntrySet.add(entry);\n+        }\n+        if (oneWayRequest != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ONE_WAY_REQUEST, oneWayRequest);\n+            myEntrySet.add(entry);\n+        }\n+        if (asyncResponse != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_RESPONSE, asyncResponse);\n+            myEntrySet.add(entry);\n+        }\n+        if (threadContextSwitched != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n+            myEntrySet.add(entry);\n+        }\n+        if (cacheInputProperty != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n+            myEntrySet.add(entry);\n+        }\n+        if (previousMessage != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n+            myEntrySet.add(entry);\n+        }\n+        if (responseHeadersCopied != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n+            myEntrySet.add(entry);\n+        }\n+        if (sseEventSink != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(SSE_EVENT_SINK, sseEventSink);\n+            myEntrySet.add(entry);\n+        }\n+        if (requestorRole != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(REQUESTOR_ROLE, requestorRole);\n+            myEntrySet.add(entry);\n+        }\n+        if (partialResponse != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n+            myEntrySet.add(entry);\n+        }\n+        if (emptyPartialResponse != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n+            myEntrySet.add(entry);\n+        }\n+        if (endpointAddress != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(ENDPOINT_ADDRESS, endpointAddress);\n+            myEntrySet.add(entry);\n+        }\n+        if (inboundMessage != NOT_FOUND) {\n+            entry = new AbstractMap.SimpleEntry<String,Object>(INBOUND_MESSAGE, inboundMessage);\n+            myEntrySet.add(entry);\n+        }\n+        return myEntrySet;\n+    }\n+    \n+    @Override\n+    public boolean containsKey(Object key) {\n+        if (KEYS.contains(key)) {\n+            if (key == PROTOCOL_HEADERS) {\n+                return protoHeaders != NOT_FOUND;\n+            } else if (key == CONTENT_TYPE) {\n+                return contentType != NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                return queryString != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return httpRequest != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return httpResponse != NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return pathToMatchSlash != NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                return contentType != NOT_FOUND;\n+            } else if (key == QUERY_STRING) {\n+                return queryString != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n+                return httpRequest != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n+                return httpResponse != NOT_FOUND;\n+            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n+                return pathToMatchSlash != NOT_FOUND;\n+            } else if (key == HTTP_REQUEST_METHOD) {\n+                return httpRequestMethod != NOT_FOUND;\n+            } else if (key == INTERCEPTOR_PROVIDERS) {\n+                return interceptorProviders != NOT_FOUND;\n+            } else if (key == TEMPLATE_PARAMETERS) {\n+                return templateParameters != NOT_FOUND;\n+            } else if (key == ACCEPT_CONTENT_TYPE) {\n+                return accept != NOT_FOUND;\n+            } else if (key == CONTINUATION_PROVIDER) {\n+                return continuationProvider != NOT_FOUND;\n+            } else if (key == OP_RES_INFO_STACK) {\n+                return opStack != NOT_FOUND;\n+            } else if (key == DESTINATION) {\n+                return destination != NOT_FOUND;\n+            } else if (key == WSDL_DESCRIPTION) {\n+                return wsdlDescription != NOT_FOUND;\n+            } else if (key == WSDL_INTERFACE) {\n+                return wsdlInterface != NOT_FOUND;\n+            } else if (key == WSDL_OPERATION) {\n+                return wsdlOperation != NOT_FOUND;\n+            } else if (key == WSDL_PORT) {\n+                return wsdlPort != NOT_FOUND;\n+            } else if (key == WSDL_SERVICE) {\n+                return wsdlService != NOT_FOUND;\n+            } else if (key == REQUEST_URL) {\n+                return requestUrl != NOT_FOUND;\n+            } else if (key == REQUEST_URI) {\n+                return requestUri != NOT_FOUND;\n+            } else if (key == PATH_INFO) {\n+                return pathInfo != NOT_FOUND;\n+            } else if (key == BASE_PATH) {\n+                return basePath != NOT_FOUND;\n+            } else if (key == FIXED_PARAMETER_ORDER) {\n+                return fixedParamOrder != NOT_FOUND;\n+            } else if (key == IN_INTERCEPTORS) {\n+                return inInterceptors != NOT_FOUND;\n+            } else if (key == OUT_INTERCEPTORS) {\n+                return outInterceptors != NOT_FOUND;\n+            } else if (key == RESPONSE_CODE) {\n+                return responseCode != NOT_FOUND;\n+            } else if (key == ATTACHMENTS) {\n+                return attachments != NOT_FOUND;\n+            } else if (key == ENCODING) {\n+                return encoding != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n+                return httpContext != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n+                return httpConfig != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n+                return httpContextMatchStrategy != NOT_FOUND;\n+            } else if (key == HTTP_BASE_PATH) {\n+                return httpBasePath != NOT_FOUND;\n+            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n+                return asyncPostDispatch != NOT_FOUND;\n+            } else if (key == SECURITY_CONTEXT) {\n+                return securityContext != NOT_FOUND;\n+            } else if (key == AUTHORIZATION_POLICY) {\n+                return authorizationPolicy != NOT_FOUND;\n+            } else if (key == CERT_CONSTRAINTS) {\n+                return certConstraints != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n+                return serviceRedirection != NOT_FOUND;\n+            } else if (key == HTTP_SERVLET_RESPONSE) {\n+                return httpServletResponse != NOT_FOUND;\n+            } else if (key == RESOURCE_METHOD) {\n+                return resourceMethod != NOT_FOUND;\n+            } else if (key == ONE_WAY_REQUEST) {\n+                return oneWayRequest != NOT_FOUND;\n+            } else if (key == ASYNC_RESPONSE) {\n+                return asyncResponse != NOT_FOUND;\n+            } else if (key == THREAD_CONTEXT_SWITCHED) {\n+                return threadContextSwitched != NOT_FOUND;\n+            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n+                return cacheInputProperty != NOT_FOUND;\n+            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n+                return previousMessage != NOT_FOUND;\n+            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n+                return responseHeadersCopied != NOT_FOUND;\n+            } else if (key == SSE_EVENT_SINK) {\n+                return sseEventSink != NOT_FOUND;\n+            } else if (key == REQUESTOR_ROLE) {\n+                return requestorRole != NOT_FOUND;\n+            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n+                return partialResponse != NOT_FOUND;\n+            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n+                return emptyPartialResponse != NOT_FOUND;\n+            } else if (key == ENDPOINT_ADDRESS) {\n+                return endpointAddress != NOT_FOUND;\n+            } else if (key == INBOUND_MESSAGE) {\n+                return inboundMessage != NOT_FOUND;\n+            }\n+        }\n+        return super.containsKey(key);\n+    }\n+    @Override\n+    public void putAll(Map<? extends String, ? extends Object> m) {", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2OTA0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405169049", "bodyText": "Excellent solution.", "author": "jhanders34", "createdAt": "2020-04-07T23:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4Nzc5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -648,479 +470,55 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n-        }\n+        putIfAbsent(key, v);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n     public Map getProtocolHeaders() {\n-        return protoHeaders == NOT_FOUND ? null : (Map) protoHeaders;\n+        return (Map) getFromPropertyArray(protoHeaders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setProtocolHeaders(Map protoHeaders) {\n-        this.protoHeaders = protoHeaders;\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n     }\n     \n     @Override\n     public Object remove(Object key) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = protoHeaders;\n-                protoHeaders = NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                ret = contentType;\n-                contentType = NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                ret = queryString;\n-                queryString = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = httpRequest;\n-                httpRequest = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = httpResponse;\n-                httpResponse = NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = pathToMatchSlash;\n-                pathToMatchSlash = NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = httpRequestMethod;\n-                httpRequestMethod = NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = interceptorProviders;\n-                interceptorProviders = NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = templateParameters;\n-                templateParameters = NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = accept;\n-                accept = NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = continuationProvider;\n-                continuationProvider = NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = opStack;\n-                opStack = NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                ret = destination;\n-                destination = NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = wsdlDescription;\n-                wsdlDescription = NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = wsdlInterface;\n-                wsdlInterface = NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                ret = wsdlOperation;\n-                wsdlOperation = NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                ret = wsdlPort;\n-                wsdlPort = NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                ret = wsdlService;\n-                wsdlService = NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                ret = requestUrl;\n-                requestUrl = NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                ret = requestUri;\n-                requestUri = NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                ret = pathInfo;\n-                pathInfo = NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                ret = basePath;\n-                basePath = NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = fixedParamOrder;\n-                fixedParamOrder = NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = inInterceptors;\n-                inInterceptors = NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = outInterceptors;\n-                outInterceptors = NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                ret = responseCode;\n-                responseCode = NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                ret = attachments;\n-                attachments = NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                ret = encoding;\n-                encoding = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = httpContext;\n-                httpContext = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = httpConfig;\n-                httpConfig = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = httpContextMatchStrategy;\n-                httpContextMatchStrategy = NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = httpBasePath;\n-                httpBasePath = NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = asyncPostDispatch;\n-                asyncPostDispatch = NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = securityContext;\n-                securityContext = NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = authorizationPolicy;\n-                authorizationPolicy = NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = certConstraints;\n-                certConstraints = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = serviceRedirection;\n-                serviceRedirection = NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = httpServletResponse;\n-                httpServletResponse = NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = resourceMethod;\n-                resourceMethod = NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = oneWayRequest;\n-                oneWayRequest = NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = asyncResponse;\n-                asyncResponse = NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = threadContextSwitched;\n-                threadContextSwitched = NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = cacheInputProperty;\n-                cacheInputProperty = NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = previousMessage;\n-                previousMessage = NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = responseHeadersCopied;\n-                responseHeadersCopied = NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = sseEventSink;\n-                sseEventSink = NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = requestorRole;\n-                requestorRole = NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = partialResponse;\n-                partialResponse = NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = emptyPartialResponse;\n-                emptyPartialResponse = NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = endpointAddress;\n-                endpointAddress = NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = inboundMessage;\n-                inboundMessage = NOT_FOUND;\n-            }\n-\n-            return ret == NOT_FOUND ? null : ret;\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n         }\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMzg0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r403303846", "bodyText": "I think there are additional methods that need to be implemented:  size, clear, isEmpty, containsValue, equals, hashCode, getOrDefault, forEach, replaceAll, putIfAbsent, remove(Object, Object), replace, computeIfAbsent, computerIfPresent, compute, merge.  We may want to just implement them and have them return UnsupportedOperationException if we don't think they are called by CXF.", "author": "jhanders34", "createdAt": "2020-04-03T20:21:18Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -19,18 +19,28 @@\n \n package org.apache.cxf.message;\n \n+import java.util.AbstractMap;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n+import javax.servlet.http.HttpServletResponse;\n+\n import org.apache.cxf.Bus;\n+import org.apache.cxf.configuration.security.AuthorizationPolicy;\n+import org.apache.cxf.continuations.ContinuationProvider;\n import org.apache.cxf.endpoint.Endpoint;\n-import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.interceptor.InterceptorChain;\n+import org.apache.cxf.interceptor.OutgoingChainInterceptor;\n+import org.apache.cxf.phase.PhaseInterceptorChain;\n+import org.apache.cxf.security.SecurityContext;\n import org.apache.cxf.service.Service;\n import org.apache.cxf.service.model.EndpointInfo;\n import org.apache.cxf.transport.Destination;\n+import org.apache.cxf.transport.http.AbstractHTTPDestination;\n+import org.apache.cxf.transport.https.CertConstraints;\n \n public class MessageImpl extends StringMapImpl implements Message {", "originalCommit": "5c03e4e660a753213cdec52f407b2941011d9719", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2OTQ4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405169481", "bodyText": "So you implemented some as throwing UnsupportedOperationException. Was that intentional or you plan to implement those still?", "author": "jhanders34", "createdAt": "2020-04-07T23:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMzg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 9ae7c4454a..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -19,12 +19,22 @@\n \n package org.apache.cxf.message;\n \n+import java.util.AbstractCollection;\n import java.util.AbstractMap;\n+import java.util.AbstractSet;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n+import java.util.Spliterator;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n \n import javax.servlet.http.HttpServletResponse;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MzkyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405153927", "bodyText": "This can be significantly simplified:\nDefine your propertyNames during the declaration of the field, i.e.\npropertyNames = {CONTENT_TYPE, PROTOCOL_HEADERS, ...\nThen in the static initialize you can easily just do a for loop:\nfor (int i = 0; i < TOTAL; ++i) {\nkeymap.put(propertyNames[i], i);\n}", "author": "jhanders34", "createdAt": "2020-04-07T22:37:28Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -119,72 +126,133 @@\n     private static final String RESOURCE_METHOD = \"org.apache.cxf.resource.method\";\n     private static final String ASYNC_RESPONSE = \"javax.ws.rs.container.AsyncResponse\";\n     private static final String SSE_EVENT_SINK = \"javax.ws.rs.sse.SseEventSink\";\n-    private static final Set<String> KEYS;\n+    private static final Map<String, Integer> KEYMAP;\n+    private static String[] propertyNames = new String[TOTAL];\n \n+    private static final Object NOT_FOUND = new Object();\n+    private static final Integer KEY_NOT_FOUND = Integer.valueOf(-1);\n+    \n     static {\n-        Set<String> keys = new HashSet<String>();\n-        keys.add(CONTENT_TYPE);\n-        keys.add(PROTOCOL_HEADERS);\n-        keys.add(QUERY_STRING);\n-        keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n-        keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n-        keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n-        keys.add(HTTP_REQUEST_METHOD);\n-        keys.add(INTERCEPTOR_PROVIDERS);\n-        keys.add(TEMPLATE_PARAMETERS);\n-        keys.add(ACCEPT_CONTENT_TYPE);\n-        keys.add(CONTINUATION_PROVIDER);\n-        keys.add(DESTINATION);\n-        keys.add(OP_RES_INFO_STACK);\n-        keys.add(WSDL_DESCRIPTION);\n-        keys.add(WSDL_INTERFACE);\n-        keys.add(WSDL_OPERATION);\n-        keys.add(WSDL_PORT);\n-        keys.add(WSDL_SERVICE);\n-        keys.add(REQUEST_URL);\n-        keys.add(REQUEST_URI);\n-        keys.add(PATH_INFO);\n-        keys.add(BASE_PATH);\n-        keys.add(FIXED_PARAMETER_ORDER);\n-        keys.add(IN_INTERCEPTORS);\n-        keys.add(OUT_INTERCEPTORS);\n-        keys.add(RESPONSE_CODE);\n-        keys.add(ATTACHMENTS);\n-        keys.add(ENCODING);\n-        keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n-        keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n-        keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        keys.add(HTTP_BASE_PATH);\n-        keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n-        keys.add(SECURITY_CONTEXT);\n-        keys.add(AUTHORIZATION_POLICY);\n-        keys.add(CERT_CONSTRAINTS);\n-        keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        keys.add(HTTP_SERVLET_RESPONSE);\n-        keys.add(RESOURCE_METHOD);\n-        keys.add(ONE_WAY_REQUEST);\n-        keys.add(ASYNC_RESPONSE);\n-        keys.add(THREAD_CONTEXT_SWITCHED);\n-        keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        keys.add(SSE_EVENT_SINK);\n-        keys.add(REQUESTOR_ROLE);\n-        keys.add(PARTIAL_RESPONSE_MESSAGE);\n-        keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        keys.add(ENDPOINT_ADDRESS);\n-        keys.add(INBOUND_MESSAGE);\n-        KEYS = Collections.unmodifiableSet(keys);\n+        Map<String, Integer> keymap = new HashMap<String, Integer>(TOTAL);", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -127,115 +132,71 @@ public class MessageImpl extends StringMapImpl implements Message {\n     private static final String ASYNC_RESPONSE = \"javax.ws.rs.container.AsyncResponse\";\n     private static final String SSE_EVENT_SINK = \"javax.ws.rs.sse.SseEventSink\";\n     private static final Map<String, Integer> KEYMAP;\n-    private static String[] propertyNames = new String[TOTAL];\n+    private static final String[] propertyNames = { CONTENT_TYPE, PROTOCOL_HEADERS, QUERY_STRING, AbstractHTTPDestination.HTTP_REQUEST,\n+                    AbstractHTTPDestination.HTTP_RESPONSE, REQUEST_PATH_TO_MATCH_SLASH, HTTP_REQUEST_METHOD, INTERCEPTOR_PROVIDERS,\n+                    TEMPLATE_PARAMETERS, ACCEPT_CONTENT_TYPE, CONTINUATION_PROVIDER, DESTINATION, OP_RES_INFO_STACK, WSDL_DESCRIPTION,\n+                    WSDL_INTERFACE, WSDL_OPERATION, WSDL_PORT, WSDL_SERVICE, REQUEST_URL, REQUEST_URI, PATH_INFO, BASE_PATH,\n+                    FIXED_PARAMETER_ORDER, IN_INTERCEPTORS, OUT_INTERCEPTORS, RESPONSE_CODE, ATTACHMENTS, ENCODING,\n+                    AbstractHTTPDestination.HTTP_CONTEXT, AbstractHTTPDestination.HTTP_CONFIG, AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY,\n+                    HTTP_BASE_PATH, ASYNC_POST_RESPONSE_DISPATCH, SECURITY_CONTEXT, AUTHORIZATION_POLICY, CERT_CONSTRAINTS,\n+                    AbstractHTTPDestination.SERVICE_REDIRECTION, HTTP_SERVLET_RESPONSE, RESOURCE_METHOD, ONE_WAY_REQUEST, ASYNC_RESPONSE,\n+                    THREAD_CONTEXT_SWITCHED, OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, PhaseInterceptorChain.PREVIOUS_MESSAGE,\n+                    AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, SSE_EVENT_SINK, REQUESTOR_ROLE, PARTIAL_RESPONSE_MESSAGE,\n+                    EMPTY_PARTIAL_RESPONSE_MESSAGE, ENDPOINT_ADDRESS, INBOUND_MESSAGE };\n \n     private static final Object NOT_FOUND = new Object();\n     private static final Integer KEY_NOT_FOUND = Integer.valueOf(-1);\n+\n+    private static String[] getters = new String[] { \"getContentType\", \"getProtocolHeaders\", \"getQueryString\", \"getHttpRequest\", \"getHttpResponse\",\n+                                              \"getPathToMatchSlash\", \"getHttpRequestMethod\", \"getInterceptorProviders\", \"getTemplateParameters\",\n+                                              \"getAccept\", \"getContinuationProvider\", \"getDestination\", \"getOperationResourceInfoStack\", \"getWsdlDescription\", \n+                                              \"getWsdlInterface\", \"getWsdlOperation\", \"getWsdlPort\", \"getWsdlService\", \"getRequestUrl\", \"getRequestUri\", \n+                                              \"getPathInfo\", \"getBasePath\", \"getFixedParamOrder\", \"getInInterceptors\", \"getOutInterceptors\", \"getResponseCode\",\n+                                              \"getAttachments\", \"getEncoding\", \"getHttpContext\", \"getHttpConfig\", \"getHttpContextMatchStrategy\", \"getHttpBasePath\",\n+                                              \"getAsyncPostDispatch\", \"getSecurityContext\", \"getAuthorizationPolicy\", \"getCertConstraints\", \n+                                              \"getServiceRedirection\", \"getHttpServletResponse\", \"getResourceMethod\", \"getOneWayRequest\", \"getAsyncResponse\",\n+                                              \"getThreadContextSwitched\", \"getCacheInputProperty\", \"getPreviousMessage\", \"getResponseHeadersCopied\", \n+                                              \"getSseEventSink\", \"getRequestorRole\", \"getPartialResponse\", \"getEmptyPartialResponse\", \"getEndpointAddress\", \n+                                              \"getInboundMessage\" };\n+        \n+    private static String[] setters = new String[] { \"setContentType\", \"setProtocolHeaders\", \"setQueryString\", \"setHttpRequest\", \"setHttpResponse\", \"setPathToMatchSlash\",\n+                                             \"setHttpRequestMethod\", \"setInterceptorProviders\", \"setTemplateParameters\", \"setAccept\", \"setContinuationProvider\",\n+                                             \"setDestination\", \"setOperationResourceInfoStack\", \"setWsdlDescription\", \"setWsdlInterface\", \"setWsdlOperation\",\n+                                             \"setWsdlPort\", \"setWsdlService\", \"setRequestUrl\", \"setRequestUri\", \"setPathInfo\", \"setBasePath\", \"setFixedParamOrder\",\n+                                             \"setInInterceptors\", \"setOutInterceptors\", \"setResponseCode\", \"setAttachments\", \"setEncoding\", \"setHttpContext\",\n+                                             \"setHttpConfig\", \"setHttpContextMatchStrategy\", \"setHttpBasePath\", \"setAsyncPostDispatch\", \"setSecurityContext\",\n+                                             \"setAuthorizationPolicy\", \"setCertConstraints\", \"setServiceRedirection\", \"setHttpServletResponse\", \"setResourceMethod\",\n+                                             \"setOneWayRequest\", \"setAsyncResponse\", \"setThreadContextSwitched\", \"setCacheInputProperty\", \"setPreviousMessage\",\n+                                             \"setResponseHeadersCopied\", \"setSseEventSink\", \"setRequestorRole\", \"setPartialResponse\", \"setEmptyPartialResponse\",\n+                                             \"setEndpointAddress\", \"setInboundMessage\" };\n+    \n+    private static String[] removes = new String[] { \"removeContentType\", null, null, \"removeHttpRequest\", \"removeHttpResponse\", \"removePathToMatchSlash\", null, null, null, \n+                                             null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n+                                             null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n+                                             null, null };\n+    \n+    private static String[] contains = new String[] { \"containsContentType\", null, null, \"containsHttpRequest\", null, null, null, null, null, null, null, null, null, null,\n+                                              null, null, null, null, null, null, null, \"containsBasePath\", null, null, null, null, null, null, null, null, null, \n+                                              null, null, null, null, null, null, null, null, null, null, null, null, \"containsPreviousMessage\", null, null, null, \n+                                              null, null, null, null };\n+    \n+    private static Class<?>[] types =  new Class[] { String.class, Map.class, String.class, Object.class, Object.class, String.class, String.class, Collection.class, \n+                                             Object.class, Object.class, Object.class, Destination.class, Object.class, Object.class, Object.class, Object.class, \n+                                             Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, \n+                                             Object.class, Object.class, Collection.class, Object.class, Object.class, Object.class, Object.class, Object.class, \n+                                             Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, \n+                                             Object.class, Object.class, Object.class, Object.class, Object.class,  Object.class, Object.class, Object.class, \n+                                             Object.class, Object.class, Object.class };\n+    \n+    private Collection<Object> values = null;\n+    private Set<String> keySet = null;\n+    private Set<Map.Entry<String, Object>> entrySet = null;\n     \n     static {\n         Map<String, Integer> keymap = new HashMap<String, Integer>(TOTAL);\n-        propertyNames[contentType] = CONTENT_TYPE;\n-        keymap.put(CONTENT_TYPE, contentType);\n-        propertyNames[protoHeaders] = PROTOCOL_HEADERS;\n-        keymap.put(PROTOCOL_HEADERS, protoHeaders);\n-        propertyNames[queryString] = QUERY_STRING;\n-        keymap.put(QUERY_STRING, queryString);\n-        propertyNames[httpRequest] = AbstractHTTPDestination.HTTP_REQUEST;\n-        keymap.put(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n-        propertyNames[httpResponse] = AbstractHTTPDestination.HTTP_RESPONSE;\n-        keymap.put(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n-        propertyNames[pathToMatchSlash] = REQUEST_PATH_TO_MATCH_SLASH;\n-        keymap.put(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n-        propertyNames[httpRequestMethod] = HTTP_REQUEST_METHOD;\n-        keymap.put(HTTP_REQUEST_METHOD, httpRequestMethod);\n-        propertyNames[interceptorProviders] = INTERCEPTOR_PROVIDERS;\n-        keymap.put(INTERCEPTOR_PROVIDERS, interceptorProviders);\n-        propertyNames[templateParameters] = TEMPLATE_PARAMETERS;\n-        keymap.put(TEMPLATE_PARAMETERS, templateParameters);\n-        propertyNames[accept] = ACCEPT_CONTENT_TYPE;\n-        keymap.put(ACCEPT_CONTENT_TYPE, accept);\n-        propertyNames[continuationProvider] = CONTINUATION_PROVIDER;\n-        keymap.put(CONTINUATION_PROVIDER, continuationProvider);\n-        propertyNames[destination] = DESTINATION;\n-        keymap.put(DESTINATION, destination);\n-        propertyNames[opStack] = OP_RES_INFO_STACK;\n-        keymap.put(OP_RES_INFO_STACK, opStack);\n-        propertyNames[wsdlDescription] = WSDL_DESCRIPTION;\n-        keymap.put(WSDL_DESCRIPTION, wsdlDescription);\n-        propertyNames[wsdlInterface] = WSDL_INTERFACE;\n-        keymap.put(WSDL_INTERFACE, wsdlInterface);\n-        propertyNames[wsdlOperation] = WSDL_OPERATION;\n-        keymap.put(WSDL_OPERATION, wsdlOperation);\n-        propertyNames[wsdlPort] = WSDL_PORT;\n-        keymap.put(WSDL_PORT, wsdlPort);\n-        propertyNames[wsdlService] = WSDL_SERVICE;\n-        keymap.put(WSDL_SERVICE, wsdlService);\n-        propertyNames[requestUrl] = REQUEST_URL;\n-        keymap.put(REQUEST_URL, requestUrl);\n-        propertyNames[requestUri] = REQUEST_URI;\n-        keymap.put(REQUEST_URI, requestUri);\n-        propertyNames[pathInfo] = PATH_INFO;\n-        keymap.put(PATH_INFO, pathInfo);\n-        propertyNames[basePath] = BASE_PATH;\n-        keymap.put(BASE_PATH, basePath);\n-        propertyNames[fixedParamOrder] = FIXED_PARAMETER_ORDER;\n-        keymap.put(FIXED_PARAMETER_ORDER, fixedParamOrder);\n-        propertyNames[inInterceptors] = IN_INTERCEPTORS;\n-        keymap.put(IN_INTERCEPTORS, inInterceptors);\n-        propertyNames[outInterceptors] = OUT_INTERCEPTORS;\n-        keymap.put(OUT_INTERCEPTORS, outInterceptors);\n-        propertyNames[responseCode] = RESPONSE_CODE;\n-        keymap.put(RESPONSE_CODE, responseCode);\n-        propertyNames[attachments] = ATTACHMENTS;\n-        keymap.put(ATTACHMENTS, attachments);\n-        propertyNames[encoding] = ENCODING;\n-        keymap.put(ENCODING, encoding);\n-        propertyNames[httpContext] = AbstractHTTPDestination.HTTP_CONTEXT;\n-        keymap.put(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n-        propertyNames[httpConfig] = AbstractHTTPDestination.HTTP_CONFIG;\n-        keymap.put(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n-        propertyNames[httpContextMatchStrategy] = AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY;\n-        keymap.put(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n-        propertyNames[httpBasePath] = HTTP_BASE_PATH;\n-        keymap.put(HTTP_BASE_PATH, httpBasePath);\n-        propertyNames[asyncPostDispatch] = ASYNC_POST_RESPONSE_DISPATCH;\n-        keymap.put(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n-        propertyNames[securityContext] = SECURITY_CONTEXT;\n-        keymap.put(SECURITY_CONTEXT, securityContext);\n-        propertyNames[authorizationPolicy] = AUTHORIZATION_POLICY;\n-        keymap.put(AUTHORIZATION_POLICY, authorizationPolicy);\n-        propertyNames[certConstraints] = CERT_CONSTRAINTS;\n-        keymap.put(CERT_CONSTRAINTS, certConstraints);\n-        propertyNames[serviceRedirection] = AbstractHTTPDestination.SERVICE_REDIRECTION;\n-        keymap.put(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n-        propertyNames[httpServletResponse] = HTTP_SERVLET_RESPONSE;\n-        keymap.put(HTTP_SERVLET_RESPONSE, httpServletResponse);\n-        propertyNames[resourceMethod] = RESOURCE_METHOD;\n-        keymap.put(RESOURCE_METHOD, resourceMethod);\n-        propertyNames[oneWayRequest] = ONE_WAY_REQUEST;\n-        keymap.put(ONE_WAY_REQUEST, oneWayRequest);\n-        propertyNames[asyncResponse] = ASYNC_RESPONSE;\n-        keymap.put(ASYNC_RESPONSE, asyncResponse);\n-        propertyNames[threadContextSwitched] = THREAD_CONTEXT_SWITCHED;\n-        keymap.put(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n-        propertyNames[cacheInputProperty] = OutgoingChainInterceptor.CACHE_INPUT_PROPERTY;\n-        keymap.put(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n-        propertyNames[previousMessage] = PhaseInterceptorChain.PREVIOUS_MESSAGE;\n-        keymap.put(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n-        propertyNames[responseHeadersCopied] = AbstractHTTPDestination.RESPONSE_HEADERS_COPIED;\n-        keymap.put(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n-        propertyNames[sseEventSink] = SSE_EVENT_SINK;\n-        keymap.put(SSE_EVENT_SINK, sseEventSink);\n-        propertyNames[requestorRole] = REQUESTOR_ROLE;\n-        keymap.put(REQUESTOR_ROLE, requestorRole);\n-        propertyNames[partialResponse] = PARTIAL_RESPONSE_MESSAGE;\n-        keymap.put(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n-        propertyNames[emptyPartialResponse] = EMPTY_PARTIAL_RESPONSE_MESSAGE;\n-        keymap.put(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n-        propertyNames[endpointAddress] = ENDPOINT_ADDRESS;\n-        keymap.put(ENDPOINT_ADDRESS, endpointAddress);\n-        propertyNames[inboundMessage] = INBOUND_MESSAGE;\n-        keymap.put(INBOUND_MESSAGE, inboundMessage);\n+        for (int i = 0; i < TOTAL; i++) {\n+            keymap.put(propertyNames[i], i);\n+        }\n         KEYMAP = Collections.unmodifiableMap(keymap);\n     }\n     //Liberty code change end\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MDE1MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405160150", "bodyText": "Either this should call super.getOrDefault or this whole method should just call getOrDefault to use the impl that is in this class.", "author": "jhanders34", "createdAt": "2020-04-07T22:53:36Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -324,222 +395,17 @@ public void setInterceptorChain(InterceptorChain ic) {\n     //Liberty code change start\n     // Since these maps can have null value, use the getOrDefault API\n     // to prevent calling get twice under the covers\n-    private static final Object NOT_FOUND = new Object();\n-    \n     @Override\n     public Object getContextualProperty(String key) {\n         //Liberty code change start\n-        Object o = null;\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                if (protoHeaders != NOT_FOUND) {\n-                    return protoHeaders;\n-                }\n-            } else if (key == CONTENT_TYPE) {\n-                if (contentType != NOT_FOUND) {\n-                    return contentType;\n-                }\n-            } else if (key == QUERY_STRING) {\n-                if (queryString != NOT_FOUND) {\n-                    return queryString;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                if (httpRequest != NOT_FOUND) {\n-                    return httpRequest;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                if (httpResponse != NOT_FOUND) {\n-                    return httpResponse;\n-                }\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                if (pathToMatchSlash != NOT_FOUND) {\n-                    return pathToMatchSlash;\n-                }\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                if (httpRequestMethod != NOT_FOUND) {\n-                    return httpRequestMethod;\n-                }\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                if (interceptorProviders != NOT_FOUND) {\n-                    return interceptorProviders;\n-                }\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                if (templateParameters != NOT_FOUND) {\n-                    return templateParameters;\n-                }\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                if (accept != NOT_FOUND) {\n-                    return accept;\n-                }\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                if (continuationProvider != NOT_FOUND) {\n-                    return continuationProvider;\n-                }\n-            } else if (key == OP_RES_INFO_STACK) {\n-                if (opStack != NOT_FOUND) {\n-                    return opStack;\n-                }\n-            } else if (key == DESTINATION) {\n-                if (destination != NOT_FOUND) {\n-                    return destination;\n-                }\n-            } else if (key == WSDL_DESCRIPTION) {\n-                if (wsdlDescription != NOT_FOUND) {\n-                    return wsdlDescription;\n-                }\n-            } else if (key == WSDL_INTERFACE) {\n-                if (wsdlInterface != NOT_FOUND) {\n-                    return wsdlInterface;\n-                }\n-            } else if (key == WSDL_OPERATION) {\n-                if (wsdlOperation != NOT_FOUND) {\n-                    return wsdlOperation;\n-                }\n-            } else if (key == WSDL_PORT) {\n-                if (wsdlPort != NOT_FOUND) {\n-                    return wsdlPort;\n-                }\n-            } else if (key == WSDL_SERVICE) {\n-                if (wsdlService != NOT_FOUND) {\n-                    return wsdlService;\n-                }\n-            } else if (key == REQUEST_URL) {\n-                if (requestUrl != NOT_FOUND) {\n-                    return requestUrl;\n-                }\n-            } else if (key == REQUEST_URI) {\n-                if (requestUri != NOT_FOUND) {\n-                    return requestUri;\n-                }\n-            } else if (key == PATH_INFO) {\n-                if (pathInfo != NOT_FOUND) {\n-                    return pathInfo;\n-                }\n-            } else if (key == BASE_PATH) {\n-                if (basePath != NOT_FOUND) {\n-                    return basePath;\n-                }\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                if (fixedParamOrder != NOT_FOUND) {\n-                    return fixedParamOrder;\n-                }\n-            } else if (key == IN_INTERCEPTORS) {\n-                if (inInterceptors != NOT_FOUND) {\n-                    return inInterceptors;\n-                }\n-            } else if (key == OUT_INTERCEPTORS) {\n-                if (outInterceptors != NOT_FOUND) {\n-                    return outInterceptors;\n-                }\n-            } else if (key == RESPONSE_CODE) {\n-                if (responseCode != NOT_FOUND) {\n-                    return responseCode;\n-                }\n-            } else if (key == ATTACHMENTS) {\n-                if (attachments != NOT_FOUND) {\n-                    return attachments;\n-                }\n-            } else if (key == ENCODING) {\n-                if (encoding != NOT_FOUND) {\n-                    return encoding;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                if (httpContext != NOT_FOUND) {\n-                    return httpContext;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                if (httpConfig != NOT_FOUND) {\n-                    return httpConfig;\n-                }\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                if (httpContextMatchStrategy != NOT_FOUND) {\n-                    return httpContextMatchStrategy;\n-                }\n-            } else if (key == HTTP_BASE_PATH) {\n-                if (httpBasePath != NOT_FOUND) {\n-                    return httpBasePath;\n-                }\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                if (asyncPostDispatch != NOT_FOUND) {\n-                    return asyncPostDispatch;\n-                }\n-            } else if (key == SECURITY_CONTEXT) {\n-                if (securityContext != NOT_FOUND) {\n-                    return securityContext;\n-                }\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                if (authorizationPolicy != NOT_FOUND) {\n-                    return authorizationPolicy;\n-                }\n-            } else if (key == CERT_CONSTRAINTS) {\n-                if (certConstraints != NOT_FOUND) {\n-                    return certConstraints;\n-                }\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                if (serviceRedirection != NOT_FOUND) {\n-                    return serviceRedirection;\n-                }\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                if (httpServletResponse != NOT_FOUND) {\n-                    return httpServletResponse;\n-                }\n-            } else if (key == RESOURCE_METHOD) {\n-                if (resourceMethod != NOT_FOUND) {\n-                    return resourceMethod;\n-                }\n-            } else if (key == ONE_WAY_REQUEST) {\n-                if (oneWayRequest != NOT_FOUND) {\n-                    return oneWayRequest;\n-                }\n-            } else if (key == ASYNC_RESPONSE) {\n-                if (asyncResponse != NOT_FOUND) {\n-                    return asyncResponse;\n-                }\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                if (threadContextSwitched != NOT_FOUND) {\n-                    return threadContextSwitched;\n-                }\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                if (cacheInputProperty != NOT_FOUND) {\n-                    return cacheInputProperty;\n-                }\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                if (previousMessage != NOT_FOUND) {\n-                    return previousMessage;\n-                }\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                if (responseHeadersCopied != NOT_FOUND) {\n-                    return responseHeadersCopied;\n-                }\n-            } else if (key == SSE_EVENT_SINK) {\n-                if (sseEventSink != NOT_FOUND) {\n-                    return sseEventSink;\n-                }\n-            } else if (key == REQUESTOR_ROLE) {\n-                if (requestorRole != NOT_FOUND) {\n-                    return requestorRole;\n-                }\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                if (partialResponse != NOT_FOUND) {\n-                    return partialResponse;\n-                }\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                if (emptyPartialResponse != NOT_FOUND) {\n-                    return emptyPartialResponse;\n-                }\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                if (endpointAddress != NOT_FOUND) {\n-                    return endpointAddress;\n-                }\n-            } else if (key == INBOUND_MESSAGE) {\n-                if (inboundMessage != NOT_FOUND) {\n-                    return inboundMessage;\n-                }\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object value = propertyValues[index];\n+            return value == NOT_FOUND ? null : value;\n         }\n         //Liberty code change end\n \n-        o = getOrDefault(key, NOT_FOUND);\n+        Object o = getOrDefault(key, NOT_FOUND);", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -398,17 +359,12 @@ public class MessageImpl extends StringMapImpl implements Message {\n     @Override\n     public Object getContextualProperty(String key) {\n         //Liberty code change start\n-        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n-        if (index != KEY_NOT_FOUND) {\n-            Object value = propertyValues[index];\n-            return value == NOT_FOUND ? null : value;\n-        }\n-        //Liberty code change end\n-\n         Object o = getOrDefault(key, NOT_FOUND);\n         if (o != NOT_FOUND) {\n             return o;\n         }\n+        //Liberty code change end\n+\n         return getFromExchange(key);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDc1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405164759", "bodyText": "Should check for NOT_FOUND here to avoid the .equals call.  Also you need to handle o being null or you are going to get a NullPointerException", "author": "jhanders34", "createdAt": "2020-04-07T23:06:06Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -844,1507 +561,649 @@ public Object get(Object key) {\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n     }\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> keys = super.keySet();\n-        if (protoHeaders != NOT_FOUND) {\n-            keys.add(PROTOCOL_HEADERS);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            keys.add(CONTENT_TYPE);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            keys.add(QUERY_STRING);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            keys.add(HTTP_REQUEST_METHOD);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            keys.add(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            keys.add(TEMPLATE_PARAMETERS);\n-        }\n-        if (accept != NOT_FOUND) {\n-            keys.add(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            keys.add(CONTINUATION_PROVIDER);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            keys.add(OP_RES_INFO_STACK);\n-        }\n-        if (destination != NOT_FOUND) {\n-            keys.add(DESTINATION);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            keys.add(WSDL_DESCRIPTION);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            keys.add(WSDL_INTERFACE);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            keys.add(WSDL_OPERATION);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            keys.add(WSDL_PORT);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            keys.add(WSDL_SERVICE);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            keys.add(REQUEST_URL);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            keys.add(REQUEST_URI);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            keys.add(PATH_INFO);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            keys.add(BASE_PATH);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            keys.add(FIXED_PARAMETER_ORDER);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            keys.add(IN_INTERCEPTORS);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            keys.add(OUT_INTERCEPTORS);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            keys.add(RESPONSE_CODE);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            keys.add(ATTACHMENTS);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            keys.add(ENCODING);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            keys.add(HTTP_BASE_PATH);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            keys.add(SECURITY_CONTEXT);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            keys.add(AUTHORIZATION_POLICY);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            keys.add(CERT_CONSTRAINTS);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            keys.add(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            keys.add(RESOURCE_METHOD);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            keys.add(ONE_WAY_REQUEST);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            keys.add(ASYNC_RESPONSE);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            keys.add(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            keys.add(SSE_EVENT_SINK);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            keys.add(REQUESTOR_ROLE);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            keys.add(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            keys.add(ENDPOINT_ADDRESS);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            keys.add(INBOUND_MESSAGE);\n+        Set<String> myKeys = new HashSet<String>(super.keySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myKeys.add(propertyNames[i]);\n+            }\n         }\n \n-        return keys;\n+        return myKeys;\n     }\n     \n     @Override\n     public Set<Map.Entry<String,Object>> entrySet() {\n-        Set<Map.Entry<String,Object>> entrySet = super.entrySet();\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>();\n-        myEntrySet.addAll(entrySet);\n-        Map.Entry<String,Object> entry;\n-        if (protoHeaders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PROTOCOL_HEADERS, protoHeaders);\n-            myEntrySet.add(entry);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTENT_TYPE, contentType);\n-            myEntrySet.add(entry);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(QUERY_STRING, queryString);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_REQUEST_METHOD, httpRequestMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INTERCEPTOR_PROVIDERS, interceptorProviders);\n-            myEntrySet.add(entry);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(TEMPLATE_PARAMETERS, templateParameters);\n-            myEntrySet.add(entry);\n-        }\n-        if (accept != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ACCEPT_CONTENT_TYPE, accept);\n-            myEntrySet.add(entry);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTINUATION_PROVIDER, continuationProvider);\n-            myEntrySet.add(entry);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OP_RES_INFO_STACK, opStack);\n-            myEntrySet.add(entry);\n-        }\n-        if (destination != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(DESTINATION, destination);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_DESCRIPTION, wsdlDescription);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_INTERFACE, wsdlInterface);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_OPERATION, wsdlOperation);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_PORT, wsdlPort);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_SERVICE, wsdlService);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URL, requestUrl);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URI, requestUri);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PATH_INFO, pathInfo);\n-            myEntrySet.add(entry);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(BASE_PATH, basePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(FIXED_PARAMETER_ORDER, fixedParamOrder);\n-            myEntrySet.add(entry);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(IN_INTERCEPTORS, inInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OUT_INTERCEPTORS, outInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESPONSE_CODE, responseCode);\n-            myEntrySet.add(entry);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ATTACHMENTS, attachments);\n-            myEntrySet.add(entry);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENCODING, encoding);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_BASE_PATH, httpBasePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n-            myEntrySet.add(entry);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SECURITY_CONTEXT, securityContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AUTHORIZATION_POLICY, authorizationPolicy);\n-            myEntrySet.add(entry);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CERT_CONSTRAINTS, certConstraints);\n-            myEntrySet.add(entry);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_SERVLET_RESPONSE, httpServletResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESOURCE_METHOD, resourceMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ONE_WAY_REQUEST, oneWayRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_RESPONSE, asyncResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n-            myEntrySet.add(entry);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n-            myEntrySet.add(entry);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n-            myEntrySet.add(entry);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SSE_EVENT_SINK, sseEventSink);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUESTOR_ROLE, requestorRole);\n-            myEntrySet.add(entry);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENDPOINT_ADDRESS, endpointAddress);\n-            myEntrySet.add(entry);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INBOUND_MESSAGE, inboundMessage);\n-            myEntrySet.add(entry);\n+        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+            }\n         }\n         return myEntrySet;\n     }\n     \n     @Override\n     public boolean containsKey(Object key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return protoHeaders != NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return httpRequestMethod != NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return interceptorProviders != NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return templateParameters != NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return accept != NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return continuationProvider != NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return opStack != NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                return destination != NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return wsdlDescription != NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                return wsdlInterface != NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                return wsdlOperation != NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                return wsdlPort != NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                return wsdlService != NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                return requestUrl != NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                return requestUri != NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                return pathInfo != NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                return basePath != NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return fixedParamOrder != NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                return inInterceptors != NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return outInterceptors != NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                return responseCode != NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                return attachments != NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                return encoding != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return httpContext != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return httpConfig != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return httpContextMatchStrategy != NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                return httpBasePath != NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return asyncPostDispatch != NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                return securityContext != NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return authorizationPolicy != NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return certConstraints != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return serviceRedirection != NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return httpServletResponse != NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                return resourceMethod != NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return oneWayRequest != NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                return asyncResponse != NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return threadContextSwitched != NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return cacheInputProperty != NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return previousMessage != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return responseHeadersCopied != NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                return sseEventSink != NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                return requestorRole != NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return partialResponse != NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return emptyPartialResponse != NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return endpointAddress != NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                return inboundMessage != NOT_FOUND;\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return propertyValues[index] != NOT_FOUND;\n         }\n         return super.containsKey(key);\n     }\n     @Override\n     public void putAll(Map<? extends String, ? extends Object> m) {\n-        if (m.containsKey(PROTOCOL_HEADERS)) {\n-            protoHeaders = m.get(PROTOCOL_HEADERS);\n-        }\n-        if (m.containsKey(CONTENT_TYPE)) {\n-            contentType = m.get(CONTENT_TYPE);\n-        }\n-        if (m.containsKey(QUERY_STRING)) {\n-            queryString = m.get(QUERY_STRING);\n+        for (Map.Entry<? extends String, ? extends Object> entry : m.entrySet()) {\n+            put(entry.getKey(), entry.getValue());\n         }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_REQUEST)) {\n-            httpRequest = m.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_RESPONSE)) {\n-            httpResponse = m.get(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (m.containsKey(REQUEST_PATH_TO_MATCH_SLASH)) {\n-            pathToMatchSlash = m.get(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (m.containsKey(HTTP_REQUEST_METHOD)) {\n-            httpRequestMethod = m.get(HTTP_REQUEST_METHOD);\n-        }\n-        if (m.containsKey(INTERCEPTOR_PROVIDERS)) {\n-            interceptorProviders = m.get(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (m.containsKey(TEMPLATE_PARAMETERS)) {\n-            templateParameters = m.get(TEMPLATE_PARAMETERS);\n-        }\n-        if (m.containsKey(ACCEPT_CONTENT_TYPE)) {\n-            accept = m.get(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (m.containsKey(CONTINUATION_PROVIDER)) {\n-            continuationProvider = m.get(CONTINUATION_PROVIDER);\n-        }\n-        if (m.containsKey(OP_RES_INFO_STACK)) {\n-            opStack = m.get(OP_RES_INFO_STACK);\n-        }\n-        if (m.containsKey(DESTINATION)) {\n-            destination = m.get(DESTINATION);\n-        }\n-        if (m.containsKey(WSDL_DESCRIPTION)) {\n-            wsdlDescription = m.get(WSDL_DESCRIPTION);\n-        }\n-        if (m.containsKey(WSDL_INTERFACE)) {\n-            wsdlInterface = m.get(WSDL_INTERFACE);\n-        }\n-        if (m.containsKey(WSDL_OPERATION)) {\n-            wsdlOperation = m.get(WSDL_OPERATION);\n-        }\n-        if (m.containsKey(WSDL_PORT)) {\n-            wsdlPort = m.get(WSDL_PORT);\n-        }\n-        if (m.containsKey(WSDL_SERVICE)) {\n-            wsdlService = m.get(WSDL_SERVICE);\n-        }\n-        if (m.containsKey(REQUEST_URL)) {\n-            requestUrl = m.get(REQUEST_URL);\n-        }\n-        if (m.containsKey(REQUEST_URI)) {\n-            requestUri = m.get(REQUEST_URI);\n-        }\n-        if (m.containsKey(PATH_INFO)) {\n-            pathInfo = m.get(PATH_INFO);\n-        }\n-        if (m.containsKey(BASE_PATH)) {\n-            basePath = m.get(BASE_PATH);\n-        }\n-        if (m.containsKey(FIXED_PARAMETER_ORDER)) {\n-            fixedParamOrder = m.get(FIXED_PARAMETER_ORDER);\n-        }\n-        if (m.containsKey(IN_INTERCEPTORS)) {\n-            inInterceptors = m.get(IN_INTERCEPTORS);\n-        }\n-        if (m.containsKey(OUT_INTERCEPTORS)) {\n-            outInterceptors = m.get(OUT_INTERCEPTORS);\n-        }\n-        if (m.containsKey(RESPONSE_CODE)) {\n-            responseCode = m.get(RESPONSE_CODE);\n-        }\n-        if (m.containsKey(ATTACHMENTS)) {\n-            attachments = m.get(ATTACHMENTS);\n-        }\n-        if (m.containsKey(ENCODING)) {\n-            encoding = m.get(ENCODING);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT)) {\n-            httpContext = m.get(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONFIG)) {\n-            httpConfig = m.get(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY)) {\n-            httpContextMatchStrategy = m.get(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (m.containsKey(HTTP_BASE_PATH)) {\n-            httpBasePath = m.get(HTTP_BASE_PATH);\n-        } \n-        if (m.containsKey(ASYNC_POST_RESPONSE_DISPATCH)) {\n-            asyncPostDispatch = m.get(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (m.containsKey(SECURITY_CONTEXT)) {\n-            securityContext = m.get(SECURITY_CONTEXT);\n-        }\n-        if (m.containsKey(AUTHORIZATION_POLICY)) {\n-            authorizationPolicy = m.get(AUTHORIZATION_POLICY);\n-        }\n-        if (m.containsKey(CERT_CONSTRAINTS)) {\n-            certConstraints = m.get(CERT_CONSTRAINTS);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.SERVICE_REDIRECTION)) {\n-            serviceRedirection = m.get(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (m.containsKey(HTTP_SERVLET_RESPONSE)) {\n-            httpServletResponse = m.get(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (m.containsKey(RESOURCE_METHOD)) {\n-            resourceMethod = m.get(RESOURCE_METHOD);\n-        }\n-        if (m.containsKey(ONE_WAY_REQUEST)) {\n-            oneWayRequest = m.get(ONE_WAY_REQUEST);\n-        }\n-        if (m.containsKey(ASYNC_RESPONSE)) {\n-            asyncResponse = m.get(ASYNC_RESPONSE);\n-        }\n-        if (m.containsKey(THREAD_CONTEXT_SWITCHED)) {\n-            threadContextSwitched = m.get(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (m.containsKey(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY)) {\n-            cacheInputProperty = m.get(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (m.containsKey(PhaseInterceptorChain.PREVIOUS_MESSAGE)) {\n-            previousMessage = m.get(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED)) {\n-            responseHeadersCopied = m.get(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (m.containsKey(SSE_EVENT_SINK)) {\n-            sseEventSink = m.get(SSE_EVENT_SINK);\n-        }\n-        if (m.containsKey(REQUESTOR_ROLE)) {\n-            requestorRole = m.get(REQUESTOR_ROLE);\n-        }\n-        if (m.containsKey(PARTIAL_RESPONSE_MESSAGE)) {\n-            partialResponse = m.get(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(EMPTY_PARTIAL_RESPONSE_MESSAGE)) {\n-            emptyPartialResponse = m.get(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(ENDPOINT_ADDRESS)) {\n-            endpointAddress = m.get(ENDPOINT_ADDRESS);\n-        }\n-        if (m.containsKey(INBOUND_MESSAGE)) {\n-            inboundMessage = m.get(INBOUND_MESSAGE);\n-        }\n-        super.putAll(m);\n     }\n     @Override\n     public Collection<Object> values() {\n-        Collection<Object> values = super.values();\n-        if (protoHeaders != NOT_FOUND) {\n-            values.add(protoHeaders);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            values.add(contentType);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            values.add(queryString);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            values.add(httpRequest);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            values.add(httpResponse);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            values.add(pathToMatchSlash);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            values.add(httpRequestMethod);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            values.add(interceptorProviders);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            values.add(templateParameters);\n-        }\n-        if (accept != NOT_FOUND) {\n-            values.add(accept);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            values.add(continuationProvider);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            values.add(opStack);\n-        }\n-        if (destination != NOT_FOUND) {\n-            values.add(destination);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            values.add(wsdlDescription);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            values.add(wsdlInterface);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            values.add(wsdlOperation);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            values.add(wsdlPort);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            values.add(wsdlService);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            values.add(requestUrl);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            values.add(requestUri);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            values.add(pathInfo);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            values.add(basePath);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            values.add(fixedParamOrder);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            values.add(inInterceptors);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            values.add(outInterceptors);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            values.add(responseCode);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            values.add(attachments);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            values.add(encoding);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            values.add(httpContext);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            values.add(httpConfig);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            values.add(httpContextMatchStrategy);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            values.add(httpBasePath);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            values.add(asyncPostDispatch);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            values.add(securityContext);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            values.add(authorizationPolicy);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            values.add(certConstraints);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            values.add(serviceRedirection);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            values.add(httpServletResponse);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            values.add(resourceMethod);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            values.add(oneWayRequest);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            values.add(asyncResponse);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            values.add(threadContextSwitched);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            values.add(cacheInputProperty);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            values.add(previousMessage);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            values.add(responseHeadersCopied);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            values.add(sseEventSink);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            values.add(requestorRole);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            values.add(partialResponse);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            values.add(emptyPartialResponse);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            values.add(endpointAddress);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            values.add(inboundMessage);\n+        Collection<Object> myValues = new ArrayList<Object>(super.values());\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                myValues.add(o);\n+            }\n         }\n-        return values;\n+        return myValues;\n     }\n \n     public Object getAuthorizationPolicy() {\n-        return authorizationPolicy == NOT_FOUND ? null : authorizationPolicy;\n+        return getFromPropertyArray(authorizationPolicy);\n     }\n \n-    public void setAuthorizationPolicy(Object authorizationPolicy) {\n-        this.authorizationPolicy = authorizationPolicy;\n+    public void setAuthorizationPolicy(Object a) {\n+        propertyValues[authorizationPolicy] = a;\n     }\n \n     public Object getCertConstraints() {\n-        return certConstraints == NOT_FOUND ? null : certConstraints;\n+        return getFromPropertyArray(certConstraints);\n     }\n \n-    public void setCertConstraints(Object certConstraints) {\n-        this.certConstraints = certConstraints;\n+    public void setCertConstraints(Object c) {\n+        propertyValues[certConstraints] = c;\n     }\n \n     public Object getServiceRedirection() {\n-        return serviceRedirection == NOT_FOUND ? null : serviceRedirection;\n+        return getFromPropertyArray(serviceRedirection);\n     }\n \n-    public void setServiceRedirection(Object serviceRedirection) {\n-        this.serviceRedirection = serviceRedirection;\n+    public void setServiceRedirection(Object s) {\n+        propertyValues[serviceRedirection] = s;\n     }\n \n     public Object getHttpServletResponse() {\n-        return httpServletResponse == NOT_FOUND ? null : httpServletResponse;\n+        return getFromPropertyArray(httpServletResponse);\n     }\n \n-    public void setHttpServletResponse(Object httpServletResponse) {\n-        this.httpServletResponse = httpServletResponse;\n+    public void setHttpServletResponse(Object h) {\n+        propertyValues[httpServletResponse] = h;\n     }\n \n     public Object getResourceMethod() {\n-        return resourceMethod == NOT_FOUND ? null : resourceMethod;\n+        return getFromPropertyArray(resourceMethod);\n     }\n \n-    public void setResourceMethod(Object resourceMethod) {\n-        this.resourceMethod = resourceMethod;\n+    public void setResourceMethod(Object r) {\n+        propertyValues[resourceMethod] = r;\n     }\n \n     public Object getOneWayRequest() {\n-        return oneWayRequest == NOT_FOUND ? null : oneWayRequest;\n+        return getFromPropertyArray(oneWayRequest);\n     }\n \n-    public void setOneWayRequest(Object oneWayRequest) {\n-        this.oneWayRequest = oneWayRequest;\n+    public void setOneWayRequest(Object o) {\n+        propertyValues[oneWayRequest] = o;\n     }\n \n     public Object getAsyncResponse() {\n-        return asyncResponse == NOT_FOUND ? null : asyncResponse;\n+        return getFromPropertyArray(asyncResponse);\n     }\n \n-    public void setAsyncResponse(Object asyncResponse) {\n-        this.asyncResponse = asyncResponse;\n+    public void setAsyncResponse(Object a) {\n+        propertyValues[asyncResponse] = a;\n     }\n \n     public Object getThreadContextSwitched() {\n-        return threadContextSwitched == NOT_FOUND ? null : threadContextSwitched;\n+        return getFromPropertyArray(threadContextSwitched);\n     }\n \n-    public void setThreadContextSwitched(Object threadContextSwitched) {\n-        this.threadContextSwitched = threadContextSwitched;\n+    public void setThreadContextSwitched(Object t) {\n+        propertyValues[threadContextSwitched] = t;\n     }\n \n     public Object getPreviousMessage() {\n-        return previousMessage == NOT_FOUND ? null : previousMessage;\n+        return getFromPropertyArray(previousMessage);\n     }\n \n     public boolean containsPreviousMessage() {\n-        return previousMessage != NOT_FOUND;\n+        return propertyValues[previousMessage] != NOT_FOUND;\n     }\n \n-    public void setPreviousMessage(Object previousMessage) {\n-        this.previousMessage = previousMessage;\n+    public void setPreviousMessage(Object p) {\n+        propertyValues[previousMessage] = p;\n     }\n \n     public Object getCacheInputProperty() {\n-        return cacheInputProperty == NOT_FOUND ? null : cacheInputProperty;\n+        return getFromPropertyArray(cacheInputProperty);\n     }\n \n-    public void setCacheInputProperty(Object cacheInputProperty) {\n-        this.cacheInputProperty = cacheInputProperty;\n+    public void setCacheInputProperty(Object c) {\n+        propertyValues[cacheInputProperty] = c;\n     }\n \n     public Object getSseEventSink() {\n-        return sseEventSink == NOT_FOUND ? null : sseEventSink;\n+        return getFromPropertyArray(sseEventSink);\n     }\n \n-    public void setSseEventSink(Object sseEventSink) {\n-        this.sseEventSink = sseEventSink;\n+    public void setSseEventSink(Object s) {\n+        propertyValues[sseEventSink] = s;\n     }\n \n     public Object getResponseHeadersCopied() {\n-        return responseHeadersCopied == NOT_FOUND ? null : responseHeadersCopied;\n+        return getFromPropertyArray(responseHeadersCopied);\n     }\n \n-    public void setResponseHeadersCopied(Object responseHeadersCopied) {\n-        this.responseHeadersCopied = responseHeadersCopied;\n+    public void setResponseHeadersCopied(Object r) {\n+        propertyValues[responseHeadersCopied] = r;\n     }\n \n     public Object getRequestorRole() {\n-        return requestorRole == NOT_FOUND ? null : requestorRole;\n+        return getFromPropertyArray(requestorRole);\n     }\n \n-    public void setRequestorRole(Object requestorRole) {\n-        this.requestorRole = requestorRole;\n+    public void setRequestorRole(Object r) {\n+        propertyValues[requestorRole] = r;\n     }\n \n     public Object getEmptyPartialResponse() {\n-        return emptyPartialResponse == NOT_FOUND ? null : emptyPartialResponse;\n+        return getFromPropertyArray(emptyPartialResponse);\n     }\n \n-    public void setEmptyPartialResponse(Object emptyPartialResponse) {\n-        this.emptyPartialResponse = emptyPartialResponse;\n+    public void setEmptyPartialResponse(Object e) {\n+        propertyValues[emptyPartialResponse] = e;\n     }\n \n     public Object getPartialResponse() {\n-        return partialResponse == NOT_FOUND ? null : partialResponse;\n+        return getFromPropertyArray(partialResponse);\n     }\n \n-    public void setPartialResponse(Object partialResponse) {\n-        this.partialResponse = partialResponse;\n+    public void setPartialResponse(Object p) {\n+        propertyValues[partialResponse] = p;\n     }\n \n     public Object getEndpointAddress() {\n-        return endpointAddress == NOT_FOUND ? null : endpointAddress;\n+        return getFromPropertyArray(endpointAddress);\n     }\n \n-    public void setEndpointAddress(Object endpointAddress) {\n-        this.endpointAddress = endpointAddress;\n+    public void setEndpointAddress(Object e) {\n+        propertyValues[endpointAddress] = e;\n     }\n     \n     public Object getInboundMessage() {\n-        return inboundMessage == NOT_FOUND ? null : inboundMessage;\n+        return getFromPropertyArray(inboundMessage);\n     }\n \n-    public void setInboundMessage(Object inboundMessage) {\n-        this.inboundMessage = inboundMessage;\n+    public void setInboundMessage(Object i) {\n+        propertyValues[inboundMessage] = i;\n     }\n     public String getPathToMatchSlash() {\n-        return pathToMatchSlash == NOT_FOUND ? null : (String) pathToMatchSlash;\n+        return (String) getFromPropertyArray(pathToMatchSlash);\n     }\n     \n-    public void setPathToMatchSlash(String pathToMatchSlash) {\n-        this.pathToMatchSlash = pathToMatchSlash;\n+    public void setPathToMatchSlash(String p) {\n+        propertyValues[pathToMatchSlash] = p;\n     }\n     \n     public String getHttpRequestMethod() {\n-        return httpRequestMethod == NOT_FOUND ? null : (String) httpRequestMethod;\n+        return (String) getFromPropertyArray(httpRequestMethod);\n     }\n     \n-    public void setHttpRequestMethod(String httpRequestMethod) {\n-        this.httpRequestMethod = httpRequestMethod;\n+    public void setHttpRequestMethod(String h) {\n+        propertyValues[httpRequestMethod] = h;\n     }\n \n     public void removePathToMatchSlash() {\n-        pathToMatchSlash = NOT_FOUND;\n+        propertyValues[pathToMatchSlash] = NOT_FOUND;\n     }\n     public String getQueryString() {\n-        return queryString == NOT_FOUND ? null : (String) queryString;\n+        return (String) getFromPropertyArray(queryString);\n     }\n     \n-    public void setQueryString(String queryString) {\n-        this.queryString = queryString;\n+    public void setQueryString(String q) {\n+        propertyValues[queryString] = q;\n     }\n     public Object getOperationResourceInfoStack() {\n-        return opStack == NOT_FOUND ? null: opStack;\n+        return getFromPropertyArray(opStack);\n     }\n     \n-    public void setOperationResourceInfoStack(Object opStack) {\n-        this.opStack = opStack;\n+    public void setOperationResourceInfoStack(Object o) {\n+        propertyValues[opStack] = o;\n     }\n \n     public String getContentType() {\n-        return contentType == NOT_FOUND ? null : (String) contentType;\n+        return (String) getFromPropertyArray(contentType);\n     }\n     \n     public boolean containsContentType() {\n-        return contentType != NOT_FOUND;\n+        return propertyValues[contentType] != NOT_FOUND;\n     }\n     \n-    public void setContentType(String contentType) {\n-        this.contentType = contentType;\n+    public void setContentType(String c) {\n+        propertyValues[contentType] = c;\n     }\n \n     public Object getHttpRequest() {\n-        return httpRequest == NOT_FOUND ? null : httpRequest;\n+        return getFromPropertyArray(httpRequest);\n     }\n     \n     public boolean containsHttpRequest() {\n-        return httpRequest != NOT_FOUND;\n+        return propertyValues[httpRequest] != NOT_FOUND;\n     }\n     \n-    public void setHttpRequest(Object httpRequest) {\n-        this.httpRequest = httpRequest;\n+    public void setHttpRequest(Object h) {\n+        propertyValues[httpRequest] = h;\n     }\n     \n     public Object getHttpResponse() {\n-        return httpResponse == NOT_FOUND ? null : httpResponse;\n+        return getFromPropertyArray(httpResponse);\n     }\n     \n-    public void setHttpResponse(Object httpResponse) {\n-        this.httpResponse = httpResponse;\n+    public void setHttpResponse(Object h) {\n+        propertyValues[httpResponse] = h;\n     }\n \n     public Object getAccept() {\n-        return accept == NOT_FOUND ? null : accept;\n+        return getFromPropertyArray(accept);\n     }\n     \n-    public void setAccept(Object accept) {\n-        this.accept = accept;\n+    public void setAccept(Object a) {\n+        propertyValues[accept] = a;\n     }\n \n     public Object getContinuationProvider() {\n-        return continuationProvider == NOT_FOUND ? null : continuationProvider;\n+        return getFromPropertyArray(continuationProvider);\n     }\n     \n-    public void setContinuationProvider(Object continuationProvider) {\n-        this.continuationProvider = continuationProvider;\n+    public void setContinuationProvider(Object c) {\n+        propertyValues[continuationProvider] = c;\n     }\n \n     public Object getWsdlDescription() {\n-        return wsdlDescription == NOT_FOUND ? null : wsdlDescription;\n+        return getFromPropertyArray(wsdlDescription);\n     }\n     \n-    public void setWsdlDescription(Object wsdlDescription) {\n-        this.wsdlDescription = wsdlDescription;\n+    public void setWsdlDescription(Object w) {\n+        propertyValues[wsdlDescription] = w;\n     }\n \n     public Object getWsdlInterface() {\n-        return wsdlInterface == NOT_FOUND ? null : wsdlInterface;\n+        return getFromPropertyArray(wsdlInterface);\n     }\n     \n-    public void setWsdlInterface(Object wsdlInterface) {\n-        this.wsdlInterface = wsdlInterface;\n+    public void setWsdlInterface(Object w) {\n+        propertyValues[wsdlInterface] = w;\n     }\n \n     public Object getWsdlOperation() {\n-        return wsdlOperation == NOT_FOUND ? null : wsdlOperation;\n+        return getFromPropertyArray(wsdlOperation);\n     }\n     \n-    public void setWsdlOperation(Object wsdlOperation) {\n-        this.wsdlOperation = wsdlOperation;\n+    public void setWsdlOperation(Object w) {\n+        propertyValues[wsdlOperation] = w;\n     }\n \n     public Object getWsdlPort() {\n-        return wsdlPort == NOT_FOUND ? null : wsdlPort;\n+        return getFromPropertyArray(wsdlPort);\n     }\n     \n-    public void setWsdlPort(Object wsdlPort) {\n-        this.wsdlPort = wsdlPort;\n+    public void setWsdlPort(Object w) {\n+        propertyValues[wsdlPort] = w;\n     }\n \n     public Object getWsdlService() {\n-        return wsdlService == NOT_FOUND ? null : wsdlService;\n+        return getFromPropertyArray(wsdlService);\n     }\n     \n-    public void setWsdlService(Object wsdlService) {\n-        this.wsdlService = wsdlService;\n+    public void setWsdlService(Object w) {\n+        propertyValues[wsdlService] = w;\n     }\n \n     public Object getRequestUrl() {\n-        return requestUrl == NOT_FOUND ? null : requestUrl;\n+        return getFromPropertyArray(requestUrl);\n     }\n     \n-    public void setRequestUrl(Object requestUrl) {\n-        this.requestUrl = requestUrl;\n+    public void setRequestUrl(Object r) {\n+        propertyValues[requestUrl] = r;\n     }\n \n     public Object getRequestUri() {\n-        return requestUri == NOT_FOUND ? null : requestUri;\n+        return getFromPropertyArray(requestUri);\n     }\n     \n-    public void setRequestUri(Object requestUri) {\n-        this.requestUri = requestUri;\n+    public void setRequestUri(Object r) {\n+        propertyValues[requestUri] = r;\n     }\n     \n     public Object getPathInfo() {\n-        return pathInfo == NOT_FOUND ? null : pathInfo;\n+        return getFromPropertyArray(pathInfo);\n     }\n     \n-    public void setPathInfo(Object pathInfo) {\n-        this.pathInfo = pathInfo;\n+    public void setPathInfo(Object p) {\n+       propertyValues[pathInfo] = p;\n     }\n     \n     public Object getBasePath() {\n-        return basePath == NOT_FOUND ? null : basePath;\n+        return getFromPropertyArray(basePath);\n     }\n     \n     public boolean containsBasePath() {\n-        return basePath != NOT_FOUND;\n+        return propertyValues[basePath] != NOT_FOUND;\n     }\n     \n-    public void setBasePath(Object basePath) {\n-        this.basePath = basePath;\n+    public void setBasePath(Object b) {\n+        propertyValues[basePath] = b;\n     }\n \n     public Object getFixedParamOrder() {\n-        return fixedParamOrder == NOT_FOUND ? null : fixedParamOrder;\n+        return getFromPropertyArray(fixedParamOrder);\n     }\n     \n-    public void setFixedParamOrder(Object fixedParamOrder) {\n-        this.fixedParamOrder = fixedParamOrder;\n+    public void setFixedParamOrder(Object f) {\n+        propertyValues[fixedParamOrder] = f;\n     }\n \n     public Object getInInterceptors() {\n-        return inInterceptors == NOT_FOUND ? null : inInterceptors;\n+        return getFromPropertyArray(inInterceptors);\n     }\n     \n-    public void setInInterceptors(Object inInterceptors) {\n-        this.inInterceptors = inInterceptors;\n+    public void setInInterceptors(Object i) {\n+        propertyValues[inInterceptors] = i;\n     }\n \n     public Object getOutInterceptors() {\n-        return outInterceptors == NOT_FOUND ? null : outInterceptors;\n+        return getFromPropertyArray(outInterceptors);\n     }\n     \n-    public void setOutInterceptors(Object outInterceptors) {\n-        this.outInterceptors = outInterceptors;\n+    public void setOutInterceptors(Object o) {\n+        propertyValues[outInterceptors] = o;\n     }\n \n     public Object getResponseCode() {\n-        return responseCode == NOT_FOUND ? null : responseCode;\n+        return getFromPropertyArray(responseCode);\n     }\n     \n-    public void setResponseCode(Object responseCode) {\n-        this.responseCode = responseCode;\n+    public void setResponseCode(Object r) {\n+        propertyValues[responseCode] = r;\n     }\n \n     public Object getEncoding() {\n-        return encoding == NOT_FOUND ? null : encoding;\n+        return getFromPropertyArray(encoding);\n     }\n     \n-    public void setEncoding(Object encoding) {\n-        this.encoding = encoding;\n+    public void setEncoding(Object e) {\n+        propertyValues[encoding] = e;\n     }\n \n     public Object getHttpContext() {\n-        return httpContext == NOT_FOUND ? null : httpContext;\n+        return getFromPropertyArray(httpContext);\n     }\n     \n-    public void setHttpContext(Object httpContext) {\n-        this.httpContext = httpContext;\n+    public void setHttpContext(Object h) {\n+        propertyValues[httpContext] = h;\n     }\n \n     public Object getHttpConfig() {\n-        return httpConfig == NOT_FOUND ? null : httpConfig;\n+        return getFromPropertyArray(httpConfig);\n     }\n     \n-    public void setHttpConfig(Object httpConfig) {\n-        this.httpConfig = httpConfig;\n+    public void setHttpConfig(Object h) {\n+        propertyValues[httpConfig] = h;\n     }\n \n     public Object getHttpContextMatchStrategy() {\n-        return httpContextMatchStrategy == NOT_FOUND ? null : httpContextMatchStrategy;\n+        return getFromPropertyArray(httpContextMatchStrategy);\n     }\n     \n-    public void setHttpContextMatchStrategy(Object httpContextMatchStrategy) {\n-        this.httpContextMatchStrategy = httpContextMatchStrategy;\n+    public void setHttpContextMatchStrategy(Object h) {\n+        propertyValues[httpContextMatchStrategy] = h;\n     }\n \n     public Object getHttpBasePath() {\n-        return httpBasePath == NOT_FOUND ? null : httpBasePath;\n+        return getFromPropertyArray(httpBasePath);\n     }\n     \n-    public void setHttpBasePath(Object httpBasePath) {\n-        this.httpBasePath = httpBasePath;\n+    public void setHttpBasePath(Object h) {\n+        propertyValues[httpBasePath] = h;\n     }\n \n     public Object getAsyncPostDispatch() {\n-        return asyncPostDispatch == NOT_FOUND ? null : asyncPostDispatch;\n+        return getFromPropertyArray(asyncPostDispatch);\n     }\n     \n-    public void setAsyncPostDispatch(Object asyncPostDispatch) {\n-        this.asyncPostDispatch = asyncPostDispatch;\n+    public void setAsyncPostDispatch(Object a) {\n+        propertyValues[asyncPostDispatch] = a;\n     }\n     \n     public Object getSecurityContext() {\n-        return securityContext == NOT_FOUND ? null : securityContext;\n+        return getFromPropertyArray(securityContext);\n     }\n     \n-    public void setSecurityContext(Object securityContext) {\n-        this.securityContext = securityContext;\n+    public void setSecurityContext(Object s) {\n+        propertyValues[securityContext] = s;\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n     public Collection getInterceptorProviders() {\n-        return interceptorProviders == NOT_FOUND ? null : (Collection) interceptorProviders;\n+        return (Collection) getFromPropertyArray(interceptorProviders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setInterceptorProviders(Collection interceptorProviders) {\n-        this.interceptorProviders = interceptorProviders;\n+    public void setInterceptorProviders(Collection i) {\n+        propertyValues[interceptorProviders] = i;\n     }\n \n     public Object getTemplateParameters() {\n-        return templateParameters == NOT_FOUND ? null :  templateParameters;\n+        return getFromPropertyArray(templateParameters);\n     }\n     \n-    public void setTemplateParameters(Object templateParameters) {\n-        this.templateParameters = templateParameters;\n+    public void setTemplateParameters(Object t) {\n+        propertyValues[templateParameters] = t;\n     }\n \n     public void removeContentType() {\n-        contentType = NOT_FOUND;\n+        propertyValues[contentType] = NOT_FOUND;\n     }\n     public void removeHttpResponse() {\n-        httpResponse = NOT_FOUND;\n+        propertyValues[httpResponse] = NOT_FOUND;\n     }\n     public void removeHttpRequest() {\n-        httpRequest = NOT_FOUND;\n+        propertyValues[httpRequest] = NOT_FOUND;\n+    }\n+    \n+    private Object getFromPropertyArray(int index) {\n+        Object value = propertyValues[index];\n+        return value == NOT_FOUND ? null : value;\n+    }\n+    \n+    @Override\n+    public int size() {\n+        int size = super.size();\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                size++;\n+            }\n+        }\n+        return size;\n+    }\n+    \n+    @Override\n+    public void clear() {\n+        super.clear();\n+        for (int i = 0; i < TOTAL; i++) {\n+            propertyValues[i] = NOT_FOUND;\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isEmpty() {\n+        if (!super.isEmpty()) {\n+            return false;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean containsValue(Object value) {\n+        if (super.containsValue(value)) {\n+            return true;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o.equals(value)) {", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0ODcyMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405848721", "bodyText": "I added a new comment for the changes.  Marking this one resolved.", "author": "jhanders34", "createdAt": "2020-04-08T22:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -544,17 +498,6 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NTY1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405165654", "bodyText": "This logic should be like the normal get method in this class.  Not sure why you aren't checking the propertyNames first.  You should use the keymap as well here like in get.   The method should be flipped and the last line be super.getOrDefault(key, d);", "author": "jhanders34", "createdAt": "2020-04-07T23:08:44Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -844,1507 +561,649 @@ public Object get(Object key) {\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n     }\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> keys = super.keySet();\n-        if (protoHeaders != NOT_FOUND) {\n-            keys.add(PROTOCOL_HEADERS);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            keys.add(CONTENT_TYPE);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            keys.add(QUERY_STRING);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            keys.add(HTTP_REQUEST_METHOD);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            keys.add(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            keys.add(TEMPLATE_PARAMETERS);\n-        }\n-        if (accept != NOT_FOUND) {\n-            keys.add(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            keys.add(CONTINUATION_PROVIDER);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            keys.add(OP_RES_INFO_STACK);\n-        }\n-        if (destination != NOT_FOUND) {\n-            keys.add(DESTINATION);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            keys.add(WSDL_DESCRIPTION);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            keys.add(WSDL_INTERFACE);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            keys.add(WSDL_OPERATION);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            keys.add(WSDL_PORT);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            keys.add(WSDL_SERVICE);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            keys.add(REQUEST_URL);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            keys.add(REQUEST_URI);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            keys.add(PATH_INFO);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            keys.add(BASE_PATH);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            keys.add(FIXED_PARAMETER_ORDER);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            keys.add(IN_INTERCEPTORS);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            keys.add(OUT_INTERCEPTORS);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            keys.add(RESPONSE_CODE);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            keys.add(ATTACHMENTS);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            keys.add(ENCODING);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            keys.add(HTTP_BASE_PATH);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            keys.add(SECURITY_CONTEXT);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            keys.add(AUTHORIZATION_POLICY);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            keys.add(CERT_CONSTRAINTS);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            keys.add(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            keys.add(RESOURCE_METHOD);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            keys.add(ONE_WAY_REQUEST);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            keys.add(ASYNC_RESPONSE);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            keys.add(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            keys.add(SSE_EVENT_SINK);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            keys.add(REQUESTOR_ROLE);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            keys.add(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            keys.add(ENDPOINT_ADDRESS);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            keys.add(INBOUND_MESSAGE);\n+        Set<String> myKeys = new HashSet<String>(super.keySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myKeys.add(propertyNames[i]);\n+            }\n         }\n \n-        return keys;\n+        return myKeys;\n     }\n     \n     @Override\n     public Set<Map.Entry<String,Object>> entrySet() {\n-        Set<Map.Entry<String,Object>> entrySet = super.entrySet();\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>();\n-        myEntrySet.addAll(entrySet);\n-        Map.Entry<String,Object> entry;\n-        if (protoHeaders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PROTOCOL_HEADERS, protoHeaders);\n-            myEntrySet.add(entry);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTENT_TYPE, contentType);\n-            myEntrySet.add(entry);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(QUERY_STRING, queryString);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_REQUEST_METHOD, httpRequestMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INTERCEPTOR_PROVIDERS, interceptorProviders);\n-            myEntrySet.add(entry);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(TEMPLATE_PARAMETERS, templateParameters);\n-            myEntrySet.add(entry);\n-        }\n-        if (accept != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ACCEPT_CONTENT_TYPE, accept);\n-            myEntrySet.add(entry);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTINUATION_PROVIDER, continuationProvider);\n-            myEntrySet.add(entry);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OP_RES_INFO_STACK, opStack);\n-            myEntrySet.add(entry);\n-        }\n-        if (destination != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(DESTINATION, destination);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_DESCRIPTION, wsdlDescription);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_INTERFACE, wsdlInterface);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_OPERATION, wsdlOperation);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_PORT, wsdlPort);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_SERVICE, wsdlService);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URL, requestUrl);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URI, requestUri);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PATH_INFO, pathInfo);\n-            myEntrySet.add(entry);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(BASE_PATH, basePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(FIXED_PARAMETER_ORDER, fixedParamOrder);\n-            myEntrySet.add(entry);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(IN_INTERCEPTORS, inInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OUT_INTERCEPTORS, outInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESPONSE_CODE, responseCode);\n-            myEntrySet.add(entry);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ATTACHMENTS, attachments);\n-            myEntrySet.add(entry);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENCODING, encoding);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_BASE_PATH, httpBasePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n-            myEntrySet.add(entry);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SECURITY_CONTEXT, securityContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AUTHORIZATION_POLICY, authorizationPolicy);\n-            myEntrySet.add(entry);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CERT_CONSTRAINTS, certConstraints);\n-            myEntrySet.add(entry);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_SERVLET_RESPONSE, httpServletResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESOURCE_METHOD, resourceMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ONE_WAY_REQUEST, oneWayRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_RESPONSE, asyncResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n-            myEntrySet.add(entry);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n-            myEntrySet.add(entry);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n-            myEntrySet.add(entry);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SSE_EVENT_SINK, sseEventSink);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUESTOR_ROLE, requestorRole);\n-            myEntrySet.add(entry);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENDPOINT_ADDRESS, endpointAddress);\n-            myEntrySet.add(entry);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INBOUND_MESSAGE, inboundMessage);\n-            myEntrySet.add(entry);\n+        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+            }\n         }\n         return myEntrySet;\n     }\n     \n     @Override\n     public boolean containsKey(Object key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return protoHeaders != NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return httpRequestMethod != NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return interceptorProviders != NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return templateParameters != NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return accept != NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return continuationProvider != NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return opStack != NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                return destination != NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return wsdlDescription != NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                return wsdlInterface != NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                return wsdlOperation != NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                return wsdlPort != NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                return wsdlService != NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                return requestUrl != NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                return requestUri != NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                return pathInfo != NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                return basePath != NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return fixedParamOrder != NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                return inInterceptors != NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return outInterceptors != NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                return responseCode != NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                return attachments != NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                return encoding != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return httpContext != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return httpConfig != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return httpContextMatchStrategy != NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                return httpBasePath != NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return asyncPostDispatch != NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                return securityContext != NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return authorizationPolicy != NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return certConstraints != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return serviceRedirection != NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return httpServletResponse != NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                return resourceMethod != NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return oneWayRequest != NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                return asyncResponse != NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return threadContextSwitched != NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return cacheInputProperty != NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return previousMessage != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return responseHeadersCopied != NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                return sseEventSink != NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                return requestorRole != NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return partialResponse != NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return emptyPartialResponse != NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return endpointAddress != NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                return inboundMessage != NOT_FOUND;\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return propertyValues[index] != NOT_FOUND;\n         }\n         return super.containsKey(key);\n     }\n     @Override\n     public void putAll(Map<? extends String, ? extends Object> m) {\n-        if (m.containsKey(PROTOCOL_HEADERS)) {\n-            protoHeaders = m.get(PROTOCOL_HEADERS);\n-        }\n-        if (m.containsKey(CONTENT_TYPE)) {\n-            contentType = m.get(CONTENT_TYPE);\n-        }\n-        if (m.containsKey(QUERY_STRING)) {\n-            queryString = m.get(QUERY_STRING);\n+        for (Map.Entry<? extends String, ? extends Object> entry : m.entrySet()) {\n+            put(entry.getKey(), entry.getValue());\n         }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_REQUEST)) {\n-            httpRequest = m.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_RESPONSE)) {\n-            httpResponse = m.get(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (m.containsKey(REQUEST_PATH_TO_MATCH_SLASH)) {\n-            pathToMatchSlash = m.get(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (m.containsKey(HTTP_REQUEST_METHOD)) {\n-            httpRequestMethod = m.get(HTTP_REQUEST_METHOD);\n-        }\n-        if (m.containsKey(INTERCEPTOR_PROVIDERS)) {\n-            interceptorProviders = m.get(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (m.containsKey(TEMPLATE_PARAMETERS)) {\n-            templateParameters = m.get(TEMPLATE_PARAMETERS);\n-        }\n-        if (m.containsKey(ACCEPT_CONTENT_TYPE)) {\n-            accept = m.get(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (m.containsKey(CONTINUATION_PROVIDER)) {\n-            continuationProvider = m.get(CONTINUATION_PROVIDER);\n-        }\n-        if (m.containsKey(OP_RES_INFO_STACK)) {\n-            opStack = m.get(OP_RES_INFO_STACK);\n-        }\n-        if (m.containsKey(DESTINATION)) {\n-            destination = m.get(DESTINATION);\n-        }\n-        if (m.containsKey(WSDL_DESCRIPTION)) {\n-            wsdlDescription = m.get(WSDL_DESCRIPTION);\n-        }\n-        if (m.containsKey(WSDL_INTERFACE)) {\n-            wsdlInterface = m.get(WSDL_INTERFACE);\n-        }\n-        if (m.containsKey(WSDL_OPERATION)) {\n-            wsdlOperation = m.get(WSDL_OPERATION);\n-        }\n-        if (m.containsKey(WSDL_PORT)) {\n-            wsdlPort = m.get(WSDL_PORT);\n-        }\n-        if (m.containsKey(WSDL_SERVICE)) {\n-            wsdlService = m.get(WSDL_SERVICE);\n-        }\n-        if (m.containsKey(REQUEST_URL)) {\n-            requestUrl = m.get(REQUEST_URL);\n-        }\n-        if (m.containsKey(REQUEST_URI)) {\n-            requestUri = m.get(REQUEST_URI);\n-        }\n-        if (m.containsKey(PATH_INFO)) {\n-            pathInfo = m.get(PATH_INFO);\n-        }\n-        if (m.containsKey(BASE_PATH)) {\n-            basePath = m.get(BASE_PATH);\n-        }\n-        if (m.containsKey(FIXED_PARAMETER_ORDER)) {\n-            fixedParamOrder = m.get(FIXED_PARAMETER_ORDER);\n-        }\n-        if (m.containsKey(IN_INTERCEPTORS)) {\n-            inInterceptors = m.get(IN_INTERCEPTORS);\n-        }\n-        if (m.containsKey(OUT_INTERCEPTORS)) {\n-            outInterceptors = m.get(OUT_INTERCEPTORS);\n-        }\n-        if (m.containsKey(RESPONSE_CODE)) {\n-            responseCode = m.get(RESPONSE_CODE);\n-        }\n-        if (m.containsKey(ATTACHMENTS)) {\n-            attachments = m.get(ATTACHMENTS);\n-        }\n-        if (m.containsKey(ENCODING)) {\n-            encoding = m.get(ENCODING);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT)) {\n-            httpContext = m.get(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONFIG)) {\n-            httpConfig = m.get(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY)) {\n-            httpContextMatchStrategy = m.get(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (m.containsKey(HTTP_BASE_PATH)) {\n-            httpBasePath = m.get(HTTP_BASE_PATH);\n-        } \n-        if (m.containsKey(ASYNC_POST_RESPONSE_DISPATCH)) {\n-            asyncPostDispatch = m.get(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (m.containsKey(SECURITY_CONTEXT)) {\n-            securityContext = m.get(SECURITY_CONTEXT);\n-        }\n-        if (m.containsKey(AUTHORIZATION_POLICY)) {\n-            authorizationPolicy = m.get(AUTHORIZATION_POLICY);\n-        }\n-        if (m.containsKey(CERT_CONSTRAINTS)) {\n-            certConstraints = m.get(CERT_CONSTRAINTS);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.SERVICE_REDIRECTION)) {\n-            serviceRedirection = m.get(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (m.containsKey(HTTP_SERVLET_RESPONSE)) {\n-            httpServletResponse = m.get(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (m.containsKey(RESOURCE_METHOD)) {\n-            resourceMethod = m.get(RESOURCE_METHOD);\n-        }\n-        if (m.containsKey(ONE_WAY_REQUEST)) {\n-            oneWayRequest = m.get(ONE_WAY_REQUEST);\n-        }\n-        if (m.containsKey(ASYNC_RESPONSE)) {\n-            asyncResponse = m.get(ASYNC_RESPONSE);\n-        }\n-        if (m.containsKey(THREAD_CONTEXT_SWITCHED)) {\n-            threadContextSwitched = m.get(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (m.containsKey(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY)) {\n-            cacheInputProperty = m.get(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (m.containsKey(PhaseInterceptorChain.PREVIOUS_MESSAGE)) {\n-            previousMessage = m.get(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED)) {\n-            responseHeadersCopied = m.get(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (m.containsKey(SSE_EVENT_SINK)) {\n-            sseEventSink = m.get(SSE_EVENT_SINK);\n-        }\n-        if (m.containsKey(REQUESTOR_ROLE)) {\n-            requestorRole = m.get(REQUESTOR_ROLE);\n-        }\n-        if (m.containsKey(PARTIAL_RESPONSE_MESSAGE)) {\n-            partialResponse = m.get(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(EMPTY_PARTIAL_RESPONSE_MESSAGE)) {\n-            emptyPartialResponse = m.get(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(ENDPOINT_ADDRESS)) {\n-            endpointAddress = m.get(ENDPOINT_ADDRESS);\n-        }\n-        if (m.containsKey(INBOUND_MESSAGE)) {\n-            inboundMessage = m.get(INBOUND_MESSAGE);\n-        }\n-        super.putAll(m);\n     }\n     @Override\n     public Collection<Object> values() {\n-        Collection<Object> values = super.values();\n-        if (protoHeaders != NOT_FOUND) {\n-            values.add(protoHeaders);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            values.add(contentType);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            values.add(queryString);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            values.add(httpRequest);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            values.add(httpResponse);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            values.add(pathToMatchSlash);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            values.add(httpRequestMethod);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            values.add(interceptorProviders);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            values.add(templateParameters);\n-        }\n-        if (accept != NOT_FOUND) {\n-            values.add(accept);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            values.add(continuationProvider);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            values.add(opStack);\n-        }\n-        if (destination != NOT_FOUND) {\n-            values.add(destination);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            values.add(wsdlDescription);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            values.add(wsdlInterface);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            values.add(wsdlOperation);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            values.add(wsdlPort);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            values.add(wsdlService);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            values.add(requestUrl);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            values.add(requestUri);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            values.add(pathInfo);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            values.add(basePath);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            values.add(fixedParamOrder);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            values.add(inInterceptors);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            values.add(outInterceptors);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            values.add(responseCode);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            values.add(attachments);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            values.add(encoding);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            values.add(httpContext);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            values.add(httpConfig);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            values.add(httpContextMatchStrategy);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            values.add(httpBasePath);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            values.add(asyncPostDispatch);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            values.add(securityContext);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            values.add(authorizationPolicy);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            values.add(certConstraints);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            values.add(serviceRedirection);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            values.add(httpServletResponse);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            values.add(resourceMethod);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            values.add(oneWayRequest);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            values.add(asyncResponse);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            values.add(threadContextSwitched);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            values.add(cacheInputProperty);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            values.add(previousMessage);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            values.add(responseHeadersCopied);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            values.add(sseEventSink);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            values.add(requestorRole);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            values.add(partialResponse);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            values.add(emptyPartialResponse);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            values.add(endpointAddress);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            values.add(inboundMessage);\n+        Collection<Object> myValues = new ArrayList<Object>(super.values());\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                myValues.add(o);\n+            }\n         }\n-        return values;\n+        return myValues;\n     }\n \n     public Object getAuthorizationPolicy() {\n-        return authorizationPolicy == NOT_FOUND ? null : authorizationPolicy;\n+        return getFromPropertyArray(authorizationPolicy);\n     }\n \n-    public void setAuthorizationPolicy(Object authorizationPolicy) {\n-        this.authorizationPolicy = authorizationPolicy;\n+    public void setAuthorizationPolicy(Object a) {\n+        propertyValues[authorizationPolicy] = a;\n     }\n \n     public Object getCertConstraints() {\n-        return certConstraints == NOT_FOUND ? null : certConstraints;\n+        return getFromPropertyArray(certConstraints);\n     }\n \n-    public void setCertConstraints(Object certConstraints) {\n-        this.certConstraints = certConstraints;\n+    public void setCertConstraints(Object c) {\n+        propertyValues[certConstraints] = c;\n     }\n \n     public Object getServiceRedirection() {\n-        return serviceRedirection == NOT_FOUND ? null : serviceRedirection;\n+        return getFromPropertyArray(serviceRedirection);\n     }\n \n-    public void setServiceRedirection(Object serviceRedirection) {\n-        this.serviceRedirection = serviceRedirection;\n+    public void setServiceRedirection(Object s) {\n+        propertyValues[serviceRedirection] = s;\n     }\n \n     public Object getHttpServletResponse() {\n-        return httpServletResponse == NOT_FOUND ? null : httpServletResponse;\n+        return getFromPropertyArray(httpServletResponse);\n     }\n \n-    public void setHttpServletResponse(Object httpServletResponse) {\n-        this.httpServletResponse = httpServletResponse;\n+    public void setHttpServletResponse(Object h) {\n+        propertyValues[httpServletResponse] = h;\n     }\n \n     public Object getResourceMethod() {\n-        return resourceMethod == NOT_FOUND ? null : resourceMethod;\n+        return getFromPropertyArray(resourceMethod);\n     }\n \n-    public void setResourceMethod(Object resourceMethod) {\n-        this.resourceMethod = resourceMethod;\n+    public void setResourceMethod(Object r) {\n+        propertyValues[resourceMethod] = r;\n     }\n \n     public Object getOneWayRequest() {\n-        return oneWayRequest == NOT_FOUND ? null : oneWayRequest;\n+        return getFromPropertyArray(oneWayRequest);\n     }\n \n-    public void setOneWayRequest(Object oneWayRequest) {\n-        this.oneWayRequest = oneWayRequest;\n+    public void setOneWayRequest(Object o) {\n+        propertyValues[oneWayRequest] = o;\n     }\n \n     public Object getAsyncResponse() {\n-        return asyncResponse == NOT_FOUND ? null : asyncResponse;\n+        return getFromPropertyArray(asyncResponse);\n     }\n \n-    public void setAsyncResponse(Object asyncResponse) {\n-        this.asyncResponse = asyncResponse;\n+    public void setAsyncResponse(Object a) {\n+        propertyValues[asyncResponse] = a;\n     }\n \n     public Object getThreadContextSwitched() {\n-        return threadContextSwitched == NOT_FOUND ? null : threadContextSwitched;\n+        return getFromPropertyArray(threadContextSwitched);\n     }\n \n-    public void setThreadContextSwitched(Object threadContextSwitched) {\n-        this.threadContextSwitched = threadContextSwitched;\n+    public void setThreadContextSwitched(Object t) {\n+        propertyValues[threadContextSwitched] = t;\n     }\n \n     public Object getPreviousMessage() {\n-        return previousMessage == NOT_FOUND ? null : previousMessage;\n+        return getFromPropertyArray(previousMessage);\n     }\n \n     public boolean containsPreviousMessage() {\n-        return previousMessage != NOT_FOUND;\n+        return propertyValues[previousMessage] != NOT_FOUND;\n     }\n \n-    public void setPreviousMessage(Object previousMessage) {\n-        this.previousMessage = previousMessage;\n+    public void setPreviousMessage(Object p) {\n+        propertyValues[previousMessage] = p;\n     }\n \n     public Object getCacheInputProperty() {\n-        return cacheInputProperty == NOT_FOUND ? null : cacheInputProperty;\n+        return getFromPropertyArray(cacheInputProperty);\n     }\n \n-    public void setCacheInputProperty(Object cacheInputProperty) {\n-        this.cacheInputProperty = cacheInputProperty;\n+    public void setCacheInputProperty(Object c) {\n+        propertyValues[cacheInputProperty] = c;\n     }\n \n     public Object getSseEventSink() {\n-        return sseEventSink == NOT_FOUND ? null : sseEventSink;\n+        return getFromPropertyArray(sseEventSink);\n     }\n \n-    public void setSseEventSink(Object sseEventSink) {\n-        this.sseEventSink = sseEventSink;\n+    public void setSseEventSink(Object s) {\n+        propertyValues[sseEventSink] = s;\n     }\n \n     public Object getResponseHeadersCopied() {\n-        return responseHeadersCopied == NOT_FOUND ? null : responseHeadersCopied;\n+        return getFromPropertyArray(responseHeadersCopied);\n     }\n \n-    public void setResponseHeadersCopied(Object responseHeadersCopied) {\n-        this.responseHeadersCopied = responseHeadersCopied;\n+    public void setResponseHeadersCopied(Object r) {\n+        propertyValues[responseHeadersCopied] = r;\n     }\n \n     public Object getRequestorRole() {\n-        return requestorRole == NOT_FOUND ? null : requestorRole;\n+        return getFromPropertyArray(requestorRole);\n     }\n \n-    public void setRequestorRole(Object requestorRole) {\n-        this.requestorRole = requestorRole;\n+    public void setRequestorRole(Object r) {\n+        propertyValues[requestorRole] = r;\n     }\n \n     public Object getEmptyPartialResponse() {\n-        return emptyPartialResponse == NOT_FOUND ? null : emptyPartialResponse;\n+        return getFromPropertyArray(emptyPartialResponse);\n     }\n \n-    public void setEmptyPartialResponse(Object emptyPartialResponse) {\n-        this.emptyPartialResponse = emptyPartialResponse;\n+    public void setEmptyPartialResponse(Object e) {\n+        propertyValues[emptyPartialResponse] = e;\n     }\n \n     public Object getPartialResponse() {\n-        return partialResponse == NOT_FOUND ? null : partialResponse;\n+        return getFromPropertyArray(partialResponse);\n     }\n \n-    public void setPartialResponse(Object partialResponse) {\n-        this.partialResponse = partialResponse;\n+    public void setPartialResponse(Object p) {\n+        propertyValues[partialResponse] = p;\n     }\n \n     public Object getEndpointAddress() {\n-        return endpointAddress == NOT_FOUND ? null : endpointAddress;\n+        return getFromPropertyArray(endpointAddress);\n     }\n \n-    public void setEndpointAddress(Object endpointAddress) {\n-        this.endpointAddress = endpointAddress;\n+    public void setEndpointAddress(Object e) {\n+        propertyValues[endpointAddress] = e;\n     }\n     \n     public Object getInboundMessage() {\n-        return inboundMessage == NOT_FOUND ? null : inboundMessage;\n+        return getFromPropertyArray(inboundMessage);\n     }\n \n-    public void setInboundMessage(Object inboundMessage) {\n-        this.inboundMessage = inboundMessage;\n+    public void setInboundMessage(Object i) {\n+        propertyValues[inboundMessage] = i;\n     }\n     public String getPathToMatchSlash() {\n-        return pathToMatchSlash == NOT_FOUND ? null : (String) pathToMatchSlash;\n+        return (String) getFromPropertyArray(pathToMatchSlash);\n     }\n     \n-    public void setPathToMatchSlash(String pathToMatchSlash) {\n-        this.pathToMatchSlash = pathToMatchSlash;\n+    public void setPathToMatchSlash(String p) {\n+        propertyValues[pathToMatchSlash] = p;\n     }\n     \n     public String getHttpRequestMethod() {\n-        return httpRequestMethod == NOT_FOUND ? null : (String) httpRequestMethod;\n+        return (String) getFromPropertyArray(httpRequestMethod);\n     }\n     \n-    public void setHttpRequestMethod(String httpRequestMethod) {\n-        this.httpRequestMethod = httpRequestMethod;\n+    public void setHttpRequestMethod(String h) {\n+        propertyValues[httpRequestMethod] = h;\n     }\n \n     public void removePathToMatchSlash() {\n-        pathToMatchSlash = NOT_FOUND;\n+        propertyValues[pathToMatchSlash] = NOT_FOUND;\n     }\n     public String getQueryString() {\n-        return queryString == NOT_FOUND ? null : (String) queryString;\n+        return (String) getFromPropertyArray(queryString);\n     }\n     \n-    public void setQueryString(String queryString) {\n-        this.queryString = queryString;\n+    public void setQueryString(String q) {\n+        propertyValues[queryString] = q;\n     }\n     public Object getOperationResourceInfoStack() {\n-        return opStack == NOT_FOUND ? null: opStack;\n+        return getFromPropertyArray(opStack);\n     }\n     \n-    public void setOperationResourceInfoStack(Object opStack) {\n-        this.opStack = opStack;\n+    public void setOperationResourceInfoStack(Object o) {\n+        propertyValues[opStack] = o;\n     }\n \n     public String getContentType() {\n-        return contentType == NOT_FOUND ? null : (String) contentType;\n+        return (String) getFromPropertyArray(contentType);\n     }\n     \n     public boolean containsContentType() {\n-        return contentType != NOT_FOUND;\n+        return propertyValues[contentType] != NOT_FOUND;\n     }\n     \n-    public void setContentType(String contentType) {\n-        this.contentType = contentType;\n+    public void setContentType(String c) {\n+        propertyValues[contentType] = c;\n     }\n \n     public Object getHttpRequest() {\n-        return httpRequest == NOT_FOUND ? null : httpRequest;\n+        return getFromPropertyArray(httpRequest);\n     }\n     \n     public boolean containsHttpRequest() {\n-        return httpRequest != NOT_FOUND;\n+        return propertyValues[httpRequest] != NOT_FOUND;\n     }\n     \n-    public void setHttpRequest(Object httpRequest) {\n-        this.httpRequest = httpRequest;\n+    public void setHttpRequest(Object h) {\n+        propertyValues[httpRequest] = h;\n     }\n     \n     public Object getHttpResponse() {\n-        return httpResponse == NOT_FOUND ? null : httpResponse;\n+        return getFromPropertyArray(httpResponse);\n     }\n     \n-    public void setHttpResponse(Object httpResponse) {\n-        this.httpResponse = httpResponse;\n+    public void setHttpResponse(Object h) {\n+        propertyValues[httpResponse] = h;\n     }\n \n     public Object getAccept() {\n-        return accept == NOT_FOUND ? null : accept;\n+        return getFromPropertyArray(accept);\n     }\n     \n-    public void setAccept(Object accept) {\n-        this.accept = accept;\n+    public void setAccept(Object a) {\n+        propertyValues[accept] = a;\n     }\n \n     public Object getContinuationProvider() {\n-        return continuationProvider == NOT_FOUND ? null : continuationProvider;\n+        return getFromPropertyArray(continuationProvider);\n     }\n     \n-    public void setContinuationProvider(Object continuationProvider) {\n-        this.continuationProvider = continuationProvider;\n+    public void setContinuationProvider(Object c) {\n+        propertyValues[continuationProvider] = c;\n     }\n \n     public Object getWsdlDescription() {\n-        return wsdlDescription == NOT_FOUND ? null : wsdlDescription;\n+        return getFromPropertyArray(wsdlDescription);\n     }\n     \n-    public void setWsdlDescription(Object wsdlDescription) {\n-        this.wsdlDescription = wsdlDescription;\n+    public void setWsdlDescription(Object w) {\n+        propertyValues[wsdlDescription] = w;\n     }\n \n     public Object getWsdlInterface() {\n-        return wsdlInterface == NOT_FOUND ? null : wsdlInterface;\n+        return getFromPropertyArray(wsdlInterface);\n     }\n     \n-    public void setWsdlInterface(Object wsdlInterface) {\n-        this.wsdlInterface = wsdlInterface;\n+    public void setWsdlInterface(Object w) {\n+        propertyValues[wsdlInterface] = w;\n     }\n \n     public Object getWsdlOperation() {\n-        return wsdlOperation == NOT_FOUND ? null : wsdlOperation;\n+        return getFromPropertyArray(wsdlOperation);\n     }\n     \n-    public void setWsdlOperation(Object wsdlOperation) {\n-        this.wsdlOperation = wsdlOperation;\n+    public void setWsdlOperation(Object w) {\n+        propertyValues[wsdlOperation] = w;\n     }\n \n     public Object getWsdlPort() {\n-        return wsdlPort == NOT_FOUND ? null : wsdlPort;\n+        return getFromPropertyArray(wsdlPort);\n     }\n     \n-    public void setWsdlPort(Object wsdlPort) {\n-        this.wsdlPort = wsdlPort;\n+    public void setWsdlPort(Object w) {\n+        propertyValues[wsdlPort] = w;\n     }\n \n     public Object getWsdlService() {\n-        return wsdlService == NOT_FOUND ? null : wsdlService;\n+        return getFromPropertyArray(wsdlService);\n     }\n     \n-    public void setWsdlService(Object wsdlService) {\n-        this.wsdlService = wsdlService;\n+    public void setWsdlService(Object w) {\n+        propertyValues[wsdlService] = w;\n     }\n \n     public Object getRequestUrl() {\n-        return requestUrl == NOT_FOUND ? null : requestUrl;\n+        return getFromPropertyArray(requestUrl);\n     }\n     \n-    public void setRequestUrl(Object requestUrl) {\n-        this.requestUrl = requestUrl;\n+    public void setRequestUrl(Object r) {\n+        propertyValues[requestUrl] = r;\n     }\n \n     public Object getRequestUri() {\n-        return requestUri == NOT_FOUND ? null : requestUri;\n+        return getFromPropertyArray(requestUri);\n     }\n     \n-    public void setRequestUri(Object requestUri) {\n-        this.requestUri = requestUri;\n+    public void setRequestUri(Object r) {\n+        propertyValues[requestUri] = r;\n     }\n     \n     public Object getPathInfo() {\n-        return pathInfo == NOT_FOUND ? null : pathInfo;\n+        return getFromPropertyArray(pathInfo);\n     }\n     \n-    public void setPathInfo(Object pathInfo) {\n-        this.pathInfo = pathInfo;\n+    public void setPathInfo(Object p) {\n+       propertyValues[pathInfo] = p;\n     }\n     \n     public Object getBasePath() {\n-        return basePath == NOT_FOUND ? null : basePath;\n+        return getFromPropertyArray(basePath);\n     }\n     \n     public boolean containsBasePath() {\n-        return basePath != NOT_FOUND;\n+        return propertyValues[basePath] != NOT_FOUND;\n     }\n     \n-    public void setBasePath(Object basePath) {\n-        this.basePath = basePath;\n+    public void setBasePath(Object b) {\n+        propertyValues[basePath] = b;\n     }\n \n     public Object getFixedParamOrder() {\n-        return fixedParamOrder == NOT_FOUND ? null : fixedParamOrder;\n+        return getFromPropertyArray(fixedParamOrder);\n     }\n     \n-    public void setFixedParamOrder(Object fixedParamOrder) {\n-        this.fixedParamOrder = fixedParamOrder;\n+    public void setFixedParamOrder(Object f) {\n+        propertyValues[fixedParamOrder] = f;\n     }\n \n     public Object getInInterceptors() {\n-        return inInterceptors == NOT_FOUND ? null : inInterceptors;\n+        return getFromPropertyArray(inInterceptors);\n     }\n     \n-    public void setInInterceptors(Object inInterceptors) {\n-        this.inInterceptors = inInterceptors;\n+    public void setInInterceptors(Object i) {\n+        propertyValues[inInterceptors] = i;\n     }\n \n     public Object getOutInterceptors() {\n-        return outInterceptors == NOT_FOUND ? null : outInterceptors;\n+        return getFromPropertyArray(outInterceptors);\n     }\n     \n-    public void setOutInterceptors(Object outInterceptors) {\n-        this.outInterceptors = outInterceptors;\n+    public void setOutInterceptors(Object o) {\n+        propertyValues[outInterceptors] = o;\n     }\n \n     public Object getResponseCode() {\n-        return responseCode == NOT_FOUND ? null : responseCode;\n+        return getFromPropertyArray(responseCode);\n     }\n     \n-    public void setResponseCode(Object responseCode) {\n-        this.responseCode = responseCode;\n+    public void setResponseCode(Object r) {\n+        propertyValues[responseCode] = r;\n     }\n \n     public Object getEncoding() {\n-        return encoding == NOT_FOUND ? null : encoding;\n+        return getFromPropertyArray(encoding);\n     }\n     \n-    public void setEncoding(Object encoding) {\n-        this.encoding = encoding;\n+    public void setEncoding(Object e) {\n+        propertyValues[encoding] = e;\n     }\n \n     public Object getHttpContext() {\n-        return httpContext == NOT_FOUND ? null : httpContext;\n+        return getFromPropertyArray(httpContext);\n     }\n     \n-    public void setHttpContext(Object httpContext) {\n-        this.httpContext = httpContext;\n+    public void setHttpContext(Object h) {\n+        propertyValues[httpContext] = h;\n     }\n \n     public Object getHttpConfig() {\n-        return httpConfig == NOT_FOUND ? null : httpConfig;\n+        return getFromPropertyArray(httpConfig);\n     }\n     \n-    public void setHttpConfig(Object httpConfig) {\n-        this.httpConfig = httpConfig;\n+    public void setHttpConfig(Object h) {\n+        propertyValues[httpConfig] = h;\n     }\n \n     public Object getHttpContextMatchStrategy() {\n-        return httpContextMatchStrategy == NOT_FOUND ? null : httpContextMatchStrategy;\n+        return getFromPropertyArray(httpContextMatchStrategy);\n     }\n     \n-    public void setHttpContextMatchStrategy(Object httpContextMatchStrategy) {\n-        this.httpContextMatchStrategy = httpContextMatchStrategy;\n+    public void setHttpContextMatchStrategy(Object h) {\n+        propertyValues[httpContextMatchStrategy] = h;\n     }\n \n     public Object getHttpBasePath() {\n-        return httpBasePath == NOT_FOUND ? null : httpBasePath;\n+        return getFromPropertyArray(httpBasePath);\n     }\n     \n-    public void setHttpBasePath(Object httpBasePath) {\n-        this.httpBasePath = httpBasePath;\n+    public void setHttpBasePath(Object h) {\n+        propertyValues[httpBasePath] = h;\n     }\n \n     public Object getAsyncPostDispatch() {\n-        return asyncPostDispatch == NOT_FOUND ? null : asyncPostDispatch;\n+        return getFromPropertyArray(asyncPostDispatch);\n     }\n     \n-    public void setAsyncPostDispatch(Object asyncPostDispatch) {\n-        this.asyncPostDispatch = asyncPostDispatch;\n+    public void setAsyncPostDispatch(Object a) {\n+        propertyValues[asyncPostDispatch] = a;\n     }\n     \n     public Object getSecurityContext() {\n-        return securityContext == NOT_FOUND ? null : securityContext;\n+        return getFromPropertyArray(securityContext);\n     }\n     \n-    public void setSecurityContext(Object securityContext) {\n-        this.securityContext = securityContext;\n+    public void setSecurityContext(Object s) {\n+        propertyValues[securityContext] = s;\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n     public Collection getInterceptorProviders() {\n-        return interceptorProviders == NOT_FOUND ? null : (Collection) interceptorProviders;\n+        return (Collection) getFromPropertyArray(interceptorProviders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setInterceptorProviders(Collection interceptorProviders) {\n-        this.interceptorProviders = interceptorProviders;\n+    public void setInterceptorProviders(Collection i) {\n+        propertyValues[interceptorProviders] = i;\n     }\n \n     public Object getTemplateParameters() {\n-        return templateParameters == NOT_FOUND ? null :  templateParameters;\n+        return getFromPropertyArray(templateParameters);\n     }\n     \n-    public void setTemplateParameters(Object templateParameters) {\n-        this.templateParameters = templateParameters;\n+    public void setTemplateParameters(Object t) {\n+        propertyValues[templateParameters] = t;\n     }\n \n     public void removeContentType() {\n-        contentType = NOT_FOUND;\n+        propertyValues[contentType] = NOT_FOUND;\n     }\n     public void removeHttpResponse() {\n-        httpResponse = NOT_FOUND;\n+        propertyValues[httpResponse] = NOT_FOUND;\n     }\n     public void removeHttpRequest() {\n-        httpRequest = NOT_FOUND;\n+        propertyValues[httpRequest] = NOT_FOUND;\n+    }\n+    \n+    private Object getFromPropertyArray(int index) {\n+        Object value = propertyValues[index];\n+        return value == NOT_FOUND ? null : value;\n+    }\n+    \n+    @Override\n+    public int size() {\n+        int size = super.size();\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                size++;\n+            }\n+        }\n+        return size;\n+    }\n+    \n+    @Override\n+    public void clear() {\n+        super.clear();\n+        for (int i = 0; i < TOTAL; i++) {\n+            propertyValues[i] = NOT_FOUND;\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isEmpty() {\n+        if (!super.isEmpty()) {\n+            return false;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean containsValue(Object value) {\n+        if (super.containsValue(value)) {\n+            return true;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o.equals(value)) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n+    \n+    @Override\n+    public Object getOrDefault(Object key, Object d) {\n+        return getOrDefault((String) key, d);\n+    }\n+    \n+    public Object getOrDefault(String key, Object d) {\n+        Object v = super.getOrDefault(key, NOT_FOUND);", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -544,17 +498,6 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NjI3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405166273", "bodyText": "This should be .equals instead of == check. Need to handle null as well.", "author": "jhanders34", "createdAt": "2020-04-07T23:10:41Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -844,1507 +561,649 @@ public Object get(Object key) {\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n     }\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> keys = super.keySet();\n-        if (protoHeaders != NOT_FOUND) {\n-            keys.add(PROTOCOL_HEADERS);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            keys.add(CONTENT_TYPE);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            keys.add(QUERY_STRING);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            keys.add(HTTP_REQUEST_METHOD);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            keys.add(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            keys.add(TEMPLATE_PARAMETERS);\n-        }\n-        if (accept != NOT_FOUND) {\n-            keys.add(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            keys.add(CONTINUATION_PROVIDER);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            keys.add(OP_RES_INFO_STACK);\n-        }\n-        if (destination != NOT_FOUND) {\n-            keys.add(DESTINATION);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            keys.add(WSDL_DESCRIPTION);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            keys.add(WSDL_INTERFACE);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            keys.add(WSDL_OPERATION);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            keys.add(WSDL_PORT);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            keys.add(WSDL_SERVICE);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            keys.add(REQUEST_URL);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            keys.add(REQUEST_URI);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            keys.add(PATH_INFO);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            keys.add(BASE_PATH);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            keys.add(FIXED_PARAMETER_ORDER);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            keys.add(IN_INTERCEPTORS);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            keys.add(OUT_INTERCEPTORS);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            keys.add(RESPONSE_CODE);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            keys.add(ATTACHMENTS);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            keys.add(ENCODING);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            keys.add(HTTP_BASE_PATH);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            keys.add(SECURITY_CONTEXT);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            keys.add(AUTHORIZATION_POLICY);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            keys.add(CERT_CONSTRAINTS);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            keys.add(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            keys.add(RESOURCE_METHOD);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            keys.add(ONE_WAY_REQUEST);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            keys.add(ASYNC_RESPONSE);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            keys.add(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            keys.add(SSE_EVENT_SINK);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            keys.add(REQUESTOR_ROLE);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            keys.add(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            keys.add(ENDPOINT_ADDRESS);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            keys.add(INBOUND_MESSAGE);\n+        Set<String> myKeys = new HashSet<String>(super.keySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myKeys.add(propertyNames[i]);\n+            }\n         }\n \n-        return keys;\n+        return myKeys;\n     }\n     \n     @Override\n     public Set<Map.Entry<String,Object>> entrySet() {\n-        Set<Map.Entry<String,Object>> entrySet = super.entrySet();\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>();\n-        myEntrySet.addAll(entrySet);\n-        Map.Entry<String,Object> entry;\n-        if (protoHeaders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PROTOCOL_HEADERS, protoHeaders);\n-            myEntrySet.add(entry);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTENT_TYPE, contentType);\n-            myEntrySet.add(entry);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(QUERY_STRING, queryString);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_REQUEST_METHOD, httpRequestMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INTERCEPTOR_PROVIDERS, interceptorProviders);\n-            myEntrySet.add(entry);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(TEMPLATE_PARAMETERS, templateParameters);\n-            myEntrySet.add(entry);\n-        }\n-        if (accept != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ACCEPT_CONTENT_TYPE, accept);\n-            myEntrySet.add(entry);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTINUATION_PROVIDER, continuationProvider);\n-            myEntrySet.add(entry);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OP_RES_INFO_STACK, opStack);\n-            myEntrySet.add(entry);\n-        }\n-        if (destination != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(DESTINATION, destination);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_DESCRIPTION, wsdlDescription);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_INTERFACE, wsdlInterface);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_OPERATION, wsdlOperation);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_PORT, wsdlPort);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_SERVICE, wsdlService);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URL, requestUrl);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URI, requestUri);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PATH_INFO, pathInfo);\n-            myEntrySet.add(entry);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(BASE_PATH, basePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(FIXED_PARAMETER_ORDER, fixedParamOrder);\n-            myEntrySet.add(entry);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(IN_INTERCEPTORS, inInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OUT_INTERCEPTORS, outInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESPONSE_CODE, responseCode);\n-            myEntrySet.add(entry);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ATTACHMENTS, attachments);\n-            myEntrySet.add(entry);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENCODING, encoding);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_BASE_PATH, httpBasePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n-            myEntrySet.add(entry);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SECURITY_CONTEXT, securityContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AUTHORIZATION_POLICY, authorizationPolicy);\n-            myEntrySet.add(entry);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CERT_CONSTRAINTS, certConstraints);\n-            myEntrySet.add(entry);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_SERVLET_RESPONSE, httpServletResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESOURCE_METHOD, resourceMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ONE_WAY_REQUEST, oneWayRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_RESPONSE, asyncResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n-            myEntrySet.add(entry);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n-            myEntrySet.add(entry);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n-            myEntrySet.add(entry);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SSE_EVENT_SINK, sseEventSink);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUESTOR_ROLE, requestorRole);\n-            myEntrySet.add(entry);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENDPOINT_ADDRESS, endpointAddress);\n-            myEntrySet.add(entry);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INBOUND_MESSAGE, inboundMessage);\n-            myEntrySet.add(entry);\n+        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+            }\n         }\n         return myEntrySet;\n     }\n     \n     @Override\n     public boolean containsKey(Object key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return protoHeaders != NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return httpRequestMethod != NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return interceptorProviders != NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return templateParameters != NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return accept != NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return continuationProvider != NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return opStack != NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                return destination != NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return wsdlDescription != NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                return wsdlInterface != NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                return wsdlOperation != NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                return wsdlPort != NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                return wsdlService != NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                return requestUrl != NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                return requestUri != NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                return pathInfo != NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                return basePath != NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return fixedParamOrder != NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                return inInterceptors != NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return outInterceptors != NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                return responseCode != NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                return attachments != NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                return encoding != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return httpContext != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return httpConfig != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return httpContextMatchStrategy != NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                return httpBasePath != NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return asyncPostDispatch != NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                return securityContext != NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return authorizationPolicy != NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return certConstraints != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return serviceRedirection != NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return httpServletResponse != NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                return resourceMethod != NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return oneWayRequest != NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                return asyncResponse != NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return threadContextSwitched != NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return cacheInputProperty != NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return previousMessage != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return responseHeadersCopied != NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                return sseEventSink != NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                return requestorRole != NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return partialResponse != NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return emptyPartialResponse != NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return endpointAddress != NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                return inboundMessage != NOT_FOUND;\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return propertyValues[index] != NOT_FOUND;\n         }\n         return super.containsKey(key);\n     }\n     @Override\n     public void putAll(Map<? extends String, ? extends Object> m) {\n-        if (m.containsKey(PROTOCOL_HEADERS)) {\n-            protoHeaders = m.get(PROTOCOL_HEADERS);\n-        }\n-        if (m.containsKey(CONTENT_TYPE)) {\n-            contentType = m.get(CONTENT_TYPE);\n-        }\n-        if (m.containsKey(QUERY_STRING)) {\n-            queryString = m.get(QUERY_STRING);\n+        for (Map.Entry<? extends String, ? extends Object> entry : m.entrySet()) {\n+            put(entry.getKey(), entry.getValue());\n         }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_REQUEST)) {\n-            httpRequest = m.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_RESPONSE)) {\n-            httpResponse = m.get(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (m.containsKey(REQUEST_PATH_TO_MATCH_SLASH)) {\n-            pathToMatchSlash = m.get(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (m.containsKey(HTTP_REQUEST_METHOD)) {\n-            httpRequestMethod = m.get(HTTP_REQUEST_METHOD);\n-        }\n-        if (m.containsKey(INTERCEPTOR_PROVIDERS)) {\n-            interceptorProviders = m.get(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (m.containsKey(TEMPLATE_PARAMETERS)) {\n-            templateParameters = m.get(TEMPLATE_PARAMETERS);\n-        }\n-        if (m.containsKey(ACCEPT_CONTENT_TYPE)) {\n-            accept = m.get(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (m.containsKey(CONTINUATION_PROVIDER)) {\n-            continuationProvider = m.get(CONTINUATION_PROVIDER);\n-        }\n-        if (m.containsKey(OP_RES_INFO_STACK)) {\n-            opStack = m.get(OP_RES_INFO_STACK);\n-        }\n-        if (m.containsKey(DESTINATION)) {\n-            destination = m.get(DESTINATION);\n-        }\n-        if (m.containsKey(WSDL_DESCRIPTION)) {\n-            wsdlDescription = m.get(WSDL_DESCRIPTION);\n-        }\n-        if (m.containsKey(WSDL_INTERFACE)) {\n-            wsdlInterface = m.get(WSDL_INTERFACE);\n-        }\n-        if (m.containsKey(WSDL_OPERATION)) {\n-            wsdlOperation = m.get(WSDL_OPERATION);\n-        }\n-        if (m.containsKey(WSDL_PORT)) {\n-            wsdlPort = m.get(WSDL_PORT);\n-        }\n-        if (m.containsKey(WSDL_SERVICE)) {\n-            wsdlService = m.get(WSDL_SERVICE);\n-        }\n-        if (m.containsKey(REQUEST_URL)) {\n-            requestUrl = m.get(REQUEST_URL);\n-        }\n-        if (m.containsKey(REQUEST_URI)) {\n-            requestUri = m.get(REQUEST_URI);\n-        }\n-        if (m.containsKey(PATH_INFO)) {\n-            pathInfo = m.get(PATH_INFO);\n-        }\n-        if (m.containsKey(BASE_PATH)) {\n-            basePath = m.get(BASE_PATH);\n-        }\n-        if (m.containsKey(FIXED_PARAMETER_ORDER)) {\n-            fixedParamOrder = m.get(FIXED_PARAMETER_ORDER);\n-        }\n-        if (m.containsKey(IN_INTERCEPTORS)) {\n-            inInterceptors = m.get(IN_INTERCEPTORS);\n-        }\n-        if (m.containsKey(OUT_INTERCEPTORS)) {\n-            outInterceptors = m.get(OUT_INTERCEPTORS);\n-        }\n-        if (m.containsKey(RESPONSE_CODE)) {\n-            responseCode = m.get(RESPONSE_CODE);\n-        }\n-        if (m.containsKey(ATTACHMENTS)) {\n-            attachments = m.get(ATTACHMENTS);\n-        }\n-        if (m.containsKey(ENCODING)) {\n-            encoding = m.get(ENCODING);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT)) {\n-            httpContext = m.get(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONFIG)) {\n-            httpConfig = m.get(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY)) {\n-            httpContextMatchStrategy = m.get(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (m.containsKey(HTTP_BASE_PATH)) {\n-            httpBasePath = m.get(HTTP_BASE_PATH);\n-        } \n-        if (m.containsKey(ASYNC_POST_RESPONSE_DISPATCH)) {\n-            asyncPostDispatch = m.get(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (m.containsKey(SECURITY_CONTEXT)) {\n-            securityContext = m.get(SECURITY_CONTEXT);\n-        }\n-        if (m.containsKey(AUTHORIZATION_POLICY)) {\n-            authorizationPolicy = m.get(AUTHORIZATION_POLICY);\n-        }\n-        if (m.containsKey(CERT_CONSTRAINTS)) {\n-            certConstraints = m.get(CERT_CONSTRAINTS);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.SERVICE_REDIRECTION)) {\n-            serviceRedirection = m.get(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (m.containsKey(HTTP_SERVLET_RESPONSE)) {\n-            httpServletResponse = m.get(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (m.containsKey(RESOURCE_METHOD)) {\n-            resourceMethod = m.get(RESOURCE_METHOD);\n-        }\n-        if (m.containsKey(ONE_WAY_REQUEST)) {\n-            oneWayRequest = m.get(ONE_WAY_REQUEST);\n-        }\n-        if (m.containsKey(ASYNC_RESPONSE)) {\n-            asyncResponse = m.get(ASYNC_RESPONSE);\n-        }\n-        if (m.containsKey(THREAD_CONTEXT_SWITCHED)) {\n-            threadContextSwitched = m.get(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (m.containsKey(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY)) {\n-            cacheInputProperty = m.get(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (m.containsKey(PhaseInterceptorChain.PREVIOUS_MESSAGE)) {\n-            previousMessage = m.get(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED)) {\n-            responseHeadersCopied = m.get(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (m.containsKey(SSE_EVENT_SINK)) {\n-            sseEventSink = m.get(SSE_EVENT_SINK);\n-        }\n-        if (m.containsKey(REQUESTOR_ROLE)) {\n-            requestorRole = m.get(REQUESTOR_ROLE);\n-        }\n-        if (m.containsKey(PARTIAL_RESPONSE_MESSAGE)) {\n-            partialResponse = m.get(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(EMPTY_PARTIAL_RESPONSE_MESSAGE)) {\n-            emptyPartialResponse = m.get(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(ENDPOINT_ADDRESS)) {\n-            endpointAddress = m.get(ENDPOINT_ADDRESS);\n-        }\n-        if (m.containsKey(INBOUND_MESSAGE)) {\n-            inboundMessage = m.get(INBOUND_MESSAGE);\n-        }\n-        super.putAll(m);\n     }\n     @Override\n     public Collection<Object> values() {\n-        Collection<Object> values = super.values();\n-        if (protoHeaders != NOT_FOUND) {\n-            values.add(protoHeaders);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            values.add(contentType);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            values.add(queryString);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            values.add(httpRequest);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            values.add(httpResponse);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            values.add(pathToMatchSlash);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            values.add(httpRequestMethod);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            values.add(interceptorProviders);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            values.add(templateParameters);\n-        }\n-        if (accept != NOT_FOUND) {\n-            values.add(accept);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            values.add(continuationProvider);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            values.add(opStack);\n-        }\n-        if (destination != NOT_FOUND) {\n-            values.add(destination);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            values.add(wsdlDescription);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            values.add(wsdlInterface);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            values.add(wsdlOperation);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            values.add(wsdlPort);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            values.add(wsdlService);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            values.add(requestUrl);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            values.add(requestUri);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            values.add(pathInfo);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            values.add(basePath);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            values.add(fixedParamOrder);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            values.add(inInterceptors);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            values.add(outInterceptors);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            values.add(responseCode);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            values.add(attachments);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            values.add(encoding);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            values.add(httpContext);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            values.add(httpConfig);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            values.add(httpContextMatchStrategy);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            values.add(httpBasePath);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            values.add(asyncPostDispatch);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            values.add(securityContext);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            values.add(authorizationPolicy);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            values.add(certConstraints);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            values.add(serviceRedirection);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            values.add(httpServletResponse);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            values.add(resourceMethod);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            values.add(oneWayRequest);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            values.add(asyncResponse);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            values.add(threadContextSwitched);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            values.add(cacheInputProperty);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            values.add(previousMessage);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            values.add(responseHeadersCopied);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            values.add(sseEventSink);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            values.add(requestorRole);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            values.add(partialResponse);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            values.add(emptyPartialResponse);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            values.add(endpointAddress);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            values.add(inboundMessage);\n+        Collection<Object> myValues = new ArrayList<Object>(super.values());\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                myValues.add(o);\n+            }\n         }\n-        return values;\n+        return myValues;\n     }\n \n     public Object getAuthorizationPolicy() {\n-        return authorizationPolicy == NOT_FOUND ? null : authorizationPolicy;\n+        return getFromPropertyArray(authorizationPolicy);\n     }\n \n-    public void setAuthorizationPolicy(Object authorizationPolicy) {\n-        this.authorizationPolicy = authorizationPolicy;\n+    public void setAuthorizationPolicy(Object a) {\n+        propertyValues[authorizationPolicy] = a;\n     }\n \n     public Object getCertConstraints() {\n-        return certConstraints == NOT_FOUND ? null : certConstraints;\n+        return getFromPropertyArray(certConstraints);\n     }\n \n-    public void setCertConstraints(Object certConstraints) {\n-        this.certConstraints = certConstraints;\n+    public void setCertConstraints(Object c) {\n+        propertyValues[certConstraints] = c;\n     }\n \n     public Object getServiceRedirection() {\n-        return serviceRedirection == NOT_FOUND ? null : serviceRedirection;\n+        return getFromPropertyArray(serviceRedirection);\n     }\n \n-    public void setServiceRedirection(Object serviceRedirection) {\n-        this.serviceRedirection = serviceRedirection;\n+    public void setServiceRedirection(Object s) {\n+        propertyValues[serviceRedirection] = s;\n     }\n \n     public Object getHttpServletResponse() {\n-        return httpServletResponse == NOT_FOUND ? null : httpServletResponse;\n+        return getFromPropertyArray(httpServletResponse);\n     }\n \n-    public void setHttpServletResponse(Object httpServletResponse) {\n-        this.httpServletResponse = httpServletResponse;\n+    public void setHttpServletResponse(Object h) {\n+        propertyValues[httpServletResponse] = h;\n     }\n \n     public Object getResourceMethod() {\n-        return resourceMethod == NOT_FOUND ? null : resourceMethod;\n+        return getFromPropertyArray(resourceMethod);\n     }\n \n-    public void setResourceMethod(Object resourceMethod) {\n-        this.resourceMethod = resourceMethod;\n+    public void setResourceMethod(Object r) {\n+        propertyValues[resourceMethod] = r;\n     }\n \n     public Object getOneWayRequest() {\n-        return oneWayRequest == NOT_FOUND ? null : oneWayRequest;\n+        return getFromPropertyArray(oneWayRequest);\n     }\n \n-    public void setOneWayRequest(Object oneWayRequest) {\n-        this.oneWayRequest = oneWayRequest;\n+    public void setOneWayRequest(Object o) {\n+        propertyValues[oneWayRequest] = o;\n     }\n \n     public Object getAsyncResponse() {\n-        return asyncResponse == NOT_FOUND ? null : asyncResponse;\n+        return getFromPropertyArray(asyncResponse);\n     }\n \n-    public void setAsyncResponse(Object asyncResponse) {\n-        this.asyncResponse = asyncResponse;\n+    public void setAsyncResponse(Object a) {\n+        propertyValues[asyncResponse] = a;\n     }\n \n     public Object getThreadContextSwitched() {\n-        return threadContextSwitched == NOT_FOUND ? null : threadContextSwitched;\n+        return getFromPropertyArray(threadContextSwitched);\n     }\n \n-    public void setThreadContextSwitched(Object threadContextSwitched) {\n-        this.threadContextSwitched = threadContextSwitched;\n+    public void setThreadContextSwitched(Object t) {\n+        propertyValues[threadContextSwitched] = t;\n     }\n \n     public Object getPreviousMessage() {\n-        return previousMessage == NOT_FOUND ? null : previousMessage;\n+        return getFromPropertyArray(previousMessage);\n     }\n \n     public boolean containsPreviousMessage() {\n-        return previousMessage != NOT_FOUND;\n+        return propertyValues[previousMessage] != NOT_FOUND;\n     }\n \n-    public void setPreviousMessage(Object previousMessage) {\n-        this.previousMessage = previousMessage;\n+    public void setPreviousMessage(Object p) {\n+        propertyValues[previousMessage] = p;\n     }\n \n     public Object getCacheInputProperty() {\n-        return cacheInputProperty == NOT_FOUND ? null : cacheInputProperty;\n+        return getFromPropertyArray(cacheInputProperty);\n     }\n \n-    public void setCacheInputProperty(Object cacheInputProperty) {\n-        this.cacheInputProperty = cacheInputProperty;\n+    public void setCacheInputProperty(Object c) {\n+        propertyValues[cacheInputProperty] = c;\n     }\n \n     public Object getSseEventSink() {\n-        return sseEventSink == NOT_FOUND ? null : sseEventSink;\n+        return getFromPropertyArray(sseEventSink);\n     }\n \n-    public void setSseEventSink(Object sseEventSink) {\n-        this.sseEventSink = sseEventSink;\n+    public void setSseEventSink(Object s) {\n+        propertyValues[sseEventSink] = s;\n     }\n \n     public Object getResponseHeadersCopied() {\n-        return responseHeadersCopied == NOT_FOUND ? null : responseHeadersCopied;\n+        return getFromPropertyArray(responseHeadersCopied);\n     }\n \n-    public void setResponseHeadersCopied(Object responseHeadersCopied) {\n-        this.responseHeadersCopied = responseHeadersCopied;\n+    public void setResponseHeadersCopied(Object r) {\n+        propertyValues[responseHeadersCopied] = r;\n     }\n \n     public Object getRequestorRole() {\n-        return requestorRole == NOT_FOUND ? null : requestorRole;\n+        return getFromPropertyArray(requestorRole);\n     }\n \n-    public void setRequestorRole(Object requestorRole) {\n-        this.requestorRole = requestorRole;\n+    public void setRequestorRole(Object r) {\n+        propertyValues[requestorRole] = r;\n     }\n \n     public Object getEmptyPartialResponse() {\n-        return emptyPartialResponse == NOT_FOUND ? null : emptyPartialResponse;\n+        return getFromPropertyArray(emptyPartialResponse);\n     }\n \n-    public void setEmptyPartialResponse(Object emptyPartialResponse) {\n-        this.emptyPartialResponse = emptyPartialResponse;\n+    public void setEmptyPartialResponse(Object e) {\n+        propertyValues[emptyPartialResponse] = e;\n     }\n \n     public Object getPartialResponse() {\n-        return partialResponse == NOT_FOUND ? null : partialResponse;\n+        return getFromPropertyArray(partialResponse);\n     }\n \n-    public void setPartialResponse(Object partialResponse) {\n-        this.partialResponse = partialResponse;\n+    public void setPartialResponse(Object p) {\n+        propertyValues[partialResponse] = p;\n     }\n \n     public Object getEndpointAddress() {\n-        return endpointAddress == NOT_FOUND ? null : endpointAddress;\n+        return getFromPropertyArray(endpointAddress);\n     }\n \n-    public void setEndpointAddress(Object endpointAddress) {\n-        this.endpointAddress = endpointAddress;\n+    public void setEndpointAddress(Object e) {\n+        propertyValues[endpointAddress] = e;\n     }\n     \n     public Object getInboundMessage() {\n-        return inboundMessage == NOT_FOUND ? null : inboundMessage;\n+        return getFromPropertyArray(inboundMessage);\n     }\n \n-    public void setInboundMessage(Object inboundMessage) {\n-        this.inboundMessage = inboundMessage;\n+    public void setInboundMessage(Object i) {\n+        propertyValues[inboundMessage] = i;\n     }\n     public String getPathToMatchSlash() {\n-        return pathToMatchSlash == NOT_FOUND ? null : (String) pathToMatchSlash;\n+        return (String) getFromPropertyArray(pathToMatchSlash);\n     }\n     \n-    public void setPathToMatchSlash(String pathToMatchSlash) {\n-        this.pathToMatchSlash = pathToMatchSlash;\n+    public void setPathToMatchSlash(String p) {\n+        propertyValues[pathToMatchSlash] = p;\n     }\n     \n     public String getHttpRequestMethod() {\n-        return httpRequestMethod == NOT_FOUND ? null : (String) httpRequestMethod;\n+        return (String) getFromPropertyArray(httpRequestMethod);\n     }\n     \n-    public void setHttpRequestMethod(String httpRequestMethod) {\n-        this.httpRequestMethod = httpRequestMethod;\n+    public void setHttpRequestMethod(String h) {\n+        propertyValues[httpRequestMethod] = h;\n     }\n \n     public void removePathToMatchSlash() {\n-        pathToMatchSlash = NOT_FOUND;\n+        propertyValues[pathToMatchSlash] = NOT_FOUND;\n     }\n     public String getQueryString() {\n-        return queryString == NOT_FOUND ? null : (String) queryString;\n+        return (String) getFromPropertyArray(queryString);\n     }\n     \n-    public void setQueryString(String queryString) {\n-        this.queryString = queryString;\n+    public void setQueryString(String q) {\n+        propertyValues[queryString] = q;\n     }\n     public Object getOperationResourceInfoStack() {\n-        return opStack == NOT_FOUND ? null: opStack;\n+        return getFromPropertyArray(opStack);\n     }\n     \n-    public void setOperationResourceInfoStack(Object opStack) {\n-        this.opStack = opStack;\n+    public void setOperationResourceInfoStack(Object o) {\n+        propertyValues[opStack] = o;\n     }\n \n     public String getContentType() {\n-        return contentType == NOT_FOUND ? null : (String) contentType;\n+        return (String) getFromPropertyArray(contentType);\n     }\n     \n     public boolean containsContentType() {\n-        return contentType != NOT_FOUND;\n+        return propertyValues[contentType] != NOT_FOUND;\n     }\n     \n-    public void setContentType(String contentType) {\n-        this.contentType = contentType;\n+    public void setContentType(String c) {\n+        propertyValues[contentType] = c;\n     }\n \n     public Object getHttpRequest() {\n-        return httpRequest == NOT_FOUND ? null : httpRequest;\n+        return getFromPropertyArray(httpRequest);\n     }\n     \n     public boolean containsHttpRequest() {\n-        return httpRequest != NOT_FOUND;\n+        return propertyValues[httpRequest] != NOT_FOUND;\n     }\n     \n-    public void setHttpRequest(Object httpRequest) {\n-        this.httpRequest = httpRequest;\n+    public void setHttpRequest(Object h) {\n+        propertyValues[httpRequest] = h;\n     }\n     \n     public Object getHttpResponse() {\n-        return httpResponse == NOT_FOUND ? null : httpResponse;\n+        return getFromPropertyArray(httpResponse);\n     }\n     \n-    public void setHttpResponse(Object httpResponse) {\n-        this.httpResponse = httpResponse;\n+    public void setHttpResponse(Object h) {\n+        propertyValues[httpResponse] = h;\n     }\n \n     public Object getAccept() {\n-        return accept == NOT_FOUND ? null : accept;\n+        return getFromPropertyArray(accept);\n     }\n     \n-    public void setAccept(Object accept) {\n-        this.accept = accept;\n+    public void setAccept(Object a) {\n+        propertyValues[accept] = a;\n     }\n \n     public Object getContinuationProvider() {\n-        return continuationProvider == NOT_FOUND ? null : continuationProvider;\n+        return getFromPropertyArray(continuationProvider);\n     }\n     \n-    public void setContinuationProvider(Object continuationProvider) {\n-        this.continuationProvider = continuationProvider;\n+    public void setContinuationProvider(Object c) {\n+        propertyValues[continuationProvider] = c;\n     }\n \n     public Object getWsdlDescription() {\n-        return wsdlDescription == NOT_FOUND ? null : wsdlDescription;\n+        return getFromPropertyArray(wsdlDescription);\n     }\n     \n-    public void setWsdlDescription(Object wsdlDescription) {\n-        this.wsdlDescription = wsdlDescription;\n+    public void setWsdlDescription(Object w) {\n+        propertyValues[wsdlDescription] = w;\n     }\n \n     public Object getWsdlInterface() {\n-        return wsdlInterface == NOT_FOUND ? null : wsdlInterface;\n+        return getFromPropertyArray(wsdlInterface);\n     }\n     \n-    public void setWsdlInterface(Object wsdlInterface) {\n-        this.wsdlInterface = wsdlInterface;\n+    public void setWsdlInterface(Object w) {\n+        propertyValues[wsdlInterface] = w;\n     }\n \n     public Object getWsdlOperation() {\n-        return wsdlOperation == NOT_FOUND ? null : wsdlOperation;\n+        return getFromPropertyArray(wsdlOperation);\n     }\n     \n-    public void setWsdlOperation(Object wsdlOperation) {\n-        this.wsdlOperation = wsdlOperation;\n+    public void setWsdlOperation(Object w) {\n+        propertyValues[wsdlOperation] = w;\n     }\n \n     public Object getWsdlPort() {\n-        return wsdlPort == NOT_FOUND ? null : wsdlPort;\n+        return getFromPropertyArray(wsdlPort);\n     }\n     \n-    public void setWsdlPort(Object wsdlPort) {\n-        this.wsdlPort = wsdlPort;\n+    public void setWsdlPort(Object w) {\n+        propertyValues[wsdlPort] = w;\n     }\n \n     public Object getWsdlService() {\n-        return wsdlService == NOT_FOUND ? null : wsdlService;\n+        return getFromPropertyArray(wsdlService);\n     }\n     \n-    public void setWsdlService(Object wsdlService) {\n-        this.wsdlService = wsdlService;\n+    public void setWsdlService(Object w) {\n+        propertyValues[wsdlService] = w;\n     }\n \n     public Object getRequestUrl() {\n-        return requestUrl == NOT_FOUND ? null : requestUrl;\n+        return getFromPropertyArray(requestUrl);\n     }\n     \n-    public void setRequestUrl(Object requestUrl) {\n-        this.requestUrl = requestUrl;\n+    public void setRequestUrl(Object r) {\n+        propertyValues[requestUrl] = r;\n     }\n \n     public Object getRequestUri() {\n-        return requestUri == NOT_FOUND ? null : requestUri;\n+        return getFromPropertyArray(requestUri);\n     }\n     \n-    public void setRequestUri(Object requestUri) {\n-        this.requestUri = requestUri;\n+    public void setRequestUri(Object r) {\n+        propertyValues[requestUri] = r;\n     }\n     \n     public Object getPathInfo() {\n-        return pathInfo == NOT_FOUND ? null : pathInfo;\n+        return getFromPropertyArray(pathInfo);\n     }\n     \n-    public void setPathInfo(Object pathInfo) {\n-        this.pathInfo = pathInfo;\n+    public void setPathInfo(Object p) {\n+       propertyValues[pathInfo] = p;\n     }\n     \n     public Object getBasePath() {\n-        return basePath == NOT_FOUND ? null : basePath;\n+        return getFromPropertyArray(basePath);\n     }\n     \n     public boolean containsBasePath() {\n-        return basePath != NOT_FOUND;\n+        return propertyValues[basePath] != NOT_FOUND;\n     }\n     \n-    public void setBasePath(Object basePath) {\n-        this.basePath = basePath;\n+    public void setBasePath(Object b) {\n+        propertyValues[basePath] = b;\n     }\n \n     public Object getFixedParamOrder() {\n-        return fixedParamOrder == NOT_FOUND ? null : fixedParamOrder;\n+        return getFromPropertyArray(fixedParamOrder);\n     }\n     \n-    public void setFixedParamOrder(Object fixedParamOrder) {\n-        this.fixedParamOrder = fixedParamOrder;\n+    public void setFixedParamOrder(Object f) {\n+        propertyValues[fixedParamOrder] = f;\n     }\n \n     public Object getInInterceptors() {\n-        return inInterceptors == NOT_FOUND ? null : inInterceptors;\n+        return getFromPropertyArray(inInterceptors);\n     }\n     \n-    public void setInInterceptors(Object inInterceptors) {\n-        this.inInterceptors = inInterceptors;\n+    public void setInInterceptors(Object i) {\n+        propertyValues[inInterceptors] = i;\n     }\n \n     public Object getOutInterceptors() {\n-        return outInterceptors == NOT_FOUND ? null : outInterceptors;\n+        return getFromPropertyArray(outInterceptors);\n     }\n     \n-    public void setOutInterceptors(Object outInterceptors) {\n-        this.outInterceptors = outInterceptors;\n+    public void setOutInterceptors(Object o) {\n+        propertyValues[outInterceptors] = o;\n     }\n \n     public Object getResponseCode() {\n-        return responseCode == NOT_FOUND ? null : responseCode;\n+        return getFromPropertyArray(responseCode);\n     }\n     \n-    public void setResponseCode(Object responseCode) {\n-        this.responseCode = responseCode;\n+    public void setResponseCode(Object r) {\n+        propertyValues[responseCode] = r;\n     }\n \n     public Object getEncoding() {\n-        return encoding == NOT_FOUND ? null : encoding;\n+        return getFromPropertyArray(encoding);\n     }\n     \n-    public void setEncoding(Object encoding) {\n-        this.encoding = encoding;\n+    public void setEncoding(Object e) {\n+        propertyValues[encoding] = e;\n     }\n \n     public Object getHttpContext() {\n-        return httpContext == NOT_FOUND ? null : httpContext;\n+        return getFromPropertyArray(httpContext);\n     }\n     \n-    public void setHttpContext(Object httpContext) {\n-        this.httpContext = httpContext;\n+    public void setHttpContext(Object h) {\n+        propertyValues[httpContext] = h;\n     }\n \n     public Object getHttpConfig() {\n-        return httpConfig == NOT_FOUND ? null : httpConfig;\n+        return getFromPropertyArray(httpConfig);\n     }\n     \n-    public void setHttpConfig(Object httpConfig) {\n-        this.httpConfig = httpConfig;\n+    public void setHttpConfig(Object h) {\n+        propertyValues[httpConfig] = h;\n     }\n \n     public Object getHttpContextMatchStrategy() {\n-        return httpContextMatchStrategy == NOT_FOUND ? null : httpContextMatchStrategy;\n+        return getFromPropertyArray(httpContextMatchStrategy);\n     }\n     \n-    public void setHttpContextMatchStrategy(Object httpContextMatchStrategy) {\n-        this.httpContextMatchStrategy = httpContextMatchStrategy;\n+    public void setHttpContextMatchStrategy(Object h) {\n+        propertyValues[httpContextMatchStrategy] = h;\n     }\n \n     public Object getHttpBasePath() {\n-        return httpBasePath == NOT_FOUND ? null : httpBasePath;\n+        return getFromPropertyArray(httpBasePath);\n     }\n     \n-    public void setHttpBasePath(Object httpBasePath) {\n-        this.httpBasePath = httpBasePath;\n+    public void setHttpBasePath(Object h) {\n+        propertyValues[httpBasePath] = h;\n     }\n \n     public Object getAsyncPostDispatch() {\n-        return asyncPostDispatch == NOT_FOUND ? null : asyncPostDispatch;\n+        return getFromPropertyArray(asyncPostDispatch);\n     }\n     \n-    public void setAsyncPostDispatch(Object asyncPostDispatch) {\n-        this.asyncPostDispatch = asyncPostDispatch;\n+    public void setAsyncPostDispatch(Object a) {\n+        propertyValues[asyncPostDispatch] = a;\n     }\n     \n     public Object getSecurityContext() {\n-        return securityContext == NOT_FOUND ? null : securityContext;\n+        return getFromPropertyArray(securityContext);\n     }\n     \n-    public void setSecurityContext(Object securityContext) {\n-        this.securityContext = securityContext;\n+    public void setSecurityContext(Object s) {\n+        propertyValues[securityContext] = s;\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n     public Collection getInterceptorProviders() {\n-        return interceptorProviders == NOT_FOUND ? null : (Collection) interceptorProviders;\n+        return (Collection) getFromPropertyArray(interceptorProviders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setInterceptorProviders(Collection interceptorProviders) {\n-        this.interceptorProviders = interceptorProviders;\n+    public void setInterceptorProviders(Collection i) {\n+        propertyValues[interceptorProviders] = i;\n     }\n \n     public Object getTemplateParameters() {\n-        return templateParameters == NOT_FOUND ? null :  templateParameters;\n+        return getFromPropertyArray(templateParameters);\n     }\n     \n-    public void setTemplateParameters(Object templateParameters) {\n-        this.templateParameters = templateParameters;\n+    public void setTemplateParameters(Object t) {\n+        propertyValues[templateParameters] = t;\n     }\n \n     public void removeContentType() {\n-        contentType = NOT_FOUND;\n+        propertyValues[contentType] = NOT_FOUND;\n     }\n     public void removeHttpResponse() {\n-        httpResponse = NOT_FOUND;\n+        propertyValues[httpResponse] = NOT_FOUND;\n     }\n     public void removeHttpRequest() {\n-        httpRequest = NOT_FOUND;\n+        propertyValues[httpRequest] = NOT_FOUND;\n+    }\n+    \n+    private Object getFromPropertyArray(int index) {\n+        Object value = propertyValues[index];\n+        return value == NOT_FOUND ? null : value;\n+    }\n+    \n+    @Override\n+    public int size() {\n+        int size = super.size();\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                size++;\n+            }\n+        }\n+        return size;\n+    }\n+    \n+    @Override\n+    public void clear() {\n+        super.clear();\n+        for (int i = 0; i < TOTAL; i++) {\n+            propertyValues[i] = NOT_FOUND;\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isEmpty() {\n+        if (!super.isEmpty()) {\n+            return false;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean containsValue(Object value) {\n+        if (super.containsValue(value)) {\n+            return true;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o.equals(value)) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n+    \n+    @Override\n+    public Object getOrDefault(Object key, Object d) {\n+        return getOrDefault((String) key, d);\n+    }\n+    \n+    public Object getOrDefault(String key, Object d) {\n+        Object v = super.getOrDefault(key, NOT_FOUND);\n+        if (v != NOT_FOUND) {\n+            return v;\n+        }\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyNames[i] == key) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    return propertyValues[i];\n+                } else {\n+                    return d;\n+                }\n+            }\n+        }\n+        return d;\n+    }\n+    \n+    @Override\n+    public void forEach(BiConsumer<? super String, ? super Object> action) {\n+        super.forEach(action);\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                action.accept(propertyNames[i], propertyValues[i]);\n+            }\n+        }\n+    }\n+    @Override\n+    public void replaceAll(BiFunction<? super String, ? super Object, ? extends Object> function) {\n+        super.replaceAll(function);\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                propertyValues[i] = function.apply(propertyNames[i], propertyValues[i]);\n+            }\n+        }\n+    }\n+    @Override\n+    public Object replace(String key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                Object ret = propertyValues[index];\n+                propertyValues[index] = value;\n+                return ret;\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        return super.replace(key, value);\n+    }\n+    @Override\n+    public boolean replace(String key, Object oldValue, Object newValue) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == oldValue) {", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0OTkwOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405849908", "bodyText": "Added a new comment for the new changes.  Marking this one resolved.", "author": "jhanders34", "createdAt": "2020-04-08T22:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NjI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -544,17 +498,6 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NjczMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405166733", "bodyText": "Again need to use .equals and need to handle null.", "author": "jhanders34", "createdAt": "2020-04-07T23:12:00Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -844,1507 +561,649 @@ public Object get(Object key) {\n     }\n \n     public Object get(String key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return getProtocolHeaders();\n-            } else if (key == CONTENT_TYPE) {\n-                return getContentType();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return getHttpRequestMethod();\n-            } else if (key == QUERY_STRING) {\n-                return getQueryString();\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return getHttpRequest();\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return getHttpResponse();\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return getPathToMatchSlash();\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return getInterceptorProviders();\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return getTemplateParameters();\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return getAccept();\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return getContinuationProvider();\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return getOperationResourceInfoStack();\n-            } else if (key == DESTINATION) {\n-                return getDestination();\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return getWsdlDescription();\n-            } else if (key == WSDL_INTERFACE) {\n-                return getWsdlInterface();\n-            } else if (key == WSDL_OPERATION) {\n-                return getWsdlOperation();\n-            } else if (key == WSDL_PORT) {\n-                return getWsdlPort();\n-            } else if (key == WSDL_SERVICE) {\n-                return getWsdlService();\n-            } else if (key == REQUEST_URL) {\n-                return getRequestUrl();\n-            } else if (key == REQUEST_URI) {\n-                return getRequestUri();\n-            } else if (key == PATH_INFO) {\n-                return getPathInfo();\n-            } else if (key == BASE_PATH) {\n-                return getBasePath();\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return getFixedParamOrder();\n-            } else if (key == IN_INTERCEPTORS) {\n-                return getInInterceptors();\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return getOutInterceptors();\n-            } else if (key == RESPONSE_CODE) {\n-                return getResponseCode();\n-            } else if (key == ATTACHMENTS) {\n-                return getAttachments();\n-            } else if (key == ENCODING) {\n-                return getEncoding();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return getHttpContext();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return getHttpConfig();\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return getHttpContextMatchStrategy();\n-            } else if (key == HTTP_BASE_PATH) {\n-                return getHttpBasePath();\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return getAsyncPostDispatch();\n-            } else if (key == SECURITY_CONTEXT) {\n-                return getSecurityContext();\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return getAuthorizationPolicy();\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return getCertConstraints();\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return getServiceRedirection();\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return getHttpServletResponse();\n-            } else if (key == RESOURCE_METHOD) {\n-                return getResourceMethod();\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return getOneWayRequest();\n-            } else if (key == ASYNC_RESPONSE) {\n-                return getAsyncResponse();\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return getThreadContextSwitched();\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return getCacheInputProperty();\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return getPreviousMessage();\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return getResponseHeadersCopied();\n-            } else if (key == SSE_EVENT_SINK) {\n-                return getSseEventSink();\n-            } else if (key == REQUESTOR_ROLE) {\n-                return getRequestorRole();\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return getPartialResponse();\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return getEmptyPartialResponse();\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return getEndpointAddress();\n-            } else if (key == INBOUND_MESSAGE) {\n-                return getInboundMessage();\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n         }\n         \n         return super.get(key);\n     }\n \n     @Override\n-    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public Object put(String key, Object value) {\n-        if (KEYS.contains(key)) {\n-            Object ret = null;\n-            if (key == PROTOCOL_HEADERS) {\n-                ret = getProtocolHeaders();\n-                setProtocolHeaders((Map) value);\n-            } else if (key == CONTENT_TYPE) {\n-                ret = getContentType();\n-                setContentType((String) value);\n-            } else if (key == QUERY_STRING) {\n-                ret = getQueryString();\n-                setQueryString((String) value);\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                ret = getHttpRequest();\n-                setHttpRequest(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                ret = getHttpResponse();\n-                setHttpResponse(value);\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                ret = getPathToMatchSlash();\n-                setPathToMatchSlash((String) value);\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                ret = getHttpRequestMethod();\n-                setHttpRequestMethod((String) value);\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                ret = getInterceptorProviders();\n-                setInterceptorProviders((Collection) value);\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                ret = getTemplateParameters();\n-                setTemplateParameters(value);\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                ret = getAccept();\n-                setAccept(value);\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                ret = getContinuationProvider();\n-                setContinuationProvider(value);\n-            } else if (key == OP_RES_INFO_STACK) {\n-                ret = getOperationResourceInfoStack();\n-                setOperationResourceInfoStack(value);\n-            } else if (key == DESTINATION) {\n-                ret = getDestination();\n-                setDestination((Destination) value);\n-            } else if (key == WSDL_DESCRIPTION) {\n-                ret = getWsdlDescription();\n-                setWsdlDescription(value);\n-            } else if (key == WSDL_INTERFACE) {\n-                ret = getWsdlInterface();\n-                setWsdlInterface(value);\n-            } else if (key == WSDL_OPERATION) {\n-                ret = getWsdlOperation();\n-                setWsdlOperation(value);\n-            } else if (key == WSDL_PORT) {\n-                ret = getWsdlPort();\n-                setWsdlPort(value);\n-            } else if (key == WSDL_SERVICE) {\n-                ret = getWsdlService();\n-                setWsdlService(value);\n-            } else if (key == REQUEST_URL) {\n-                ret = getRequestUrl();\n-                setRequestUrl(value);\n-            } else if (key == REQUEST_URI) {\n-                ret = getRequestUri();\n-                setRequestUri(value);\n-            } else if (key == PATH_INFO) {\n-                ret = getPathInfo();\n-                setPathInfo(value);\n-            } else if (key == BASE_PATH) {\n-                ret = getBasePath();\n-                setBasePath(value);\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                ret = getFixedParamOrder();\n-                setFixedParamOrder(value);\n-            } else if (key == IN_INTERCEPTORS) {\n-                ret = getInInterceptors();\n-                setInInterceptors(value);\n-            } else if (key == OUT_INTERCEPTORS) {\n-                ret = getOutInterceptors();\n-                setOutInterceptors(value);\n-            } else if (key == RESPONSE_CODE) {\n-                ret = getResponseCode();\n-                setResponseCode(value);\n-            } else if (key == ATTACHMENTS) {\n-                ret = getAttachments();\n-                setAttachments((Collection<Attachment>) value);\n-            } else if (key == ENCODING) {\n-                ret = getEncoding();\n-                setEncoding(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                ret = getHttpContext();\n-                setHttpContext(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                ret = getHttpConfig();\n-                setHttpConfig(value);\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                ret = getHttpContextMatchStrategy();\n-                setHttpContextMatchStrategy(value);\n-            } else if (key == HTTP_BASE_PATH) {\n-                ret = getHttpBasePath();\n-                setHttpBasePath(value);\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                ret = getAsyncPostDispatch();\n-                setAsyncPostDispatch(value);\n-            } else if (key == SECURITY_CONTEXT) {\n-                ret = getSecurityContext();\n-                setSecurityContext(value);\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                ret = getAuthorizationPolicy();\n-                setAuthorizationPolicy(value);\n-            } else if (key == CERT_CONSTRAINTS) {\n-                ret = getCertConstraints();\n-                setCertConstraints(value);\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                ret = getServiceRedirection();\n-                setServiceRedirection(value);\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                ret = getHttpServletResponse();\n-                setHttpServletResponse(value);\n-            } else if (key == RESOURCE_METHOD) {\n-                ret = getResourceMethod();\n-                setResourceMethod(value);\n-            } else if (key == ONE_WAY_REQUEST) {\n-                ret = getOneWayRequest();\n-                setOneWayRequest(value);\n-            } else if (key == ASYNC_RESPONSE) {\n-                ret = getAsyncResponse();\n-                setAsyncResponse(value);\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                ret = getThreadContextSwitched();\n-                setThreadContextSwitched(value);\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                ret = getCacheInputProperty();\n-                setCacheInputProperty(value);\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                ret = getPreviousMessage();\n-                setPreviousMessage(value);\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                ret = getResponseHeadersCopied();\n-                setResponseHeadersCopied(value);\n-            } else if (key == SSE_EVENT_SINK) {\n-                ret = getSseEventSink();\n-                setSseEventSink(value);\n-            } else if (key == REQUESTOR_ROLE) {\n-                ret = getRequestorRole();\n-                setRequestorRole(value);\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getPartialResponse();\n-                setPartialResponse(value);\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                ret = getEmptyPartialResponse();\n-                setEmptyPartialResponse(value);\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                ret = getEndpointAddress();\n-                setEndpointAddress(value);\n-            } else if (key == INBOUND_MESSAGE) {\n-                ret = getInboundMessage();\n-                setInboundMessage(value);\n-            }\n-            return ret == NOT_FOUND ? null : ret;\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n         }\n \n         return super.put(key, value);\n     }\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> keys = super.keySet();\n-        if (protoHeaders != NOT_FOUND) {\n-            keys.add(PROTOCOL_HEADERS);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            keys.add(CONTENT_TYPE);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            keys.add(QUERY_STRING);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            keys.add(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            keys.add(HTTP_REQUEST_METHOD);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            keys.add(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            keys.add(TEMPLATE_PARAMETERS);\n-        }\n-        if (accept != NOT_FOUND) {\n-            keys.add(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            keys.add(CONTINUATION_PROVIDER);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            keys.add(OP_RES_INFO_STACK);\n-        }\n-        if (destination != NOT_FOUND) {\n-            keys.add(DESTINATION);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            keys.add(WSDL_DESCRIPTION);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            keys.add(WSDL_INTERFACE);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            keys.add(WSDL_OPERATION);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            keys.add(WSDL_PORT);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            keys.add(WSDL_SERVICE);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            keys.add(REQUEST_URL);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            keys.add(REQUEST_URI);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            keys.add(PATH_INFO);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            keys.add(BASE_PATH);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            keys.add(FIXED_PARAMETER_ORDER);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            keys.add(IN_INTERCEPTORS);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            keys.add(OUT_INTERCEPTORS);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            keys.add(RESPONSE_CODE);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            keys.add(ATTACHMENTS);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            keys.add(ENCODING);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            keys.add(HTTP_BASE_PATH);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            keys.add(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            keys.add(SECURITY_CONTEXT);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            keys.add(AUTHORIZATION_POLICY);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            keys.add(CERT_CONSTRAINTS);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            keys.add(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            keys.add(RESOURCE_METHOD);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            keys.add(ONE_WAY_REQUEST);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            keys.add(ASYNC_RESPONSE);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            keys.add(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            keys.add(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            keys.add(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            keys.add(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            keys.add(SSE_EVENT_SINK);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            keys.add(REQUESTOR_ROLE);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            keys.add(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            keys.add(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            keys.add(ENDPOINT_ADDRESS);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            keys.add(INBOUND_MESSAGE);\n+        Set<String> myKeys = new HashSet<String>(super.keySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myKeys.add(propertyNames[i]);\n+            }\n         }\n \n-        return keys;\n+        return myKeys;\n     }\n     \n     @Override\n     public Set<Map.Entry<String,Object>> entrySet() {\n-        Set<Map.Entry<String,Object>> entrySet = super.entrySet();\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>();\n-        myEntrySet.addAll(entrySet);\n-        Map.Entry<String,Object> entry;\n-        if (protoHeaders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PROTOCOL_HEADERS, protoHeaders);\n-            myEntrySet.add(entry);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTENT_TYPE, contentType);\n-            myEntrySet.add(entry);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(QUERY_STRING, queryString);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_REQUEST, httpRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_RESPONSE, httpResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_PATH_TO_MATCH_SLASH, pathToMatchSlash);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_REQUEST_METHOD, httpRequestMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INTERCEPTOR_PROVIDERS, interceptorProviders);\n-            myEntrySet.add(entry);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(TEMPLATE_PARAMETERS, templateParameters);\n-            myEntrySet.add(entry);\n-        }\n-        if (accept != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ACCEPT_CONTENT_TYPE, accept);\n-            myEntrySet.add(entry);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CONTINUATION_PROVIDER, continuationProvider);\n-            myEntrySet.add(entry);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OP_RES_INFO_STACK, opStack);\n-            myEntrySet.add(entry);\n-        }\n-        if (destination != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(DESTINATION, destination);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_DESCRIPTION, wsdlDescription);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_INTERFACE, wsdlInterface);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_OPERATION, wsdlOperation);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_PORT, wsdlPort);\n-            myEntrySet.add(entry);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(WSDL_SERVICE, wsdlService);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URL, requestUrl);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUEST_URI, requestUri);\n-            myEntrySet.add(entry);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PATH_INFO, pathInfo);\n-            myEntrySet.add(entry);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(BASE_PATH, basePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(FIXED_PARAMETER_ORDER, fixedParamOrder);\n-            myEntrySet.add(entry);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(IN_INTERCEPTORS, inInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OUT_INTERCEPTORS, outInterceptors);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESPONSE_CODE, responseCode);\n-            myEntrySet.add(entry);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ATTACHMENTS, attachments);\n-            myEntrySet.add(entry);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENCODING, encoding);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT, httpContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONFIG, httpConfig);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY, httpContextMatchStrategy);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_BASE_PATH, httpBasePath);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_POST_RESPONSE_DISPATCH, asyncPostDispatch);\n-            myEntrySet.add(entry);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SECURITY_CONTEXT, securityContext);\n-            myEntrySet.add(entry);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AUTHORIZATION_POLICY, authorizationPolicy);\n-            myEntrySet.add(entry);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(CERT_CONSTRAINTS, certConstraints);\n-            myEntrySet.add(entry);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.SERVICE_REDIRECTION, serviceRedirection);\n-            myEntrySet.add(entry);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(HTTP_SERVLET_RESPONSE, httpServletResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(RESOURCE_METHOD, resourceMethod);\n-            myEntrySet.add(entry);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ONE_WAY_REQUEST, oneWayRequest);\n-            myEntrySet.add(entry);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ASYNC_RESPONSE, asyncResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(THREAD_CONTEXT_SWITCHED, threadContextSwitched);\n-            myEntrySet.add(entry);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, cacheInputProperty);\n-            myEntrySet.add(entry);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PhaseInterceptorChain.PREVIOUS_MESSAGE, previousMessage);\n-            myEntrySet.add(entry);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, responseHeadersCopied);\n-            myEntrySet.add(entry);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(SSE_EVENT_SINK, sseEventSink);\n-            myEntrySet.add(entry);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(REQUESTOR_ROLE, requestorRole);\n-            myEntrySet.add(entry);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(PARTIAL_RESPONSE_MESSAGE, partialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(EMPTY_PARTIAL_RESPONSE_MESSAGE, emptyPartialResponse);\n-            myEntrySet.add(entry);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(ENDPOINT_ADDRESS, endpointAddress);\n-            myEntrySet.add(entry);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            entry = new AbstractMap.SimpleEntry<String,Object>(INBOUND_MESSAGE, inboundMessage);\n-            myEntrySet.add(entry);\n+        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+            }\n         }\n         return myEntrySet;\n     }\n     \n     @Override\n     public boolean containsKey(Object key) {\n-        if (KEYS.contains(key)) {\n-            if (key == PROTOCOL_HEADERS) {\n-                return protoHeaders != NOT_FOUND;\n-            } else if (key == CONTENT_TYPE) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return contentType != NOT_FOUND;\n-            } else if (key == QUERY_STRING) {\n-                return queryString != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_REQUEST) {\n-                return httpRequest != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_RESPONSE) {\n-                return httpResponse != NOT_FOUND;\n-            } else if (key == REQUEST_PATH_TO_MATCH_SLASH) {\n-                return pathToMatchSlash != NOT_FOUND;\n-            } else if (key == HTTP_REQUEST_METHOD) {\n-                return httpRequestMethod != NOT_FOUND;\n-            } else if (key == INTERCEPTOR_PROVIDERS) {\n-                return interceptorProviders != NOT_FOUND;\n-            } else if (key == TEMPLATE_PARAMETERS) {\n-                return templateParameters != NOT_FOUND;\n-            } else if (key == ACCEPT_CONTENT_TYPE) {\n-                return accept != NOT_FOUND;\n-            } else if (key == CONTINUATION_PROVIDER) {\n-                return continuationProvider != NOT_FOUND;\n-            } else if (key == OP_RES_INFO_STACK) {\n-                return opStack != NOT_FOUND;\n-            } else if (key == DESTINATION) {\n-                return destination != NOT_FOUND;\n-            } else if (key == WSDL_DESCRIPTION) {\n-                return wsdlDescription != NOT_FOUND;\n-            } else if (key == WSDL_INTERFACE) {\n-                return wsdlInterface != NOT_FOUND;\n-            } else if (key == WSDL_OPERATION) {\n-                return wsdlOperation != NOT_FOUND;\n-            } else if (key == WSDL_PORT) {\n-                return wsdlPort != NOT_FOUND;\n-            } else if (key == WSDL_SERVICE) {\n-                return wsdlService != NOT_FOUND;\n-            } else if (key == REQUEST_URL) {\n-                return requestUrl != NOT_FOUND;\n-            } else if (key == REQUEST_URI) {\n-                return requestUri != NOT_FOUND;\n-            } else if (key == PATH_INFO) {\n-                return pathInfo != NOT_FOUND;\n-            } else if (key == BASE_PATH) {\n-                return basePath != NOT_FOUND;\n-            } else if (key == FIXED_PARAMETER_ORDER) {\n-                return fixedParamOrder != NOT_FOUND;\n-            } else if (key == IN_INTERCEPTORS) {\n-                return inInterceptors != NOT_FOUND;\n-            } else if (key == OUT_INTERCEPTORS) {\n-                return outInterceptors != NOT_FOUND;\n-            } else if (key == RESPONSE_CODE) {\n-                return responseCode != NOT_FOUND;\n-            } else if (key == ATTACHMENTS) {\n-                return attachments != NOT_FOUND;\n-            } else if (key == ENCODING) {\n-                return encoding != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT) {\n-                return httpContext != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONFIG) {\n-                return httpConfig != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY) {\n-                return httpContextMatchStrategy != NOT_FOUND;\n-            } else if (key == HTTP_BASE_PATH) {\n-                return httpBasePath != NOT_FOUND;\n-            } else if (key == ASYNC_POST_RESPONSE_DISPATCH) {\n-                return asyncPostDispatch != NOT_FOUND;\n-            } else if (key == SECURITY_CONTEXT) {\n-                return securityContext != NOT_FOUND;\n-            } else if (key == AUTHORIZATION_POLICY) {\n-                return authorizationPolicy != NOT_FOUND;\n-            } else if (key == CERT_CONSTRAINTS) {\n-                return certConstraints != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.SERVICE_REDIRECTION) {\n-                return serviceRedirection != NOT_FOUND;\n-            } else if (key == HTTP_SERVLET_RESPONSE) {\n-                return httpServletResponse != NOT_FOUND;\n-            } else if (key == RESOURCE_METHOD) {\n-                return resourceMethod != NOT_FOUND;\n-            } else if (key == ONE_WAY_REQUEST) {\n-                return oneWayRequest != NOT_FOUND;\n-            } else if (key == ASYNC_RESPONSE) {\n-                return asyncResponse != NOT_FOUND;\n-            } else if (key == THREAD_CONTEXT_SWITCHED) {\n-                return threadContextSwitched != NOT_FOUND;\n-            } else if (key == OutgoingChainInterceptor.CACHE_INPUT_PROPERTY) {\n-                return cacheInputProperty != NOT_FOUND;\n-            } else if (key == PhaseInterceptorChain.PREVIOUS_MESSAGE) {\n-                return previousMessage != NOT_FOUND;\n-            } else if (key == AbstractHTTPDestination.RESPONSE_HEADERS_COPIED) {\n-                return responseHeadersCopied != NOT_FOUND;\n-            } else if (key == SSE_EVENT_SINK) {\n-                return sseEventSink != NOT_FOUND;\n-            } else if (key == REQUESTOR_ROLE) {\n-                return requestorRole != NOT_FOUND;\n-            } else if (key == PARTIAL_RESPONSE_MESSAGE) {\n-                return partialResponse != NOT_FOUND;\n-            } else if (key == EMPTY_PARTIAL_RESPONSE_MESSAGE) {\n-                return emptyPartialResponse != NOT_FOUND;\n-            } else if (key == ENDPOINT_ADDRESS) {\n-                return endpointAddress != NOT_FOUND;\n-            } else if (key == INBOUND_MESSAGE) {\n-                return inboundMessage != NOT_FOUND;\n-            }\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return propertyValues[index] != NOT_FOUND;\n         }\n         return super.containsKey(key);\n     }\n     @Override\n     public void putAll(Map<? extends String, ? extends Object> m) {\n-        if (m.containsKey(PROTOCOL_HEADERS)) {\n-            protoHeaders = m.get(PROTOCOL_HEADERS);\n-        }\n-        if (m.containsKey(CONTENT_TYPE)) {\n-            contentType = m.get(CONTENT_TYPE);\n-        }\n-        if (m.containsKey(QUERY_STRING)) {\n-            queryString = m.get(QUERY_STRING);\n+        for (Map.Entry<? extends String, ? extends Object> entry : m.entrySet()) {\n+            put(entry.getKey(), entry.getValue());\n         }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_REQUEST)) {\n-            httpRequest = m.get(AbstractHTTPDestination.HTTP_REQUEST);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_RESPONSE)) {\n-            httpResponse = m.get(AbstractHTTPDestination.HTTP_RESPONSE);\n-        }\n-        if (m.containsKey(REQUEST_PATH_TO_MATCH_SLASH)) {\n-            pathToMatchSlash = m.get(REQUEST_PATH_TO_MATCH_SLASH);\n-        }\n-        if (m.containsKey(HTTP_REQUEST_METHOD)) {\n-            httpRequestMethod = m.get(HTTP_REQUEST_METHOD);\n-        }\n-        if (m.containsKey(INTERCEPTOR_PROVIDERS)) {\n-            interceptorProviders = m.get(INTERCEPTOR_PROVIDERS);\n-        }\n-        if (m.containsKey(TEMPLATE_PARAMETERS)) {\n-            templateParameters = m.get(TEMPLATE_PARAMETERS);\n-        }\n-        if (m.containsKey(ACCEPT_CONTENT_TYPE)) {\n-            accept = m.get(ACCEPT_CONTENT_TYPE);\n-        }\n-        if (m.containsKey(CONTINUATION_PROVIDER)) {\n-            continuationProvider = m.get(CONTINUATION_PROVIDER);\n-        }\n-        if (m.containsKey(OP_RES_INFO_STACK)) {\n-            opStack = m.get(OP_RES_INFO_STACK);\n-        }\n-        if (m.containsKey(DESTINATION)) {\n-            destination = m.get(DESTINATION);\n-        }\n-        if (m.containsKey(WSDL_DESCRIPTION)) {\n-            wsdlDescription = m.get(WSDL_DESCRIPTION);\n-        }\n-        if (m.containsKey(WSDL_INTERFACE)) {\n-            wsdlInterface = m.get(WSDL_INTERFACE);\n-        }\n-        if (m.containsKey(WSDL_OPERATION)) {\n-            wsdlOperation = m.get(WSDL_OPERATION);\n-        }\n-        if (m.containsKey(WSDL_PORT)) {\n-            wsdlPort = m.get(WSDL_PORT);\n-        }\n-        if (m.containsKey(WSDL_SERVICE)) {\n-            wsdlService = m.get(WSDL_SERVICE);\n-        }\n-        if (m.containsKey(REQUEST_URL)) {\n-            requestUrl = m.get(REQUEST_URL);\n-        }\n-        if (m.containsKey(REQUEST_URI)) {\n-            requestUri = m.get(REQUEST_URI);\n-        }\n-        if (m.containsKey(PATH_INFO)) {\n-            pathInfo = m.get(PATH_INFO);\n-        }\n-        if (m.containsKey(BASE_PATH)) {\n-            basePath = m.get(BASE_PATH);\n-        }\n-        if (m.containsKey(FIXED_PARAMETER_ORDER)) {\n-            fixedParamOrder = m.get(FIXED_PARAMETER_ORDER);\n-        }\n-        if (m.containsKey(IN_INTERCEPTORS)) {\n-            inInterceptors = m.get(IN_INTERCEPTORS);\n-        }\n-        if (m.containsKey(OUT_INTERCEPTORS)) {\n-            outInterceptors = m.get(OUT_INTERCEPTORS);\n-        }\n-        if (m.containsKey(RESPONSE_CODE)) {\n-            responseCode = m.get(RESPONSE_CODE);\n-        }\n-        if (m.containsKey(ATTACHMENTS)) {\n-            attachments = m.get(ATTACHMENTS);\n-        }\n-        if (m.containsKey(ENCODING)) {\n-            encoding = m.get(ENCODING);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT)) {\n-            httpContext = m.get(AbstractHTTPDestination.HTTP_CONTEXT);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONFIG)) {\n-            httpConfig = m.get(AbstractHTTPDestination.HTTP_CONFIG);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY)) {\n-            httpContextMatchStrategy = m.get(AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY);\n-        }\n-        if (m.containsKey(HTTP_BASE_PATH)) {\n-            httpBasePath = m.get(HTTP_BASE_PATH);\n-        } \n-        if (m.containsKey(ASYNC_POST_RESPONSE_DISPATCH)) {\n-            asyncPostDispatch = m.get(ASYNC_POST_RESPONSE_DISPATCH);\n-        }\n-        if (m.containsKey(SECURITY_CONTEXT)) {\n-            securityContext = m.get(SECURITY_CONTEXT);\n-        }\n-        if (m.containsKey(AUTHORIZATION_POLICY)) {\n-            authorizationPolicy = m.get(AUTHORIZATION_POLICY);\n-        }\n-        if (m.containsKey(CERT_CONSTRAINTS)) {\n-            certConstraints = m.get(CERT_CONSTRAINTS);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.SERVICE_REDIRECTION)) {\n-            serviceRedirection = m.get(AbstractHTTPDestination.SERVICE_REDIRECTION);\n-        }\n-        if (m.containsKey(HTTP_SERVLET_RESPONSE)) {\n-            httpServletResponse = m.get(HTTP_SERVLET_RESPONSE);\n-        }\n-        if (m.containsKey(RESOURCE_METHOD)) {\n-            resourceMethod = m.get(RESOURCE_METHOD);\n-        }\n-        if (m.containsKey(ONE_WAY_REQUEST)) {\n-            oneWayRequest = m.get(ONE_WAY_REQUEST);\n-        }\n-        if (m.containsKey(ASYNC_RESPONSE)) {\n-            asyncResponse = m.get(ASYNC_RESPONSE);\n-        }\n-        if (m.containsKey(THREAD_CONTEXT_SWITCHED)) {\n-            threadContextSwitched = m.get(THREAD_CONTEXT_SWITCHED);\n-        }\n-        if (m.containsKey(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY)) {\n-            cacheInputProperty = m.get(OutgoingChainInterceptor.CACHE_INPUT_PROPERTY);\n-        }\n-        if (m.containsKey(PhaseInterceptorChain.PREVIOUS_MESSAGE)) {\n-            previousMessage = m.get(PhaseInterceptorChain.PREVIOUS_MESSAGE);\n-        }\n-        if (m.containsKey(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED)) {\n-            responseHeadersCopied = m.get(AbstractHTTPDestination.RESPONSE_HEADERS_COPIED);\n-        }\n-        if (m.containsKey(SSE_EVENT_SINK)) {\n-            sseEventSink = m.get(SSE_EVENT_SINK);\n-        }\n-        if (m.containsKey(REQUESTOR_ROLE)) {\n-            requestorRole = m.get(REQUESTOR_ROLE);\n-        }\n-        if (m.containsKey(PARTIAL_RESPONSE_MESSAGE)) {\n-            partialResponse = m.get(PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(EMPTY_PARTIAL_RESPONSE_MESSAGE)) {\n-            emptyPartialResponse = m.get(EMPTY_PARTIAL_RESPONSE_MESSAGE);\n-        }\n-        if (m.containsKey(ENDPOINT_ADDRESS)) {\n-            endpointAddress = m.get(ENDPOINT_ADDRESS);\n-        }\n-        if (m.containsKey(INBOUND_MESSAGE)) {\n-            inboundMessage = m.get(INBOUND_MESSAGE);\n-        }\n-        super.putAll(m);\n     }\n     @Override\n     public Collection<Object> values() {\n-        Collection<Object> values = super.values();\n-        if (protoHeaders != NOT_FOUND) {\n-            values.add(protoHeaders);\n-        } \n-        if (contentType != NOT_FOUND) {\n-            values.add(contentType);\n-        }\n-        if (queryString != NOT_FOUND) {\n-            values.add(queryString);\n-        }\n-        if (httpRequest != NOT_FOUND) {\n-            values.add(httpRequest);\n-        }\n-        if (httpResponse != NOT_FOUND) {\n-            values.add(httpResponse);\n-        }\n-        if (pathToMatchSlash != NOT_FOUND) {\n-            values.add(pathToMatchSlash);\n-        }\n-        if (httpRequestMethod != NOT_FOUND) {\n-            values.add(httpRequestMethod);\n-        }\n-        if (interceptorProviders != NOT_FOUND) {\n-            values.add(interceptorProviders);\n-        }\n-        if (templateParameters != NOT_FOUND) {\n-            values.add(templateParameters);\n-        }\n-        if (accept != NOT_FOUND) {\n-            values.add(accept);\n-        }\n-        if (continuationProvider != NOT_FOUND) {\n-            values.add(continuationProvider);\n-        }\n-        if (opStack != NOT_FOUND) {\n-            values.add(opStack);\n-        }\n-        if (destination != NOT_FOUND) {\n-            values.add(destination);\n-        }\n-        if (wsdlDescription != NOT_FOUND) {\n-            values.add(wsdlDescription);\n-        }\n-        if (wsdlInterface != NOT_FOUND) {\n-            values.add(wsdlInterface);\n-        }\n-        if (wsdlOperation != NOT_FOUND) {\n-            values.add(wsdlOperation);\n-        }\n-        if (wsdlPort != NOT_FOUND) {\n-            values.add(wsdlPort);\n-        }\n-        if (wsdlService != NOT_FOUND) {\n-            values.add(wsdlService);\n-        }\n-        if (requestUrl != NOT_FOUND) {\n-            values.add(requestUrl);\n-        }\n-        if (requestUri != NOT_FOUND) {\n-            values.add(requestUri);\n-        }\n-        if (pathInfo != NOT_FOUND) {\n-            values.add(pathInfo);\n-        }\n-        if (basePath != NOT_FOUND) {\n-            values.add(basePath);\n-        }\n-        if (fixedParamOrder != NOT_FOUND) {\n-            values.add(fixedParamOrder);\n-        }\n-        if (inInterceptors != NOT_FOUND) {\n-            values.add(inInterceptors);\n-        }\n-        if (outInterceptors != NOT_FOUND) {\n-            values.add(outInterceptors);\n-        }\n-        if (responseCode != NOT_FOUND) {\n-            values.add(responseCode);\n-        }\n-        if (attachments != NOT_FOUND) {\n-            values.add(attachments);\n-        }\n-        if (encoding != NOT_FOUND) {\n-            values.add(encoding);\n-        }\n-        if (httpContext != NOT_FOUND) {\n-            values.add(httpContext);\n-        }\n-        if (httpConfig != NOT_FOUND) {\n-            values.add(httpConfig);\n-        }\n-        if (httpContextMatchStrategy != NOT_FOUND) {\n-            values.add(httpContextMatchStrategy);\n-        }\n-        if (httpBasePath != NOT_FOUND) {\n-            values.add(httpBasePath);\n-        }\n-        if (asyncPostDispatch != NOT_FOUND) {\n-            values.add(asyncPostDispatch);\n-        }\n-        if (securityContext != NOT_FOUND) {\n-            values.add(securityContext);\n-        }\n-        if (authorizationPolicy != NOT_FOUND) {\n-            values.add(authorizationPolicy);\n-        }\n-        if (certConstraints != NOT_FOUND) {\n-            values.add(certConstraints);\n-        }\n-        if (serviceRedirection != NOT_FOUND) {\n-            values.add(serviceRedirection);\n-        }\n-        if (httpServletResponse != NOT_FOUND) {\n-            values.add(httpServletResponse);\n-        }\n-        if (resourceMethod != NOT_FOUND) {\n-            values.add(resourceMethod);\n-        }\n-        if (oneWayRequest != NOT_FOUND) {\n-            values.add(oneWayRequest);\n-        }\n-        if (asyncResponse != NOT_FOUND) {\n-            values.add(asyncResponse);\n-        }\n-        if (threadContextSwitched != NOT_FOUND) {\n-            values.add(threadContextSwitched);\n-        }\n-        if (cacheInputProperty != NOT_FOUND) {\n-            values.add(cacheInputProperty);\n-        }\n-        if (previousMessage != NOT_FOUND) {\n-            values.add(previousMessage);\n-        }\n-        if (responseHeadersCopied != NOT_FOUND) {\n-            values.add(responseHeadersCopied);\n-        }\n-        if (sseEventSink != NOT_FOUND) {\n-            values.add(sseEventSink);\n-        }\n-        if (requestorRole != NOT_FOUND) {\n-            values.add(requestorRole);\n-        }\n-        if (partialResponse != NOT_FOUND) {\n-            values.add(partialResponse);\n-        }\n-        if (emptyPartialResponse != NOT_FOUND) {\n-            values.add(emptyPartialResponse);\n-        }\n-        if (endpointAddress != NOT_FOUND) {\n-            values.add(endpointAddress);\n-        }\n-        if (inboundMessage != NOT_FOUND) {\n-            values.add(inboundMessage);\n+        Collection<Object> myValues = new ArrayList<Object>(super.values());\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                myValues.add(o);\n+            }\n         }\n-        return values;\n+        return myValues;\n     }\n \n     public Object getAuthorizationPolicy() {\n-        return authorizationPolicy == NOT_FOUND ? null : authorizationPolicy;\n+        return getFromPropertyArray(authorizationPolicy);\n     }\n \n-    public void setAuthorizationPolicy(Object authorizationPolicy) {\n-        this.authorizationPolicy = authorizationPolicy;\n+    public void setAuthorizationPolicy(Object a) {\n+        propertyValues[authorizationPolicy] = a;\n     }\n \n     public Object getCertConstraints() {\n-        return certConstraints == NOT_FOUND ? null : certConstraints;\n+        return getFromPropertyArray(certConstraints);\n     }\n \n-    public void setCertConstraints(Object certConstraints) {\n-        this.certConstraints = certConstraints;\n+    public void setCertConstraints(Object c) {\n+        propertyValues[certConstraints] = c;\n     }\n \n     public Object getServiceRedirection() {\n-        return serviceRedirection == NOT_FOUND ? null : serviceRedirection;\n+        return getFromPropertyArray(serviceRedirection);\n     }\n \n-    public void setServiceRedirection(Object serviceRedirection) {\n-        this.serviceRedirection = serviceRedirection;\n+    public void setServiceRedirection(Object s) {\n+        propertyValues[serviceRedirection] = s;\n     }\n \n     public Object getHttpServletResponse() {\n-        return httpServletResponse == NOT_FOUND ? null : httpServletResponse;\n+        return getFromPropertyArray(httpServletResponse);\n     }\n \n-    public void setHttpServletResponse(Object httpServletResponse) {\n-        this.httpServletResponse = httpServletResponse;\n+    public void setHttpServletResponse(Object h) {\n+        propertyValues[httpServletResponse] = h;\n     }\n \n     public Object getResourceMethod() {\n-        return resourceMethod == NOT_FOUND ? null : resourceMethod;\n+        return getFromPropertyArray(resourceMethod);\n     }\n \n-    public void setResourceMethod(Object resourceMethod) {\n-        this.resourceMethod = resourceMethod;\n+    public void setResourceMethod(Object r) {\n+        propertyValues[resourceMethod] = r;\n     }\n \n     public Object getOneWayRequest() {\n-        return oneWayRequest == NOT_FOUND ? null : oneWayRequest;\n+        return getFromPropertyArray(oneWayRequest);\n     }\n \n-    public void setOneWayRequest(Object oneWayRequest) {\n-        this.oneWayRequest = oneWayRequest;\n+    public void setOneWayRequest(Object o) {\n+        propertyValues[oneWayRequest] = o;\n     }\n \n     public Object getAsyncResponse() {\n-        return asyncResponse == NOT_FOUND ? null : asyncResponse;\n+        return getFromPropertyArray(asyncResponse);\n     }\n \n-    public void setAsyncResponse(Object asyncResponse) {\n-        this.asyncResponse = asyncResponse;\n+    public void setAsyncResponse(Object a) {\n+        propertyValues[asyncResponse] = a;\n     }\n \n     public Object getThreadContextSwitched() {\n-        return threadContextSwitched == NOT_FOUND ? null : threadContextSwitched;\n+        return getFromPropertyArray(threadContextSwitched);\n     }\n \n-    public void setThreadContextSwitched(Object threadContextSwitched) {\n-        this.threadContextSwitched = threadContextSwitched;\n+    public void setThreadContextSwitched(Object t) {\n+        propertyValues[threadContextSwitched] = t;\n     }\n \n     public Object getPreviousMessage() {\n-        return previousMessage == NOT_FOUND ? null : previousMessage;\n+        return getFromPropertyArray(previousMessage);\n     }\n \n     public boolean containsPreviousMessage() {\n-        return previousMessage != NOT_FOUND;\n+        return propertyValues[previousMessage] != NOT_FOUND;\n     }\n \n-    public void setPreviousMessage(Object previousMessage) {\n-        this.previousMessage = previousMessage;\n+    public void setPreviousMessage(Object p) {\n+        propertyValues[previousMessage] = p;\n     }\n \n     public Object getCacheInputProperty() {\n-        return cacheInputProperty == NOT_FOUND ? null : cacheInputProperty;\n+        return getFromPropertyArray(cacheInputProperty);\n     }\n \n-    public void setCacheInputProperty(Object cacheInputProperty) {\n-        this.cacheInputProperty = cacheInputProperty;\n+    public void setCacheInputProperty(Object c) {\n+        propertyValues[cacheInputProperty] = c;\n     }\n \n     public Object getSseEventSink() {\n-        return sseEventSink == NOT_FOUND ? null : sseEventSink;\n+        return getFromPropertyArray(sseEventSink);\n     }\n \n-    public void setSseEventSink(Object sseEventSink) {\n-        this.sseEventSink = sseEventSink;\n+    public void setSseEventSink(Object s) {\n+        propertyValues[sseEventSink] = s;\n     }\n \n     public Object getResponseHeadersCopied() {\n-        return responseHeadersCopied == NOT_FOUND ? null : responseHeadersCopied;\n+        return getFromPropertyArray(responseHeadersCopied);\n     }\n \n-    public void setResponseHeadersCopied(Object responseHeadersCopied) {\n-        this.responseHeadersCopied = responseHeadersCopied;\n+    public void setResponseHeadersCopied(Object r) {\n+        propertyValues[responseHeadersCopied] = r;\n     }\n \n     public Object getRequestorRole() {\n-        return requestorRole == NOT_FOUND ? null : requestorRole;\n+        return getFromPropertyArray(requestorRole);\n     }\n \n-    public void setRequestorRole(Object requestorRole) {\n-        this.requestorRole = requestorRole;\n+    public void setRequestorRole(Object r) {\n+        propertyValues[requestorRole] = r;\n     }\n \n     public Object getEmptyPartialResponse() {\n-        return emptyPartialResponse == NOT_FOUND ? null : emptyPartialResponse;\n+        return getFromPropertyArray(emptyPartialResponse);\n     }\n \n-    public void setEmptyPartialResponse(Object emptyPartialResponse) {\n-        this.emptyPartialResponse = emptyPartialResponse;\n+    public void setEmptyPartialResponse(Object e) {\n+        propertyValues[emptyPartialResponse] = e;\n     }\n \n     public Object getPartialResponse() {\n-        return partialResponse == NOT_FOUND ? null : partialResponse;\n+        return getFromPropertyArray(partialResponse);\n     }\n \n-    public void setPartialResponse(Object partialResponse) {\n-        this.partialResponse = partialResponse;\n+    public void setPartialResponse(Object p) {\n+        propertyValues[partialResponse] = p;\n     }\n \n     public Object getEndpointAddress() {\n-        return endpointAddress == NOT_FOUND ? null : endpointAddress;\n+        return getFromPropertyArray(endpointAddress);\n     }\n \n-    public void setEndpointAddress(Object endpointAddress) {\n-        this.endpointAddress = endpointAddress;\n+    public void setEndpointAddress(Object e) {\n+        propertyValues[endpointAddress] = e;\n     }\n     \n     public Object getInboundMessage() {\n-        return inboundMessage == NOT_FOUND ? null : inboundMessage;\n+        return getFromPropertyArray(inboundMessage);\n     }\n \n-    public void setInboundMessage(Object inboundMessage) {\n-        this.inboundMessage = inboundMessage;\n+    public void setInboundMessage(Object i) {\n+        propertyValues[inboundMessage] = i;\n     }\n     public String getPathToMatchSlash() {\n-        return pathToMatchSlash == NOT_FOUND ? null : (String) pathToMatchSlash;\n+        return (String) getFromPropertyArray(pathToMatchSlash);\n     }\n     \n-    public void setPathToMatchSlash(String pathToMatchSlash) {\n-        this.pathToMatchSlash = pathToMatchSlash;\n+    public void setPathToMatchSlash(String p) {\n+        propertyValues[pathToMatchSlash] = p;\n     }\n     \n     public String getHttpRequestMethod() {\n-        return httpRequestMethod == NOT_FOUND ? null : (String) httpRequestMethod;\n+        return (String) getFromPropertyArray(httpRequestMethod);\n     }\n     \n-    public void setHttpRequestMethod(String httpRequestMethod) {\n-        this.httpRequestMethod = httpRequestMethod;\n+    public void setHttpRequestMethod(String h) {\n+        propertyValues[httpRequestMethod] = h;\n     }\n \n     public void removePathToMatchSlash() {\n-        pathToMatchSlash = NOT_FOUND;\n+        propertyValues[pathToMatchSlash] = NOT_FOUND;\n     }\n     public String getQueryString() {\n-        return queryString == NOT_FOUND ? null : (String) queryString;\n+        return (String) getFromPropertyArray(queryString);\n     }\n     \n-    public void setQueryString(String queryString) {\n-        this.queryString = queryString;\n+    public void setQueryString(String q) {\n+        propertyValues[queryString] = q;\n     }\n     public Object getOperationResourceInfoStack() {\n-        return opStack == NOT_FOUND ? null: opStack;\n+        return getFromPropertyArray(opStack);\n     }\n     \n-    public void setOperationResourceInfoStack(Object opStack) {\n-        this.opStack = opStack;\n+    public void setOperationResourceInfoStack(Object o) {\n+        propertyValues[opStack] = o;\n     }\n \n     public String getContentType() {\n-        return contentType == NOT_FOUND ? null : (String) contentType;\n+        return (String) getFromPropertyArray(contentType);\n     }\n     \n     public boolean containsContentType() {\n-        return contentType != NOT_FOUND;\n+        return propertyValues[contentType] != NOT_FOUND;\n     }\n     \n-    public void setContentType(String contentType) {\n-        this.contentType = contentType;\n+    public void setContentType(String c) {\n+        propertyValues[contentType] = c;\n     }\n \n     public Object getHttpRequest() {\n-        return httpRequest == NOT_FOUND ? null : httpRequest;\n+        return getFromPropertyArray(httpRequest);\n     }\n     \n     public boolean containsHttpRequest() {\n-        return httpRequest != NOT_FOUND;\n+        return propertyValues[httpRequest] != NOT_FOUND;\n     }\n     \n-    public void setHttpRequest(Object httpRequest) {\n-        this.httpRequest = httpRequest;\n+    public void setHttpRequest(Object h) {\n+        propertyValues[httpRequest] = h;\n     }\n     \n     public Object getHttpResponse() {\n-        return httpResponse == NOT_FOUND ? null : httpResponse;\n+        return getFromPropertyArray(httpResponse);\n     }\n     \n-    public void setHttpResponse(Object httpResponse) {\n-        this.httpResponse = httpResponse;\n+    public void setHttpResponse(Object h) {\n+        propertyValues[httpResponse] = h;\n     }\n \n     public Object getAccept() {\n-        return accept == NOT_FOUND ? null : accept;\n+        return getFromPropertyArray(accept);\n     }\n     \n-    public void setAccept(Object accept) {\n-        this.accept = accept;\n+    public void setAccept(Object a) {\n+        propertyValues[accept] = a;\n     }\n \n     public Object getContinuationProvider() {\n-        return continuationProvider == NOT_FOUND ? null : continuationProvider;\n+        return getFromPropertyArray(continuationProvider);\n     }\n     \n-    public void setContinuationProvider(Object continuationProvider) {\n-        this.continuationProvider = continuationProvider;\n+    public void setContinuationProvider(Object c) {\n+        propertyValues[continuationProvider] = c;\n     }\n \n     public Object getWsdlDescription() {\n-        return wsdlDescription == NOT_FOUND ? null : wsdlDescription;\n+        return getFromPropertyArray(wsdlDescription);\n     }\n     \n-    public void setWsdlDescription(Object wsdlDescription) {\n-        this.wsdlDescription = wsdlDescription;\n+    public void setWsdlDescription(Object w) {\n+        propertyValues[wsdlDescription] = w;\n     }\n \n     public Object getWsdlInterface() {\n-        return wsdlInterface == NOT_FOUND ? null : wsdlInterface;\n+        return getFromPropertyArray(wsdlInterface);\n     }\n     \n-    public void setWsdlInterface(Object wsdlInterface) {\n-        this.wsdlInterface = wsdlInterface;\n+    public void setWsdlInterface(Object w) {\n+        propertyValues[wsdlInterface] = w;\n     }\n \n     public Object getWsdlOperation() {\n-        return wsdlOperation == NOT_FOUND ? null : wsdlOperation;\n+        return getFromPropertyArray(wsdlOperation);\n     }\n     \n-    public void setWsdlOperation(Object wsdlOperation) {\n-        this.wsdlOperation = wsdlOperation;\n+    public void setWsdlOperation(Object w) {\n+        propertyValues[wsdlOperation] = w;\n     }\n \n     public Object getWsdlPort() {\n-        return wsdlPort == NOT_FOUND ? null : wsdlPort;\n+        return getFromPropertyArray(wsdlPort);\n     }\n     \n-    public void setWsdlPort(Object wsdlPort) {\n-        this.wsdlPort = wsdlPort;\n+    public void setWsdlPort(Object w) {\n+        propertyValues[wsdlPort] = w;\n     }\n \n     public Object getWsdlService() {\n-        return wsdlService == NOT_FOUND ? null : wsdlService;\n+        return getFromPropertyArray(wsdlService);\n     }\n     \n-    public void setWsdlService(Object wsdlService) {\n-        this.wsdlService = wsdlService;\n+    public void setWsdlService(Object w) {\n+        propertyValues[wsdlService] = w;\n     }\n \n     public Object getRequestUrl() {\n-        return requestUrl == NOT_FOUND ? null : requestUrl;\n+        return getFromPropertyArray(requestUrl);\n     }\n     \n-    public void setRequestUrl(Object requestUrl) {\n-        this.requestUrl = requestUrl;\n+    public void setRequestUrl(Object r) {\n+        propertyValues[requestUrl] = r;\n     }\n \n     public Object getRequestUri() {\n-        return requestUri == NOT_FOUND ? null : requestUri;\n+        return getFromPropertyArray(requestUri);\n     }\n     \n-    public void setRequestUri(Object requestUri) {\n-        this.requestUri = requestUri;\n+    public void setRequestUri(Object r) {\n+        propertyValues[requestUri] = r;\n     }\n     \n     public Object getPathInfo() {\n-        return pathInfo == NOT_FOUND ? null : pathInfo;\n+        return getFromPropertyArray(pathInfo);\n     }\n     \n-    public void setPathInfo(Object pathInfo) {\n-        this.pathInfo = pathInfo;\n+    public void setPathInfo(Object p) {\n+       propertyValues[pathInfo] = p;\n     }\n     \n     public Object getBasePath() {\n-        return basePath == NOT_FOUND ? null : basePath;\n+        return getFromPropertyArray(basePath);\n     }\n     \n     public boolean containsBasePath() {\n-        return basePath != NOT_FOUND;\n+        return propertyValues[basePath] != NOT_FOUND;\n     }\n     \n-    public void setBasePath(Object basePath) {\n-        this.basePath = basePath;\n+    public void setBasePath(Object b) {\n+        propertyValues[basePath] = b;\n     }\n \n     public Object getFixedParamOrder() {\n-        return fixedParamOrder == NOT_FOUND ? null : fixedParamOrder;\n+        return getFromPropertyArray(fixedParamOrder);\n     }\n     \n-    public void setFixedParamOrder(Object fixedParamOrder) {\n-        this.fixedParamOrder = fixedParamOrder;\n+    public void setFixedParamOrder(Object f) {\n+        propertyValues[fixedParamOrder] = f;\n     }\n \n     public Object getInInterceptors() {\n-        return inInterceptors == NOT_FOUND ? null : inInterceptors;\n+        return getFromPropertyArray(inInterceptors);\n     }\n     \n-    public void setInInterceptors(Object inInterceptors) {\n-        this.inInterceptors = inInterceptors;\n+    public void setInInterceptors(Object i) {\n+        propertyValues[inInterceptors] = i;\n     }\n \n     public Object getOutInterceptors() {\n-        return outInterceptors == NOT_FOUND ? null : outInterceptors;\n+        return getFromPropertyArray(outInterceptors);\n     }\n     \n-    public void setOutInterceptors(Object outInterceptors) {\n-        this.outInterceptors = outInterceptors;\n+    public void setOutInterceptors(Object o) {\n+        propertyValues[outInterceptors] = o;\n     }\n \n     public Object getResponseCode() {\n-        return responseCode == NOT_FOUND ? null : responseCode;\n+        return getFromPropertyArray(responseCode);\n     }\n     \n-    public void setResponseCode(Object responseCode) {\n-        this.responseCode = responseCode;\n+    public void setResponseCode(Object r) {\n+        propertyValues[responseCode] = r;\n     }\n \n     public Object getEncoding() {\n-        return encoding == NOT_FOUND ? null : encoding;\n+        return getFromPropertyArray(encoding);\n     }\n     \n-    public void setEncoding(Object encoding) {\n-        this.encoding = encoding;\n+    public void setEncoding(Object e) {\n+        propertyValues[encoding] = e;\n     }\n \n     public Object getHttpContext() {\n-        return httpContext == NOT_FOUND ? null : httpContext;\n+        return getFromPropertyArray(httpContext);\n     }\n     \n-    public void setHttpContext(Object httpContext) {\n-        this.httpContext = httpContext;\n+    public void setHttpContext(Object h) {\n+        propertyValues[httpContext] = h;\n     }\n \n     public Object getHttpConfig() {\n-        return httpConfig == NOT_FOUND ? null : httpConfig;\n+        return getFromPropertyArray(httpConfig);\n     }\n     \n-    public void setHttpConfig(Object httpConfig) {\n-        this.httpConfig = httpConfig;\n+    public void setHttpConfig(Object h) {\n+        propertyValues[httpConfig] = h;\n     }\n \n     public Object getHttpContextMatchStrategy() {\n-        return httpContextMatchStrategy == NOT_FOUND ? null : httpContextMatchStrategy;\n+        return getFromPropertyArray(httpContextMatchStrategy);\n     }\n     \n-    public void setHttpContextMatchStrategy(Object httpContextMatchStrategy) {\n-        this.httpContextMatchStrategy = httpContextMatchStrategy;\n+    public void setHttpContextMatchStrategy(Object h) {\n+        propertyValues[httpContextMatchStrategy] = h;\n     }\n \n     public Object getHttpBasePath() {\n-        return httpBasePath == NOT_FOUND ? null : httpBasePath;\n+        return getFromPropertyArray(httpBasePath);\n     }\n     \n-    public void setHttpBasePath(Object httpBasePath) {\n-        this.httpBasePath = httpBasePath;\n+    public void setHttpBasePath(Object h) {\n+        propertyValues[httpBasePath] = h;\n     }\n \n     public Object getAsyncPostDispatch() {\n-        return asyncPostDispatch == NOT_FOUND ? null : asyncPostDispatch;\n+        return getFromPropertyArray(asyncPostDispatch);\n     }\n     \n-    public void setAsyncPostDispatch(Object asyncPostDispatch) {\n-        this.asyncPostDispatch = asyncPostDispatch;\n+    public void setAsyncPostDispatch(Object a) {\n+        propertyValues[asyncPostDispatch] = a;\n     }\n     \n     public Object getSecurityContext() {\n-        return securityContext == NOT_FOUND ? null : securityContext;\n+        return getFromPropertyArray(securityContext);\n     }\n     \n-    public void setSecurityContext(Object securityContext) {\n-        this.securityContext = securityContext;\n+    public void setSecurityContext(Object s) {\n+        propertyValues[securityContext] = s;\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n     public Collection getInterceptorProviders() {\n-        return interceptorProviders == NOT_FOUND ? null : (Collection) interceptorProviders;\n+        return (Collection) getFromPropertyArray(interceptorProviders);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n-    public void setInterceptorProviders(Collection interceptorProviders) {\n-        this.interceptorProviders = interceptorProviders;\n+    public void setInterceptorProviders(Collection i) {\n+        propertyValues[interceptorProviders] = i;\n     }\n \n     public Object getTemplateParameters() {\n-        return templateParameters == NOT_FOUND ? null :  templateParameters;\n+        return getFromPropertyArray(templateParameters);\n     }\n     \n-    public void setTemplateParameters(Object templateParameters) {\n-        this.templateParameters = templateParameters;\n+    public void setTemplateParameters(Object t) {\n+        propertyValues[templateParameters] = t;\n     }\n \n     public void removeContentType() {\n-        contentType = NOT_FOUND;\n+        propertyValues[contentType] = NOT_FOUND;\n     }\n     public void removeHttpResponse() {\n-        httpResponse = NOT_FOUND;\n+        propertyValues[httpResponse] = NOT_FOUND;\n     }\n     public void removeHttpRequest() {\n-        httpRequest = NOT_FOUND;\n+        propertyValues[httpRequest] = NOT_FOUND;\n+    }\n+    \n+    private Object getFromPropertyArray(int index) {\n+        Object value = propertyValues[index];\n+        return value == NOT_FOUND ? null : value;\n+    }\n+    \n+    @Override\n+    public int size() {\n+        int size = super.size();\n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                size++;\n+            }\n+        }\n+        return size;\n+    }\n+    \n+    @Override\n+    public void clear() {\n+        super.clear();\n+        for (int i = 0; i < TOTAL; i++) {\n+            propertyValues[i] = NOT_FOUND;\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isEmpty() {\n+        if (!super.isEmpty()) {\n+            return false;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o != NOT_FOUND) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    @Override\n+    public boolean containsValue(Object value) {\n+        if (super.containsValue(value)) {\n+            return true;\n+        }\n+        \n+        for (Object o : propertyValues) {\n+            if (o.equals(value)) {\n+                return true;\n+            }\n+        }\n+        \n+        return false;\n+    }\n+    \n+    @Override\n+    public Object getOrDefault(Object key, Object d) {\n+        return getOrDefault((String) key, d);\n+    }\n+    \n+    public Object getOrDefault(String key, Object d) {\n+        Object v = super.getOrDefault(key, NOT_FOUND);\n+        if (v != NOT_FOUND) {\n+            return v;\n+        }\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyNames[i] == key) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    return propertyValues[i];\n+                } else {\n+                    return d;\n+                }\n+            }\n+        }\n+        return d;\n+    }\n+    \n+    @Override\n+    public void forEach(BiConsumer<? super String, ? super Object> action) {\n+        super.forEach(action);\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                action.accept(propertyNames[i], propertyValues[i]);\n+            }\n+        }\n+    }\n+    @Override\n+    public void replaceAll(BiFunction<? super String, ? super Object, ? extends Object> function) {\n+        super.replaceAll(function);\n+        for (int i = 0; i < TOTAL; i++) {\n+            if (propertyValues[i] != NOT_FOUND) {\n+                propertyValues[i] = function.apply(propertyNames[i], propertyValues[i]);\n+            }\n+        }\n+    }\n+    @Override\n+    public Object replace(String key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                Object ret = propertyValues[index];\n+                propertyValues[index] = value;\n+                return ret;\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        return super.replace(key, value);\n+    }\n+    @Override\n+    public boolean replace(String key, Object oldValue, Object newValue) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == oldValue) {\n+                propertyValues[index] = newValue;\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+        return super.replace(key, oldValue, newValue);\n+    }\n+    @Override\n+    public Object putIfAbsent(String key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == NOT_FOUND) {\n+                propertyValues[index] = value;\n+                return null;\n+            } else {\n+                return propertyValues[index];\n+            }\n+        }\n+        return super.putIfAbsent(key, value);\n+    }\n+    @Override\n+    public boolean remove(Object key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == value) {", "originalCommit": "85bdccc8b3ec23669543de0274bc7d2078546743", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 710c146975..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -544,17 +498,6 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.remove(key);\n     }\n     \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T get(Class<T> key) {\n-        return (T) get(key.getName());\n-    }\n-\n-    @Override\n-    public <T> void put(Class<T> key, T value) {\n-        put(key.getName(), value);\n-    }\n-\n     @Override\n     public Object get(Object key) {\n         return get((String) key);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxNjY0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405816647", "bodyText": "You might want to change this a little.  If an equals method doesn't handle null it could get messy.\nif (value == null) {\n    for (Object o : propertyValue) {\n        if (o == null) {\n           return true;\n        }\n    }\n} else {\n    for (Object o : propertyValues) {\n        if (o != null && o != NOT_FOUND && value.equals(o) {\n            return true;\n        }\n    }\n}\n\nThis prevents passing a null to o.equals and if value is null and it calls equals on the value passed in instead of the one in the propertyValues. We do not know the impl of those equals where the equals of the value passed in needs to work correctly by definition.", "author": "jhanders34", "createdAt": "2020-04-08T21:09:42Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -1087,7 +982,11 @@ public boolean containsValue(Object value) {\n         }\n         \n         for (Object o : propertyValues) {\n-            if (o.equals(value)) {\n+            if (o == null) {\n+                if (value == null) {\n+                    return true;\n+                }\n+            } else if (o != NOT_FOUND && o.equals(value)) {", "originalCommit": "990bd36bf3d931a5a4c9433157360adbc9f39241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 10bc3a7b62..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -980,17 +1219,19 @@ public class MessageImpl extends StringMapImpl implements Message {\n         if (super.containsValue(value)) {\n             return true;\n         }\n-        \n-        for (Object o : propertyValues) {\n-            if (o == null) {\n-                if (value == null) {\n+        if (value == null) {\n+            for (Object o : propertyValues) {\n+                if (o == null) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            for (Object o : propertyValues) {\n+                if (o != null && o != NOT_FOUND && value.equals(o)) {\n                     return true;\n                 }\n-            } else if (o != NOT_FOUND && o.equals(value)) {\n-                return true;\n             }\n         }\n-        \n         return false;\n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODM1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405818359", "bodyText": "Again I recommend doing the == null check on oldValue instead of propertyValues[index] and then do oldValue.equals to reverse the equals.", "author": "jhanders34", "createdAt": "2020-04-08T21:13:14Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -1154,12 +1045,21 @@ public Object replace(String key, Object value) {\n     public boolean replace(String key, Object oldValue, Object newValue) {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n-            if (propertyValues[index] == oldValue) {\n-                propertyValues[index] = newValue;\n-                return true;\n-            } else {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (propertyValues[index] == null) {\n+                    if (oldValue == null) {\n+                        propertyValues[index] = newValue;\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n+                } else if (propertyValues[index].equals(oldValue)){\n+                    propertyValues[index] = newValue;\n+                    return true;\n+                }", "originalCommit": "990bd36bf3d931a5a4c9433157360adbc9f39241", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxOTMwOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405819309", "bodyText": "Same with remove with check Value.", "author": "jhanders34", "createdAt": "2020-04-08T21:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 10bc3a7b62..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -1046,14 +1287,18 @@ public class MessageImpl extends StringMapImpl implements Message {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n             if (propertyValues[index] != NOT_FOUND) {\n-                if (propertyValues[index] == null) {\n-                    if (oldValue == null) {\n+                if (oldValue == null) {\n+                    if (propertyValues[index] == null) {\n                         propertyValues[index] = newValue;\n                         return true;\n                     } else {\n                         return false;\n                     }\n-                } else if (propertyValues[index].equals(oldValue)){\n+                }\n+                if (propertyValues[index] == null) {\n+                    return false;\n+                }\n+                if (oldValue.equals(propertyValues[index])){\n                     propertyValues[index] = newValue;\n                     return true;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNDA5OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405824098", "bodyText": "I think this if / else can be simplified to:\npropertyValues[index] = newValue == null ? NOT_FOUND : newValue;", "author": "jhanders34", "createdAt": "2020-04-08T21:24:42Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -1180,30 +1080,96 @@ public Object putIfAbsent(String key, Object value) {\n     public boolean remove(Object key, Object value) {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n-            if (propertyValues[index] == value) {\n-                propertyValues[index] = NOT_FOUND;\n-                return true;\n-            } else {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (propertyValues[index] == null) {\n+                    if (value == null) {\n+                        propertyValues[index] = NOT_FOUND;\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n+                } else if (propertyValues[index].equals(value)){\n+                    propertyValues[index] = NOT_FOUND;\n+                    return true;\n+                }\n                 return false;\n             }\n+            return false;\n         }\n         return super.remove(key, value);\n     }\n     @Override\n     public Object compute(String key, BiFunction<? super String, ? super Object, ? extends Object> remappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object newValue = remappingFunction.apply(key, propertyValues[index] == NOT_FOUND ? null : propertyValues[index]);\n+            if (propertyValues[index] != NOT_FOUND) {", "originalCommit": "990bd36bf3d931a5a4c9433157360adbc9f39241", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MDg3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405850872", "bodyText": "If remappingFunction == null this method should throw NPE.", "author": "jhanders34", "createdAt": "2020-04-08T22:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNDA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 10bc3a7b62..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -1081,14 +1326,16 @@ public class MessageImpl extends StringMapImpl implements Message {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n             if (propertyValues[index] != NOT_FOUND) {\n-                if (propertyValues[index] == null) {\n-                    if (value == null) {\n+                if (value == null) {\n+                    if (propertyValues[index] == null) {\n                         propertyValues[index] = NOT_FOUND;\n                         return true;\n                     } else {\n                         return false;\n                     }\n-                } else if (propertyValues[index].equals(value)){\n+                } else if (propertyValues[index] == null) {\n+                    return false;\n+                } else if (value.equals(propertyValues[index])) {\n                     propertyValues[index] = NOT_FOUND;\n                     return true;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzE5Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405827196", "bodyText": "If newValue is null it should set it to NOT_FOUND, i.e.\nproeprtyValues[index] = newValue == null ? NOT_FOUND : newValue;", "author": "jhanders34", "createdAt": "2020-04-08T21:31:07Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -1180,30 +1080,96 @@ public Object putIfAbsent(String key, Object value) {\n     public boolean remove(Object key, Object value) {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n-            if (propertyValues[index] == value) {\n-                propertyValues[index] = NOT_FOUND;\n-                return true;\n-            } else {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (propertyValues[index] == null) {\n+                    if (value == null) {\n+                        propertyValues[index] = NOT_FOUND;\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n+                } else if (propertyValues[index].equals(value)){\n+                    propertyValues[index] = NOT_FOUND;\n+                    return true;\n+                }\n                 return false;\n             }\n+            return false;\n         }\n         return super.remove(key, value);\n     }\n     @Override\n     public Object compute(String key, BiFunction<? super String, ? super Object, ? extends Object> remappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object newValue = remappingFunction.apply(key, propertyValues[index] == NOT_FOUND ? null : propertyValues[index]);\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (newValue != null) {\n+                    propertyValues[index] = newValue;\n+                } else {\n+                    // should we set to null (since we allow null values) or NOT_FOUND (javadoc seems to suggest this)? \n+                    propertyValues[index] = NOT_FOUND;\n+                }\n+            } else {\n+                if (newValue != null) {\n+                    propertyValues[index] = newValue;\n+                } else {\n+                    return null;\n+                }\n+            }\n+            return newValue;\n+        }\n+        return super.compute(key, remappingFunction);\n     }\n     @Override\n     public Object computeIfAbsent(String key, Function<? super String, ? extends Object> mappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == NOT_FOUND) {\n+                Object newValue = mappingFunction.apply(key);\n+                if (newValue != null) {\n+                    // should we also add the newValue if null???\n+                    propertyValues[index] = newValue;\n+                }\n+                return newValue;\n+            }\n+            return getFromPropertyArray(index);\n+        }\n+        return super.computeIfAbsent(key, mappingFunction);\n     }\n     @Override\n     public Object computeIfPresent(String key, BiFunction<? super String, ? super Object, ? extends Object> remappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                Object oldValue = propertyValues[index];\n+                Object newValue = remappingFunction.apply(key, oldValue);\n+                if (newValue != null) {\n+                    // should we also add the newValue if null, or do the remove like javadoc suggests???", "originalCommit": "990bd36bf3d931a5a4c9433157360adbc9f39241", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MDk1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405850957", "bodyText": "If remappingFunction == null this method should throw NPE.", "author": "jhanders34", "createdAt": "2020-04-08T22:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 10bc3a7b62..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -1081,14 +1326,16 @@ public class MessageImpl extends StringMapImpl implements Message {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n             if (propertyValues[index] != NOT_FOUND) {\n-                if (propertyValues[index] == null) {\n-                    if (value == null) {\n+                if (value == null) {\n+                    if (propertyValues[index] == null) {\n                         propertyValues[index] = NOT_FOUND;\n                         return true;\n                     } else {\n                         return false;\n                     }\n-                } else if (propertyValues[index].equals(value)){\n+                } else if (propertyValues[index] == null) {\n+                    return false;\n+                } else if (value.equals(propertyValues[index])) {\n                     propertyValues[index] = NOT_FOUND;\n                     return true;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NzEwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r405847105", "bodyText": "If value == null or remappingFunction == null, this method needs to throw a NullPointerException.  Should check that first in the method.\nThe if (propertyValues[index] != NULL) should be if (propertyValues[index] != NULL || propertyValues[index] == null)\nif newValue == null it should be NOT_FOUND, i.e. removed.  So similarly to above it should be\npropertyValues[index] = newValue == null ? NOT_FOUND : newValue;\nreturn propertyValues[index]  should be changed to return getFromPropertyArray(index);", "author": "jhanders34", "createdAt": "2020-04-08T22:17:49Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -1180,30 +1080,96 @@ public Object putIfAbsent(String key, Object value) {\n     public boolean remove(Object key, Object value) {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n-            if (propertyValues[index] == value) {\n-                propertyValues[index] = NOT_FOUND;\n-                return true;\n-            } else {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (propertyValues[index] == null) {\n+                    if (value == null) {\n+                        propertyValues[index] = NOT_FOUND;\n+                        return true;\n+                    } else {\n+                        return false;\n+                    }\n+                } else if (propertyValues[index].equals(value)){\n+                    propertyValues[index] = NOT_FOUND;\n+                    return true;\n+                }\n                 return false;\n             }\n+            return false;\n         }\n         return super.remove(key, value);\n     }\n     @Override\n     public Object compute(String key, BiFunction<? super String, ? super Object, ? extends Object> remappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object newValue = remappingFunction.apply(key, propertyValues[index] == NOT_FOUND ? null : propertyValues[index]);\n+            if (propertyValues[index] != NOT_FOUND) {\n+                if (newValue != null) {\n+                    propertyValues[index] = newValue;\n+                } else {\n+                    // should we set to null (since we allow null values) or NOT_FOUND (javadoc seems to suggest this)? \n+                    propertyValues[index] = NOT_FOUND;\n+                }\n+            } else {\n+                if (newValue != null) {\n+                    propertyValues[index] = newValue;\n+                } else {\n+                    return null;\n+                }\n+            }\n+            return newValue;\n+        }\n+        return super.compute(key, remappingFunction);\n     }\n     @Override\n     public Object computeIfAbsent(String key, Function<? super String, ? extends Object> mappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] == NOT_FOUND) {\n+                Object newValue = mappingFunction.apply(key);\n+                if (newValue != null) {\n+                    // should we also add the newValue if null???\n+                    propertyValues[index] = newValue;\n+                }\n+                return newValue;\n+            }\n+            return getFromPropertyArray(index);\n+        }\n+        return super.computeIfAbsent(key, mappingFunction);\n     }\n     @Override\n     public Object computeIfPresent(String key, BiFunction<? super String, ? super Object, ? extends Object> remappingFunction) {\n-        throw new UnsupportedOperationException();\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            if (propertyValues[index] != NOT_FOUND) {\n+                Object oldValue = propertyValues[index];\n+                Object newValue = remappingFunction.apply(key, oldValue);\n+                if (newValue != null) {\n+                    // should we also add the newValue if null, or do the remove like javadoc suggests???\n+                    propertyValues[index] = newValue;\n+                }\n+                return newValue;\n+            }\n+            return null;\n+        }\n+        return super.computeIfPresent(key, remappingFunction);\n     }\n     @Override\n     public Object merge(String key, Object value, BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction) {", "originalCommit": "990bd36bf3d931a5a4c9433157360adbc9f39241", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 10bc3a7b62..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -1081,14 +1326,16 @@ public class MessageImpl extends StringMapImpl implements Message {\n         Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n         if (index != KEY_NOT_FOUND) {\n             if (propertyValues[index] != NOT_FOUND) {\n-                if (propertyValues[index] == null) {\n-                    if (value == null) {\n+                if (value == null) {\n+                    if (propertyValues[index] == null) {\n                         propertyValues[index] = NOT_FOUND;\n                         return true;\n                     } else {\n                         return false;\n                     }\n-                } else if (propertyValues[index].equals(value)){\n+                } else if (propertyValues[index] == null) {\n+                    return false;\n+                } else if (value.equals(propertyValues[index])) {\n                     propertyValues[index] = NOT_FOUND;\n                     return true;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMTg1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406901855", "bodyText": "I guess we could have done this simpler:\nfor (next = current+1; next < TOTAL; next++) {\n   if (propertyesValues[next] != NOT_FOUND) {\n...\n\nthen you don't need to set next = i or next = TOTAL because it is already set.", "author": "jhanders34", "createdAt": "2020-04-10T19:12:49Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -478,27 +483,232 @@ public Object put(String key, Object value) {\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> myKeys = new HashSet<String>(super.keySet());\n-        for (int i = 0; i < TOTAL; i++) {\n-            if (propertyValues[i] != NOT_FOUND) {\n-                myKeys.add(propertyNames[i]);\n+        return new KeySet();\n+    }\n+    \n+    Set<String> backedKeySet() {\n+        return super.keySet();\n+    }\n+    \n+    Set<Map.Entry<String, Object>> backedEntrySet() {\n+        return super.entrySet();\n+    }\n+    \n+    Collection<Object> backedValues() {\n+        return super.values();\n+    }\n+    \n+    abstract class MessageIterator<T> implements Iterator<T>{\n+        Iterator<T> backedIterator;\n+        int current = -1;\n+        int next = -1;\n+        boolean removeAllowed = false;\n+        MessageIterator(Iterator<T> it) {\n+            backedIterator = it;\n+        }\n+        @Override\n+        public final boolean hasNext() {\n+            if (backedIterator.hasNext()) {\n+                return true;\n+            }\n+            if (next == TOTAL) {\n+                return false;\n+            }\n+\n+            for (int i = current+1; i < TOTAL; i++) {", "originalCommit": "909a98a6d28efb9a7f36e5dde2704645f017b97a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 63eeb29114..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -483,19 +526,7 @@ public class MessageImpl extends StringMapImpl implements Message {\n \n     @Override\n     public Set<String> keySet() {\n-        return new KeySet();\n-    }\n-    \n-    Set<String> backedKeySet() {\n-        return super.keySet();\n-    }\n-    \n-    Set<Map.Entry<String, Object>> backedEntrySet() {\n-        return super.entrySet();\n-    }\n-    \n-    Collection<Object> backedValues() {\n-        return super.values();\n+        return keySet != null ? keySet : (keySet = new KeySet());\n     }\n     \n     abstract class MessageIterator<T> implements Iterator<T>{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMzAwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406903002", "bodyText": "This will create an infinite loop.  clear() has the same issue.  You need to change to MessageImpl.this.size() and MessageImpl.this.clear();", "author": "jhanders34", "createdAt": "2020-04-10T19:15:34Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -478,27 +483,232 @@ public Object put(String key, Object value) {\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> myKeys = new HashSet<String>(super.keySet());\n-        for (int i = 0; i < TOTAL; i++) {\n-            if (propertyValues[i] != NOT_FOUND) {\n-                myKeys.add(propertyNames[i]);\n+        return new KeySet();\n+    }\n+    \n+    Set<String> backedKeySet() {\n+        return super.keySet();\n+    }\n+    \n+    Set<Map.Entry<String, Object>> backedEntrySet() {\n+        return super.entrySet();\n+    }\n+    \n+    Collection<Object> backedValues() {\n+        return super.values();\n+    }\n+    \n+    abstract class MessageIterator<T> implements Iterator<T>{\n+        Iterator<T> backedIterator;\n+        int current = -1;\n+        int next = -1;\n+        boolean removeAllowed = false;\n+        MessageIterator(Iterator<T> it) {\n+            backedIterator = it;\n+        }\n+        @Override\n+        public final boolean hasNext() {\n+            if (backedIterator.hasNext()) {\n+                return true;\n+            }\n+            if (next == TOTAL) {\n+                return false;\n+            }\n+\n+            for (int i = current+1; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    next = i;\n+                    return true;\n+                }\n             }\n+            next = TOTAL;\n+            return false;\n+        }\n+        @Override\n+        public final T next() {\n+            if (hasNext()) {\n+                if (next == -1) {\n+                    removeAllowed = true;\n+                    return backedIterator.next();\n+                } else {\n+                    current = next;\n+                    removeAllowed = true;\n+                    return getNextFromProperties(next);\n+                }\n+            }\n+            removeAllowed = false;\n+            throw new NoSuchElementException();\n+        }\n+        @Override\n+        public final void remove() {\n+            if (!removeAllowed) {\n+                throw new IllegalStateException();\n+            }\n+            if (current == -1) {\n+                backedIterator.remove();\n+            } else {\n+                propertyValues[current] = NOT_FOUND;\n+            }\n+            removeAllowed = false;\n+        }\n+        abstract T getNextFromProperties(int index);\n+    }\n+    \n+    final class KeyIterator extends MessageIterator<String> {\n+        KeyIterator() {\n+            super(backedKeySet().iterator());\n+        }\n+\n+        @Override\n+        String getNextFromProperties(int index) {\n+            return propertyNames[index];\n+        }\n+        \n+    }\n+\n+    final class EntryIterator extends MessageIterator<Map.Entry<String, Object>> {\n+        EntryIterator() {\n+            super(backedEntrySet().iterator());\n         }\n \n-        return myKeys;\n+        @Override\n+        Map.Entry<String, Object> getNextFromProperties(int index) {\n+            return new AbstractMap.SimpleEntry<String, Object>(propertyNames[index], propertyValues[index]);\n+        }\n+        \n     }\n     \n-    @Override\n-    public Set<Map.Entry<String,Object>> entrySet() {\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n-        for (int i = 0; i < TOTAL; i++) {\n-            if (propertyValues[i] != NOT_FOUND) {\n-                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+    final class ValuesIterator extends MessageIterator<Object> {\n+        ValuesIterator() {\n+            super(backedValues().iterator());\n+        }\n+\n+        @Override\n+        Object getNextFromProperties(int index) {\n+            return propertyValues[index];\n+        }\n+        \n+    }\n+    \n+    final class KeySet extends AbstractSet<String> {\n+        public final int size() {\n+            return this.size();", "originalCommit": "909a98a6d28efb9a7f36e5dde2704645f017b97a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMzQxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406903417", "bodyText": "Similar issue in the other impls as well.", "author": "jhanders34", "createdAt": "2020-04-10T19:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMzAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 63eeb29114..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -483,19 +526,7 @@ public class MessageImpl extends StringMapImpl implements Message {\n \n     @Override\n     public Set<String> keySet() {\n-        return new KeySet();\n-    }\n-    \n-    Set<String> backedKeySet() {\n-        return super.keySet();\n-    }\n-    \n-    Set<Map.Entry<String, Object>> backedEntrySet() {\n-        return super.entrySet();\n-    }\n-    \n-    Collection<Object> backedValues() {\n-        return super.values();\n+        return keySet != null ? keySet : (keySet = new KeySet());\n     }\n     \n     abstract class MessageIterator<T> implements Iterator<T>{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDM0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406904349", "bodyText": "Can you just use getOrDefault here like in other places instead of containsKey and get?  Will save doing a scan again", "author": "jhanders34", "createdAt": "2020-04-10T19:19:30Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -478,27 +483,232 @@ public Object put(String key, Object value) {\n \n     @Override\n     public Set<String> keySet() {\n-        Set<String> myKeys = new HashSet<String>(super.keySet());\n-        for (int i = 0; i < TOTAL; i++) {\n-            if (propertyValues[i] != NOT_FOUND) {\n-                myKeys.add(propertyNames[i]);\n+        return new KeySet();\n+    }\n+    \n+    Set<String> backedKeySet() {\n+        return super.keySet();\n+    }\n+    \n+    Set<Map.Entry<String, Object>> backedEntrySet() {\n+        return super.entrySet();\n+    }\n+    \n+    Collection<Object> backedValues() {\n+        return super.values();\n+    }\n+    \n+    abstract class MessageIterator<T> implements Iterator<T>{\n+        Iterator<T> backedIterator;\n+        int current = -1;\n+        int next = -1;\n+        boolean removeAllowed = false;\n+        MessageIterator(Iterator<T> it) {\n+            backedIterator = it;\n+        }\n+        @Override\n+        public final boolean hasNext() {\n+            if (backedIterator.hasNext()) {\n+                return true;\n+            }\n+            if (next == TOTAL) {\n+                return false;\n+            }\n+\n+            for (int i = current+1; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    next = i;\n+                    return true;\n+                }\n             }\n+            next = TOTAL;\n+            return false;\n+        }\n+        @Override\n+        public final T next() {\n+            if (hasNext()) {\n+                if (next == -1) {\n+                    removeAllowed = true;\n+                    return backedIterator.next();\n+                } else {\n+                    current = next;\n+                    removeAllowed = true;\n+                    return getNextFromProperties(next);\n+                }\n+            }\n+            removeAllowed = false;\n+            throw new NoSuchElementException();\n+        }\n+        @Override\n+        public final void remove() {\n+            if (!removeAllowed) {\n+                throw new IllegalStateException();\n+            }\n+            if (current == -1) {\n+                backedIterator.remove();\n+            } else {\n+                propertyValues[current] = NOT_FOUND;\n+            }\n+            removeAllowed = false;\n+        }\n+        abstract T getNextFromProperties(int index);\n+    }\n+    \n+    final class KeyIterator extends MessageIterator<String> {\n+        KeyIterator() {\n+            super(backedKeySet().iterator());\n+        }\n+\n+        @Override\n+        String getNextFromProperties(int index) {\n+            return propertyNames[index];\n+        }\n+        \n+    }\n+\n+    final class EntryIterator extends MessageIterator<Map.Entry<String, Object>> {\n+        EntryIterator() {\n+            super(backedEntrySet().iterator());\n         }\n \n-        return myKeys;\n+        @Override\n+        Map.Entry<String, Object> getNextFromProperties(int index) {\n+            return new AbstractMap.SimpleEntry<String, Object>(propertyNames[index], propertyValues[index]);\n+        }\n+        \n     }\n     \n-    @Override\n-    public Set<Map.Entry<String,Object>> entrySet() {\n-        HashSet<Map.Entry<String,Object>> myEntrySet = new HashSet<Map.Entry<String,Object>>(super.entrySet());\n-        for (int i = 0; i < TOTAL; i++) {\n-            if (propertyValues[i] != NOT_FOUND) {\n-                myEntrySet.add(new AbstractMap.SimpleEntry<String,Object>(propertyNames[i], propertyValues[i]));\n+    final class ValuesIterator extends MessageIterator<Object> {\n+        ValuesIterator() {\n+            super(backedValues().iterator());\n+        }\n+\n+        @Override\n+        Object getNextFromProperties(int index) {\n+            return propertyValues[index];\n+        }\n+        \n+    }\n+    \n+    final class KeySet extends AbstractSet<String> {\n+        public final int size() {\n+            return this.size();\n+        }\n+        public final void clear() {\n+            this.clear();\n+        }\n+        public final Iterator<String> iterator() {\n+            return new KeyIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            return containsKey(o);\n+        }\n+        public final boolean remove(Object key) {\n+            if (containsKey(key)) {\n+                this.remove(key);\n+                return true;\n+            }\n+            return false;\n+        }\n+        public final Spliterator<String> spliterator() {\n+           throw new UnsupportedOperationException();\n+        }\n+        public final void forEach(Consumer<? super String> action) {\n+            if (action == null) {\n+                throw new NullPointerException();\n+            }\n+            for (int i = 0; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    action.accept(propertyNames[i]);\n+                }\n+            }\n+            for (String k : backedKeySet()) {\n+                action.accept(k);\n+            }\n+        }\n+    }\n+    \n+    final class Values extends AbstractCollection<Object> {\n+        public final int size() {\n+            return this.size();\n+        }\n+        public final void clear() {\n+            this.clear();\n+        }\n+        public final Iterator<Object> iterator() {\n+            return new ValuesIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            return containsValue(o);\n+        }\n+        public final Spliterator<Object> spliterator() {\n+           throw new UnsupportedOperationException();\n+        }\n+        public final void forEach(Consumer<? super Object> action) {\n+            if (action == null) {\n+                throw new NullPointerException();\n+            }\n+            for (int i = 0; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    action.accept(propertyValues[i]);\n+                }\n+            }\n+            for (Object v : backedValues()) {\n+                action.accept(v);\n             }\n         }\n-        return myEntrySet;\n     }\n     \n+    final class EntrySet extends AbstractSet<Map.Entry<String, Object>> {\n+        public final int size() {\n+            return this.size();\n+        }\n+        public final void clear() {\n+            this.clear();\n+        }\n+        public final Iterator<Map.Entry<String, Object>> iterator() {\n+            return new EntryIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            if (!(o instanceof Map.Entry)) {\n+                return false;\n+            }\n+            Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;\n+            String key = (String) e.getKey();\n+            \n+            if (containsKey(key)) {", "originalCommit": "909a98a6d28efb9a7f36e5dde2704645f017b97a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 63eeb29114..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -483,19 +526,7 @@ public class MessageImpl extends StringMapImpl implements Message {\n \n     @Override\n     public Set<String> keySet() {\n-        return new KeySet();\n-    }\n-    \n-    Set<String> backedKeySet() {\n-        return super.keySet();\n-    }\n-    \n-    Set<Map.Entry<String, Object>> backedEntrySet() {\n-        return super.entrySet();\n-    }\n-    \n-    Collection<Object> backedValues() {\n-        return super.values();\n+        return keySet != null ? keySet : (keySet = new KeySet());\n     }\n     \n     abstract class MessageIterator<T> implements Iterator<T>{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTMwOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406905309", "bodyText": "Similar to the HashMap for keySet, values and entrySet, you can just have an instance variable that defaults to null and then make a key set, value collection, or entry set and set it if it is null.  You don't need to make one every time it is called.", "author": "jhanders34", "createdAt": "2020-04-10T19:22:07Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -515,13 +725,12 @@ public void putAll(Map<? extends String, ? extends Object> m) {\n     }\n     @Override\n     public Collection<Object> values() {", "originalCommit": "909a98a6d28efb9a7f36e5dde2704645f017b97a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 63eeb29114..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -725,12 +755,12 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n     @Override\n     public Collection<Object> values() {\n-        return new Values();\n+        return values != null ? values : (values = new Values());\n     }\n \n     @Override\n     public Set<Map.Entry<String,Object>> entrySet() {\n-        return new EntrySet();\n+        return entrySet != null ? entrySet : (entrySet = new EntrySet());\n     }\n \n     public Object getAuthorizationPolicy() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzI2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r406913267", "bodyText": "Not sure if this is called a lot, but for performance I think you can have this call putIfAbsent(key, v); instead of doing containsKey and put.", "author": "jhanders34", "createdAt": "2020-04-10T19:44:46Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -297,5 +429,955 @@ void setContextualProperty(String key, Object v) {\n             put(key, v);", "originalCommit": "909a98a6d28efb9a7f36e5dde2704645f017b97a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 63eeb29114..d792ac03a4 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -425,9 +470,7 @@ public class MessageImpl extends StringMapImpl implements Message {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n-        }\n+        putIfAbsent(key, v);\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n"}}, {"oid": "84c7971f88f321ea0a1754d9d1b4b96736a7a253", "url": "https://github.com/OpenLiberty/open-liberty/commit/84c7971f88f321ea0a1754d9d1b4b96736a7a253", "message": "Remove extra comment", "committedDate": "2020-04-16T17:24:47Z", "type": "forcePushed"}, {"oid": "9c2c8d8068030d811bc12387dc5b6174f576450d", "url": "https://github.com/OpenLiberty/open-liberty/commit/9c2c8d8068030d811bc12387dc5b6174f576450d", "message": "Initial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nInitial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nClean up code\n\nignore FFDCs for PhaseInterceptorChain.doIntercept\n\nadd another to the FFDCIgnore list\n\nuse the proper SecurityContext class\n\nFix up PB test failures due to changes\n\nInitial check in of MessageImpl refactoring\n\nRemove dependency on jaxrs 2.1 in core bnd.bnd\n\nAdd code change comments\n\nAddress code review comments\n\nAddress code review comments\n\nAddress code review comments round 2\n\nCode review comments round 3\n\nAddress code review comments and add testing\n\nRemove extra comment", "committedDate": "2020-04-16T19:23:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNTc2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409835760", "bodyText": "Can you remove this line and line 599 since they are now inside a new Liberty start/end block?", "author": "andymc12", "createdAt": "2020-04-16T20:41:56Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/HttpUtils.java", "diffHunk": "@@ -561,24 +591,28 @@ public static String getEndpointAddress(Message m) {\n         Destination d = m.getExchange().getDestination();\n         if (d != null) {\n             if (d instanceof AbstractHTTPDestination) {\n-                HttpServletRequest request = (HttpServletRequest) m.get(AbstractHTTPDestination.HTTP_REQUEST);\n+                //Liberty code change start\n+                HttpServletRequest request = (HttpServletRequest) ((MessageImpl) m).getHttpRequest();\n                 Object property = request != null ? request.getAttribute(\"org.apache.cxf.transport.endpoint.address\") : null;\n                 //Liberty code change start", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3NjY5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r411376699", "bodyText": "The line 599 is still there.", "author": "jhanders34", "createdAt": "2020-04-20T13:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzNTc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/HttpUtils.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/HttpUtils.java\nindex 2a51c9ee34..689ee0c7d9 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/HttpUtils.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/HttpUtils.java\n\n@@ -594,9 +594,7 @@ public final class HttpUtils {\n                 //Liberty code change start\n                 HttpServletRequest request = (HttpServletRequest) ((MessageImpl) m).getHttpRequest();\n                 Object property = request != null ? request.getAttribute(\"org.apache.cxf.transport.endpoint.address\") : null;\n-                //Liberty code change start\n                 address = property != null ? property.toString() : ((AbstractHTTPDestination) d).getEndpointInfo().getAddress();\n-                //Liberty code change end\n             } else {\n                 address = ((MessageImpl) m).containsBasePath() ? (String) ((MessageImpl) m).getBasePath() : d.getAddress().getAddress().getValue();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NTExOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409845118", "bodyText": "no need for the comment here or on line 272, since there is already a comment on line 271.", "author": "andymc12", "createdAt": "2020-04-16T21:00:02Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java", "diffHunk": "@@ -268,7 +267,9 @@ public void invoke(final ServletConfig config,\n \n         copyKnownRequestAttributes(req, inMessage);\n \n-        inMessage.put(HttpServletResponse.class, resp); // Liberty change - reqd for SSE see LibertySseEventSinkImpl\n+        //Liberty code change start", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MDc3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r411370770", "bodyText": "I think Andy wanted you to leave the comment you just removed and to remove the new comments you added.  The one you just removed has extra details that it is good not to lose.", "author": "jhanders34", "createdAt": "2020-04-20T13:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NTExOA=="}], "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\nindex 67e65c3d7c..ba0c66fda8 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java\n\n@@ -267,9 +267,7 @@ public abstract class AbstractHTTPDestination\n \n         copyKnownRequestAttributes(req, inMessage);\n \n-        //Liberty code change start\n         ((MessageImpl) inMessage).setHttpServletResponse(resp); // Liberty change - reqd for SSE see LibertySseEventSinkImpl\n-        //Liberty code change end\n \n         try {\n             incomingObserver.onMessage(inMessage);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NzA0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409847047", "bodyText": "I might be missing something, but I don't think these changes (this line, line 323, lines 327-328) are necessary.  IIUC, the only time that the MessageImpl is used is on line 340 which is already casted to a MessageImpl - and already surrounded by the change tags.", "author": "andymc12", "createdAt": "2020-04-16T21:04:00Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.transports.http.3.2/src/org/apache/cxf/transport/http/AbstractHTTPDestination.java", "diffHunk": "@@ -299,25 +300,32 @@ protected void invokeComplete(final ServletContext context,\n                                   final HttpServletRequest req,\n                                   final HttpServletResponse resp,\n                                   Message m) throws IOException {\n-        ContinuationProvider p = m.get(ContinuationProvider.class);\n+        //Liberty code change start\n+        ContinuationProvider p = (ContinuationProvider) ((MessageImpl) m).getContinuationProvider();\n+        //Liberty code change end\n         if (p != null) {\n             p.complete();\n         }\n     }\n \n     private void copyKnownRequestAttributes(HttpServletRequest request, Message message) {\n-        message.put(SERVICE_REDIRECTION, request.getAttribute(SERVICE_REDIRECTION));\n+        //Liberty code change start\n+        ((MessageImpl) message).setServiceRedirection(request.getAttribute(SERVICE_REDIRECTION));\n+        //Liberty code change end\n     }\n \n-    protected void setupMessage(final Message inMessage,\n+    //Liberty code change start\n+    protected void setupMessage(final Message message,", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODM1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409888353", "bodyText": "inMessage is used after the DelegatingInputStream within the method.", "author": "dettmoney", "createdAt": "2020-04-16T22:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0NzA0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MTMyMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409851323", "bodyText": "If I read this right, we are pulling in the WadlGenerator source file and updating the bnd file just for this change.  I don't think very many customers use Wadl (it's pretty much been replaced by Swagger/OpenAPI).  Are you seeing specific performance improvements in your benchmarks with this change?  If so, I'd probably update the benchmarks to use OpenAPI instead. :) If not, I'd say let's undo this change and the bnd change - it's one less divergence from the Apache CXF repo.", "author": "andymc12", "createdAt": "2020-04-16T21:12:14Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.rs.service.description.3.2/src/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java", "diffHunk": "@@ -0,0 +1,2333 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.cxf.jaxrs.model.wadl;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+import javax.servlet.ServletRequest;\n+import javax.ws.rs.BeanParam;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.Encoded;\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.HeaderParam;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.container.AsyncResponse;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.UriBuilder;\n+import javax.ws.rs.core.UriInfo;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+import javax.xml.namespace.QName;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.ProcessingInstruction;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.common.jaxb.JAXBBeanInfo;\n+import org.apache.cxf.common.jaxb.JAXBContextProxy;\n+import org.apache.cxf.common.jaxb.JAXBUtils;\n+import org.apache.cxf.common.logging.LogUtils;\n+import org.apache.cxf.common.util.PackageUtils;\n+import org.apache.cxf.common.util.PropertyUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.common.util.XmlSchemaPrimitiveUtils;\n+import org.apache.cxf.common.xmlschema.SchemaCollection;\n+import org.apache.cxf.endpoint.Endpoint;\n+import org.apache.cxf.helpers.CastUtils;\n+import org.apache.cxf.helpers.DOMUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.JAXRSServiceImpl;\n+import org.apache.cxf.jaxrs.ext.Oneway;\n+import org.apache.cxf.jaxrs.ext.ResponseStatus;\n+import org.apache.cxf.jaxrs.ext.multipart.Multipart;\n+import org.apache.cxf.jaxrs.ext.xml.XMLName;\n+import org.apache.cxf.jaxrs.ext.xml.XMLSource;\n+import org.apache.cxf.jaxrs.impl.HttpHeadersImpl;\n+import org.apache.cxf.jaxrs.impl.MetadataMap;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.Parameter;\n+import org.apache.cxf.jaxrs.model.ParameterType;\n+import org.apache.cxf.jaxrs.model.ResourceTypes;\n+import org.apache.cxf.jaxrs.model.URITemplate;\n+import org.apache.cxf.jaxrs.model.doc.DocumentationProvider;\n+import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;\n+import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n+import org.apache.cxf.jaxrs.utils.AnnotationUtils;\n+import org.apache.cxf.jaxrs.utils.ExceptionUtils;\n+import org.apache.cxf.jaxrs.utils.InjectionUtils;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.jaxrs.utils.ResourceUtils;\n+import org.apache.cxf.jaxrs.utils.schemas.SchemaHandler;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.message.MessageImpl;\n+import org.apache.cxf.service.model.EndpointInfo;\n+import org.apache.cxf.staxutils.DelegatingXMLStreamWriter;\n+import org.apache.cxf.staxutils.StaxUtils;\n+import org.apache.ws.commons.schema.XmlSchema;\n+import org.apache.ws.commons.schema.constants.Constants;\n+\n+public class WadlGenerator implements ContainerRequestFilter {\n+\n+    public static final String WADL_QUERY = \"_wadl\";\n+    public static final MediaType WADL_TYPE = JAXRSUtils.toMediaType(\"application/vnd.sun.wadl+xml\");\n+    public static final String WADL_NS = \"http://wadl.dev.java.net/2009/02\";\n+    public static final String DEFAULT_WADL_SCHEMA_LOC = \"http://www.w3.org/Submission/wadl/wadl.xsd\";\n+\n+    private static final Logger LOG = LogUtils.getL7dLogger(WadlGenerator.class);\n+    private static final String CONVERT_WADL_RESOURCES_TO_DOM = \"convert.wadl.resources.to.dom\";\n+    private static final String XLS_NS = \"http://www.w3.org/1999/XSL/Transform\";\n+    private static final String JAXB_DEFAULT_NAMESPACE = \"##default\";\n+    private static final String JAXB_DEFAULT_NAME = \"##default\";\n+    private static final String CLASSPATH_PREFIX = \"classpath:\";\n+    private static final String DEFAULT_NS_PREFIX = \"prefix\";\n+    private static final Map<ParameterType, Class<? extends Annotation>> PARAMETER_TYPE_MAP;\n+    static {\n+        PARAMETER_TYPE_MAP = new HashMap<>();\n+        PARAMETER_TYPE_MAP.put(ParameterType.FORM, FormParam.class);\n+        PARAMETER_TYPE_MAP.put(ParameterType.QUERY, QueryParam.class);\n+        PARAMETER_TYPE_MAP.put(ParameterType.HEADER, HeaderParam.class);\n+        PARAMETER_TYPE_MAP.put(ParameterType.PATH, PathParam.class);\n+        PARAMETER_TYPE_MAP.put(ParameterType.MATRIX, MatrixParam.class);\n+    }\n+\n+    private String wadlNamespace;\n+\n+    private boolean singleResourceMultipleMethods = true;\n+    private boolean useSingleSlashResource;\n+    private boolean ignoreForwardSlash;\n+    private boolean linkAnyMediaTypeToXmlSchema;\n+    private boolean useJaxbContextForQnames = true;\n+    private boolean supportCollections = true;\n+    private boolean supportJaxbXmlType = true;\n+    private boolean supportJaxbSubstitutions = true;\n+    private boolean ignoreOverloadedMethods;\n+    private boolean checkAbsolutePathSlash;\n+    private boolean keepRelativeDocLinks;\n+    private boolean usePathParamsToCompareOperations = true;\n+    private boolean incrementNamespacePrefix = true;\n+\n+    private boolean ignoreMessageWriters = true;\n+    private boolean ignoreRequests;\n+    private boolean convertResourcesToDOM = true;\n+    private String wadlSchemaLocation;\n+    private List<String> externalSchemasCache;\n+    private List<URI> externalSchemaLinks;\n+    private Map<String, List<String>> externalQnamesMap;\n+\n+    private final ConcurrentHashMap<String, String> docLocationMap = new ConcurrentHashMap<>();\n+\n+    private ElementQNameResolver resolver;\n+    private List<String> privateAddresses;\n+    private List<String> whiteList;\n+    private String applicationTitle;\n+    private String nsPrefix = DEFAULT_NS_PREFIX;\n+    private MediaType defaultWadlResponseMediaType = MediaType.APPLICATION_XML_TYPE;\n+    private final MediaType defaultRepMediaType = MediaType.WILDCARD_TYPE;\n+    private String stylesheetReference;\n+    private boolean applyStylesheetLocally;\n+    private Bus bus;\n+    private final List<DocumentationProvider> docProviders = new LinkedList<>();\n+    private ResourceIdGenerator idGenerator;\n+    private Map<String, Object> jaxbContextProperties;\n+\n+    public WadlGenerator() {\n+    }\n+\n+    public WadlGenerator(Bus bus) {\n+        this.bus = bus;\n+        this.bus.setProperty(\"wadl.service.description.available\", \"true\");\n+    }\n+\n+    @Override\n+    public void filter(ContainerRequestContext context) {\n+        Message m = JAXRSUtils.getCurrentMessage();\n+        if (m == null) {\n+            return;\n+        }\n+        doFilter(context, m);\n+    }\n+\n+    protected void doFilter(ContainerRequestContext context, Message m) {\n+        //Liberty code change start\n+        if (!\"GET\".equals(((MessageImpl) m).getHttpRequestMethod())) {", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NDA4NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409884085", "bodyText": "What API should I look for in my app to determine what's bringing in the WadlGenerator? I'm not explicitly using wadl (just pinging a simple REST endpoint). The only reason I changed that code is because it's showing up in the profiles as a caller into MessageImpl.get. JAXRSUtils.runContainerRequestFilters -> WadlGenerator.filter -> WadlGenerator.doFilter is the path I observe", "author": "dettmoney", "createdAt": "2020-04-16T22:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MTMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NzczOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r411767739", "bodyText": "That's unfortunate - it looks like we always load and register that provider... In the base CXF code, they only load it if the service.description module is on the class path - and we have it on the class path, so that means that we're executing that filter on every request...\nTo remove it now would probably break zero-migration - so we should probably fix it to be faster if possible.  Thanks", "author": "andymc12", "createdAt": "2020-04-20T23:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1MTMyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4NzU2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409887565", "bodyText": "I was hoping that you wouldn't need to have the getGetters, getSetters, getRemoves, getContains in MessageImpl.  You can build that dynamically using reflection and it will be less fragile and the test can automatically pick up new getters, etc and fail tests when new methods are added.", "author": "jhanders34", "createdAt": "2020-04-16T22:34:57Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/test/com/ibm/ws/jaxrs/test/MessageImplTest.java", "diffHunk": "@@ -0,0 +1,525 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.test;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNull;\n+import static junit.framework.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.message.MessageImpl;\n+import org.apache.cxf.transport.Conduit;\n+import org.apache.cxf.transport.Destination;\n+import org.apache.cxf.transport.MessageObserver;\n+import org.apache.cxf.ws.addressing.EndpointReferenceType;\n+import org.junit.Test;\n+\n+import junit.framework.Assert;\n+\n+\n+public class MessageImplTest {\n+    \n+    @Test\n+    public void testMessageImpl() throws Exception {\n+        MessageImpl message = new MessageImpl();\n+        String[] propertyNames = message.getPropertyNames();", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/test/com/ibm/ws/jaxrs/test/MessageImplTest.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/test/com/ibm/ws/jaxrs/test/MessageImplTest.java\nindex 4e466e0066..4d0452e0d9 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/test/com/ibm/ws/jaxrs/test/MessageImplTest.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/test/com/ibm/ws/jaxrs/test/MessageImplTest.java\n\n@@ -36,27 +36,68 @@ import org.junit.Test;\n \n import junit.framework.Assert;\n \n-\n public class MessageImplTest {\n-    \n+    private static String[] methodSuffixes = new String[] { \"ContentType\", \"ProtocolHeaders\", \"QueryString\", \"HttpRequest\", \"HttpResponse\",\n+                                                            \"PathToMatchSlash\", \"HttpRequestMethod\", \"InterceptorProviders\", \"TemplateParameters\",\n+                                                            \"Accept\", \"ContinuationProvider\", \"Destination\", \"OperationResourceInfoStack\", \"WsdlDescription\", \n+                                                            \"WsdlInterface\", \"WsdlOperation\", \"WsdlPort\", \"WsdlService\", \"RequestUrl\", \"RequestUri\", \n+                                                            \"PathInfo\", \"BasePath\", \"FixedParamOrder\", \"InInterceptors\", \"OutInterceptors\", \"ResponseCode\",\n+                                                            \"Attachments\", \"Encoding\", \"HttpContext\", \"HttpConfig\", \"HttpContextMatchStrategy\", \"HttpBasePath\",\n+                                                            \"AsyncPostDispatch\", \"SecurityContext\", \"AuthorizationPolicy\", \"CertConstraints\", \n+                                                            \"ServiceRedirection\", \"HttpServletResponse\", \"ResourceMethod\", \"OneWayRequest\", \"AsyncResponse\",\n+                                                            \"ThreadContextSwitched\", \"CacheInputProperty\", \"PreviousMessage\", \"ResponseHeadersCopied\", \n+                                                            \"SseEventSink\", \"RequestorRole\", \"PartialResponse\", \"EmptyPartialResponse\", \"EndpointAddress\", \n+                                                            \"InboundMessage\" };\n+                  \n     @Test\n     public void testMessageImpl() throws Exception {\n+        \n         MessageImpl message = new MessageImpl();\n+        assertEquals(\"Need to update MessageImplTest.methodSuffixes array to match MessageImpl.propertyNames\", message.getPropertyNames().length, methodSuffixes.length);\n         String[] propertyNames = message.getPropertyNames();\n-        String[] getters = message.getGetters();\n-        String[] setters = message.getSetters();\n-        String[] removes = message.getRemoves();\n-        String[] contains = message.getContains();\n-        Class<?>[] types = message.getTypes();\n-        \n-        for (int i = 0; i < propertyNames.length; i++) {\n-            exerciseMethods(message, \n-                            propertyNames[i], \n-                            MessageImpl.class.getMethod(getters[i], new Class[] {}), \n-                            MessageImpl.class.getMethod(setters[i], new Class[] {types[i]}),\n-                            removes[i] == null ? null : MessageImpl.class.getMethod(removes[i], new Class[] {}),\n-                            contains[i] == null ? null : MessageImpl.class.getMethod(contains[i], new Class[] {}),\n-                            types[i]);\n+        Method[] allMethods = MessageImpl.class.getMethods();\n+        HashMap<String,Method> getterMap = new HashMap<String,Method>();\n+        HashMap<String,Method> setterMap = new HashMap<String,Method>();\n+        HashMap<String,Method> removeMap = new HashMap<String,Method>();\n+        HashMap<String,Method> containMap = new HashMap<String,Method>();\n+        for (Method m : allMethods) {\n+            String methodName = m.getName();\n+            if (!methodName.endsWith(\"ContextualPropertyKeys\") && !methodName.endsWith(\"ContextualProperty\") &&\n+                            !methodName.endsWith(\"ContentFormats\") && !methodName.endsWith(\"Content\") && \n+                            !methodName.endsWith(\"Exchange\") && !methodName.endsWith(\"Id\") && \n+                            !methodName.endsWith(\"InterceptorChain\") && \n+                            !methodName.endsWith(\"PropertyNames\") && !methodName.endsWith(\"Class\") && \n+                            !methodName.endsWith(\"OrDefault\") && !methodName.endsWith(\"AttachmentMimeType\")) {\n+                if (methodName.startsWith(\"get\") && methodName.length() > 3) {\n+                    getterMap.put(methodName, m);\n+                } else if (methodName.startsWith(\"set\") && methodName.length() > 3) {\n+                    setterMap.put(methodName, m);\n+                } else if (methodName.startsWith(\"remove\") && methodName.length() > 6) {\n+                    removeMap.put(methodName, m);\n+                } else if (methodName.startsWith(\"contains\") && methodName.length() > 8) {\n+                    containMap.put(methodName, m);\n+                }\n+            }\n+        }\n+\n+        for (String methodName : getterMap.keySet()) {\n+            String trimmedMethod = methodName.substring(3);\n+            String setMethodName = \"set\".concat(trimmedMethod);\n+            String removeMethodName = \"remove\".concat(trimmedMethod);\n+            String containsMethodName = \"contains\".concat(trimmedMethod);\n+              \n+            Method getter = getterMap.get(methodName);\n+            Method setter = setterMap.get(setMethodName);\n+            Method remove = removeMap.get(removeMethodName);\n+            Method contains = containMap.get(containsMethodName);\n+            Class<?> type = setter.getParameterTypes()[0];\n+            for (int i = 0; i < methodSuffixes.length; i++) {\n+                String s = methodSuffixes[i];\n+                if (s.equals(trimmedMethod)) {\n+                    exerciseMethods(message, propertyNames[i], getter, setter, remove, contains, type);\n+                    break;\n+                }\n+            }\n         }\n     }    \n  \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDg3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409894870", "bodyText": "This should be return e.equals(entry);", "author": "jhanders34", "createdAt": "2020-04-16T22:54:30Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -293,9 +470,965 @@ public void resetContextCache() {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n+        putIfAbsent(key, v);\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return (Map) getFromPropertyArray(protoHeaders);\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override\n+    public Object get(Object key) {\n+        return get((String) key);\n+    }\n+\n+    public Object get(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n+        }\n+        \n+        return super.get(key);\n+    }\n+\n+    @Override\n+    public Object put(String key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n+        }\n+\n+        return super.put(key, value);\n+    }\n+\n+    @Override\n+    public Set<String> keySet() {\n+        return keySet != null ? keySet : (keySet = new KeySet());\n+    }\n+    \n+    abstract class MessageIterator<T> implements Iterator<T>{\n+        Iterator<T> backedIterator;\n+        int current = -1;\n+        int next = -1;\n+        boolean removeAllowed = false;\n+        MessageIterator(Iterator<T> it) {\n+            backedIterator = it;\n+        }\n+        @Override\n+        public final boolean hasNext() {\n+            if (backedIterator.hasNext()) {\n+                return true;\n+            }\n+            if (next == TOTAL) {\n+                return false;\n+            }\n+\n+            for (next = current+1; next < TOTAL; next++) {\n+                if (propertyValues[next] != NOT_FOUND) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+        @Override\n+        public final T next() {\n+            if (hasNext()) {\n+                if (next == -1) {\n+                    removeAllowed = true;\n+                    return backedIterator.next();\n+                } else {\n+                    current = next;\n+                    removeAllowed = true;\n+                    return getNextFromProperties(next);\n+                }\n+            }\n+            removeAllowed = false;\n+            throw new NoSuchElementException();\n+        }\n+        @Override\n+        public final void remove() {\n+            if (!removeAllowed) {\n+                throw new IllegalStateException();\n+            }\n+            if (current == -1) {\n+                backedIterator.remove();\n+            } else {\n+                propertyValues[current] = NOT_FOUND;\n+            }\n+            removeAllowed = false;\n+        }\n+        abstract T getNextFromProperties(int index);\n+    }\n+    \n+    final class KeyIterator extends MessageIterator<String> {\n+        KeyIterator() {\n+            super(MessageImpl.super.keySet().iterator());\n+        }\n+\n+        @Override\n+        String getNextFromProperties(int index) {\n+            return propertyNames[index];\n+        }\n+        \n+    }\n+\n+    final class EntryIterator extends MessageIterator<Map.Entry<String, Object>> {\n+        EntryIterator() {\n+            super(MessageImpl.super.entrySet().iterator());\n+        }\n+\n+        @Override\n+        Map.Entry<String, Object> getNextFromProperties(int index) {\n+            return new AbstractMap.SimpleEntry<String, Object>(propertyNames[index], propertyValues[index]);\n+        }\n+        \n+    }\n+    \n+    final class ValuesIterator extends MessageIterator<Object> {\n+        ValuesIterator() {\n+            super(MessageImpl.super.values().iterator());\n+        }\n+\n+        @Override\n+        Object getNextFromProperties(int index) {\n+            return propertyValues[index];\n+        }\n+        \n+    }\n+    \n+    final class KeySet extends AbstractSet<String> {\n+        public final int size() {\n+            return MessageImpl.this.size();\n+        }\n+        public final void clear() {\n+            MessageImpl.this.clear();\n+        }\n+        public final Iterator<String> iterator() {\n+            return new KeyIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            return containsKey(o);\n+        }\n+        public final boolean remove(Object key) {\n+            if (containsKey(key)) {\n+                MessageImpl.this.remove(key);\n+                return true;\n+            }\n+            return false;\n+        }\n+        public final Spliterator<String> spliterator() {\n+           throw new UnsupportedOperationException();\n+        }\n+        public final void forEach(Consumer<? super String> action) {\n+            if (action == null) {\n+                throw new NullPointerException();\n+            }\n+            for (int i = 0; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    action.accept(propertyNames[i]);\n+                }\n+            }\n+            for (String k : MessageImpl.super.keySet()) {\n+                action.accept(k);\n+            }\n+        }\n+    }\n+    \n+    final class Values extends AbstractCollection<Object> {\n+        public final int size() {\n+            return MessageImpl.this.size();\n+        }\n+        public final void clear() {\n+            MessageImpl.this.clear();\n+        }\n+        public final Iterator<Object> iterator() {\n+            return new ValuesIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            return containsValue(o);\n+        }\n+        public final Spliterator<Object> spliterator() {\n+           throw new UnsupportedOperationException();\n+        }\n+        public final void forEach(Consumer<? super Object> action) {\n+            if (action == null) {\n+                throw new NullPointerException();\n+            }\n+            for (int i = 0; i < TOTAL; i++) {\n+                if (propertyValues[i] != NOT_FOUND) {\n+                    action.accept(propertyValues[i]);\n+                }\n+            }\n+            for (Object v : MessageImpl.super.values()) {\n+                action.accept(v);\n+            }\n+        }\n+    }\n+    \n+    final class EntrySet extends AbstractSet<Map.Entry<String, Object>> {\n+        public final int size() {\n+            return MessageImpl.this.size();\n+        }\n+        public final void clear() {\n+            MessageImpl.this.clear();\n+        }\n+        public final Iterator<Map.Entry<String, Object>> iterator() {\n+            return new EntryIterator(); \n+        }\n+        public final boolean contains(Object o) {\n+            if (!(o instanceof Map.Entry)) {\n+                return false;\n+            }\n+            Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;\n+            String key = (String) e.getKey();\n+            \n+            Object val = getOrDefault(key, NOT_FOUND);\n+            if (val != NOT_FOUND) {\n+                AbstractMap.SimpleEntry<?,?> entry = new AbstractMap.SimpleEntry<>(key, val);\n+                return entry.equals(e);", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex d792ac03a4..efb369d73f 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -524,11 +485,13 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.put(key, value);\n     }\n \n+    @Trivial\n     @Override\n     public Set<String> keySet() {\n         return keySet != null ? keySet : (keySet = new KeySet());\n     }\n     \n+    @Trivial\n     abstract class MessageIterator<T> implements Iterator<T>{\n         Iterator<T> backedIterator;\n         int current = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NjQzMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r409896432", "bodyText": "This should have a conditional in it that says\nif (next > current) {\n    return true;\n}\n\nThis handles the hasNext(), hasNext() being called back to back without calling next.  No reason to calculate next again if we already did it.", "author": "jhanders34", "createdAt": "2020-04-16T22:58:50Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -293,9 +470,965 @@ public void resetContextCache() {\n     }\n \n     void setContextualProperty(String key, Object v) {\n-        if (!containsKey(key)) {\n-            put(key, v);\n+        putIfAbsent(key, v);\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public Map getProtocolHeaders() {\n+        return (Map) getFromPropertyArray(protoHeaders);\n+    }\n+    \n+    @SuppressWarnings(\"rawtypes\")\n+    public void setProtocolHeaders(Map p) {\n+        propertyValues[protoHeaders] = p;\n+    }\n+    \n+    @Override\n+    public Object remove(Object key) {\n+        return remove((String) key);\n+    }\n+    \n+    public Object remove(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = NOT_FOUND;\n+            return ret;\n+        }\n+        return super.remove(key);\n+    }\n+    \n+    @Override\n+    public Object get(Object key) {\n+        return get((String) key);\n+    }\n+\n+    public Object get(String key) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            return getFromPropertyArray(index);\n+        }\n+        \n+        return super.get(key);\n+    }\n+\n+    @Override\n+    public Object put(String key, Object value) {\n+        Integer index = KEYMAP.getOrDefault(key, KEY_NOT_FOUND);\n+        if (index != KEY_NOT_FOUND) {\n+            Object ret = getFromPropertyArray(index);\n+            propertyValues[index] = value;\n+            return ret;\n+        }\n+\n+        return super.put(key, value);\n+    }\n+\n+    @Override\n+    public Set<String> keySet() {\n+        return keySet != null ? keySet : (keySet = new KeySet());\n+    }\n+    \n+    abstract class MessageIterator<T> implements Iterator<T>{\n+        Iterator<T> backedIterator;\n+        int current = -1;\n+        int next = -1;\n+        boolean removeAllowed = false;\n+        MessageIterator(Iterator<T> it) {\n+            backedIterator = it;\n+        }\n+        @Override\n+        public final boolean hasNext() {\n+            if (backedIterator.hasNext()) {\n+                return true;\n+            }\n+            if (next == TOTAL) {\n+                return false;\n+            }\n+", "originalCommit": "9c2c8d8068030d811bc12387dc5b6174f576450d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex d792ac03a4..efb369d73f 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -524,11 +485,13 @@ public class MessageImpl extends StringMapImpl implements Message {\n         return super.put(key, value);\n     }\n \n+    @Trivial\n     @Override\n     public Set<String> keySet() {\n         return keySet != null ? keySet : (keySet = new KeySet());\n     }\n     \n+    @Trivial\n     abstract class MessageIterator<T> implements Iterator<T>{\n         Iterator<T> backedIterator;\n         int current = -1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczMTMxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r411731317", "bodyText": "This should be final", "author": "jhanders34", "createdAt": "2020-04-20T22:22:03Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -152,11 +152,12 @@\n     private Collection<Object> values = null;\n     private Set<String> keySet = null;\n     private Set<Map.Entry<String, Object>> entrySet = null;\n-    \n+    private static Object[] NOT_SET_ARRAY = new Object[TOTAL];", "originalCommit": "13de13febc841ef93d6d00a72ad73a0af3155b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzU4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11560#discussion_r411753580", "bodyText": "done", "author": "dettmoney", "createdAt": "2020-04-20T23:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczMTMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "chunk": "diff --git a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\nindex 1acaa89174..efb369d73f 100644\n--- a/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n+++ b/dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java\n\n@@ -152,7 +152,7 @@ public class MessageImpl extends StringMapImpl implements Message {\n     private Collection<Object> values = null;\n     private Set<String> keySet = null;\n     private Set<Map.Entry<String, Object>> entrySet = null;\n-    private static Object[] NOT_SET_ARRAY = new Object[TOTAL];\n+    private static final Object[] NOT_SET_ARRAY = new Object[TOTAL];\n     static {\n         Map<String, Integer> keymap = new HashMap<String, Integer>(TOTAL);\n         for (int i = 0; i < TOTAL; i++) {\n"}}, {"oid": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "url": "https://github.com/OpenLiberty/open-liberty/commit/f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "message": "Initial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nInitial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nClean up code\n\nignore FFDCs for PhaseInterceptorChain.doIntercept\n\nadd another to the FFDCIgnore list\n\nuse the proper SecurityContext class\n\nFix up PB test failures due to changes\n\nInitial check in of MessageImpl refactoring\n\nRemove dependency on jaxrs 2.1 in core bnd.bnd\n\nAdd code change comments\n\nAddress code review comments\n\nAddress code review comments\n\nAddress code review comments round 2\n\nCode review comments round 3\n\nAddress code review comments and add testing\n\nRemove extra comment\n\nAddress code review comments\n\nAddress code review comment and add @Trivial for test failure\n\nSystem.arraycopy during MessageImpl constructor\n\nMake it final", "committedDate": "2020-04-21T14:28:30Z", "type": "commit"}, {"oid": "f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "url": "https://github.com/OpenLiberty/open-liberty/commit/f9cdd9d131c2b75cd3739583c266dcb0e5140e62", "message": "Initial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nInitial check in of MessageImpl refactoring\n\nback out mp client change as it depends on pre-jaxrs2.1 code\n\nAdd all pingperf props as fields\n\nClean up code\n\nignore FFDCs for PhaseInterceptorChain.doIntercept\n\nadd another to the FFDCIgnore list\n\nuse the proper SecurityContext class\n\nFix up PB test failures due to changes\n\nInitial check in of MessageImpl refactoring\n\nRemove dependency on jaxrs 2.1 in core bnd.bnd\n\nAdd code change comments\n\nAddress code review comments\n\nAddress code review comments\n\nAddress code review comments round 2\n\nCode review comments round 3\n\nAddress code review comments and add testing\n\nRemove extra comment\n\nAddress code review comments\n\nAddress code review comment and add @Trivial for test failure\n\nSystem.arraycopy during MessageImpl constructor\n\nMake it final", "committedDate": "2020-04-21T14:28:30Z", "type": "forcePushed"}]}