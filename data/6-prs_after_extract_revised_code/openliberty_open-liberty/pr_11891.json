{"pr_number": 11891, "pr_title": "Upgrade to Testcontainers 1.14.0", "pr_createdAt": "2020-04-22T16:39:53Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11891", "timeline": [{"oid": "a29351a56f44d584cf6fe188f678084df15a4f16", "url": "https://github.com/OpenLiberty/open-liberty/commit/a29351a56f44d584cf6fe188f678084df15a4f16", "message": "Upgrade to Testcontainers 1.14.0", "committedDate": "2020-04-23T20:28:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0Njg1NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11891#discussion_r414746854", "bodyText": "The oracle container uses ports 1521, and 5500.\nThis regression will also affect fattest.databases.  You'll need to expose these ports here as well:\n\n  \n    \n      open-liberty/dev/fattest.databases/src/componenttest/topology/database/container/DatabaseContainerFactory.java\n    \n    \n        Lines 122 to 124\n      in\n      dfd6463\n    \n    \n    \n    \n\n        \n          \n           case Oracle:          \t \n        \n\n        \n          \n           \tcont = (JdbcDatabaseContainer<?>) clazz.getConstructor(String.class).newInstance(\"kyleaure/oracle-18.4.0-xe-prebuilt:1.0\"); \n        \n\n        \n          \n               break;", "author": "KyleAure", "createdAt": "2020-04-24T17:35:25Z", "path": "dev/com.ibm.ws.jdbc_fat_oracle/fat/src/com/ibm/ws/jdbc/fat/oracle/FATSuite.java", "diffHunk": "@@ -30,83 +30,83 @@\n import oracle.jdbc.pool.OracleDataSource;\n \n @RunWith(Suite.class)\n-@SuiteClasses({\n-                OracleTest.class,\n-                OracleTraceTest.class,\n-                OracleUCPTest.class\n-})\n+@SuiteClasses({ OracleTest.class, OracleTraceTest.class, OracleUCPTest.class })\n public class FATSuite {\n \n-    //TODO replace this container with the official oracle-xe container if/when it is available without a license\n-    static OracleContainer oracle = new OracleContainer(\"kyleaure/oracle-18.4.0-xe-prebuilt:1.0\").withLogConsumer(FATSuite::log);\n-\n-    private static void log(OutputFrame frame) {\n-        String msg = frame.getUtf8String();\n-        if (msg.endsWith(\"\\n\"))\n-            msg = msg.substring(0, msg.length() - 1);\n-        Log.info(FATSuite.class, \"oracle\", msg);\n-    }\n-\n-    @BeforeClass\n-    public static void beforeSuite() throws Exception {\n-        //Allows local tests to switch between using a local docker client, to using a remote docker client.\n-        ExternalTestServiceDockerClientStrategy.clearTestcontainersConfig();\n-\n-        oracle.start();\n-    }\n-\n-    @AfterClass\n-    public static void afterSuite() {\n-        oracle.stop();\n-    }\n-\n-    public static void initDatabaseTables() throws SQLException {\n-        Properties connProps = new Properties();\n-        // This property prevents \"ORA-01882: timezone region not found\" errors due to the Oracle DB not understanding\n-        // some time zones(specifically those used by our RHEL 6 test systems).\n-        connProps.put(\"oracle.jdbc.timezoneAsRegion\", \"false\");\n-\n-        OracleDataSource ds = new OracleDataSource();\n-        ds.setConnectionProperties(connProps);\n-        ds.setUser(oracle.getUsername());\n-        ds.setPassword(oracle.getPassword());\n-        ds.setURL(oracle.getJdbcUrl());\n-\n-        try (Connection conn = ds.getConnection()) {\n-            Statement stmt = conn.createStatement();\n-\n-            //Create MYTABLE for OracleTest.class and OracleTraceTest.class\n-            try {\n-                stmt.execute(\"DROP TABLE MYTABLE\");\n-            } catch (SQLException x) {\n-                // probably didn't exist\n-            }\n-            stmt.execute(\"CREATE TABLE MYTABLE (ID NUMBER NOT NULL PRIMARY KEY, STRVAL NVARCHAR2(40))\");\n-\n-            //Create CONCOUNT for OracleTest.class\n-            try {\n-                stmt.execute(\"DROP TABLE CONCOUNT\");\n-            } catch (SQLException x) {\n-                // probably didn't exist\n-            }\n-            stmt.execute(\"CREATE TABLE CONCOUNT (NUMCONNECTIONS NUMBER NOT NULL)\");\n-            stmt.execute(\"INSERT INTO CONCOUNT VALUES(0)\");\n-\n-            //Create COLORTABLE for OracleUCPTest.class\n-            try {\n-                stmt.execute(\"DROP TABLE COLORTABLE\");\n-            } catch (SQLException x) {\n-                // probably didn't exist\n-            }\n-            stmt.execute(\"CREATE TABLE COLORTABLE (ID NUMBER NOT NULL PRIMARY KEY, COLOR NVARCHAR2(40))\");\n-            PreparedStatement ps = conn.prepareStatement(\"INSERT INTO COLORTABLE VALUES(?,?)\");\n-            ps.setInt(1, 1);\n-            ps.setString(2, \"maroon\");\n-            ps.executeUpdate();\n-\n-            //Close statements\n-            ps.close();\n-            stmt.close();\n-        }\n-    }\n+\t// TODO replace this container with the official oracle-xe container if/when it is available without a license\n+\tstatic OracleContainer oracle = new OracleContainer(\"kyleaure/oracle-18.4.0-xe-prebuilt:1.0\")\n+\t\t\t.withExposedPorts(1521, 8080) // need to manually expose ports due to regression in 1.14.0", "originalCommit": "a29351a56f44d584cf6fe188f678084df15a4f16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1aa8882e93c10a1494d0dc351acdf0df1cf49b19", "chunk": "diff --git a/dev/com.ibm.ws.jdbc_fat_oracle/fat/src/com/ibm/ws/jdbc/fat/oracle/FATSuite.java b/dev/com.ibm.ws.jdbc_fat_oracle/fat/src/com/ibm/ws/jdbc/fat/oracle/FATSuite.java\nindex fd76734fe6..630a6e10e9 100755\n--- a/dev/com.ibm.ws.jdbc_fat_oracle/fat/src/com/ibm/ws/jdbc/fat/oracle/FATSuite.java\n+++ b/dev/com.ibm.ws.jdbc_fat_oracle/fat/src/com/ibm/ws/jdbc/fat/oracle/FATSuite.java\n\n@@ -35,7 +35,7 @@ public class FATSuite {\n \n \t// TODO replace this container with the official oracle-xe container if/when it is available without a license\n \tstatic OracleContainer oracle = new OracleContainer(\"kyleaure/oracle-18.4.0-xe-prebuilt:1.0\")\n-\t\t\t.withExposedPorts(1521, 8080) // need to manually expose ports due to regression in 1.14.0\n+\t\t\t.withExposedPorts(1521, 5500, 8080) // need to manually expose ports due to regression in 1.14.0\n \t\t\t.withLogConsumer(FATSuite::log);\n \n \tprivate static void log(OutputFrame frame) {\n"}}, {"oid": "1aa8882e93c10a1494d0dc351acdf0df1cf49b19", "url": "https://github.com/OpenLiberty/open-liberty/commit/1aa8882e93c10a1494d0dc351acdf0df1cf49b19", "message": "Upgrade to Testcontainers 1.14.0", "committedDate": "2020-04-24T17:53:50Z", "type": "commit"}, {"oid": "1aa8882e93c10a1494d0dc351acdf0df1cf49b19", "url": "https://github.com/OpenLiberty/open-liberty/commit/1aa8882e93c10a1494d0dc351acdf0df1cf49b19", "message": "Upgrade to Testcontainers 1.14.0", "committedDate": "2020-04-24T17:53:50Z", "type": "forcePushed"}]}