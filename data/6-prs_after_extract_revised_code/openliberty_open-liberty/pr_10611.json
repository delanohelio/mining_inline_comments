{"pr_number": 10611, "pr_title": "Revert commit for new implementation of omitting JSON fields", "pr_createdAt": "2020-01-28T15:51:26Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10611", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDQ3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372080474", "bodyText": "this doesn't check to see if it's the first field... if host and type are omitted, this would cause problem", "author": "donbourne", "createdAt": "2020-01-28T21:55:23Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Message);\n+        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Message);\n+            else\n+                sb.append(unchangingFieldsJson_Message.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Trace(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Trace = null;\n+        }\n         if (unchangingFieldsJson_Trace == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Trace = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Trace);\n+        if (!unchangingFieldsJson_Trace.isEmpty() && unchangingFieldsJson_Trace != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Trace);\n+            else\n+                sb.append(unchangingFieldsJson_Trace.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_AccessLog(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_AccessLog = null;\n+        }\n         if (unchangingFieldsJson_AccessLog == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AccessLogData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AccessLogData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, AccessLogData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_AccessLog = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_AccessLog);\n+        if (!unchangingFieldsJson_AccessLog.isEmpty() && unchangingFieldsJson_AccessLog != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_AccessLog);\n+            else\n+                sb.append(unchangingFieldsJson_AccessLog.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_FFDC(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_FFDC = null;\n+        }\n         if (unchangingFieldsJson_FFDC == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, FFDCData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, FFDCData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, FFDCData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_FFDC = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_FFDC);\n+        if (!unchangingFieldsJson_FFDC.isEmpty() && unchangingFieldsJson_FFDC != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_FFDC);\n+            else\n+                sb.append(unchangingFieldsJson_FFDC.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Audit(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Audit = null;\n+        }\n         if (unchangingFieldsJson_Audit == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AuditData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AuditData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);", "originalCommit": "7314aa20de6f06c198885a5494232e11b54a671f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex f098027c8e..c19171346b 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n\n@@ -237,7 +237,7 @@ public class CollectorJsonHelpers {\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+        if (unchangingFieldsJson_Message != null && !unchangingFieldsJson_Message.isEmpty()) {\n             if (sb.length() > 1)\n                 sb.append(unchangingFieldsJson_Message);\n             else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODAxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372498010", "bodyText": "this code doesn't check to see if host, userdir, or servername are supposed to be omitted", "author": "donbourne", "createdAt": "2020-01-29T16:40:50Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);", "originalCommit": "7314aa20de6f06c198885a5494232e11b54a671f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex f098027c8e..c19171346b 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n\n@@ -237,7 +237,7 @@ public class CollectorJsonHelpers {\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+        if (unchangingFieldsJson_Message != null && !unchangingFieldsJson_Message.isEmpty()) {\n             if (sb.length() > 1)\n                 sb.append(unchangingFieldsJson_Message);\n             else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUwMDg0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372500844", "bodyText": "this is a fair bit more expensive perf-wise than just adding a single field.  need to not have to recompose this on every event.", "author": "donbourne", "createdAt": "2020-01-29T16:45:38Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -467,11 +518,18 @@ protected static StringBuilder startGCJson1_1(String hostName, String wlpUserDir\n     protected static StringBuilder startAuditJsonFields(String hostName, String wlpUserDir, String serverName) {\n         StringBuilder sb = new StringBuilder(2048);\n \n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            startAuditJsonFields = null;\n+        }\n         if (startAuditJsonFields != null) {\n             sb.append(startAuditJsonFields);\n         } else {\n             sb.append(\"{\");\n-            sb.append(AUDIT_JSON_TYPE_FIELD);\n+            if (!(AuditData.getTypeKeyJSON().equals(OMIT_FIELDS_STRING))) {", "originalCommit": "7314aa20de6f06c198885a5494232e11b54a671f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8b1df8d0c2819f44518b3363d72d3a66730c432", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex f098027c8e..30655aa12b 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n\n@@ -518,18 +467,11 @@ public class CollectorJsonHelpers {\n     protected static StringBuilder startAuditJsonFields(String hostName, String wlpUserDir, String serverName) {\n         StringBuilder sb = new StringBuilder(2048);\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n-            startAuditJsonFields = null;\n-        }\n         if (startAuditJsonFields != null) {\n             sb.append(startAuditJsonFields);\n         } else {\n             sb.append(\"{\");\n-            if (!(AuditData.getTypeKeyJSON().equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(AuditData.getTypeKeyJSON());\n-                sb.append(AUDIT_JSON_TYPE_FIELD);\n-            }\n+            sb.append(AUDIT_JSON_TYPE_FIELD);\n             addUnchangingFieldsJSON_Audit(sb, hostName, wlpUserDir, serverName);\n             startAuditJsonFields = sb.toString();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNDA0MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372514041", "bodyText": "was this comment change and change below intentional?  perhaps something related to the revert?", "author": "donbourne", "createdAt": "2020-01-29T17:08:50Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -392,13 +396,10 @@ public synchronized void update(LogProviderConfig config) {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' OR if consoleFormat is neither basic nor json (default to basic)\n-         * - ensure that we are not connecting conduits/bufferManagers to the handler\n+         * If messageFormat has been configured to 'basic' - ensure that we are not connecting conduits/bufferManagers to the handler", "originalCommit": "7314aa20de6f06c198885a5494232e11b54a671f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex fe0a91f8c7..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -396,10 +397,13 @@ public class BaseTraceService implements TrService {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' - ensure that we are not connecting conduits/bufferManagers to the handler\n+         * If messageFormat has been configured to 'basic' OR if messageFormat is neither basic nor json (default to basic)\n+         * - ensure that we are not connecting conduits/bufferManagers to the handler\n          * otherwise we would have the undesired effect of writing both 'basic' and 'json' formatted message events\n          */\n-        if (messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT)) {\n+        if (messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT) ||\n+            (!messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT) &&\n+             !messageFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT))) {\n             if (messageLogHandler != null) {\n                 messageLogHandler.setFormat(LoggingConstants.DEFAULT_MESSAGE_FORMAT);\n                 messageLogHandler.modified(new ArrayList<String>());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxODk3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372518971", "bodyText": "could changes be simplified?\neg. put above line 506:\npair = pair.trim();\nif (pair.endsWith(\":\"))\n    pair = pair + OMIT_FIELDS_STRING;", "author": "donbourne", "createdAt": "2020-01-29T17:17:49Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -483,12 +501,15 @@ public static void applyJsonFields(String value) {\n         List<String> AuditList = Arrays.asList(AuditData.NAMES1_1);\n \n         String[] keyValuePairs = value.split(\",\"); //split the string to create key-value pairs\n-\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n-            String[] entry = pair.split(\":\"); //split the pairs to get key and value\n+            String[] entry = pair.trim().split(\":\"); //split the pairs to get key and value", "originalCommit": "7314aa20de6f06c198885a5494232e11b54a671f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex fe0a91f8c7..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -503,13 +508,15 @@ public class BaseTraceService implements TrService {\n         String[] keyValuePairs = value.split(\",\"); //split the string to create key-value pairs\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n-            String[] entry = pair.trim().split(\":\"); //split the pairs to get key and value\n-            entry[0] = entry[0].trim();\n+            pair = pair.trim();\n+            if (pair.endsWith(\":\") && omitJsonFields) //omitJsonFields beta guard\n+                pair = pair + OMIT_FIELDS_STRING;\n \n-            if ((entry.length == 2 && !pair.trim().endsWith(\":\")) || (pair.trim().endsWith(\":\") && entry.length == 1 && omitJsonFields)) {//if the mapped value is intended for all event types\n-                if (pair.trim().endsWith(\":\"))\n-                    entry = new String[] { entry[0], OMIT_FIELDS_STRING };\n+            String[] entry = pair.split(\":\"); //split the pairs to get key and value\n+            entry[0] = entry[0].trim();\n \n+            //!pair.endsWith(\":\") for beta guard for entry length 2 because ie. message:type: will rename message to type\n+            if (entry.length == 2 && !pair.endsWith(\":\")) {//if the mapped value is intended for all event types\n                 entry[1] = entry[1].trim();\n                 //add properties to all the hashmaps and trim whitespaces\n                 if (LogTraceList.contains(entry[0])) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzQxOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373623419", "bodyText": "with change above (on lines 512-514) pair will never end with \":\"", "author": "donbourne", "createdAt": "2020-01-31T18:34:44Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -529,223 +509,95 @@ public static void applyJsonFields(String value, Boolean omitJsonFields) {\n         String[] keyValuePairs = value.split(\",\"); //split the string to create key-value pairs\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n-            String[] entry = pair.trim().split(\":\"); //split the pairs to get key and value\n-            entry[0] = entry[0].trim();\n+            pair = pair.trim();\n+            if (pair.endsWith(\":\"))\n+                pair = pair + OMIT_FIELDS_STRING;\n \n-            //env var omitJsonFields\n-            if (pair.trim().endsWith(\":\") && omitJsonFields) { //FIND FIELDS THAT NEED TO BE OMITTED\n-                Set<String> omitFieldsSet = new HashSet<>();\n-                if (entry.length == 1) { //omit fields for all event types (just a field name)\n-                    omitFieldsSet.add(entry[0]);\n+            String[] entry = pair.split(\":\"); //split the pairs to get key and value\n+            entry[0] = entry[0].trim();\n \n-                    if (LogTraceList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.MESSAGES_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.MESSAGES_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                        if (omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.TRACE_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.TRACE_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (FFDCList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.FFDC_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.FFDC_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.FFDC_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (AccessLogList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.ACCESS_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.ACCESS_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.ACCESS_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (AuditList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.AUDIT_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.AUDIT_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.AUDIT_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    //extensions\n-                    if (entry[0].startsWith(\"ext_\")) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.MESSAGES_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.MESSAGES_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                        if (omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.TRACE_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.TRACE_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (!valueFound) {\n-                        //if the value does not exist in any of the known keys, give a warning\n-                        Tr.warning(tc, \"JSON_FIELDS_NO_MATCH\");\n-                    }\n-                    valueFound = false;//reset valueFound boolean\n-\n-                } else if (entry.length == 2) { //omit fields for specific event types (event type and field name)\n-                    omitFieldsSet.add(entry[1]);\n-                    entry[1] = entry[1].trim();\n-\n-                    if (CollectorConstants.MESSAGES_CONFIG_VAL.equals(entry[0])) {\n-                        if (LogTraceList.contains(entry[1]) || entry[1].startsWith(\"ext_\")) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.TRACE_CONFIG_VAL.equals(entry[0])) {\n-                        if (LogTraceList.contains(entry[1]) || entry[1].startsWith(\"ext_\")) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.FFDC_CONFIG_VAL.equals(entry[0])) {\n-                        if (FFDCList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.ACCESS_CONFIG_VAL.equals(entry[0])) {\n-                        if (AccessLogList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.AUDIT_CONFIG_VAL.equals(entry[0])) {\n-                        if (AuditList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else {\n-                        isInvalidField = true;\n-                        Tr.warning(tc, \"JSON_FIELDS_INCORRECT_EVENT_TYPE\");\n-                    }\n-                    if (!valueFound && !isInvalidField) {\n-                        //if the value does not exist in any of the known keys, give a warning\n-                        Tr.warning(tc, \"JSON_FIELDS_NO_MATCH\");\n-                    }\n-                    valueFound = false;\n-                    isInvalidField = false;\n+            if ((entry.length == 2 && !pair.trim().endsWith(\":\")) || (pair.trim().endsWith(\":\") && entry.length == 1 && omitJsonFields)) {//if the mapped value is intended for all event types", "originalCommit": "11cdd49aa6217a80b8d36cdd32db172ad87060ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex 72e47063c4..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -510,13 +509,14 @@ public class BaseTraceService implements TrService {\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n             pair = pair.trim();\n-            if (pair.endsWith(\":\"))\n+            if (pair.endsWith(\":\") && omitJsonFields) //omitJsonFields beta guard\n                 pair = pair + OMIT_FIELDS_STRING;\n \n             String[] entry = pair.split(\":\"); //split the pairs to get key and value\n             entry[0] = entry[0].trim();\n \n-            if ((entry.length == 2 && !pair.trim().endsWith(\":\")) || (pair.trim().endsWith(\":\") && entry.length == 1 && omitJsonFields)) {//if the mapped value is intended for all event types\n+            //!pair.endsWith(\":\") for beta guard for entry length 2 because ie. message:type: will rename message to type\n+            if (entry.length == 2 && !pair.endsWith(\":\")) {//if the mapped value is intended for all event types\n                 entry[1] = entry[1].trim();\n                 //add properties to all the hashmaps and trim whitespaces\n                 if (LogTraceList.contains(entry[0])) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NjUyMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373796523", "bodyText": "OR if messageFormat -> OR if consoleFormat", "author": "donbourne", "createdAt": "2020-02-01T19:09:30Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -392,7 +396,7 @@ public synchronized void update(LogProviderConfig config) {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' OR if consoleFormat is neither basic nor json (default to basic)\n+         * If messageFormat has been configured to 'basic' OR if messageFormat is neither basic nor json (default to basic)", "originalCommit": "c52b7dc120e5b468819fa1f3a89db85495f60798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODE4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374138188", "bodyText": "This should have been messageFormat in the first commit instead of consoleFormat", "author": "ellen-lau", "createdAt": "2020-02-03T14:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NjUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex c69eb5f34a..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -401,8 +402,8 @@ public class BaseTraceService implements TrService {\n          * otherwise we would have the undesired effect of writing both 'basic' and 'json' formatted message events\n          */\n         if (messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT) ||\n-            (!consoleFormat.toLowerCase().equals(LoggingConstants.DEFAULT_CONSOLE_FORMAT) &&\n-             !consoleFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT))) {\n+            (!messageFormat.toLowerCase().equals(LoggingConstants.DEFAULT_MESSAGE_FORMAT) &&\n+             !messageFormat.toLowerCase().equals(LoggingConstants.JSON_FORMAT))) {\n             if (messageLogHandler != null) {\n                 messageLogHandler.setFormat(LoggingConstants.DEFAULT_MESSAGE_FORMAT);\n                 messageLogHandler.modified(new ArrayList<String>());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5Njg2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373796867", "bodyText": "this would make logging requests received during the update use the json field name defaults rather than their values from before the update happened.  Aliases need to go from their pre-update value to their post-update value without momentarily being set to their original value.", "author": "donbourne", "createdAt": "2020-02-01T19:16:05Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -464,13 +468,33 @@ public synchronized void update(LogProviderConfig config) {\n         }\n     }\n \n-    public static void applyJsonFields(String value) {\n-        if (value == null || value == \"\" || value.isEmpty()) {\n+    public static boolean getIsServerConfigUpdate() {\n+        return isServerConfigUpdate;\n+    }\n+\n+    public static void applyJsonFields(String value, Boolean omitJsonFields) {\n+\n+        if (!isServerConfigSetup)\n+            isServerConfigUpdate = true;\n+        else\n+            isServerConfigSetup = false;\n+\n+        if (isServerConfigUpdate) {\n+            AccessLogData.resetJsonLoggingNameAliases();\n+            FFDCData.resetJsonLoggingNameAliases();\n+            LogTraceData.resetJsonLoggingNameAliasesMessage();\n+            LogTraceData.resetJsonLoggingNameAliasesTrace();\n+            AuditData.resetJsonLoggingNameAliases();\n+        }", "originalCommit": "c52b7dc120e5b468819fa1f3a89db85495f60798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex c69eb5f34a..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -479,22 +480,20 @@ public class BaseTraceService implements TrService {\n         else\n             isServerConfigSetup = false;\n \n-        if (isServerConfigUpdate) {\n+        if (value == null || value == \"\" || value.isEmpty()) { //reset all fields to original when server config has \"\"\n             AccessLogData.resetJsonLoggingNameAliases();\n             FFDCData.resetJsonLoggingNameAliases();\n             LogTraceData.resetJsonLoggingNameAliasesMessage();\n             LogTraceData.resetJsonLoggingNameAliasesTrace();\n             AuditData.resetJsonLoggingNameAliases();\n-        }\n \n-        if (value == null || value == \"\" || value.isEmpty()) { //reset all fields to original when server config has \"\"\n             //if no property is set, return\n             return;\n         }\n \n         TraceComponent tc = Tr.register(LogTraceData.class, NLSConstants.GROUP, NLSConstants.LOGGING_NLS);\n         boolean valueFound = false;\n-        boolean isInvalidField = false;\n+        boolean isInvalidEventType = false;\n         Map<String, String> messageMap = new HashMap<>();\n         Map<String, String> traceMap = new HashMap<>();\n         Map<String, String> ffdcMap = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzIzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373797230", "bodyText": "isInvalidEventType might be better name for this one", "author": "donbourne", "createdAt": "2020-02-01T19:23:13Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -549,17 +578,21 @@ public static void applyJsonFields(String value) {\n                         valueFound = true;\n                     }\n                 } else {\n+                    isInvalidField = true;", "originalCommit": "c52b7dc120e5b468819fa1f3a89db85495f60798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\nindex c69eb5f34a..2bbf62fe17 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java\n\n@@ -578,15 +578,15 @@ public class BaseTraceService implements TrService {\n                         valueFound = true;\n                     }\n                 } else {\n-                    isInvalidField = true;\n+                    isInvalidEventType = true;\n                     Tr.warning(tc, \"JSON_FIELDS_INCORRECT_EVENT_TYPE\");\n                 }\n-                if (!valueFound && !isInvalidField) {\n+                if (!valueFound && !isInvalidEventType) {\n                     //if the value does not exist in any of the known keys, give a warning\n                     Tr.warning(tc, \"JSON_FIELDS_NO_MATCH\");\n                 }\n                 valueFound = false;\n-                isInvalidField = false;\n+                isInvalidEventType = false;\n             } else {\n                 Tr.warning(tc, \"JSON_FIELDS_FORMAT_WARNING_2\");\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzkyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373797929", "bodyText": "need to do the null check first to avoid potential NPEs on the isEmpty check", "author": "donbourne", "createdAt": "2020-02-01T19:38:39Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Message);\n+        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Message);\n+            else\n+                sb.append(unchangingFieldsJson_Message.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Trace(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Trace = null;\n+        }\n         if (unchangingFieldsJson_Trace == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Trace = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Trace);\n+        if (!unchangingFieldsJson_Trace.isEmpty() && unchangingFieldsJson_Trace != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Trace);\n+            else\n+                sb.append(unchangingFieldsJson_Trace.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_AccessLog(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_AccessLog = null;\n+        }\n         if (unchangingFieldsJson_AccessLog == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AccessLogData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AccessLogData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, AccessLogData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_AccessLog = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_AccessLog);\n+        if (!unchangingFieldsJson_AccessLog.isEmpty() && unchangingFieldsJson_AccessLog != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_AccessLog);\n+            else\n+                sb.append(unchangingFieldsJson_AccessLog.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_FFDC(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_FFDC = null;\n+        }\n         if (unchangingFieldsJson_FFDC == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, FFDCData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, FFDCData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, FFDCData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_FFDC = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_FFDC);\n+        if (!unchangingFieldsJson_FFDC.isEmpty() && unchangingFieldsJson_FFDC != null) {", "originalCommit": "c52b7dc120e5b468819fa1f3a89db85495f60798", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\nindex f098027c8e..c19171346b 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java\n\n@@ -237,7 +237,7 @@ public class CollectorJsonHelpers {\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+        if (unchangingFieldsJson_Message != null && !unchangingFieldsJson_Message.isEmpty()) {\n             if (sb.length() > 1)\n                 sb.append(unchangingFieldsJson_Message);\n             else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NTczMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374255732", "bodyText": "this should also reset the extensions", "author": "donbourne", "createdAt": "2020-02-03T18:08:52Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "diffHunk": "@@ -47,4 +47,8 @@ public void newAliases(Map<String, String> newAliases) {\n         aliases = tempAliases;\n     }\n \n-}\n+    public void resetAliases() {", "originalCommit": "ded8e4f0e7c14d75a35c3e7a97f8def2b21c8824", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\nindex 7711267bd9..a5e6444d7f 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\n\n@@ -49,6 +49,8 @@ public class NameAliases {\n \n     public void resetAliases() {\n         aliases = originalNames.clone();\n+        originalExtensions.clear();\n+        aliasesExtensions.clear();\n     }\n \n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwOTUzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374309535", "bodyText": "need to also clear originalExtensions.\nPlease also add test cases for clearing/setting ext_ aliases to the json logging bucket - seems like this may be lacking", "author": "donbourne", "createdAt": "2020-02-03T19:58:22Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "diffHunk": "@@ -49,6 +49,7 @@ public void newAliases(Map<String, String> newAliases) {\n \n     public void resetAliases() {\n         aliases = originalNames.clone();\n+        aliasesExtensions.clear();", "originalCommit": "5ead0b699a4fdbf424bffca34886d86edd4c7527", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\nindex e582b56f43..a5e6444d7f 100644\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\n+++ b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java\n\n@@ -49,6 +49,7 @@ public class NameAliases {\n \n     public void resetAliases() {\n         aliases = originalNames.clone();\n+        originalExtensions.clear();\n         aliasesExtensions.clear();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNDc3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376004772", "bodyText": "add test to rename ext_testExtension to another value before omitting it.", "author": "donbourne", "createdAt": "2020-02-06T18:25:07Z", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -273,6 +290,27 @@ public void testOmitForMessageType() throws Exception {\n \n     }\n \n+    @Test\n+    public void testRenameAndOmitExtFields() throws Exception {\n+        setUp(server_xml);\n+\n+        //add/register extension field\n+        getHttpServlet(\"/extFields/addExtFields\", server_xml);\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:MY_EXTENSION\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+", "originalCommit": "91ecced462d1e1765370e0388c39fbbe709324b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\nindex faee0d097c..dc1bb98a98 100644\n--- a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n+++ b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n\n@@ -308,6 +309,23 @@ public class JSONFieldsTest {\n         setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see if field value is still there in case not omitted\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:RENAME\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n+\n+        //remove/unregister extension field\n+        getHttpServlet(\"/extFields/removeExtFields\", server_xml);\n+        server_xml.setMarkToEndOfLog();\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml);\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //just to make sure last rename field is not present\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNTYzMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376005631", "bodyText": "should make a call to the server to remove the registered extension to clean up", "author": "donbourne", "createdAt": "2020-02-06T18:26:46Z", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -273,6 +290,27 @@ public void testOmitForMessageType() throws Exception {\n \n     }\n \n+    @Test\n+    public void testRenameAndOmitExtFields() throws Exception {\n+        setUp(server_xml);\n+\n+        //add/register extension field\n+        getHttpServlet(\"/extFields/addExtFields\", server_xml);\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:MY_EXTENSION\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+\n+        //omit extension fields\n+        setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+", "originalCommit": "91ecced462d1e1765370e0388c39fbbe709324b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\nindex faee0d097c..dc1bb98a98 100644\n--- a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n+++ b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n\n@@ -308,6 +309,23 @@ public class JSONFieldsTest {\n         setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see if field value is still there in case not omitted\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:RENAME\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n+\n+        //remove/unregister extension field\n+        getHttpServlet(\"/extFields/removeExtFields\", server_xml);\n+        server_xml.setMarkToEndOfLog();\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml);\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //just to make sure last rename field is not present\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4OTM5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376789393", "bodyText": "should also check to make sure MY_EXTENSION doesn't appear in the log here (in case the reconfiguration doesn't happen properly)", "author": "donbourne", "createdAt": "2020-02-09T14:45:33Z", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -309,6 +310,19 @@ public void testRenameAndOmitExtFields() throws Exception {\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));", "originalCommit": "84785b620eee4efcf70c647de41e72c599b3c3ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\nindex 4c0fccee59..dc1bb98a98 100644\n--- a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n+++ b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n\n@@ -309,6 +309,8 @@ public class JSONFieldsTest {\n         setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see if field value is still there in case not omitted\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n \n         server_xml.setMarkToEndOfLog();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4OTc1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376789757", "bodyText": "I think here you would want to watch for \"RENAME\" again since that's the last thing the test configured the field to be named.", "author": "donbourne", "createdAt": "2020-02-09T14:50:26Z", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -309,6 +310,19 @@ public void testRenameAndOmitExtFields() throws Exception {\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n \n+        server_xml.setMarkToEndOfLog();\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:RENAME\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n+\n+        //remove/unregister extension field\n+        getHttpServlet(\"/extFields/removeExtFields\", server_xml);\n+        server_xml.setMarkToEndOfLog();\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml);\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));", "originalCommit": "84785b620eee4efcf70c647de41e72c599b3c3ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "chunk": "diff --git a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\nindex 4c0fccee59..dc1bb98a98 100644\n--- a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n+++ b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n\n@@ -309,6 +309,8 @@ public class JSONFieldsTest {\n         setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see if field value is still there in case not omitted\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n \n         server_xml.setMarkToEndOfLog();\n \n"}}, {"oid": "235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "url": "https://github.com/OpenLiberty/open-liberty/commit/235c5a85a6e7d4b733d05126b0f8060cbbf0730e", "message": "Fixing NullPointerException", "committedDate": "2020-02-18T21:48:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjQ4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r383032489", "bodyText": "the regex we tested was ^.*module:((?!ibm_sequence).)*$ -- I understand why you have added the quotes around module and put loglevel in instead of ibm_sequence, but I think it should be $ at the end rather than ?", "author": "donbourne", "createdAt": "2020-02-23T19:42:16Z", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -118,7 +118,7 @@ public void testMessageFieldNamesOmitEnv() throws Exception {\n         setUp(server_env_omit);\n         //List<String> lines = server_env_omit.findStringsInFileInLibertyServerRoot(\"\\\"message\\\"\", MESSAGE_LOG);\n         //assertTrue(\"The message field name was not omitted in messages.log.\", lines.size() == 0);\n-        assertNull(\"The message field name was not omitted in messages.log.\", server_xml.waitForStringInLogUsingMark(\"\\\"loglevel\\\"\"));\n+        assertNotNull(\"The loglevel field name was not omitted in messages.log.\", server_env_omit.waitForStringInLogUsingMark(\"^.*\\\"module\\\":((?!\\\"loglevel\\\").)*?\"));", "originalCommit": "74b295b903c5fbc44dd957fbe7bf01e4bb082476", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8b1df8d0c2819f44518b3363d72d3a66730c432", "chunk": "diff --git a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\nindex e767484bdb..e7538e122c 100644\n--- a/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n+++ b/dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java\n\n@@ -118,7 +100,7 @@ public class JSONFieldsTest {\n         setUp(server_env_omit);\n         //List<String> lines = server_env_omit.findStringsInFileInLibertyServerRoot(\"\\\"message\\\"\", MESSAGE_LOG);\n         //assertTrue(\"The message field name was not omitted in messages.log.\", lines.size() == 0);\n-        assertNotNull(\"The loglevel field name was not omitted in messages.log.\", server_env_omit.waitForStringInLogUsingMark(\"^.*\\\"module\\\":((?!\\\"loglevel\\\").)*?\"));\n+        assertNull(\"The message field name was not omitted in messages.log.\", server_xml.waitForStringInLogUsingMark(\"\\\"loglevel\\\"\"));\n     }\n \n     /*\n"}}, {"oid": "e8b1df8d0c2819f44518b3363d72d3a66730c432", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8b1df8d0c2819f44518b3363d72d3a66730c432", "message": "Revert commit for new implementation of omitting JSON fields", "committedDate": "2020-02-24T15:42:52Z", "type": "commit"}, {"oid": "77dccf7a6f96c29b48c488d2a39f8a3b3616d09a", "url": "https://github.com/OpenLiberty/open-liberty/commit/77dccf7a6f96c29b48c488d2a39f8a3b3616d09a", "message": "New Implementation Commit\n\nSimplifying applyJsonFields and and re-adding previous fix from other issue\n\nreturning length check to original code\n\nMaking null check first and only resetting aliases when jsonFieldMappings is empty\n\nReset ext fields in resetAliases\n\nNew Implementation Commit", "committedDate": "2020-02-24T15:42:55Z", "type": "commit"}, {"oid": "ed0bc0ace4a758687091cf4124dcbafe5288d8ed", "url": "https://github.com/OpenLiberty/open-liberty/commit/ed0bc0ace4a758687091cf4124dcbafe5288d8ed", "message": "Adding test case for renaming and omitting extension fields\n\nAdd to test case, fixed message format clause, regate beta\n\nAdding extra checks to FAT\n\nEnsure logs are created\n\nAdding test case for renaming and omitting extension fields", "committedDate": "2020-02-24T15:46:24Z", "type": "commit"}, {"oid": "a9ad5bdf2c03219b98c50c8b447beee468b1be13", "url": "https://github.com/OpenLiberty/open-liberty/commit/a9ad5bdf2c03219b98c50c8b447beee468b1be13", "message": "Fixing NullPointerException\n\nMoving applyJsonFields to the end of update\n\nFixing NPE caused by jsonFieldMappings formatting error in bootstrap/env", "committedDate": "2020-02-24T15:47:16Z", "type": "commit"}, {"oid": "292f88edec345277f259a8af15bd1445658c3c41", "url": "https://github.com/OpenLiberty/open-liberty/commit/292f88edec345277f259a8af15bd1445658c3c41", "message": "Correcting test case servers and making test cases more specific\n\nFixing error messages for test cases\n\nFix ending character regex\n\nFixing test case servers and modifying regex to be more specific", "committedDate": "2020-02-24T15:48:24Z", "type": "commit"}, {"oid": "292f88edec345277f259a8af15bd1445658c3c41", "url": "https://github.com/OpenLiberty/open-liberty/commit/292f88edec345277f259a8af15bd1445658c3c41", "message": "Correcting test case servers and making test cases more specific\n\nFixing error messages for test cases\n\nFix ending character regex\n\nFixing test case servers and modifying regex to be more specific", "committedDate": "2020-02-24T15:48:24Z", "type": "forcePushed"}, {"oid": "292f88edec345277f259a8af15bd1445658c3c41", "url": "https://github.com/OpenLiberty/open-liberty/commit/292f88edec345277f259a8af15bd1445658c3c41", "message": "Correcting test case servers and making test cases more specific\n\nFixing error messages for test cases\n\nFix ending character regex\n\nFixing test case servers and modifying regex to be more specific", "committedDate": "2020-02-24T15:48:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDkwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385394904", "bodyText": "jsonBuilder", "author": "donbourne", "createdAt": "2020-02-27T21:56:57Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();", "originalCommit": "3172d960cf0e9679384cab9b5ca0bf51c341deb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\ndeleted file mode 100644\nindex af82910f7a..0000000000\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Public License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/legal/epl-v10.html\n- *\n- * Contributors:\n- *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-package com.ibm.ws.logging.data;\n-\n-/* Class for JSON formatting of key-value pairs for logging\n- *\n- *\n- */\n-\n-public class JSONObject {\n-    private boolean hasAnyFields = false;\n-    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private final StringBuilder JSONBuilder = new StringBuilder();\n-\n-    public JSONObject(boolean startLogEntry) {\n-        if (startLogEntry)\n-            JSONBuilder.append(\"{\");\n-    }\n-\n-    //use this for adding full UnchangingFields string\n-    public JSONObject addRaw(String s) {\n-        if (s.isEmpty()) {\n-            return this;\n-        }\n-        prepForNewField();\n-\n-        //add the field to the JSON\n-        JSONBuilder.append(s);\n-        return this;\n-    }\n-\n-    //for String values\n-    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n-        if (name == null || value == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\\\"\");\n-\n-        if (jsonEscapeValue)\n-            jsonEscape3(value);\n-        else\n-            JSONBuilder.append(value);\n-\n-        JSONBuilder.append(\"\\\"\");\n-        return this;\n-    }\n-\n-    //for int values\n-    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for bool values\n-    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //get current JSON log as a string\n-    public String getJSONString() {\n-        return JSONBuilder.toString();\n-    }\n-\n-    public void closeLog() {\n-        JSONBuilder.append(\"}\");\n-    }\n-\n-    private void prepForNewField() {\n-        if (hasAnyFields) {\n-            JSONBuilder.append(\",\");\n-            hasAnyFields = true;\n-        } else {\n-            hasAnyFields = true;\n-        }\n-    }\n-\n-    /**\n-     * Escape \\b, \\f, \\n, \\r, \\t, \", \\, / characters and appends to a string builder\n-     *\n-     * @param sb String builder to append to\n-     * @param s String to escape\n-     */\n-    protected void jsonEscape3(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            switch (c) {\n-                case '\\b':\n-                    JSONBuilder.append(\"\\\\b\");\n-                    break;\n-                case '\\f':\n-                    JSONBuilder.append(\"\\\\f\");\n-                    break;\n-                case '\\n':\n-                    JSONBuilder.append(\"\\\\n\");\n-                    break;\n-                case '\\r':\n-                    JSONBuilder.append(\"\\\\r\");\n-                    break;\n-                case '\\t':\n-                    JSONBuilder.append(\"\\\\t\");\n-                    break;\n-\n-                // Fall through because we just need to add \\ (escaped) before the character\n-                case '\\\\':\n-                case '\\\"':\n-                case '/':\n-                    JSONBuilder.append(\"\\\\\");\n-                    JSONBuilder.append(c);\n-                    break;\n-                default:\n-                    JSONBuilder.append(c);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NTYzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385395636", "bodyText": "startLogEntry shouldn't be specified by the caller.  To start, a caller should either add a field (implying JSONObject needs to start the log entry) or should add raw JSON.", "author": "donbourne", "createdAt": "2020-02-27T21:58:34Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }", "originalCommit": "3172d960cf0e9679384cab9b5ca0bf51c341deb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\ndeleted file mode 100644\nindex af82910f7a..0000000000\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Public License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/legal/epl-v10.html\n- *\n- * Contributors:\n- *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-package com.ibm.ws.logging.data;\n-\n-/* Class for JSON formatting of key-value pairs for logging\n- *\n- *\n- */\n-\n-public class JSONObject {\n-    private boolean hasAnyFields = false;\n-    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private final StringBuilder JSONBuilder = new StringBuilder();\n-\n-    public JSONObject(boolean startLogEntry) {\n-        if (startLogEntry)\n-            JSONBuilder.append(\"{\");\n-    }\n-\n-    //use this for adding full UnchangingFields string\n-    public JSONObject addRaw(String s) {\n-        if (s.isEmpty()) {\n-            return this;\n-        }\n-        prepForNewField();\n-\n-        //add the field to the JSON\n-        JSONBuilder.append(s);\n-        return this;\n-    }\n-\n-    //for String values\n-    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n-        if (name == null || value == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\\\"\");\n-\n-        if (jsonEscapeValue)\n-            jsonEscape3(value);\n-        else\n-            JSONBuilder.append(value);\n-\n-        JSONBuilder.append(\"\\\"\");\n-        return this;\n-    }\n-\n-    //for int values\n-    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for bool values\n-    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //get current JSON log as a string\n-    public String getJSONString() {\n-        return JSONBuilder.toString();\n-    }\n-\n-    public void closeLog() {\n-        JSONBuilder.append(\"}\");\n-    }\n-\n-    private void prepForNewField() {\n-        if (hasAnyFields) {\n-            JSONBuilder.append(\",\");\n-            hasAnyFields = true;\n-        } else {\n-            hasAnyFields = true;\n-        }\n-    }\n-\n-    /**\n-     * Escape \\b, \\f, \\n, \\r, \\t, \", \\, / characters and appends to a string builder\n-     *\n-     * @param sb String builder to append to\n-     * @param s String to escape\n-     */\n-    protected void jsonEscape3(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            switch (c) {\n-                case '\\b':\n-                    JSONBuilder.append(\"\\\\b\");\n-                    break;\n-                case '\\f':\n-                    JSONBuilder.append(\"\\\\f\");\n-                    break;\n-                case '\\n':\n-                    JSONBuilder.append(\"\\\\n\");\n-                    break;\n-                case '\\r':\n-                    JSONBuilder.append(\"\\\\r\");\n-                    break;\n-                case '\\t':\n-                    JSONBuilder.append(\"\\\\t\");\n-                    break;\n-\n-                // Fall through because we just need to add \\ (escaped) before the character\n-                case '\\\\':\n-                case '\\\"':\n-                case '/':\n-                    JSONBuilder.append(\"\\\\\");\n-                    JSONBuilder.append(c);\n-                    break;\n-                default:\n-                    JSONBuilder.append(c);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njk2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385396967", "bodyText": "looks like trim isn't used -- if it's not needed, should remove it", "author": "donbourne", "createdAt": "2020-02-27T22:01:39Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {", "originalCommit": "3172d960cf0e9679384cab9b5ca0bf51c341deb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\ndeleted file mode 100644\nindex af82910f7a..0000000000\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Public License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/legal/epl-v10.html\n- *\n- * Contributors:\n- *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-package com.ibm.ws.logging.data;\n-\n-/* Class for JSON formatting of key-value pairs for logging\n- *\n- *\n- */\n-\n-public class JSONObject {\n-    private boolean hasAnyFields = false;\n-    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private final StringBuilder JSONBuilder = new StringBuilder();\n-\n-    public JSONObject(boolean startLogEntry) {\n-        if (startLogEntry)\n-            JSONBuilder.append(\"{\");\n-    }\n-\n-    //use this for adding full UnchangingFields string\n-    public JSONObject addRaw(String s) {\n-        if (s.isEmpty()) {\n-            return this;\n-        }\n-        prepForNewField();\n-\n-        //add the field to the JSON\n-        JSONBuilder.append(s);\n-        return this;\n-    }\n-\n-    //for String values\n-    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n-        if (name == null || value == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\\\"\");\n-\n-        if (jsonEscapeValue)\n-            jsonEscape3(value);\n-        else\n-            JSONBuilder.append(value);\n-\n-        JSONBuilder.append(\"\\\"\");\n-        return this;\n-    }\n-\n-    //for int values\n-    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for bool values\n-    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //get current JSON log as a string\n-    public String getJSONString() {\n-        return JSONBuilder.toString();\n-    }\n-\n-    public void closeLog() {\n-        JSONBuilder.append(\"}\");\n-    }\n-\n-    private void prepForNewField() {\n-        if (hasAnyFields) {\n-            JSONBuilder.append(\",\");\n-            hasAnyFields = true;\n-        } else {\n-            hasAnyFields = true;\n-        }\n-    }\n-\n-    /**\n-     * Escape \\b, \\f, \\n, \\r, \\t, \", \\, / characters and appends to a string builder\n-     *\n-     * @param sb String builder to append to\n-     * @param s String to escape\n-     */\n-    protected void jsonEscape3(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            switch (c) {\n-                case '\\b':\n-                    JSONBuilder.append(\"\\\\b\");\n-                    break;\n-                case '\\f':\n-                    JSONBuilder.append(\"\\\\f\");\n-                    break;\n-                case '\\n':\n-                    JSONBuilder.append(\"\\\\n\");\n-                    break;\n-                case '\\r':\n-                    JSONBuilder.append(\"\\\\r\");\n-                    break;\n-                case '\\t':\n-                    JSONBuilder.append(\"\\\\t\");\n-                    break;\n-\n-                // Fall through because we just need to add \\ (escaped) before the character\n-                case '\\\\':\n-                case '\\\"':\n-                case '/':\n-                    JSONBuilder.append(\"\\\\\");\n-                    JSONBuilder.append(c);\n-                    break;\n-                default:\n-                    JSONBuilder.append(c);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Nzc0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385397748", "bodyText": "should combine all of the addField methods into one that does most of the work, and all the others just pass along the String representation of the value and an indicator of whether quotes are needed around the value.", "author": "donbourne", "createdAt": "2020-02-27T22:03:13Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n+        if (name == null || value == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\\\"\");\n+\n+        if (jsonEscapeValue)\n+            jsonEscape3(value);\n+        else\n+            JSONBuilder.append(value);\n+\n+        JSONBuilder.append(\"\\\"\");\n+        return this;\n+    }\n+\n+    //for int values\n+    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for bool values\n+    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, float value, boolean jsonEscapeName) {", "originalCommit": "3172d960cf0e9679384cab9b5ca0bf51c341deb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\ndeleted file mode 100644\nindex af82910f7a..0000000000\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Public License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/legal/epl-v10.html\n- *\n- * Contributors:\n- *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-package com.ibm.ws.logging.data;\n-\n-/* Class for JSON formatting of key-value pairs for logging\n- *\n- *\n- */\n-\n-public class JSONObject {\n-    private boolean hasAnyFields = false;\n-    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private final StringBuilder JSONBuilder = new StringBuilder();\n-\n-    public JSONObject(boolean startLogEntry) {\n-        if (startLogEntry)\n-            JSONBuilder.append(\"{\");\n-    }\n-\n-    //use this for adding full UnchangingFields string\n-    public JSONObject addRaw(String s) {\n-        if (s.isEmpty()) {\n-            return this;\n-        }\n-        prepForNewField();\n-\n-        //add the field to the JSON\n-        JSONBuilder.append(s);\n-        return this;\n-    }\n-\n-    //for String values\n-    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n-        if (name == null || value == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\\\"\");\n-\n-        if (jsonEscapeValue)\n-            jsonEscape3(value);\n-        else\n-            JSONBuilder.append(value);\n-\n-        JSONBuilder.append(\"\\\"\");\n-        return this;\n-    }\n-\n-    //for int values\n-    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for bool values\n-    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //get current JSON log as a string\n-    public String getJSONString() {\n-        return JSONBuilder.toString();\n-    }\n-\n-    public void closeLog() {\n-        JSONBuilder.append(\"}\");\n-    }\n-\n-    private void prepForNewField() {\n-        if (hasAnyFields) {\n-            JSONBuilder.append(\",\");\n-            hasAnyFields = true;\n-        } else {\n-            hasAnyFields = true;\n-        }\n-    }\n-\n-    /**\n-     * Escape \\b, \\f, \\n, \\r, \\t, \", \\, / characters and appends to a string builder\n-     *\n-     * @param sb String builder to append to\n-     * @param s String to escape\n-     */\n-    protected void jsonEscape3(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            switch (c) {\n-                case '\\b':\n-                    JSONBuilder.append(\"\\\\b\");\n-                    break;\n-                case '\\f':\n-                    JSONBuilder.append(\"\\\\f\");\n-                    break;\n-                case '\\n':\n-                    JSONBuilder.append(\"\\\\n\");\n-                    break;\n-                case '\\r':\n-                    JSONBuilder.append(\"\\\\r\");\n-                    break;\n-                case '\\t':\n-                    JSONBuilder.append(\"\\\\t\");\n-                    break;\n-\n-                // Fall through because we just need to add \\ (escaped) before the character\n-                case '\\\\':\n-                case '\\\"':\n-                case '/':\n-                    JSONBuilder.append(\"\\\\\");\n-                    JSONBuilder.append(c);\n-                    break;\n-                default:\n-                    JSONBuilder.append(c);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNTk0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385735947", "bodyText": "rather than a \"closeLog\" method, I think this whole class would work a bit better if you follow builder pattern... https://dzone.com/articles/design-patterns-the-builder-pattern.  That would mean you'd make this a build method that would close out the bracket and return a JSON instance.  This class would become a Builder class.", "author": "donbourne", "createdAt": "2020-02-28T14:49:23Z", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n+        if (name == null || value == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\\\"\");\n+\n+        if (jsonEscapeValue)\n+            jsonEscape3(value);\n+        else\n+            JSONBuilder.append(value);\n+\n+        JSONBuilder.append(\"\\\"\");\n+        return this;\n+    }\n+\n+    //for int values\n+    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for bool values\n+    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //get current JSON log as a string\n+    public String getJSONString() {\n+        return JSONBuilder.toString();\n+    }\n+\n+    public void closeLog() {", "originalCommit": "3172d960cf0e9679384cab9b5ca0bf51c341deb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "chunk": "diff --git a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java b/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\ndeleted file mode 100644\nindex af82910f7a..0000000000\n--- a/dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 IBM Corporation and others.\n- * All rights reserved. This program and the accompanying materials\n- * are made available under the terms of the Eclipse Public License v1.0\n- * which accompanies this distribution, and is available at\n- * http://www.eclipse.org/legal/epl-v10.html\n- *\n- * Contributors:\n- *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-package com.ibm.ws.logging.data;\n-\n-/* Class for JSON formatting of key-value pairs for logging\n- *\n- *\n- */\n-\n-public class JSONObject {\n-    private boolean hasAnyFields = false;\n-    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n-    private final StringBuilder JSONBuilder = new StringBuilder();\n-\n-    public JSONObject(boolean startLogEntry) {\n-        if (startLogEntry)\n-            JSONBuilder.append(\"{\");\n-    }\n-\n-    //use this for adding full UnchangingFields string\n-    public JSONObject addRaw(String s) {\n-        if (s.isEmpty()) {\n-            return this;\n-        }\n-        prepForNewField();\n-\n-        //add the field to the JSON\n-        JSONBuilder.append(s);\n-        return this;\n-    }\n-\n-    //for String values\n-    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n-        if (name == null || value == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\\\"\");\n-\n-        if (jsonEscapeValue)\n-            jsonEscape3(value);\n-        else\n-            JSONBuilder.append(value);\n-\n-        JSONBuilder.append(\"\\\"\");\n-        return this;\n-    }\n-\n-    //for int values\n-    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for bool values\n-    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //for long values\n-    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n-        if (name == null)\n-            return this;\n-\n-        if (name.equals(OMIT_FIELDS_STRING))\n-            return this;\n-\n-        prepForNewField();\n-\n-        //append name and value\n-        JSONBuilder.append(\"\\\"\");\n-\n-        if (jsonEscapeName)\n-            jsonEscape3(name);\n-        else\n-            JSONBuilder.append(name);\n-\n-        JSONBuilder.append(\"\\\":\" + value);\n-\n-        return this;\n-    }\n-\n-    //get current JSON log as a string\n-    public String getJSONString() {\n-        return JSONBuilder.toString();\n-    }\n-\n-    public void closeLog() {\n-        JSONBuilder.append(\"}\");\n-    }\n-\n-    private void prepForNewField() {\n-        if (hasAnyFields) {\n-            JSONBuilder.append(\",\");\n-            hasAnyFields = true;\n-        } else {\n-            hasAnyFields = true;\n-        }\n-    }\n-\n-    /**\n-     * Escape \\b, \\f, \\n, \\r, \\t, \", \\, / characters and appends to a string builder\n-     *\n-     * @param sb String builder to append to\n-     * @param s String to escape\n-     */\n-    protected void jsonEscape3(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char c = s.charAt(i);\n-            switch (c) {\n-                case '\\b':\n-                    JSONBuilder.append(\"\\\\b\");\n-                    break;\n-                case '\\f':\n-                    JSONBuilder.append(\"\\\\f\");\n-                    break;\n-                case '\\n':\n-                    JSONBuilder.append(\"\\\\n\");\n-                    break;\n-                case '\\r':\n-                    JSONBuilder.append(\"\\\\r\");\n-                    break;\n-                case '\\t':\n-                    JSONBuilder.append(\"\\\\t\");\n-                    break;\n-\n-                // Fall through because we just need to add \\ (escaped) before the character\n-                case '\\\\':\n-                case '\\\"':\n-                case '/':\n-                    JSONBuilder.append(\"\\\\\");\n-                    JSONBuilder.append(c);\n-                    break;\n-                default:\n-                    JSONBuilder.append(c);\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"oid": "292f88edec345277f259a8af15bd1445658c3c41", "url": "https://github.com/OpenLiberty/open-liberty/commit/292f88edec345277f259a8af15bd1445658c3c41", "message": "Correcting test case servers and making test cases more specific\n\nFixing error messages for test cases\n\nFix ending character regex\n\nFixing test case servers and modifying regex to be more specific", "committedDate": "2020-02-24T15:48:24Z", "type": "forcePushed"}, {"oid": "c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "url": "https://github.com/OpenLiberty/open-liberty/commit/c985c3bfdd191fa4a20170f3d4b16ed123c5c109", "message": "Fixing gc json type key merge conflict", "committedDate": "2020-03-06T15:53:17Z", "type": "commit"}]}