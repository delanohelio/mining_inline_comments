{"pr_number": 11665, "pr_title": "EE9 Build & Test Fixes ", "pr_createdAt": "2020-04-07T15:51:47Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11665", "timeline": [{"oid": "8f049821061ffefc81ea9cfec213995d44c2836b", "url": "https://github.com/OpenLiberty/open-liberty/commit/8f049821061ffefc81ea9cfec213995d44c2836b", "message": "Modify jakarta selection rules", "committedDate": "2020-04-07T17:16:39Z", "type": "forcePushed"}, {"oid": "ca782ebb8f39b632a32b915957f05260322c8be0", "url": "https://github.com/OpenLiberty/open-liberty/commit/ca782ebb8f39b632a32b915957f05260322c8be0", "message": "Update Transformer to 0.0.7\n\nModify jakarta selection rules", "committedDate": "2020-04-07T17:20:02Z", "type": "forcePushed"}, {"oid": "b8d0828573e78b89ffcd4045f7e4ffd4ecd1d9a8", "url": "https://github.com/OpenLiberty/open-liberty/commit/b8d0828573e78b89ffcd4045f7e4ffd4ecd1d9a8", "message": "Update Transformer to 0.0.7\n\nModify jakarta selection rules", "committedDate": "2020-04-07T17:39:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NzQ2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11665#discussion_r404997463", "bodyText": "Use IS_SECURITY_ENABLED in place of System.getSecurityManager() != null", "author": "pmd1nh", "createdAt": "2020-04-07T17:46:22Z", "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "diffHunk": "@@ -18,43 +18,96 @@\n \n package jakarta.el;\n \n-import static java.io.File.separator;\n-\n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n import java.lang.reflect.Constructor;\n-import java.util.Iterator;\n import java.util.Properties;\n import java.util.ServiceLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n \n class FactoryFinder {\n \n+    private static final boolean IS_SECURITY_ENABLED = (System.getSecurityManager() != null);\n+\n+    private static final String SERVICE_RESOURCE_NAME = \"META-INF/services/jakarta.el.ExpressionFactory\";\n+\n+    private static final String PROPERTY_NAME = \"jakarta.el.ExpressionFactory\";\n+\n+    private static final String SEP;\n+    private static final String PROPERTY_FILE;\n+\n+    static {\n+        if (IS_SECURITY_ENABLED) {\n+            SEP = AccessController.doPrivileged(\n+                                                new PrivilegedAction<String>() {\n+                                                    @Override\n+                                                    public String run() {\n+                                                        return System.getProperty(\"file.separator\");\n+                                                    }\n+\n+                                                });\n+            PROPERTY_FILE = AccessController.doPrivileged(\n+                                                          new PrivilegedAction<String>() {\n+                                                              @Override\n+                                                              public String run() {\n+                                                                  return System.getProperty(\"java.home\") + SEP +\n+                                                                         \"lib\" + SEP + \"el.properties\";\n+                                                              }\n+\n+                                                          });\n+        } else {\n+            SEP = System.getProperty(\"file.separator\");\n+            PROPERTY_FILE = System.getProperty(\"java.home\") + SEP + \"lib\" +\n+                            SEP + \"el.properties\";\n+        }\n+    }\n+\n     /**\n      * Creates an instance of the specified class using the specified <code>ClassLoader</code> object.\n      *\n      * @exception ELException if the given class could not be found or could not be instantiated\n      */\n     private static Object newInstance(String className, ClassLoader classLoader, Properties properties) {\n         try {\n-            Class<?> spiClass;\n+            Class<?> instance;\n             if (classLoader == null) {\n-                spiClass = Class.forName(className);\n+                instance = Class.forName(className);\n             } else {\n-                spiClass = classLoader.loadClass(className);\n+                instance = classLoader.loadClass(className);\n             }\n \n             if (properties != null) {\n                 Constructor<?> constr = null;\n                 try {\n-                    constr = spiClass.getConstructor(Properties.class);\n+                    constr = instance.getConstructor(Properties.class);\n                 } catch (Exception ex) {\n                 }\n \n                 if (constr != null) {\n                     return constr.newInstance(properties);\n                 }\n             }\n-            return spiClass.getDeclaredConstructor().newInstance();\n+            if (System.getSecurityManager() != null) {", "originalCommit": "ba1a7797f8fb75d9b7eff96eb23cba24af08de2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f463546ba615bd5ab14cba4ccf9f3fac484830c", "chunk": "diff --git a/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java b/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\nindex 605e8d30c7..968db81072 100644\n--- a/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\n+++ b/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\n\n@@ -18,57 +18,17 @@\n \n package jakarta.el;\n \n-import java.io.BufferedReader;\n+import static java.io.File.separator;\n+\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.UnsupportedEncodingException;\n import java.lang.reflect.Constructor;\n+import java.util.Iterator;\n import java.util.Properties;\n import java.util.ServiceLoader;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n \n class FactoryFinder {\n \n-    private static final boolean IS_SECURITY_ENABLED = (System.getSecurityManager() != null);\n-\n-    private static final String SERVICE_RESOURCE_NAME = \"META-INF/services/jakarta.el.ExpressionFactory\";\n-\n-    private static final String PROPERTY_NAME = \"jakarta.el.ExpressionFactory\";\n-\n-    private static final String SEP;\n-    private static final String PROPERTY_FILE;\n-\n-    static {\n-        if (IS_SECURITY_ENABLED) {\n-            SEP = AccessController.doPrivileged(\n-                                                new PrivilegedAction<String>() {\n-                                                    @Override\n-                                                    public String run() {\n-                                                        return System.getProperty(\"file.separator\");\n-                                                    }\n-\n-                                                });\n-            PROPERTY_FILE = AccessController.doPrivileged(\n-                                                          new PrivilegedAction<String>() {\n-                                                              @Override\n-                                                              public String run() {\n-                                                                  return System.getProperty(\"java.home\") + SEP +\n-                                                                         \"lib\" + SEP + \"el.properties\";\n-                                                              }\n-\n-                                                          });\n-        } else {\n-            SEP = System.getProperty(\"file.separator\");\n-            PROPERTY_FILE = System.getProperty(\"java.home\") + SEP + \"lib\" +\n-                            SEP + \"el.properties\";\n-        }\n-    }\n-\n     /**\n      * Creates an instance of the specified class using the specified <code>ClassLoader</code> object.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5Nzk1OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11665#discussion_r404997958", "bodyText": "if (IS_SECURITY_ENABLED)", "author": "pmd1nh", "createdAt": "2020-04-07T17:47:10Z", "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "diffHunk": "@@ -80,56 +133,130 @@ private static Object newInstance(String className, ClassLoader classLoader, Pro\n      * <code>null</code> to indicate that there is no fallback class name\n      * @exception ELException if there is an error\n      */\n-    static Object find(Class<?> serviceClass, String factoryId, String fallbackClassName, Properties properties) {\n+    static Object find(Class<?> serviceClass, Properties properties) {\n         ClassLoader classLoader;\n         try {\n-            classLoader = Thread.currentThread().getContextClassLoader();\n+            if (System.getSecurityManager() != null) {", "originalCommit": "ba1a7797f8fb75d9b7eff96eb23cba24af08de2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f463546ba615bd5ab14cba4ccf9f3fac484830c", "chunk": "diff --git a/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java b/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\nindex 605e8d30c7..968db81072 100644\n--- a/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\n+++ b/dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java\n\n@@ -133,130 +80,56 @@ class FactoryFinder {\n      * <code>null</code> to indicate that there is no fallback class name\n      * @exception ELException if there is an error\n      */\n-    static Object find(Class<?> serviceClass, Properties properties) {\n+    static Object find(Class<?> serviceClass, String factoryId, String fallbackClassName, Properties properties) {\n         ClassLoader classLoader;\n         try {\n-            if (System.getSecurityManager() != null) {\n-                classLoader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n-                    @Override\n-                    public ClassLoader run() {\n-                        return Thread.currentThread().getContextClassLoader();\n-                    }\n-                });\n-            } else {\n-                classLoader = Thread.currentThread().getContextClassLoader();\n-            }\n-\n+            classLoader = Thread.currentThread().getContextClassLoader();\n         } catch (Exception x) {\n             throw new ELException(x.toString(), x);\n         }\n \n-        String className = discoverClassName(classLoader);\n-\n-        return newInstance(className, classLoader, properties);\n-    }\n-\n-    //Copied From EL 3.0 \n-    private static String discoverClassName(ClassLoader tccl) {\n-        String className = null;\n-\n-        // First services API\n-        className = getClassNameServices(tccl);\n-        if (className == null) {\n-            if (IS_SECURITY_ENABLED) {\n-                className = AccessController.doPrivileged(\n-                                new PrivilegedAction<String>() {\n-                                    @Override\n-                                    public String run() {\n-                                        return getClassNameJreDir();\n-                                    }\n-                                }\n-                                );\n-            } else {\n-                // Second el.properties file\n-                className = getClassNameJreDir();\n-            }\n-        }\n-        if (className == null) {\n-            if (IS_SECURITY_ENABLED) {\n-                className = AccessController.doPrivileged(\n-                                new PrivilegedAction<String>() {\n-                                    @Override\n-                                    public String run() {\n-                                        return getClassNameBySysProp();\n-                                    }\n-                                }\n-                                );\n-            } else {\n-                // Third system property\n-                className = getClassNameBySysProp();\n+        // try to find services in CLASSPATH\n+        try {\n+            ServiceLoader<?> serviceLoader = ServiceLoader.load(serviceClass, classLoader);\n+            Iterator<?> iter = serviceLoader.iterator();\n+            while (iter.hasNext()) {\n+                Object service = iter.next();\n+                if (service != null) {\n+                    return service;\n+                }\n             }\n+        } catch (Exception ex) {\n         }\n-        if (className == null) {\n-            // Fourth - default\n-            className = \"org.apache.el.ExpressionFactoryImpl\";\n-        }\n-        return className;\n-    }\n \n-    private static String getClassNameServices(ClassLoader tccl) {\n-        InputStream is = null;\n+        // Try to read from $java.home/lib/el.properties\n+        try {\n+            String javah = System.getProperty(\"java.home\");\n+            String configFileName = javah + separator + \"lib\" + separator + \"el.properties\";\n \n-        if (tccl == null) {\n-            is = ClassLoader.getSystemResourceAsStream(SERVICE_RESOURCE_NAME);\n-        } else {\n-            is = tccl.getResourceAsStream(SERVICE_RESOURCE_NAME);\n-        }\n+            File configFile = new File(configFileName);\n+            if (configFile.exists()) {\n+                Properties props = new Properties();\n+                props.load(new FileInputStream(configFile));\n+                String factoryClassName = props.getProperty(factoryId);\n \n-        if (is != null) {\n-            String line = null;\n-            try (InputStreamReader isr = new InputStreamReader(is, \"UTF-8\");\n-                            BufferedReader br = new BufferedReader(isr)) {\n-                line = br.readLine();\n-                if (line != null && line.trim().length() > 0) {\n-                    return line.trim();\n-                }\n-            } catch (UnsupportedEncodingException e) {\n-                // Should never happen with UTF-8\n-                // If it does - ignore & return null\n-            } catch (IOException e) {\n-                throw new ELException(\"Failed to read \" + SERVICE_RESOURCE_NAME,\n-                                e);\n-            } finally {\n-                try {\n-                    is.close();\n-                } catch (IOException ioe) {/* Ignore */\n-                }\n+                return newInstance(factoryClassName, classLoader, properties);\n             }\n+        } catch (Exception ex) {\n         }\n \n-        return null;\n-    }\n-\n-    private static String getClassNameJreDir() {\n-        File file = new File(PROPERTY_FILE);\n-        if (file.canRead()) {\n-            try (InputStream is = new FileInputStream(file)) {\n-                Properties props = new Properties();\n-                props.load(is);\n-                String value = props.getProperty(PROPERTY_NAME);\n-                if (value != null && value.trim().length() > 0) {\n-                    return value.trim();\n-                }\n-            } catch (FileNotFoundException e) {\n-                // Should not happen - ignore it if it does\n-            } catch (IOException e) {\n-                throw new ELException(\"Failed to read \" + PROPERTY_FILE, e);\n+        // Use the system property\n+        try {\n+            String systemProp = System.getProperty(factoryId);\n+            if (systemProp != null) {\n+                return newInstance(systemProp, classLoader, properties);\n             }\n+        } catch (SecurityException se) {\n         }\n-        return null;\n-    }\n \n-    private static final String getClassNameBySysProp() {\n-        String value = System.getProperty(PROPERTY_NAME);\n-        if (value != null && value.trim().length() > 0) {\n-            return value.trim();\n+        if (fallbackClassName == null) {\n+            throw new ELException(\"Provider for \" + factoryId + \" cannot be found\", null);\n         }\n-        return null;\n+\n+        return newInstance(fallbackClassName, classLoader, properties);\n     }\n }\n"}}, {"oid": "8f463546ba615bd5ab14cba4ccf9f3fac484830c", "url": "https://github.com/OpenLiberty/open-liberty/commit/8f463546ba615bd5ab14cba4ccf9f3fac484830c", "message": "Update Servlet 4 FAT for EE9", "committedDate": "2020-04-07T19:37:29Z", "type": "commit"}, {"oid": "a81cade11985093ac736142c92a071a77bcd3c93", "url": "https://github.com/OpenLiberty/open-liberty/commit/a81cade11985093ac736142c92a071a77bcd3c93", "message": "Fix Feature '-jar' in JSP", "committedDate": "2020-04-07T19:37:52Z", "type": "commit"}, {"oid": "c99dade90a7d5e6fdbb7f2ffad4e3ab6414b6efe", "url": "https://github.com/OpenLiberty/open-liberty/commit/c99dade90a7d5e6fdbb7f2ffad4e3ab6414b6efe", "message": "Update Transformer to 0.0.7\n\nModify jakarta selection rules", "committedDate": "2020-04-07T19:37:52Z", "type": "commit"}, {"oid": "444d990926dc1ab22d3c692004740041d75d798f", "url": "https://github.com/OpenLiberty/open-liberty/commit/444d990926dc1ab22d3c692004740041d75d798f", "message": "Update EL-4.0 FactoryFinder", "committedDate": "2020-04-07T19:39:02Z", "type": "commit"}, {"oid": "444d990926dc1ab22d3c692004740041d75d798f", "url": "https://github.com/OpenLiberty/open-liberty/commit/444d990926dc1ab22d3c692004740041d75d798f", "message": "Update EL-4.0 FactoryFinder", "committedDate": "2020-04-07T19:39:02Z", "type": "forcePushed"}, {"oid": "764257d1fc62a285f8a30c10e54b3b3033decfab", "url": "https://github.com/OpenLiberty/open-liberty/commit/764257d1fc62a285f8a30c10e54b3b3033decfab", "message": "Update to EL-4.0 RC1", "committedDate": "2020-04-07T20:09:16Z", "type": "commit"}]}