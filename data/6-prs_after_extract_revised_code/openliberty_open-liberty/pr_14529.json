{"pr_number": 14529, "pr_title": "Change concurrent.persistent_fat to use in-memory derby by default", "pr_createdAt": "2020-10-16T17:27:25Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14529", "timeline": [{"oid": "c3aa0f258a18070c7d0fc53558dd7fea9268c4e4", "url": "https://github.com/OpenLiberty/open-liberty/commit/c3aa0f258a18070c7d0fc53558dd7fea9268c4e4", "message": "Change concurrent.persistent_fat to use in-memory derby by default", "committedDate": "2020-10-16T17:26:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3MjE3NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14529#discussion_r506672174", "bodyText": "Shouldn't the JakartaEE9Action do this automatically?  Or is it because it the features switched from all lowercase to camel case?", "author": "KyleAure", "createdAt": "2020-10-16T19:09:58Z", "path": "dev/com.ibm.ws.concurrent.persistent_fat/fat/src/com/ibm/ws/concurrent/persistent/fat/PersistentExecutorWithFailoverEnabledTest.java", "diffHunk": "@@ -33,168 +31,135 @@\n import componenttest.topology.database.container.DatabaseContainerFactory;\n import componenttest.topology.database.container.DatabaseContainerType;\n import componenttest.topology.database.container.DatabaseContainerUtil;\n-import componenttest.topology.impl.LibertyFileManager;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.FATServletClient;\n-\n import web.SchedulerFATServlet;\n \n-@AllowedFFDC({\n-    \"javax.resource.ResourceException\", // due to transaction timeout from infra slowness\n-    \"javax.transaction.RollbackException\" // due to transaction timeout from infra slowness\n-    })\n+@AllowedFFDC({ \"javax.resource.ResourceException\", // due to transaction timeout from infra slowness\n+\t\t\"javax.transaction.RollbackException\", // due to transaction timeout from infra slowness\n+\t\t\"javax.transaction.xa.XAException\" // due to transaction timeout from infra slowness\n+})\n @RunWith(FATRunner.class)\n public class PersistentExecutorWithFailoverEnabledTest extends FATServletClient {\n \n-    private static final String APP_NAME = \"schedtest\";\n-\n-    private static ServerConfiguration originalConfig;\n-\n-    @ClassRule\n-    public static RepeatTests r = RepeatTests\n-                    .withoutModification()\n-                    .andWith(new JakartaEE9Action());\n-\n-    @Server(\"com.ibm.ws.concurrent.persistent.fat\")\n-    @TestServlet(servlet = SchedulerFATServlet.class, path = APP_NAME)\n-    public static LibertyServer server;\n-    \n-    @ClassRule\n-    public static final JdbcDatabaseContainer<?> testContainer = DatabaseContainerFactory.create();\n-\n-    /**\n-     * Before running any tests, start the server\n-     *\n-     * @throws Exception\n-     */\n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-    \t// Delete the Derby database that might be used by the persistent scheduled executor and the Derby-only test database\n-        Machine machine = server.getMachine();\n-        String installRoot = server.getInstallRoot();\n-        LibertyFileManager.deleteLibertyDirectoryAndContents(machine, installRoot + \"/usr/shared/resources/data/scheddb\");\n-    \t\n-    \t//Get driver type\n-    \tserver.addEnvVar(\"DB_DRIVER\", DatabaseContainerType.valueOf(testContainer).getDriverName());\n-\n-    \t//Setup server DataSource properties\n-    \tDatabaseContainerUtil.setupDataSourceProperties(server, testContainer);\n-\n-\t\t//Add application to server\n-        ShrinkHelper.defaultDropinApp(server, APP_NAME, \"web\");\n-        \n-    \t//Edit original config to enable failover\n-        originalConfig = server.getServerConfiguration();\n-        ServerConfiguration config = originalConfig.clone();\n-        PersistentExecutor myScheduler = config.getPersistentExecutors().getBy(\"jndiName\", \"concurrent/myScheduler\");\n-        myScheduler.setInitialPollDelay(\"2s\");\n-        myScheduler.setPollInterval(\"2s500ms\"); // a couple of tests require polling in order to perform retries\n-        myScheduler.setMissedTaskThreshold(\"6s\");\n-        myScheduler.setExtraAttribute(\"ignore.minimum.for.test.use.only\", \"true\");\n-\n-        // Use the Jakarta version of test features if Jakarta is being used.\n-        if (JakartaEE9Action.isActive()) {\n-            Set<String> features = config.getFeatureManager().getFeatures();\n-            features.remove(\"persistentexecutor-1.0\");\n-            features.remove(\"timerinterfacestestfeature-1.0\");\n-            features.add(\"persistentExecutor-2.0\");\n-            features.add(\"timerInterfacesTestFeature-2.0\");\n-        }\n-\n-        server.updateServerConfiguration(config);\n-\n-        server.startServer();\n-    }\n-\n-    /**\n-     * After completing all tests, stop the server.\n-     *\n-     * @throws Exception\n-     */\n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        try {\n-            runTest(server, APP_NAME, \"verifyNoTasksRunning\");\n-        } finally {\n-            if (server != null)\n-                try {\n-                    if (server.isStarted())\n-                        server.stopServer(\"CWWKC1500W\", //Task rolled back\n-                                          \"CWWKC1501W\", //Task rolled back due to failure ...\n-                                          \"CWWKC1502W\", //Task rolled back, retry time unspecified\n-                                          \"CWWKC1503W\", //Task rolled back due to failure ..., retry time unspecified\n-                                          \"CWWKC1510W\", //Task rolled back and aborted\n-                                          \"CWWKC1511W\", //Task rolled back and aborted. Failure is ...\n-                                          \"DSRA0174W\"); //Generic Datasource Helper\n-                } finally {\n-                    if (originalConfig != null)\n-                        server.updateServerConfiguration(originalConfig);\n-                }\n-        }\n-    }\n-\n-    @Test\n-    public void testBlockAfterCancelByIdFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterCancelByIdFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterCancelByNameFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterCancelByNameFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterFindByIdFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterFindByIdFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterFindByNameFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterFindByNameFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterRemoveByIdFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterRemoveByIdFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterRemoveByNameFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterRemoveByNameFE\");\n-    }\n-\n-    @Test\n-    public void testBlockAfterScheduleFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockAfterScheduleFE\");\n-    }\n-\n-    @Test\n-    public void testBlockRunningTaskFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockRunningTaskFE\");\n-    }\n-\n-    @Test\n-    public void testBlockRunningTaskThatCancelsSelfFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockRunningTaskThatCancelsSelfFE\");\n-    }\n-\n-    @Test\n-    public void testBlockRunningTaskThatRemovesSelfFE() throws Exception {\n-        runTest(server, APP_NAME, \"testBlockRunningTaskThatRemovesSelfFE\");\n-    }\n-\n-    @Test\n-    public void testCancelRunningTaskFE() throws Exception {\n-        runTest(server, APP_NAME, \"testCancelRunningTaskFE\");\n-    }\n-\n-    @Test\n-    public void testRemoveRunningTaskAutoPurgeFE() throws Exception {\n-        runTest(server, APP_NAME, \"testRemoveRunningTaskAutoPurgeFE\");\n-    }\n-\n-    @Test\n-    public void testRemoveRunningTaskFE() throws Exception {\n-        runTest(server, APP_NAME, \"testRemoveRunningTaskFE\");\n-    }\n+\tprivate static final String APP_NAME = \"schedtest\";\n+\n+\t@ClassRule\n+\tpublic static RepeatTests r = RepeatTests.withoutModification()//\n+\t\t\t.andWith(new JakartaEE9Action());\n+\n+\t@Server(\"com.ibm.ws.concurrent.persistent.fat.failover\")\n+\t@TestServlet(servlet = SchedulerFATServlet.class, path = APP_NAME)\n+\tpublic static LibertyServer server;\n+\t\n+\tpublic static final JdbcDatabaseContainer<?> testContainer = DatabaseContainerFactory.create();\n+\n+\t@BeforeClass\n+\tpublic static void setUp() throws Exception {\n+\t\ttestContainer.start();\n+\t\t\n+\t\tserver.addEnvVar(\"DB_DRIVER\", DatabaseContainerType.valueOf(testContainer).getDriverName());\n+\n+\t\tDatabaseContainerUtil.setupDataSourceProperties(server, testContainer);\n+\n+\t\tShrinkHelper.defaultDropinApp(server, APP_NAME, \"web\");\n+\n+\t\t// Use the Jakarta version of test features if Jakarta is being used.\n+\t\tif (JakartaEE9Action.isActive()) {\n+\t\t\tServerConfiguration config = server.getServerConfiguration();\n+\t\t\tSet<String> features = config.getFeatureManager().getFeatures();\n+\t\t\tfeatures.remove(\"persistentexecutor-1.0\");\n+\t\t\tfeatures.remove(\"timerinterfacestestfeature-1.0\");\n+\t\t\tfeatures.add(\"persistentExecutor-2.0\");\n+\t\t\tfeatures.add(\"timerInterfacesTestFeature-2.0\");", "originalCommit": "c3aa0f258a18070c7d0fc53558dd7fea9268c4e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NzY0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14529#discussion_r507757645", "bodyText": "Partially yes -- we could update the JakartaEE9Action to auto-update the persistentExecutor feature, but we shouldn't add the timerInterfacesTestFeature to the EE9 action since that is a test feature only used in this bucket.", "author": "aguibert", "createdAt": "2020-10-19T13:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3MjE3NA=="}], "type": "inlineReview", "revised_code": null}]}