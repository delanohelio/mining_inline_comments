{"pr_number": 14608, "pr_title": "make loginProperty public", "pr_createdAt": "2020-10-21T16:28:45Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14608", "timeline": [{"oid": "a88d6ad7685d58b4ac5ab923365f086bed6c59db", "url": "https://github.com/OpenLiberty/open-liberty/commit/a88d6ad7685d58b4ac5ab923365f086bed6c59db", "message": "make loginProperty public", "committedDate": "2020-10-21T16:29:54Z", "type": "forcePushed"}, {"oid": "b47cfef3e3e3a878e3f0fc37d0d400d907d4f0e6", "url": "https://github.com/OpenLiberty/open-liberty/commit/b47cfef3e3e3a878e3f0fc37d0d400d907d4f0e6", "message": "make loginProperty public", "committedDate": "2020-10-21T16:50:55Z", "type": "forcePushed"}, {"oid": "fcd5affb6426c0a4122fefb921b5277e301bf309", "url": "https://github.com/OpenLiberty/open-liberty/commit/fcd5affb6426c0a4122fefb921b5277e301bf309", "message": "make loginProperty public", "committedDate": "2020-10-21T21:55:34Z", "type": "forcePushed"}, {"oid": "85126bb9b6770adbf88f64274444527a40c0c7a8", "url": "https://github.com/OpenLiberty/open-liberty/commit/85126bb9b6770adbf88f64274444527a40c0c7a8", "message": "make loginProperty public", "committedDate": "2020-10-21T22:02:11Z", "type": "forcePushed"}, {"oid": "ca65e38e4209ee468f949cf78b4309e39bd4f4e8", "url": "https://github.com/OpenLiberty/open-liberty/commit/ca65e38e4209ee468f949cf78b4309e39bd4f4e8", "message": "make loginProperty public", "committedDate": "2020-10-23T19:16:11Z", "type": "forcePushed"}, {"oid": "c63c7181a4cb817354da6b73b5778c28de077144", "url": "https://github.com/OpenLiberty/open-liberty/commit/c63c7181a4cb817354da6b73b5778c28de077144", "message": "make loginProperty public", "committedDate": "2020-10-23T19:22:57Z", "type": "forcePushed"}, {"oid": "70e14b4b3571d1f18f882da534c6cc3371457544", "url": "https://github.com/OpenLiberty/open-liberty/commit/70e14b4b3571d1f18f882da534c6cc3371457544", "message": "make loginProperty public", "committedDate": "2020-10-23T19:24:52Z", "type": "forcePushed"}, {"oid": "f3ed57faad8e61b1f2f811982281e1448688e537", "url": "https://github.com/OpenLiberty/open-liberty/commit/f3ed57faad8e61b1f2f811982281e1448688e537", "message": "make loginProperty public", "committedDate": "2020-10-24T17:11:18Z", "type": "forcePushed"}, {"oid": "e68ca43e021a0b6ca0e3f9f46945f3d92ba9c2a5", "url": "https://github.com/OpenLiberty/open-liberty/commit/e68ca43e021a0b6ca0e3f9f46945f3d92ba9c2a5", "message": "make loginProperty public", "committedDate": "2020-10-25T22:04:18Z", "type": "forcePushed"}, {"oid": "fe2d82138c87abc4a4d6268608886b24ea176977", "url": "https://github.com/OpenLiberty/open-liberty/commit/fe2d82138c87abc4a4d6268608886b24ea176977", "message": "make loginProperty public", "committedDate": "2020-10-25T22:06:40Z", "type": "forcePushed"}, {"oid": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "url": "https://github.com/OpenLiberty/open-liberty/commit/a5164dba64f24a65a9ddd050a2e43ea123316ed3", "message": "make loginProperty public", "committedDate": "2020-10-26T01:41:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0Nzg1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512047859", "bodyText": "This comment still valid?", "author": "jvanhill", "createdAt": "2020-10-26T15:25:13Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java", "diffHunk": "@@ -634,10 +640,13 @@ private void setFilters(Map<String, Object> configProps) throws WIMSystemExcepti\n \n                 // Set the login property.\n                 // Remove the default uid login Property if userFilter is configured.", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NTU3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512085575", "bodyText": "Kind of, but I will reword it to make it more clear.", "author": "ryanesch", "createdAt": "2020-10-26T16:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0Nzg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\nindex b637d65368..1f00543949 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n\n@@ -638,9 +638,9 @@ public class LdapConfigManager {\n                     }\n                 }\n \n-                // Set the login property.\n-                // Remove the default uid login Property if userFilter is configured.\n-                // Only remove the login property if it was the default uid.\n+                // If loginProperties are not defined and we are using the userFilter,\n+                // remove the default uid login property. In this case, the first attribute\n+                // in the userFilter should be the principal.\n                 if (!isLoginPropertyDefined) {\n                     if (iLoginAttrs != null)\n                         iLoginAttrs.remove(0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0ODIxMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512048213", "bodyText": "javadoc", "author": "jvanhill", "createdAt": "2020-10-26T15:25:36Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java", "diffHunk": "@@ -3187,4 +3198,8 @@ public boolean isRacf() {\n     public Map<String, LdapAttribute> getAttributes() {\n         return iAttrNameToAttrMap;\n     }\n+\n+    public boolean loginPropertyDefined() {", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\nindex b637d65368..1f00543949 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n\n@@ -3199,6 +3199,13 @@ public class LdapConfigManager {\n         return iAttrNameToAttrMap;\n     }\n \n+    /**\n+     * Return True if loginProperties are defined in configuration.\n+     * This is used to distinguish between the default uid property\n+     * and explicitly defining uid as a login property.\n+     * \n+     * @return True if loginProperties are defined in configuration\n+     */\n     public boolean loginPropertyDefined() {\n         return isLoginPropertyDefined;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0OTA3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512049079", "bodyText": "Maybe create its own server instead? Easier to find trace post run when servers aren't sharing servers.", "author": "jvanhill", "createdAt": "2020-10-26T15:26:36Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MTY3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512091679", "bodyText": "I agree, it's less confusing.", "author": "ryanesch", "createdAt": "2020-10-26T16:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0OTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex 6a9ca4e525..757fc67063 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -48,7 +48,7 @@ import componenttest.topology.utils.LDAPUtils;\n @Mode(TestMode.FULL)\n public class LoginPropertyTest {\n     //Empty server.xml. We create the config here.\n-    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n     private static final Class<?> c = LoginPropertyTest.class;\n     private static UserRegistryServletConnection servlet;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDk3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512050970", "bodyText": "Maybe say this should be using the LDAP registries default user filters for the LDAP server type.", "author": "jvanhill", "createdAt": "2020-10-26T15:28:59Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter.", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex 6a9ca4e525..757fc67063 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -48,7 +48,7 @@ import componenttest.topology.utils.LDAPUtils;\n @Mode(TestMode.FULL)\n public class LoginPropertyTest {\n     //Empty server.xml. We create the config here.\n-    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n     private static final Class<?> c = LoginPropertyTest.class;\n     private static UserRegistryServletConnection servlet;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzMwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512053306", "bodyText": "The userFilter should be ignored if a loginProperty is defined. I would expect this test to verify that. There should be a warning issued noting that we are ignoring the userFilter if it is also defined explicitly.", "author": "jvanhill", "createdAt": "2020-10-26T15:31:59Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MzA5NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512183094", "bodyText": "I added the warning and included a check for the warning in this test.", "author": "ryanesch", "createdAt": "2020-10-26T18:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex 6a9ca4e525..757fc67063 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -48,7 +48,7 @@ import componenttest.topology.utils.LDAPUtils;\n @Mode(TestMode.FULL)\n public class LoginPropertyTest {\n     //Empty server.xml. We create the config here.\n-    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.input.output.mapping\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n     private static final Class<?> c = LoginPropertyTest.class;\n     private static UserRegistryServletConnection servlet;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDk2MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512060960", "bodyText": "Does this not apply if userFilter is used instead?", "author": "jvanhill", "createdAt": "2020-10-26T15:41:38Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java", "diffHunk": "@@ -534,27 +534,32 @@ public Root login(Root root) throws WIMException {\n             }\n \n             String searchExpr = \"@xsi:type=\" + quote + qName + quote + \" and \"\n-                                + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n+                            + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n \n             loginCtrl.setExpression(searchExpr);\n             srchCtrl = getLdapSearchControl(loginCtrl, false, false);\n             String[] searchBases = srchCtrl.getBases();\n-            String sFilter = srchCtrl.getFilter();\n+            String sFilter = null;\n \n-            if (iLdapConfigMgr.getUseEncodingInSearchExpression() != null)\n-                sFilter = LdapHelper.encodeAttribute(sFilter, iLdapConfigMgr.getUseEncodingInSearchExpression());\n-\n-            //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n-            String principalNameDN = null;\n-            try {\n-                principalNameDN = new LdapName(principalName).toString();\n-            } catch (InvalidNameException e) {\n-                e.getMessage();\n-            }\n-            Filter userFilter = iLdapConfigMgr.getUserFilter();\n-            if (principalNameDN == null && userFilter != null) {\n-                sFilter = userFilter.prepare(principalName);\n-                sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+            if (!iLdapConfigMgr.loginPropertyDefined()) {\n+                //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n+                String principalNameDN = null;\n+                try {\n+                    principalNameDN = new LdapName(principalName).toString();\n+                } catch (InvalidNameException e) {\n+                    e.getMessage();\n+                }\n+                Filter userFilter = iLdapConfigMgr.getUserFilter();\n+                if (principalNameDN == null && userFilter != null) {\n+                    sFilter = userFilter.prepare(principalName);\n+                    sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+                }\n+            }\n+            if (sFilter == null) {\n+                sFilter = srchCtrl.getFilter();\n+                if (iLdapConfigMgr.getUseEncodingInSearchExpression() != null) {", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTU0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512061549", "bodyText": "(I'm not sure what this call does)", "author": "jvanhill", "createdAt": "2020-10-26T15:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NDUzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512084537", "bodyText": "srchCtrl.getFilter does not apply if the userFilter is used. However, the userFilter is only used if loginProperties are not defined. I changed the order so that we aren't calling srchCtrl.getFilter when we aren't using it.", "author": "ryanesch", "createdAt": "2020-10-26T16:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3MjI1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512872255", "bodyText": "I meant the getUseEncodingInSearchExpression() and encodeAttribute(). Was that a stand-alone LDAP setting? Should we be checking whether to encode attributes whether the filter is statically or dynamically defined? The answer may be \"no\", but I am not sure.", "author": "jvanhill", "createdAt": "2020-10-27T17:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMDExMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512930110", "bodyText": "As discussed in slack, this is a property we have not exposed. I will handle this in an additional work item.", "author": "ryanesch", "createdAt": "2020-10-27T18:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\nindex 98aa966833..987b90f8ec 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n\n@@ -547,12 +547,14 @@ public class LdapAdapter extends BaseRepository implements ConfiguredRepository\n                 try {\n                     principalNameDN = new LdapName(principalName).toString();\n                 } catch (InvalidNameException e) {\n-                    e.getMessage();\n                 }\n                 Filter userFilter = iLdapConfigMgr.getUserFilter();\n                 if (principalNameDN == null && userFilter != null) {\n                     sFilter = userFilter.prepare(principalName);\n                     sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+                    //Issue a warning that the filter built using loginProperty is taking precedence over the defined userFilter.\n+                    if (tc.isWarningEnabled())\n+                        Tr.warning(tc, WIMMessageKey.LOGINPROPERTY_OVERRIDE_USERFILTER);\n                 }\n             }\n             if (sFilter == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTkwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512061902", "bodyText": "Ummmm.. are we just ignoring?", "author": "jvanhill", "createdAt": "2020-10-26T15:42:53Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java", "diffHunk": "@@ -534,27 +534,32 @@ public Root login(Root root) throws WIMException {\n             }\n \n             String searchExpr = \"@xsi:type=\" + quote + qName + quote + \" and \"\n-                                + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n+                            + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n \n             loginCtrl.setExpression(searchExpr);\n             srchCtrl = getLdapSearchControl(loginCtrl, false, false);\n             String[] searchBases = srchCtrl.getBases();\n-            String sFilter = srchCtrl.getFilter();\n+            String sFilter = null;\n \n-            if (iLdapConfigMgr.getUseEncodingInSearchExpression() != null)\n-                sFilter = LdapHelper.encodeAttribute(sFilter, iLdapConfigMgr.getUseEncodingInSearchExpression());\n-\n-            //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n-            String principalNameDN = null;\n-            try {\n-                principalNameDN = new LdapName(principalName).toString();\n-            } catch (InvalidNameException e) {\n-                e.getMessage();\n-            }\n-            Filter userFilter = iLdapConfigMgr.getUserFilter();\n-            if (principalNameDN == null && userFilter != null) {\n-                sFilter = userFilter.prepare(principalName);\n-                sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+            if (!iLdapConfigMgr.loginPropertyDefined()) {\n+                //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n+                String principalNameDN = null;\n+                try {\n+                    principalNameDN = new LdapName(principalName).toString();\n+                } catch (InvalidNameException e) {\n+                    e.getMessage();", "originalCommit": "a5164dba64f24a65a9ddd050a2e43ea123316ed3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4Mjg1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512082851", "bodyText": "Yes, I didn't change that behavior, but I can remove the e.getMessage.", "author": "ryanesch", "createdAt": "2020-10-26T16:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MTkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "04f3f93c580e597c3ec8752fcb239e445f04b134", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\nindex 98aa966833..987b90f8ec 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n\n@@ -547,12 +547,14 @@ public class LdapAdapter extends BaseRepository implements ConfiguredRepository\n                 try {\n                     principalNameDN = new LdapName(principalName).toString();\n                 } catch (InvalidNameException e) {\n-                    e.getMessage();\n                 }\n                 Filter userFilter = iLdapConfigMgr.getUserFilter();\n                 if (principalNameDN == null && userFilter != null) {\n                     sFilter = userFilter.prepare(principalName);\n                     sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+                    //Issue a warning that the filter built using loginProperty is taking precedence over the defined userFilter.\n+                    if (tc.isWarningEnabled())\n+                        Tr.warning(tc, WIMMessageKey.LOGINPROPERTY_OVERRIDE_USERFILTER);\n                 }\n             }\n             if (sFilter == null) {\n"}}, {"oid": "04f3f93c580e597c3ec8752fcb239e445f04b134", "url": "https://github.com/OpenLiberty/open-liberty/commit/04f3f93c580e597c3ec8752fcb239e445f04b134", "message": "make loginProperty public", "committedDate": "2020-10-26T17:16:41Z", "type": "forcePushed"}, {"oid": "9645cb1ceefaf196cf75204ce68174d624f603e3", "url": "https://github.com/OpenLiberty/open-liberty/commit/9645cb1ceefaf196cf75204ce68174d624f603e3", "message": "make loginProperty public", "committedDate": "2020-10-26T18:32:38Z", "type": "forcePushed"}, {"oid": "7fd1980b3942fbd5142be66a128722c80d17dd43", "url": "https://github.com/OpenLiberty/open-liberty/commit/7fd1980b3942fbd5142be66a128722c80d17dd43", "message": "make loginProperty public", "committedDate": "2020-10-26T20:23:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3MzQ0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512873448", "bodyText": "Lets use braces around any if statements for maintainability.", "author": "jvanhill", "createdAt": "2020-10-27T17:10:09Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java", "diffHunk": "@@ -534,27 +534,34 @@ public Root login(Root root) throws WIMException {\n             }\n \n             String searchExpr = \"@xsi:type=\" + quote + qName + quote + \" and \"\n-                                + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n+                            + SchemaConstants.PROP_PRINCIPAL_NAME + \"=\" + quote + principalName + quote;\n \n             loginCtrl.setExpression(searchExpr);\n             srchCtrl = getLdapSearchControl(loginCtrl, false, false);\n             String[] searchBases = srchCtrl.getBases();\n-            String sFilter = srchCtrl.getFilter();\n+            String sFilter = null;\n \n-            if (iLdapConfigMgr.getUseEncodingInSearchExpression() != null)\n-                sFilter = LdapHelper.encodeAttribute(sFilter, iLdapConfigMgr.getUseEncodingInSearchExpression());\n-\n-            //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n-            String principalNameDN = null;\n-            try {\n-                principalNameDN = new LdapName(principalName).toString();\n-            } catch (InvalidNameException e) {\n-                e.getMessage();\n-            }\n-            Filter userFilter = iLdapConfigMgr.getUserFilter();\n-            if (principalNameDN == null && userFilter != null) {\n-                sFilter = userFilter.prepare(principalName);\n-                sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+            if (!iLdapConfigMgr.loginPropertyDefined()) {\n+                //Check is input principalName is DN, if it is DN use the same for login otherwise use userFilter\n+                String principalNameDN = null;\n+                try {\n+                    principalNameDN = new LdapName(principalName).toString();\n+                } catch (InvalidNameException e) {\n+                }\n+                Filter userFilter = iLdapConfigMgr.getUserFilter();\n+                if (principalNameDN == null && userFilter != null) {\n+                    sFilter = userFilter.prepare(principalName);\n+                    sFilter = setAttributeNamesInFilter(sFilter, SchemaConstants.DO_PERSON_ACCOUNT);\n+                }\n+            }\n+            if (sFilter == null) {\n+                sFilter = srchCtrl.getFilter();\n+                if (iLdapConfigMgr.getUseEncodingInSearchExpression() != null) {\n+                    sFilter = LdapHelper.encodeAttribute(sFilter, iLdapConfigMgr.getUseEncodingInSearchExpression());\n+                }\n+                //Issue a warning that the filter built using loginProperty is taking precedence over the defined userFilter.\n+                if (tc.isWarningEnabled())", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\nindex a0818c2a62..4e95ca3421 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapAdapter.java\n\n@@ -560,8 +560,9 @@ public class LdapAdapter extends BaseRepository implements ConfiguredRepository\n                     sFilter = LdapHelper.encodeAttribute(sFilter, iLdapConfigMgr.getUseEncodingInSearchExpression());\n                 }\n                 //Issue a warning that the filter built using loginProperty is taking precedence over the defined userFilter.\n-                if (tc.isWarningEnabled())\n+                if (tc.isWarningEnabled()) {\n                     Tr.warning(tc, WIMMessageKey.LOGINPROPERTY_OVERRIDE_USERFILTER);\n+                }\n             }\n \n             int countLimit = srchCtrl.getCountLimit();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NjI3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512876275", "bodyText": "I would just call this original configuration, and update the comment. This statement was copied from one of my original dynamic tests, and I now regret that I didn't have more generic descriptions.", "author": "jvanhill", "createdAt": "2020-10-27T17:14:14Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NjczOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512876739", "bodyText": "Don't probably need this.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LDAPUtils.addLDAPVariables(libertyServer);", "author": "jvanhill", "createdAt": "2020-10-27T17:14:54Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMjg4Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512932886", "bodyText": "true", "author": "ryanesch", "createdAt": "2020-10-27T18:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NjczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NzE0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512877146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The original server configuration has no registry or Federated Repository configuration.\n          \n          \n            \n                     * Backup the original server configuration.", "author": "jvanhill", "createdAt": "2020-10-27T17:15:32Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3ODIwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512878205", "bodyText": "I would say that we define a user filter which allows a user to login with their CN to clarify the test.", "author": "jvanhill", "createdAt": "2020-10-27T17:17:08Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3OTAxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512879010", "bodyText": "Maybe say this test defines SN as a login property. It also define the userFilter. The user should be able to login with SN, but not CN and a warning should be thrown.", "author": "jvanhill", "createdAt": "2020-10-27T17:18:24Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3OTM2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512879366", "bodyText": "Add test before this to ensure the user can't login with CN. This way you verify that the loginProperty effectively cancels the userFilter.", "author": "jvanhill", "createdAt": "2020-10-27T17:18:53Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.\n+     * This test should issue a warning that the userFilter is ignored and\n+     * the dynamically built filter is used.\n+     * Additionally, we expect the user display name to be sn because loginProperty\n+     * takse precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MDEwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512880106", "bodyText": "I would probably just make this the same as the one above (use CN), and the key difference is NO userFilter was defined. It should perform identical to the test above I believe.", "author": "jvanhill", "createdAt": "2020-10-27T17:19:55Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.\n+     * This test should issue a warning that the userFilter is ignored and\n+     * the dynamically built filter is used.\n+     * Additionally, we expect the user display name to be sn because loginProperty\n+     * takse precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties.", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MTU3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512881576", "bodyText": "This one is using SN and CN, not UID. Maybe say that this one defines multiple login properties and NO user filter. I think all these test headers should kinda be documented the same:\nConfiguration:\n\nUserFilter: not explicitly configured\nLoginProperties: cn, sn\n\nExpected Results\n\nUser can login with CN and SN, but not with UID (which is defined in the default user filter).", "author": "jvanhill", "createdAt": "2020-10-27T17:22:01Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.\n+     * This test should issue a warning that the userFilter is ignored and\n+     * the dynamically built filter is used.\n+     * Additionally, we expect the user display name to be sn because loginProperty\n+     * takse precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties.\n+     * This test uses the dynamically created user filter.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn and uid from loginProperties.", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MjkyMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r512882922", "bodyText": "I think the negative test should be done for each attribute in all the other tests. SO we test login for UID, SN and CN in each test verifying that the positive and negative tests pass. Then you can remove this one.", "author": "jvanhill", "createdAt": "2020-10-27T17:23:40Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Log in the with the user's uid. No loginProperties. No userFilter defined.\n+     * This is using all the defaults, including loginProperty and the generated user filter.\n+     * Uid should work. Cn should fail.\n+     * Additionally, we expect the user display name to be uid.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's cn from userFilter. No loginProperties.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties. Include userFilter.\n+     * This test should issue a warning that the userFilter is ignored and\n+     * the dynamically built filter is used.\n+     * Additionally, we expect the user display name to be sn because loginProperty\n+     * takse precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn from loginProperties.\n+     * This test uses the dynamically created user filter.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Log in the with the user's sn and uid from loginProperties.\n+     * This test uses the dynamically created user filter.\n+     * Logging in with uid should fail.\n+     * Additionally, we expect the user display name to be cn as this is\n+     * the first listed loginProperty.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testMultipleLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"cn\", \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userCn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Attempt login the with the user's uid. The loginProperty\n+     * defined is sn so this test should fail.\n+     * This test uses the dynamically created user filter.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNonLoginProperty() throws Exception {", "originalCommit": "7fd1980b3942fbd5142be66a128722c80d17dd43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex d8b0fd17c6..bef0cade28 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,6 +23,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n"}}, {"oid": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "url": "https://github.com/OpenLiberty/open-liberty/commit/3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "message": "make loginProperty public", "committedDate": "2020-10-27T23:19:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMTg2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513531864", "bodyText": "Don't add it if it is not supported. I realize this will have no effect at this time, b/c we throw an exception below, but if we would change the flow for some reason to tolerate bad properties, this would make sure we don't add unsupported ones.", "author": "jvanhill", "createdAt": "2020-10-28T15:20:05Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java", "diffHunk": "@@ -1031,20 +1040,39 @@ private void setGroupMemberFilter() {\n \n     }\n \n-    private void setLoginProperties(String loginProps) {\n+    private void setLoginProperties(Map<String, Object> configProps) throws WIMSystemException {\n         if (iPersonAccountTypes.size() > 0) {\n             LdapEntity acct = getLdapEntity(iPersonAccountTypes.get(iPersonAccountTypes.size() - 1));\n             iLoginAttrs = new ArrayList<String>();\n             iLoginProps = new ArrayList<String>();\n-            if (loginProps != null) {\n-                String[] loginProperties = loginProps.split(\";\");\n-                for (int i = 0; i < loginProperties.length; i++) {\n-                    String propName = loginProperties[i];\n+            List<Map<String, Object>> loginProps = Nester.nest(ConfigConstants.CONFIG_PROP_LOGIN_PROPERTIES, configProps);\n+\n+            if (loginProps != null && !loginProps.isEmpty()) {\n+                isLoginPropertyDefined = true;\n+                List<String> unsupportedProps = new ArrayList<String>();\n+                for (Map<String, Object> propDO : loginProps) {\n+                    String propName = (String) propDO.get(ConfigConstants.CONFIG_PROP_NAME);\n+                    // Check if the property is supported or not\n+                    List<String> props = new ArrayList<String>(1);\n+                    props.add(propName);\n+                    List<String> supportedProp = getSupportedProperties(acct, props);\n+                    if (supportedProp == null || supportedProp.size() == 0) {\n+                        unsupportedProps.add(propName);\n+                    }\n                     iLoginAttrs.add(getAttributeName(acct, propName));", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\nindex 4021c7e96b..07948f1ef0 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConfigManager.java\n\n@@ -1058,9 +1058,10 @@ public class LdapConfigManager {\n                     List<String> supportedProp = getSupportedProperties(acct, props);\n                     if (supportedProp == null || supportedProp.size() == 0) {\n                         unsupportedProps.add(propName);\n+                    } else {\n+                        iLoginAttrs.add(getAttributeName(acct, propName));\n+                        iLoginProps.add(propName);\n                     }\n-                    iLoginAttrs.add(getAttributeName(acct, propName));\n-                    iLoginProps.add(propName);\n                 }\n                 if (!unsupportedProps.isEmpty()) {\n                     String props = \"\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMzMzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513533338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateLibertyServer(false, \"badconfig\");\n          \n          \n            \n                    updateLibertyServer(false, \"nonexistentprop\");", "author": "jvanhill", "createdAt": "2020-10-28T15:21:57Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());\n+        //    ldap.getAttributeConfiguration().getAttributes().add(new Attribute(\"givenName\", \"badconfig\", \"PersonAccount\", null, null));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with UID, but not with CN or SN.\n+     *\n+     * Additionally, we expect the user display name to be UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN (userFilter), but not with UID or SN.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN (loginProperty), but not with CN (userFilter) or UID.\n+     * When logging in with SN, a warning should be issued that indicates the dynamically\n+     * generated filter is used instead of the userFilter.\n+     *\n+     * Additionally, we expect the user display name to be SN because loginProperty\n+     * takes precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN, but not with CN or UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: CN, SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN and SN, but not with UID.\n+     *\n+     * Additionally, we expect the user display name to be cn as this is\n+     * the first listed loginProperty.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testMultipleLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"cn\", \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userCn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Define the loginProperty with a \"bad\" attribute (not a WIM property)\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testBadLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"badconfig\");", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzMzY2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513533661", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Define the loginProperty with a \"bad\" attribute (not a WIM property)\n          \n          \n            \n                 * Define the loginProperty with a \"bad\" attribute (not a WIM PersonAccount property)", "author": "jvanhill", "createdAt": "2020-10-28T15:22:19Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());\n+        //    ldap.getAttributeConfiguration().getAttributes().add(new Attribute(\"givenName\", \"badconfig\", \"PersonAccount\", null, null));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with UID, but not with CN or SN.\n+     *\n+     * Additionally, we expect the user display name to be UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN (userFilter), but not with UID or SN.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN (loginProperty), but not with CN (userFilter) or UID.\n+     * When logging in with SN, a warning should be issued that indicates the dynamically\n+     * generated filter is used instead of the userFilter.\n+     *\n+     * Additionally, we expect the user display name to be SN because loginProperty\n+     * takes precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN, but not with CN or UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: CN, SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN and SN, but not with UID.\n+     *\n+     * Additionally, we expect the user display name to be cn as this is\n+     * the first listed loginProperty.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testMultipleLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"cn\", \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userCn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Define the loginProperty with a \"bad\" attribute (not a WIM property)", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNTM4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513535388", "bodyText": "I see you tested if you could fix it with this... it shouldn't fix it. You should need to create an extendedProperty on PersonAccount of the same name to fix it. Perhaps in the last test where you test a bad property, you should resolve it by adding an extended property.", "author": "jvanhill", "createdAt": "2020-10-28T15:24:28Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());\n+        //    ldap.getAttributeConfiguration().getAttributes().add(new Attribute(\"givenName\", \"badconfig\", \"PersonAccount\", null, null));", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNTc0Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513535743", "bodyText": "Don't need this line, so either delete or uncomment it as you did with the line below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ldap.setAttributeConfiguration(new AttributeConfiguration());", "author": "jvanhill", "createdAt": "2020-10-28T15:24:56Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzNzg4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513537881", "bodyText": "I assume we make assertion on display name because it is mapped to principalName in the input / output mappings for display name? I am not sure if that is the case or not. This would apply to all tests.\nIf this is the case, explain that where we make this statement.", "author": "jvanhill", "createdAt": "2020-10-28T15:27:34Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());\n+        //    ldap.getAttributeConfiguration().getAttributes().add(new Attribute(\"givenName\", \"badconfig\", \"PersonAccount\", null, null));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with UID, but not with CN or SN.\n+     *\n+     * Additionally, we expect the user display name to be UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN (userFilter), but not with UID or SN.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN (loginProperty), but not with CN (userFilter) or UID.\n+     * When logging in with SN, a warning should be issued that indicates the dynamically\n+     * generated filter is used instead of the userFilter.\n+     *\n+     * Additionally, we expect the user display name to be SN because loginProperty\n+     * takes precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN, but not with CN or UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: CN, SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN and SN, but not with UID.\n+     *\n+     * Additionally, we expect the user display name to be cn as this is", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUzODQzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14608#discussion_r513538437", "bodyText": "As I mentioned above, maybe have a test where you resolve it by creating the extended property on PersonAccount.", "author": "jvanhill", "createdAt": "2020-10-28T15:28:20Z", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.LoginProperty;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+/**\n+ * Test the loginProperty. A user should be able to login with any loginProperty -\n+ * with or without the userFilter defined.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class LoginPropertyTest {\n+    //Empty server.xml. We create the config here.\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.loginproperty\");\n+    private static final Class<?> c = LoginPropertyTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * This is the original ServerConfiguration we use. This is overridden in each test based\n+     * on the necessary config/properties.\n+     */\n+    private static ServerConfiguration originalConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String DN = \"o=ibm,c=us\";\n+    private static final String userUid = \"user1\";\n+    private static final String USER_DN = \"uid=\" + userUid + \",\" + DN;\n+    private static final String userCn = \"user1cn\";\n+    private static final String userSn = \"user1sn\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4537E\", \"CWIML4505W\", \"CWIML4506E\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * Backup the original server configuration.\n+         */\n+        originalConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(DN);\n+\n+        Entry entry = new Entry(DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+\n+        /*\n+         * Create the user and group.\n+         */\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", userUid);\n+        entry.addAttribute(\"sn\", userSn);\n+        entry.addAttribute(\"cn\", userCn);\n+        entry.addAttribute(\"userPassword\", \"password\");\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer(boolean addFilters, String... loginProps) throws Exception {\n+        ServerConfiguration server = originalConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ldap.setLdapCache(new LdapCache(new AttributesCache(false, 0, 0, \"0s\"), new SearchResultsCache(false, 0, 0, \"0s\")));\n+        ldap.setAttributeConfiguration(new AttributeConfiguration());\n+        //    ldap.getAttributeConfiguration().getAttributes().add(new Attribute(\"givenName\", \"badconfig\", \"PersonAccount\", null, null));\n+        for (String prop : loginProps) {\n+            ldap.addLoginProperty(new LoginProperty(prop));\n+        }\n+\n+        if (addFilters) {\n+            ldap.setCustomFilters(new LdapFilters(\"(&(cn=%v)(objectclass=inetorgperson))\", null, \"user:postalCode\", null, null));\n+        }\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with UID, but not with CN or SN.\n+     *\n+     * Additionally, we expect the user display name to be UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testDefaultConfig() throws Exception {\n+        updateLibertyServer(false);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+        assertEquals(userUid, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: none\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN (userFilter), but not with UID or SN.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testNoLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true);\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userSn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: (&(cn=%v)(objectclass=inetorgperson))\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN (loginProperty), but not with CN (userFilter) or UID.\n+     * When logging in with SN, a warning should be issued that indicates the dynamically\n+     * generated filter is used instead of the userFilter.\n+     *\n+     * Additionally, we expect the user display name to be SN because loginProperty\n+     * takes precedence.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginPropertyWithFilter() throws Exception {\n+        updateLibertyServer(true, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4505W\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userSn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with SN, but not with CN or UID.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userCn, \"password\"));\n+    }\n+\n+    /**\n+     * Configuration:\n+     *\n+     * UserFilter: not explicitly configured\n+     * LoginProperties: CN, SN\n+     *\n+     * Expected Results:\n+     *\n+     * User can login with CN and SN, but not with UID.\n+     *\n+     * Additionally, we expect the user display name to be cn as this is\n+     * the first listed loginProperty.\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testMultipleLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"cn\", \"sn\");\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userSn, \"password\"));\n+        assertDNsEqual(\"Authentication should succeed.\",\n+                       USER_DN, servlet.checkPassword(userCn, \"password\"));\n+        assertNull(\"Authentication should not succeed.\", servlet.checkPassword(userUid, \"password\"));\n+        assertEquals(userCn, servlet.getUserDisplayName(USER_DN));\n+    }\n+\n+    /**\n+     * Define the loginProperty with a \"bad\" attribute (not a WIM property)\n+     *\n+     * @throws Exception If there was an unexpected exception.\n+     */\n+    @Test\n+    public void testBadLoginProperty() throws Exception {\n+        updateLibertyServer(false, \"badconfig\");\n+        assertNotNull(\"Should find CWIML4505W message.\", libertyServer.waitForStringInLog(\"CWIML4506E\"));", "originalCommit": "3d1df46756b4a328e1dd2577997fae3c3ef2dee5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "chunk": "diff --git a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\nindex bef0cade28..83e4a2c568 100644\n--- a/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n+++ b/dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/LoginPropertyTest.java\n\n@@ -23,8 +23,11 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.Attribute;\n import com.ibm.websphere.simplicity.config.wim.AttributeConfiguration;\n import com.ibm.websphere.simplicity.config.wim.AttributesCache;\n+import com.ibm.websphere.simplicity.config.wim.ExtendedProperty;\n+import com.ibm.websphere.simplicity.config.wim.FederatedRepository;\n import com.ibm.websphere.simplicity.config.wim.LdapCache;\n import com.ibm.websphere.simplicity.config.wim.LdapFilters;\n import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n"}}, {"oid": "9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "url": "https://github.com/OpenLiberty/open-liberty/commit/9fa0ce790066c2fa125e96bfcd228bf9be0e92e6", "message": "make loginProperty public", "committedDate": "2020-10-28T17:29:55Z", "type": "forcePushed"}, {"oid": "805ad9b59fde2c1d83d8178f6ad9f6a7a475ac74", "url": "https://github.com/OpenLiberty/open-liberty/commit/805ad9b59fde2c1d83d8178f6ad9f6a7a475ac74", "message": "make loginProperty public", "committedDate": "2020-10-28T18:00:50Z", "type": "forcePushed"}, {"oid": "cde8a0cde8cc87467baac10a70473a860cdf6390", "url": "https://github.com/OpenLiberty/open-liberty/commit/cde8a0cde8cc87467baac10a70473a860cdf6390", "message": "make loginProperty public", "committedDate": "2020-10-28T18:22:14Z", "type": "forcePushed"}, {"oid": "b1c297ccfd134d1ad23154ca7400df08067b4510", "url": "https://github.com/OpenLiberty/open-liberty/commit/b1c297ccfd134d1ad23154ca7400df08067b4510", "message": "make loginProperty public", "committedDate": "2020-10-29T05:11:51Z", "type": "forcePushed"}, {"oid": "a097645e996c9865e2f5540eec3171ecde4b1cae", "url": "https://github.com/OpenLiberty/open-liberty/commit/a097645e996c9865e2f5540eec3171ecde4b1cae", "message": "make loginProperty public", "committedDate": "2020-10-29T05:12:14Z", "type": "forcePushed"}, {"oid": "396e4ba98f3b0f8978f37496468ac1ff15b91831", "url": "https://github.com/OpenLiberty/open-liberty/commit/396e4ba98f3b0f8978f37496468ac1ff15b91831", "message": "make loginProperty public", "committedDate": "2020-10-30T15:58:03Z", "type": "commit"}, {"oid": "396e4ba98f3b0f8978f37496468ac1ff15b91831", "url": "https://github.com/OpenLiberty/open-liberty/commit/396e4ba98f3b0f8978f37496468ac1ff15b91831", "message": "make loginProperty public", "committedDate": "2020-10-30T15:58:03Z", "type": "forcePushed"}]}