{"pr_number": 14512, "pr_title": "13576: Updates to JWE builder functionality", "pr_createdAt": "2020-10-15T19:52:13Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14512", "timeline": [{"oid": "b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "url": "https://github.com/OpenLiberty/open-liberty/commit/b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "message": "13576: Updates to JWE builder functionality", "committedDate": "2020-10-15T19:59:46Z", "type": "forcePushed"}, {"oid": "0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "url": "https://github.com/OpenLiberty/open-liberty/commit/0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "message": "13576: Updates to JWE builder functionality", "committedDate": "2020-10-15T20:01:30Z", "type": "commit"}, {"oid": "0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "url": "https://github.com/OpenLiberty/open-liberty/commit/0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "message": "13576: Updates to JWE builder functionality", "committedDate": "2020-10-15T20:01:30Z", "type": "forcePushed"}, {"oid": "fad204269fe254ce829099cf13dcd4e03333d018", "url": "https://github.com/OpenLiberty/open-liberty/commit/fad204269fe254ce829099cf13dcd4e03333d018", "message": "Issue 13576: FAT test update for new JOSE typ header value", "committedDate": "2020-10-16T14:40:39Z", "type": "commit"}, {"oid": "ff0541a3509c32f2d3065a01be247cac36585890", "url": "https://github.com/OpenLiberty/open-liberty/commit/ff0541a3509c32f2d3065a01be247cac36585890", "message": "Issue 13576: NLS updates from review", "committedDate": "2020-10-19T14:40:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTk0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#discussion_r507915940", "bodyText": "For reference only: This is to comply with section 4.1.11 https://tools.ietf.org/html/rfc7516#section-4.1.11 of the JWE specification.", "author": "teddyjtorres", "createdAt": "2020-10-19T17:10:17Z", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/utils/JweCreator.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.jwt.utils;\n+\n+import java.security.Key;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+\n+import org.jose4j.jwe.ContentEncryptionAlgorithmIdentifiers;\n+import org.jose4j.jwe.JsonWebEncryption;\n+import org.jose4j.jwe.KeyManagementAlgorithmIdentifiers;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.security.jwt.InvalidTokenException;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.security.common.jwk.impl.JwkKidBuilder;\n+import com.ibm.ws.security.jwt.config.JwtConfig;\n+import com.ibm.ws.security.jwt.internal.BuilderImpl;\n+import com.ibm.ws.security.jwt.internal.JwtTokenException;\n+\n+public class JweCreator {\n+\n+    private static final TraceComponent tc = Tr.register(JweCreator.class);\n+\n+    @FFDCIgnore({ Exception.class })\n+    public static String createJweString(String jws, JwtData jwtData) throws Exception {\n+        JweCreator signer = new JweCreator();\n+        JwtConfig jwtConfig = jwtData.getConfig();\n+        try {\n+            JsonWebEncryption jwe = new JsonWebEncryption();\n+            BuilderImpl builder = jwtData.getBuilder();\n+            signer.setJweKeyData(jwe, builder, jwtConfig);\n+            signer.setJweHeaders(jwe, builder, jwtConfig);\n+            jwe.setPayload(jws);\n+            return signer.getJwtString(jwe);\n+        } catch (Exception e) {\n+            String errorMsg = Tr.formatMessage(tc, \"ERROR_BUILDING_SIGNED_JWE\", new Object[] { jwtConfig.getId(), e });\n+            throw new Exception(errorMsg, e);\n+        }\n+    }\n+\n+    void setJweKeyData(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = getKeyManagementKey(builder, jwtConfig);\n+        if (keyManagementKey == null) {\n+            String errorMsg = Tr.formatMessage(tc, \"KEY_MANAGEMENT_KEY_NOT_FOUND\", new Object[] { jwtConfig.getId(), jwtConfig.getKeyManagementKeyAlias(), jwtConfig.getTrustStoreRef() });\n+            throw new KeyStoreException(errorMsg);\n+        }\n+        jwe.setKey(keyManagementKey);\n+        setJweKidHeader(jwe, keyManagementKey);\n+    }\n+\n+    Key getKeyManagementKey(BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = builder.getKeyManagementKey();\n+        if (keyManagementKey == null) {\n+            keyManagementKey = getKeyManagementKeyFromTrustStore(jwtConfig);\n+        }\n+        return keyManagementKey;\n+    }\n+\n+    Key getKeyManagementKeyFromTrustStore(JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        String keyAlias = jwtConfig.getKeyManagementKeyAlias();\n+        String trustStoreRef = jwtConfig.getTrustStoreRef();\n+        return JwtUtils.getPublicKey(keyAlias, trustStoreRef);\n+    }\n+\n+    void setJweKidHeader(JsonWebEncryption jwe, Key keyManagementKey) {\n+        JwkKidBuilder kidbuilder = new JwkKidBuilder();\n+        String keyId = kidbuilder.buildKeyId(keyManagementKey);\n+        if (keyId != null) {\n+            jwe.setKeyIdHeaderValue(keyId);\n+        }\n+    }\n+\n+    void setJweHeaders(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) {\n+        jwe.setAlgorithmHeaderValue(getKeyManagementKeyAlgorithm(builder, jwtConfig));\n+        jwe.setEncryptionMethodHeaderParameter(getContentEncryptionAlgorithm(builder, jwtConfig));\n+        jwe.setHeader(\"typ\", \"JOSE\");", "originalCommit": "ff0541a3509c32f2d3065a01be247cac36585890", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3NDg2OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#discussion_r507974869", "bodyText": "No changes needed now, but may need to be set to \"JWT\" if causing problem with legacy implementations per https://tools.ietf.org/html/rfc7519#section-5.1.", "author": "teddyjtorres", "createdAt": "2020-10-19T18:30:37Z", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/utils/JweCreator.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.jwt.utils;\n+\n+import java.security.Key;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+\n+import org.jose4j.jwe.ContentEncryptionAlgorithmIdentifiers;\n+import org.jose4j.jwe.JsonWebEncryption;\n+import org.jose4j.jwe.KeyManagementAlgorithmIdentifiers;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.security.jwt.InvalidTokenException;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.security.common.jwk.impl.JwkKidBuilder;\n+import com.ibm.ws.security.jwt.config.JwtConfig;\n+import com.ibm.ws.security.jwt.internal.BuilderImpl;\n+import com.ibm.ws.security.jwt.internal.JwtTokenException;\n+\n+public class JweCreator {\n+\n+    private static final TraceComponent tc = Tr.register(JweCreator.class);\n+\n+    @FFDCIgnore({ Exception.class })\n+    public static String createJweString(String jws, JwtData jwtData) throws Exception {\n+        JweCreator signer = new JweCreator();\n+        JwtConfig jwtConfig = jwtData.getConfig();\n+        try {\n+            JsonWebEncryption jwe = new JsonWebEncryption();\n+            BuilderImpl builder = jwtData.getBuilder();\n+            signer.setJweKeyData(jwe, builder, jwtConfig);\n+            signer.setJweHeaders(jwe, builder, jwtConfig);\n+            jwe.setPayload(jws);\n+            return signer.getJwtString(jwe);\n+        } catch (Exception e) {\n+            String errorMsg = Tr.formatMessage(tc, \"ERROR_BUILDING_SIGNED_JWE\", new Object[] { jwtConfig.getId(), e });\n+            throw new Exception(errorMsg, e);\n+        }\n+    }\n+\n+    void setJweKeyData(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = getKeyManagementKey(builder, jwtConfig);\n+        if (keyManagementKey == null) {\n+            String errorMsg = Tr.formatMessage(tc, \"KEY_MANAGEMENT_KEY_NOT_FOUND\", new Object[] { jwtConfig.getId(), jwtConfig.getKeyManagementKeyAlias(), jwtConfig.getTrustStoreRef() });\n+            throw new KeyStoreException(errorMsg);\n+        }\n+        jwe.setKey(keyManagementKey);\n+        setJweKidHeader(jwe, keyManagementKey);\n+    }\n+\n+    Key getKeyManagementKey(BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = builder.getKeyManagementKey();\n+        if (keyManagementKey == null) {\n+            keyManagementKey = getKeyManagementKeyFromTrustStore(jwtConfig);\n+        }\n+        return keyManagementKey;\n+    }\n+\n+    Key getKeyManagementKeyFromTrustStore(JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        String keyAlias = jwtConfig.getKeyManagementKeyAlias();\n+        String trustStoreRef = jwtConfig.getTrustStoreRef();\n+        return JwtUtils.getPublicKey(keyAlias, trustStoreRef);\n+    }\n+\n+    void setJweKidHeader(JsonWebEncryption jwe, Key keyManagementKey) {\n+        JwkKidBuilder kidbuilder = new JwkKidBuilder();\n+        String keyId = kidbuilder.buildKeyId(keyManagementKey);\n+        if (keyId != null) {\n+            jwe.setKeyIdHeaderValue(keyId);\n+        }\n+    }\n+\n+    void setJweHeaders(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) {\n+        jwe.setAlgorithmHeaderValue(getKeyManagementKeyAlgorithm(builder, jwtConfig));\n+        jwe.setEncryptionMethodHeaderParameter(getContentEncryptionAlgorithm(builder, jwtConfig));\n+        jwe.setHeader(\"typ\", \"JOSE\");\n+        jwe.setHeader(\"cty\", \"jwt\");", "originalCommit": "ff0541a3509c32f2d3065a01be247cac36585890", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}