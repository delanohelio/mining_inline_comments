{"pr_number": 15196, "pr_title": "xmlClient-3.0/jaxwsClient-2.3 clientcontainer runtime updates", "pr_createdAt": "2020-12-07T06:29:48Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/15196", "timeline": [{"oid": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "url": "https://github.com/OpenLiberty/open-liberty/commit/b060abbfebc04abb43791dd6f2e25e4d63f31457", "message": "jaxwsClient-2.3 runtime update", "committedDate": "2020-12-07T06:35:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NjU0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537266540", "bodyText": "This code is identical to what's in the com.ibm.ws.jaxws.2.3.common bundle, but I intend to refactor all of the jaxws.2.x.common/jaxws.2.x.clientcontainer bundles to remove duplicate code.", "author": "neuwerk", "createdAt": "2020-12-07T06:45:33Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurer.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a827ccef06eda7a1cb23892303a340919b57960", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurer.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurer.java\ndeleted file mode 100644\nindex 6f748973f6..0000000000\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurer.java\n+++ /dev/null\n\n@@ -1,213 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.ibm.ws.jaxws;\n-\n-import java.util.Dictionary;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import org.apache.cxf.Bus;\n-import org.apache.cxf.transport.http.HTTPConduit;\n-import org.apache.cxf.transport.http.HTTPConduitConfigurer;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.service.cm.ConfigurationException;\n-\n-import com.ibm.websphere.ras.Tr;\n-import com.ibm.websphere.ras.TraceComponent;\n-\n-/**\n- *  Allows us to Apply our HTTPConduit configuration on a HTTPConduit via a ManagedService added to the Bus\n- *  Mostly borrowed from\n- *  org.apache.cxf.transport.http.asyncclient.Activator\n- *  org.apache.cxf.transport.http.osgi.HttpConduitConfigApplier\n- */\n-public class ConduitConfigurer extends ConduitConfigurerService  implements HTTPConduitConfigurer {\n-    \n-    //  Liberty Code change\n-    private static final TraceComponent tc = Tr.register(ConduitConfigurer.class);\n-    public static final String FACTORY_PID = \"org.apache.cxf.http.conduits\";\n-    public ConduitConfigurer(BundleContext context) {\n-        \n-        super(context);\n-        Bus[] buses = (Bus[])getServices();\n-        if (buses == null) {\n-            return;\n-        }\n-        for (Bus bus : buses) {\n-            bus.setExtension(this, HTTPConduitConfigurer.class );\n-        }\n-\n-    }\n-    \n-    //Liberty Code Change\n-    public ConduitConfigurer() {\n-        super(JaxwsConduitConfigActivator.context);\n-    }\n-\n-\n-    public void configure(String name, String address, HTTPConduit c) {\n-\n-        PidInfo byName = null;\n-        PidInfo byAddress = null;\n-        if (name != null) {\n-            byName = props.get(name);\n-        }\n-        if (address != null) {\n-            byAddress = props.get(address);\n-            if (byAddress == byName) {\n-                byAddress = null;\n-            }\n-        }\n-\n-        // Liberty Code Change\n-        JaxwsHttpConduitConfigApplier applier = new JaxwsHttpConduitConfigApplier();\n-        for (PidInfo info : sorted) {\n-            if (info.getMatcher() != null\n-                && info != byName\n-                && info != byAddress) {\n-                Matcher m = info.getMatcher();\n-                synchronized (m) {\n-                    m.reset(address);\n-                    if (m.matches()) {\n-                        applier.apply(info.getProps(), c, address);\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (byAddress != null) {\n-            applier.apply(byAddress.getProps(), c, address);\n-            \n-        }\n-        if (byName != null) {\n-            applier.apply(byName.getProps(), c, address);\n-        }\n-    }\n-    \n-    \n-    /**\n-     * Stores the configuration data index by matcher and sorted by order\n-     */\n-    private static class PidInfo implements Comparable<PidInfo> {\n-        final Dictionary<String, String> props;\n-        final Matcher matcher;\n-        final int order;\n-\n-        PidInfo(Dictionary<String, String> p, Matcher m, int o) {\n-            matcher = m;\n-            props = p;\n-            order = o;\n-        }\n-        public Dictionary<String, String> getProps() {\n-            return props;\n-        }\n-        public Matcher getMatcher() {\n-            return matcher;\n-        }\n-\n-        public int compareTo(PidInfo o) {\n-            if (order < o.order) {\n-                return -1;\n-            } else if (order > o.order) {\n-                return 1;\n-            }\n-            // priorities are equal\n-            if (matcher != null) {\n-                if (o.matcher == null) {\n-                    return -1;\n-                }\n-                return matcher.pattern().toString().compareTo(o.matcher.pattern().toString());\n-            }\n-            return 0;\n-        }\n-    }\n-\n-    Map<String, PidInfo> props\n-    = new ConcurrentHashMap<>(4, 0.75f, 2);\n-    CopyOnWriteArrayList<PidInfo> sorted = new CopyOnWriteArrayList<>();\n-\n-    public String getName() {\n-    return FACTORY_PID;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void updated(String pid, @SuppressWarnings(\"rawtypes\") Dictionary properties) throws ConfigurationException {\n-    if (pid == null) {\n-        return;\n-    }\n-    deleted(pid);\n-\n-    String url = (String)properties.get(\"url\");\n-    String name = (String)properties.get(\"name\");\n-    Matcher matcher = url == null ? null : Pattern.compile(url).matcher(\"\");\n-    String p = (String)properties.get(\"order\");\n-    int order = 50;\n-    if (p != null) {\n-        order = Integer.parseInt(p);\n-    }\n-\n-    PidInfo info = new PidInfo(properties, matcher, order);\n-\n-    props.put(pid, info);\n-    if (url != null) {\n-        props.put(url, info);\n-    }\n-    if (name != null) {\n-        props.put(name, info);\n-    }\n-    addToSortedInfos(info);\n-    }\n-\n-    private synchronized void addToSortedInfos(PidInfo pi) {\n-    int size = sorted.size();\n-    for (int x = 0; x < size; x++) {\n-        PidInfo p = sorted.get(x);\n-        if (pi.compareTo(p) < 0) {\n-            sorted.add(x, pi);\n-            return;\n-        }\n-    }\n-    sorted.add(pi);\n-    }\n-    private synchronized void removeFromSortedInfos(PidInfo pi) {\n-    sorted.remove(pi);\n-    }\n-\n-    public void deleted(String pid) {\n-    PidInfo info = props.remove(pid);\n-    if (info == null) {\n-        return;\n-    }\n-    removeFromSortedInfos(info);\n-    Dictionary<String, String> d = info.getProps();\n-    if (d != null) {\n-        String url = d.get(\"url\");\n-        String name = d.get(\"name\");\n-        if (url != null) {\n-            props.remove(url);\n-        }\n-        if (name != null) {\n-            props.remove(name);\n-        }\n-    }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NjYwMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537266600", "bodyText": "This code is identical to what's in the com.ibm.ws.jaxws.2.3.common bundle, but I intend to refactor all of the jaxws.2.x.common/jaxws.2.x.clientcontainer bundles to remove duplicate code.", "author": "neuwerk", "createdAt": "2020-12-07T06:45:43Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurerService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a827ccef06eda7a1cb23892303a340919b57960", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurerService.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurerService.java\ndeleted file mode 100644\nindex d149247949..0000000000\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/ConduitConfigurerService.java\n+++ /dev/null\n\n@@ -1,90 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.ibm.ws.jaxws;\n-\n-import java.util.Dictionary;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.cxf.Bus;\n-import org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.ServiceReference;\n-import org.osgi.service.cm.ConfigurationException;\n-import org.osgi.service.cm.ManagedService;\n-import org.osgi.util.tracker.ServiceTracker;\n-\n-import com.ibm.websphere.ras.Tr;\n-import com.ibm.websphere.ras.TraceComponent;\n-\n-/**\n- *  Lifted from org.apache.cxf.transport.http.asyncclient.Activator\n- */\n-public class ConduitConfigurerService extends ServiceTracker<Bus, Bus> implements ManagedService {\n-    private Map<String, Object> currentConfig;\n-    \n-    // Liberty Code Change\n-    private static final TraceComponent tc = Tr.register(ConduitConfigurerService.class);\n-\n- // Liberty Code Change\n-    public ConduitConfigurerService(BundleContext context) {\n-        super(context, Bus.class, null);\n-    }\n-   \n-\n-\n-    @Override\n-    public void updated(Dictionary<String, ?> properties) throws ConfigurationException {\n-        this.currentConfig = toMap(properties);\n-        Bus[] buses = (Bus[])getServices();\n-        if (buses == null) {\n-            return;\n-        }\n-        for (Bus bus : buses) {\n-            configureConduitFactory(bus);\n-        }\n-    }\n-\n-    @Override\n-    public Bus addingService(ServiceReference<Bus> reference) {\n-        Bus bus = super.addingService(reference);\n-        configureConduitFactory(bus);\n-        return bus;\n-    }\n-\n-    private Map<String, Object> toMap(Dictionary<String, ?> properties) {\n-        Map<String, Object> props = new HashMap<>();\n-        if (properties == null) {\n-            return props;\n-        }\n-        Enumeration<String> keys = properties.keys();\n-        while (keys.hasMoreElements()) {\n-            String key = keys.nextElement();\n-            props.put(key, properties.get(key));\n-        }\n-        return props;\n-    }\n-\n-    \n-    private void configureConduitFactory(Bus bus) {\n-        AsyncHTTPConduitFactory conduitFactory = bus.getExtension(AsyncHTTPConduitFactory.class);\n-        conduitFactory.update(this.currentConfig);\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NjY4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537266689", "bodyText": "This code is identical to what's in the com.ibm.ws.jaxws.2.3.common bundle, but I intend to refactor all of the jaxws.2.x.common/jaxws.2.x.clientcontainer bundles to remove duplicate code.", "author": "neuwerk", "createdAt": "2020-12-07T06:46:02Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsConduitConfigActivator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a827ccef06eda7a1cb23892303a340919b57960", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsConduitConfigActivator.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsConduitConfigActivator.java\ndeleted file mode 100644\nindex 9dc7236312..0000000000\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsConduitConfigActivator.java\n+++ /dev/null\n\n@@ -1,82 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.ibm.ws.jaxws;\n-\n-import java.util.Dictionary;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Hashtable;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import org.apache.cxf.Bus;\n-import org.apache.cxf.bus.extension.Extension;\n-import org.apache.cxf.transport.http.HTTPConduit;\n-import org.apache.cxf.transport.http.HTTPConduitConfigurer;\n-import org.apache.cxf.transport.http.HTTPTransportFactory;\n-import org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory;\n-import org.osgi.framework.BundleActivator;\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Constants;\n-import org.osgi.framework.ServiceReference;\n-import org.osgi.service.cm.ConfigurationException;\n-import org.osgi.service.cm.ManagedService;\n-import org.osgi.service.component.annotations.Activate;\n-import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.component.annotations.ConfigurationPolicy;\n-import org.osgi.service.component.annotations.Deactivate;\n-import org.osgi.util.tracker.ServiceTracker;\n-\n-import com.ibm.ws.jaxws.bus.ExtensionProvider;\n-import com.ibm.ws.jaxws.bus.LibertyApplicationBusListener;\n-\n-/**\n- *  Lifted from org.apache.cxf.transport.http.asyncclient.Activator\n- */\n-//Liberty Code Change\n-@Component(immediate = true, property = { \"service.vendor=IBM\" }, configurationPolicy = ConfigurationPolicy.OPTIONAL)\n-public class JaxwsConduitConfigActivator implements ExtensionProvider {\n-    private ConduitConfigurerService conduitConfigurerService;\n-    public static BundleContext context;\n-    @Activate\n-    public void start(BundleContext context) throws Exception {\n-        conduitConfigurerService = new ConduitConfigurerService(context);\n-        conduitConfigurerService.open();\n-        Dictionary<String, Object> properties = new Hashtable<>();\n-        properties.put(Constants.SERVICE_PID, \"org.apache.cxf.transport.http.async\");\n-        context.registerService(ManagedService.class.getName(), conduitConfigurerService, properties);\n-        this.context = context;\n-    }\n-\n-    @Deactivate\n-    public void stop(BundleContext context) throws Exception {\n-        conduitConfigurerService.close();\n-    }\n-\n- // Liberty Code Change\n-    @Override\n-    public Extension getExtension(Bus bus) {\n-        return new Extension((ConduitConfigurer.class), HTTPConduitConfigurer.class);\n-    }\n-\n-}\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2Njc0NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537266745", "bodyText": "This code is identical to what's in the com.ibm.ws.jaxws.2.3.common bundle, but I intend to refactor all of the jaxws.2.x.common/jaxws.2.x.clientcontainer bundles to remove duplicate code.", "author": "neuwerk", "createdAt": "2020-12-07T06:46:11Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsHttpConduitConfigApplier.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/**", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a827ccef06eda7a1cb23892303a340919b57960", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsHttpConduitConfigApplier.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsHttpConduitConfigApplier.java\ndeleted file mode 100644\nindex 70fca0f43b..0000000000\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/JaxwsHttpConduitConfigApplier.java\n+++ /dev/null\n\n@@ -1,387 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.ibm.ws.jaxws;\n-\n-\n-import java.util.Dictionary;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.StringTokenizer;\n-\n-import org.apache.cxf.configuration.jsse.TLSClientParameters;\n-import org.apache.cxf.configuration.jsse.TLSParameterJaxBUtils;\n-import org.apache.cxf.configuration.security.AuthorizationPolicy;\n-import org.apache.cxf.configuration.security.CertStoreType;\n-import org.apache.cxf.configuration.security.CertificateConstraintsType;\n-import org.apache.cxf.configuration.security.CombinatorType;\n-import org.apache.cxf.configuration.security.DNConstraintsType;\n-import org.apache.cxf.configuration.security.FiltersType;\n-import org.apache.cxf.configuration.security.KeyManagersType;\n-import org.apache.cxf.configuration.security.KeyStoreType;\n-import org.apache.cxf.configuration.security.ProxyAuthorizationPolicy;\n-import org.apache.cxf.configuration.security.SecureRandomParameters;\n-import org.apache.cxf.configuration.security.TrustManagersType;\n-import org.apache.cxf.transport.http.HTTPConduit;\n-import org.apache.cxf.transport.http.auth.HttpAuthSupplier;\n-import org.apache.cxf.transports.http.configuration.ConnectionType;\n-import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;\n-import org.apache.cxf.transports.http.configuration.ProxyServerType;\n-\n-import com.ibm.websphere.ras.Tr;\n-import com.ibm.websphere.ras.TraceComponent;\n-\n-/**\n- * Applies configuration properties to a HTTPConduit\n- * Lifted from org.apache.cxf.transport.http.osgi.HttpConduitConfigApplier\n- */\n-public class JaxwsHttpConduitConfigApplier {\n-    \n- // Liberty Code Change\n-    private static final TraceComponent tc = Tr.register(JaxwsHttpConduitConfigApplier.class);\n-    private static final String SECURE_HTTP_PREFIX = \"https\";\n-\n-    public JaxwsHttpConduitConfigApplier() {\n-        \n-    }\n-\n-    public void apply(Dictionary<String, String> d, HTTPConduit c, String address) {\n-        applyClientPolicies(d, c);\n-        applyAuthorization(d, c);\n-        applyProxyAuthorization(d, c);\n-        if (address != null && address.startsWith(SECURE_HTTP_PREFIX)) {\n-            applyTlsClientParameters(d, c);\n-        }\n-        applyAuthSupplier(d, c);\n-    }\n-\n-    private void applyTlsClientParameters(Dictionary<String, String> d, HTTPConduit c) {\n-\n-        Enumeration<String> keys = d.keys();\n-        TLSClientParameters p = c.getTlsClientParameters();\n-        SecureRandomParameters srp = null;\n-        KeyManagersType kmt = null;\n-        TrustManagersType tmt = null;\n-        boolean enableRevocation = false;\n-        while (keys.hasMoreElements()) {\n-            String k = keys.nextElement();\n-            if (k.startsWith(\"tlsClientParameters.\")) {\n-                if (p == null) {\n-                    p = new TLSClientParameters();\n-                    c.setTlsClientParameters(p);\n-                }\n-                String v = d.get(k);\n-                k = k.substring(\"tlsClientParameters.\".length());\n-\n-                if (\"secureSocketProtocol\".equals(k)) {\n-                    p.setSecureSocketProtocol(v);\n-                } else if (\"sslCacheTimeout\".equals(k)) {\n-                    p.setSslCacheTimeout(Integer.parseInt(v));\n-                } else if (\"jsseProvider\".equals(k)) {\n-                    p.setJsseProvider(v);\n-                } else if (\"disableCNCheck\".equals(k)) {\n-                    p.setDisableCNCheck(Boolean.parseBoolean(v));\n-                } else if (\"useHttpsURLConnectionDefaultHostnameVerifier\".equals(k)) {\n-                    p.setUseHttpsURLConnectionDefaultHostnameVerifier(Boolean.parseBoolean(v));\n-                } else if (\"useHttpsURLConnectionDefaultSslSocketFactory\".equals(k)) {\n-                    p.setUseHttpsURLConnectionDefaultSslSocketFactory(Boolean.parseBoolean(v));\n-                } else if (\"enableRevocation\".equals(k)) {\n-                    enableRevocation = Boolean.parseBoolean(v);\n-                } else if (k.startsWith(\"certConstraints.\")) {\n-                    parseCertConstaints(p, k, v);\n-                } else if (k.startsWith(\"secureRandomParameters.\")) {\n-                    k = k.substring(\"secureRandomParameters.\".length());\n-                    if (srp == null) {\n-                        srp = new SecureRandomParameters();\n-                    }\n-                    if (\"algorithm\".equals(k)) {\n-                        srp.setAlgorithm(v);\n-                    } else if (\"provider\".equals(k)) {\n-                        srp.setProvider(v);\n-                    }\n-                } else if (k.startsWith(\"cipherSuitesFilter.\")) {\n-                    k = k.substring(\"cipherSuitesFilter.\".length());\n-                    StringTokenizer st = new StringTokenizer(v, \",\");\n-                    FiltersType ft = p.getCipherSuitesFilter();\n-                    if (ft == null) {\n-                        ft = new FiltersType();\n-                        p.setCipherSuitesFilter(ft);\n-                    }\n-                    List<String> lst = \"include\".equals(k) ? ft.getInclude() : ft.getExclude();\n-                    while (st.hasMoreTokens()) {\n-                        lst.add(st.nextToken());\n-                    }\n-                } else if (k.startsWith(\"cipherSuites\")) {\n-                    StringTokenizer st = new StringTokenizer(v, \",\");\n-                    while (st.hasMoreTokens()) {\n-                        p.getCipherSuites().add(st.nextToken());\n-                    }\n-                } else if (k.startsWith(\"trustManagers.\")) {\n-                    tmt = getTrustManagers(tmt,\n-                                          k.substring(\"trustManagers.\".length()),\n-                                          v);\n-                } else if (k.startsWith(\"keyManagers.\")) {\n-                    kmt = getKeyManagers(kmt,\n-                                         k.substring(\"keyManagers.\".length()),\n-                                         v);\n-                }\n-            }\n-        }\n-\n-        try {\n-            if (srp != null) {\n-                p.setSecureRandom(TLSParameterJaxBUtils.getSecureRandom(srp));\n-            }\n-            if (kmt != null) {\n-                p.setKeyManagers(TLSParameterJaxBUtils.getKeyManagers(kmt));\n-            }\n-            if (tmt != null) {\n-                p.setTrustManagers(TLSParameterJaxBUtils.getTrustManagers(tmt, enableRevocation));\n-            }\n-        } catch (RuntimeException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private void parseCertConstaints(TLSClientParameters p, String k, String v) {\n-\n-        k = k.substring(\"certConstraints.\".length());\n-        CertificateConstraintsType cct = p.getCertConstraints();\n-        if (cct == null) {\n-            cct = new CertificateConstraintsType();\n-            p.setCertConstraints(cct);\n-        }\n-        DNConstraintsType dnct = null;\n-        if (k.startsWith(\"SubjectDNConstraints.\")) {\n-            dnct = cct.getSubjectDNConstraints();\n-            if (dnct == null) {\n-                dnct = new DNConstraintsType();\n-                cct.setSubjectDNConstraints(dnct);\n-            }\n-            k = k.substring(\"SubjectDNConstraints.\".length());\n-        } else if (k.startsWith(\"IssuerDNConstraints.\")) {\n-            dnct = cct.getIssuerDNConstraints();\n-            if (dnct == null) {\n-                dnct = new DNConstraintsType();\n-                cct.setIssuerDNConstraints(dnct);\n-            }\n-            k = k.substring(\"IssuerDNConstraints.\".length());\n-        }\n-        if (dnct != null) {\n-            if (\"combinator\".equals(k)) {\n-                dnct.setCombinator(CombinatorType.fromValue(v));\n-            } else if (\"RegularExpression\".equals(k)) {\n-                dnct.getRegularExpression().add(k);\n-            }\n-        }\n-    }\n-\n-    private KeyManagersType getKeyManagers(KeyManagersType keyManagers, String k, String v) {\n- \n-        if (keyManagers == null) {\n-            keyManagers = new KeyManagersType();\n-        }\n-        if (\"factoryAlgorithm\".equals(k)) {\n-            keyManagers.setFactoryAlgorithm(v);\n-        } else if (\"provider\".equals(k)) {\n-            keyManagers.setProvider(v);\n-        } else if (\"keyPassword\".equals(k)) {\n-            keyManagers.setKeyPassword(v);\n-        } else if (k.startsWith(\"keyStore.\")) {\n-            keyManagers.setKeyStore(getKeyStore(keyManagers.getKeyStore(),\n-                                                k.substring(\"keyStore.\".length()),\n-                                                v));\n-        }\n-        return keyManagers;\n-    }\n-\n-    private KeyStoreType getKeyStore(KeyStoreType ks, String k, String v) {\n-        if (ks == null) {\n-            ks = new KeyStoreType();\n-        }\n-        if (\"type\".equals(k)) {\n-            ks.setType(v);\n-        } else if (\"password\".equals(k)) {\n-            ks.setPassword(v);\n-        } else if (\"provider\".equals(k)) {\n-            ks.setProvider(v);\n-        } else if (\"url\".equals(k)) {\n-            ks.setUrl(v);\n-        } else if (\"file\".equals(k)) {\n-            ks.setFile(v);\n-        } else if (\"resource\".equals(k)) {\n-            ks.setResource(v);\n-        }\n-        return ks;\n-    }\n-\n-    private TrustManagersType getTrustManagers(TrustManagersType tmt, String k, String v) {\n-        if (tmt == null) {\n-            tmt = new TrustManagersType();\n-        }\n-        if (\"provider\".equals(k)) {\n-            tmt.setProvider(v);\n-        } else if (\"factoryAlgorithm\".equals(k)) {\n-            tmt.setFactoryAlgorithm(v);\n-        } else if (k.startsWith(\"keyStore.\")) {\n-            tmt.setKeyStore(getKeyStore(tmt.getKeyStore(),\n-                                        k.substring(\"keyStore.\".length()),\n-                                        v));\n-        } else if (k.startsWith(\"certStore\")) {\n-            tmt.setCertStore(getCertStore(tmt.getCertStore(),\n-                                          k.substring(\"certStore.\".length()),\n-                                          v));\n-        }\n-        return tmt;\n-    }\n-\n-    private CertStoreType getCertStore(CertStoreType cs, String k, String v) {\n-        if (cs == null) {\n-            cs = new CertStoreType();\n-        }\n-        if (\"file\".equals(k)) {\n-            cs.setFile(v);\n-        } else if (\"url\".equals(k)) {\n-            cs.setUrl(v);\n-        } else if (\"resource\".equals(k)) {\n-            cs.setResource(v);\n-        }\n-        return cs;\n-    }\n-\n-    private void applyProxyAuthorization(Dictionary<String, String> d, HTTPConduit c) {\n-        Enumeration<String> keys = d.keys();\n-        ProxyAuthorizationPolicy p = c.getProxyAuthorization();\n-        while (keys.hasMoreElements()) {\n-            String k = keys.nextElement();\n-            if (k.startsWith(\"proxyAuthorization.\")) {\n-                if (p == null) {\n-                    p = new ProxyAuthorizationPolicy();\n-                    c.setProxyAuthorization(p);\n-                }\n-                String v = d.get(k);\n-                k = k.substring(\"proxyAuthorization.\".length());\n-\n-                if (\"UserName\".equals(k)) {\n-                    p.setUserName(v);\n-                } else if (\"Password\".equals(k)) {\n-                    p.setPassword(v);\n-                } else if (\"Authorization\".equals(k)) {\n-                    p.setAuthorization(v);\n-                } else if (\"AuthorizationType\".equals(k)) {\n-                    p.setAuthorizationType(v);\n-                }\n-            }\n-        }\n-    }\n-\n-    private void applyAuthorization(Dictionary<String, String> d, HTTPConduit c) {\n-        Enumeration<String> keys = d.keys();\n-        AuthorizationPolicy p = c.getAuthorization();\n-        while (keys.hasMoreElements()) {\n-            String k = keys.nextElement();\n-            if (k.startsWith(\"authorization.\")) {\n-                if (p == null) {\n-                    p = new AuthorizationPolicy();\n-                    c.setAuthorization(p);\n-                }\n-                String v = d.get(k);\n-                k = k.substring(\"authorization.\".length());\n-\n-                if (\"UserName\".equals(k)) {\n-                    p.setUserName(v);\n-                } else if (\"Password\".equals(k)) {\n-                    p.setPassword(v);\n-                } else if (\"Authorization\".equals(k)) {\n-                    p.setAuthorization(v);\n-                } else if (\"AuthorizationType\".equals(k)) {\n-                    p.setAuthorizationType(v);\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    private void applyClientPolicies(Dictionary<String, String> d, HTTPConduit c) {\n-        Enumeration<String> keys = d.keys();\n-        HTTPClientPolicy p = c.getClient();\n-        while (keys.hasMoreElements()) {\n-            String k = keys.nextElement();\n-            if (k.startsWith(\"client.\")) {\n-                if (p == null) {\n-                    p = new HTTPClientPolicy();\n-                    c.setClient(p);\n-                }\n-                String v = d.get(k);\n-                k = k.substring(\"client.\".length());\n-                if (\"ConnectionTimeout\".equals(k)) {\n-                    p.setConnectionTimeout(Long.parseLong(v.trim()));\n-                } else if (\"ReceiveTimeout\".equals(k)) {\n-                    p.setReceiveTimeout(Long.parseLong(v.trim()));\n-                } else if (\"AsyncExecuteTimeout\".equals(k)) {\n-                    p.setAsyncExecuteTimeout(Long.parseLong(v.trim()));\n-                } else if (\"AsyncExecuteTimeoutRejection\".equals(k)) {\n-                    p.setAsyncExecuteTimeoutRejection(Boolean.parseBoolean(v.trim()));\n-                } else if (\"AutoRedirect\".equals(k)) {\n-                    p.setAutoRedirect(Boolean.parseBoolean(v.trim()));\n-                } else if (\"MaxRetransmits\".equals(k)) {\n-                    p.setMaxRetransmits(Integer.parseInt(v.trim()));\n-                } else if (\"AllowChunking\".equals(k)) {\n-                    p.setAllowChunking(Boolean.parseBoolean(v.trim()));\n-                } else if (\"ChunkingThreshold\".equals(k)) {\n-                    p.setChunkingThreshold(Integer.parseInt(v.trim()));\n-                } else if (\"ChunkLength\".equals(k)) {\n-                    p.setChunkLength(Integer.parseInt(v.trim()));\n-                } else if (\"Connection\".equals(k)) {\n-                    p.setConnection(ConnectionType.valueOf(v));\n-                } else if (\"DecoupledEndpoint\".equals(k)) {\n-                    p.setDecoupledEndpoint(v);\n-                } else if (\"ProxyServer\".equals(k)) {\n-                    p.setProxyServer(v);\n-                } else if (\"ProxyServerPort\".equals(k)) {\n-                    p.setProxyServerPort(Integer.parseInt(v.trim()));\n-                } else if (\"ProxyServerType\".equals(k)) {\n-                    p.setProxyServerType(ProxyServerType.fromValue(v));\n-                } else if (\"NonProxyHosts\".equals(k)) {\n-                    p.setNonProxyHosts(v);\n-                }\n-            }\n-        }\n-    }\n-\n-    private void applyAuthSupplier(Dictionary<String, String> d, HTTPConduit c) {\n-        Enumeration<String> keys = d.keys();\n-        while (keys.hasMoreElements()) {\n-            String k = keys.nextElement();\n-            if (k.startsWith(\"authSupplier\")) {\n-                String v = d.get(k);\n-                Object obj;\n-                try {\n-                    obj = Class.forName(v).newInstance();\n-                } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n-                    throw new RuntimeException(e);\n-                }\n-                if (obj instanceof HttpAuthSupplier) {\n-                    c.setAuthSupplier((HttpAuthSupplier)obj);\n-                }\n-            }\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzA0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537267046", "bodyText": "Remove  unnecessary duplicate vars with final attribute", "author": "neuwerk", "createdAt": "2020-12-07T06:46:59Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java", "diffHunk": "@@ -95,9 +106,16 @@ public LibertyApplicationBus createBus(Map<Class<?>, Object> e, Map<String, Obje\n \n         Bus originalBus = getThreadDefaultBus(false);\n \n+        final Map<Class<?>, Object> e1 = e;", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "993f60414cbe4ac9f95a1d19ffde9fc9aa066fa1", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\nindex 03de66251e..9a65b27cdd 100644\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n\n@@ -102,18 +102,15 @@ public class LibertyApplicationBusFactory extends CXFBusFactory {\n         return createBus(e, properties, THREAD_CONTEXT_ACCESSOR.getContextClassLoader(Thread.currentThread()));\n     }\n \n-    public LibertyApplicationBus createBus(Map<Class<?>, Object> e, Map<String, Object> properties, ClassLoader classLoader) {\n+    public LibertyApplicationBus createBus(final Map<Class<?>, Object> e,final Map<String, Object> properties,final ClassLoader classLoader) {\n \n         Bus originalBus = getThreadDefaultBus(false);\n \n-        final Map<Class<?>, Object> e1 = e;\n-        final Map<String, Object> properties1 = properties;\n-        final ClassLoader classLoader1 = classLoader;\n         try {\n             LibertyApplicationBus bus = AccessController.doPrivileged(new PrivilegedAction<LibertyApplicationBus>() {\n                 @Override\n                 public LibertyApplicationBus run() {\n-                    return new LibertyApplicationBus(e1, properties1, classLoader1);\n+                    return new LibertyApplicationBus(e, properties, classLoader);\n                 }\n             });\n             //Considering that we have set the default bus in JaxWsService, no need to set default bus\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzM3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537267373", "bodyText": "Add a TODO to remove the LoggingInterceptors from the client and server, and switch to using the LoggingFeature", "author": "neuwerk", "createdAt": "2020-12-07T06:47:48Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java", "diffHunk": "@@ -115,6 +133,16 @@ public LibertyApplicationBus createBus(Map<Class<?>, Object> e, Map<String, Obje\n             }\n \n             bus.initialize();\n+\n+            // Always register LibertyLoggingIn(Out)Interceptor Pretty print the SOAP Messages\n+            final LibertyLoggingInInterceptor in = new LibertyLoggingInInterceptor();", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "993f60414cbe4ac9f95a1d19ffde9fc9aa066fa1", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\nindex 03de66251e..9a65b27cdd 100644\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n\n@@ -134,6 +131,7 @@ public class LibertyApplicationBusFactory extends CXFBusFactory {\n \n             bus.initialize();\n \n+            // TODO: Switch to using CXF's Logging Feature\n             // Always register LibertyLoggingIn(Out)Interceptor Pretty print the SOAP Messages\n             final LibertyLoggingInInterceptor in = new LibertyLoggingInInterceptor();\n             in.setPrettyLogging(true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzU1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537267553", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2012 IBM Corporation and others.\n          \n          \n            \n             * Copyright (c) 2012, 2020 IBM Corporation and others.", "author": "neuwerk", "createdAt": "2020-12-07T06:48:20Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/ServiceRefObjectFactory.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2019 IBM Corporation and others.\n+ * Copyright (c) 2012 IBM Corporation and others.", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3426fb7adc6c323f4cc77eb0f858ad182bb417b9", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/ServiceRefObjectFactory.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/ServiceRefObjectFactory.java\nindex 8a82673c41..2e45235f78 100755\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/ServiceRefObjectFactory.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/ServiceRefObjectFactory.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2012 IBM Corporation and others.\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NzYyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537267627", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2012 IBM Corporation and others.\n          \n          \n            \n             * Copyright (c) 2012,2020 IBM Corporation and others.", "author": "neuwerk", "createdAt": "2020-12-07T06:48:37Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/WebServiceRefBinding.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2019 IBM Corporation and others.\n+ * Copyright (c) 2012 IBM Corporation and others.", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3426fb7adc6c323f4cc77eb0f858ad182bb417b9", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/WebServiceRefBinding.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/WebServiceRefBinding.java\nindex dd77af2662..8f20e0ec4f 100644\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/WebServiceRefBinding.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/client/injection/WebServiceRefBinding.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2012 IBM Corporation and others.\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2OTIzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r537269237", "bodyText": "This change is simply the easiest way to test a jaxwsClient-2.3 feature, but will not be delivered once I've verified  that the runtime update is successful in a Personal Build.", "author": "neuwerk", "createdAt": "2020-12-07T06:52:45Z", "path": "dev/com.ibm.ws.jaxws.clientcontainer_fat/fat/src/com/ibm/ws/jaxws/clientcontainer/fat/FATSuite.java", "diffHunk": "@@ -25,4 +28,8 @@\n                 WsBndServiceRefOverrideTest.class\n })\n public class FATSuite {\n+    @ClassRule\n+    public static RepeatTests r = RepeatTests.withoutModification()\n+                    .andWith(FeatureReplacementAction.EE8_FEATURES());", "originalCommit": "b060abbfebc04abb43791dd6f2e25e4d63f31457", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "993f60414cbe4ac9f95a1d19ffde9fc9aa066fa1", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.clientcontainer_fat/fat/src/com/ibm/ws/jaxws/clientcontainer/fat/FATSuite.java b/dev/com.ibm.ws.jaxws.clientcontainer_fat/fat/src/com/ibm/ws/jaxws/clientcontainer/fat/FATSuite.java\nindex a2d52b6b8a..b49228759c 100755\n--- a/dev/com.ibm.ws.jaxws.clientcontainer_fat/fat/src/com/ibm/ws/jaxws/clientcontainer/fat/FATSuite.java\n+++ b/dev/com.ibm.ws.jaxws.clientcontainer_fat/fat/src/com/ibm/ws/jaxws/clientcontainer/fat/FATSuite.java\n\n@@ -28,8 +25,4 @@ import componenttest.rules.repeater.RepeatTests;\n                 WsBndServiceRefOverrideTest.class\n })\n public class FATSuite {\n-    @ClassRule\n-    public static RepeatTests r = RepeatTests.withoutModification()\n-                    .andWith(FeatureReplacementAction.EE8_FEATURES());\n-\n }\n"}}, {"oid": "3426fb7adc6c323f4cc77eb0f858ad182bb417b9", "url": "https://github.com/OpenLiberty/open-liberty/commit/3426fb7adc6c323f4cc77eb0f858ad182bb417b9", "message": "intial code review changes", "committedDate": "2020-12-10T19:27:22Z", "type": "forcePushed"}, {"oid": "4ac288de36320b53dbf1f1fd39a622ddd071cb35", "url": "https://github.com/OpenLiberty/open-liberty/commit/4ac288de36320b53dbf1f1fd39a622ddd071cb35", "message": "intial code review changes", "committedDate": "2020-12-11T05:34:29Z", "type": "forcePushed"}, {"oid": "f91d4b23dc53930bdc29382932fa0ce48f9206ba", "url": "https://github.com/OpenLiberty/open-liberty/commit/f91d4b23dc53930bdc29382932fa0ce48f9206ba", "message": "Add xmlWSClient-3.0 feature", "committedDate": "2020-12-15T19:37:40Z", "type": "forcePushed"}, {"oid": "993f60414cbe4ac9f95a1d19ffde9fc9aa066fa1", "url": "https://github.com/OpenLiberty/open-liberty/commit/993f60414cbe4ac9f95a1d19ffde9fc9aa066fa1", "message": "Add xmlWSClient-3.0 feature\n\nClean up jaxwsClient changes\n\nRemove doPriv dupped vars'\n\nfix missing import", "committedDate": "2020-12-15T20:35:42Z", "type": "forcePushed"}, {"oid": "d6ade2ea067848fda253db590a8da3490cb2717c", "url": "https://github.com/OpenLiberty/open-liberty/commit/d6ade2ea067848fda253db590a8da3490cb2717c", "message": "Add xmlWSClient-3.0 feature\n\nClean up jaxwsClient changes\n\nRemove doPriv dupped vars'\n\nfix missing import\n\nRemove unnecessary change", "committedDate": "2020-12-15T20:50:00Z", "type": "forcePushed"}, {"oid": "9506ca0bfa5edd175491dfd932b2f63e1a27bf44", "url": "https://github.com/OpenLiberty/open-liberty/commit/9506ca0bfa5edd175491dfd932b2f63e1a27bf44", "message": "Add xmlWSClient-3.0 feature\n\nClean up jaxwsClient changes\n\nRemove doPriv dupped vars'\n\nfix missing import\n\nRemove unnecessary change\n\nPB fixes and bringing in needed dependencies\n\nAdd proper versioning", "committedDate": "2020-12-16T16:54:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMjkwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r544632901", "bodyText": "Should be fixed in com.ibm.ws.jaxws.clientcontainer, com.ibm.ws.jaxrs.2.0.common and com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2 components as well?", "author": "jhanders34", "createdAt": "2020-12-16T21:23:47Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java", "diffHunk": "@@ -242,7 +268,7 @@ public void postShutdown() {\n         @Override\n         public void preShutdown() {\n             for (LibertyApplicationBusListener listener : listeners) {\n-                listener.postShutdown(bus);\n+                listener.preShutdown(bus);", "originalCommit": "9506ca0bfa5edd175491dfd932b2f63e1a27bf44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwODAwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r544708006", "bodyText": "Yes, good catch.", "author": "neuwerk", "createdAt": "2020-12-16T23:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMjkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a827ccef06eda7a1cb23892303a340919b57960", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\nindex 9a65b27cdd..9794bbc2c4 100644\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws/bus/LibertyApplicationBusFactory.java\n\n@@ -268,7 +242,7 @@ public class LibertyApplicationBusFactory extends CXFBusFactory {\n         @Override\n         public void preShutdown() {\n             for (LibertyApplicationBusListener listener : listeners) {\n-                listener.preShutdown(bus);\n+                listener.postShutdown(bus);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY4NjY3OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r544686679", "bodyText": "In the common component we renamed this to be Security instead of SSL", "author": "jhanders34", "createdAt": "2020-12-16T23:03:23Z", "path": "dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSSLOutInterceptor.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxws23.client.security;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.xml.namespace.QName;\n+\n+import org.apache.cxf.common.util.PropertyUtils;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.cxf.configuration.jsse.TLSClientParameters;\n+import org.apache.cxf.interceptor.Fault;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.transport.Conduit;\n+import org.apache.cxf.transport.http.HTTPConduit;\n+import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;\n+import org.apache.cxf.ws.addressing.EndpointReferenceType;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.jaxws.metadata.ConfigProperties;\n+import com.ibm.ws.jaxws.metadata.PortComponentRefInfo;\n+import com.ibm.ws.jaxws.metadata.WebServiceRefInfo;\n+import com.ibm.ws.jaxws.security.JaxWsSecurityConfigurationService;\n+import com.ibm.wsspi.kernel.service.utils.AtomicServiceReference;\n+\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.interceptor.Fault;\n+import org.apache.cxf.message.Message;\n+import org.apache.cxf.phase.AbstractPhaseInterceptor;\n+import org.apache.cxf.phase.Phase;\n+import org.apache.cxf.service.model.EndpointInfo;\n+import org.apache.cxf.transport.Conduit;\n+import org.apache.cxf.transport.http.HTTPConduit;\n+import org.apache.cxf.transport.http.HTTPConduitConfigurer;\n+import org.osgi.service.cm.ConfigurationException;\n+import org.osgi.service.cm.ManagedServiceFactory;\n+\n+import com.ibm.websphere.ras.ProtectedString;\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Sensitive;\n+import com.ibm.ws.jaxws.JaxWsConstants;\n+import com.ibm.ws.jaxws.metadata.ConfigProperties;\n+import com.ibm.ws.jaxws.metadata.PortComponentRefInfo;\n+import com.ibm.ws.jaxws.metadata.WebServiceRefInfo;\n+import com.ibm.ws.jaxws.security.JaxWsSecurityConfigurationService;\n+\n+/**\n+ * Used to set the SSL config on the Client side conduit. This removes the need to modify the\n+ * HttpConduit directly through an extended LibertyHttpConduit \n+ */\n+public class LibertyJaxWsClientSSLOutInterceptor extends AbstractPhaseInterceptor<Message> {", "originalCommit": "c0133534f970eb84111f82164f68c623fa686461", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMDMwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r544710305", "bodyText": "I hadn't intended this to remain when I pulled in my changes from the other PR, I will fix it.", "author": "neuwerk", "createdAt": "2020-12-17T00:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY4NjY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fa05ae1595eb2bd00dc6f1c2cf4aa6ee1a7e8777", "chunk": "diff --git a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSSLOutInterceptor.java b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSecurityOutInterceptor.java\nsimilarity index 70%\nrename from dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSSLOutInterceptor.java\nrename to dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSecurityOutInterceptor.java\nindex 89f3e921c8..2378a357fd 100644\n--- a/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSSLOutInterceptor.java\n+++ b/dev/com.ibm.ws.jaxws.2.3.clientcontainer/src/com/ibm/ws/jaxws23/client/security/LibertyJaxWsClientSecurityOutInterceptor.java\n\n@@ -10,38 +10,11 @@\n  *******************************************************************************/\n package com.ibm.ws.jaxws23.client.security;\n \n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-import javax.net.ssl.SSLSocketFactory;\n import javax.xml.namespace.QName;\n \n-import org.apache.cxf.common.util.PropertyUtils;\n-import org.apache.cxf.common.util.StringUtils;\n-import org.apache.cxf.configuration.jsse.TLSClientParameters;\n-import org.apache.cxf.interceptor.Fault;\n-import org.apache.cxf.message.Message;\n-import org.apache.cxf.phase.AbstractPhaseInterceptor;\n-import org.apache.cxf.transport.Conduit;\n-import org.apache.cxf.transport.http.HTTPConduit;\n-import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;\n-import org.apache.cxf.ws.addressing.EndpointReferenceType;\n-\n-import com.ibm.websphere.ras.Tr;\n-import com.ibm.websphere.ras.TraceComponent;\n-import com.ibm.ws.jaxws.metadata.ConfigProperties;\n-import com.ibm.ws.jaxws.metadata.PortComponentRefInfo;\n-import com.ibm.ws.jaxws.metadata.WebServiceRefInfo;\n-import com.ibm.ws.jaxws.security.JaxWsSecurityConfigurationService;\n-import com.ibm.wsspi.kernel.service.utils.AtomicServiceReference;\n-\n-import org.apache.cxf.Bus;\n import org.apache.cxf.interceptor.Fault;\n import org.apache.cxf.message.Message;\n import org.apache.cxf.phase.AbstractPhaseInterceptor;\n"}}, {"oid": "fa05ae1595eb2bd00dc6f1c2cf4aa6ee1a7e8777", "url": "https://github.com/OpenLiberty/open-liberty/commit/fa05ae1595eb2bd00dc6f1c2cf4aa6ee1a7e8777", "message": "Updates to get xmlWS working more\n\n- Updates to get xml files to parse correctly\n- Transformation updates for both soap and jaxb\n- Transform com.ibm.ws.jaxws.tools\n- Updates to do proper replacement for jaxws-2.2 when doing EE9 testing\n\nCode review changes", "committedDate": "2020-12-17T01:53:58Z", "type": "forcePushed"}, {"oid": "0a827ccef06eda7a1cb23892303a340919b57960", "url": "https://github.com/OpenLiberty/open-liberty/commit/0a827ccef06eda7a1cb23892303a340919b57960", "message": "Update jaxws.2.3.common to implement missing methods", "committedDate": "2020-12-17T18:01:43Z", "type": "commit"}, {"oid": "1b505c70937f277372053683cb7c113a18a1f86c", "url": "https://github.com/OpenLiberty/open-liberty/commit/1b505c70937f277372053683cb7c113a18a1f86c", "message": "jaxwsClient-2.3 runtime update", "committedDate": "2020-12-17T18:01:44Z", "type": "commit"}, {"oid": "07e3e3ef8169ccf82b4d464602548a00e95a411e", "url": "https://github.com/OpenLiberty/open-liberty/commit/07e3e3ef8169ccf82b4d464602548a00e95a411e", "message": "intial code review changes", "committedDate": "2020-12-17T18:01:45Z", "type": "commit"}, {"oid": "d236f12fc0906e2a9d7a44e170a3b55177b25751", "url": "https://github.com/OpenLiberty/open-liberty/commit/d236f12fc0906e2a9d7a44e170a3b55177b25751", "message": "Add xmlWSClient-3.0 feature\n\nClean up jaxwsClient changes\n\nRemove doPriv dupped vars'\n\nfix missing import\n\nRemove unnecessary change\n\nPB fixes and bringing in needed dependencies\n\nAdd proper versioning", "committedDate": "2020-12-17T18:01:45Z", "type": "commit"}, {"oid": "32710d8e95feb94ed007162b7c697a450a6068a8", "url": "https://github.com/OpenLiberty/open-liberty/commit/32710d8e95feb94ed007162b7c697a450a6068a8", "message": "Updates to get xmlWS working more\n\n- Updates to get xml files to parse correctly\n- Transformation updates for both soap and jaxb\n- Transform com.ibm.ws.jaxws.tools\n- Updates to do proper replacement for jaxws-2.2 when doing EE9 testing\n\nCode review changes", "committedDate": "2020-12-17T18:01:46Z", "type": "commit"}, {"oid": "82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "url": "https://github.com/OpenLiberty/open-liberty/commit/82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "message": "More code review clean up\n\nCode review changes continued\n\n...yet more fixes\n\nRemove feature default\n\nRemove additional feature disable\n\nRemove duplicate cxf client bundle from jaxrs-2.1 features", "committedDate": "2020-12-17T18:01:50Z", "type": "commit"}, {"oid": "82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "url": "https://github.com/OpenLiberty/open-liberty/commit/82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "message": "More code review clean up\n\nCode review changes continued\n\n...yet more fixes\n\nRemove feature default\n\nRemove additional feature disable\n\nRemove duplicate cxf client bundle from jaxrs-2.1 features", "committedDate": "2020-12-17T18:01:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMzc3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r545313776", "bodyText": "Good catch!", "author": "andymc12", "createdAt": "2020-12-17T18:35:54Z", "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/com/ibm/ws/jaxrs20/bus/LibertyApplicationBusFactory.java", "diffHunk": "@@ -260,7 +260,7 @@ public void postShutdown() {\n         @Override\n         public void preShutdown() {\n             for (LibertyApplicationBusListener listener : listeners) {\n-                listener.postShutdown(bus);\n+                listener.preShutdown(bus);", "originalCommit": "82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNzc5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15196#discussion_r545327793", "bodyText": "\ud83d\udc4d", "author": "andymc12", "createdAt": "2020-12-17T18:56:22Z", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/com/ibm/ws/jaxrs20/bus/LibertyApplicationBusFactory.java", "diffHunk": "@@ -260,7 +260,7 @@ public void postShutdown() {\n         @Override\n         public void preShutdown() {\n             for (LibertyApplicationBusListener listener : listeners) {\n-                listener.postShutdown(bus);\n+                listener.preShutdown(bus);", "originalCommit": "82b858f4e32b74e6fc3ba1bd4515f3d274a6d2c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a1b8ea2b02b01831560495680d5a529fbe774080", "url": "https://github.com/OpenLiberty/open-liberty/commit/a1b8ea2b02b01831560495680d5a529fbe774080", "message": "Code review changes", "committedDate": "2020-12-17T21:55:22Z", "type": "commit"}]}