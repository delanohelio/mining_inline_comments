{"pr_number": 11956, "pr_title": "Issue 10519: Add automatic certificate checker for ACME", "pr_createdAt": "2020-04-27T22:33:47Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/11956", "timeline": [{"oid": "7be671fcee2edd5a729bd6897d34e24f8283a884", "url": "https://github.com/OpenLiberty/open-liberty/commit/7be671fcee2edd5a729bd6897d34e24f8283a884", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-04-28T23:35:52Z", "type": "forcePushed"}, {"oid": "2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "url": "https://github.com/OpenLiberty/open-liberty/commit/2b2de001186f653bcb1b33dc3295b35fbfeda5b2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-04-29T00:31:13Z", "type": "forcePushed"}, {"oid": "8d0621266ab009ec299e258cea2d3bdd7d7203bd", "url": "https://github.com/OpenLiberty/open-liberty/commit/8d0621266ab009ec299e258cea2d3bdd7d7203bd", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-05T16:21:24Z", "type": "forcePushed"}, {"oid": "b9d9e8957178350017581547954a20d6640551c3", "url": "https://github.com/OpenLiberty/open-liberty/commit/b9d9e8957178350017581547954a20d6640551c3", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-06T21:39:23Z", "type": "forcePushed"}, {"oid": "7278842706f1c113876df7999df8950ff25c0fd9", "url": "https://github.com/OpenLiberty/open-liberty/commit/7278842706f1c113876df7999df8950ff25c0fd9", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-07T17:56:59Z", "type": "forcePushed"}, {"oid": "4209ed88a777d99664bec85d42e00b69debb8dc4", "url": "https://github.com/OpenLiberty/open-liberty/commit/4209ed88a777d99664bec85d42e00b69debb8dc4", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-08T21:44:50Z", "type": "forcePushed"}, {"oid": "d97b67139350af9954297a685020db11f8d334dc", "url": "https://github.com/OpenLiberty/open-liberty/commit/d97b67139350af9954297a685020db11f8d334dc", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:07:16Z", "type": "forcePushed"}, {"oid": "fbc0d213e234a3d3d4c020704a78a1b81acd7ae8", "url": "https://github.com/OpenLiberty/open-liberty/commit/fbc0d213e234a3d3d4c020704a78a1b81acd7ae8", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:08:40Z", "type": "forcePushed"}, {"oid": "4e05e61b18b7f9886a713a76afe8951dbe367230", "url": "https://github.com/OpenLiberty/open-liberty/commit/4e05e61b18b7f9886a713a76afe8951dbe367230", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-12T23:31:33Z", "type": "forcePushed"}, {"oid": "26cfb4c4f35670924236ce7dce35ebc21dc23ff4", "url": "https://github.com/OpenLiberty/open-liberty/commit/26cfb4c4f35670924236ce7dce35ebc21dc23ff4", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-14T12:26:03Z", "type": "forcePushed"}, {"oid": "109a476d7c7185b4407859b7daa6094b3a19b8d2", "url": "https://github.com/OpenLiberty/open-liberty/commit/109a476d7c7185b4407859b7daa6094b3a19b8d2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-14T21:27:18Z", "type": "forcePushed"}, {"oid": "6845d90e9431ea0fa38bee94f5f61dda3fc290a9", "url": "https://github.com/OpenLiberty/open-liberty/commit/6845d90e9431ea0fa38bee94f5f61dda3fc290a9", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-18T23:19:01Z", "type": "forcePushed"}, {"oid": "1f77c3a044cc23674011c0bfe30e35aaf18bd666", "url": "https://github.com/OpenLiberty/open-liberty/commit/1f77c3a044cc23674011c0bfe30e35aaf18bd666", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-19T03:41:38Z", "type": "forcePushed"}, {"oid": "e96c8b9cd9994d138a3b734aac68474f75aa9e4f", "url": "https://github.com/OpenLiberty/open-liberty/commit/e96c8b9cd9994d138a3b734aac68474f75aa9e4f", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-19T21:56:28Z", "type": "forcePushed"}, {"oid": "64968e70abbb8c9982d7eb459895bccf146c716e", "url": "https://github.com/OpenLiberty/open-liberty/commit/64968e70abbb8c9982d7eb459895bccf146c716e", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-20T21:51:55Z", "type": "forcePushed"}, {"oid": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "url": "https://github.com/OpenLiberty/open-liberty/commit/2f6b2e064a59fab0895e2e923e8f743f676cb99e", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-21T19:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODQ3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429318473", "bodyText": "The interface should specify AcmeCaException instead. The reason being, the CRRBE class is internal, and this interface is used by other components (none of which care about that exception). AcmeCaRestHandler would of course handle the CRRBE exception.", "author": "jvanhill", "createdAt": "2020-05-22T15:37:13Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java", "diffHunk": "@@ -124,5 +125,14 @@ public File createDefaultSSLCertificate(String filePath, String password, String\n \t */\n \tpublic void updateDefaultSSLCertificate(KeyStore keyStore, File keyStoreFile, @Sensitive String password)\n \t\t\tthrows CertificateException;\n+\t\n+\t/**\n+\t * Checks whether a certificate renew is allowed. If a renew just happened, the\n+\t * request will be blocked.\n+\t * \n+\t * @throws CertificateRenewRequestBlockedException\n+\t * \t\t\tIf a certificate renew just happened\n+\t */\n+\tpublic void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Nzg5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429387893", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-22T18:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java\nindex 4fe056536f..535677f66e 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/AcmeProvider.java\n\n@@ -128,11 +128,11 @@ public interface AcmeProvider {\n \t\n \t/**\n \t * Checks whether a certificate renew is allowed. If a renew just happened, the\n-\t * request will be blocked.\n+\t * request is blocked.\n \t * \n-\t * @throws CertificateRenewRequestBlockedException\n+\t * @throws AcmeCaException\n \t * \t\t\tIf a certificate renew just happened\n \t */\n-\tpublic void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException;\n+\tpublic void checkCertificateRenewAllowed() throws AcmeCaException;\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODQwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429358401", "bodyText": "Did you mean to leave this TODO?", "author": "jvanhill", "createdAt": "2020-05-22T17:01:34Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the\n+ * ACME CA certificate is either expiring or revoked and renews the certificate\n+ * if necessary.\n+ */\n+public class AcmeCertCheckerTask implements Runnable {\n+\n+\tprivate static final TraceComponent tc = Tr.register(AcmeCertCheckerTask.class);\n+\n+\tprivate final AcmeProviderImpl acmeProviderImpl;\n+\n+\tprivate ScheduledFuture<?> certChecker;\n+\n+\tprivate ScheduledExecutorService service = null;\n+\t\n+\tprivate volatile boolean runningOnErrorSchedule = false;\n+\n+\tpublic AcmeCertCheckerTask(AcmeProviderImpl acmePI) {\n+\t\tacmeProviderImpl = acmePI;\n+\t}\n+\n+\t/**\n+\t * Stop the scheduler and void the ScheduledFuture\n+\t */\n+\tpublic synchronized void stop() {\n+\t\tcancel(true);\n+\t\tcertChecker = null;\n+\t}\n+\n+\t/**\n+\t * Start the certificate checker scheduled task. It will first cancel any\n+\t * existing task and then schedule a new repeating task.\n+\t * \n+\t * @param service\n+\t * @param acmeCon\n+\t */\n+\tprotected synchronized void startCertificateChecker(ScheduledExecutorService service) {\n+\t\tcancel(true);\n+\n+\t\tif (acmeProviderImpl.getAcmeConfig() == null) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc, \"Provided acmeProviderImpl.getAcmeConfig() is null, cannot start certificate checker\");\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler() == 0\n+\t\t\t\t|| (!acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t&& !acmeProviderImpl.getAcmeConfig().isRevocationCheckerEnabled())) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\"ScheduledExecutorService not started for AcmeCertChecker, it is disabled-- getCertCheckerScheduler: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler()\n+\t\t\t\t\t\t\t\t+ \", isAutoRenewOnExpiration: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t\t\t+ \", isRevocationCheckerEnabled: \"\n+\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().isRevocationCheckerEnabled());\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (service == null) {\n+\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\tTr.debug(tc, \"Provided ScheduledExecutorService is null, cannot start certificate checker\");\n+\t\t\t}\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.service = service;\n+\n+\t\tif (tc.isDebugEnabled()) {\n+\t\t\tTr.debug(tc, \"ScheduledExecutorService starting, time: \"\n+\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler());\n+\t\t}\n+\t\tstartRegularSchedule();\n+\t}\n+\n+\t/**\n+\t * Scheduled task to check if the current certificate is expiring or revoked. If\n+\t * it is expiring or revoked, a certificate request is made. If an exception occurs,\n+\t * it continues to run, but is rescheduled on the error schedule.\n+\t */\n+\t@Override\n+\tpublic void run() {\n+\n+\t\tboolean isExpired = false, isRevoked = false;\n+\t\tList<X509Certificate> currentCert = null;\n+\n+\t\tacmeProviderImpl.acquireWriteLock();\n+\t\ttry {\n+\t\t\tcurrentCert = acmeProviderImpl.getConfiguredDefaultCertificateChain();\n+\n+\t\t\tif (currentCert == null) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Attempted to check the current certificate, but it was null.\");\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tif (acmeProviderImpl.getAcmeConfig().isAutoRenewOnExpiration()\n+\t\t\t\t\t\t&& acmeProviderImpl.isExpired(currentCert)) {\n+\t\t\t\t\tisExpired = true;\n+\t\t\t\t} else if (acmeProviderImpl.isRevoked(currentCert)) {\n+\t\t\t\t\tisRevoked = true;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (isExpired || isRevoked) {\n+\t\t\t\tif (isExpired) {\n+\t\t\t\t\tTr.info(tc, \"CWPKI2052I\", currentCert.get(0).getSerialNumber().toString(16),\n+\t\t\t\t\t\t\tcurrentCert.get(0).getNotAfter().toInstant().toString(),\n+\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getDirectoryURI());\n+\t\t\t\t} else if (isRevoked) {\n+\t\t\t\t\tTr.info(tc, \"CWPKI2067I\", currentCert.get(0).getSerialNumber().toString(16),\n+\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getDirectoryURI());\n+\t\t\t\t}\n+\t\t\t\tacmeProviderImpl.renewCertificate();\n+\t\t\t} else {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\"ACME automatic certificate checker verified that the ACME CA cert is valid. Next check is \"\n+\t\t\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerScheduler() + \"ms. SN is \"\n+\t\t\t\t\t\t\t\t\t+ currentCert.get(0).getSerialNumber().toString(16));\n+\t\t\t\t}\n+\n+\t\t\t\tif (runningOnErrorSchedule) {\n+\t\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\t\"ACME automatic certificate checker was running on error time, but we have a valid certificate, swap back to the regular schedule\");\n+\t\t\t\t\t}\n+\t\t\t\t\tstartRegularSchedule();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t}\n+\n+\t\t} catch (Throwable t) {\n+\t\t\ttry {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Requested a new certificate, but request failed.\", t);\n+\t\t\t\t}\n+\t\t\t\tif (currentCert == null) {\n+\t\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\t\tTr.debug(tc,\n+\t\t\t\t\t\t\t\t\"Attempted to check the current certificate, but it was null. Stay on regular schedule.\");\n+\t\t\t\t\t}\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tString sn = currentCert.get(0).getSerialNumber().toString(16);\n+\t\t\t\t\tif (isExpired) {\n+\t\t\t\t\t\tTr.warning(tc, \"CWPKI2065W\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\",\n+\t\t\t\t\t\t\t\tcurrentCert.get(0).getNotAfter().toInstant().toString(), t);\n+\t\t\t\t\t} else if (isRevoked) {\n+\t\t\t\t\t\tTr.error(tc, \"CWPKI2066E\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\", t);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tTr.warning(tc, \"CWPKI2068W\", sn,\n+\t\t\t\t\t\t\t\tacmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler() + \"ms\", t);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tcancel(false);\n+\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Certificate request failed, swapping to the error schedule: \"\n+\t\t\t\t\t\t\t+ acmeProviderImpl.getAcmeConfig().getCertCheckerErrorScheduler());\n+\t\t\t\t}\n+\t\t\t} finally {\n+\t\t\t\tstartErrorSchedule();\n+\t\t\t}\n+\n+\t\t} finally {\n+\t\t\tacmeProviderImpl.releaseWriteLock();\n+\n+\t\t\t// to-do: Can we fall into a hole where we canceled the previous schedule and", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Nzk0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429387948", "bodyText": "Removed", "author": "kristip17", "createdAt": "2020-05-22T18:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1ODQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\nindex a475789b36..a1d7d42917 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n\n@@ -19,10 +19,9 @@ import java.util.concurrent.TimeUnit;\n \n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n-import com.ibm.websphere.ras.annotation.Trivial;\n \n /**\n- * The AcmeCertChecker runs in the background and periodically checks if the\n+ * The AcmeCertCheckerTask runs in the background and periodically checks if the\n  * ACME CA certificate is either expiring or revoked and renews the certificate\n  * if necessary.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDA3Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429360077", "bodyText": "Weird that we are using junit.framework.Assert and org.junit.Assert", "author": "jvanhill", "createdAt": "2020-05-22T17:05:40Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java", "diffHunk": "@@ -12,11 +12,13 @@\n \n import static junit.framework.Assert.assertEquals;\n import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNotNull;\n import static junit.framework.Assert.fail;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4OTM4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429389381", "bodyText": "Manually changed the imports to org.junit.Assert.", "author": "kristip17", "createdAt": "2020-05-22T18:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java\nindex 54b6f35e04..eb5edfbc00 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java\n\n@@ -10,15 +10,14 @@\n  *******************************************************************************/\n package com.ibm.ws.security.acme.fat;\n \n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertFalse;\n-import static junit.framework.Assert.assertNotNull;\n-import static junit.framework.Assert.fail;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429361767", "bodyText": "assertNotSame checks whether they are the same exact instance, not that they are equivalent. You may want to assert that the serials are not the same number (not instance)", "author": "jvanhill", "createdAt": "2020-05-22T17:09:51Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -347,14 +362,302 @@ public void serverRenewOnRestart() throws Exception {\n \t\t\tassertNotSame(\"The certificate should have been marked as expired at startup and renewed.\",\n \t\t\t\t\t((X509Certificate) startingCertificateChain[0]).getSerialNumber(),\n \t\t\t\t\t((X509Certificate) endingCertificateChain[0]).getSerialNumber());\n+\n+\t\t\tassertNotNull(\"Should log  message that the certificate was renewed\",\n+\t\t\t\t\tserver.waitForStringInLogUsingMark(\"CWPKI2052I\"));\n \t\t} finally {\n-\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: Shutdown.\");\n \n \t\t\t/*\n \t\t\t * Stop the server.\n \t\t\t */\n \t\t\tserver.stopServer(\"CWPKI2055W\"); // we are running with and intentionally short renewBeforeExpiration.\n \t\t}\n \n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 3: Start with a very short renew period and short cert checker time out,\n+\t\t * causing a renew request at runtime.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(),\n+\t\t\t\t\t\"TEST 3: Restart with renew time close to validity period and short cert checker.\");\n+\n+\t\t\tconfiguration.getAcmeCA().setCertCheckerSchedule((timeBufferToExpire + 1000) + \"ms\");\n+\t\t\tconfiguration.getAcmeCA().setCertCheckerSchedule(AcmeConstants.RENEW_CERT_MIN + \"ms\");\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, DOMAINS1);\n+\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server got a new certificate at startup\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotSame(\"The certificate should have been marked as expired at startup and renewed.\",", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjkwMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429362900", "bodyText": "assertThat(value, not(equal(othervalue)))", "author": "jvanhill", "createdAt": "2020-05-22T17:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5MDU2Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429390563", "bodyText": "Changed", "author": "kristip17", "createdAt": "2020-05-22T18:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\nindex 6e1ad9b658..4e39e3e522 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\n\n@@ -398,9 +395,10 @@ public class AcmeValidityAndRenewTest {\n \t\t\t */\n \t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n \n-\t\t\tassertNotSame(\"The certificate should have been marked as expired at startup and renewed.\",\n-\t\t\t\t\t((X509Certificate) startingCertificateChain[0]).getSerialNumber(),\n-\t\t\t\t\t((X509Certificate) endingCertificateChain[0]).getSerialNumber());\n+\t\t\tString serial1 = ((X509Certificate) startingCertificateChain[0]).getSerialNumber().toString(16);\n+\t\t\tString serial2 = ((X509Certificate) endingCertificateChain[0]).getSerialNumber().toString(16);\n+\n+\t\t\tassertThat(\"The certificate should have been marked as expired at startup and renewed.\", serial1, not(equalTo(serial2)));\t\n \n \t\t\tstartingCertificateChain = endingCertificateChain;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjI5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429362291", "bodyText": "methodName could be replaced by testName.getMethodName()", "author": "jvanhill", "createdAt": "2020-05-22T17:11:05Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -119,6 +133,7 @@ public void serverBelowMinRenew() throws Exception {\n \n \t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\",\n \t\t\t\t\tserver.waitForStringInLog(\"CWPKI2051W\"));\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n \n \t\t} finally {\n \t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5MTUzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429391536", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\nindex 6e1ad9b658..4e39e3e522 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java\n\n@@ -136,7 +137,7 @@ public class AcmeValidityAndRenewTest {\n \t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n \n \t\t} finally {\n-\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: Shutdown.\");\n \n \t\t\t/*\n \t\t\t * Stop the server.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mzg4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429363882", "bodyText": "Did you mean to leave this TODO?", "author": "jvanhill", "createdAt": "2020-05-22T17:14:49Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java", "diffHunk": "@@ -139,7 +143,7 @@ public static void afterClass() throws Exception {\n \t\t/*\n \t\t * Stop the server.\n \t\t */\n-\t\tserver.stopServer();\n+\t\tserver.stopServer(\"CWPKI2058W\"); // TODO -- check failure revocation \"soft error\" msg", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzg1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407853", "bodyText": "Sort of -- I did see this again while running the test. I will open an issue to track separately and remove the todo.", "author": "kristip17", "createdAt": "2020-05-22T18:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mzg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java\nindex 4fede148d1..c964cb2aea 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeCaRestHandlerTest.java\n\n@@ -143,7 +143,7 @@ public class AcmeCaRestHandlerTest {\n \t\t/*\n \t\t * Stop the server.\n \t\t */\n-\t\tserver.stopServer(\"CWPKI2058W\"); // TODO -- check failure revocation \"soft error\" msg\n+\t\tserver.stopServer(\"CWPKI2058W\");\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTU0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429365544", "bodyText": "Not sure about this. Our goal was to have the CAContainer's be identical. Why are we stopping the challenge server? If we are doing it to stop the mock DNS server, then we should name it \"stopDnsServer()\" or something similar. The CAContainer should have a method that throws UnsupportedOperationException for any CAContainer impls that can't stop the DNS.\nSee getOcspResponderUrl().", "author": "jvanhill", "createdAt": "2020-05-22T17:18:49Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java", "diffHunk": "@@ -120,6 +123,16 @@ public void stop() {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n+\t\n+\tpublic void stopChallengeServer() {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5Mjg5NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429392894", "bodyText": "I added this so I could test the Scheduler hitting a failing condition. I tried restarting the Pebble Container, but it could come up with a different Directory URI port. Restarting the challenge server allowed the scheduler to fail on a renew request and then succeed after the challenge server was restarted. But I will update the name and imp.", "author": "kristip17", "createdAt": "2020-05-22T18:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\nindex dab0c8d2e4..6bc60ee150 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\n\n@@ -123,16 +123,6 @@ public class PebbleContainer extends CAContainer {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n-\t\n-\tpublic void stopChallengeServer() {\n-\t\tchalltestsrv.stop();\n-\t\tLog.info(PebbleContainer.class, \"stopChallengeServer\", \"Challenge server stopped.\");\n-\t}\n-\t\n-\tpublic void startChallengeServer() {\n-\t\tchalltestsrv.start();\n-\t\tLog.info(PebbleContainer.class, \"statChallengeServer\", \"Challenge server started.\");\n-\t}\n \n \t@Override\n \tpublic String getAcmeDirectoryURI(boolean useAcmeURI) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTcyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429365720", "bodyText": "The same as stopChallengeServer().", "author": "jvanhill", "createdAt": "2020-05-22T17:19:16Z", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java", "diffHunk": "@@ -120,6 +123,16 @@ public void stop() {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n+\t\n+\tpublic void stopChallengeServer() {\n+\t\tchalltestsrv.stop();\n+\t\tLog.info(PebbleContainer.class, \"stopChallengeServer\", \"Challenge server stopped.\");\n+\t}\n+\t\n+\tpublic void startChallengeServer() {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzQyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407420", "bodyText": "Update name and implementation, same as stop.", "author": "kristip17", "createdAt": "2020-05-22T18:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\nindex dab0c8d2e4..6bc60ee150 100644\n--- a/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\n+++ b/dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/docker/pebble/PebbleContainer.java\n\n@@ -123,16 +123,6 @@ public class PebbleContainer extends CAContainer {\n \t\tsuper.stop();\n \t\tnetwork.close();\n \t}\n-\t\n-\tpublic void stopChallengeServer() {\n-\t\tchalltestsrv.stop();\n-\t\tLog.info(PebbleContainer.class, \"stopChallengeServer\", \"Challenge server stopped.\");\n-\t}\n-\t\n-\tpublic void startChallengeServer() {\n-\t\tchalltestsrv.start();\n-\t\tLog.info(PebbleContainer.class, \"statChallengeServer\", \"Challenge server started.\");\n-\t}\n \n \t@Override\n \tpublic String getAcmeDirectoryURI(boolean useAcmeURI) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjkwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429366903", "bodyText": "Probably should define whether this in ms or s or whatever unit. The set / get methods should be updated as well to make it clear.", "author": "jvanhill", "createdAt": "2020-05-22T17:21:43Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.internal.exceptions;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+\n+/**\n+ * Exception that is thrown when a certificate renew request occurs too\n+ * soon after the prior request.\n+ */\n+@Trivial\n+public class CertificateRenewRequestBlockedException extends AcmeCaException {\n+\n+\tprivate static final long serialVersionUID = -2381844611991560528L;\n+\t\n+\tprivate long timeLeft = -1;", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzI4OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407288", "bodyText": "Updated", "author": "kristip17", "createdAt": "2020-05-22T18:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\nindex 44ca221a64..3c9b3bee34 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\n\n@@ -22,7 +22,10 @@ public class CertificateRenewRequestBlockedException extends AcmeCaException {\n \n \tprivate static final long serialVersionUID = -2381844611991560528L;\n \t\n-\tprivate long timeLeft = -1;\n+\t/*\n+\t * Time left until the renew request is allowed, expressed in milliseconds\n+\t */\n+\tprivate long timeLeftMs = -1;\n \n \t/**\n \t * Constructs a new exception with the specified detail message. The cause\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzI3MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429367271", "bodyText": "description", "author": "jvanhill", "createdAt": "2020-05-22T17:22:32Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.internal.exceptions;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+\n+/**\n+ * Exception that is thrown when a certificate renew request occurs too\n+ * soon after the prior request.\n+ */\n+@Trivial\n+public class CertificateRenewRequestBlockedException extends AcmeCaException {\n+\n+\tprivate static final long serialVersionUID = -2381844611991560528L;\n+\t\n+\tprivate long timeLeft = -1;\n+\n+\t/**\n+\t * Constructs a new exception with the specified detail message. The cause\n+\t * is not initialized, and may subsequently be initialized by a call to\n+\t * initCause.\n+\t * \n+\t * @param message\n+\t *            the detail message. The detail message is saved for later\n+\t *            retrieval by the {@link #getMessage()} method.\n+\t */\n+\tpublic CertificateRenewRequestBlockedException(String message) {\n+\t\tsuper(message);\n+\t}\n+\n+\t/**\n+\t * Constructs a new exception with the specified detail message and cause.\n+\t * <p/>\n+\t * Note that the detail message associated with cause is not automatically\n+\t * incorporated in this exception's detail message.\n+\t * \n+\t * @param message\n+\t *            the detail message (which is saved for later retrieval by the\n+\t *            {@link #getMessage()} method).\n+\t * @param cause\n+\t *            the cause (which is saved for later retrieval by the\n+\t *            {@link #getCause()} method). (A null value is permitted, and\n+\t *            indicates that the cause is nonexistent or unknown.)\n+\t */\n+\tpublic CertificateRenewRequestBlockedException(String message, Throwable cause) {\n+\t\tsuper(message, cause);\n+\t}\n+\t\n+\t/**\n+\t * Set the amount of time left before the next renewal request is allowed.\n+\t * \n+\t * @param tf", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzIzMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407232", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\nindex 44ca221a64..3c9b3bee34 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/exceptions/CertificateRenewRequestBlockedException.java\n\n@@ -22,7 +22,10 @@ public class CertificateRenewRequestBlockedException extends AcmeCaException {\n \n \tprivate static final long serialVersionUID = -2381844611991560528L;\n \t\n-\tprivate long timeLeft = -1;\n+\t/*\n+\t * Time left until the renew request is allowed, expressed in milliseconds\n+\t */\n+\tprivate long timeLeftMs = -1;\n \n \t/**\n \t * Constructs a new exception with the specified detail message. The cause\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429368070", "bodyText": "I would maybe make the constructor for CRRBE take the time remaining so it is always forced to be set. Doubt anywhere else will use this exception though.", "author": "jvanhill", "createdAt": "2020-05-22T17:24:22Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -881,5 +966,71 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * Set the Scheduler service ref\n+\t */\n+\t@Reference(name = \"scheduledExecutorService\", service = ScheduledExecutorService.class, target = \"(deferrable=false)\")\n+\tprotected void setScheduledExecutorService(ServiceReference<ScheduledExecutorService> ref) {\n+\t\tscheduledExecutorServiceRef.setReference(ref);\n+\t}\n+\n+\t/**\n+\t * Unset the scheduler ref and stop the certificate checker\n+\t */\n+\tprotected void unsetScheduledExecutorService(ServiceReference<ScheduledExecutorService> ref) {\n+\t\tif (acmeCertChecker != null) {\n+\t\t\tacmeCertChecker.stop();\n+\t\t}\n+\t\tscheduledExecutorServiceRef.unsetReference(ref);\n+\t}\n+\n+\t/**\n+\t * Get the scheduler ref\n+\t */\n+\tpublic ScheduledExecutorService getScheduledExecutorService() {\n+\t\treturn scheduledExecutorServiceRef.getService();\n+\t}\n \n+    /**\n+     * Acquire the writer lock. To be used to prevent concurrent certificate\n+     * renew or revoke requests. Must be used with releaseWriteLock\n+     */\n+    @Trivial\n+    void acquireWriteLock() {\n+\t\trwRenewCertLock.writeLock().lock();\n+    }\n+    \n+    /**\n+     * Release the writer lock. To be used to prevent concurrent certificate\n+     * renew or revoke requests. Must be used with acquireWriteLock\n+     */\n+    @Trivial\n+    void releaseWriteLock() {\n+    \trwRenewCertLock.writeLock().unlock();\n+    }\n+    \n+    /**\n+     * Checks whether certificate renewal is allowed. It is allowed if:\n+     * <li>Certificate renewal checking is disabled</li>\n+     * <li>This is the first certificate request</li>\n+     * <li>Enough time has passed since the last renewal</li>\n+     * \n+     * If certificate renewal is not allowed, an exception is thrown.\n+     */\n+    @Override\n+    public void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException {\n+    \tlong timeDiff = System.currentTimeMillis() - lastCertificateRenewalTimestamp;\n+    \tif (acmeConfig.isDisableMinRenewWindow() || lastCertificateRenewalTimestamp == -1 || (timeDiff >= AcmeConstants.RENEW_CERT_MIN)) {\n+    \t\treturn;\n+    \t}\n+\n+    \tif (tc.isDebugEnabled()) {\n+    \t\tTr.debug(tc, \"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);\n+    \t}\n+    \tCertificateRenewRequestBlockedException cr = new CertificateRenewRequestBlockedException(\"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429407175", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java\nindex e9465cb2ba..554794df49 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java\n\n@@ -1010,27 +1010,28 @@ public class AcmeProviderImpl implements AcmeProvider {\n     \trwRenewCertLock.writeLock().unlock();\n     }\n     \n-    /**\n-     * Checks whether certificate renewal is allowed. It is allowed if:\n-     * <li>Certificate renewal checking is disabled</li>\n-     * <li>This is the first certificate request</li>\n-     * <li>Enough time has passed since the last renewal</li>\n-     * \n-     * If certificate renewal is not allowed, an exception is thrown.\n-     */\n-    @Override\n-    public void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException {\n-    \tlong timeDiff = System.currentTimeMillis() - lastCertificateRenewalTimestamp;\n-    \tif (acmeConfig.isDisableMinRenewWindow() || lastCertificateRenewalTimestamp == -1 || (timeDiff >= AcmeConstants.RENEW_CERT_MIN)) {\n-    \t\treturn;\n-    \t}\n-\n-    \tif (tc.isDebugEnabled()) {\n-    \t\tTr.debug(tc, \"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);\n-    \t}\n-    \tCertificateRenewRequestBlockedException cr = new CertificateRenewRequestBlockedException(\"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);\n-    \tcr.setTimeLeftForBlackout(AcmeConstants.RENEW_CERT_MIN - timeDiff);\n-    \tthrow cr;\n-    \t\n-    }\n+\t/**\n+\t * Checks whether certificate renewal is allowed. It is allowed if:\n+\t * <li>Certificate renewal checking is disabled</li>\n+\t * <li>This is the first certificate request</li>\n+\t * <li>Enough time has passed since the last renewal</li>\n+\t * \n+\t * If certificate renewal is not allowed, an exception is thrown.\n+\t */\n+\t@Override\n+\tpublic void checkCertificateRenewAllowed() throws CertificateRenewRequestBlockedException {\n+\t\tlong timeDiff = System.currentTimeMillis() - lastCertificateRenewalTimestamp;\n+\t\tif (acmeConfig.isDisableMinRenewWindow() || lastCertificateRenewalTimestamp == -1\n+\t\t\t\t|| (timeDiff >= AcmeConstants.RENEW_CERT_MIN)) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (tc.isDebugEnabled()) {\n+\t\t\tTr.debug(tc, \"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp);\n+\t\t}\n+\t\tCertificateRenewRequestBlockedException cr = new CertificateRenewRequestBlockedException(\n+\t\t\t\t\"Too soon to renew, last certificate renewal was \" + lastCertificateRenewalTimestamp,\n+\t\t\t\tAcmeConstants.RENEW_CERT_MIN - timeDiff);\n+\t\tthrow cr;\n+\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTQxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369410", "bodyText": "I think you can define a minimum in the metatype. Not sure if that would work better. If you don't do it there, should you have a warning message here instead of debug?", "author": "jvanhill", "createdAt": "2020-05-22T17:27:24Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n+\t\t\t\t}\n+\t\t\t\tthis.certCheckerScheduler = 0L;\n+\t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n+\t\t\t\t/*\n+\t\t\t\t * Too low of a timeout, reset to the min renew allowed\n+\t\t\t\t */\n+\t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);\n+\t\t\t\t}\n+\t\t\t} else { \n+\t\t\t\tthis.certCheckerScheduler = certCheckerScheduler;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\n+\t/**\n+\t * Get the certCheckerErrorScheduler\n+\t * @return certCheckerErrorScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerErrorScheduler() {\n+\t\treturn certCheckerErrorScheduler;\n+\t}\n+\n+\t/**\n+\t * Set the certCheckerErrorScheduler\n+\t * If it is set below the min renewal time, reset to the min renewal time\n+\t *\n+\t * @param certCheckerErrorScheduler\n+\t */\n+\tpublic void setCertCheckerErrorScheduler(Long certCheckerErrorScheduler) {\n+\t\tif (certCheckerErrorScheduler != null) {\n+\t\t\tif (certCheckerErrorScheduler < AcmeConstants.RENEW_CERT_MIN) {", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5OTcyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429399727", "bodyText": "So you can, you learn something new every day", "author": "kristip17", "createdAt": "2020-05-22T18:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\nindex 69bb53f127..43de94faa3 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n\n@@ -664,18 +664,17 @@ public class AcmeConfig {\n \tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n \t\tif (certCheckerScheduler != null) {\n \t\t\tif (certCheckerScheduler <= 0) {\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n-\t\t\t\t}\n+\t\t\t\t/*\n+\t\t\t\t * Cert Checker is disabled\n+\t\t\t\t */\n+\t\t\t\tTr.info(tc, \"CWPKI2069I\");\n \t\t\t\tthis.certCheckerScheduler = 0L;\n \t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n \t\t\t\t/*\n \t\t\t\t * Too low of a timeout, reset to the min renew allowed\n \t\t\t\t */\n \t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);\n-\t\t\t\t}\n+\t\t\t\tTr.warning(tc, \"CWPKI2070W\", certCheckerScheduler, this.certCheckerScheduler);\n \t\t\t} else { \n \t\t\t\tthis.certCheckerScheduler = certCheckerScheduler;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTc2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369764", "bodyText": "Warning?", "author": "jvanhill", "createdAt": "2020-05-22T17:28:15Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNTIyOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429405229", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\nindex 69bb53f127..43de94faa3 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n\n@@ -664,18 +664,17 @@ public class AcmeConfig {\n \tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n \t\tif (certCheckerScheduler != null) {\n \t\t\tif (certCheckerScheduler <= 0) {\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n-\t\t\t\t}\n+\t\t\t\t/*\n+\t\t\t\t * Cert Checker is disabled\n+\t\t\t\t */\n+\t\t\t\tTr.info(tc, \"CWPKI2069I\");\n \t\t\t\tthis.certCheckerScheduler = 0L;\n \t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n \t\t\t\t/*\n \t\t\t\t * Too low of a timeout, reset to the min renew allowed\n \t\t\t\t */\n \t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);\n-\t\t\t\t}\n+\t\t\t\tTr.warning(tc, \"CWPKI2070W\", certCheckerScheduler, this.certCheckerScheduler);\n \t\t\t} else { \n \t\t\t\tthis.certCheckerScheduler = certCheckerScheduler;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTgzNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429369836", "bodyText": "Warning?", "author": "jvanhill", "createdAt": "2020-05-22T17:28:25Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -616,4 +645,82 @@ private static void validateKeyFilePath(String path, String type) throws AcmeCaE\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * \n+\t * @return the certCheckerScheduler\n+\t */\n+\t@Trivial\n+\tpublic Long getCertCheckerScheduler() {\n+\t\treturn certCheckerScheduler;\n+\t}\n+\n+\t/**\n+\t * Sets the certCheckerScheduler. If set to 0 or less, the certificate\n+\t * checker is considered disabled. If set below the min renew time, reset to the\n+\t * min renew time.\n+\t * @param certCheckerScheduler\n+\t */\n+\tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n+\t\tif (certCheckerScheduler != null) {\n+\t\t\tif (certCheckerScheduler <= 0) {\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n+\t\t\t\t}\n+\t\t\t\tthis.certCheckerScheduler = 0L;\n+\t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n+\t\t\t\t/*\n+\t\t\t\t * Too low of a timeout, reset to the min renew allowed\n+\t\t\t\t */\n+\t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNTI2OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429405268", "bodyText": "Added", "author": "kristip17", "createdAt": "2020-05-22T18:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\nindex 69bb53f127..43de94faa3 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java\n\n@@ -664,18 +664,17 @@ public class AcmeConfig {\n \tpublic void setCertCheckerScheduler(Long certCheckerScheduler) {\t\t\n \t\tif (certCheckerScheduler != null) {\n \t\t\tif (certCheckerScheduler <= 0) {\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certChecker is disabled\");\n-\t\t\t\t}\n+\t\t\t\t/*\n+\t\t\t\t * Cert Checker is disabled\n+\t\t\t\t */\n+\t\t\t\tTr.info(tc, \"CWPKI2069I\");\n \t\t\t\tthis.certCheckerScheduler = 0L;\n \t\t\t} else if (certCheckerScheduler < AcmeConstants.RENEW_CERT_MIN) {\n \t\t\t\t/*\n \t\t\t\t * Too low of a timeout, reset to the min renew allowed\n \t\t\t\t */\n \t\t\t\tthis.certCheckerScheduler = AcmeConstants.RENEW_CERT_MIN;\n-\t\t\t\tif (tc.isDebugEnabled()) {\n-\t\t\t\t\tTr.debug(tc, \"certCheckerScheduler is reset to the minimum: \"+ this.certCheckerScheduler);\n-\t\t\t\t}\n+\t\t\t\tTr.warning(tc, \"CWPKI2070W\", certCheckerScheduler, this.certCheckerScheduler);\n \t\t\t} else { \n \t\t\t\tthis.certCheckerScheduler = certCheckerScheduler;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDI1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370251", "bodyText": "A few methods in here without javadoc", "author": "jvanhill", "createdAt": "2020-05-22T17:29:25Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjQ1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406457", "bodyText": "Added javadoc", "author": "kristip17", "createdAt": "2020-05-22T18:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\nindex a475789b36..a1d7d42917 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n\n@@ -19,10 +19,9 @@ import java.util.concurrent.TimeUnit;\n \n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n-import com.ibm.websphere.ras.annotation.Trivial;\n \n /**\n- * The AcmeCertChecker runs in the background and periodically checks if the\n+ * The AcmeCertCheckerTask runs in the background and periodically checks if the\n  * ACME CA certificate is either expiring or revoked and renews the certificate\n  * if necessary.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDQ1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370455", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @param acmeCon", "author": "jvanhill", "createdAt": "2020-05-22T17:29:53Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the\n+ * ACME CA certificate is either expiring or revoked and renews the certificate\n+ * if necessary.\n+ */\n+public class AcmeCertCheckerTask implements Runnable {\n+\n+\tprivate static final TraceComponent tc = Tr.register(AcmeCertCheckerTask.class);\n+\n+\tprivate final AcmeProviderImpl acmeProviderImpl;\n+\n+\tprivate ScheduledFuture<?> certChecker;\n+\n+\tprivate ScheduledExecutorService service = null;\n+\t\n+\tprivate volatile boolean runningOnErrorSchedule = false;\n+\n+\tpublic AcmeCertCheckerTask(AcmeProviderImpl acmePI) {\n+\t\tacmeProviderImpl = acmePI;\n+\t}\n+\n+\t/**\n+\t * Stop the scheduler and void the ScheduledFuture\n+\t */\n+\tpublic synchronized void stop() {\n+\t\tcancel(true);\n+\t\tcertChecker = null;\n+\t}\n+\n+\t/**\n+\t * Start the certificate checker scheduled task. It will first cancel any\n+\t * existing task and then schedule a new repeating task.\n+\t * \n+\t * @param service\n+\t * @param acmeCon", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjgxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406814", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\nindex a475789b36..a1d7d42917 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n\n@@ -19,10 +19,9 @@ import java.util.concurrent.TimeUnit;\n \n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n-import com.ibm.websphere.ras.annotation.Trivial;\n \n /**\n- * The AcmeCertChecker runs in the background and periodically checks if the\n+ * The AcmeCertCheckerTask runs in the background and periodically checks if the\n  * ACME CA certificate is either expiring or revoked and renews the certificate\n  * if necessary.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDk4MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429370981", "bodyText": "AcmeCertCheckerTask", "author": "jvanhill", "createdAt": "2020-05-22T17:30:59Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/**\n+ * The AcmeCertChecker runs in the background and periodically checks if the", "originalCommit": "2f6b2e064a59fab0895e2e923e8f743f676cb99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNjg2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/11956#discussion_r429406861", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-05-22T18:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MDk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\nindex a475789b36..a1d7d42917 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeCertCheckerTask.java\n\n@@ -19,10 +19,9 @@ import java.util.concurrent.TimeUnit;\n \n import com.ibm.websphere.ras.Tr;\n import com.ibm.websphere.ras.TraceComponent;\n-import com.ibm.websphere.ras.annotation.Trivial;\n \n /**\n- * The AcmeCertChecker runs in the background and periodically checks if the\n+ * The AcmeCertCheckerTask runs in the background and periodically checks if the\n  * ACME CA certificate is either expiring or revoked and renews the certificate\n  * if necessary.\n  */\n"}}, {"oid": "4c430e4a4aa51c28870fe00d27f787c59b50cc25", "url": "https://github.com/OpenLiberty/open-liberty/commit/4c430e4a4aa51c28870fe00d27f787c59b50cc25", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-22T22:10:45Z", "type": "forcePushed"}, {"oid": "3816e4fc8368dd22b2fc4800f98bcd1363d536f2", "url": "https://github.com/OpenLiberty/open-liberty/commit/3816e4fc8368dd22b2fc4800f98bcd1363d536f2", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-22T22:21:11Z", "type": "forcePushed"}, {"oid": "20b9ee25148a21b80557b3d3c5873fcc63c93785", "url": "https://github.com/OpenLiberty/open-liberty/commit/20b9ee25148a21b80557b3d3c5873fcc63c93785", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-25T03:07:33Z", "type": "forcePushed"}, {"oid": "f7380198621b5ef646f62d5cc58d92900f8460d3", "url": "https://github.com/OpenLiberty/open-liberty/commit/f7380198621b5ef646f62d5cc58d92900f8460d3", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-25T03:36:29Z", "type": "forcePushed"}, {"oid": "1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "url": "https://github.com/OpenLiberty/open-liberty/commit/1816b83c60d4d7cfde50e5d89bb9b4744e5587e5", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T19:49:49Z", "type": "forcePushed"}, {"oid": "3e585430e762a321124fcb103f7d181614d5f4df", "url": "https://github.com/OpenLiberty/open-liberty/commit/3e585430e762a321124fcb103f7d181614d5f4df", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T20:05:46Z", "type": "commit"}, {"oid": "3e585430e762a321124fcb103f7d181614d5f4df", "url": "https://github.com/OpenLiberty/open-liberty/commit/3e585430e762a321124fcb103f7d181614d5f4df", "message": "Issue 10519: Add automatic certificate checker for ACME", "committedDate": "2020-05-26T20:05:46Z", "type": "forcePushed"}]}