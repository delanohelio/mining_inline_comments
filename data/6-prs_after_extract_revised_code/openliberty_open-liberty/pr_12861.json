{"pr_number": 12861, "pr_title": "Modify test to improve performance", "pr_createdAt": "2020-07-02T07:09:29Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12861", "timeline": [{"oid": "9e7f839a0ccc7cb4e4a2073e3763ecb03881d931", "url": "https://github.com/OpenLiberty/open-liberty/commit/9e7f839a0ccc7cb4e4a2073e3763ecb03881d931", "message": "Modify test to improve performance", "committedDate": "2020-07-02T07:07:45Z", "type": "commit"}, {"oid": "e8138ed3c8d74afb8472336a8e060425430ea55a", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8138ed3c8d74afb8472336a8e060425430ea55a", "message": "Adding changes to improve the perfomance of Hung and Slow Request tests", "committedDate": "2020-07-06T05:27:51Z", "type": "commit"}, {"oid": "8acfc4b1b5fb90f9b12cb1a1ce241ad39487701b", "url": "https://github.com/OpenLiberty/open-liberty/commit/8acfc4b1b5fb90f9b12cb1a1ce241ad39487701b", "message": "Adding changes to TimingRequestTiming to improve performance", "committedDate": "2020-07-07T17:49:52Z", "type": "commit"}, {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238", "url": "https://github.com/OpenLiberty/open-liberty/commit/2ff2cfd1534f4066db3f353455242619eb1ca238", "message": "Slightly increase wait times for request", "committedDate": "2020-07-08T04:51:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODA3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418075", "bodyText": "Not sure, why this loop is needed here?\nIf you want to make sure the executeUpdate completes, we can just check if the returnValue is populated with the number of row or 0, that would ensure the statement is completed.", "author": "pgunapal", "createdAt": "2020-07-09T18:43:08Z", "path": "dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java", "diffHunk": "@@ -55,16 +55,16 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)\n \n \n       System.out.println((new StringBuilder(\" Session value is \")).append(s.getValue()).toString());\n-\n-       \n+      \n+      int returnValue = -9999999;\n       for(int i = 11; i <= 15; i++) {\n-          stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n-          try {\n-              Thread.sleep(5000);\n-          } catch (Exception e) {\n-              e.printStackTrace();\n+          returnValue = stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n+          // We will need to ensure that the executeUpdate completes before continuing\n+          while (returnValue == -9999999) {", "originalCommit": "2ff2cfd1534f4066db3f353455242619eb1ca238", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTQ5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452455492", "bodyText": "Not sure if the executeUpdate run asynchronously here but I will add the thread.sleeps back (like the original) but shorten the time to sleep for as each update normally takes a few milliseconds to complete. I will also add some checking to the return value of the executeUpdate to ensure the update is successful.", "author": "lamkavan", "createdAt": "2020-07-09T19:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "chunk": "diff --git a/dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java b/dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java\nindex 12379ce389..439ee534d9 100644\n--- a/dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java\n+++ b/dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java\n\n@@ -56,14 +57,18 @@ public class TestJDBC extends HttpServlet\n \n       System.out.println((new StringBuilder(\" Session value is \")).append(s.getValue()).toString());\n       \n-      int returnValue = -9999999;\n+      int returnValue = -1;\n       for(int i = 11; i <= 15; i++) {\n           returnValue = stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n-          // We will need to ensure that the executeUpdate completes before continuing\n-          while (returnValue == -9999999) {\n-              continue;\n+          try {\n+              Thread.sleep(1500);  // Sleep to give time for update to fully complete\n+              if (returnValue != 1) {\n+                  System.out.println(\"Warning: The expected return value of stmt.executeUpdate is 1, but got: \" + returnValue + \". This is fine and the test can still pass.\");\n+              }\n+              returnValue = -1;\n+          } catch (Exception e) {\n+              e.printStackTrace();\n           }\n-          returnValue = -9999999;\n       }  \n       \n       System.out.println(\"doGet completed Successfully\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODc0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418742", "bodyText": "I thought we had added this here, to ensure every test starts of with a fresh server config, since we saw some test failures in the past, where the server config wasn't updated properly for subsequent tests?", "author": "pgunapal", "createdAt": "2020-07-09T18:44:32Z", "path": "dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java", "diffHunk": "@@ -75,10 +74,6 @@ public void setupTestStart() throws Exception {\n         if (server != null && !server.isStarted()) {\n             server.startServer();\n         }\n-        // Need to ensure the configuration is finished updating before starting a test\n-        server.setServerConfigurationFile(\"server_original.xml\");\n-        server.waitForStringInLog(\"CWWKG0017I\", 90000);\n-        server.setMarkToEndOfLog();", "originalCommit": "2ff2cfd1534f4066db3f353455242619eb1ca238", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "chunk": "diff --git a/dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java b/dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java\nindex d04cf3c597..f22599ced7 100644\n--- a/dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java\n+++ b/dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java\n\n@@ -74,6 +74,11 @@ public class HungRequestTiming {\n         if (server != null && !server.isStarted()) {\n             server.startServer();\n         }\n+        \n+        // Allow the configuration to change back to the original and ensure the update is finished before starting a test\n+        server.setServerConfigurationFile(\"server_original.xml\");\n+        server.waitForStringInLog(\"CWWKG0017I\", 90000);\n+        server.setMarkToEndOfLog();\n     }\n \n     @After\n"}}, {"oid": "d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "url": "https://github.com/OpenLiberty/open-liberty/commit/d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "message": "Adding further changes to improve request timing FAT test", "committedDate": "2020-07-13T04:10:37Z", "type": "commit"}]}