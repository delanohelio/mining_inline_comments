{"pr_number": 12774, "pr_title": "Add kerberos container auth support for data sources", "pr_createdAt": "2020-06-25T03:36:07Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12774", "timeline": [{"oid": "a0df1389476127ced6641a88aae2f3d5e128dba6", "url": "https://github.com/OpenLiberty/open-liberty/commit/a0df1389476127ced6641a88aae2f3d5e128dba6", "message": "Add kerberos container auth support for data sources", "committedDate": "2020-06-25T03:36:51Z", "type": "forcePushed"}, {"oid": "cebc9899417d87cd14e30c10a101a376bfc8c6bd", "url": "https://github.com/OpenLiberty/open-liberty/commit/cebc9899417d87cd14e30c10a101a376bfc8c6bd", "message": "Add kerberos container auth support for data sources", "committedDate": "2020-06-25T03:41:14Z", "type": "commit"}, {"oid": "cebc9899417d87cd14e30c10a101a376bfc8c6bd", "url": "https://github.com/OpenLiberty/open-liberty/commit/cebc9899417d87cd14e30c10a101a376bfc8c6bd", "message": "Add kerberos container auth support for data sources", "committedDate": "2020-06-25T03:41:14Z", "type": "forcePushed"}, {"oid": "9a0431e464f404b6ecdb53f120f4bb2faf0f97d9", "url": "https://github.com/OpenLiberty/open-liberty/commit/9a0431e464f404b6ecdb53f120f4bb2faf0f97d9", "message": "Automatically detect DB2 security mechanism 11 for kerberos", "committedDate": "2020-06-25T04:53:00Z", "type": "commit"}, {"oid": "057724a48e2d77bdb95f3894af2e1cd96f9f8a54", "url": "https://github.com/OpenLiberty/open-liberty/commit/057724a48e2d77bdb95f3894af2e1cd96f9f8a54", "message": "Review comments and build fixes", "committedDate": "2020-06-26T05:45:11Z", "type": "commit"}, {"oid": "057724a48e2d77bdb95f3894af2e1cd96f9f8a54", "url": "https://github.com/OpenLiberty/open-liberty/commit/057724a48e2d77bdb95f3894af2e1cd96f9f8a54", "message": "Review comments and build fixes", "committedDate": "2020-06-26T05:45:11Z", "type": "forcePushed"}, {"oid": "7a6eaeb6e538965622baa99ad523efb93845b688", "url": "https://github.com/OpenLiberty/open-liberty/commit/7a6eaeb6e538965622baa99ad523efb93845b688", "message": "Split Krb5LoginModuleWrapper into separate bundle", "committedDate": "2020-06-27T16:45:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzI1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12774#discussion_r447013259", "bodyText": "We should call SubjectHelpet.getGSSCredentialFromSubject() method", "author": "utle", "createdAt": "2020-06-29T14:27:01Z", "path": "dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java", "diffHunk": "@@ -146,10 +155,52 @@ private AuthData getAuthData(String authDataAlias) throws LoginException {\n         return authDataProviderRef.getService().getAuthData(authDataAlias);\n     }\n \n-    private Subject obtainSubject(ManagedConnectionFactory managedConnectionFactory, AuthData authData) {\n-        Subject subject = createSubject(managedConnectionFactory, authData);\n-        addInvocationSubjectPrincipal(subject);\n-        optimize(subject);\n+    private Subject obtainSubject(ManagedConnectionFactory managedConnectionFactory, AuthData authData) throws LoginException {\n+        if (authData.getKrb5Principal() != null) {\n+            return doKerberosLogin(authData.getKrb5Principal(), authData.getKrb5Keytab());\n+        } else {\n+            Subject subject = createSubject(managedConnectionFactory, authData);\n+            addInvocationSubjectPrincipal(subject);\n+            optimize(subject);\n+            return subject;\n+        }\n+    }\n+\n+    private Subject doKerberosLogin(String principal, Path keytab) throws LoginException {\n+        Subject subject = new Subject();\n+        Krb5LoginModuleWrapper krb5 = new Krb5LoginModuleWrapper();\n+        Map<String, String> options = new HashMap<String, String>();\n+        Map<String, Object> sharedState = new HashMap<String, Object>();\n+\n+        options.put(\"isInitiator\", \"true\");\n+        options.put(\"refreshKrb5Config\", \"true\");\n+        options.put(\"doNotPrompt\", \"true\");\n+        // TODO: Do we want to store the key?\n+        //options.put(\"storeKey\", \"true\");\n+        options.put(\"useKeyTab\", \"true\");\n+        // If no keytab path specified, still set useKeyTab=true because then the\n+        // default JDK or default OS locations will be checked\n+        if (keytab != null) {\n+            options.put(\"keyTab\", keytab.toAbsolutePath().toString());\n+        }\n+        options.put(\"principal\", principal);\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+            options.put(\"debug\", \"true\");\n+            Tr.debug(tc, \"All kerberos config properties are: \" + options);\n+        }\n+\n+        krb5.initialize(subject, null, sharedState, options);\n+        krb5.login();\n+        krb5.commit();\n+\n+        // If the created Subject does not have a GSSCredential, then create one and\n+        // associate it with the Subject", "originalCommit": "7a6eaeb6e538965622baa99ad523efb93845b688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MTAwNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12774#discussion_r447091004", "bodyText": "@utle the goal of this code block is to ensure that a GSSCredential is associated with the Subject after the method exits, because the JDBC code expects to find a GSSCredential on the subject later on. To accomplish this, first I needed to check if there was already a GSSCred on the subject, and if it's not already there, then we do call SubjectHelper.getGSSCredentialFromSubject(subject); on line 200 and add that GSSCredential to the subject.", "author": "aguibert", "createdAt": "2020-06-29T16:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "22099fadd6a5dc0dcef4f0a1674b98eb19da889c", "chunk": "diff --git a/dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java b/dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java\nindex baabc785a5..04bdb62725 100644\n--- a/dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java\n+++ b/dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java\n\n@@ -175,8 +175,6 @@ public class AuthDataServiceImpl implements AuthDataService {\n         options.put(\"isInitiator\", \"true\");\n         options.put(\"refreshKrb5Config\", \"true\");\n         options.put(\"doNotPrompt\", \"true\");\n-        // TODO: Do we want to store the key?\n-        //options.put(\"storeKey\", \"true\");\n         options.put(\"useKeyTab\", \"true\");\n         // If no keytab path specified, still set useKeyTab=true because then the\n         // default JDK or default OS locations will be checked\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzY0Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12774#discussion_r447013647", "bodyText": "Basic is spelled wrong", "author": "mswatosh", "createdAt": "2020-06-29T14:27:31Z", "path": "dev/com.ibm.ws.jdbc_fat_krb5/test-applications/db2fat/src/db2/web/JDBCKerberosTestServlet.java", "diffHunk": "@@ -41,10 +57,36 @@ public void testNonKerberosConnectionRejected() throws Exception {\n         }\n     }\n \n-    public void testKerberosConnection() throws Exception {\n-        try (Connection con = ds.getConnection()) {\n+    @Test\n+    public void testKerberosBaiscConnection() throws Exception {", "originalCommit": "7a6eaeb6e538965622baa99ad523efb93845b688", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22099fadd6a5dc0dcef4f0a1674b98eb19da889c", "chunk": "diff --git a/dev/com.ibm.ws.jdbc_fat_krb5/test-applications/db2fat/src/db2/web/JDBCKerberosTestServlet.java b/dev/com.ibm.ws.jdbc_fat_krb5/test-applications/db2fat/src/db2/web/JDBCKerberosTestServlet.java\nindex 6659cfa64a..5f81c8df58 100644\n--- a/dev/com.ibm.ws.jdbc_fat_krb5/test-applications/db2fat/src/db2/web/JDBCKerberosTestServlet.java\n+++ b/dev/com.ibm.ws.jdbc_fat_krb5/test-applications/db2fat/src/db2/web/JDBCKerberosTestServlet.java\n\n@@ -58,7 +58,7 @@ public class JDBCKerberosTestServlet extends FATServlet {\n     }\n \n     @Test\n-    public void testKerberosBaiscConnection() throws Exception {\n+    public void testKerberosBasicConnection() throws Exception {\n         try (Connection con = krb5DataSource.getConnection()) {\n             con.createStatement().execute(\"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n         }\n"}}, {"oid": "22099fadd6a5dc0dcef4f0a1674b98eb19da889c", "url": "https://github.com/OpenLiberty/open-liberty/commit/22099fadd6a5dc0dcef4f0a1674b98eb19da889c", "message": "Split Krb5LoginModuleWrapper into separate bundle", "committedDate": "2020-06-30T02:21:33Z", "type": "forcePushed"}, {"oid": "a04b64e684e0a44144365b7edca3462b3d002cec", "url": "https://github.com/OpenLiberty/open-liberty/commit/a04b64e684e0a44144365b7edca3462b3d002cec", "message": "Split Krb5LoginModuleWrapper into separate bundle", "committedDate": "2020-06-30T02:23:49Z", "type": "commit"}, {"oid": "a04b64e684e0a44144365b7edca3462b3d002cec", "url": "https://github.com/OpenLiberty/open-liberty/commit/a04b64e684e0a44144365b7edca3462b3d002cec", "message": "Split Krb5LoginModuleWrapper into separate bundle", "committedDate": "2020-06-30T02:23:49Z", "type": "forcePushed"}]}