{"pr_number": 14884, "pr_title": "Register CDI extensions from SPI against all deployments not just the\u2026", "pr_createdAt": "2020-11-09T12:03:19Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14884", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDAzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14884#discussion_r519880034", "bodyText": "Can you try to make the two paths a little closer? e.g. surely you can get the spiExtensionClasses from the extensionArchive? So the code would more more like this;\nextensionArchive = runtimeExtensionMap.get(serviceID);\nif (extensionArchive == null) {\n    //only create a new archive, don't register any classes with the deployment\n    extensionArchive = newSPIExtensionArchive(sr, extension.getService(), applicationContext);\n    runtimeExtensionMap.put(serviceID, extensionArchive);\n}\nSet<Extension> spiExtensionClasses = extensionArchive.getExtensions();\napplicationContext.registerSPIExtensions(spiExtensionClasses);", "author": "tevans78", "createdAt": "2020-11-09T15:03:07Z", "path": "dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java", "diffHunk": "@@ -593,17 +593,23 @@ public String getCurrentApplicationContextID() {\n         //Now do the exact same thing for extensions coming from the SPI\n         Iterator<ServiceAndServiceReferencePair<CDIExtensionMetadata>> spiExtensions = cdiRuntime.getSPIExtensionServices();\n         while (spiExtensions.hasNext()) {\n-            ServiceAndServiceReferencePair<CDIExtensionMetadata> extension = spiExtensions.next();\n-            ServiceReference<CDIExtensionMetadata> sr = extension.getServiceReference();\n+            ServiceAndServiceReferencePair<CDIExtensionMetadata> extensionMetaData = spiExtensions.next();\n+            ServiceReference<CDIExtensionMetadata> sr = extensionMetaData.getServiceReference();\n             if (sr != null) {\n                 Long serviceID = ServiceReferenceUtils.getId(sr);\n                 ExtensionArchive extensionArchive = null;\n                 synchronized (this) {\n                     extensionArchive = runtimeExtensionMap.get(serviceID);\n \n                     if (extensionArchive == null) {\n-                        extensionArchive = newSPIExtensionArchive(sr, extension.getService(), applicationContext);\n+                        extensionArchive = newSPIExtensionArchive(sr, extensionMetaData.getService(), applicationContext);\n                         runtimeExtensionMap.put(serviceID, extensionArchive);\n+                    } else {\n+                        // We don't need to create the extension archive but we do need to register the contained extensions into the deploymnet.\n+                        // Since ExtensionArchive doesn't have a method for getting the extension classes, we'll get the extensions from the service.\n+\n+                        Set<Extension> spiExtensionClasses = getExtensionInstancesFromService(extensionMetaData.getService());\n+                        applicationContext.registerSPIExtensions(spiExtensionClasses);", "originalCommit": "0d22ea0d8ec385198385b920296c0a125b11d410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MTQ1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14884#discussion_r519881457", "bodyText": "oh actually, don't call it spiExtensionClasses because they are instances", "author": "tevans78", "createdAt": "2020-11-09T15:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "84d6f287b1c1ba41c42fb4cc082c0e1cd02a161c", "chunk": "diff --git a/dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java b/dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java\nindex 91fefaf0af..492bbd73fe 100644\n--- a/dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java\n+++ b/dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java\n\n@@ -608,8 +608,8 @@ public class CDIContainerImpl implements CDIContainer, InjectionMetaDataListener\n                         // We don't need to create the extension archive but we do need to register the contained extensions into the deploymnet.\n                         // Since ExtensionArchive doesn't have a method for getting the extension classes, we'll get the extensions from the service.\n \n-                        Set<Extension> spiExtensionClasses = getExtensionInstancesFromService(extensionMetaData.getService());\n-                        applicationContext.registerSPIExtensions(spiExtensionClasses);\n+                        Set<Extension> spiExtensionInstances = getExtensionInstancesFromService(extensionMetaData.getService());\n+                        applicationContext.registerSPIExtensions(spiExtensionInstances);\n                     }\n                 }\n                 extensionSet.add(extensionArchive);\n"}}, {"oid": "84d6f287b1c1ba41c42fb4cc082c0e1cd02a161c", "url": "https://github.com/OpenLiberty/open-liberty/commit/84d6f287b1c1ba41c42fb4cc082c0e1cd02a161c", "message": "Register CDI extensions from SPI against all deployments not just the first", "committedDate": "2020-11-09T16:03:32Z", "type": "commit"}, {"oid": "84d6f287b1c1ba41c42fb4cc082c0e1cd02a161c", "url": "https://github.com/OpenLiberty/open-liberty/commit/84d6f287b1c1ba41c42fb4cc082c0e1cd02a161c", "message": "Register CDI extensions from SPI against all deployments not just the first", "committedDate": "2020-11-09T16:03:32Z", "type": "forcePushed"}]}