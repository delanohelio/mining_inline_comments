{"pr_number": 10365, "pr_title": "Issue 10363: Constants and config processing", "pr_createdAt": "2020-01-09T21:39:40Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10365", "timeline": [{"oid": "658b1226383f21c3f041a56a49dc0ff86c3098b1", "url": "https://github.com/OpenLiberty/open-liberty/commit/658b1226383f21c3f041a56a49dc0ff86c3098b1", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-09T22:46:38Z", "type": "forcePushed"}, {"oid": "45ddca82a0dfc3f64560174de6315035fefce170", "url": "https://github.com/OpenLiberty/open-liberty/commit/45ddca82a0dfc3f64560174de6315035fefce170", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-09T22:57:37Z", "type": "forcePushed"}, {"oid": "f08c4696778e9c0e7402a17578f7f859cc62d82b", "url": "https://github.com/OpenLiberty/open-liberty/commit/f08c4696778e9c0e7402a17578f7f859cc62d82b", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-09T23:06:00Z", "type": "forcePushed"}, {"oid": "94dc3b0477d85eeeede122815c3728301b0b5a89", "url": "https://github.com/OpenLiberty/open-liberty/commit/94dc3b0477d85eeeede122815c3728301b0b5a89", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-10T17:47:06Z", "type": "forcePushed"}, {"oid": "e00f4f5ad2162de95c271484d3efe6c8bd2e4cfd", "url": "https://github.com/OpenLiberty/open-liberty/commit/e00f4f5ad2162de95c271484d3efe6c8bd2e4cfd", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-10T20:44:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMjE5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365732195", "bodyText": "Copyright dates should be 2019, 2020", "author": "tevans78", "createdAt": "2020-01-13T10:29:20Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/config/AcmeConfig.java", "diffHunk": "@@ -10,10 +10,40 @@\n  *******************************************************************************/\n package com.ibm.ws.security.acme.config;\n \n+import java.util.Set;", "originalCommit": "e00f4f5ad2162de95c271484d3efe6c8bd2e4cfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4Mjg1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365882857", "bodyText": "Thanks, updated copyright.", "author": "kristip17", "createdAt": "2020-01-13T15:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMjE5NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "64834a6da3fb1dc34f9c4bc6bdf51c9e2a20a02a", "url": "https://github.com/OpenLiberty/open-liberty/commit/64834a6da3fb1dc34f9c4bc6bdf51c9e2a20a02a", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-13T15:59:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNDM5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365914399", "bodyText": "Probably shouldn't be an 'info'.", "author": "jvanhill", "createdAt": "2020-01-13T16:56:05Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java", "diffHunk": "@@ -38,73 +37,86 @@\n import com.ibm.websphere.ras.TraceComponent;\n import com.ibm.ws.security.acme.config.AcmeConfig;\n import com.ibm.ws.security.acme.config.AcmeService;\n+import com.ibm.ws.security.acme.util.AcmeConstants;\n import com.ibm.ws.security.acme.web.AcmeAuthorizationServices;\n import com.ibm.wsspi.kernel.service.utils.ConcurrentServiceReferenceMap;\n \n /**\n  * ACME certificate management support.\n  */\n @Component(service = { AcmeConfig.class, ServletContainerInitializer.class,\n-                       ServletContextListener.class }, immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE, configurationPid = \"com.ibm.ws.security.acme.config\", property = \"service.vendor=IBM\")\n+\t\tServletContextListener.class }, immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE, configurationPid = AcmeConstants.ACME_PID, property = \"service.vendor=IBM\")\n public class AcmeProviderServiceImpl implements AcmeConfig, ServletContextListener, ServletContainerInitializer {\n \n     private final TraceComponent tc = Tr.register(AcmeProviderServiceImpl.class);\n-    private final String parameter1 = \"JM-acme-parm1\";\n-    private final String parameter2 = \"JM-acme-parm2\";\n \n     private AcmeService serviceProvider;\n-\n-    /**\n-     * The properties class that contain the attributes defined\n-     * by inside of server.xml.\n-     */\n-    private final Properties sessionProperties = new Properties();\n-    /**\n-     * Strings used to access the various attributes that are\n-     * defined in the <mailSession> and that are subsequently\n-     * extracted from the ComponentContext to be placed in the Properties\n-     * object\n-     */\n-    public static final String PARM1 = \"configParm1\";\n-    public static final String PARM2 = \"configParm2\";\n-\n-    private final String propertiesArray[] = { PARM1, PARM2 };\n+    \n+\tprivate String directoryURI;\n+\tprivate String domain;\n+\tprivate int validFor;\n+\tprivate String country;\n+\tprivate String locality;\n+\tprivate String state;\n+\tprivate String organization;\n+\tprivate String organizationalUnit;\n+\n+\t// Challenge and order related fields.\n+\tprivate int challengeRetries;\n+\tprivate int challengeRetryWait;\n+\tprivate int orderRetries;\n+\tprivate int orderRetryWait;\n+\n+\t// ACME account related fields.\n+\tprivate String accountKeyFile;\n+\tprivate Set<String> accountContact;\n+\tprivate boolean acceptTermsOfService;\n+\tprivate String domainKeyFile;\n+\n+\tprivate AcmeClient acmeClient;\n \n     private final HashMap<String, Set<String>> appModules = new HashMap<String, Set<String>>();\n \n-    // File name of the User Key Pair\n-    private static final File USER_KEY_FILE = new File(\"user.key\");\n-\n-    // File name of the Domain Key Pair\n-    private static final File DOMAIN_KEY_FILE = new File(\"domain.key\");\n-\n-    // File name of the CSR\n-    private static final File DOMAIN_CSR_FILE = new File(\"domain.csr\");\n-\n-    // File name of the signed certificate\n-    private static final File DOMAIN_CHAIN_FILE = new File(\"domain-chain.crt\");\n-\n-    //Challenge type to be used\n-    private static final ChallengeType CHALLENGE_TYPE = ChallengeType.HTTP;\n-\n-    // RSA key size of generated key pairs\n-    private static final int KEY_SIZE = 2048;\n-\n-    private enum ChallengeType {\n-        HTTP, DNS\n-    }\n-\n     @Activate\n     public void activate(ComponentContext context, Map<String, Object> properties) {\n-        Tr.info(tc, \"******* JTM ******* AcmeProviderServiceImpl: inside activate() method. Display input properties: \");\n-\n+\t\tinitialize(properties);\n     }\n \n     @Modified\n     public void modify(Map<String, Object> properties) {\n-        Tr.info(tc, \" ******* JTM ******* AcmeProviderServiceImpl: inside modified () method\");\n+\t\tinitialize(properties);\n     }\n \n+\tpublic void initialize(Map<String, Object> configProps) {\n+\t\tTr.info(tc, \"Initialize ACME\");", "originalCommit": "64834a6da3fb1dc34f9c4bc6bdf51c9e2a20a02a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyMTM5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365921390", "bodyText": "Removed or commented out all the info's in this class.", "author": "kristip17", "createdAt": "2020-01-13T17:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNDM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a0f1e3e2f670cb7f0c151ed3af7643c2d09cf20", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\nindex 6b1a146e97..2c989792e2 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\n\n@@ -88,8 +88,6 @@ public class AcmeProviderServiceImpl implements AcmeConfig, ServletContextListen\n     }\n \n \tpublic void initialize(Map<String, Object> configProps) {\n-\t\tTr.info(tc, \"Initialize ACME\");\n-\n \t\tdirectoryURI = (String) configProps.get(AcmeConstants.DIR_URI);\n \t\tdomain = (String) configProps.get(AcmeConstants.DOMAIN);\n \t\tvalidFor = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNDU0OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365914549", "bodyText": "Remove this trace too.", "author": "jvanhill", "createdAt": "2020-01-13T16:56:22Z", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java", "diffHunk": "@@ -38,73 +37,86 @@\n import com.ibm.websphere.ras.TraceComponent;\n import com.ibm.ws.security.acme.config.AcmeConfig;\n import com.ibm.ws.security.acme.config.AcmeService;\n+import com.ibm.ws.security.acme.util.AcmeConstants;\n import com.ibm.ws.security.acme.web.AcmeAuthorizationServices;\n import com.ibm.wsspi.kernel.service.utils.ConcurrentServiceReferenceMap;\n \n /**\n  * ACME certificate management support.\n  */\n @Component(service = { AcmeConfig.class, ServletContainerInitializer.class,\n-                       ServletContextListener.class }, immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE, configurationPid = \"com.ibm.ws.security.acme.config\", property = \"service.vendor=IBM\")\n+\t\tServletContextListener.class }, immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE, configurationPid = AcmeConstants.ACME_PID, property = \"service.vendor=IBM\")\n public class AcmeProviderServiceImpl implements AcmeConfig, ServletContextListener, ServletContainerInitializer {\n \n     private final TraceComponent tc = Tr.register(AcmeProviderServiceImpl.class);\n-    private final String parameter1 = \"JM-acme-parm1\";\n-    private final String parameter2 = \"JM-acme-parm2\";\n \n     private AcmeService serviceProvider;\n-\n-    /**\n-     * The properties class that contain the attributes defined\n-     * by inside of server.xml.\n-     */\n-    private final Properties sessionProperties = new Properties();\n-    /**\n-     * Strings used to access the various attributes that are\n-     * defined in the <mailSession> and that are subsequently\n-     * extracted from the ComponentContext to be placed in the Properties\n-     * object\n-     */\n-    public static final String PARM1 = \"configParm1\";\n-    public static final String PARM2 = \"configParm2\";\n-\n-    private final String propertiesArray[] = { PARM1, PARM2 };\n+    \n+\tprivate String directoryURI;\n+\tprivate String domain;\n+\tprivate int validFor;\n+\tprivate String country;\n+\tprivate String locality;\n+\tprivate String state;\n+\tprivate String organization;\n+\tprivate String organizationalUnit;\n+\n+\t// Challenge and order related fields.\n+\tprivate int challengeRetries;\n+\tprivate int challengeRetryWait;\n+\tprivate int orderRetries;\n+\tprivate int orderRetryWait;\n+\n+\t// ACME account related fields.\n+\tprivate String accountKeyFile;\n+\tprivate Set<String> accountContact;\n+\tprivate boolean acceptTermsOfService;\n+\tprivate String domainKeyFile;\n+\n+\tprivate AcmeClient acmeClient;\n \n     private final HashMap<String, Set<String>> appModules = new HashMap<String, Set<String>>();\n \n-    // File name of the User Key Pair\n-    private static final File USER_KEY_FILE = new File(\"user.key\");\n-\n-    // File name of the Domain Key Pair\n-    private static final File DOMAIN_KEY_FILE = new File(\"domain.key\");\n-\n-    // File name of the CSR\n-    private static final File DOMAIN_CSR_FILE = new File(\"domain.csr\");\n-\n-    // File name of the signed certificate\n-    private static final File DOMAIN_CHAIN_FILE = new File(\"domain-chain.crt\");\n-\n-    //Challenge type to be used\n-    private static final ChallengeType CHALLENGE_TYPE = ChallengeType.HTTP;\n-\n-    // RSA key size of generated key pairs\n-    private static final int KEY_SIZE = 2048;\n-\n-    private enum ChallengeType {\n-        HTTP, DNS\n-    }\n-\n     @Activate\n     public void activate(ComponentContext context, Map<String, Object> properties) {\n-        Tr.info(tc, \"******* JTM ******* AcmeProviderServiceImpl: inside activate() method. Display input properties: \");\n-\n+\t\tinitialize(properties);\n     }\n \n     @Modified\n     public void modify(Map<String, Object> properties) {\n-        Tr.info(tc, \" ******* JTM ******* AcmeProviderServiceImpl: inside modified () method\");\n+\t\tinitialize(properties);\n     }\n \n+\tpublic void initialize(Map<String, Object> configProps) {\n+\t\tTr.info(tc, \"Initialize ACME\");\n+\n+\t\tdirectoryURI = (String) configProps.get(AcmeConstants.DIR_URI);\n+\t\tdomain = (String) configProps.get(AcmeConstants.DOMAIN);\n+\t\tvalidFor = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n+\t\tcountry = (String) configProps.get(AcmeConstants.COUNTRY);\n+\t\tlocality = (String) configProps.get(AcmeConstants.LOCALITY);\n+\t\tstate = (String) configProps.get(AcmeConstants.STATE);\n+\t\torganization = (String) configProps.get(AcmeConstants.ORG);\n+\t\torganizationalUnit = (String) configProps.get(AcmeConstants.OU);\n+\t\tchallengeRetries = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n+\t\tchallengeRetryWait = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n+\t\torderRetries = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n+\t\torderRetryWait = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n+\t\taccountKeyFile = (String) configProps.get(AcmeConstants.ACCOUNT_KEY_FILE);\n+\t\taccountContact = new HashSet<String>();\n+\t\taccountContact.add((String) configProps.get(AcmeConstants.ACCOUNT_CONTACT));\n+\t\tacceptTermsOfService = ((Boolean) configProps.get(AcmeConstants.ACCEPT_TERMS)).booleanValue();\n+\t\tdomainKeyFile = (String) configProps.get(AcmeConstants.DOMAIN_KEY_FILE);\n+\n+\t\tacmeClient = new AcmeClient(directoryURI, accountKeyFile, domainKeyFile, accountContact);\n+\t\tacmeClient.setAcceptTos(acceptTermsOfService);\n+\t\tacmeClient.setChallengeRetries(challengeRetries);\n+\t\tacmeClient.setChallengeRetryWait(challengeRetryWait);\n+\t\tacmeClient.setOrderRetries(orderRetries);\n+\t\tacmeClient.setOrderRetryWait(orderRetryWait);\n+\n+\t}\n+\n     @Deactivate\n     public void deactivate(ComponentContext context, int reason) {\n         Tr.info(tc, \" ******* JTM ******* AcmeProviderServiceImpl: inside deactivate() method\");", "originalCommit": "64834a6da3fb1dc34f9c4bc6bdf51c9e2a20a02a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyMjU4Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10365#discussion_r365922583", "bodyText": "Done", "author": "kristip17", "createdAt": "2020-01-13T17:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNDU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a0f1e3e2f670cb7f0c151ed3af7643c2d09cf20", "chunk": "diff --git a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\nindex 6b1a146e97..2c989792e2 100644\n--- a/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\n+++ b/dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderServiceImpl.java\n\n@@ -88,8 +88,6 @@ public class AcmeProviderServiceImpl implements AcmeConfig, ServletContextListen\n     }\n \n \tpublic void initialize(Map<String, Object> configProps) {\n-\t\tTr.info(tc, \"Initialize ACME\");\n-\n \t\tdirectoryURI = (String) configProps.get(AcmeConstants.DIR_URI);\n \t\tdomain = (String) configProps.get(AcmeConstants.DOMAIN);\n \t\tvalidFor = ((Integer) configProps.get(AcmeConstants.VALID_FOR)).intValue();\n"}}, {"oid": "5a0f1e3e2f670cb7f0c151ed3af7643c2d09cf20", "url": "https://github.com/OpenLiberty/open-liberty/commit/5a0f1e3e2f670cb7f0c151ed3af7643c2d09cf20", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-13T17:08:55Z", "type": "forcePushed"}, {"oid": "fc937febba4b31c0a6e41a1318bdadf0fee0da6f", "url": "https://github.com/OpenLiberty/open-liberty/commit/fc937febba4b31c0a6e41a1318bdadf0fee0da6f", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-13T17:11:37Z", "type": "commit"}, {"oid": "fc937febba4b31c0a6e41a1318bdadf0fee0da6f", "url": "https://github.com/OpenLiberty/open-liberty/commit/fc937febba4b31c0a6e41a1318bdadf0fee0da6f", "message": "Issue 10363: Constants and config processing", "committedDate": "2020-01-13T17:11:37Z", "type": "forcePushed"}]}