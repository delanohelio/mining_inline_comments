{"pr_number": 15303, "pr_title": "Add new tests for features", "pr_createdAt": "2020-12-14T17:51:32Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/15303", "timeline": [{"oid": "5bbc82f24a156b9e656ed34c52fea51bd68aa5ea", "url": "https://github.com/OpenLiberty/open-liberty/commit/5bbc82f24a156b9e656ed34c52fea51bd68aa5ea", "message": "Add new tests for features\n\n- Update test to make sure that public features in in a directory that\nmatches their short name\n- Add test to make sure that auto feature depend on more than one\nfeature and fix auto feature that did not pass this test.\n- Add test to make sure that l10n properties files have the same package\nname as the feature name.\n- Add io.openliberty prefix to feature name filter.", "committedDate": "2020-12-14T22:41:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNDM2OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r542914369", "bodyText": "Seems this message could be improved to indicate more than just the \"visibility\" may have a problem... Feature visibility public doesn't match the directory the feature is in. could be confusing, as it may be in the public directory.  Perhaps just change the visibility variable to expectedPathName?", "author": "tkburroughs", "createdAt": "2020-12-14T23:12:48Z", "path": "dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java", "diffHunk": "@@ -273,7 +273,12 @@ public void testVisibility2() {\n             File featureFile = featureInfo.getFeatureFile();\n             String fileName = featureFile.getAbsolutePath();\n             fileName = fileName.replace('\\\\', '/');\n-            if (!fileName.contains(\"/visibility/\" + visibility + \"/\")) {\n+            String expectedPathName = \"/visibility/\" + visibility + \"/\";\n+            if (\"public\".equals(visibility)) {\n+                expectedPathName += (featureInfo.getShortName() + '/');\n+            }\n+            expectedPathName += (featureName + \".feature\");\n+            if (!fileName.endsWith(expectedPathName)) {\n                 errorMessage.append(\"Found issues with \" + featureName + '\\n');\n                 errorMessage.append(\"     Feature visibility \" + visibility + \" doesn't match the directory the feature is in.\\n\");", "originalCommit": "5bbc82f24a156b9e656ed34c52fea51bd68aa5ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64f3957e667d81050b90eb158ae0744b39013122", "chunk": "diff --git a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\nindex 68cdadcb95..9c5395bc81 100644\n--- a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n+++ b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n\n@@ -280,11 +280,15 @@ public class VisibilityTest {\n             expectedPathName += (featureName + \".feature\");\n             if (!fileName.endsWith(expectedPathName)) {\n                 errorMessage.append(\"Found issues with \" + featureName + '\\n');\n-                errorMessage.append(\"     Feature visibility \" + visibility + \" doesn't match the directory the feature is in.\\n\");\n+                errorMessage.append(\"     Feature is not in the expected directory \" + expectedPathName + \".\\n\");\n+                errorMessage.append(\"     The feature's visibility \" + visibility + \" may not match the directory.\\n\");\n+                if (\"public\".equals(visibility)) {\n+                    errorMessage.append(\"     AND/OR the feature short name \" + featureInfo.getShortName() + \" may not match the directory.\\n\");\n+                }\n             }\n         }\n         if (errorMessage.length() != 0) {\n-            Assert.fail(\"Found features that have visibility set incorrectly: \" + '\\n' + errorMessage.toString());\n+            Assert.fail(\"Found features that appear to be in the wrong directory based off of their settings: \" + '\\n' + errorMessage.toString());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNzgxNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r542917816", "bodyText": "Is this a copy paste error?  This checking doesn't seem to have anything to do with edition.  should it say that have the filter set incorrectly?", "author": "tkburroughs", "createdAt": "2020-12-14T23:20:02Z", "path": "dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java", "diffHunk": "@@ -283,4 +288,69 @@ public void testVisibility2() {\n         }\n     }\n \n+    /**\n+     * Tests that an auto feature has more than one feature in its filter.\n+     * Tests that an auto feature doesn't depend on another auto feature.\n+     */\n+    @Test\n+    public void testAutoFeatures() {\n+        StringBuilder errorMessage = new StringBuilder();\n+        for (Entry<String, FeatureInfo> entry : features.entrySet()) {\n+            String featureName = entry.getKey();\n+            FeatureInfo featureInfo = entry.getValue();\n+\n+            if (!featureInfo.isAutoFeature()) {\n+                continue;\n+            }\n+\n+            String[] filterFeatures = featureInfo.getAutoFeatures();\n+            if (filterFeatures.length == 1) {\n+                errorMessage.append(\"Found issues with \" + featureName + '\\n');\n+                errorMessage.append(\"     Auto feature filter only depends on one feature \" + filterFeatures[0] + \".\\n\");\n+                errorMessage.append(\"     The feature and/or bundle dependencies in this auto feature should just be a dependency of that feature\\n\");\n+                errorMessage.append(\"     OR this should be turned into a private feature that \" + filterFeatures[0] + \" depends on.\");\n+            }\n+        }\n+        if (errorMessage.length() != 0) {\n+            Assert.fail(\"Found auto features that have edition set incorrectly: \" + '\\n' + errorMessage.toString());", "originalCommit": "5bbc82f24a156b9e656ed34c52fea51bd68aa5ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64f3957e667d81050b90eb158ae0744b39013122", "chunk": "diff --git a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\nindex 68cdadcb95..9c5395bc81 100644\n--- a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n+++ b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n\n@@ -280,11 +280,15 @@ public class VisibilityTest {\n             expectedPathName += (featureName + \".feature\");\n             if (!fileName.endsWith(expectedPathName)) {\n                 errorMessage.append(\"Found issues with \" + featureName + '\\n');\n-                errorMessage.append(\"     Feature visibility \" + visibility + \" doesn't match the directory the feature is in.\\n\");\n+                errorMessage.append(\"     Feature is not in the expected directory \" + expectedPathName + \".\\n\");\n+                errorMessage.append(\"     The feature's visibility \" + visibility + \" may not match the directory.\\n\");\n+                if (\"public\".equals(visibility)) {\n+                    errorMessage.append(\"     AND/OR the feature short name \" + featureInfo.getShortName() + \" may not match the directory.\\n\");\n+                }\n             }\n         }\n         if (errorMessage.length() != 0) {\n-            Assert.fail(\"Found features that have visibility set incorrectly: \" + '\\n' + errorMessage.toString());\n+            Assert.fail(\"Found features that appear to be in the wrong directory based off of their settings: \" + '\\n' + errorMessage.toString());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxODQ3MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r542918470", "bodyText": "Again, seems to be a copy/paste issue.... perhaps \"Found public features that properties files named incorrectly`?", "author": "tkburroughs", "createdAt": "2020-12-14T23:21:34Z", "path": "dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java", "diffHunk": "@@ -283,4 +288,69 @@ public void testVisibility2() {\n         }\n     }\n \n+    /**\n+     * Tests that an auto feature has more than one feature in its filter.\n+     * Tests that an auto feature doesn't depend on another auto feature.\n+     */\n+    @Test\n+    public void testAutoFeatures() {\n+        StringBuilder errorMessage = new StringBuilder();\n+        for (Entry<String, FeatureInfo> entry : features.entrySet()) {\n+            String featureName = entry.getKey();\n+            FeatureInfo featureInfo = entry.getValue();\n+\n+            if (!featureInfo.isAutoFeature()) {\n+                continue;\n+            }\n+\n+            String[] filterFeatures = featureInfo.getAutoFeatures();\n+            if (filterFeatures.length == 1) {\n+                errorMessage.append(\"Found issues with \" + featureName + '\\n');\n+                errorMessage.append(\"     Auto feature filter only depends on one feature \" + filterFeatures[0] + \".\\n\");\n+                errorMessage.append(\"     The feature and/or bundle dependencies in this auto feature should just be a dependency of that feature\\n\");\n+                errorMessage.append(\"     OR this should be turned into a private feature that \" + filterFeatures[0] + \" depends on.\");\n+            }\n+        }\n+        if (errorMessage.length() != 0) {\n+            Assert.fail(\"Found auto features that have edition set incorrectly: \" + '\\n' + errorMessage.toString());\n+        }\n+    }\n+\n+    /**\n+     * This test makes sure that public features have properties files that match the long\n+     * feature name.  When moving features to the io.openliberty prefix from com.ibm.websphere.appserver\n+     * and vice versa, the properties file renames were missed a few times.  This unit test\n+     * makes sure that it is found in the build instead of having to be detected by hand.\n+     */\n+    @Test\n+    public void testLocalizationResources() {\n+        StringBuilder errorMessage = new StringBuilder();\n+        for (Entry<String, FeatureInfo> entry : features.entrySet()) {\n+            String featureName = entry.getKey();\n+            FeatureInfo featureInfo = entry.getValue();\n+\n+            if (!\"public\".equals(featureInfo.getVisibility())) {\n+                continue;\n+            }\n+\n+            String shortName = featureInfo.getShortName();\n+            File featureFile = featureInfo.getFeatureFile();\n+\n+            String fileName = featureFile.getAbsolutePath();\n+            fileName = fileName.replace('\\\\', '/');\n+\n+            int lastSlash = fileName.lastIndexOf('/'); \n+            String expectedFileName = fileName.substring(0, lastSlash + 1) + \"/resources/l10n/\" + featureName + \".properties\";\n+            \n+            if (!new File(expectedFileName).exists()) {\n+                String expectedPropertiesFileRelPath = shortName + \"/resources/l10n/\" + featureName + \".properties\"; \n+                errorMessage.append(\"Found issues with \" + featureName + '\\n');\n+                errorMessage.append(\"     Expected to find file \" + expectedPropertiesFileRelPath + '\\n');\n+            }\n+        }\n+        \n+        if (errorMessage.length() != 0) {\n+            Assert.fail(\"Found auto features that have edition set incorrectly: \" + '\\n' + errorMessage.toString());", "originalCommit": "5bbc82f24a156b9e656ed34c52fea51bd68aa5ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64f3957e667d81050b90eb158ae0744b39013122", "chunk": "diff --git a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\nindex 68cdadcb95..9c5395bc81 100644\n--- a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n+++ b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n\n@@ -280,11 +280,15 @@ public class VisibilityTest {\n             expectedPathName += (featureName + \".feature\");\n             if (!fileName.endsWith(expectedPathName)) {\n                 errorMessage.append(\"Found issues with \" + featureName + '\\n');\n-                errorMessage.append(\"     Feature visibility \" + visibility + \" doesn't match the directory the feature is in.\\n\");\n+                errorMessage.append(\"     Feature is not in the expected directory \" + expectedPathName + \".\\n\");\n+                errorMessage.append(\"     The feature's visibility \" + visibility + \" may not match the directory.\\n\");\n+                if (\"public\".equals(visibility)) {\n+                    errorMessage.append(\"     AND/OR the feature short name \" + featureInfo.getShortName() + \" may not match the directory.\\n\");\n+                }\n             }\n         }\n         if (errorMessage.length() != 0) {\n-            Assert.fail(\"Found features that have visibility set incorrectly: \" + '\\n' + errorMessage.toString());\n+            Assert.fail(\"Found features that appear to be in the wrong directory based off of their settings: \" + '\\n' + errorMessage.toString());\n         }\n     }\n \n"}}, {"oid": "64f3957e667d81050b90eb158ae0744b39013122", "url": "https://github.com/OpenLiberty/open-liberty/commit/64f3957e667d81050b90eb158ae0744b39013122", "message": "Add new tests for features\n\n- Update test to make sure that public features in in a directory that\nmatches their short name\n- Add test to make sure that auto feature depend on more than one\nfeature and fix auto feature that did not pass this test.\n- Add test to make sure that l10n properties files have the same package\nname as the feature name.\n- Add io.openliberty prefix to feature name filter.", "committedDate": "2020-12-15T01:12:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDUzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r543260535", "bodyText": "I think it is theoretically possible for there to be no auto-features. So should this check be <=1?", "author": "tevans78", "createdAt": "2020-12-15T11:22:12Z", "path": "dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java", "diffHunk": "@@ -273,14 +273,88 @@ public void testVisibility2() {\n             File featureFile = featureInfo.getFeatureFile();\n             String fileName = featureFile.getAbsolutePath();\n             fileName = fileName.replace('\\\\', '/');\n-            if (!fileName.contains(\"/visibility/\" + visibility + \"/\")) {\n+            String expectedPathName = \"/visibility/\" + visibility + \"/\";\n+            if (\"public\".equals(visibility)) {\n+                expectedPathName += (featureInfo.getShortName() + '/');\n+            }\n+            expectedPathName += (featureName + \".feature\");\n+            if (!fileName.endsWith(expectedPathName)) {\n+                errorMessage.append(\"Found issues with \" + featureName + '\\n');\n+                errorMessage.append(\"     Feature is not in the expected directory \" + expectedPathName + \".\\n\");\n+                errorMessage.append(\"     The feature's visibility \" + visibility + \" may not match the directory.\\n\");\n+                if (\"public\".equals(visibility)) {\n+                    errorMessage.append(\"     AND/OR the feature short name \" + featureInfo.getShortName() + \" may not match the directory.\\n\");\n+                }\n+            }\n+        }\n+        if (errorMessage.length() != 0) {\n+            Assert.fail(\"Found features that appear to be in the wrong directory based off of their settings: \" + '\\n' + errorMessage.toString());\n+        }\n+    }\n+\n+    /**\n+     * Tests that an auto feature has more than one feature in its filter.\n+     * Tests that an auto feature doesn't depend on another auto feature.\n+     */\n+    @Test\n+    public void testAutoFeatures() {\n+        StringBuilder errorMessage = new StringBuilder();\n+        for (Entry<String, FeatureInfo> entry : features.entrySet()) {\n+            String featureName = entry.getKey();\n+            FeatureInfo featureInfo = entry.getValue();\n+\n+            if (!featureInfo.isAutoFeature()) {\n+                continue;\n+            }\n+\n+            String[] filterFeatures = featureInfo.getAutoFeatures();\n+            if (filterFeatures.length == 1) {", "originalCommit": "64f3957e667d81050b90eb158ae0744b39013122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MzIyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r543563220", "bodyText": "I have added the <= 1 logic", "author": "jhanders34", "createdAt": "2020-12-15T17:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2130a398d5135444c089cae03ebceebeca9dcc5", "chunk": "diff --git a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\nindex 9c5395bc81..29be84a5fa 100644\n--- a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n+++ b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/tests/VisibilityTest.java\n\n@@ -294,7 +294,6 @@ public class VisibilityTest {\n \n     /**\n      * Tests that an auto feature has more than one feature in its filter.\n-     * Tests that an auto feature doesn't depend on another auto feature.\n      */\n     @Test\n     public void testAutoFeatures() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2NTQ3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r543265476", "bodyText": "This should use the FeatureBnd.IBM_SHORT_NAME constant... I can't see why any of those constants should be private? A little pointless?", "author": "tevans78", "createdAt": "2020-12-15T11:30:25Z", "path": "dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/utils/FeatureInfo.java", "diffHunk": "@@ -178,6 +184,7 @@ private synchronized void populateInfo() {\n             if (vis != null) {\n                 visibility = vis.trim();\n             }\n+            this.shortName = builder.getProperty(\"IBM-ShortName\");", "originalCommit": "64f3957e667d81050b90eb158ae0744b39013122", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2ODE1OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r543268159", "bodyText": "These constants seem to be duplicated in multiple places. Perhaps com.ibm.ws.kernel.feature.internal.subsystem.FeatureDefinitionUtils should be the definitive source?", "author": "tevans78", "createdAt": "2020-12-15T11:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2NTQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTU0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/15303#discussion_r543565540", "bodyText": "I switched to use the FeatureBnd constant.", "author": "jhanders34", "createdAt": "2020-12-15T18:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2NTQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c9203747523b03c5991c8d0b8eae033c886a7e23", "chunk": "diff --git a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/utils/FeatureInfo.java b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/utils/FeatureInfo.java\nindex 563cd01099..11de62cb7d 100644\n--- a/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/utils/FeatureInfo.java\n+++ b/dev/com.ibm.websphere.appserver.features/test/src/com/ibm/ws/feature/utils/FeatureInfo.java\n\n@@ -184,7 +184,7 @@ public class FeatureInfo {\n             if (vis != null) {\n                 visibility = vis.trim();\n             }\n-            this.shortName = builder.getProperty(\"IBM-ShortName\");\n+            this.shortName = builder.getProperty(FeatureBnd.IBM_SHORT_NAME);\n \n             this.edition = edition;\n             this.kind = kind;\n"}}, {"oid": "a2130a398d5135444c089cae03ebceebeca9dcc5", "url": "https://github.com/OpenLiberty/open-liberty/commit/a2130a398d5135444c089cae03ebceebeca9dcc5", "message": "Add new tests for features\n\n- Update test to make sure that public features in in a directory that\nmatches their short name\n- Add test to make sure that auto feature depend on more than one\nfeature and fix auto feature that did not pass this test.\n- Add test to make sure that l10n properties files have the same package\nname as the feature name.\n- Add io.openliberty prefix to feature name filter.", "committedDate": "2020-12-15T16:31:53Z", "type": "forcePushed"}, {"oid": "c9203747523b03c5991c8d0b8eae033c886a7e23", "url": "https://github.com/OpenLiberty/open-liberty/commit/c9203747523b03c5991c8d0b8eae033c886a7e23", "message": "Add new tests for features\n\n- Update test to make sure that public features in in a directory that\nmatches their short name\n- Add test to make sure that auto feature depend on more than one\nfeature and fix auto feature that did not pass this test.\n- Add test to make sure that l10n properties files have the same package\nname as the feature name.\n- Add io.openliberty prefix to feature name filter.", "committedDate": "2020-12-15T18:00:33Z", "type": "commit"}, {"oid": "c9203747523b03c5991c8d0b8eae033c886a7e23", "url": "https://github.com/OpenLiberty/open-liberty/commit/c9203747523b03c5991c8d0b8eae033c886a7e23", "message": "Add new tests for features\n\n- Update test to make sure that public features in in a directory that\nmatches their short name\n- Add test to make sure that auto feature depend on more than one\nfeature and fix auto feature that did not pass this test.\n- Add test to make sure that l10n properties files have the same package\nname as the feature name.\n- Add io.openliberty prefix to feature name filter.", "committedDate": "2020-12-15T18:00:33Z", "type": "forcePushed"}]}