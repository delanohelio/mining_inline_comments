{"pr_number": 10615, "pr_title": "Secondary language error for chooser", "pr_createdAt": "2020-01-28T16:33:07Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10615", "timeline": [{"oid": "cbdad4f5dafa36b5863570e57f47e4f67546eb0d", "url": "https://github.com/OpenLiberty/open-liberty/commit/cbdad4f5dafa36b5863570e57f47e4f67546eb0d", "message": "added translation method", "committedDate": "2020-01-27T21:55:35Z", "type": "commit"}, {"oid": "375c5cf7b789f57b5fd83a97061a4f4b09852e41", "url": "https://github.com/OpenLiberty/open-liberty/commit/375c5cf7b789f57b5fd83a97061a4f4b09852e41", "message": "added in english check", "committedDate": "2020-01-28T16:31:41Z", "type": "commit"}, {"oid": "b09950e781cc21de1c004ead2bff0071999ee1ef", "url": "https://github.com/OpenLiberty/open-liberty/commit/b09950e781cc21de1c004ead2bff0071999ee1ef", "message": "removed and added comments", "committedDate": "2020-01-28T21:09:41Z", "type": "commit"}, {"oid": "1e9395b01e83c161a3b88bb5f1bfd458eae6d5dd", "url": "https://github.com/OpenLiberty/open-liberty/commit/1e9395b01e83c161a3b88bb5f1bfd458eae6d5dd", "message": "translated messages correction for error case", "committedDate": "2020-01-28T23:55:31Z", "type": "commit"}, {"oid": "c608fa5d249e753beb26e961f5a481c5e3c09bef", "url": "https://github.com/OpenLiberty/open-liberty/commit/c608fa5d249e753beb26e961f5a481c5e3c09bef", "message": "got rid of println and white space", "committedDate": "2020-01-29T15:07:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3NTUxNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10615#discussion_r372475517", "bodyText": "These System.out lines need to be taken out.", "author": "ayoho", "createdAt": "2020-01-29T16:04:55Z", "path": "dev/com.ibm.ws.security.oauth/src/com/ibm/ws/security/oauth20/error/impl/BrowserAndServerLogMessage.java", "diffHunk": "@@ -45,4 +47,39 @@ public void setLocales(Enumeration<Locale> requestLocales) {\n         this.requestLocales = requestLocales;\n     }\n \n+    /**\n+     * Determines the preferred Locale of the request, <b>as supported by the Liberty profile</b>.\n+     * In other words, if the most-preferred Locale that is requested that is not supported by the\n+     * Liberty runtime, then the next most-preferred Locale will be used, finally resulting in the\n+     * JVM's default Locale.\n+     * <p>\n+     * The net effect of this is any French locale (fr, fr_ca, fr_fr, etc) would resolve to just 'fr'.\n+     * Any Portugese locale ('pt') other than Brazillian ('pt_br') would resolve to the JVM default\n+     * encoding. Portugese Brazillian is tranlated to, so 'pt_br' is returned. Any English locale\n+     * is returned as 'en'. Any unrecognized locale resolves to the JVM default.\n+     *\n+     * @return The Locale for the request. The best match supported by the Liberty runtime is returned, or the defualt Locale.\n+     */\n+    public static Locale getLocale(final Enumeration<Locale> locales) {\n+        System.out.println(\"here\");\n+        // System.out.println(locales.nextElement());\n+        System.out.println(locales);", "originalCommit": "c608fa5d249e753beb26e961f5a481c5e3c09bef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6bd059eba35892261c691dd4a94e8a338598402", "chunk": "diff --git a/dev/com.ibm.ws.security.oauth/src/com/ibm/ws/security/oauth20/error/impl/BrowserAndServerLogMessage.java b/dev/com.ibm.ws.security.oauth/src/com/ibm/ws/security/oauth20/error/impl/BrowserAndServerLogMessage.java\nindex ab2af0a155..ab638f3556 100644\n--- a/dev/com.ibm.ws.security.oauth/src/com/ibm/ws/security/oauth20/error/impl/BrowserAndServerLogMessage.java\n+++ b/dev/com.ibm.ws.security.oauth/src/com/ibm/ws/security/oauth20/error/impl/BrowserAndServerLogMessage.java\n\n@@ -46,40 +49,4 @@ public class BrowserAndServerLogMessage {\n     public void setLocales(Enumeration<Locale> requestLocales) {\n         this.requestLocales = requestLocales;\n     }\n-\n-    /**\n-     * Determines the preferred Locale of the request, <b>as supported by the Liberty profile</b>.\n-     * In other words, if the most-preferred Locale that is requested that is not supported by the\n-     * Liberty runtime, then the next most-preferred Locale will be used, finally resulting in the\n-     * JVM's default Locale.\n-     * <p>\n-     * The net effect of this is any French locale (fr, fr_ca, fr_fr, etc) would resolve to just 'fr'.\n-     * Any Portugese locale ('pt') other than Brazillian ('pt_br') would resolve to the JVM default\n-     * encoding. Portugese Brazillian is tranlated to, so 'pt_br' is returned. Any English locale\n-     * is returned as 'en'. Any unrecognized locale resolves to the JVM default.\n-     *\n-     * @return The Locale for the request. The best match supported by the Liberty runtime is returned, or the defualt Locale.\n-     */\n-    public static Locale getLocale(final Enumeration<Locale> locales) {\n-        System.out.println(\"here\");\n-        // System.out.println(locales.nextElement());\n-        System.out.println(locales);\n-        if (locales == null) {\n-            return Locale.getDefault();\n-        }\n-\n-        while (locales.hasMoreElements()) {\n-            final Locale requestedLocale = locales.nextElement();\n-            // If its English, we're done. Just exit with that because we support all English.\n-            if (requestedLocale.getLanguage().equals(Locale.ENGLISH.getLanguage())) {\n-                return requestedLocale;\n-            }\n-            final Locale loadedLocale = ResourceBundle.getBundle(TraceConstants.MESSAGE_BUNDLE, requestedLocale).getLocale();\n-            if (!loadedLocale.toString().isEmpty() && requestedLocale.toString().startsWith(loadedLocale.toString())) {\n-                return loadedLocale;\n-            }\n-        }\n-\n-        return Locale.getDefault();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1ODU5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10615#discussion_r372558590", "bodyText": "So this would make three duplicates of this getLocale() method. Instead of duplicating the method so many times, adding it to a single common location - for instance a new lang package under com.ibm.ws.security.common - would be ideal. Even adding it to a single common location in security would still be duplicating code since we're just copying this method from a UI project. The theoretical ideal is a single method that the entire product can use, but off the top of my head I don't know where I'd put something like that.", "author": "ayoho", "createdAt": "2020-01-29T18:35:50Z", "path": "dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/web/SelectionPageGenerator.java", "diffHunk": "@@ -276,9 +279,38 @@ String createJavascript() {\n     }\n \n     String getHtmlTitle() {\n-        return Tr.formatMessage(tc, request.getLocales(), \"SELECTION_PAGE_TITLE\");\n+        return Tr.formatMessage(tc, getLocale(request.getLocales()), \"SELECTION_PAGE_TITLE\");\n     }\n \n+    /**\n+     * Determines the preferred Locale of the request, <b>as supported by the Liberty profile</b>.\n+     * In other words, if the most-preferred Locale that is requested that is not supported by the\n+     * Liberty runtime, then the next most-preferred Locale will be used, finally resulting in the\n+     * JVM's default Locale.\n+     * <p>\n+     * The net effect of this is any French locale (fr, fr_ca, fr_fr, etc) would resolve to just 'fr'.\n+     * Any Portugese locale ('pt') other than Brazillian ('pt_br') would resolve to the JVM default\n+     * encoding. Portugese Brazillian is tranlated to, so 'pt_br' is returned. Any English locale\n+     * is returned as 'en'. Any unrecognized locale resolves to the JVM default.\n+     * \n+     * @return The Locale for the request. The best match supported by the Liberty runtime is returned, or the defualt Locale.\n+     */\n+    public static Locale getLocale(final Enumeration<Locale> locales) {", "originalCommit": "c608fa5d249e753beb26e961f5a481c5e3c09bef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6bd059eba35892261c691dd4a94e8a338598402", "chunk": "diff --git a/dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/web/SelectionPageGenerator.java b/dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/web/SelectionPageGenerator.java\nindex f1a4eec844..331bcc20cf 100644\n--- a/dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/web/SelectionPageGenerator.java\n+++ b/dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/web/SelectionPageGenerator.java\n\n@@ -279,36 +277,7 @@ public class SelectionPageGenerator {\n     }\n \n     String getHtmlTitle() {\n-        return Tr.formatMessage(tc, getLocale(request.getLocales()), \"SELECTION_PAGE_TITLE\");\n-    }\n-\n-    /**\n-     * Determines the preferred Locale of the request, <b>as supported by the Liberty profile</b>.\n-     * In other words, if the most-preferred Locale that is requested that is not supported by the\n-     * Liberty runtime, then the next most-preferred Locale will be used, finally resulting in the\n-     * JVM's default Locale.\n-     * <p>\n-     * The net effect of this is any French locale (fr, fr_ca, fr_fr, etc) would resolve to just 'fr'.\n-     * Any Portugese locale ('pt') other than Brazillian ('pt_br') would resolve to the JVM default\n-     * encoding. Portugese Brazillian is tranlated to, so 'pt_br' is returned. Any English locale\n-     * is returned as 'en'. Any unrecognized locale resolves to the JVM default.\n-     * \n-     * @return The Locale for the request. The best match supported by the Liberty runtime is returned, or the defualt Locale.\n-     */\n-    public static Locale getLocale(final Enumeration<Locale> locales) {\n-        while (locales.hasMoreElements()) {\n-            final Locale requestedLocale = locales.nextElement();\n-            // If its English, we're done. Just exit with that because we support all English.\n-            if (requestedLocale.getLanguage().equals(Locale.ENGLISH.getLanguage())) {\n-                return requestedLocale;\n-            }\n-            final Locale loadedLocale = ResourceBundle.getBundle(TraceConstants.MESSAGE_BUNDLE, requestedLocale).getLocale();\n-            if (!loadedLocale.toString().isEmpty() && requestedLocale.toString().startsWith(loadedLocale.toString())) {\n-                return loadedLocale;\n-            }\n-        }\n-\n-        return Locale.getDefault();\n+        return Tr.formatMessage(tc, LocalesModifier.getPrimaryLocale(request.getLocales()), \"SELECTION_PAGE_TITLE\");\n     }\n     \n     String createHtmlBody() {\n"}}, {"oid": "e6bd059eba35892261c691dd4a94e8a338598402", "url": "https://github.com/OpenLiberty/open-liberty/commit/e6bd059eba35892261c691dd4a94e8a338598402", "message": "added code", "committedDate": "2020-01-30T22:06:01Z", "type": "commit"}, {"oid": "56e69a9d07ca3ff57e752d2c8d0d4fb589eb9529", "url": "https://github.com/OpenLiberty/open-liberty/commit/56e69a9d07ca3ff57e752d2c8d0d4fb589eb9529", "message": "got rid of bad imports and printlns", "committedDate": "2020-01-30T22:28:39Z", "type": "commit"}, {"oid": "415ad0a3f0ae8ad357896c9851b8c338ef4372b0", "url": "https://github.com/OpenLiberty/open-liberty/commit/415ad0a3f0ae8ad357896c9851b8c338ef4372b0", "message": "added common lang", "committedDate": "2020-01-31T22:06:18Z", "type": "commit"}, {"oid": "de295cfbc9bbe7a3132aced8585edbf74daa770a", "url": "https://github.com/OpenLiberty/open-liberty/commit/de295cfbc9bbe7a3132aced8585edbf74daa770a", "message": "Merge branch 'secondaryLanguageError' of github.com:ezhou365/open-liberty into secondaryLanguageError", "committedDate": "2020-01-31T22:07:02Z", "type": "commit"}]}