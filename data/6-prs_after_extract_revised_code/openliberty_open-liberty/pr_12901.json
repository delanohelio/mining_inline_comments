{"pr_number": 12901, "pr_title": "Add new <kerberos> config element", "pr_createdAt": "2020-07-06T23:02:38Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12901", "timeline": [{"oid": "92a93cbed86a8a3281578e23e832e3930a201224", "url": "https://github.com/OpenLiberty/open-liberty/commit/92a93cbed86a8a3281578e23e832e3930a201224", "message": "Introduce new <kerberos> configuration element for system-wide krb5 config", "committedDate": "2020-07-06T22:16:15Z", "type": "commit"}, {"oid": "0133066fd0b6c038d98648385c2b774a9e55447b", "url": "https://github.com/OpenLiberty/open-liberty/commit/0133066fd0b6c038d98648385c2b774a9e55447b", "message": "Update AuthData to use new <kerberos> config element", "committedDate": "2020-07-06T22:16:50Z", "type": "commit"}, {"oid": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "message": "Update SPNEGO to use new <kerberos> config element", "committedDate": "2020-07-06T23:11:08Z", "type": "commit"}, {"oid": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "url": "https://github.com/OpenLiberty/open-liberty/commit/2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "message": "Update SPNEGO to use new <kerberos> config element", "committedDate": "2020-07-06T23:11:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MDA0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450580046", "bodyText": "Can we change from kerbKeytab to keytabPath?", "author": "utle", "createdAt": "2020-07-07T02:39:55Z", "path": "dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java", "diffHunk": "@@ -162,6 +168,12 @@ protected void processConfig(Map<String, Object> props) {\n      */\n     protected String processKrb5Keytab(Map<String, Object> props) {\n         String keytab = (String) props.get(KEY_KRB5_KEYTAB);\n+        Path kerbKeytab = kerbSvc.getKeytab(); // from the <kerberos> element", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\nindex 4b25a079f9..4fe982d183 100755\n--- a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n+++ b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n\n@@ -167,20 +167,28 @@ public class SpnegoConfigImpl implements SpnegoConfig {\n      * @param props\n      */\n     protected String processKrb5Keytab(Map<String, Object> props) {\n-        String keytab = (String) props.get(KEY_KRB5_KEYTAB);\n-        Path kerbKeytab = kerbSvc.getKeytab(); // from the <kerberos> element\n+        String spnegoKeytab = (String) props.get(KEY_KRB5_KEYTAB);\n+        Path kerberosKeytab = kerbSvc.getKeytab(); // from the <kerberos> element\n \n-        if (keytab == null && kerbKeytab != null) {\n-            keytab = kerbKeytab.toAbsolutePath().toString();\n+        if (kerberosKeytab != null) {\n+            if (spnegoKeytab == null) {\n+                spnegoKeytab = kerberosKeytab.toAbsolutePath().toString();\n+            } else if (!kerberosKeytab.toAbsolutePath().toString().equals(spnegoKeytab)) {\n+                // Error: Conflicting values specified on <spnego> and <kerberos> element\n+                Tr.error(tc, \"SPNEGO_CONFLICTING_SETTINGS_CWWKS4323E\", \"keytab\", \"<kerberos>\", KEY_KRB5_KEYTAB, \"<spnego>\");\n+                return null;\n+            } else {\n+                // both values are set but are equal, tolerate it\n+            }\n         }\n \n-        if (keytab != null) {\n-            WsResource kt = locationAdmin.resolveResource(keytab);\n+        if (spnegoKeytab != null) {\n+            WsResource kt = locationAdmin.resolveResource(spnegoKeytab);\n             if (kt == null || !kt.exists()) {\n-                Tr.error(tc, \"SPNEGO_KRB5_KEYTAB_FILE_NOT_FOUND\", keytab);\n+                Tr.error(tc, \"SPNEGO_KRB5_KEYTAB_FILE_NOT_FOUND\", spnegoKeytab);\n                 return null;\n             } else {\n-                return keytab;\n+                return spnegoKeytab;\n             }\n         } else {\n             return krb5DefaultFile.getDefaultKrb5KeytabFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MTM0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450581344", "bodyText": "We have variable name prefix with krb and kerb ; Can we use one?. I am ok with either one but like to see one prefix for Kerberos.", "author": "utle", "createdAt": "2020-07-07T02:45:17Z", "path": "dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java", "diffHunk": "@@ -180,6 +192,20 @@ protected String processKrb5Keytab(Map<String, Object> props) {\n      */\n     protected String processKrb5Config(Map<String, Object> props) {\n         String krbCf = (String) props.get(KEY_KRB5_CONFIG);\n+        Path kerbConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\nindex 4b25a079f9..4fe982d183 100755\n--- a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n+++ b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n\n@@ -191,13 +199,13 @@ public class SpnegoConfigImpl implements SpnegoConfig {\n      * @param props\n      */\n     protected String processKrb5Config(Map<String, Object> props) {\n-        String krbCf = (String) props.get(KEY_KRB5_CONFIG);\n-        Path kerbConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element\n+        String spnegoConfigFile = (String) props.get(KEY_KRB5_CONFIG);\n+        Path kerberosConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element\n \n-        if (kerbConfigFile != null) {\n-            if (krbCf == null) {\n-                krbCf = kerbConfigFile.toAbsolutePath().toString();\n-            } else if (!kerbConfigFile.toAbsolutePath().toString().equals(krbCf)) {\n+        if (kerberosConfigFile != null) {\n+            if (spnegoConfigFile == null) {\n+                spnegoConfigFile = kerberosConfigFile.toAbsolutePath().toString();\n+            } else if (!kerberosConfigFile.toAbsolutePath().toString().equals(spnegoConfigFile)) {\n                 // Error: Conflicting values specified on <spnego> and <kerberos> element\n                 Tr.error(tc, \"SPNEGO_CONFLICTING_SETTINGS_CWWKS4323E\", \"configFile\", \"<kerberos>\", KEY_KRB5_CONFIG, \"<spnego>\");\n                 return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MTcxNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450581715", "bodyText": "how's about krbCf and krbCfPath?  or\nkerbCf and KerbCfPath?", "author": "utle", "createdAt": "2020-07-07T02:46:53Z", "path": "dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java", "diffHunk": "@@ -180,6 +192,20 @@ protected String processKrb5Keytab(Map<String, Object> props) {\n      */\n     protected String processKrb5Config(Map<String, Object> props) {\n         String krbCf = (String) props.get(KEY_KRB5_CONFIG);\n+        Path kerbConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\nindex 4b25a079f9..4fe982d183 100755\n--- a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n+++ b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n\n@@ -191,13 +199,13 @@ public class SpnegoConfigImpl implements SpnegoConfig {\n      * @param props\n      */\n     protected String processKrb5Config(Map<String, Object> props) {\n-        String krbCf = (String) props.get(KEY_KRB5_CONFIG);\n-        Path kerbConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element\n+        String spnegoConfigFile = (String) props.get(KEY_KRB5_CONFIG);\n+        Path kerberosConfigFile = kerbSvc.getConfigFile(); // from the <kerberos> element\n \n-        if (kerbConfigFile != null) {\n-            if (krbCf == null) {\n-                krbCf = kerbConfigFile.toAbsolutePath().toString();\n-            } else if (!kerbConfigFile.toAbsolutePath().toString().equals(krbCf)) {\n+        if (kerberosConfigFile != null) {\n+            if (spnegoConfigFile == null) {\n+                spnegoConfigFile = kerberosConfigFile.toAbsolutePath().toString();\n+            } else if (!kerberosConfigFile.toAbsolutePath().toString().equals(spnegoConfigFile)) {\n                 // Error: Conflicting values specified on <spnego> and <kerberos> element\n                 Tr.error(tc, \"SPNEGO_CONFLICTING_SETTINGS_CWWKS4323E\", \"configFile\", \"<kerberos>\", KEY_KRB5_CONFIG, \"<spnego>\");\n                 return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4ODI0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450588240", "bodyText": "When we modify the kerberos element or unsetKrb5Service, don't we need to clean up the subject cache?", "author": "utle", "createdAt": "2020-07-07T03:13:51Z", "path": "dev/com.ibm.ws.security.jca/src/com/ibm/ws/security/jca/internal/AuthDataServiceImpl.java", "diffHunk": "@@ -86,6 +88,14 @@ protected void unsetSecurityService(ServiceReference<SecurityService> reference)\n         securityServiceRef.unsetReference(reference);\n     }\n \n+    protected void setKrb5Service(ServiceReference<KerberosService> ref) {\n+        krb5ServiceRef.setReference(ref);\n+    }\n+\n+    protected void unsetKrb5Service(ServiceReference<KerberosService> ref) {", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5ODcxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450598714", "bodyText": "What subject cache are you referring to?", "author": "aguibert", "createdAt": "2020-07-07T04:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4ODI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMTU2Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450921566", "bodyText": "Looks like we do not cache the subject and do the Kerberos login every time, right?\nNOTE: Caching of subjects was removed under defect 63520, due to the following two reasons\n\nwhich we could not address in the GA timeframe:", "author": "utle", "createdAt": "2020-07-07T14:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4ODI0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4OTk2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450589961", "bodyText": "I would think the Kerberos service will do more than just get the config and keytab from the kerberos element. So we will know which keytab and config file that we use.\nif (kerberos config)\nget keytab and config files\nelse (get the default file name and location for keytab and config files)\nWe should print out the the kerberos config and keytab as an event.\nThe most common problem we see is which Kerberos config/keytab files that we use.", "author": "utle", "createdAt": "2020-07-07T03:21:58Z", "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.kerberos.auth;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.AccessController;\n+\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.kernel.service.util.SecureAction;\n+\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE,", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5OTYxOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450599619", "bodyText": "2 questions here:\n\n\nwhen you say \"print out the kerberos config and keytab as an event\" do you mean to log the locations being used as an INFO level message? That sounds reasonable to me.\n\n\nCan you elaborate on what you mean by the pseudocode above? I don't think the Liberty code should be doing any parsing of the config/keytab files, or even specifying default values if unspecified. We should just delegate all of the config parsing and default values to whatever the JDK has", "author": "aguibert", "createdAt": "2020-07-07T04:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4OTk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzI5OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450917299", "bodyText": "Yes, log the locations being used as an INFO level msg.\nI am ok with what you have as long as we log the INFO level msg in 1) for the default keytab and config file.", "author": "utle", "createdAt": "2020-07-07T14:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4OTk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java b/dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java\nindex 064f61aa5a..d9e1aef9ee 100644\n--- a/dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java\n+++ b/dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java\n\n@@ -50,8 +50,12 @@ public class KerberosService {\n \n         if (rawKeytab != null) {\n             keytab = Paths.get(rawKeytab);\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"Keytab was configured to: \" + keytab);\n+            if (keytab.toFile().exists()) {\n+                if (tc.isInfoEnabled()) {\n+                    Tr.info(tc, \"KRB5_FILE_FOUND_CWWKS4346I\", \"keytab\", keytab.toAbsolutePath());\n+                }\n+            } else {\n+                Tr.error(tc, \"KRB5_FILE_NOT_FOUND_CWWKS4345E\", \"keytab\", \"<kerberos>\", keytab.toAbsolutePath());\n             }\n         }\n         if (rawConfigFile != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5MDg3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450590872", "bodyText": "I hope you also test with IBM JDK 8 and the ibm krb5 debug is -Dcom.ibm.security.krb5.krb5Debug", "author": "utle", "createdAt": "2020-07-07T03:26:08Z", "path": "dev/com.ibm.ws.jdbc_fat_krb5/fat/src/com/ibm/ws/jdbc/fat/db2/JDBCKerberosTest.java", "diffHunk": "@@ -76,8 +76,8 @@ public static void setUp() throws Exception {\n         server.addEnvVar(\"DB2_USER\", db2.getUsername());\n         server.addEnvVar(\"DB2_PASS\", db2.getPassword());\n         server.addEnvVar(\"KRB5_USER\", KRB5_USER);\n+        server.addEnvVar(\"KRB5_CONF\", krbConfPath.toAbsolutePath().toString());\n         List<String> jvmOpts = new ArrayList<>();\n-        jvmOpts.add(\"-Djava.security.krb5.conf=\" + krbConfPath.toAbsolutePath());\n         jvmOpts.add(\"-Dsun.security.krb5.debug=true\");", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5ODYzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450598635", "bodyText": "I have not tested with IBM JDK 8 yet, but we will test with IBM JDK 8 before we GA the feature", "author": "aguibert", "createdAt": "2020-07-07T04:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU5MDg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.jdbc_fat_krb5/fat/src/com/ibm/ws/jdbc/fat/db2/JDBCKerberosTest.java b/dev/com.ibm.ws.jdbc_fat_krb5/fat/src/com/ibm/ws/jdbc/fat/db2/JDBCKerberosTest.java\nindex c33f1612ca..d81df642f5 100644\n--- a/dev/com.ibm.ws.jdbc_fat_krb5/fat/src/com/ibm/ws/jdbc/fat/db2/JDBCKerberosTest.java\n+++ b/dev/com.ibm.ws.jdbc_fat_krb5/fat/src/com/ibm/ws/jdbc/fat/db2/JDBCKerberosTest.java\n\n@@ -78,7 +78,8 @@ public class JDBCKerberosTest extends FATServletClient {\n         server.addEnvVar(\"KRB5_USER\", KRB5_USER);\n         server.addEnvVar(\"KRB5_CONF\", krbConfPath.toAbsolutePath().toString());\n         List<String> jvmOpts = new ArrayList<>();\n-        jvmOpts.add(\"-Dsun.security.krb5.debug=true\");\n+        jvmOpts.add(\"-Dsun.security.krb5.debug=true\"); // Hotspot/OpenJ9\n+        jvmOpts.add(\"-Dcom.ibm.security.krb5.krb5Debug=true\"); // IBM JDK\n         server.setJvmOptions(jvmOpts);\n \n         server.startServer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1MjQzMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12901#discussion_r450952430", "bodyText": "discussion with Ut: Change to error if both are specified to different value (same as config)", "author": "aguibert", "createdAt": "2020-07-07T15:27:52Z", "path": "dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java", "diffHunk": "@@ -162,6 +168,12 @@ protected void processConfig(Map<String, Object> props) {\n      */\n     protected String processKrb5Keytab(Map<String, Object> props) {\n         String keytab = (String) props.get(KEY_KRB5_KEYTAB);\n+        Path kerbKeytab = kerbSvc.getKeytab(); // from the <kerberos> element\n+\n+        if (keytab == null && kerbKeytab != null) {", "originalCommit": "2d5e9904ff6a3e80d137658f3ff057b2bd05ba2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\nindex 4b25a079f9..4fe982d183 100755\n--- a/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n+++ b/dev/com.ibm.ws.security.spnego/src/com/ibm/ws/security/spnego/internal/SpnegoConfigImpl.java\n\n@@ -167,20 +167,28 @@ public class SpnegoConfigImpl implements SpnegoConfig {\n      * @param props\n      */\n     protected String processKrb5Keytab(Map<String, Object> props) {\n-        String keytab = (String) props.get(KEY_KRB5_KEYTAB);\n-        Path kerbKeytab = kerbSvc.getKeytab(); // from the <kerberos> element\n+        String spnegoKeytab = (String) props.get(KEY_KRB5_KEYTAB);\n+        Path kerberosKeytab = kerbSvc.getKeytab(); // from the <kerberos> element\n \n-        if (keytab == null && kerbKeytab != null) {\n-            keytab = kerbKeytab.toAbsolutePath().toString();\n+        if (kerberosKeytab != null) {\n+            if (spnegoKeytab == null) {\n+                spnegoKeytab = kerberosKeytab.toAbsolutePath().toString();\n+            } else if (!kerberosKeytab.toAbsolutePath().toString().equals(spnegoKeytab)) {\n+                // Error: Conflicting values specified on <spnego> and <kerberos> element\n+                Tr.error(tc, \"SPNEGO_CONFLICTING_SETTINGS_CWWKS4323E\", \"keytab\", \"<kerberos>\", KEY_KRB5_KEYTAB, \"<spnego>\");\n+                return null;\n+            } else {\n+                // both values are set but are equal, tolerate it\n+            }\n         }\n \n-        if (keytab != null) {\n-            WsResource kt = locationAdmin.resolveResource(keytab);\n+        if (spnegoKeytab != null) {\n+            WsResource kt = locationAdmin.resolveResource(spnegoKeytab);\n             if (kt == null || !kt.exists()) {\n-                Tr.error(tc, \"SPNEGO_KRB5_KEYTAB_FILE_NOT_FOUND\", keytab);\n+                Tr.error(tc, \"SPNEGO_KRB5_KEYTAB_FILE_NOT_FOUND\", spnegoKeytab);\n                 return null;\n             } else {\n-                return keytab;\n+                return spnegoKeytab;\n             }\n         } else {\n             return krb5DefaultFile.getDefaultKrb5KeytabFile();\n"}}, {"oid": "91f1be20f079bebc6e54a20a4e14bce6676f24b4", "url": "https://github.com/OpenLiberty/open-liberty/commit/91f1be20f079bebc6e54a20a4e14bce6676f24b4", "message": "Review comment changes from Ut", "committedDate": "2020-07-08T18:39:31Z", "type": "forcePushed"}, {"oid": "ed56f87eeb5a3b4ff3e20bfc0cdda463eb55f687", "url": "https://github.com/OpenLiberty/open-liberty/commit/ed56f87eeb5a3b4ff3e20bfc0cdda463eb55f687", "message": "Review comment changes from Ut and ID team", "committedDate": "2020-07-13T15:06:04Z", "type": "forcePushed"}, {"oid": "7ac903ec633bc9fbd08d32df9055a0c216cb4934", "url": "https://github.com/OpenLiberty/open-liberty/commit/7ac903ec633bc9fbd08d32df9055a0c216cb4934", "message": "Review comment changes from Ut and ID team", "committedDate": "2020-07-14T04:19:27Z", "type": "commit"}, {"oid": "7ac903ec633bc9fbd08d32df9055a0c216cb4934", "url": "https://github.com/OpenLiberty/open-liberty/commit/7ac903ec633bc9fbd08d32df9055a0c216cb4934", "message": "Review comment changes from Ut and ID team", "committedDate": "2020-07-14T04:19:27Z", "type": "forcePushed"}]}