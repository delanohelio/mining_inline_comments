{"pr_number": 14750, "pr_title": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "pr_createdAt": "2020-10-29T14:07:37Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14750", "timeline": [{"oid": "04d4164dfeb4946767afd1dc1d183845ef08bf42", "url": "https://github.com/OpenLiberty/open-liberty/commit/04d4164dfeb4946767afd1dc1d183845ef08bf42", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-10-29T14:32:34Z", "type": "forcePushed"}, {"oid": "a621328b92d733c10a788ea98f6d82450030c26f", "url": "https://github.com/OpenLiberty/open-liberty/commit/a621328b92d733c10a788ea98f6d82450030c26f", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-10-30T16:22:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk2OTE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r515969175", "bodyText": "Do you plan to only run the Jakarta 9 ones with lite mode?", "author": "jhanders34", "createdAt": "2020-11-02T13:26:12Z", "path": "dev/com.ibm.ws.security.spnego_fat.1/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.spnego.fat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.spnego.fat.config.CommonTest;\n+import com.ibm.ws.security.spnego.fat.config.InitClass;\n+import com.ibm.ws.security.spnego.fat.config.SPNEGOConstants;\n+\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.rules.repeater.RepeatTests;\n+import componenttest.topology.impl.JavaInfo;\n+import componenttest.topology.impl.JavaInfo.Vendor;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({\n+                DynamicSpnegoConfigTest.class,\n+                S4U2SelfTest.class,\n+                S4U2ProxyTest.class\n+})\n+public class FATSuite extends InitClass {\n+    private static final Class<?> c = FATSuite.class;\n+\n+    @ClassRule\n+    public static RepeatTests repeat = RepeatTests.withoutModification().andWith(new JakartaEE9Action());", "originalCommit": "a621328b92d733c10a788ea98f6d82450030c26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5MzYxMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r515993612", "bodyText": "Typically when I move these over, I set them to run only EE9 in lite, and everything in full. However; if I recall correctly these were written so that pretty much everything is run in full. I didn't change that, so making it so that only EE9 ran in lite would really have no consequence.", "author": "jvanhill", "createdAt": "2020-11-02T14:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk2OTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e35c2c10c155b59fda3d2ca1f319773a3742a17", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego_fat.1/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java b/dev/com.ibm.ws.security.spnego_fat.1/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\nindex 61dc0c6faa..80018703dc 100755\n--- a/dev/com.ibm.ws.security.spnego_fat.1/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n+++ b/dev/com.ibm.ws.security.spnego_fat.1/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n\n@@ -93,7 +93,6 @@ public class FATSuite extends InitClass {\n             String thisMethod = \"isSupportJDK\";\n             JavaInfo javaInfo = JavaInfo.forServer(LibertyServerFactory.getLibertyServer(\"DynamicSpnegoConfigTest\"));\n \n-            JDK_V7_LOWER = javaInfo.majorVersion() <= 7;\n             IBM_JDK_V8_LOWER = javaInfo.vendor() == Vendor.IBM && javaInfo.majorVersion() <= 8;\n             SUN_ORACLE_JDK_V8_HIGHER = javaInfo.vendor() == Vendor.SUN_ORACLE && javaInfo.majorVersion() >= 8;\n             OTHER_SUPPORT_JDKS = javaInfo.majorVersion() >= 11 || SUN_ORACLE_JDK_V8_HIGHER;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDgyMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516020820", "bodyText": "No repeats for Jakarta 9?  I saw the bnd file said it was going to test faces-3.0", "author": "jhanders34", "createdAt": "2020-11-02T14:46:31Z", "path": "dev/com.ibm.ws.security.spnego_fat.2/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.spnego.fat;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.spnego.fat.config.CommonTest;\n+import com.ibm.ws.security.spnego.fat.config.InitClass;\n+import com.ibm.ws.security.spnego.fat.config.SPNEGOConstants;\n+\n+import componenttest.topology.impl.JavaInfo;\n+import componenttest.topology.impl.JavaInfo.Vendor;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(Suite.class)", "originalCommit": "a621328b92d733c10a788ea98f6d82450030c26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTA5Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516049097", "bodyText": "The FATs were originally all in one bucket, and took ~1.5 hours to run end to end in FULL mode (and overran the trace limit by quite a bit), and I didn't want to add another 1.5 hours. So I spoke with @utle and we picked a few of the FATs that represented a good coverage and then split the bucket into 3 buckets to get them each around 30 mins and below the trace output limit for the bucket.", "author": "jvanhill", "createdAt": "2020-11-02T15:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTk4Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516049982", "bodyText": "(I think this is the bucket that didn't have one FATs we picked for EE9 repeat)", "author": "jvanhill", "createdAt": "2020-11-02T15:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDQ4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516050487", "bodyText": "The tested features is probably b/c I got them all running first and then split the buckets by copying from the original bucket. I can remove that tested.features.", "author": "jvanhill", "createdAt": "2020-11-02T15:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "4e35c2c10c155b59fda3d2ca1f319773a3742a17", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego_fat.2/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java b/dev/com.ibm.ws.security.spnego_fat.2/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\nindex fe77620763..bac5b8bd78 100755\n--- a/dev/com.ibm.ws.security.spnego_fat.2/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n+++ b/dev/com.ibm.ws.security.spnego_fat.2/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n\n@@ -84,7 +84,6 @@ public class FATSuite extends InitClass {\n             String thisMethod = \"isSupportJDK\";\n             JavaInfo javaInfo = JavaInfo.forServer(LibertyServerFactory.getLibertyServer(\"AuthFilterElementTest\"));\n \n-            JDK_V7_LOWER = javaInfo.majorVersion() <= 7;\n             IBM_JDK_V8_LOWER = javaInfo.vendor() == Vendor.IBM && javaInfo.majorVersion() <= 8;\n             SUN_ORACLE_JDK_V8_HIGHER = javaInfo.vendor() == Vendor.SUN_ORACLE && javaInfo.majorVersion() >= 8;\n             OTHER_SUPPORT_JDKS = javaInfo.majorVersion() >= 11 || SUN_ORACLE_JDK_V8_HIGHER;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNjc2NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516106765", "bodyText": "No need for this code since we don't support Java 7 any longer.", "author": "jhanders34", "createdAt": "2020-11-02T16:45:29Z", "path": "dev/com.ibm.ws.security.spnego_fat/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.spnego.fat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.ClassRule;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.spnego.fat.config.CommonTest;\n+import com.ibm.ws.security.spnego.fat.config.InitClass;\n+import com.ibm.ws.security.spnego.fat.config.SPNEGOConstants;\n+\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.rules.repeater.RepeatTests;\n+import componenttest.topology.impl.JavaInfo;\n+import componenttest.topology.impl.JavaInfo.Vendor;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({\n+                BasicAuthTest.class,\n+                CanonicalHostNameTest.class,\n+                IncludeClientGSSCredentialInSubjectTest.class,\n+                IncludeCustomCacheKeyTest.class,\n+                Krb5ConfigTest.class,\n+                ServicePrincipalNamesTest.class,\n+                SpnegoTokenHelperApiTest.class,\n+                TrustedActiveDirectoryDomainsTest.class\n+})\n+public class FATSuite extends InitClass {\n+    private static final Class<?> c = FATSuite.class;\n+\n+    @ClassRule\n+    public static RepeatTests repeat = RepeatTests.withoutModification().andWith(new JakartaEE9Action());\n+\n+    @ClassRule\n+    public static ExternalResource testRule = new ExternalResource() {\n+        /**\n+         * Creates the SPN and keytab file to be used in any ensuing tests. Test classes can elect to create their own\n+         * SPN and keytab file if needed. A common SPNEGO token is also created which can be used by all test classes.\n+         * The common SPNEGO token should be refreshed at a certain interval, specified by the\n+         * TOKEN_REFRESH_LIFETIME_SECONDS variable.\n+         */\n+        @Override\n+        protected void before() throws Exception {\n+            String thisMethod = \"before\";\n+            Log.info(c, thisMethod, \"Performing the common setup for all test classes\");\n+\n+            getKDCInfoFromConsul();\n+\n+            if (!isSupportJDK())\n+                return;\n+\n+            String ip = InetAddress.getByName(\"localhost\").getHostAddress();\n+            if (!\"127.0.0.1\".equals(ip)) {\n+                Log.info(c, thisMethod, \"The localhost ip address is \" + ip + \" (not default value 127.0.0.1), localhost ip address tests will not be run\");\n+                LOCALHOST_DEFAULT_IP_ADDRESS = false;\n+            }\n+\n+            try {\n+                CommonTest.commonSetUp(\"com.ibm.ws.security.spnego.fat.setup\", null, SPNEGOConstants.NO_APPS, SPNEGOConstants.NO_PROPS,\n+                                       SPNEGOConstants.DONT_CREATE_SSL_CLIENT,\n+                                       SPNEGOConstants.CREATE_SPN_AND_KEYTAB, SPNEGOConstants.DEFAULT_REALM, SPNEGOConstants.CREATE_SPNEGO_TOKEN,\n+                                       SPNEGOConstants.SET_AS_COMMON_TOKEN, SPNEGOConstants.USE_CANONICAL_NAME, SPNEGOConstants.DONT_USE_COMMON_KEYTAB,\n+                                       SPNEGOConstants.DONT_START_SERVER);\n+            } catch (Exception e) {\n+                String message = CommonTest.maskHostnameAndPassword(e.getMessage());\n+                Log.info(c, thisMethod, \"Common setup failed, tests will not run: \" + message, e);\n+                throw (new Exception(\"Common setup failed, tests will not run: \" + message, e));\n+            }\n+\n+            // The keytab file needs to be copied into the /tmp folder so we can include it in the other servers\n+            CommonTest.getMyServer().copyFileToTempDir(SPNEGOConstants.KRB_RESOURCE_LOCATION.substring(1) + SPNEGOConstants.KRB5_KEYTAB_FILE, SPNEGOConstants.KRB5_KEYTAB_FILE);\n+            KEYTAB_FILE_LOCATION = \"tmp/\" + SPNEGOConstants.KRB5_KEYTAB_FILE;\n+\n+            Log.info(c, thisMethod, \"Common setup is complete\");\n+        }\n+\n+        private boolean isSupportJDK() throws IOException {\n+            String thisMethod = \"isSupportJDK\";\n+            JavaInfo javaInfo = JavaInfo.forServer(LibertyServerFactory.getLibertyServer(\"BasicAuthTest\"));\n+\n+            JDK_V7_LOWER = javaInfo.majorVersion() <= 7;", "originalCommit": "a621328b92d733c10a788ea98f6d82450030c26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzOTQ4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516139487", "bodyText": "I will remove this.", "author": "jvanhill", "createdAt": "2020-11-02T17:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNjc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MTIwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516151203", "bodyText": "I got rid of the JDK_V7_LOWER field in InitClass, which meant I could remove the testS4U2SelfJDKVersionComplianceTest test in S4U2SelfTest.java.", "author": "jvanhill", "createdAt": "2020-11-02T17:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNjc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MTk2MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14750#discussion_r516151961", "bodyText": "I also removed this from the two other FATSuite classes as well.", "author": "jvanhill", "createdAt": "2020-11-02T17:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNjc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e35c2c10c155b59fda3d2ca1f319773a3742a17", "chunk": "diff --git a/dev/com.ibm.ws.security.spnego_fat/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java b/dev/com.ibm.ws.security.spnego_fat/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\nindex 792c545661..bb6bb268df 100755\n--- a/dev/com.ibm.ws.security.spnego_fat/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n+++ b/dev/com.ibm.ws.security.spnego_fat/fat/src/com/ibm/ws/security/spnego/fat/FATSuite.java\n\n@@ -98,7 +98,6 @@ public class FATSuite extends InitClass {\n             String thisMethod = \"isSupportJDK\";\n             JavaInfo javaInfo = JavaInfo.forServer(LibertyServerFactory.getLibertyServer(\"BasicAuthTest\"));\n \n-            JDK_V7_LOWER = javaInfo.majorVersion() <= 7;\n             IBM_JDK_V8_LOWER = javaInfo.vendor() == Vendor.IBM && javaInfo.majorVersion() <= 8;\n             SUN_ORACLE_JDK_V8_HIGHER = javaInfo.vendor() == Vendor.SUN_ORACLE && javaInfo.majorVersion() >= 8;\n             OTHER_SUPPORT_JDKS = javaInfo.majorVersion() >= 11 || SUN_ORACLE_JDK_V8_HIGHER;\n"}}, {"oid": "4e35c2c10c155b59fda3d2ca1f319773a3742a17", "url": "https://github.com/OpenLiberty/open-liberty/commit/4e35c2c10c155b59fda3d2ca1f319773a3742a17", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-02T17:49:27Z", "type": "forcePushed"}, {"oid": "1b87f9fbbc8d5eddc16454a3c49f9f8dd9cb933a", "url": "https://github.com/OpenLiberty/open-liberty/commit/1b87f9fbbc8d5eddc16454a3c49f9f8dd9cb933a", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-06T15:55:03Z", "type": "forcePushed"}, {"oid": "dc432a5513ceb060ee1dfbccd196a8cdaf399abe", "url": "https://github.com/OpenLiberty/open-liberty/commit/dc432a5513ceb060ee1dfbccd196a8cdaf399abe", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-06T19:39:32Z", "type": "forcePushed"}, {"oid": "5ef6cf3a7901fc7997bc858ad887182e1eded370", "url": "https://github.com/OpenLiberty/open-liberty/commit/5ef6cf3a7901fc7997bc858ad887182e1eded370", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-09T17:05:25Z", "type": "forcePushed"}, {"oid": "dd45ee44fdb92e69a6e5d2a624571f9947a45130", "url": "https://github.com/OpenLiberty/open-liberty/commit/dd45ee44fdb92e69a6e5d2a624571f9947a45130", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-09T20:43:41Z", "type": "forcePushed"}, {"oid": "009a6335dfb779d6804aafebb4797917ad8354be", "url": "https://github.com/OpenLiberty/open-liberty/commit/009a6335dfb779d6804aafebb4797917ad8354be", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-10T15:20:58Z", "type": "forcePushed"}, {"oid": "5513592254f340a6c62fefd80e003b6d3b1bbbbd", "url": "https://github.com/OpenLiberty/open-liberty/commit/5513592254f340a6c62fefd80e003b6d3b1bbbbd", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-12T16:19:24Z", "type": "forcePushed"}, {"oid": "a21a759d25cb3b18809247ba105a27bfaf66f19f", "url": "https://github.com/OpenLiberty/open-liberty/commit/a21a759d25cb3b18809247ba105a27bfaf66f19f", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-13T15:10:39Z", "type": "forcePushed"}, {"oid": "8cd97888a641f35648fa97bbbd1a008fb6e8b154", "url": "https://github.com/OpenLiberty/open-liberty/commit/8cd97888a641f35648fa97bbbd1a008fb6e8b154", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-14T17:24:24Z", "type": "commit"}, {"oid": "8cd97888a641f35648fa97bbbd1a008fb6e8b154", "url": "https://github.com/OpenLiberty/open-liberty/commit/8cd97888a641f35648fa97bbbd1a008fb6e8b154", "message": "Issue #14098: Jakarta'ize spnego-1.0 feature.", "committedDate": "2020-11-14T17:24:24Z", "type": "forcePushed"}]}