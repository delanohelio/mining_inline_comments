{"pr_number": 10518, "pr_title": "MicroProfile Metrics 2.3 Implementation", "pr_createdAt": "2020-01-21T21:58:16Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10518", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNDY4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10518#discussion_r370304687", "bodyText": "Do we need synchronization when using SimpleTimer in multiple threads?", "author": "fmhwong", "createdAt": "2020-01-23T19:14:25Z", "path": "dev/com.ibm.ws.microprofile.metrics.2.3/src/com/ibm/ws/microprofile/metrics23/impl/SimpleTimerImpl.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.metrics23.impl;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+\n+import com.ibm.ws.microprofile.metrics.impl.Clock;\n+import com.ibm.ws.microprofile.metrics.impl.CounterImpl;\n+\n+/**\n+ * A timer metric which aggregates timing durations and provides duration statistics, plus\n+ * throughput statistics via {@link Meter}.\n+ */\n+public class SimpleTimerImpl implements SimpleTimer {\n+    /**\n+     * A timing context.\n+     *\n+     * @see SimpleTimerImpl#time()\n+     */\n+    public static class Context implements SimpleTimer.Context {\n+        private final SimpleTimerImpl simpleTimer;\n+        private final Clock clock;\n+        private final long startTime;\n+\n+        private Context(SimpleTimerImpl simpleTimer, Clock clock) {\n+            this.simpleTimer = simpleTimer;\n+            this.clock = clock;\n+            this.startTime = clock.getTick();\n+        }\n+\n+        /**\n+         * Updates the timer with the difference between current and start time. Call to this method will\n+         * not reset the start time. Multiple calls result in multiple updates.\n+         *\n+         * @return the elapsed time in nanoseconds\n+         */\n+        @Override\n+        public long stop() {\n+            final long elapsed = clock.getTick() - startTime;\n+            simpleTimer.update(elapsed, TimeUnit.NANOSECONDS);\n+            return elapsed;\n+        }\n+\n+        /** Equivalent to calling {@link #stop()}. */\n+        @Override\n+        public void close() {\n+            stop();\n+        }\n+    }\n+\n+    private final Counter count;\n+    private long elapsedTime;\n+    private final Clock clock;\n+\n+    public SimpleTimerImpl() {\n+        this(Clock.defaultClock());\n+    }\n+\n+    public SimpleTimerImpl(Clock clock) {\n+        this.clock = clock;\n+        this.count = new CounterImpl();\n+        this.elapsedTime = 0;\n+    }\n+\n+    /**\n+     * Adds a recorded duration.\n+     *\n+     * @param duration the length of the duration\n+     * @param unit     the scale unit of {@code duration}\n+     */\n+    @Override\n+    public void update(long duration, TimeUnit unit) {\n+        update(unit.toNanos(duration));\n+    }\n+\n+    @Override\n+    public <T> T time(Callable<T> event) throws Exception {\n+        final long startTime = clock.getTick();\n+        try {\n+            return event.call();\n+        } finally {\n+            update(clock.getTick() - startTime);\n+        }\n+    }\n+\n+    @Override\n+    public void time(Runnable event) {\n+        final long startTime = clock.getTick();\n+        try {\n+            event.run();\n+        } finally {\n+            update(clock.getTick() - startTime);\n+        }\n+    }\n+\n+    @Override\n+    public Context time() {\n+        return new Context(this, clock);\n+    }\n+\n+    private void update(long duration) {\n+        elapsedTime += duration;", "originalCommit": "52bb05fed650e164ddd8688e5a5f54d198afcbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2NTM3Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10518#discussion_r370365376", "bodyText": "removed the private method and am just directly using the metric API\nsynchronized added", "author": "Channyboy", "createdAt": "2020-01-23T21:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNDY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d0c480c98383346ea4ad73c26ce23a9d3c73e096", "chunk": "diff --git a/dev/com.ibm.ws.microprofile.metrics.2.3/src/com/ibm/ws/microprofile/metrics23/impl/SimpleTimerImpl.java b/dev/com.ibm.ws.microprofile.metrics.2.3/src/com/ibm/ws/microprofile/metrics23/impl/SimpleTimerImpl.java\nindex 399456d012..edee2c05c3 100644\n--- a/dev/com.ibm.ws.microprofile.metrics.2.3/src/com/ibm/ws/microprofile/metrics23/impl/SimpleTimerImpl.java\n+++ b/dev/com.ibm.ws.microprofile.metrics.2.3/src/com/ibm/ws/microprofile/metrics23/impl/SimpleTimerImpl.java\n\n@@ -10,8 +10,8 @@\n  *******************************************************************************/\n package com.ibm.ws.microprofile.metrics23.impl;\n \n+import java.time.Duration;\n import java.util.concurrent.Callable;\n-import java.util.concurrent.TimeUnit;\n \n import org.eclipse.microprofile.metrics.Counter;\n import org.eclipse.microprofile.metrics.Meter;\n"}}, {"oid": "d0c480c98383346ea4ad73c26ce23a9d3c73e096", "url": "https://github.com/OpenLiberty/open-liberty/commit/d0c480c98383346ea4ad73c26ce23a9d3c73e096", "message": "Remove 'ful' after RESTful and some cleanup", "committedDate": "2020-01-24T20:20:19Z", "type": "forcePushed"}, {"oid": "ca26ca863aa85ae4ccbfea35624c7ecbdbbf759f", "url": "https://github.com/OpenLiberty/open-liberty/commit/ca26ca863aa85ae4ccbfea35624c7ecbdbbf759f", "message": "MicroProfile Metrics 2.3 Implementation with SimpleTimer and REST stat metrics", "committedDate": "2020-01-27T19:19:40Z", "type": "commit"}, {"oid": "ca26ca863aa85ae4ccbfea35624c7ecbdbbf759f", "url": "https://github.com/OpenLiberty/open-liberty/commit/ca26ca863aa85ae4ccbfea35624c7ecbdbbf759f", "message": "MicroProfile Metrics 2.3 Implementation with SimpleTimer and REST stat metrics", "committedDate": "2020-01-27T19:19:40Z", "type": "forcePushed"}]}