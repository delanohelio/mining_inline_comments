{"pr_number": 12311, "pr_title": "Issue #11857: Create JakartaEE compliant feature for JACC.", "pr_createdAt": "2020-05-21T14:46:55Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12311", "timeline": [{"oid": "97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "url": "https://github.com/OpenLiberty/open-liberty/commit/97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-05-26T22:22:45Z", "type": "forcePushed"}, {"oid": "8c473824d597bd7dcb44194b2c3b34ba59d34e69", "url": "https://github.com/OpenLiberty/open-liberty/commit/8c473824d597bd7dcb44194b2c3b34ba59d34e69", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-05-26T22:37:13Z", "type": "forcePushed"}, {"oid": "86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "url": "https://github.com/OpenLiberty/open-liberty/commit/86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-05-29T21:52:37Z", "type": "forcePushed"}, {"oid": "2979c4d58fb90a3cb773fe285a23c36d54f265b4", "url": "https://github.com/OpenLiberty/open-liberty/commit/2979c4d58fb90a3cb773fe285a23c36d54f265b4", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-05-29T22:19:24Z", "type": "forcePushed"}, {"oid": "17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "url": "https://github.com/OpenLiberty/open-liberty/commit/17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-05-29T22:26:05Z", "type": "forcePushed"}, {"oid": "8bec6015730e8e9aed791afff7a7cb86edd89a36", "url": "https://github.com/OpenLiberty/open-liberty/commit/8bec6015730e8e9aed791afff7a7cb86edd89a36", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-06-01T18:45:07Z", "type": "forcePushed"}, {"oid": "4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "url": "https://github.com/OpenLiberty/open-liberty/commit/4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-06-02T16:32:39Z", "type": "forcePushed"}, {"oid": "40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "url": "https://github.com/OpenLiberty/open-liberty/commit/40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-01T14:39:50Z", "type": "forcePushed"}, {"oid": "a70ee37508469d445d802c7518b885144841db81", "url": "https://github.com/OpenLiberty/open-liberty/commit/a70ee37508469d445d802c7518b885144841db81", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-02T14:23:00Z", "type": "forcePushed"}, {"oid": "4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "url": "https://github.com/OpenLiberty/open-liberty/commit/4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-02T14:30:17Z", "type": "forcePushed"}, {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "url": "https://github.com/OpenLiberty/open-liberty/commit/e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-02T18:44:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450405238", "bodyText": "I am concerned about the jaccHandlerKeyArray.  Does there need to be jakarta version of those properties instead of the java EE ones.  You can use something like what is done here to help with some of this:\nhttps://github.com/OpenLiberty/open-liberty/blob/integration/dev/com.ibm.ws.concurrent/src/com/ibm/ws/concurrent/internal/ScheduledTask.java#L431\nYou can have an eeVersion put into your Component to allow you to know if you are doing EE9 or less than EE9.  You can see how to do that in the concurrent project.  If you need help, let me know.  But you can avoid the calling of getMessageContext(InitialContext) and some of the follow on code if it is EE9 or above.\nYou could also consider to have a second impl of this class where you call a method to do the MessageContext and it does nothing for EE9, but does the old way for EE8 and less.", "author": "jhanders34", "createdAt": "2020-07-06T18:28:32Z", "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,66 +90,110 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n \n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+                                                       for (String key : jaccHandlerKeyArray) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       handlerObjects.put(jaccHandlerKeyArray[0], subject);", "originalCommit": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTQ1MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450505451", "bodyText": "I have made the suggested changes by injecting the JavaEEVersion service into the EJBServiceImpl and setting the EE version in EJBSecurityValidatorImpl.", "author": "jvanhill", "createdAt": "2020-07-06T22:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMTU0Ng==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451031546", "bodyText": "You did not address whether you need a second version of the jaccHandlerKeyArray for jakarta.  Have the property names changed in Jakarta EE 9.  Maybe that is something forth coming.  The link I pointed to shows how they handle the different properties depending on version and reading them to support both the old javax... and jakarta... property names.", "author": "jhanders34", "createdAt": "2020-07-07T17:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjgyMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451086823", "bodyText": "It appears the only key that changed is javax.ejb.arguments as it changed to jakarta.ejb.arguments. I will update the code here.\nSee https://jakarta.ee/specifications/authorization/2.0/authorization-spec-2.0-SNAPSHOT.html for details.", "author": "jvanhill", "createdAt": "2020-07-07T19:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODA1Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451258053", "bodyText": "I expect that this will change and it will be jakarta.ejb.EnterpriseBean because the spec hasn't been updated yet to remove the javax reference.  Something to follow up with the spec people.", "author": "jhanders34", "createdAt": "2020-07-08T03:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTkxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451259914", "bodyText": "When ejbCore-2.0 and this function is actually used it will be interesting what the test cases end up doing.", "author": "jhanders34", "createdAt": "2020-07-08T03:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDI2NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451834264", "bodyText": "I have opened an issue for the spec here:\neclipse-ee4j/authorization#80\nI have also made created (#12955) a blocking issue for this PR's parent issue (#11857) to make any changes as a result of work done on the above issue.\nI have updated EJBSecurityValidatorImpl.java to set both the ee8- and ee9 keys appropriately. I have also updated PolicyContextHandlerImpl to return the super-set of both the old and the new properties, while retaining the original order. These changes will potentially make it easier for customer to migrate to ee9.", "author": "jvanhill", "createdAt": "2020-07-08T21:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "chunk": "diff --git a/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java b/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\nindex 23f3d973df..4ed855186c 100644\n--- a/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\n+++ b/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\n\n@@ -113,7 +115,7 @@ public class EJBSecurityValidatorImpl implements EJBSecurityValidator {\n                                                            mc = getMessageContext(ic);\n                                                        } catch (NamingException e) {\n                                                            if (tc.isDebugEnabled())\n-                                                               Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n+                                                               Tr.debug(tc, \"NamingException is caught. Ignoring.\", e);\n                                                        }\n                                                        if (mc != null) {\n                                                            if (tc.isDebugEnabled())\n"}}, {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "url": "https://github.com/OpenLiberty/open-liberty/commit/dee8a62ee5a497175fd5e69ec9b00e064660c259", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-07T15:37:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTI0Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451019243", "bodyText": "Do the copyrights of the test files need to be updated to have ,2020 on them as well?", "author": "jhanders34", "createdAt": "2020-07-07T17:13:02Z", "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.", "originalCommit": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4OTE3NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451089175", "bodyText": "Yes. Done.", "author": "jvanhill", "createdAt": "2020-07-07T19:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6fc1becec5f23a0595746894e692893674796974", "chunk": "diff --git a/dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java b/dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java\nindex 73464f4bf8..19b1965ebb 100755\n--- a/dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java\n+++ b/dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2015 IBM Corporation and others.\n+ * Copyright (c) 2015, 2020 IBM Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjQ1NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451022455", "bodyText": "To be clear JakartaEE 9 removed this support.  It is still there in JakartaEE 8", "author": "jhanders34", "createdAt": "2020-07-07T17:18:23Z", "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,67 +92,81 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Setting JACC handler data\");\n-                                PolicyContext.setHandlerData(handlerObjects);\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Calling JACC implies. PD : \" + pd);\n-                                return Policy.getPolicy().implies(pd, permission);\n-                            }\n-                        });\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n+\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+                                                       for (String key : jaccHandlerKeyArray) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       handlerObjects.put(jaccHandlerKeyArray[0], subject);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[1], bean);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n+\n+                                                       /*\n+                                                        * JavaEE supports JAX-RPC MessageContext. JakartaEE removed this support.", "originalCommit": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMDI5Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451030292", "bodyText": "I had hoped that the version check would have been here before newing up the InitialContext.", "author": "jhanders34", "createdAt": "2020-07-07T17:31:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjExMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451102111", "bodyText": "I moved the version check so we don't create the context and clarified the comment.", "author": "jvanhill", "createdAt": "2020-07-07T19:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6fc1becec5f23a0595746894e692893674796974", "chunk": "diff --git a/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java b/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\nindex 4ed855186c..7b2f814e31 100644\n--- a/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\n+++ b/dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java\n\n@@ -99,6 +105,8 @@ public class EJBSecurityValidatorImpl implements EJBSecurityValidator {\n \n                                                        if (tc.isDebugEnabled())\n                                                            Tr.debug(tc, \"Registering JACC context handlers\");\n+\n+                                                       String[] jaccHandlerKeyArray = getJaccHandlerKeyArray();\n                                                        for (String key : jaccHandlerKeyArray) {\n                                                            PolicyContext.registerHandler(key, pch, true);\n                                                        }\n"}}, {"oid": "6fc1becec5f23a0595746894e692893674796974", "url": "https://github.com/OpenLiberty/open-liberty/commit/6fc1becec5f23a0595746894e692893674796974", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-07T22:16:36Z", "type": "forcePushed"}, {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e", "url": "https://github.com/OpenLiberty/open-liberty/commit/0de586caa8ad421d48da385a42c65ec9b8f1928e", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-08T21:28:56Z", "type": "commit"}, {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e", "url": "https://github.com/OpenLiberty/open-liberty/commit/0de586caa8ad421d48da385a42c65ec9b8f1928e", "message": "Issue #11857: Create JakartaEE compliant feature for JACC.", "committedDate": "2020-07-08T21:28:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MTA0Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451871043", "bodyText": "Is PolicyContextHandlerImpl the only possible handler?  By setting both you can get an IllegalArgumentException if the handler doesn't support the key.  If it is a JACC 1.5 handler it won't know how to process the EE9 arguments, so you will end up breaking zero migration.  Also since you know that argument 0 and 1 are the same it seems like a waste to call it for each one of them even if you stuck with this approach.  I think you need to do what you were doing before and just do the first arguments for the spec level.  The jacc provider will have to implement the jarkarta handler and update to do the new parameters anyway.  Maybe have a common array as well if you are going to keep with your current approach.", "author": "jhanders34", "createdAt": "2020-07-08T23:01:05Z", "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,55 +98,70 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Setting JACC handler data\");\n-                                PolicyContext.setHandlerData(handlerObjects);\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Calling JACC implies. PD : \" + pd);\n-                                return Policy.getPolicy().implies(pd, permission);\n-                            }\n-                        });\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n+\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+\n+                                                       for (String key : jaccHandlerKeyArrayEe8) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       for (String key : jaccHandlerKeyArrayEe9) {\n+                                                           PolicyContext.registerHandler(key, pch, true);", "originalCommit": "0de586caa8ad421d48da385a42c65ec9b8f1928e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDMwNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r452344305", "bodyText": "It is the only PolicyContextHandler Liberty provides.\nI had talked to @kwsutter and we preferred to support both sets of properties for ease of use in migration. When I start working on the FATs I will keep an eye on any potential issues that might arise from supporting both, but my suspicion is that the ee8- providers only look for the javax properties so the new properties won't be an issue.\nAs for the array entries that I am essentially overwriting, the reason I put them in there is because when the spec is updated and we come back and add the updated keys, all we will need to do is update the array and the code to set the key will already be there.", "author": "jvanhill", "createdAt": "2020-07-09T16:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MTA0Mw=="}], "type": "inlineReview", "revised_code": null}]}