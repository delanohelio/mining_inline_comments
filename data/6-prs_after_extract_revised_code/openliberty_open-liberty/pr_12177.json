{"pr_number": 12177, "pr_title": "Refactor BaseMetrics so that it is not singleton that is explicitly called by the publc/private rest handler; it is now an osgi service", "pr_createdAt": "2020-05-14T03:59:26Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/12177", "timeline": [{"oid": "dd234d94846bd81520debe4a95a86c6e904c2f74", "url": "https://github.com/OpenLiberty/open-liberty/commit/dd234d94846bd81520debe4a95a86c6e904c2f74", "message": "Refactor BaseMetrics so that it is not singleton that is explicitly called by the publc/private rest handler; it is now a osgi service", "committedDate": "2020-05-14T03:57:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjEwNg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12177#discussion_r425812106", "bodyText": "Why is SHARED_METRIC_REGISTRY public?", "author": "fmhwong", "createdAt": "2020-05-15T13:45:29Z", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "diffHunk": "@@ -25,33 +26,45 @@\n import org.eclipse.microprofile.metrics.MetricType;\n import org.eclipse.microprofile.metrics.MetricUnits;\n import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n \n import com.ibm.ws.microprofile.metrics.impl.CounterImpl;\n import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n \n+@Component(service = { BaseMetrics.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n public class BaseMetrics {\n \n-    protected static BaseMetrics baseMetrics = null;\n     protected static String BASE = MetricRegistry.Type.BASE.getName();\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    protected static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;", "originalCommit": "dd234d94846bd81520debe4a95a86c6e904c2f74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2a977a963faa31c7bc0b5b1223f7c6106c8da55", "chunk": "diff --git a/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java b/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\nindex eb957ca7fb..605a1e4c11 100644\n--- a/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\n+++ b/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\n\n@@ -43,16 +43,13 @@ public class BaseMetrics {\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    private static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n \n     @Reference\n     public void setSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n         BaseMetrics.SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n     }\n \n-    public BaseMetrics() {\n-    }\n-\n     @Activate\n     protected void activate(ComponentContext context, Map<String, Object> properties) {\n         mbs = ManagementFactory.getPlatformMBeanServer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjU3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/12177#discussion_r425812572", "bodyText": "Do you need an empty constructor?", "author": "fmhwong", "createdAt": "2020-05-15T13:46:12Z", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "diffHunk": "@@ -25,33 +26,45 @@\n import org.eclipse.microprofile.metrics.MetricType;\n import org.eclipse.microprofile.metrics.MetricUnits;\n import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n \n import com.ibm.ws.microprofile.metrics.impl.CounterImpl;\n import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n \n+@Component(service = { BaseMetrics.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n public class BaseMetrics {\n \n-    protected static BaseMetrics baseMetrics = null;\n     protected static String BASE = MetricRegistry.Type.BASE.getName();\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    protected static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n \n-    public static synchronized BaseMetrics getInstance(SharedMetricRegistries sharedMetricRegistry) {\n-        SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n-        if (baseMetrics == null)\n-            baseMetrics = new BaseMetrics();\n-        return baseMetrics;\n+    @Reference\n+    public void setSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+        BaseMetrics.SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n     }\n \n-    protected BaseMetrics() {\n+    public BaseMetrics() {", "originalCommit": "dd234d94846bd81520debe4a95a86c6e904c2f74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2a977a963faa31c7bc0b5b1223f7c6106c8da55", "chunk": "diff --git a/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java b/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\nindex eb957ca7fb..605a1e4c11 100644\n--- a/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\n+++ b/dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java\n\n@@ -43,16 +43,13 @@ public class BaseMetrics {\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    private static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n \n     @Reference\n     public void setSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n         BaseMetrics.SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n     }\n \n-    public BaseMetrics() {\n-    }\n-\n     @Activate\n     protected void activate(ComponentContext context, Map<String, Object> properties) {\n         mbs = ManagementFactory.getPlatformMBeanServer();\n"}}, {"oid": "f2a977a963faa31c7bc0b5b1223f7c6106c8da55", "url": "https://github.com/OpenLiberty/open-liberty/commit/f2a977a963faa31c7bc0b5b1223f7c6106c8da55", "message": "Clean up - non necessary empty constructor - privatize static variable only used locally", "committedDate": "2020-05-19T18:27:48Z", "type": "commit"}]}