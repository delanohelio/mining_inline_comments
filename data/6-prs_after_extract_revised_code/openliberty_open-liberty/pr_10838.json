{"pr_number": 10838, "pr_title": "Ensure SSL passwords are not logged in oracle connection properties", "pr_createdAt": "2020-02-11T19:11:36Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10838", "timeline": [{"oid": "6a8af792622911fddaf02924be86ab441b632b2f", "url": "https://github.com/OpenLiberty/open-liberty/commit/6a8af792622911fddaf02924be86ab441b632b2f", "message": "Ensure connection property passwords are not logged.", "committedDate": "2020-02-11T18:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3MDk0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10838#discussion_r377870944", "bodyText": ".toLowerCase().contains(\"connectionProperties\") won't ever be true", "author": "njr-11", "createdAt": "2020-02-11T20:09:31Z", "path": "dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java", "diffHunk": "@@ -161,6 +172,8 @@ public int hashCode() {\n                 entry.setValue(\"******\");\n             else if(entry.getKey() instanceof String && entry.getValue() instanceof String && ((String) entry.getKey()).toLowerCase().contains(\"url\"))\n                 entry.setValue(filterURL((String) entry.getValue()));\n+            else if (entry.getKey() instanceof String && entry.getKey() instanceof String && ((String) entry.getKey()).toLowerCase().contains(\"connectionProperties\"))", "originalCommit": "6a8af792622911fddaf02924be86ab441b632b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7dd91584e1a76d0e588829ccb872fad2dd1be7", "chunk": "diff --git a/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java b/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\nindex 90464c886b..4f9f29cb04 100644\n--- a/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\n+++ b/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\n\n@@ -172,7 +171,7 @@ public class PropertyService extends Properties {\n                 entry.setValue(\"******\");\n             else if(entry.getKey() instanceof String && entry.getValue() instanceof String && ((String) entry.getKey()).toLowerCase().contains(\"url\"))\n                 entry.setValue(filterURL((String) entry.getValue()));\n-            else if (entry.getKey() instanceof String && entry.getKey() instanceof String && ((String) entry.getKey()).toLowerCase().contains(\"connectionProperties\"))\n+            else if (entry.getKey() instanceof String && entry.getKey() instanceof String && ((String) entry.getKey()).toLowerCase().contains(\"connectionproperties\"))\n                 entry.setValue(filterConnectionProperties((String) entry.getValue()));\n         return map;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3MzQ5OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10838#discussion_r377873498", "bodyText": "Rather than having separate patterns/matchers for keyStorePassword=..., you could use a single pattern for just Password=...", "author": "njr-11", "createdAt": "2020-02-11T20:15:29Z", "path": "dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java", "diffHunk": "@@ -194,6 +207,23 @@ public static String filterURL(String url) {\n         sb.append(\"****\");\n         return sb.toString();\n     }\n+    \n+    public static String filterConnectionProperties(String props) {\n+        final String keyStorePattern = \"javax\\\\.net\\\\.ssl\\\\.keyStorePassword\\\\s*=\\\\s*(.*?)\\\\s*(;|$)\";\n+        final String trustStorePattern = \"javax\\\\.net\\\\.ssl\\\\.trustStorePassword\\\\s*=\\\\s*(.*?)\\\\s*(;|$)\";", "originalCommit": "6a8af792622911fddaf02924be86ab441b632b2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea7dd91584e1a76d0e588829ccb872fad2dd1be7", "chunk": "diff --git a/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java b/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\nindex 90464c886b..4f9f29cb04 100644\n--- a/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\n+++ b/dev/com.ibm.ws.jdbc/src/com/ibm/ws/jdbc/internal/PropertyService.java\n\n@@ -209,20 +208,23 @@ public class PropertyService extends Properties {\n     }\n     \n     public static String filterConnectionProperties(String props) {\n-        final String keyStorePattern = \"javax\\\\.net\\\\.ssl\\\\.keyStorePassword\\\\s*=\\\\s*(.*?)\\\\s*(;|$)\";\n-        final String trustStorePattern = \"javax\\\\.net\\\\.ssl\\\\.trustStorePassword\\\\s*=\\\\s*(.*?)\\\\s*(;|$)\";\n+        final String regex = \"Password\\\\s*=\\\\s*(.*?)\\\\s*(;|$)\";\n         \n-        Matcher keyStoreMatcher = Pattern.compile(keyStorePattern).matcher(props);\n-        if (keyStoreMatcher.find()) {\n-            props = new StringBuilder(props).replace(keyStoreMatcher.start(1), keyStoreMatcher.end(1), \"*****\").toString();\n+        StringBuffer sb = new StringBuffer();\n+        Pattern pattern = Pattern.compile(regex);\n+        Matcher matcher = pattern.matcher(props);\n+\n+        while (matcher.find()) {\n+            //group(0) = \"Password = abcd;\" group(1) = \"abcd\" group(2) = \";\"\n+            //This appends a replacement for group(0), so we want to just replace group(1) with *****\n+            matcher.appendReplacement(sb, matcher.group(0).replace(matcher.group(1), \"*****\"));\n         }\n         \n-        Matcher trustStoreMatcher = Pattern.compile(trustStorePattern).matcher(props);\n-        if(trustStoreMatcher.find()) {\n-            props = new StringBuilder(props).replace(trustStoreMatcher.start(1), trustStoreMatcher.end(1), \"*****\").toString();\n-        }\n+        //Append any trailing characters after matches\n+        //If there were no matches this will just append props\n+        matcher.appendTail(sb);\n         \n-        return props;           \n+        return sb.toString(); \n     }\n \n     /**\n"}}, {"oid": "ea7dd91584e1a76d0e588829ccb872fad2dd1be7", "url": "https://github.com/OpenLiberty/open-liberty/commit/ea7dd91584e1a76d0e588829ccb872fad2dd1be7", "message": "feedback changes", "committedDate": "2020-02-12T17:11:10Z", "type": "commit"}]}