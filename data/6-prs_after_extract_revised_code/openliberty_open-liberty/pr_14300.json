{"pr_number": 14300, "pr_title": "Create facesContainer-3.0 Feature", "pr_createdAt": "2020-10-02T20:49:57Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/14300", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NjQ4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r499696489", "bodyText": "Is this something new added to the latest jakarta CDI/Faces?", "author": "pnicolucci", "createdAt": "2020-10-05T15:44:41Z", "path": "dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/FacesUrlTransformer.java", "diffHunk": "@@ -30,6 +30,8 @@\n     private static final String HTTPS_PROTOCOL_URL_PREFIX = \"https://\";\n     private static final String QUERY_STRING_DELIMITER = \"?\";\n     private static final String PARAMETER_PAIR_DELIMITER = \"&\";\n+    // in rare cases, semicolon will the delimiter; e.g. when you need to encode \"&\" as \"&amp;\"\n+    private static final String PARAMETER_PAIR_DELIMITER_ENCODED = \";\";", "originalCommit": "85c7ea35cb13e84df8778533b07994cfcaf92fd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4OTU5MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r500389590", "bodyText": "These files were out of date, so I updated them as part of this new feature. I can undo these changes, and do them in a separate PR if you still want these updates.  (Or I can just create a new issue and link this PR to it).\nYou can find these files here: https://github.com/weld/core/tree/master/modules/jsf/src/main/java/org/jboss/weld/module/jsf\nThis particular change you commented on was part of WELD-2512 if you look at the commit history.", "author": "volosied", "createdAt": "2020-10-06T15:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1d07b6678629f404e89e9f57b82e80092390fa68", "chunk": "diff --git a/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/FacesUrlTransformer.java b/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/FacesUrlTransformer.java\ndeleted file mode 100644\nindex 55975f766b..0000000000\n--- a/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/FacesUrlTransformer.java\n+++ /dev/null\n\n@@ -1,122 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source\n- * Copyright 2008, Red Hat, Inc., and individual contributors\n- * by the @authors tag. See the copyright.txt in the distribution for a\n- * full listing of individual contributors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.ibm.ws.jsf.container.cdi;\n-\n-import javax.faces.context.FacesContext;\n-\n-/**\n- * Helper class for preparing JSF URLs which include the conversation id.\n- *\n- * @author Nicklas Karlsson\n- * @author Dan Allen\n- * @author Marko Luksa\n- */\n-public class FacesUrlTransformer {\n-    private static final String HTTP_PROTOCOL_URL_PREFIX = \"http://\";\n-    private static final String HTTPS_PROTOCOL_URL_PREFIX = \"https://\";\n-    private static final String QUERY_STRING_DELIMITER = \"?\";\n-    private static final String PARAMETER_PAIR_DELIMITER = \"&\";\n-    // in rare cases, semicolon will the delimiter; e.g. when you need to encode \"&\" as \"&amp;\"\n-    private static final String PARAMETER_PAIR_DELIMITER_ENCODED = \";\";\n-    private static final String PARAMETER_ASSIGNMENT_OPERATOR = \"=\";\n-\n-    private String url;\n-    private final FacesContext context;\n-\n-    public FacesUrlTransformer(String url, FacesContext facesContext) {\n-        this.url = url;\n-        this.context = facesContext;\n-    }\n-\n-    public FacesUrlTransformer appendConversationIdIfNecessary(String cidParameterName, String cid) {\n-        this.url = appendParameterIfNeeded(url, cidParameterName, cid);\n-        return this;\n-    }\n-\n-    private static String appendParameterIfNeeded(String url, String parameterName, String parameterValue) {\n-        int queryStringIndex = url.indexOf(QUERY_STRING_DELIMITER);\n-        // if there is no query string or there is a query string but the param is\n-        // absent, then append it\n-        if (queryStringIndex < 0 || isCidParamAbsent(url, parameterName, queryStringIndex)) {\n-            StringBuilder builder = new StringBuilder(url);\n-            if (queryStringIndex < 0) {\n-                builder.append(QUERY_STRING_DELIMITER);\n-            } else {\n-                builder.append(PARAMETER_PAIR_DELIMITER);\n-            }\n-            builder.append(parameterName).append(PARAMETER_ASSIGNMENT_OPERATOR);\n-            if (parameterValue != null) {\n-                builder.append(parameterValue);\n-            }\n-            return builder.toString();\n-        } else {\n-            return url;\n-        }\n-    }\n-\n-    private static boolean isCidParamAbsent(String url, String parameterName, int queryStringIndex) {\n-        return url.indexOf(QUERY_STRING_DELIMITER + parameterName + PARAMETER_ASSIGNMENT_OPERATOR, queryStringIndex) < 0\n-            && url.indexOf(PARAMETER_PAIR_DELIMITER + parameterName + PARAMETER_ASSIGNMENT_OPERATOR, queryStringIndex) < 0\n-            && url.indexOf(PARAMETER_PAIR_DELIMITER_ENCODED + parameterName + PARAMETER_ASSIGNMENT_OPERATOR, queryStringIndex) < 0;\n-    }\n-\n-    public String getUrl() {\n-        return url;\n-    }\n-\n-    public FacesUrlTransformer toRedirectViewId() {\n-        String requestPath = context.getExternalContext().getRequestContextPath();\n-        if (isUrlAbsolute()) {\n-            url = url.substring(url.indexOf(requestPath) + requestPath.length());\n-        } else if (url.startsWith(requestPath)) {\n-            url = url.substring(requestPath.length());\n-        }\n-        return this;\n-    }\n-\n-    public FacesUrlTransformer toActionUrl() {\n-        String actionUrl = context.getApplication().getViewHandler().getActionURL(context, url);\n-\n-        int queryStringIndex = url.indexOf(QUERY_STRING_DELIMITER);\n-        if (queryStringIndex < 0) {\n-            url = actionUrl;\n-        } else {\n-            String queryParameters = url.substring(queryStringIndex + 1);\n-\n-            int actionQueryStringIndex = actionUrl.indexOf(QUERY_STRING_DELIMITER);\n-            if (actionQueryStringIndex < 0) {\n-                url = actionUrl + QUERY_STRING_DELIMITER + queryParameters;\n-            } else {\n-                String actionQueryParameters = actionUrl.substring(actionQueryStringIndex + 1);\n-                if (queryParameters.startsWith(actionQueryParameters)) {\n-                    url = actionUrl.substring(0, actionQueryStringIndex) + QUERY_STRING_DELIMITER + queryParameters;\n-                } else {\n-                    url = actionUrl + PARAMETER_PAIR_DELIMITER + queryParameters;\n-                }\n-            }\n-        }\n-        return this;\n-    }\n-\n-    public String encode() {\n-        return context.getExternalContext().encodeActionURL(url);\n-    }\n-\n-    private boolean isUrlAbsolute() {\n-        return url.startsWith(HTTP_PROTOCOL_URL_PREFIX) || url.startsWith(HTTPS_PROTOCOL_URL_PREFIX);\n-    }\n-}\n"}}, {"oid": "e33f72018de2745a506b6118177fa07193eadf78", "url": "https://github.com/OpenLiberty/open-liberty/commit/e33f72018de2745a506b6118177fa07193eadf78", "message": "Corrections & Updates", "committedDate": "2020-10-06T15:23:59Z", "type": "forcePushed"}, {"oid": "c9916e67868d13dcb3f88907a427eb81c18027f3", "url": "https://github.com/OpenLiberty/open-liberty/commit/c9916e67868d13dcb3f88907a427eb81c18027f3", "message": "Corrections & Updates", "committedDate": "2020-10-15T21:22:52Z", "type": "forcePushed"}, {"oid": "3180182b9987d48c49346b6e368bb666c79593d1", "url": "https://github.com/OpenLiberty/open-liberty/commit/3180182b9987d48c49346b6e368bb666c79593d1", "message": "Corrections & Updates", "committedDate": "2020-10-16T16:19:31Z", "type": "forcePushed"}, {"oid": "e24bdf746b3a29fea62ca0673284e46fe6e932a0", "url": "https://github.com/OpenLiberty/open-liberty/commit/e24bdf746b3a29fea62ca0673284e46fe6e932a0", "message": "Corrections & Updates", "committedDate": "2020-10-16T16:21:56Z", "type": "forcePushed"}, {"oid": "83d97c0112274f577215bc59629e4d79a1c3dd1b", "url": "https://github.com/OpenLiberty/open-liberty/commit/83d97c0112274f577215bc59629e4d79a1c3dd1b", "message": "Corrections & Updates", "committedDate": "2020-10-16T16:22:26Z", "type": "forcePushed"}, {"oid": "f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "url": "https://github.com/OpenLiberty/open-liberty/commit/f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "message": "Corrections & Updates", "committedDate": "2020-10-16T16:29:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzU3Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r506663573", "bodyText": "Correct to classloading30", "author": "volosied", "createdAt": "2020-10-16T18:51:29Z", "path": "dev/io.openliberty.facesContainer.classloading.3.0/src/com/ibm/ws/jsf/container/classloading30/package-info.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+/**\n+ * @version 1.0.0\n+ */\n+@org.osgi.annotation.versioning.Version(\"1.0.0\")\n+package com.ibm.ws.jsf.container.classloading23;", "originalCommit": "f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60556b184b0a15fe556d9f51c79c8f967d6f786c", "chunk": "diff --git a/dev/io.openliberty.facesContainer.classloading.3.0/src/com/ibm/ws/jsf/container/classloading30/package-info.java b/dev/io.openliberty.facesContainer.classloading.3.0/src/com/ibm/ws/jsf/container/classloading30/package-info.java\nindex c06a38035d..3fd0fcbb2d 100644\n--- a/dev/io.openliberty.facesContainer.classloading.3.0/src/com/ibm/ws/jsf/container/classloading30/package-info.java\n+++ b/dev/io.openliberty.facesContainer.classloading.3.0/src/com/ibm/ws/jsf/container/classloading30/package-info.java\n\n@@ -12,4 +12,4 @@\n  * @version 1.0.0\n  */\n @org.osgi.annotation.versioning.Version(\"1.0.0\")\n-package com.ibm.ws.jsf.container.classloading23;\n+package com.ibm.ws.jsf.container.classloading30;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NDg0OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r506664848", "bodyText": "@pnicolucci Are there any issue if I add the jsfContainer features here?  They're needed for proper replacements.", "author": "volosied", "createdAt": "2020-10-16T18:54:13Z", "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java", "diffHunk": "@@ -33,6 +33,7 @@\n                                                  \"jaxrs-2.0\",\n                                                  \"jaxrsClient-2.0\",\n                                                  \"jsf-2.2\",\n+                                                 \"jsfContainer-2.2\",", "originalCommit": "f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NTAxMA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r506665010", "bodyText": "Also, I should add jpaContainer for consistency.", "author": "volosied", "createdAt": "2020-10-16T18:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NDg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwMDgyNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r515200827", "bodyText": "I don't think there is an issue with adding this.", "author": "pnicolucci", "createdAt": "2020-10-30T15:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NDg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "900251c700480596f5cd6357d0385305e41d81ac", "chunk": "diff --git a/dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java b/dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java\nindex 63d5c5ccad..f54caee33d 100644\n--- a/dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java\n+++ b/dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java\n\n@@ -29,6 +29,7 @@ public class EE7FeatureReplacementAction extends FeatureReplacementAction {\n                                                  \"jca-1.7\",\n                                                  \"jcaInboundSecurity-1.0\",\n                                                  \"jpa-2.1\",\n+                                                 \"jpaContainer-2.1\",\n                                                  \"beanValidation-1.1\",\n                                                  \"jaxrs-2.0\",\n                                                  \"jaxrsClient-2.0\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2ODg5Mw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r506668893", "bodyText": "Didn't work when I tested. I'm assuming this is a bug with the RC implementation.\nMaven Repo only has RC3 as the latest, but github says RC5 was released 2 days ago.\n#14533", "author": "volosied", "createdAt": "2020-10-16T19:02:34Z", "path": "dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF22StatelessViewTests.java", "diffHunk": "@@ -291,6 +305,7 @@ public void JSF22StatelessView_TestViewScopeCDIBeanTransient_MyFaces() throws Ex\n      * Since the view here is NOT stateless, the ViewScoped bean should persist through a submit.\n      */\n     @Test\n+    @SkipForRepeat(SkipForRepeat.EE9_FEATURES) //SKIPPING FOR MOJARRA 3.0.0-RC3", "originalCommit": "f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxOTAwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r515219001", "bodyText": "Thanks for opening the issue as a place holder so we make these updates.", "author": "pnicolucci", "createdAt": "2020-10-30T16:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2ODg5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2OTE2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r506669162", "bodyText": "Update Copyright", "author": "volosied", "createdAt": "2020-10-16T19:03:11Z", "path": "dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/FATSuite.java", "diffHunk": "@@ -12,6 +12,8 @@\n \n import java.io.File;", "originalCommit": "f72f53bd6e2c18fd85882aeaf29d8f1c068a0283", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6f369688bef671ce36708a9b58ae770a4e1ab731", "url": "https://github.com/OpenLiberty/open-liberty/commit/6f369688bef671ce36708a9b58ae770a4e1ab731", "message": "Corrections & Updates", "committedDate": "2020-10-21T14:29:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNTMzNw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r509535337", "bodyText": "Might not need the if statement if it's run after each test", "author": "volosied", "createdAt": "2020-10-21T18:07:35Z", "path": "dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/ClassloadingTest.java", "diffHunk": "@@ -68,7 +76,10 @@ public static void setUp() throws Exception {\n \n     @After\n     public void afterEach() throws Exception {\n+      // Stop the server\n+      if (server != null && server.isStarted()) {\n         server.stopServer();\n+      }", "originalCommit": "eae0ebd70ec88adee0687daa39227d440f8fa111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNzM5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r509537395", "bodyText": "Saw these in other tests, so I thought it should be there too?", "author": "volosied", "createdAt": "2020-10-21T18:09:33Z", "path": "dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSFContainerTest.java", "diffHunk": "@@ -52,7 +52,10 @@ public static void setUp() throws Exception {\n \n     @AfterClass\n     public static void tearDown() throws Exception {\n+      // Stop the server\n+      if (server != null && server.isStarted()) {\n         server.stopServer();\n+      }", "originalCommit": "eae0ebd70ec88adee0687daa39227d440f8fa111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQxOTE0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r510419142", "bodyText": "The isStarted() isn't completely necessary since stopServer() checks that, but it doesn't hurt", "author": "wtlucy", "createdAt": "2020-10-22T19:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNzM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODY5Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r513658697", "bodyText": "I'll just keep it for consistency", "author": "volosied", "createdAt": "2020-10-28T18:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNzM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "60556b184b0a15fe556d9f51c79c8f967d6f786c", "url": "https://github.com/OpenLiberty/open-liberty/commit/60556b184b0a15fe556d9f51c79c8f967d6f786c", "message": "Change package name", "committedDate": "2020-10-22T16:33:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzQ1MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r510423450", "bodyText": "I don't think you need to add this - the app that's used for this test - JSFApplication - invokes server.addInstalledAppForValidation(), which should this case a bit more robustly", "author": "wtlucy", "createdAt": "2020-10-22T20:02:46Z", "path": "dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF23CDIGeneralTests.java", "diffHunk": "@@ -107,6 +108,8 @@ public void testPostRenderViewEvent() throws Exception {\n             // Construct the URL for the test\n             URL url = JSFUtils.createHttpUrl(jsf23CDIServer, contextRoot, \"\");\n \n+           jsf23CDIServer.waitForStringInLog(\"CWWKZ0001I: Application \" + contextRoot + \" started\");", "originalCommit": "60556b184b0a15fe556d9f51c79c8f967d6f786c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODU0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r513658544", "bodyText": "i had trouble without that line before, but things seem to work even with it removed removed", "author": "volosied", "createdAt": "2020-10-28T18:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMzQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "900251c700480596f5cd6357d0385305e41d81ac", "chunk": "diff --git a/dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF23CDIGeneralTests.java b/dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF23CDIGeneralTests.java\nindex f872ce5f2f..479cbe4706 100644\n--- a/dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF23CDIGeneralTests.java\n+++ b/dev/com.ibm.ws.jsfContainer_fat_2.3/fat/src/com/ibm/ws/jsf/container/fat/tests/JSF23CDIGeneralTests.java\n\n@@ -108,8 +108,6 @@ public class JSF23CDIGeneralTests extends FATServletClient {\n             // Construct the URL for the test\n             URL url = JSFUtils.createHttpUrl(jsf23CDIServer, contextRoot, \"\");\n \n-           jsf23CDIServer.waitForStringInLog(\"CWWKZ0001I: Application \" + contextRoot + \" started\");\n-\n             HtmlPage page = (HtmlPage) webClient.getPage(url);\n \n             // Log the page for debugging if necessary in the future.\n"}}, {"oid": "aa1d858f6e63e9cfbe538ae92215131dcf059dbe", "url": "https://github.com/OpenLiberty/open-liberty/commit/aa1d858f6e63e9cfbe538ae92215131dcf059dbe", "message": "Change package name", "committedDate": "2020-10-27T16:11:03Z", "type": "forcePushed"}, {"oid": "900251c700480596f5cd6357d0385305e41d81ac", "url": "https://github.com/OpenLiberty/open-liberty/commit/900251c700480596f5cd6357d0385305e41d81ac", "message": "Enable EE9 RepeatTests in jsfContainer 2.3 FAT\nCreate facesContainer-3.0 Feature", "committedDate": "2020-10-27T17:32:40Z", "type": "forcePushed"}, {"oid": "7c97cfc20c60262aaccb165cd403d1184f5cef6f", "url": "https://github.com/OpenLiberty/open-liberty/commit/7c97cfc20c60262aaccb165cd403d1184f5cef6f", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-10-27T17:37:34Z", "type": "forcePushed"}, {"oid": "1b5f35f39767cf28f00a45dbc3678dbc50b47592", "url": "https://github.com/OpenLiberty/open-liberty/commit/1b5f35f39767cf28f00a45dbc3678dbc50b47592", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-10-27T17:46:05Z", "type": "forcePushed"}, {"oid": "6339a8711f9bbf70d0a3e01636d2a999e5c56dad", "url": "https://github.com/OpenLiberty/open-liberty/commit/6339a8711f9bbf70d0a3e01636d2a999e5c56dad", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-10-28T16:27:52Z", "type": "forcePushed"}, {"oid": "edc63270864318b002d9e911eb3237a9257e7927", "url": "https://github.com/OpenLiberty/open-liberty/commit/edc63270864318b002d9e911eb3237a9257e7927", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-10-29T13:37:17Z", "type": "forcePushed"}, {"oid": "f3d03c92ba51e64679d263b2bd431a1429081327", "url": "https://github.com/OpenLiberty/open-liberty/commit/f3d03c92ba51e64679d263b2bd431a1429081327", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-10-30T05:49:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEzNDgzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r515134835", "bodyText": "remove jpa-3.0 as the name has changed", "author": "volosied", "createdAt": "2020-10-30T14:23:47Z", "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java", "diffHunk": "@@ -77,11 +77,14 @@\n                                                  \"mail-2.0\",\n                                                  \"jaxb-3.0\",\n                                                  \"persistence-3.0\",\n+                                                 \"jpa-3.0\",", "originalCommit": "f3d03c92ba51e64679d263b2bd431a1429081327", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e4c6e18c6d29c8f7c95456b8d4eeab0ccd67016", "chunk": "diff --git a/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java b/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java\nindex 525d4775bb..7be67a07c2 100644\n--- a/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java\n+++ b/dev/fattest.simplicity/src/componenttest/rules/repeater/JakartaEE9Action.java\n\n@@ -77,7 +77,6 @@ public class JakartaEE9Action extends FeatureReplacementAction {\n                                                  \"mail-2.0\",\n                                                  \"jaxb-3.0\",\n                                                  \"persistence-3.0\",\n-                                                 \"jpa-3.0\",\n                                                  \"persistenceContainer-3.0\",\n                                                  \"jsonp-2.0\",\n                                                  \"jsonb-2.0\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMzM5NQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r515913395", "bodyText": "I do understand why this class exists here but we should a) compare it to the most recent Weld 4.0 version and b) see if the Weld guys would be willing to make changes if we need them.\nhttps://github.com/weld/core/blob/master/modules/jsf/src/main/java/org/jboss/weld/module/jsf/ConversationAwareViewHandler.java", "author": "tevans78", "createdAt": "2020-11-02T11:36:48Z", "path": "dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/IBMViewHandlerProxy.java", "diffHunk": "@@ -32,35 +32,41 @@\n // except for one line of code.  Instead of duplicating the class, we should pull the CAVH", "originalCommit": "bc80cc4a8370838e557d043ccc86ba7bc6f5a157", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d07b6678629f404e89e9f57b82e80092390fa68", "chunk": "diff --git a/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/IBMViewHandlerProxy.java b/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/IBMViewHandlerProxy.java\ndeleted file mode 100644\nindex 1e55aa035a..0000000000\n--- a/dev/com.ibm.ws.jsfContainer/src/com/ibm/ws/jsf/container/cdi/IBMViewHandlerProxy.java\n+++ /dev/null\n\n@@ -1,155 +0,0 @@\n-/*\n- * JBoss, Home of Professional Open Source\n- * Copyright 2008, Red Hat, Inc., and individual contributors\n- * by the @authors tag. See the copyright.txt in the distribution for a\n- * full listing of individual contributors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.ibm.ws.jsf.container.cdi;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.faces.application.ViewHandler;\n-import javax.faces.application.ViewHandlerWrapper;\n-import javax.faces.context.FacesContext;\n-\n-import org.jboss.weld.Container;\n-import org.jboss.weld.bootstrap.api.helpers.RegistrySingletonProvider;\n-import org.jboss.weld.context.ConversationContext;\n-import org.jboss.weld.context.http.HttpConversationContext;\n-\n-// TODO: This class is mainly a duplicate of the Weld class org.jboss.weld.jsf.ConversationAwareViewHandler\n-// except for one line of code.  Instead of duplicating the class, we should pull the CAVH\n-// class from weld at build-time and copy it here.  Then we can write a class that extends the CAVH.\n-// This will allow us to automatically pick up any changes that are delivered into new versions of weld's CAVH\n-\n-public class IBMViewHandlerProxy extends ViewHandlerWrapper {\n-\n-\n-    private static enum Source {\n-\n-        ACTION,\n-        BOOKMARKABLE,\n-        REDIRECT,\n-        RESOURCE\n-\n-    }\n-\n-    private final ViewHandler delegate;\n-    private volatile ConversationContext conversationContext;\n-    private static final ThreadLocal<Source> source = new ThreadLocal<Source>();\n-    private String contextId;\n-\n-    public IBMViewHandlerProxy(ViewHandler delegate, String contextId ) {\n-        this.delegate = delegate;\n-        this.contextId = contextId;\n-    }\n-\n-    /**\n-     * Get conversation context. May return null if the container is not available.\n-     *\n-     * @return the conversation context or null if the container is not booted\n-     */\n-    private ConversationContext getConversationContext(String id) {\n-        if (conversationContext == null) {\n-            synchronized (this) {\n-                if (conversationContext == null) {\n-                    if (!Container.available(id)) {\n-                        return null;\n-                    }\n-                    Container container = Container.instance(id);\n-                    conversationContext = container.deploymentManager().instance().select(HttpConversationContext.class).get();\n-                }\n-            }\n-        }\n-        return conversationContext;\n-    }\n-\n-    /**\n-     * Allow the delegate to produce the action URL. If the conversation is\n-     * long-running, append the conversation id request parameter to the query\n-     * string part of the URL, but only if the request parameter is not already\n-     * present.\n-     * <p/>\n-     * This covers form actions Ajax calls, and redirect URLs (which we want) and\n-     * link hrefs (which we don't)\n-     *\n-     * @see {@link ViewHandler#getActionURL(FacesContext, String)}\n-     */\n-    @Override\n-    public String getActionURL(FacesContext facesContext, String viewId) {\n-        // This line is the only piece of Liberty-specific code\n-        facesContext.getAttributes().put(Container.CONTEXT_ID_KEY, contextId);\n-        //return super.getActionURL(facesContext, viewId);\n-\n-        if (contextId == null) {\n-            if (facesContext.getAttributes().containsKey(Container.CONTEXT_ID_KEY)) {\n-                contextId = (String) facesContext.getAttributes().get(Container.CONTEXT_ID_KEY);\n-            } else {\n-                contextId = RegistrySingletonProvider.STATIC_INSTANCE;\n-            }\n-        }\n-        String actionUrl = super.getActionURL(facesContext, viewId);\n-        final ConversationContext ctx = getConversationContext(contextId);\n-        if (ctx!= null && ctx.isActive() && !getSource().equals(Source.BOOKMARKABLE) && !ctx.getCurrentConversation().isTransient()) {\n-            return new FacesUrlTransformer(actionUrl, facesContext)\n-                .appendConversationIdIfNecessary(getConversationContext(contextId).getParameterName(), ctx.getCurrentConversation().getId())\n-                .getUrl();\n-        } else {\n-            return actionUrl;\n-        }\n-    }\n-\n-    private Source getSource() {\n-        if (source.get() == null) {\n-            return Source.ACTION;\n-        } else {\n-            return source.get();\n-        }\n-    }\n-\n-    @Override\n-    public String getBookmarkableURL(FacesContext context, String viewId, Map<String, List<String>> parameters, boolean includeViewParams) {\n-        try {\n-            source.set(Source.BOOKMARKABLE);\n-            return super.getBookmarkableURL(context, viewId, parameters, includeViewParams);\n-        } finally {\n-            source.remove();\n-        }\n-    }\n-\n-    @Override\n-    public String getRedirectURL(FacesContext context, String viewId, Map<String, List<String>> parameters, boolean includeViewParams) {\n-        try {\n-            source.set(Source.REDIRECT);\n-            return super.getRedirectURL(context, viewId, parameters, includeViewParams);\n-        } finally {\n-            source.remove();\n-        }\n-    }\n-\n-    @Override\n-    public String getResourceURL(FacesContext context, String path) {\n-        try {\n-            source.set(Source.RESOURCE);\n-            return super.getResourceURL(context, path);\n-        } finally {\n-            source.remove();\n-        }\n-    }\n-\n-    @Override\n-    public ViewHandler getWrapped() {\n-        return delegate;\n-    }\n-}\n"}}, {"oid": "0e4c6e18c6d29c8f7c95456b8d4eeab0ccd67016", "url": "https://github.com/OpenLiberty/open-liberty/commit/0e4c6e18c6d29c8f7c95456b8d4eeab0ccd67016", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-11-02T20:53:37Z", "type": "forcePushed"}, {"oid": "1d07b6678629f404e89e9f57b82e80092390fa68", "url": "https://github.com/OpenLiberty/open-liberty/commit/1d07b6678629f404e89e9f57b82e80092390fa68", "message": "Add org.jboss.weld.module.jsf.* classes automatically to jsf container bundles", "committedDate": "2020-11-05T20:59:27Z", "type": "forcePushed"}, {"oid": "e82235cef610059f190686ad15a43c34ab007311", "url": "https://github.com/OpenLiberty/open-liberty/commit/e82235cef610059f190686ad15a43c34ab007311", "message": "Add org.jboss.weld.module.jsf.* classes automatically to jsf container bundles", "committedDate": "2020-11-05T21:37:10Z", "type": "forcePushed"}, {"oid": "7590b2a6257e01c2e0970330d2e640f915023df2", "url": "https://github.com/OpenLiberty/open-liberty/commit/7590b2a6257e01c2e0970330d2e640f915023df2", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT", "committedDate": "2020-11-06T19:07:56Z", "type": "forcePushed"}, {"oid": "10ef65b599a287b4082eba05eaf41503c1b0051b", "url": "https://github.com/OpenLiberty/open-liberty/commit/10ef65b599a287b4082eba05eaf41503c1b0051b", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT\nCreate checksum tests for org/jboss/weld/module/jsf/* classes in weld bundle", "committedDate": "2020-11-06T19:16:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDUzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r518954535", "bodyText": "forFacesUrlTransformer should be corrected", "author": "volosied", "createdAt": "2020-11-06T19:18:58Z", "path": "dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.weld.jsf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+/**\n+ *  Tests to look fo changes in FacesUrlTransformer & ConversationAwareViewHandler.\n+ *  If the checksum changes, then the latest classes should be ported over to com.ibm.ws.jsfContainer.\n+ *  See issue https://github.com/OpenLiberty/open-liberty/issues/14524\n+ */\n+public class WeldJSFCheckSumTest {\n+\n+    File bundle;\n+\n+    String bundleFileName = \"io.openliberty.org.jboss.weld4.jar\";\n+\n+    String pathToFacesUrlTransformer = \"org/jboss/weld/module/jsf/FacesUrlTransformer.class\";\n+    String pathToConversationAwareViewHandler= \"org/jboss/weld/module/jsf/ConversationAwareViewHandler.class\";\n+\n+    @Test\n+    public void testCheckSumForFacesUrlTransformer() {\n+      long expectedCheckSum  =  1823966370L; // Current as of Nov 6th, 2020\n+      long actualCheckSum = getChecksum(getPathToWeldBundle(), pathToFacesUrlTransformer);\n+      assertEquals(\"The checksum forFacesUrlTransformer has changed! \" +", "originalCommit": "10ef65b599a287b4082eba05eaf41503c1b0051b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ed5b09825ae58c32d9bf676f590cea71c7664f1", "chunk": "diff --git a/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java b/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\nindex 487f2fc2d0..df1565b55a 100644\n--- a/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\n+++ b/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\n\n@@ -21,8 +21,8 @@ import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n \n /**\n- *  Tests to look fo changes in FacesUrlTransformer & ConversationAwareViewHandler.\n- *  If the checksum changes, then the latest classes should be ported over to com.ibm.ws.jsfContainer.\n+ *  These tests look for changes in the FacesUrlTransformer & ConversationAwareViewHandler classes.\n+ *  If the checksum changes, then the latest classes should investigated and ported over to com.ibm.ws.jsfContainer\n  *  See issue https://github.com/OpenLiberty/open-liberty/issues/14524\n  */\n public class WeldJSFCheckSumTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NzEzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r518957134", "bodyText": "Perhaps make this error message a bit more specific like:\n\n\"The checksum for \" + pathToFacesUrlTransformer  + \" has changed! Whatever change was made to this file needs to be investigated and replicated in  and then the checksum for this test method can be updated to \" + actualChecksum", "author": "aguibert", "createdAt": "2020-11-06T19:24:25Z", "path": "dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.weld.jsf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+/**\n+ *  Tests to look fo changes in FacesUrlTransformer & ConversationAwareViewHandler.\n+ *  If the checksum changes, then the latest classes should be ported over to com.ibm.ws.jsfContainer.\n+ *  See issue https://github.com/OpenLiberty/open-liberty/issues/14524\n+ */\n+public class WeldJSFCheckSumTest {\n+\n+    File bundle;\n+\n+    String bundleFileName = \"io.openliberty.org.jboss.weld4.jar\";\n+\n+    String pathToFacesUrlTransformer = \"org/jboss/weld/module/jsf/FacesUrlTransformer.class\";\n+    String pathToConversationAwareViewHandler= \"org/jboss/weld/module/jsf/ConversationAwareViewHandler.class\";\n+\n+    @Test\n+    public void testCheckSumForFacesUrlTransformer() {\n+      long expectedCheckSum  =  1823966370L; // Current as of Nov 6th, 2020\n+      long actualCheckSum = getChecksum(getPathToWeldBundle(), pathToFacesUrlTransformer);\n+      assertEquals(\"The checksum forFacesUrlTransformer has changed! \" +\n+                    \"Please notify owners of com.ibm.ws.jsfContainer!\", expectedCheckSum, actualCheckSum);", "originalCommit": "10ef65b599a287b4082eba05eaf41503c1b0051b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NzU5MQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/14300#discussion_r518957591", "bodyText": "let me update", "author": "volosied", "createdAt": "2020-11-06T19:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NzEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "2ed5b09825ae58c32d9bf676f590cea71c7664f1", "chunk": "diff --git a/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java b/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\nindex 487f2fc2d0..df1565b55a 100644\n--- a/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\n+++ b/dev/io.openliberty.org.jboss.weld4/test/io/openliberty/weld/jsf/WeldJSFCheckSumTest.java\n\n@@ -21,8 +21,8 @@ import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n \n /**\n- *  Tests to look fo changes in FacesUrlTransformer & ConversationAwareViewHandler.\n- *  If the checksum changes, then the latest classes should be ported over to com.ibm.ws.jsfContainer.\n+ *  These tests look for changes in the FacesUrlTransformer & ConversationAwareViewHandler classes.\n+ *  If the checksum changes, then the latest classes should investigated and ported over to com.ibm.ws.jsfContainer\n  *  See issue https://github.com/OpenLiberty/open-liberty/issues/14524\n  */\n public class WeldJSFCheckSumTest {\n"}}, {"oid": "2ed5b09825ae58c32d9bf676f590cea71c7664f1", "url": "https://github.com/OpenLiberty/open-liberty/commit/2ed5b09825ae58c32d9bf676f590cea71c7664f1", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT\nCreate checksum tests for org/jboss/weld/module/jsf/* classes in weld bundle", "committedDate": "2020-11-06T19:47:12Z", "type": "forcePushed"}, {"oid": "2a8235c9c26da2d31a32253cae25f6de10e7e2c7", "url": "https://github.com/OpenLiberty/open-liberty/commit/2a8235c9c26da2d31a32253cae25f6de10e7e2c7", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT\nCreate checksum tests for org/jboss/weld/module/jsf/* classes in weld bundle", "committedDate": "2020-11-06T19:53:25Z", "type": "commit"}, {"oid": "2a8235c9c26da2d31a32253cae25f6de10e7e2c7", "url": "https://github.com/OpenLiberty/open-liberty/commit/2a8235c9c26da2d31a32253cae25f6de10e7e2c7", "message": "Create facesContainer-3.0 Feature\nEnable EE9 RepeatTests in jsfContainer 2.3 FAT\nCreate checksum tests for org/jboss/weld/module/jsf/* classes in weld bundle", "committedDate": "2020-11-06T19:53:25Z", "type": "forcePushed"}]}