{"pr_number": 13914, "pr_title": "Alternate feature names", "pr_createdAt": "2020-09-12T23:59:03Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13914", "timeline": [{"oid": "43bd315da85b13309133e6fc99a093798e06991d", "url": "https://github.com/OpenLiberty/open-liberty/commit/43bd315da85b13309133e6fc99a093798e06991d", "message": "Add tests for alternate feature names support", "committedDate": "2020-09-13T06:40:59Z", "type": "forcePushed"}, {"oid": "82bd986f52ad918f30c4298998844e572528dd3c", "url": "https://github.com/OpenLiberty/open-liberty/commit/82bd986f52ad918f30c4298998844e572528dd3c", "message": "Add tests for alternate feature names support", "committedDate": "2020-09-13T07:23:05Z", "type": "forcePushed"}, {"oid": "70498d694fcec268355aa76a35500a3fea0436d5", "url": "https://github.com/OpenLiberty/open-liberty/commit/70498d694fcec268355aa76a35500a3fea0436d5", "message": "Add tests for alternate feature names support", "committedDate": "2020-09-13T22:19:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzgzNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488063834", "bodyText": "Why is this check only done when not on Open Liberty?\nThe check for !isExtension should be done done regardless if we are on Open Liberty or not.  I suggest the following check be done after this if-then-else block entirely so it applies to both:\nif (altName != null && isRootFeature && !isExtension) {\n    Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n}", "author": "tjwatson", "createdAt": "2020-09-14T16:25:54Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1642,16 +1650,27 @@ boolean reportErrors(Result result, Collection<String> restrictedAccessAttempts,\n         }\n         for (String missing : result.getMissing()) {\n             reportedErrors = true;\n+            boolean isRootFeature = rootFeatures.contains(missing);\n+            boolean isExtension = missing.indexOf(\":\") > -1;\n+            String altName = featureRepository.matchesAlternate(missing);\n             //Check if using Open Liberty before suggesting install util for missing features\n             if (!getProductInfoDisplayName().startsWith(PRODUCT_INFO_STRING_OPEN_LIBERTY)) {\n-                if (rootFeatures.contains(missing) && missing.indexOf(\":\") < 0) {\n+                if (isRootFeature && !isExtension) {", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNjI4OQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488136289", "bodyText": "It's unlikely that an extension feature (ie a feature containing an ':' in the name) will match a key in the atlNames map so the check is redundant for that purpose. The isExtension check in the code was to select between the two flavors of the UPDATE_MISSING_FEATURE_ERROR_<*> message. Open Liberty does not have both error messages.\nI'll restructure to print the ALT_NAME message outside the scope of the is-closed-liberty conditional block:\n            //Check if using Open Liberty before suggesting install util for missing features\n            if (!getProductInfoDisplayName().startsWith(PRODUCT_INFO_STRING_OPEN_LIBERTY)) {\n                if (isRootFeature && !isExtension) {\n                    // Only report this message for core features included as root features in the server.xml\n                    Tr.error(tc, \"UPDATE_MISSING_CORE_FEATURE_ERROR\", missing, locationService.getServerName());\n                } else {\n                    Tr.error(tc, \"UPDATE_MISSING_FEATURE_ERROR\", missing);\n                }\n            } else {\n                // Not on Open Liberty\n                Tr.error(tc, \"UPDATE_MISSING_FEATURE_ERROR\", missing);\n            }\n            if (altName != null && isRootFeature) {\n                Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n            }\n            installStatus.addMissingFeature(missing);", "author": "sebratton", "createdAt": "2020-09-14T18:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java\nindex 26e12926b4..bec2f9061c 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java\n\n@@ -1658,19 +1658,15 @@ public class FeatureManager implements FeatureProvisioner, FrameworkReady, Manag\n                 if (isRootFeature && !isExtension) {\n                     // Only report this message for core features included as root features in the server.xml\n                     Tr.error(tc, \"UPDATE_MISSING_CORE_FEATURE_ERROR\", missing, locationService.getServerName());\n-                    if (altName != null && isRootFeature) {\n-                        Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n-                    }\n                 } else {\n                     Tr.error(tc, \"UPDATE_MISSING_FEATURE_ERROR\", missing);\n                 }\n             } else {\n                 // Not on Open Liberty\n                 Tr.error(tc, \"UPDATE_MISSING_FEATURE_ERROR\", missing);\n-                if (altName != null && isRootFeature) {\n-                    Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n-                }\n-\n+            }\n+            if (altName != null && isRootFeature && !isExtension) {\n+                Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n             }\n             installStatus.addMissingFeature(missing);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2NjA3Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488066072", "bodyText": "I suggest making this a Collection<String> to give more freedom in the implementation.  Likely an ArrayList would be more performant than requiring a heavy object like a Set here.", "author": "tjwatson", "createdAt": "2020-09-14T16:29:32Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java", "diffHunk": "@@ -104,6 +107,7 @@\n         final String featureName;\n         final String symbolicName;\n         final String shortName;\n+        final Set<String> alternateNames;", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNzYzNQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488137635", "bodyText": "done", "author": "sebratton", "createdAt": "2020-09-14T18:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2NjA3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\nindex a1c66c03e1..6ad68cd832 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\n\n@@ -107,7 +105,7 @@ public class FeatureDefinitionUtils {\n         final String featureName;\n         final String symbolicName;\n         final String shortName;\n-        final Set<String> alternateNames;\n+        final Collection<String> alternateNames;\n         final int featureVersion;\n         final Visibility visibility;\n         final AppForceRestart appRestart;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2ODIwMQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488068201", "bodyText": "This could be replaced by this line:\nresult = new ArrayList<String>(data.keySet());\nThat is assuming you change the type to a Collection otherwise it would be:\nresult = new HashSet<String>(data.keySet());", "author": "tjwatson", "createdAt": "2020-09-14T16:33:06Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java", "diffHunk": "@@ -391,6 +399,38 @@ static int getIntegerValue(String value, int defaultValue) {\n             manifest = loadManifest(mfFile, inStream);\n         }\n \n+        /**\n+         * Get alternate names of the feature if any.\n+         *\n+         * @return A (possibly empty) set of alternate names.\n+         */\n+        Set<String> getAltNames() {\n+\n+            if (alternateNames == null) {\n+                Set<String> result;\n+                String ibmAltNames;\n+                try {\n+                    ibmAltNames = getMainAttributeValue(IBM_ALT_NAMES);\n+                } catch (IOException e) {\n+                    return Collections.<String> emptySet();\n+                }\n+\n+                if (ibmAltNames == null) {\n+                    result = Collections.<String> emptySet();\n+                } else {\n+                    Map<String, Map<String, String>> data = ManifestHeaderProcessor.parseImportString(ibmAltNames);\n+\n+                    result = new HashSet<String>();\n+                    for (Map.Entry<String, Map<String, String>> entry : data.entrySet()) {\n+                        //any attributes are not supported and will be ignored.\n+                        result.add(entry.getKey());\n+                    }", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MzM1Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488143357", "bodyText": "suggestion adopted. Thanks", "author": "sebratton", "createdAt": "2020-09-14T18:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2ODIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\nindex a1c66c03e1..6ad68cd832 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java\n\n@@ -404,29 +402,27 @@ public class FeatureDefinitionUtils {\n          *\n          * @return A (possibly empty) set of alternate names.\n          */\n-        Set<String> getAltNames() {\n+        List<String> getAltNames() {\n \n             if (alternateNames == null) {\n-                Set<String> result;\n+                List<String> result;\n                 String ibmAltNames;\n                 try {\n                     ibmAltNames = getMainAttributeValue(IBM_ALT_NAMES);\n                 } catch (IOException e) {\n-                    return Collections.<String> emptySet();\n+                    return Collections.<String> emptyList();\n                 }\n \n                 if (ibmAltNames == null) {\n-                    result = Collections.<String> emptySet();\n+                    result = Collections.<String> emptyList();\n                 } else {\n                     Map<String, Map<String, String>> data = ManifestHeaderProcessor.parseImportString(ibmAltNames);\n-\n-                    result = new HashSet<String>();\n-                    for (Map.Entry<String, Map<String, String>> entry : data.entrySet()) {\n-                        //any attributes are not supported and will be ignored.\n-                        result.add(entry.getKey());\n+                    result = new ArrayList<String>(data.keySet().size());\n+                    for (String name : data.keySet()) {\n+                        result.add(FeatureRepository.lowerFeature(name));\n                     }\n                 }\n-                alternateNames = Collections.<String> unmodifiableSet(result);\n+                alternateNames = Collections.<String> unmodifiableList(result);\n             }\n             return alternateNames;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MDAyOA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488070028", "bodyText": "if you change to writeInt be sure to change this to readInt", "author": "tjwatson", "createdAt": "2020-09-14T16:36:11Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -442,8 +460,14 @@ static ImmutableAttributes loadFeatureAttributes(DataInputStream in) throws IOEx\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        return new ImmutableAttributes(repositoryType, symbolicName, shortName, featureVersion, visibility, appRestart, version, featureFile, lastModified, fileSize, isAutoFeature,\n-                                       hasApiServices, hasApiPackages, hasSpiPackages, isSingleton, processTypes, activationType);\n+        short altNamesCount = in.readShort();", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\nindex 7fc563bb72..bfc36042d4 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n\n@@ -460,8 +460,8 @@ public final class FeatureRepository implements FeatureResolver.Repository {\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        short altNamesCount = in.readShort();\n-        Set<String> altNames = new HashSet<>();\n+        int altNamesCount = in.readInt();\n+        List<String> altNames = new ArrayList<>(altNamesCount);\n         for (int x = 0; x < altNamesCount; x++) {\n             altNames.add(in.readUTF());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTI2Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488071262", "bodyText": "might as well seed the size here for the collection.  If this is an ArrayList that would make it pretty small.  Should consider using Collections.empty for when size == 0", "author": "tjwatson", "createdAt": "2020-09-14T16:38:18Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -442,8 +460,14 @@ static ImmutableAttributes loadFeatureAttributes(DataInputStream in) throws IOEx\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        return new ImmutableAttributes(repositoryType, symbolicName, shortName, featureVersion, visibility, appRestart, version, featureFile, lastModified, fileSize, isAutoFeature,\n-                                       hasApiServices, hasApiPackages, hasSpiPackages, isSingleton, processTypes, activationType);\n+        short altNamesCount = in.readShort();\n+        Set<String> altNames = new HashSet<>();", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\nindex 7fc563bb72..bfc36042d4 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n\n@@ -460,8 +460,8 @@ public final class FeatureRepository implements FeatureResolver.Repository {\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        short altNamesCount = in.readShort();\n-        Set<String> altNames = new HashSet<>();\n+        int altNamesCount = in.readInt();\n+        List<String> altNames = new ArrayList<>(altNamesCount);\n         for (int x = 0; x < altNamesCount; x++) {\n             altNames.add(in.readUTF());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjkzMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488076933", "bodyText": "If we do ignore case here then we need to do the following to populate:\nalternateFeatureNameToPublicName.put(lowerFeature(s), cachedAttr.featureName);", "author": "tjwatson", "createdAt": "2020-09-14T16:45:40Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -621,6 +645,12 @@ private void updateMaps(SubsystemFeatureDefinitionImpl def) {\n             if (def.getVisibility() == Visibility.PUBLIC)\n                 publicFeatureNameToSymbolicName.put(lowerFeature(cachedAttr.symbolicName), cachedAttr.symbolicName);\n \n+            // populate mapping from known, commonly used alternative names to allow hints when the wrong feature\n+            // name is specified in a server config.\n+            for (String s : cachedAttr.alternateNames) {\n+                alternateFeatureNameToPublicName.put(s, cachedAttr.featureName);", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3NTUwMg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488675502", "bodyText": "I am surprised the FATs pass without making the change to lower case the key here.", "author": "tjwatson", "createdAt": "2020-09-15T13:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4Mjk4MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488782980", "bodyText": "Will do the lowerFeature call in FeatureDefinitionUtils.getAltNames() instead.", "author": "sebratton", "createdAt": "2020-09-15T16:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjkzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NzE0Mg==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488077142", "bodyText": "Other places that write a collection use writeInt for the size.  I agree that it is far fetched to ever need that big of a size for alternate names, but I'd error on the side of consistency here.", "author": "tjwatson", "createdAt": "2020-09-14T16:45:53Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -371,6 +384,11 @@ static void writeFeatureAttributes(ImmutableAttributes iAttr, ProvisioningDetail\n \n         out.writeUTF(iAttr.activationType.toString());\n \n+        out.writeShort(iAttr.alternateNames.size());", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\nindex 7fc563bb72..bfc36042d4 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n\n@@ -384,7 +384,7 @@ public final class FeatureRepository implements FeatureResolver.Repository {\n \n         out.writeUTF(iAttr.activationType.toString());\n \n-        out.writeShort(iAttr.alternateNames.size());\n+        out.writeInt(iAttr.alternateNames.size());\n         for (String s : iAttr.alternateNames) {\n             out.writeUTF(s);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NzIwMw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488077203", "bodyText": "We likely need to ignore case here like we do for short names:\nreturn alternateFeatureNameToPublicName.get(lowerFeature(featureName));", "author": "tjwatson", "createdAt": "2020-09-14T16:45:59Z", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -118,6 +121,16 @@ public FeatureRepository(WsResource res, BundleContext bundleContext) {\n         this.bundleContext = bundleContext;\n     }\n \n+    /**\n+     * Use to check if a feature name is a commonly used alternate to an existing feature name\n+     *\n+     * @param featureName\n+     * @return The existing feature name or null if no match\n+     */\n+    public String matchesAlternate(String featureName) {\n+        return alternateFeatureNameToPublicName.get(featureName);", "originalCommit": "70498d694fcec268355aa76a35500a3fea0436d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0324ed5256242e0f992a11cb840f8019499589fa", "chunk": "diff --git a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\nindex 7fc563bb72..bfc36042d4 100644\n--- a/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n+++ b/dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java\n\n@@ -128,7 +128,7 @@ public final class FeatureRepository implements FeatureResolver.Repository {\n      * @return The existing feature name or null if no match\n      */\n     public String matchesAlternate(String featureName) {\n-        return alternateFeatureNameToPublicName.get(featureName);\n+        return alternateFeatureNameToPublicName.get(lowerFeature(featureName));\n     }\n \n     /**\n"}}, {"oid": "0324ed5256242e0f992a11cb840f8019499589fa", "url": "https://github.com/OpenLiberty/open-liberty/commit/0324ed5256242e0f992a11cb840f8019499589fa", "message": "Address the latest message review comment", "committedDate": "2020-09-15T17:04:53Z", "type": "forcePushed"}, {"oid": "575c4b79f677f22eb9531a378d2a2b2b8f9347c8", "url": "https://github.com/OpenLiberty/open-liberty/commit/575c4b79f677f22eb9531a378d2a2b2b8f9347c8", "message": "Check for alternate feature names and log new related error message.\n\nAdditional meta-data can be added to a feature definition for commonly known\nalternate names. If a configured feature is not found during a feature\nconfiguration update and it matches a known alternate name, then an error\nmessage will be issued with the real name of the feature as a hint.\n\ncloses https://github.com/OpenLiberty/open-liberty/issues/13393", "committedDate": "2020-09-15T19:58:17Z", "type": "commit"}, {"oid": "59e43e3ccdef54783e822b88c2634bf23f04b472", "url": "https://github.com/OpenLiberty/open-liberty/commit/59e43e3ccdef54783e822b88c2634bf23f04b472", "message": "Update feature definitions with alternate name metadata\n\nUpdated feature existing at time of commit.", "committedDate": "2020-09-15T19:58:17Z", "type": "commit"}, {"oid": "c855e594df51789ec18920e336aa9d20a0fa3774", "url": "https://github.com/OpenLiberty/open-liberty/commit/c855e594df51789ec18920e336aa9d20a0fa3774", "message": "Add tests for alternate feature names support", "committedDate": "2020-09-15T19:58:17Z", "type": "commit"}, {"oid": "eea832e62dcf4b83f6fb0fd3f7f1da7fc01c8887", "url": "https://github.com/OpenLiberty/open-liberty/commit/eea832e62dcf4b83f6fb0fd3f7f1da7fc01c8887", "message": "Addresses code and message review comments", "committedDate": "2020-09-15T19:58:18Z", "type": "commit"}, {"oid": "5e68aaaa5de5e34ee9c1b3bce150351d0b4a0114", "url": "https://github.com/OpenLiberty/open-liberty/commit/5e68aaaa5de5e34ee9c1b3bce150351d0b4a0114", "message": "Address the latest message review comment", "committedDate": "2020-09-15T19:58:18Z", "type": "commit"}, {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "url": "https://github.com/OpenLiberty/open-liberty/commit/fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "message": "Update additional feature manifests with new header", "committedDate": "2020-09-15T19:58:19Z", "type": "commit"}, {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "url": "https://github.com/OpenLiberty/open-liberty/commit/fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "message": "Update additional feature manifests with new header", "committedDate": "2020-09-15T19:58:19Z", "type": "forcePushed"}]}