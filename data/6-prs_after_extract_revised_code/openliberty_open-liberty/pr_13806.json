{"pr_number": 13806, "pr_title": "Issue 13776: Beta-guard MP JWT 1.2 function and beta the feature", "pr_createdAt": "2020-09-04T15:30:52Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/13806", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY5ODg4Nw==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r483698887", "bodyText": "Will this function work by default in the beta or will you have to set the config property even in the beta?", "author": "tevans78", "createdAt": "2020-09-04T15:38:07Z", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "diffHunk": "@@ -53,4 +58,27 @@ public static String processProtectedString(Map<String, Object> props, String cf\n         return secret;\n     }\n \n+    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName, String enableBetaAttrName) {\n+        String defaultSignatureAlgorithm = \"RS256\";\n+        String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n+        boolean isBetaEnabled = (Boolean) props.get(enableBetaAttrName);", "originalCommit": "7418a0ef0434c75b2a2858031ca3b69cd4676609", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84199af4569b57052db34ff6834296793373f84b", "chunk": "diff --git a/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java b/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\nindex eb612da014..cd92593e74 100644\n--- a/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\n+++ b/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\n\n@@ -58,13 +59,13 @@ public class JwtConfigUtil {\n         return secret;\n     }\n \n-    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName, String enableBetaAttrName) {\n+    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName) {\n         String defaultSignatureAlgorithm = \"RS256\";\n         String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n-        boolean isBetaEnabled = (Boolean) props.get(enableBetaAttrName);\n+        boolean isBetaEnabled = ProductInfo.getBetaEdition();\n         if (!isBetaEnabled && isBetaAlgorithm(signatureAlgorithm)) {\n             if (tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"A signature algorithm (\" + signatureAlgorithm + \") is specified that's only available in beta mode. Defaulting to \" + defaultSignatureAlgorithm);\n+                Tr.debug(tc, \"A signature algorithm (\" + signatureAlgorithm + \") is specified that's only available in the beta edition. Defaulting to \" + defaultSignatureAlgorithm);\n             }\n             signatureAlgorithm = defaultSignatureAlgorithm;\n         }\n"}}, {"oid": "84199af4569b57052db34ff6834296793373f84b", "url": "https://github.com/OpenLiberty/open-liberty/commit/84199af4569b57052db34ff6834296793373f84b", "message": "Issue 13776: Beta-guard MP JWT 1.2 function and beta the feature", "committedDate": "2020-09-04T18:44:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjkxNA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r484312914", "bodyText": "If you do specify a beta Algorithm when not running a beta runtime, is it correct that this just defaults back without warning? You won't see any message unless debug trace is enabled. When not running in a beta, I think this should behave the same as if a completely unknown/invalid algorithm was specified ... in such a case, would there be an exception? An error or warning message? I don't think debug trace is enough.", "author": "tevans78", "createdAt": "2020-09-07T09:33:39Z", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "diffHunk": "@@ -53,4 +59,27 @@ public static String processProtectedString(Map<String, Object> props, String cf\n         return secret;\n     }\n \n+    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName) {\n+        String defaultSignatureAlgorithm = \"RS256\";\n+        String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n+        boolean isBetaEnabled = ProductInfo.getBetaEdition();\n+        if (!isBetaEnabled && isBetaAlgorithm(signatureAlgorithm)) {\n+            if (tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"A signature algorithm (\" + signatureAlgorithm + \") is specified that's only available in the beta edition. Defaulting to \" + defaultSignatureAlgorithm);", "originalCommit": "84199af4569b57052db34ff6834296793373f84b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac", "chunk": "diff --git a/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java b/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\nindex cd92593e74..a9ee3fc441 100644\n--- a/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\n+++ b/dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java\n\n@@ -59,13 +64,14 @@ public class JwtConfigUtil {\n         return secret;\n     }\n \n-    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName) {\n+    public static String getSignatureAlgorithm(String configId, Map<String, Object> props, String sigAlgAttrName) {\n         String defaultSignatureAlgorithm = \"RS256\";\n         String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n         boolean isBetaEnabled = ProductInfo.getBetaEdition();\n         if (!isBetaEnabled && isBetaAlgorithm(signatureAlgorithm)) {\n-            if (tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"A signature algorithm (\" + signatureAlgorithm + \") is specified that's only available in the beta edition. Defaulting to \" + defaultSignatureAlgorithm);\n+            if (!isBetaMessageIssuedForConfig(configId)) {\n+                Tr.warning(tc, \"BETA_SIGNATURE_ALGORITHM_USED\", new Object[] { configId, signatureAlgorithm, defaultSignatureAlgorithm });\n+                issuedBetaMessageForConfigs.add(configId);\n             }\n             signatureAlgorithm = defaultSignatureAlgorithm;\n         }\n"}}, {"oid": "2940eed0d4f0e3532ecc531abd81b73cc265951c", "url": "https://github.com/OpenLiberty/open-liberty/commit/2940eed0d4f0e3532ecc531abd81b73cc265951c", "message": "Issue 13776: Beta-guard MP JWT 1.2 function and beta the feature", "committedDate": "2020-09-08T17:24:46Z", "type": "commit"}, {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac", "url": "https://github.com/OpenLiberty/open-liberty/commit/3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac", "message": "Issue 13776: Updates after review", "committedDate": "2020-09-08T20:42:15Z", "type": "commit"}, {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac", "url": "https://github.com/OpenLiberty/open-liberty/commit/3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac", "message": "Issue 13776: Updates after review", "committedDate": "2020-09-08T20:42:15Z", "type": "forcePushed"}, {"oid": "1dd999982a119362b66344d25ae48ca9afe60b70", "url": "https://github.com/OpenLiberty/open-liberty/commit/1dd999982a119362b66344d25ae48ca9afe60b70", "message": "Issue 13776: Fix class resolution problems and feature versions being loaded", "committedDate": "2020-09-11T20:44:33Z", "type": "commit"}, {"oid": "1dd999982a119362b66344d25ae48ca9afe60b70", "url": "https://github.com/OpenLiberty/open-liberty/commit/1dd999982a119362b66344d25ae48ca9afe60b70", "message": "Issue 13776: Fix class resolution problems and feature versions being loaded", "committedDate": "2020-09-11T20:44:33Z", "type": "forcePushed"}, {"oid": "dfa24ec63363d5e7831877a0e81f8384598053bf", "url": "https://github.com/OpenLiberty/open-liberty/commit/dfa24ec63363d5e7831877a0e81f8384598053bf", "message": "Issue 13776: FAT updates to run with beta content", "committedDate": "2020-09-14T15:35:31Z", "type": "commit"}]}