{"pr_number": 10344, "pr_title": "10321 jax-rs cdi managedobject 2", "pr_createdAt": "2020-01-09T14:25:29Z", "pr_url": "https://github.com/OpenLiberty/open-liberty/pull/10344", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2Njc0MA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10344#discussion_r364766740", "bodyText": "its 2020 now!", "author": "tevans78", "createdAt": "2020-01-09T14:27:58Z", "path": "dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2015, 2016 IBM Corporation and others.\n+ * Copyright (c) 2015, 2019 IBM Corporation and others.", "originalCommit": "c77ba1d55a2e0fb29ed401803a69b61b98635cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60659879da6b93ccfc5da37692a78e758434a318", "chunk": "diff --git a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\nindex 47a0edf062..103bf1c23c 100644\n--- a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n+++ b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n\n@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2015, 2019 IBM Corporation and others.\n+ * Copyright (c) 2015, 2020 IBM Corporation and others.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2OTE5OA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10344#discussion_r364769198", "bodyText": "This should just be return ProxyObject.class.isAssignableFrom(clazz); I think?", "author": "Azquelt", "createdAt": "2020-01-09T14:32:20Z", "path": "dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java", "diffHunk": "@@ -398,8 +402,12 @@ public static ClassLoader getAndSetLoader(ClassLoader newCL) {\n      * @return true if it is a proxy\n      */\n     public static boolean isWeldProxy(Class<?> clazz) {\n-        boolean result = clazz.getSimpleName().contains(PROXY_CLASS_SIGNATURE);\n-        return result;\n+        for ( Class implementedInterface : clazz.getInterfaces() ) {\n+            if ( implementedInterface.getName().equals( WELD_PROXY_INTERFACE_NAME ) ) {\n+                return true;\n+            }\n+        }\n+        return false;", "originalCommit": "c77ba1d55a2e0fb29ed401803a69b61b98635cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8daa6212a0cd8a43345a55883c25dbbf380e2a5", "chunk": "diff --git a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\nindex 47a0edf062..1e55565cb0 100644\n--- a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n+++ b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n\n@@ -402,12 +402,7 @@ public class CDIUtils {\n      * @return true if it is a proxy\n      */\n     public static boolean isWeldProxy(Class<?> clazz) {\n-        for ( Class implementedInterface : clazz.getInterfaces() ) {\n-            if ( implementedInterface.getName().equals( WELD_PROXY_INTERFACE_NAME ) ) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return ProxyObject.class.isAssignableFrom(clazz);\n     }\n \n     /**\n"}}, {"oid": "e8daa6212a0cd8a43345a55883c25dbbf380e2a5", "url": "https://github.com/OpenLiberty/open-liberty/commit/e8daa6212a0cd8a43345a55883c25dbbf380e2a5", "message": "Provide an instance when calling CDI", "committedDate": "2020-01-09T14:43:45Z", "type": "forcePushed"}, {"oid": "60659879da6b93ccfc5da37692a78e758434a318", "url": "https://github.com/OpenLiberty/open-liberty/commit/60659879da6b93ccfc5da37692a78e758434a318", "message": "Provide an instance when calling CDI", "committedDate": "2020-01-09T16:06:03Z", "type": "forcePushed"}, {"oid": "90eb2a9db2d5a7099853335263736da32ed0fe76", "url": "https://github.com/OpenLiberty/open-liberty/commit/90eb2a9db2d5a7099853335263736da32ed0fe76", "message": "Provide an instance when calling CDI", "committedDate": "2020-01-09T17:06:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2MTQwOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10344#discussion_r364861409", "bodyText": "What is this constant for?", "author": "tevans78", "createdAt": "2020-01-09T17:13:41Z", "path": "dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java", "diffHunk": "@@ -52,13 +52,17 @@\n import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n import com.ibm.ws.util.ThreadContextAccessor;\n \n+import org.jboss.weld.bean.proxy.ProxyObject;\n+\n /**\n  * Common constants and utility methods\n  */\n public class CDIUtils {\n \n     private static final TraceComponent tc = Tr.register(CDIUtils.class);\n \n+    private static final String WELD_PROXY_INTERFACE_NAME = ProxyObject.class.getName();", "originalCommit": "90eb2a9db2d5a7099853335263736da32ed0fe76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8203a6f391a192ed732988bb3b68872c2b6603c2", "chunk": "diff --git a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\nindex 103bf1c23c..873cb82b69 100644\n--- a/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n+++ b/dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIUtils.java\n\n@@ -52,8 +52,6 @@ import com.ibm.ws.cdi.CDIRuntimeException;\n import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n import com.ibm.ws.util.ThreadContextAccessor;\n \n-import org.jboss.weld.bean.proxy.ProxyObject;\n-\n /**\n  * Common constants and utility methods\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2MzIxOQ==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10344#discussion_r364863219", "bodyText": "How about createManagedObjectForServiceObject or just createManagedObject?", "author": "tevans78", "createdAt": "2020-01-09T17:17:42Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "diffHunk": "@@ -273,6 +271,34 @@ private Object getClassFromCDI(Class<?> clazz) {\n         return serviceObject;\n     }\n \n+    /**\n+     * @param clazz\n+     * @return\n+     */\n+    @FFDCIgnore(value = { Exception.class })\n+    private <T> ManagedObject<T> getClassFromServiceObject(Class<T> clazz, Object serviceObject) {", "originalCommit": "90eb2a9db2d5a7099853335263736da32ed0fe76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8203a6f391a192ed732988bb3b68872c2b6603c2", "chunk": "diff --git a/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java b/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\nindex 6136f46022..74a01c1173 100644\n--- a/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\n+++ b/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\n\n@@ -271,34 +273,6 @@ public class JaxRsFactoryImplicitBeanCDICustomizer implements JaxRsFactoryBeanCu\n         return serviceObject;\n     }\n \n-    /**\n-     * @param clazz\n-     * @return\n-     */\n-    @FFDCIgnore(value = { Exception.class })\n-    private <T> ManagedObject<T> getClassFromServiceObject(Class<T> clazz, Object serviceObject) {\n-\n-        if (! clazz.equals(serviceObject.getClass())) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"Couldn't create object instance from ManagedObjectFactory for : \" + clazz.getName() + \"because the serviceObject and class had different types\");\n-            }\n-            return null;\n-        }\n-\n-        ManagedObjectFactory<T> managedObjectFactory = (ManagedObjectFactory<T>) getManagedObjectFactory(clazz);\n-\n-        ManagedObject<T> bean = null;\n-        try {\n-            bean = managedObjectFactory.createManagedObject((T) serviceObject, null);\n-        } catch (Exception e) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"Couldn't create object instance from ManagedObjectFactory for : \" + clazz.getName() + \", but ignore the FFDC: \", e);\n-            }\n-        }\n-\n-        return bean;\n-    }\n-\n     /**\n      * @param clazz\n      * @return\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2MzU0NA==", "url": "https://github.com/OpenLiberty/open-liberty/pull/10344#discussion_r364863544", "bodyText": "Are you sure that is a safe check?", "author": "tevans78", "createdAt": "2020-01-09T17:18:26Z", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "diffHunk": "@@ -273,6 +271,34 @@ private Object getClassFromCDI(Class<?> clazz) {\n         return serviceObject;\n     }\n \n+    /**\n+     * @param clazz\n+     * @return\n+     */\n+    @FFDCIgnore(value = { Exception.class })\n+    private <T> ManagedObject<T> getClassFromServiceObject(Class<T> clazz, Object serviceObject) {\n+\n+        if (! clazz.equals(serviceObject.getClass())) {", "originalCommit": "90eb2a9db2d5a7099853335263736da32ed0fe76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8203a6f391a192ed732988bb3b68872c2b6603c2", "chunk": "diff --git a/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java b/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\nindex 6136f46022..74a01c1173 100644\n--- a/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\n+++ b/dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java\n\n@@ -271,34 +273,6 @@ public class JaxRsFactoryImplicitBeanCDICustomizer implements JaxRsFactoryBeanCu\n         return serviceObject;\n     }\n \n-    /**\n-     * @param clazz\n-     * @return\n-     */\n-    @FFDCIgnore(value = { Exception.class })\n-    private <T> ManagedObject<T> getClassFromServiceObject(Class<T> clazz, Object serviceObject) {\n-\n-        if (! clazz.equals(serviceObject.getClass())) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"Couldn't create object instance from ManagedObjectFactory for : \" + clazz.getName() + \"because the serviceObject and class had different types\");\n-            }\n-            return null;\n-        }\n-\n-        ManagedObjectFactory<T> managedObjectFactory = (ManagedObjectFactory<T>) getManagedObjectFactory(clazz);\n-\n-        ManagedObject<T> bean = null;\n-        try {\n-            bean = managedObjectFactory.createManagedObject((T) serviceObject, null);\n-        } catch (Exception e) {\n-            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n-                Tr.debug(tc, \"Couldn't create object instance from ManagedObjectFactory for : \" + clazz.getName() + \", but ignore the FFDC: \", e);\n-            }\n-        }\n-\n-        return bean;\n-    }\n-\n     /**\n      * @param clazz\n      * @return\n"}}, {"oid": "5ffbb69eb6b5d7f87411f2a78f7310d0efb03be0", "url": "https://github.com/OpenLiberty/open-liberty/commit/5ffbb69eb6b5d7f87411f2a78f7310d0efb03be0", "message": "Provide an instance when calling CDI", "committedDate": "2020-01-13T11:06:41Z", "type": "forcePushed"}, {"oid": "8203a6f391a192ed732988bb3b68872c2b6603c2", "url": "https://github.com/OpenLiberty/open-liberty/commit/8203a6f391a192ed732988bb3b68872c2b6603c2", "message": "return a dummy managed object for weld proxies", "committedDate": "2020-01-13T11:14:38Z", "type": "commit"}, {"oid": "036337f62ea443fe4d4428e12b3838f5397f2abc", "url": "https://github.com/OpenLiberty/open-liberty/commit/036337f62ea443fe4d4428e12b3838f5397f2abc", "message": "Provide an instance when calling CDI", "committedDate": "2020-01-13T11:14:40Z", "type": "commit"}, {"oid": "29065b544bb1e4d8b8085e18bf405bd89060aaf8", "url": "https://github.com/OpenLiberty/open-liberty/commit/29065b544bb1e4d8b8085e18bf405bd89060aaf8", "message": "use ProxyObject to determine if a class is a weld proxy", "committedDate": "2020-01-13T11:16:04Z", "type": "forcePushed"}, {"oid": "60fe24266821f3c7acf5c4aeea45c43570b7813c", "url": "https://github.com/OpenLiberty/open-liberty/commit/60fe24266821f3c7acf5c4aeea45c43570b7813c", "message": "use ProxyObject to determine if a class is a weld proxy", "committedDate": "2020-01-13T11:17:47Z", "type": "commit"}, {"oid": "60fe24266821f3c7acf5c4aeea45c43570b7813c", "url": "https://github.com/OpenLiberty/open-liberty/commit/60fe24266821f3c7acf5c4aeea45c43570b7813c", "message": "use ProxyObject to determine if a class is a weld proxy", "committedDate": "2020-01-13T11:17:47Z", "type": "forcePushed"}]}