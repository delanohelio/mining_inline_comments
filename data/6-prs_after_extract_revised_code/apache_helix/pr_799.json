{"pr_number": 799, "pr_title": "[helix-rest] Add endpoint to get namespace routing data", "pr_createdAt": "2020-02-23T04:30:42Z", "pr_url": "https://github.com/apache/helix/pull/799", "timeline": [{"oid": "68b7f76bba8800d3620834ff77eb7b4764b95734", "url": "https://github.com/apache/helix/commit/68b7f76bba8800d3620834ff77eb7b4764b95734", "message": "Add REST endpoint to get sharding keys by realm", "committedDate": "2020-02-23T04:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2Mzc3Ng==", "url": "https://github.com/apache/helix/pull/799#discussion_r382963776", "bodyText": "Consider making List to Collection for consistency with other APIs?", "author": "narendly", "createdAt": "2020-02-23T04:45:51Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java", "diffHunk": "@@ -51,6 +52,14 @@\n    */\n   Collection<String> getAllShardingKeys(String namespace);\n \n+  /**\n+   * Returns all path-based sharding keys by realm in the given namespace.\n+   *\n+   * @param namespace namespace in metadata store directory.\n+   * @return Map: realm -> List of sharding keys\n+   */\n+  Map<String, List<String>> getShardingKeysByRealm(String namespace);", "originalCommit": "68b7f76bba8800d3620834ff77eb7b4764b95734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2ODE5NQ==", "url": "https://github.com/apache/helix/pull/799#discussion_r382968195", "bodyText": "I initially did considered it but when implementing the method, I found the _realmToShardingKeysMap returns a Map<String, List<String>>. If I make it List to Collection, we have to do extra work to iterate the map, create a new map and convert List to Collection. I just don't want to do this for performance consideration. I always try to make Rest API respond as fast as possible. As in this case, List is still fine over a Collection in the map. This is my thought.\nWell, if you think this kind of consistency is more important and preferred over the performance, I am OK.", "author": "huizhilu", "createdAt": "2020-02-23T06:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2Mzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2OTQxNw==", "url": "https://github.com/apache/helix/pull/799#discussion_r382969417", "bodyText": "Great - thanks for providing your reasoning. I think this is minor, so if you feel that making it a List will simplify things, we could leave it as is.", "author": "narendly", "createdAt": "2020-02-23T06:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2Mzc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "aeb5966ad0222bc9f44edf3243f5b2221a73ef29", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\nindex 716ef25e9..3c110f688 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\n\n@@ -53,12 +53,12 @@ public interface MetadataStoreDirectory extends AutoCloseable {\n   Collection<String> getAllShardingKeys(String namespace);\n \n   /**\n-   * Returns all path-based sharding keys by realm in the given namespace.\n+   * Returns routing data in the given namespace.\n    *\n    * @param namespace namespace in metadata store directory.\n-   * @return Map: realm -> List of sharding keys\n+   * @return Routing data map: realm -> List of sharding keys\n    */\n-  Map<String, List<String>> getShardingKeysByRealm(String namespace);\n+  Map<String, List<String>> getRoutingData(String namespace);\n \n   /**\n    * Returns all path-based sharding keys in the given namespace and the realm.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY4NQ==", "url": "https://github.com/apache/helix/pull/799#discussion_r382965685", "bodyText": "if (!_realmToShardingKeysMap.contains(namespace)) {\n  throw Exception(~~~);\n}\nreturn  _realmToShardingKeys.get(namespace);\n\nseems like a more concise way of expressing this.", "author": "narendly", "createdAt": "2020-02-23T05:27:20Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java", "diffHunk": "@@ -111,6 +111,16 @@ public ZkMetadataStoreDirectory(Map<String, String> routingZkAddressMap)\n     return allShardingKeys;\n   }\n \n+  @Override\n+  public Map<String, List<String>> getShardingKeysByRealm(String namespace) {\n+    Map<String, List<String>> shardingKeysByRealmMap = _realmToShardingKeysMap.get(namespace);\n+    if (shardingKeysByRealmMap == null) {\n+      throw new NoSuchElementException(\"Namespace \" + namespace + \" does not exist!\");\n+    }\n+\n+    return shardingKeysByRealmMap;", "originalCommit": "68b7f76bba8800d3620834ff77eb7b4764b95734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2ODM5NQ==", "url": "https://github.com/apache/helix/pull/799#discussion_r382968395", "bodyText": "I realized that we already consider multi-thread issue (reading and refreshing) for this map because it is a concurrent map. Your style contains() and get() would potentially have race condition. So only one get() makes advantage of a concurrent map to avoid race condition.", "author": "huizhilu", "createdAt": "2020-02-23T06:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MDE4Nw==", "url": "https://github.com/apache/helix/pull/799#discussion_r382970187", "bodyText": "That's a very good point and I am glad that you've considered potential cases like the one you described in your comments.\nThe potential race condition you raised would be valid if we allowed namespaces to be removed, but thanks to the way we define namespaces, they are never removed (only updated). So I don't think we need to be worried about that particular race condition here - do you agree? If so, we could simplify the code as originally suggested.", "author": "narendly", "createdAt": "2020-02-23T06:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MjUyMQ==", "url": "https://github.com/apache/helix/pull/799#discussion_r382972521", "bodyText": "I actually don\u2019t see your suggested version is simpler: the key is hashed two times (maybe JVM could cache hashcode) which causes more cpu time. It is more natural to just compute one time of key hash. Right, in our case here namespace could not change, but it is just a special case here. What if namespace change could be supported in the future? I would prefer to do it in a general way: one time hash and cache the result and generally avoid race condition. So decouple it from namespace change.", "author": "huizhilu", "createdAt": "2020-02-23T07:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMzA2OA==", "url": "https://github.com/apache/helix/pull/799#discussion_r383023068", "bodyText": "Sure - in this case either way works. Marking it as resolved \ud83d\udc4d", "author": "narendly", "createdAt": "2020-02-23T17:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "aeb5966ad0222bc9f44edf3243f5b2221a73ef29", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java\nindex ec38c1836..35b31cd0c 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/ZkMetadataStoreDirectory.java\n\n@@ -112,13 +112,13 @@ public class ZkMetadataStoreDirectory implements MetadataStoreDirectory, Routing\n   }\n \n   @Override\n-  public Map<String, List<String>> getShardingKeysByRealm(String namespace) {\n-    Map<String, List<String>> shardingKeysByRealmMap = _realmToShardingKeysMap.get(namespace);\n-    if (shardingKeysByRealmMap == null) {\n+  public Map<String, List<String>> getRoutingData(String namespace) {\n+    Map<String, List<String>> routingData = _realmToShardingKeysMap.get(namespace);\n+    if (routingData == null) {\n       throw new NoSuchElementException(\"Namespace \" + namespace + \" does not exist!\");\n     }\n \n-    return shardingKeysByRealmMap;\n+    return routingData;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTg5OA==", "url": "https://github.com/apache/helix/pull/799#discussion_r382965898", "bodyText": "if (prefix == null) {\n  if (groupByRealm) {\n    return getAllShardingKeysByRealm();\n  }\n  return getAllShardingKeys();\n}\n\nwould be a more concise and readable way of expressing this logic. what do you think?", "author": "narendly", "createdAt": "2020-02-23T05:31:45Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,11 +169,15 @@ public Response deleteMetadataStoreRealm(@PathParam(\"realm\") String realm) {\n    */\n   @GET\n   @Path(\"/sharding-keys\")\n-  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix) {\n+  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix,\n+      @DefaultValue(\"false\") @QueryParam(\"groupByRealm\") boolean groupByRealm) {\n     try {\n-      if (prefix == null) {\n+      if (prefix == null && !groupByRealm) {\n         // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n         return getAllShardingKeys();\n+      } else if (prefix == null) {\n+        // For request: \"/sharding-keys?groupByRealm=true\" to get sharding keys by realm.\n+        return getAllShardingKeysByRealm();", "originalCommit": "68b7f76bba8800d3620834ff77eb7b4764b95734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2ODg4Mg==", "url": "https://github.com/apache/helix/pull/799#discussion_r382968882", "bodyText": "Maybe the ways we think of if-else condition branch are different. I've changed it to another way which may look easier to understand.", "author": "huizhilu", "createdAt": "2020-02-23T06:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NTg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8dc2d06039620b0927c7d68ff92c0143f7d4701a", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\nindex 4f1e1a804..85d1bec3d 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\n\n@@ -172,15 +186,19 @@ public class MetadataStoreDirectoryAccessor extends AbstractResource {\n   public Response getShardingKeys(@QueryParam(\"prefix\") String prefix,\n       @DefaultValue(\"false\") @QueryParam(\"groupByRealm\") boolean groupByRealm) {\n     try {\n-      if (prefix == null && !groupByRealm) {\n-        // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n-        return getAllShardingKeys();\n-      } else if (prefix == null) {\n+      if (prefix != null) {\n+        // For endpoint: \"/sharding-keys?prefix={prefix}\"\n+        // Ignore groupByRealm because response already has realm info for each sharding key.\n+        return getAllShardingKeysUnderPath(prefix);\n+      }\n+\n+      if (groupByRealm) {\n         // For request: \"/sharding-keys?groupByRealm=true\" to get sharding keys by realm.\n         return getAllShardingKeysByRealm();\n       }\n-      // For endpoint: \"/sharding-keys?prefix={prefix}\"\n-      return getAllShardingKeysUnderPath(prefix);\n+\n+      // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n+      return getAllShardingKeys();\n     } catch (NoSuchElementException ex) {\n       return notFound(ex.getMessage());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NjAyNg==", "url": "https://github.com/apache/helix/pull/799#discussion_r382966026", "bodyText": "Nit: do you think we should use Collection where appropriate to make things consistent? Let's first check if Jackson supports serialization of Collections.", "author": "narendly", "createdAt": "2020-02-23T05:34:45Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/datamodel/MetadataStoreShardingKeysByRealm.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.apache.helix.rest.metadatastore.datamodel;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+\n+@JsonPropertyOrder({\"realm\", \"shardingKeys\"})\n+public class MetadataStoreShardingKeysByRealm {\n+  private String realm;\n+  private List<String> shardingKeys;", "originalCommit": "68b7f76bba8800d3620834ff77eb7b4764b95734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2ODc2Mw==", "url": "https://github.com/apache/helix/pull/799#discussion_r382968763", "bodyText": "It should. Changed.", "author": "huizhilu", "createdAt": "2020-02-23T06:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk2NjAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8dc2d06039620b0927c7d68ff92c0143f7d4701a", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/datamodel/MetadataStoreShardingKeysByRealm.java b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/datamodel/MetadataStoreShardingKeysByRealm.java\nindex 931bb3793..0f543504a 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/datamodel/MetadataStoreShardingKeysByRealm.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/datamodel/MetadataStoreShardingKeysByRealm.java\n\n@@ -19,7 +19,7 @@ package org.apache.helix.rest.metadatastore.datamodel;\n  * under the License.\n  */\n \n-import java.util.List;\n+import java.util.Collection;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n"}}, {"oid": "8dc2d06039620b0927c7d68ff92c0143f7d4701a", "url": "https://github.com/apache/helix/commit/8dc2d06039620b0927c7d68ff92c0143f7d4701a", "message": "Address comments.", "committedDate": "2020-02-23T06:48:01Z", "type": "commit"}, {"oid": "8dc2d06039620b0927c7d68ff92c0143f7d4701a", "url": "https://github.com/apache/helix/commit/8dc2d06039620b0927c7d68ff92c0143f7d4701a", "message": "Address comments.", "committedDate": "2020-02-23T06:48:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MDg0OQ==", "url": "https://github.com/apache/helix/pull/799#discussion_r382970849", "bodyText": "Have you considered creating a separate endpoint for retrieving all realm-list of keys mappings?\nAs I previously commented, I believe that making sure an endpoint does as little as possible and keeping it simple is an important part of a good API design. But now this endpoint has multiple queryParams, and I think this makes it a little more confusing.\nThis is because this endpoint now does more than one thing depending on what queryParams are given, and in this case, the groupByRealm queryParam seems to be serving to specify an option/mode rather than a filter.\nCould we please create a separate endpoint called getAllRoutingData(String namespace)? This way, we keep the original getShardingKeys simple, and there's no confusion about what each of these endpoints is doing. The endpoint name could be something like /all-routing-data or whatever you see fit.", "author": "narendly", "createdAt": "2020-02-23T07:09:40Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java", "diffHunk": "@@ -167,14 +183,22 @@ public Response deleteMetadataStoreRealm(@PathParam(\"realm\") String realm) {\n    */\n   @GET\n   @Path(\"/sharding-keys\")\n-  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix) {\n+  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix,\n+      @DefaultValue(\"false\") @QueryParam(\"groupByRealm\") boolean groupByRealm) {\n     try {\n-      if (prefix == null) {\n-        // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n-        return getAllShardingKeys();\n+      if (prefix != null) {\n+        // For endpoint: \"/sharding-keys?prefix={prefix}\"\n+        // Ignore groupByRealm because response already has realm info for each sharding key.", "originalCommit": "8dc2d06039620b0927c7d68ff92c0143f7d4701a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3Mjc2MA==", "url": "https://github.com/apache/helix/pull/799#discussion_r382972760", "bodyText": "This is a good name that I was trying to have. I tried to have a better name but did not realize that this is actually a routing data endpoint. I have to admit that I don't have a keen sense of routing data. I will refactor this.", "author": "huizhilu", "createdAt": "2020-02-23T07:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk3MDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aeb5966ad0222bc9f44edf3243f5b2221a73ef29", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\nindex 85d1bec3d..efcac2a89 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/metadatastore/MetadataStoreDirectoryAccessor.java\n\n@@ -183,22 +168,40 @@ public class MetadataStoreDirectoryAccessor extends AbstractResource {\n    */\n   @GET\n   @Path(\"/sharding-keys\")\n-  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix,\n-      @DefaultValue(\"false\") @QueryParam(\"groupByRealm\") boolean groupByRealm) {\n+  public Response getShardingKeys(@QueryParam(\"prefix\") String prefix) {\n     try {\n-      if (prefix != null) {\n-        // For endpoint: \"/sharding-keys?prefix={prefix}\"\n-        // Ignore groupByRealm because response already has realm info for each sharding key.\n-        return getAllShardingKeysUnderPath(prefix);\n-      }\n-\n-      if (groupByRealm) {\n-        // For request: \"/sharding-keys?groupByRealm=true\" to get sharding keys by realm.\n-        return getAllShardingKeysByRealm();\n+      if (prefix == null) {\n+        // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n+        return getAllShardingKeys();\n       }\n+      // For endpoint: \"/sharding-keys?prefix={prefix}\"\n+      return getAllShardingKeysUnderPath(prefix);\n+    } catch (NoSuchElementException ex) {\n+      return notFound(ex.getMessage());\n+    }\n+  }\n \n-      // For endpoint: \"/sharding-keys\" to get all sharding keys in a namespace.\n-      return getAllShardingKeys();\n+  /**\n+   * Gets routing data in current namespace.\n+   *\n+   * - \"HTTP GET /routing-data\"\n+   * -- Response example:\n+   * {\n+   *   \"namespace\" : \"my-namespace\",\n+   *   \"routingData\" : [ {\n+   *     \"realm\" : \"realm-1\",\n+   *     \"shardingKeys\" : [ \"/sharding/key/1/d\", \"/sharding/key/1/e\", \"/sharding/key/1/f\" ]\n+   *   }, {\n+   *     \"realm\" : \"realm-2\",\n+   *     \"shardingKeys\" : [ \"/sharding/key/1/a\", \"/sharding/key/1/b\", \"/sharding/key/1/c\" ]\n+   *   } ]\n+   * }\n+   */\n+  @GET\n+  @Path(\"/routing-data\")\n+  public Response getRoutingData() {\n+    try {\n+      return getAllShardingKeysByRealm();\n     } catch (NoSuchElementException ex) {\n       return notFound(ex.getMessage());\n     }\n"}}, {"oid": "aeb5966ad0222bc9f44edf3243f5b2221a73ef29", "url": "https://github.com/apache/helix/commit/aeb5966ad0222bc9f44edf3243f5b2221a73ef29", "message": "Change endpoint to /routing-data", "committedDate": "2020-02-23T07:55:51Z", "type": "commit"}, {"oid": "397afe4d80c32aa9afdcb8e62b1c7bbae2677207", "url": "https://github.com/apache/helix/commit/397afe4d80c32aa9afdcb8e62b1c7bbae2677207", "message": "Refactor", "committedDate": "2020-02-23T08:06:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMzQ0MA==", "url": "https://github.com/apache/helix/pull/799#discussion_r383023440", "bodyText": "Nit: should we rename this method to getAllRoutingDataInNamespace(String namespace)? That way there's no ambiguity and is more consistent with other methods' names in this class.", "author": "narendly", "createdAt": "2020-02-23T17:33:56Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java", "diffHunk": "@@ -51,6 +52,14 @@\n    */\n   Collection<String> getAllShardingKeys(String namespace);\n \n+  /**\n+   * Returns routing data in the given namespace.\n+   *\n+   * @param namespace namespace in metadata store directory.\n+   * @return Routing data map: realm -> List of sharding keys\n+   */\n+  Map<String, List<String>> getRoutingData(String namespace);", "originalCommit": "397afe4d80c32aa9afdcb8e62b1c7bbae2677207", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMTQ0OA==", "url": "https://github.com/apache/helix/pull/799#discussion_r383031448", "bodyText": "Changed to getNamespaceRoutingData(namespace) to avoid having of, in.", "author": "huizhilu", "createdAt": "2020-02-23T19:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMzQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d9853b8811cec41a386e4bfd36fcfb692864d164", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\nindex 3c110f688..4630d50ba 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/metadatastore/MetadataStoreDirectory.java\n\n@@ -58,7 +58,7 @@ public interface MetadataStoreDirectory extends AutoCloseable {\n    * @param namespace namespace in metadata store directory.\n    * @return Routing data map: realm -> List of sharding keys\n    */\n-  Map<String, List<String>> getRoutingData(String namespace);\n+  Map<String, List<String>> getNamespaceRoutingData(String namespace);\n \n   /**\n    * Returns all path-based sharding keys in the given namespace and the realm.\n"}}, {"oid": "d9853b8811cec41a386e4bfd36fcfb692864d164", "url": "https://github.com/apache/helix/commit/d9853b8811cec41a386e4bfd36fcfb692864d164", "message": "Change name to getNamespaceRoutingData", "committedDate": "2020-02-23T19:26:13Z", "type": "commit"}]}