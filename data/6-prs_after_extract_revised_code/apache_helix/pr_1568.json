{"pr_number": 1568, "pr_title": "Mark tasks as DROPPED if assigned participant does not exist", "pr_createdAt": "2020-12-01T00:17:11Z", "pr_url": "https://github.com/apache/helix/pull/1568", "timeline": [{"oid": "623e6c15b55c7d4e480bf86416079b6653692793", "url": "https://github.com/apache/helix/commit/623e6c15b55c7d4e480bf86416079b6653692793", "message": "Mark task to DROPPED for the workflows being stopped\n\nIn this commit, if the workflow or job is being stopped, but\nthe assigned participant becomes offline for the task, the\nttask would be marked as DROPPED which allow the workflow\nand job to go to STOPPED state.", "committedDate": "2020-11-30T22:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533652992", "bodyText": "This looks like an override of processing result... Can we have the logic in somewhere in scheduling task? This is more like a patching after scheduling computation. It waste the scheduling computation if instance is not live.", "author": "junkaixue", "createdAt": "2020-12-01T19:04:51Z", "path": "helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java", "diffHunk": "@@ -317,6 +316,9 @@ private ResourceAssignment computeResourceMapping(String jobResource,\n     // For delayed tasks, trigger a rebalance event for the closest upcoming ready time\n     scheduleForNextTask(jobResource, jobCtx, currentTime);\n \n+    // If the assigned instance is no longer live, so mark it as DROPPED in the context\n+    markPartitionsWithoutLiveInstance(jobCtx, allPartitions, liveInstances);", "originalCommit": "623e6c15b55c7d4e480bf86416079b6653692793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2ODI1Ng==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533668256", "bodyText": "We have this logic in the handleAdditionalTasks in filterTask method. Since that part of the code only hits when TargetState is equal to start, I moved the logic here so in all conditions we evaluate it. If the instance is not live, we still need to schedule the task if the task needs to be scheduled on other instances. If the instance is not live, then we do not see the task in current states which means we would no process the task in this case.", "author": "alirezazamani", "createdAt": "2020-12-01T19:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4ODA5Mw==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533788093", "bodyText": "I understand the complexity of doing the check. So my question is when could this happening? We need to think about to put to the right place. Add here works, but it looks like a \"saving action\" without understand any assignment logic. I would prefer to understand the scenario and move the check logic for assignment there.", "author": "junkaixue", "createdAt": "2020-12-01T23:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNTYyNg==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533805626", "bodyText": "It happens when workflow/job is being stopped (in STOPPING state) and the message is being sent and not processed yet (or the controller has not seen the effect yet) then the live instance is gone. In this case, the job will be stuck in the STOPPING state and the controller does not have a way to mark the task and job to be STOPPED. Note that all new assignment is happening when TargetState is START in handleAdditionTaskAssigment. If not, then assignment logic does not exist and will not be considered. We need to somehow manage this case before that. Note that when the live instance is gone, the controller does not see anything on the instance. I cannot find a better way to achieve this. If you know how it can be resolved, please let me know and I can change it accordingly. Also if you look at handleAdditionalTaskAssignment.filterTask method, it is the same code. I basically changed the place of this code and move it earlier in the pipeline.", "author": "alirezazamani", "createdAt": "2020-12-02T00:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMTU2NQ==", "url": "https://github.com/apache/helix/pull/1568#discussion_r534411565", "bodyText": "If this is the only scenario, my suggestion is moving the logic to following check in JobDispatcher. It checks whether we can determine a job is already stopped or not. It is also the right time that we check whether the instance assigned with tasks are gone or not. If it is gone, we can mark it as DROPPED.\npublic static boolean checkJobStopped(JobContext jobContext) {\nfor (int partition : jobContext.getPartitionSet()) {\nTaskPartitionState taskState = jobContext.getPartitionState(partition);\nif (taskState == TaskPartitionState.RUNNING) {\nreturn false;\n}\n}\nreturn true;\n}", "author": "junkaixue", "createdAt": "2020-12-02T19:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MTUzMQ==", "url": "https://github.com/apache/helix/pull/1568#discussion_r534491531", "bodyText": "Moved to new place as suggessted.", "author": "alirezazamani", "createdAt": "2020-12-02T21:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Mjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bf70ad894dc7d0518a8fac10b4913af1e9a578e1", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java b/helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java\nindex 7ab7613fe..928382dc5 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/JobDispatcher.java\n\n@@ -316,9 +319,6 @@ public class JobDispatcher extends AbstractTaskDispatcher {\n     // For delayed tasks, trigger a rebalance event for the closest upcoming ready time\n     scheduleForNextTask(jobResource, jobCtx, currentTime);\n \n-    // If the assigned instance is no longer live, so mark it as DROPPED in the context\n-    markPartitionsWithoutLiveInstance(jobCtx, allPartitions, liveInstances);\n-\n     // Make additional task assignments if needed.\n     if (jobState != TaskState.TIMING_OUT && jobState != TaskState.TIMED_OUT\n         && jobTgtState == TargetState.START) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyMTM3MQ==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533921371", "bodyText": "You might want to move it to TaskPartitionState class.", "author": "jiajunwang", "createdAt": "2020-12-02T06:16:03Z", "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -837,7 +835,7 @@ private static void addCompletedTasks(Set<Integer> set, JobContext ctx, Iterable\n    * @param state\n    * @return\n    */\n-  private boolean isTaskNotInTerminalState(TaskPartitionState state) {\n+  protected static boolean isTaskNotInTerminalState(TaskPartitionState state) {", "originalCommit": "623e6c15b55c7d4e480bf86416079b6653692793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NzY2OA==", "url": "https://github.com/apache/helix/pull/1568#discussion_r534387668", "bodyText": "TaskPartitionState is just an enum that lists all the states for the tasks. So I think it is better to keep it here like other similar methods.", "author": "alirezazamani", "createdAt": "2020-12-02T18:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyMTM3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyMTk0Ng==", "url": "https://github.com/apache/helix/pull/1568#discussion_r533921946", "bodyText": "It seems no one except JobDispatcher needs this method. Can we just move it to there?", "author": "jiajunwang", "createdAt": "2020-12-02T06:17:50Z", "path": "helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java", "diffHunk": "@@ -935,6 +933,20 @@ protected void markJobFailed(String jobName, JobContext jobContext, WorkflowConf\n         currentTime);\n   }\n \n+  protected void markPartitionsWithoutLiveInstance(JobContext jobCtx, Set<Integer> allPartitions,", "originalCommit": "623e6c15b55c7d4e480bf86416079b6653692793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NzkwNQ==", "url": "https://github.com/apache/helix/pull/1568#discussion_r534387905", "bodyText": "Sure. Moved to jobDispatcher.", "author": "alirezazamani", "createdAt": "2020-12-02T18:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkyMTk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8db48bd851aafc88898c2cc1679a7fd1b5350627", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java b/helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java\nindex 0e7581a06..a2f988a08 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/AbstractTaskDispatcher.java\n\n@@ -933,20 +933,6 @@ public abstract class AbstractTaskDispatcher {\n         currentTime);\n   }\n \n-  protected void markPartitionsWithoutLiveInstance(JobContext jobCtx, Set<Integer> allPartitions,\n-      Collection<String> liveInstances) {\n-    for (int partitionNumber : allPartitions) {\n-      TaskPartitionState state = jobCtx.getPartitionState(partitionNumber);\n-      if (isTaskNotInTerminalState(state)) {\n-        String assignedParticipant = jobCtx.getAssignedParticipant(partitionNumber);\n-        if (assignedParticipant != null && !liveInstances.contains(assignedParticipant)) {\n-          // The assigned instance is no longer live, so mark it as DROPPED in the context\n-          jobCtx.setPartitionState(partitionNumber, TaskPartitionState.DROPPED);\n-        }\n-      }\n-    }\n-  }\n-\n   protected void scheduleJobCleanUp(long expiry, WorkflowConfig workflowConfig,\n       long currentTime) {\n     if (expiry < 0) {\n"}}, {"oid": "8db48bd851aafc88898c2cc1679a7fd1b5350627", "url": "https://github.com/apache/helix/commit/8db48bd851aafc88898c2cc1679a7fd1b5350627", "message": "Address comments", "committedDate": "2020-12-02T18:27:05Z", "type": "commit"}, {"oid": "bf70ad894dc7d0518a8fac10b4913af1e9a578e1", "url": "https://github.com/apache/helix/commit/bf70ad894dc7d0518a8fac10b4913af1e9a578e1", "message": "Address coments", "committedDate": "2020-12-02T19:32:23Z", "type": "commit"}]}