{"pr_number": 1328, "pr_title": "Enhance ZkHelixVerifier and its related subclass to take a default wait period", "pr_createdAt": "2020-08-27T23:55:51Z", "pr_url": "https://github.com/apache/helix/pull/1328", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r479479754", "bodyText": "Do you need System.currentTimeMillis()?  Will the log4j print out the timestamp?", "author": "lei-xia", "createdAt": "2020-08-28T18:51:55Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "originalCommit": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MDQzNg==", "url": "https://github.com/apache/helix/pull/1328#discussion_r480350436", "bodyText": "good point. Removed time stamp for all of them.", "author": "kaisun2000", "createdAt": "2020-08-31T19:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NjUyNQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485996525", "bodyText": "The timestamp seems not to be removed.\nAnd I really don't like these outputs even as debug. I think they are only useful when debugging. And we shall not add them to the repo.", "author": "jiajunwang", "createdAt": "2020-09-10T00:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3OTc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "a060852d76f16595b439f119368619bd08b75565", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 81fd6dd37..202adfd5a 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -231,7 +231,7 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n       _dataProvider.refresh(_accessor);\n       _dataProvider.setClusterEventId(\"ClusterStateVerifier\");\n \n-      LOG.debug(\"Verifier finished dataProvider full refresh at {}\", System.currentTimeMillis());\n+      LOG.debug(\"Verifier finished dataProvider full refresh.\");\n \n       Map<String, IdealState> idealStates = new HashMap<>(_dataProvider.getIdealStates());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDQwOA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r479480408", "bodyText": "\"finished retrieving live instances\"", "author": "lei-xia", "createdAt": "2020-08-28T18:53:38Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -245,13 +248,17 @@ protected synchronized boolean verifyState() {\n           return false;\n         }\n       }\n+      \n+      LOG.debug(\"Verifier finished live instances at {}\", System.currentTimeMillis());", "originalCommit": "dc38e65c37f477f5549ce92fbe96ed4bbfbda322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0OTk2NQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r480349965", "bodyText": "changed.", "author": "kaisun2000", "createdAt": "2020-08-31T19:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ4MDQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a060852d76f16595b439f119368619bd08b75565", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 81fd6dd37..202adfd5a 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -248,8 +248,8 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n           return false;\n         }\n       }\n-      \n-      LOG.debug(\"Verifier finished live instances at {}\", System.currentTimeMillis());\n+\n+      LOG.debug(\"Verifier finished retreiving live instances\");\n \n       Map<String, ExternalView> extViews =\n           _accessor.getChildValuesMap(keyBuilder.externalViews(), true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjcyOA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483206728", "bodyText": "Why are we adding new \"Deprecated\" methods?", "author": "jiajunwang", "createdAt": "2020-09-03T19:29:10Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTE3OQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985179", "bodyText": "removed.", "author": "kaisun2000", "createdAt": "2020-09-09T23:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNjcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207180", "bodyText": "License and a comment for the class, please.", "author": "jiajunwang", "createdAt": "2020-09-03T19:30:02Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzU4NA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483207584", "bodyText": "Moreover, my suggestion is that we put it to the test paths, not in the main.", "author": "jiajunwang", "createdAt": "2020-09-03T19:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTI3NA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485989274", "bodyText": "changed the path and name. added license,", "author": "kaisun2000", "createdAt": "2020-09-10T00:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483208767", "bodyText": "There are more verify methods, I think we shall add COOL_DOWN to all of them. Otherwise, this verifier will behave inconsistently.", "author": "jiajunwang", "createdAt": "2020-09-03T19:33:21Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n+    private final String _clusterName;\n+    private Map<String, Map<String, String>> _errStates;\n+    private Set<String> _resources;\n+    private Set<String> _expectLiveInstances;\n+    private RealmAwareZkClient _zkClient;\n+\n+    public Builder(String clusterName) {\n+      _clusterName = clusterName;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier build() {\n+      if (_clusterName == null) {\n+        throw new IllegalArgumentException(\"Cluster name is missing!\");\n+      }\n+\n+      if (_zkClient != null) {\n+        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n+            _expectLiveInstances);\n+      }\n+\n+      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n+        // For backward-compatibility\n+        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n+            _errStates, _expectLiveInstances);\n+      }\n+\n+      validate();\n+      return new TestBestPossibleExternalViewVerifier(\n+          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n+              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n+          _expectLiveInstances);\n+    }\n+\n+    public String getClusterName() {\n+      return _clusterName;\n+    }\n+\n+    public Map<String, Map<String, String>> getErrStates() {\n+      return _errStates;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n+      _errStates = errStates;\n+      return this;\n+    }\n+\n+    public Set<String> getResources() {\n+      return _resources;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n+      _resources = resources;\n+      return this;\n+    }\n+\n+    public Set<String> getExpectLiveInstances() {\n+      return _expectLiveInstances;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n+      _expectLiveInstances = expectLiveInstances;\n+      return this;\n+    }\n+\n+    public String getZkAddr() {\n+      return _zkAddress;\n+    }\n+\n+    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n+      _zkClient = zkClient;\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  public boolean verifyByPolling(long timeout, long period) {", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTI0NA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485979244", "bodyText": "verify()\nverify(long timeout)\nverifyByZkCallback()\n\nall eventually boils down to verifyByZkCallback(long timeout)\nverifyByPolling() boils down to verifyByPolling(DEFAULT_TIMEOUT, DEFAULT_PERIOD).\nSo we only need to add cool down here.", "author": "kaisun2000", "createdAt": "2020-09-09T23:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDkyOQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000929", "bodyText": "But you didn't change \"verifyByZkCallback\", right?", "author": "jiajunwang", "createdAt": "2020-09-10T00:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzM1Nw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486677357", "bodyText": "I think we don't need to change verifyByZkCallback. To me, it won't help. What is your take?", "author": "kaisun2000", "createdAt": "2020-09-10T22:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjMwMw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483212303", "bodyText": "Stack trace shall be debug log.", "author": "jiajunwang", "createdAt": "2020-09-03T19:40:50Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,10 +237,14 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout, with stack trace {}\",\n+                Arrays.asList(Thread.currentThread().getStackTrace()));", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTA5MA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985090", "bodyText": "fixed.", "author": "kaisun2000", "createdAt": "2020-09-09T23:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxMjMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "f675066fc1412a47cb556d9760040f035371237f", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\nindex 4eb81c54a..8b62435d3 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\n@@ -238,13 +237,12 @@ public abstract class ZkHelixClusterVerifier\n           // make a final try if timeout\n           success = verifyState();\n           if (!success) {\n-            LOG.error(\"verifyByCallback failed due to timeout, with stack trace {}\",\n-                Arrays.asList(Thread.currentThread().getStackTrace()));\n+            LOG.error(\"verifyByCallback failed due to timeout\");\n           }\n         }\n       }\n     } catch (Exception e) {\n-      LOG.error(\"Exception in verifier {}\", e);\n+      LOG.error(\"Exception in verifier\", e);\n     }\n \n     // clean up\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUzNQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483214535", "bodyText": "I had a quick try, I think will work fine. You don't need to copy-paste all code.\npublic static class Builder extends BestPossibleExternalViewVerifier.Builder {\npublic Builder(String clusterName) {\nsuper(clusterName);\n}\n}", "author": "jiajunwang", "createdAt": "2020-09-03T19:45:21Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;\n+\n+  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Map<String, Map<String, String>> errStates, Set<String> resources,\n+      Set<String> expectLiveInstances) {\n+    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n+  }\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkAddr\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n+      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n+    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  /**\n+   * Deprecated - please use the Builder to construct this class.\n+   * @param zkClient\n+   * @param clusterName\n+   * @param resources\n+   * @param errStates\n+   * @param expectLiveInstances\n+   */\n+  @Deprecated\n+  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+      Set<String> resources, Map<String, Map<String, String>> errStates,\n+      Set<String> expectLiveInstances) {\n+    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n+  }\n+\n+  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyNDA3OA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483324078", "bodyText": "Good.", "author": "kaisun2000", "createdAt": "2020-09-04T00:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTExMw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215113", "bodyText": "TestBestPossibleExternalViewVerifier => BestPossibleExternalViewVerifierWithCoolDown?", "author": "jiajunwang", "createdAt": "2020-09-03T19:46:32Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTA1Ng==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485989056", "bodyText": "done.", "author": "kaisun2000", "createdAt": "2020-09-10T00:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTExMw=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTIzMg==", "url": "https://github.com/apache/helix/pull/1328#discussion_r483215232", "bodyText": "Make it configurable?", "author": "jiajunwang", "createdAt": "2020-09-03T19:46:46Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.apache.helix.tools.ClusterVerifiers;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n+  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n+  private static int COOL_DOWN = 2 * 1000;", "originalCommit": "5298577b2bb3dda3dbae4d79bf678b2dd25c5ff6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTIzMQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485985231", "bodyText": "done.", "author": "kaisun2000", "createdAt": "2020-09-09T23:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNTIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\nindex 9b1f5bb90..df921d260 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/TestBestPossibleExternalViewVerifier.java\n\n@@ -1,133 +1,4 @@\n package org.apache.helix.tools.ClusterVerifiers;\n \n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class TestBestPossibleExternalViewVerifier extends BestPossibleExternalViewVerifier {\n-  private static Logger LOG = LoggerFactory.getLogger(TestBestPossibleExternalViewVerifier.class);\n-  private static int COOL_DOWN = 2 * 1000;\n-\n-  private TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super (zkClient, clusterName, errStates, resources, expectLiveInstances);\n-  }\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkAddr\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(String zkAddr, String clusterName, Set<String> resources,\n-      Map<String, Map<String, String>> errStates, Set<String> expectLiveInstances) {\n-    super(zkAddr, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  /**\n-   * Deprecated - please use the Builder to construct this class.\n-   * @param zkClient\n-   * @param clusterName\n-   * @param resources\n-   * @param errStates\n-   * @param expectLiveInstances\n-   */\n-  @Deprecated\n-  public TestBestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n-      Set<String> resources, Map<String, Map<String, String>> errStates,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName, resources, errStates, expectLiveInstances);\n-  }\n-\n-  public static class Builder extends ZkHelixClusterVerifier.Builder<TestBestPossibleExternalViewVerifier.Builder> {\n-    private final String _clusterName;\n-    private Map<String, Map<String, String>> _errStates;\n-    private Set<String> _resources;\n-    private Set<String> _expectLiveInstances;\n-    private RealmAwareZkClient _zkClient;\n-\n-    public Builder(String clusterName) {\n-      _clusterName = clusterName;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier build() {\n-      if (_clusterName == null) {\n-        throw new IllegalArgumentException(\"Cluster name is missing!\");\n-      }\n-\n-      if (_zkClient != null) {\n-        return new TestBestPossibleExternalViewVerifier(_zkClient, _clusterName, _resources, _errStates,\n-            _expectLiveInstances);\n-      }\n-\n-      if (_realmAwareZkConnectionConfig == null || _realmAwareZkClientConfig == null) {\n-        // For backward-compatibility\n-        return new TestBestPossibleExternalViewVerifier(_zkAddress, _clusterName, _resources,\n-            _errStates, _expectLiveInstances);\n-      }\n-\n-      validate();\n-      return new TestBestPossibleExternalViewVerifier(\n-          createZkClient(RealmAwareZkClient.RealmMode.SINGLE_REALM, _realmAwareZkConnectionConfig,\n-              _realmAwareZkClientConfig, _zkAddress), _clusterName, _errStates, _resources,\n-          _expectLiveInstances);\n-    }\n-\n-    public String getClusterName() {\n-      return _clusterName;\n-    }\n-\n-    public Map<String, Map<String, String>> getErrStates() {\n-      return _errStates;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setErrStates(Map<String, Map<String, String>> errStates) {\n-      _errStates = errStates;\n-      return this;\n-    }\n-\n-    public Set<String> getResources() {\n-      return _resources;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setResources(Set<String> resources) {\n-      _resources = resources;\n-      return this;\n-    }\n-\n-    public Set<String> getExpectLiveInstances() {\n-      return _expectLiveInstances;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setExpectLiveInstances(Set<String> expectLiveInstances) {\n-      _expectLiveInstances = expectLiveInstances;\n-      return this;\n-    }\n-\n-    public String getZkAddr() {\n-      return _zkAddress;\n-    }\n-\n-    public TestBestPossibleExternalViewVerifier.Builder setZkClient(RealmAwareZkClient zkClient) {\n-      _zkClient = zkClient;\n-      return this;\n-    }\n-  }\n-\n-  @Override\n-  public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      Thread.sleep(COOL_DOWN);\n-    } catch (InterruptedException e) {\n-      LOG.error(\"sleeping in verifyByPolling interrupted\");\n-    }\n-    return super.verifyByPolling(timeout, period);\n-  }\n+public class TestBestPossibleExternalViewVerifier {\n }\n"}}, {"oid": "50d0da044d22a68018a18b1777ae57b2a4a841a3", "url": "https://github.com/apache/helix/commit/50d0da044d22a68018a18b1777ae57b2a4a841a3", "message": "Implement TestBestPossibleExternalViewVerifier #1321\n\nTestBestPossibleExternalViewVerifier would have a default COOL_DOWN period\nbefore verifyByPolling. Due to #526, currently we have randow sleep in the\ntest before verifyByPolling. We intend to use TestBestPossibeVerifier\ninstead in our unit test.  While keep using BestPossibleExternalViewVerifier\nin production code.", "committedDate": "2020-09-10T00:17:19Z", "type": "commit"}, {"oid": "e53bb2bedd74ac0952a025d2e5cef970f60255b6", "url": "https://github.com/apache/helix/commit/e53bb2bedd74ac0952a025d2e5cef970f60255b6", "message": "add the implementation", "committedDate": "2020-09-10T00:17:19Z", "type": "commit"}, {"oid": "a060852d76f16595b439f119368619bd08b75565", "url": "https://github.com/apache/helix/commit/a060852d76f16595b439f119368619bd08b75565", "message": "remove timestamp based on review", "committedDate": "2020-09-10T00:17:19Z", "type": "commit"}, {"oid": "f675066fc1412a47cb556d9760040f035371237f", "url": "https://github.com/apache/helix/commit/f675066fc1412a47cb556d9760040f035371237f", "message": "changed based on feedback, added strict version", "committedDate": "2020-09-10T00:17:19Z", "type": "commit"}, {"oid": "f675066fc1412a47cb556d9760040f035371237f", "url": "https://github.com/apache/helix/commit/f675066fc1412a47cb556d9760040f035371237f", "message": "changed based on feedback, added strict version", "committedDate": "2020-09-10T00:17:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEwNA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r485997104", "bodyText": "This breaks the builder design pattern a little bit.\nI'm thinking if we have a better way.\nWhat if we add a configuration to the Verifier Builder called \"waitUntilVerify\"? It can be a generic configuration for all verifiers even production ones.\n\nIt is optional, so no backward compatibility issue.\nIt potentially helps our customers too, because they may face the same verify timing issue.\nIt requires the same amount of change as your current design. But no extra class introduced.\n\nPlease consider adding it to ZkHelixClusterVerifier.Builder, so all the verifier gets it.", "author": "jiajunwang", "createdAt": "2020-09-10T00:42:43Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -105,7 +105,7 @@ public BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clus\n     _dataProvider = new ResourceControllerDataProvider();\n   }\n \n-  private BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+  protected BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,", "originalCommit": "f675066fc1412a47cb556d9760040f035371237f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODg0NA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738844", "bodyText": "refactored.", "author": "kaisun2000", "createdAt": "2020-09-11T02:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "32345cb03154a6bc01a8fe4862ee3ef7006af134", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 202adfd5a..58c168605 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -98,17 +98,17 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n   public BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n       Set<String> resources, Map<String, Map<String, String>> errStates,\n       Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName);\n+    super(zkClient, clusterName, 0);\n     _errStates = errStates;\n     _resources = resources;\n     _expectLiveInstances = expectLiveInstances;\n     _dataProvider = new ResourceControllerDataProvider();\n   }\n \n-  protected BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n+  private BestPossibleExternalViewVerifier(RealmAwareZkClient zkClient, String clusterName,\n       Map<String, Map<String, String>> errStates, Set<String> resources,\n-      Set<String> expectLiveInstances) {\n-    super(zkClient, clusterName);\n+      Set<String> expectLiveInstances, int cooldown) {\n+    super(zkClient, clusterName, cooldown);\n     // Deep copy data from Builder\n     _errStates = new HashMap<>();\n     if (errStates != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDExOQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000119", "bodyText": "nit, keep the same log string style?\n\"LOG.error(\"verifier timeout out with timeout {}\", timeout);\"", "author": "jiajunwang", "createdAt": "2020-09-10T00:54:07Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -234,6 +236,9 @@ protected boolean verifyByCallback(long timeout, List<ClusterVerifyTrigger> trig\n         if (!success) {\n           // make a final try if timeout\n           success = verifyState();\n+          if (!success) {\n+            LOG.error(\"verifyByCallback failed due to timeout\");", "originalCommit": "f675066fc1412a47cb556d9760040f035371237f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODc2Nw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738767", "bodyText": "fixed.", "author": "kaisun2000", "createdAt": "2020-09-11T02:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "32345cb03154a6bc01a8fe4862ee3ef7006af134", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\nindex 8b62435d3..f0b8a6e7a 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\n@@ -237,7 +248,7 @@ public abstract class ZkHelixClusterVerifier\n           // make a final try if timeout\n           success = verifyState();\n           if (!success) {\n-            LOG.error(\"verifyByCallback failed due to timeout\");\n+            LOG.error(\"verifyByCallback failed due to timeout {}\", timeout);\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI0MA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486000240", "bodyText": "Remove?", "author": "jiajunwang", "createdAt": "2020-09-10T00:54:34Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -19,6 +19,7 @@\n  * under the License.\n  */\n \n+import java.util.Arrays;", "originalCommit": "f675066fc1412a47cb556d9760040f035371237f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODY5Nw==", "url": "https://github.com/apache/helix/pull/1328#discussion_r486738697", "bodyText": "removed.", "author": "kaisun2000", "createdAt": "2020-09-11T02:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMDI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "bee382eaff10df22edefb727d97fc5afda593843", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\nindex 8b62435d3..eb1e94333 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\n@@ -19,7 +19,6 @@ package org.apache.helix.tools.ClusterVerifiers;\n  * under the License.\n  */\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n"}}, {"oid": "32345cb03154a6bc01a8fe4862ee3ef7006af134", "url": "https://github.com/apache/helix/commit/32345cb03154a6bc01a8fe4862ee3ef7006af134", "message": "refactor based on jj's feedback", "committedDate": "2020-09-11T02:33:31Z", "type": "commit"}, {"oid": "bee382eaff10df22edefb727d97fc5afda593843", "url": "https://github.com/apache/helix/commit/bee382eaff10df22edefb727d97fc5afda593843", "message": "remove the unused array.", "committedDate": "2020-09-11T02:37:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODc1NQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487218755", "bodyText": "Let's just call it \"waitPeriodTillVerify. Cooldown is not an obvious name.", "author": "jiajunwang", "createdAt": "2020-09-11T18:30:51Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -335,6 +352,11 @@ public B setZkAddr(String zkAddress) {\n       return setZkAddress(zkAddress);\n     }\n \n+    public B setWaitTillVerify(int waitPeriod) {\n+      _coolDown = waitPeriod;", "originalCommit": "bee382eaff10df22edefb727d97fc5afda593843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NDIyMg==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487284222", "bodyText": "changed", "author": "kaisun2000", "createdAt": "2020-09-11T20:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODc1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c64a8b704f3d92be7af0d19d444b7edb63a95781", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\nindex eb1e94333..734065fe5 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\n@@ -353,7 +356,7 @@ public abstract class ZkHelixClusterVerifier\n     }\n \n     public B setWaitTillVerify(int waitPeriod) {\n-      _coolDown = waitPeriod;\n+      _waitPeriodTillVerify = waitPeriod;\n       return (B) this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDE1OQ==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487220159", "bodyText": "As we discussed, please remove the debug logs if not absolutely necessary for long term usage.", "author": "jiajunwang", "createdAt": "2020-09-11T18:34:00Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -224,12 +224,15 @@ public boolean verifyByZkCallback(long timeout) {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n+      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());", "originalCommit": "bee382eaff10df22edefb727d97fc5afda593843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDgwMg==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487264802", "bodyText": "removed all", "author": "kaisun2000", "createdAt": "2020-09-11T20:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c64a8b704f3d92be7af0d19d444b7edb63a95781", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 58c168605..744624d64 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -224,15 +226,12 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n   @Override\n   protected synchronized boolean verifyState() {\n     try {\n-      LOG.debug(\"Verifier start verifyState at {}\", System.currentTimeMillis());\n       PropertyKey.Builder keyBuilder = _accessor.keyBuilder();\n \n       _dataProvider.requireFullRefresh();\n       _dataProvider.refresh(_accessor);\n       _dataProvider.setClusterEventId(\"ClusterStateVerifier\");\n \n-      LOG.debug(\"Verifier finished dataProvider full refresh.\");\n-\n       Map<String, IdealState> idealStates = new HashMap<>(_dataProvider.getIdealStates());\n \n       // filter out all resources that use Task state model\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMzk1OA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487223958", "bodyText": "I believe you can and should add the same wait for verifyByZkCallback too.\nThe logic of verifyByZkCallback is that\n\nsubscribe to changes.\nno matter if change happens, verify the state for once.\nif subscription results in some notification, then verify in parallel.\nany of the paths succeed, then the verify succeeds.\n\nIn this case, we shall wait until the first subscribe to ensure the waitTillVerify config takes effect. This won't cause any problem with verifying logic. Since if the change happens before we subscribe, we are still fine because the first default verify check will be done once at least.", "author": "jiajunwang", "createdAt": "2020-09-11T18:42:05Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java", "diffHunk": "@@ -187,6 +190,14 @@ public boolean verifyByZkCallback() {\n    * @return\n    */\n   public boolean verifyByPolling(long timeout, long period) {", "originalCommit": "bee382eaff10df22edefb727d97fc5afda593843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NDMxNA==", "url": "https://github.com/apache/helix/pull/1328#discussion_r487284314", "bodyText": "make sense.", "author": "kaisun2000", "createdAt": "2020-09-11T20:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMzk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c64a8b704f3d92be7af0d19d444b7edb63a95781", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\nindex eb1e94333..734065fe5 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/ZkHelixClusterVerifier.java\n\n@@ -190,13 +199,7 @@ public abstract class ZkHelixClusterVerifier\n    * @return\n    */\n   public boolean verifyByPolling(long timeout, long period) {\n-    try {\n-      if (_coolDown != 0) {\n-        Thread.sleep(_coolDown);\n-      }\n-    } catch (InterruptedException e) {\n-      LOG.error(\"cooldown in verifyByPolling interrupted\");\n-    }\n+    waitTillVerify();\n \n     try {\n       long start = System.currentTimeMillis();\n"}}, {"oid": "c64a8b704f3d92be7af0d19d444b7edb63a95781", "url": "https://github.com/apache/helix/commit/c64a8b704f3d92be7af0d19d444b7edb63a95781", "message": "add waiting period for zk trigger.", "committedDate": "2020-09-11T20:56:05Z", "type": "commit"}]}