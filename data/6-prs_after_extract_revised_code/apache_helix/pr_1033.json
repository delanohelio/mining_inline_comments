{"pr_number": 1033, "pr_title": "Add path existing check for customized state", "pr_createdAt": "2020-05-27T22:36:40Z", "pr_url": "https://github.com/apache/helix/pull/1033", "timeline": [{"oid": "768ec8090b9b27888d140abdd9b47ba8c52c9545", "url": "https://github.com/apache/helix/commit/768ec8090b9b27888d140abdd9b47ba8c52c9545", "message": "Add path existing check for customized state", "committedDate": "2020-05-27T21:14:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Mzc4OQ==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431483789", "bodyText": "You're creating a PropertyKey object with the given instance name and checking whether it's null? How would it be null if you've just created the path? In other words, when would this condition ever evaluate to false?\nDid you mean to check whether the path exists in ZooKeeper? If so, shouldn't you do an exist() check with a ZkClient-based API?\nUnless I'm mistaken and we actually somehow pre-populate the KeyBuilder with a whitelist of instances for the Customized State feature and returns null if the instance doesn't show up in the list?", "author": "narendly", "createdAt": "2020-05-27T22:42:48Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1256,14 +1256,18 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n \n         for (String instance : curInstances.keySet()) {\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n-            try {\n-              manager.addCustomizedStateRootChangeListener(this, instance);\n-              logger.info(manager.getInstanceName() + \" added customized root change listener for\"\n-                  + \" \" + instance\n-                  + \", listener: \" + this);\n-            } catch (Exception e) {\n-              logger.error(\"Fail to add customized root change listener for instance: \" + instance,\n-                  e);\n+            PropertyKey propertyKey =\n+                keyBuilder.customizedStatesRoot(instance);\n+            if (propertyKey.getPath() != null) {", "originalCommit": "768ec8090b9b27888d140abdd9b47ba8c52c9545", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NzI4Mw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431487283", "bodyText": "oh..I was thinking to use exist checking, but put the wrong check, let me update it.\nThis is just for backward incompatibility check. We're totally fine without this check, but the participant would need to be on the latest version to have customized state path created. If they don't, there can be some error logs when adding listener to customized state path. It's still fine, but might cause confusion.", "author": "zhangmeng916", "createdAt": "2020-05-27T22:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Mzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5MzEzNA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431493134", "bodyText": "Yes, for backward compatibility, you need to check the root path existence in ZK. This check is not very meaningful. You're basically doing if (\"~~/instanceName\" != null), which always evaluates to true.\nYou can use the data accessor from the HelixManager instance here for an exist check.", "author": "narendly", "createdAt": "2020-05-27T23:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4Mzc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6704924cc97d3d86dff8105b7299d744bae44ab", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex cecaf87ce..3282019b2 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1256,18 +1256,14 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n         for (String instance : curInstances.keySet()) {\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n-            PropertyKey propertyKey =\n-                keyBuilder.customizedStatesRoot(instance);\n-            if (propertyKey.getPath() != null) {\n-              try {\n-                manager.addCustomizedStateRootChangeListener(this, instance);\n-                logger.info(\n-                    manager.getInstanceName() + \" added customized root change listener for\" + \" \" + instance\n-                        + \", listener: \" + this);\n-              } catch (Exception e) {\n-                logger.error(\"Fail to add customized root change listener for instance: \" + instance,\n-                    e);\n-              }\n+            try {\n+              manager.addCustomizedStateRootChangeListener(this, instance);\n+              logger.info(manager.getInstanceName() + \" added root path listener for customized \"\n+                  + \"state change for\" + \" \" + instance + \", listener: \" + this);\n+            } catch (Exception e) {\n+              logger.error(\n+                  \"Fail to add root path listener for customized state change\" + \"for instance: \"\n+                      + instance, e);\n             }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NDcxNw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431484717", "bodyText": "\"customized root change\" is confusing. Could we explicitly state what it is? For example,\n\"Added (or Failed to add) the root path for Customized State ...\"\nAlso, this log doesn't seem entirely necessary. Don't need to log every time we add a listener - I'd make this a debug log so as not to pollute the log.", "author": "narendly", "createdAt": "2020-05-27T22:45:23Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1256,14 +1256,18 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n \n         for (String instance : curInstances.keySet()) {\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n-            try {\n-              manager.addCustomizedStateRootChangeListener(this, instance);\n-              logger.info(manager.getInstanceName() + \" added customized root change listener for\"\n-                  + \" \" + instance\n-                  + \", listener: \" + this);\n-            } catch (Exception e) {\n-              logger.error(\"Fail to add customized root change listener for instance: \" + instance,\n-                  e);\n+            PropertyKey propertyKey =\n+                keyBuilder.customizedStatesRoot(instance);\n+            if (propertyKey.getPath() != null) {\n+              try {\n+                manager.addCustomizedStateRootChangeListener(this, instance);\n+                logger.info(\n+                    manager.getInstanceName() + \" added customized root change listener for\" + \" \" + instance\n+                        + \", listener: \" + this);\n+              } catch (Exception e) {\n+                logger.error(\"Fail to add customized root change listener for instance: \" + instance,", "originalCommit": "768ec8090b9b27888d140abdd9b47ba8c52c9545", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NDczNA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431494734", "bodyText": "I updated the log information. For log.info or log.debug, in the controller, all other listeners are added with log.info. I think this is for easy debug purpose. Please let me know if the previous convention should be changed.", "author": "zhangmeng916", "createdAt": "2020-05-27T23:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4NDcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "c6704924cc97d3d86dff8105b7299d744bae44ab", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex cecaf87ce..3282019b2 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1256,18 +1256,14 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n         for (String instance : curInstances.keySet()) {\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n-            PropertyKey propertyKey =\n-                keyBuilder.customizedStatesRoot(instance);\n-            if (propertyKey.getPath() != null) {\n-              try {\n-                manager.addCustomizedStateRootChangeListener(this, instance);\n-                logger.info(\n-                    manager.getInstanceName() + \" added customized root change listener for\" + \" \" + instance\n-                        + \", listener: \" + this);\n-              } catch (Exception e) {\n-                logger.error(\"Fail to add customized root change listener for instance: \" + instance,\n-                    e);\n-              }\n+            try {\n+              manager.addCustomizedStateRootChangeListener(this, instance);\n+              logger.info(manager.getInstanceName() + \" added root path listener for customized \"\n+                  + \"state change for\" + \" \" + instance + \", listener: \" + this);\n+            } catch (Exception e) {\n+              logger.error(\n+                  \"Fail to add root path listener for customized state change\" + \"for instance: \"\n+                      + instance, e);\n             }\n         }\n       }\n"}}, {"oid": "c6704924cc97d3d86dff8105b7299d744bae44ab", "url": "https://github.com/apache/helix/commit/c6704924cc97d3d86dff8105b7299d744bae44ab", "message": "modify check", "committedDate": "2020-05-27T23:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NzI2Nw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431497267", "bodyText": "Do you think it would be useful to log (warn) if this evaluates to false?", "author": "narendly", "createdAt": "2020-05-27T23:22:27Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -591,8 +591,11 @@ public void addCurrentStateChangeListener(org.apache.helix.CurrentStateChangeLis\n   @Override\n   public void addCustomizedStateRootChangeListener(CustomizedStateRootChangeListener listener,\n       String instanceName) throws Exception {\n-    addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n-        ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n+    PropertyKey propertyKey = _dataAccessor.keyBuilder().customizedStatesRoot(instanceName);\n+    if (_zkclient.exists(propertyKey.getPath())) {\n+      addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n+          ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n+    }", "originalCommit": "c6704924cc97d3d86dff8105b7299d744bae44ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NTI1Ng==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431995256", "bodyText": "I remember we say that if participant's version is older than the controller version, it's fine? If so then I think we may not need to log it.", "author": "mgao0", "createdAt": "2020-05-28T17:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5NzI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "24cb974cb548df3a4906da625743ba9c9e920438", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\nindex 312fa227b..e2429d76f 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\n@@ -591,11 +591,8 @@ public class ZKHelixManager implements HelixManager, IZkStateListener {\n   @Override\n   public void addCustomizedStateRootChangeListener(CustomizedStateRootChangeListener listener,\n       String instanceName) throws Exception {\n-    PropertyKey propertyKey = _dataAccessor.keyBuilder().customizedStatesRoot(instanceName);\n-    if (_zkclient.exists(propertyKey.getPath())) {\n-      addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n-          ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n-    }\n+    addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n+        ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431501483", "bodyText": "I am concerned about the performance. This check adds more time for adding listeners because of network latency. I wonder if there is a better way so this check could be avoided.", "author": "huizhilu", "createdAt": "2020-05-27T23:35:38Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -591,8 +591,11 @@ public void addCurrentStateChangeListener(org.apache.helix.CurrentStateChangeLis\n   @Override\n   public void addCustomizedStateRootChangeListener(CustomizedStateRootChangeListener listener,\n       String instanceName) throws Exception {\n-    addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n-        ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n+    PropertyKey propertyKey = _dataAccessor.keyBuilder().customizedStatesRoot(instanceName);\n+    if (_zkclient.exists(propertyKey.getPath())) {", "originalCommit": "c6704924cc97d3d86dff8105b7299d744bae44ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjYyMA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431502620", "bodyText": "If we don't check path, the only way I can think of is to check participant side version.  Doesn't sounds a clean way though.", "author": "zhangmeng916", "createdAt": "2020-05-27T23:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzA5MA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431503090", "bodyText": "Maybe we could just change the the log in callback handler not to log the exception stack trace.", "author": "huizhilu", "createdAt": "2020-05-27T23:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNTQ1OQ==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431505459", "bodyText": "That would impact all the exceptions right? Then it's not good for debugging purpose.", "author": "zhangmeng916", "createdAt": "2020-05-27T23:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzNTYxNQ==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431535615", "bodyText": "It is just a warn log. I think it is OK not to print the stack trace. And if the stack trace is necessary, we could keep the stack trace for the other paths, but for this customized state path, just log the message.", "author": "huizhilu", "createdAt": "2020-05-28T01:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MTIwNw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431541207", "bodyText": "exists() check is not a heavyweight ZK operation and considering we only call this when there's a LiveInstance change (or periodic rebalance), I don't think performance is a concern here.", "author": "narendly", "createdAt": "2020-05-28T02:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3NTk5Mw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431975993", "bodyText": "Dummy question, why participant needs to listen on customized view changes? Only controller needs to listen on the change, not?", "author": "lei-xia", "createdAt": "2020-05-28T16:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3ODgxNw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r431978817", "bodyText": "Participant does not need to listen on customized view change. The backward compatibility issue happens when we have a new version controller, while the client is on an old version participant. The new path INSTANCES/CUSTOMIZED_STATES does not exist, but controller will try to add listener to that path during live instance change. Then zkclient will have a no node exception. It's fine, just a warn, but kind of pollute client's log and make them confused.", "author": "zhangmeng916", "createdAt": "2020-05-28T16:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczNDkzMQ==", "url": "https://github.com/apache/helix/pull/1033#discussion_r432734931", "bodyText": "Shall we have some logs to indicate it is not able to subscribe? Maybe warning or something? Because after adding this check, it will be silently ignore the subscription.", "author": "junkaixue", "createdAt": "2020-05-29T21:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMDM4Mw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r434910383", "bodyText": "I updated this rb with a solution to avoid stack trace in our customers who have not updated their helix-lib version. As discussed before, this is the simplest while robust way to solve the issue without performance penalty. For further improvement on customized state listener, we track in this issue: #1046 and tackle it later.", "author": "zhangmeng916", "createdAt": "2020-06-03T23:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "24cb974cb548df3a4906da625743ba9c9e920438", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\nindex 312fa227b..e2429d76f 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\n@@ -591,11 +591,8 @@ public class ZKHelixManager implements HelixManager, IZkStateListener {\n   @Override\n   public void addCustomizedStateRootChangeListener(CustomizedStateRootChangeListener listener,\n       String instanceName) throws Exception {\n-    PropertyKey propertyKey = _dataAccessor.keyBuilder().customizedStatesRoot(instanceName);\n-    if (_zkclient.exists(propertyKey.getPath())) {\n-      addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n-          ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n-    }\n+    addListener(listener, new Builder(_clusterName).customizedStatesRoot(instanceName),\n+        ChangeType.CUSTOMIZED_STATE_ROOT, new EventType[]{EventType.NodeChildrenChanged});\n   }\n \n   @Override\n"}}, {"oid": "24cb974cb548df3a4906da625743ba9c9e920438", "url": "https://github.com/apache/helix/commit/24cb974cb548df3a4906da625743ba9c9e920438", "message": "temporary solution to remove stack trace", "committedDate": "2020-05-31T18:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyOTMzNA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r433529334", "bodyText": "I understand you may want to keep logging as original. But since you are changing the logging code here, I suggest changing it to use parameterized logging: logger.info(\"Hello {}\", world);. This parameterized logging has benefits of reduce string concatenation overhead when logging level info is not enabled, and easier to read in the code. Same as the other places in this PR.\nNit, I realized this for loop needs unindent.", "author": "huizhilu", "createdAt": "2020-06-01T22:47:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,12 +1258,12 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n             try {\n               manager.addCustomizedStateRootChangeListener(this, instance);\n-              logger.info(manager.getInstanceName() + \" added customized root change listener for\"\n-                  + \" \" + instance\n-                  + \", listener: \" + this);\n+              logger.info(manager.getInstanceName() + \" added root path listener for customized \"", "originalCommit": "24cb974cb548df3a4906da625743ba9c9e920438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2NTgwMw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r434865803", "bodyText": "+ \"state change for\" + \" \"\nCan we please refine the format as well.", "author": "jiajunwang", "createdAt": "2020-06-03T21:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyOTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "401ae6f679b5d6c3071e298616c8bbe84b7092c8", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 3282019b2..683845c36 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1259,10 +1259,10 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n             try {\n               manager.addCustomizedStateRootChangeListener(this, instance);\n               logger.info(manager.getInstanceName() + \" added root path listener for customized \"\n-                  + \"state change for\" + \" \" + instance + \", listener: \" + this);\n+                  + \"state change for \" + instance + \", listener: \" + this);\n             } catch (Exception e) {\n               logger.error(\n-                  \"Fail to add root path listener for customized state change\" + \"for instance: \"\n+                  \"Fail to add root path listener for customized state change for instance: \"\n                       + instance, e);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyOTgxOA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r433529818", "bodyText": "fail to -> Failed to ? Same for the others.", "author": "huizhilu", "createdAt": "2020-06-01T22:49:34Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -639,8 +638,13 @@ private void subscribeForChanges(NotificationContext.Type callbackType, String p\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n-          logger.warn(\n-              \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener, e);\n+          if (_changeType == CUSTOMIZED_STATE_ROOT) {\n+            logger.warn(\n+                \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener);", "originalCommit": "24cb974cb548df3a4906da625743ba9c9e920438", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 9dffe7df5..eb3b85d1d 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -638,19 +639,20 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n+          // TODO: avoid calling getChildren for path that does not exist\n           if (_changeType == CUSTOMIZED_STATE_ROOT) {\n-            logger.warn(\n-                \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener);\n+            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+                _listener);\n           } else {\n-            logger.warn(\n-                \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener, e);\n+            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+                _listener, e);\n           }\n         }\n       }\n     }\n \n     long end = System.currentTimeMillis();\n-    logger.info(\"Subscribing to path:\" + path + \" took:\" + (end - start));\n+    logger.info(\"Subscribing to path: {} took: {}\", path, (end - start));\n   }\n \n   public EventType[] getEventTypes() {\n"}}, {"oid": "6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "url": "https://github.com/apache/helix/commit/6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "message": "change all log to parameterized log", "committedDate": "2020-06-02T18:28:08Z", "type": "commit"}, {"oid": "6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "url": "https://github.com/apache/helix/commit/6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "message": "change all log to parameterized log", "committedDate": "2020-06-02T18:28:08Z", "type": "forcePushed"}, {"oid": "c648200a8b9c3af77f408a00008468832572ddab", "url": "https://github.com/apache/helix/commit/c648200a8b9c3af77f408a00008468832572ddab", "message": "final improvement", "committedDate": "2020-06-03T05:48:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2NjExNA==", "url": "https://github.com/apache/helix/pull/1033#discussion_r434866114", "bodyText": "Why use 2 separate sections for the constant string contents?", "author": "jiajunwang", "createdAt": "2020-06-03T21:23:51Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1258,12 +1258,12 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n           if (lastInstances == null || !lastInstances.containsKey(instance)) {\n             try {\n               manager.addCustomizedStateRootChangeListener(this, instance);\n-              logger.info(manager.getInstanceName() + \" added customized root change listener for\"\n-                  + \" \" + instance\n-                  + \", listener: \" + this);\n+              logger.info(manager.getInstanceName() + \" added root path listener for customized \"\n+                  + \"state change for\" + \" \" + instance + \", listener: \" + this);\n             } catch (Exception e) {\n-              logger.error(\"Fail to add customized root change listener for instance: \" + instance,\n-                  e);\n+              logger.error(\n+                  \"Fail to add root path listener for customized state change\" + \"for instance: \"", "originalCommit": "6c62b51133b4cf0d48cb00ac5094c1cfa2a68f10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "401ae6f679b5d6c3071e298616c8bbe84b7092c8", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 3282019b2..683845c36 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1259,10 +1259,10 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n             try {\n               manager.addCustomizedStateRootChangeListener(this, instance);\n               logger.info(manager.getInstanceName() + \" added root path listener for customized \"\n-                  + \"state change for\" + \" \" + instance + \", listener: \" + this);\n+                  + \"state change for \" + instance + \", listener: \" + this);\n             } catch (Exception e) {\n               logger.error(\n-                  \"Fail to add root path listener for customized state change\" + \"for instance: \"\n+                  \"Fail to add root path listener for customized state change for instance: \"\n                       + instance, e);\n             }\n         }\n"}}, {"oid": "401ae6f679b5d6c3071e298616c8bbe84b7092c8", "url": "https://github.com/apache/helix/commit/401ae6f679b5d6c3071e298616c8bbe84b7092c8", "message": "fix comment", "committedDate": "2020-06-03T23:23:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2NTg3Mw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r434965873", "bodyText": "Can we just merge these two conditions? There's practically no difference. Or catch exceptions separately and log an appropriate, differentiated log message. Otherwise, this just looks like duplicate code.", "author": "narendly", "createdAt": "2020-06-04T03:03:21Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -639,14 +639,20 @@ private void subscribeForChanges(NotificationContext.Type callbackType, String p\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n-          logger.warn(\n-              \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener, e);\n+          // TODO: avoid calling getChildren for path that does not exist\n+          if (_changeType == CUSTOMIZED_STATE_ROOT) {\n+            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+                _listener);\n+          } else {\n+            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+                _listener, e);", "originalCommit": "401ae6f679b5d6c3071e298616c8bbe84b7092c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTA2Ng==", "url": "https://github.com/apache/helix/pull/1033#discussion_r435455066", "bodyText": "@narendly tried to remove duplicates. However, this will make the log and stacktrace to be in two entries. Won't look good.", "author": "zhangmeng916", "createdAt": "2020-06-04T18:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2NTg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "382f4582ae57cff353bf96d19ecb6539e363f87c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 6a771d509..0824e7de6 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -639,13 +639,11 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n+          logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+              _listener);\n           // TODO: avoid calling getChildren for path that does not exist\n-          if (_changeType == CUSTOMIZED_STATE_ROOT) {\n-            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n-                _listener);\n-          } else {\n-            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n-                _listener, e);\n+          if (_changeType != CUSTOMIZED_STATE_ROOT) {\n+            logger.warn(\"string\", e);\n           }\n         }\n       }\n"}}, {"oid": "382f4582ae57cff353bf96d19ecb6539e363f87c", "url": "https://github.com/apache/helix/commit/382f4582ae57cff353bf96d19ecb6539e363f87c", "message": "change log", "committedDate": "2020-06-04T17:51:52Z", "type": "forcePushed"}, {"oid": "8d41a8ac5009770739f635a386e85e5ddf7423a7", "url": "https://github.com/apache/helix/commit/8d41a8ac5009770739f635a386e85e5ddf7423a7", "message": "change log", "committedDate": "2020-06-05T16:31:43Z", "type": "commit"}, {"oid": "8d41a8ac5009770739f635a386e85e5ddf7423a7", "url": "https://github.com/apache/helix/commit/8d41a8ac5009770739f635a386e85e5ddf7423a7", "message": "change log", "committedDate": "2020-06-05T16:31:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MDAyMw==", "url": "https://github.com/apache/helix/pull/1033#discussion_r436040023", "bodyText": "if (_changeType != CUSTOMIZED_STATE_ROOT) {\n  LOG.warn(\"Failed to subscribe .... Instance doesn't support Customized State!, path, _listerner);\n} else {\n  LOG.warn(\"Failed to.... \");\n}\n\nHow about this? this way you don't print all the exceptions stack trace, and it doesn't look like it's duplicate code, and the message is clear.", "author": "narendly", "createdAt": "2020-06-05T16:45:15Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -639,14 +639,18 @@ private void subscribeForChanges(NotificationContext.Type callbackType, String p\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n-          logger.warn(\n-              \"fail to subscribe child/data change. path: \" + path + \", listener: \" + _listener, e);\n+          logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+              _listener);\n+          // TODO: avoid calling getChildren for path that does not exist\n+          if (_changeType != CUSTOMIZED_STATE_ROOT) {\n+            logger.warn(\"\", e);\n+          }", "originalCommit": "8d41a8ac5009770739f635a386e85e5ddf7423a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee9a92862a5cbd3499cbc1dcc3c0e745e1155158", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 7a25f041c..2192ca0a7 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -639,11 +639,14 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n             }\n           }\n         } catch (ZkNoNodeException | HelixMetaDataAccessException e) {\n-          logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n-              _listener);\n-          // TODO: avoid calling getChildren for path that does not exist\n-          if (_changeType != CUSTOMIZED_STATE_ROOT) {\n-            logger.warn(\"\", e);\n+          //TODO: avoid calling getChildren for path that does not exist\n+          if (_changeType == CUSTOMIZED_STATE_ROOT) {\n+            logger.warn(\n+                \"Failed to subscribe child/data change on path: {}, listener: {}. Instance \"\n+                    + \"does not support Customized State!\", path, _listener);\n+          } else {\n+            logger.warn(\"Failed to subscribe child/data change. path: {}, listener: {}\", path,\n+                _listener, e);\n           }\n         }\n       }\n"}}, {"oid": "ee9a92862a5cbd3499cbc1dcc3c0e745e1155158", "url": "https://github.com/apache/helix/commit/ee9a92862a5cbd3499cbc1dcc3c0e745e1155158", "message": "change log warn", "committedDate": "2020-06-05T16:54:41Z", "type": "commit"}]}