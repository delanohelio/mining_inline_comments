{"pr_number": 1489, "pr_title": "Refine the HelixTaskExecutor to reduce duplicate code and clarify the code structure.", "pr_createdAt": "2020-10-27T22:40:48Z", "pr_url": "https://github.com/apache/helix/pull/1489", "timeline": [{"oid": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "url": "https://github.com/apache/helix/commit/0777cd369d48fba480ac9ffb7e0b309fda7540ee", "message": "Refine the HelixTaskExecutor to reduce duplicate code and clarify the code structure.\n\nThere is minor code logic change for optimization. But there is no business logic change in this PR.", "committedDate": "2020-10-28T01:06:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTA2NQ==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513731065", "bodyText": "All the above changes seems to be non-essential change, right?", "author": "kaisun2000", "createdAt": "2020-10-28T20:13:08Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -192,43 +191,38 @@ public void registerMessageHandlerFactory(String type, MessageHandlerFactory fac\n   @Override\n   public void registerMessageHandlerFactory(String type, MessageHandlerFactory factory,\n       int threadpoolSize) {\n-    if (factory instanceof  MultiTypeMessageHandlerFactory) {\n+    if (factory instanceof MultiTypeMessageHandlerFactory) {\n       if (!((MultiTypeMessageHandlerFactory) factory).getMessageTypes().contains(type)) {\n         throw new HelixException(\"Message factory type mismatch. Type: \" + type + \", factory: \"\n             + ((MultiTypeMessageHandlerFactory) factory).getMessageTypes());\n       }\n     } else {\n       if (!factory.getMessageType().equals(type)) {\n         throw new HelixException(\n-            \"Message factory type mismatch. Type: \" + type + \", factory: \" + factory.getMessageType());\n+            \"Message factory type mismatch. Type: \" + type + \", factory: \" + factory\n+                .getMessageType());", "originalCommit": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjI4Nw==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513732287", "bodyText": "This PR is all about non-essential changes that are the preparation for the real business logic changes later.\nNon-essential does not mean we are not going to do it.", "author": "jiajunwang", "createdAt": "2020-10-28T20:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTA2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MzA0MA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513783040", "bodyText": "We can use putIfAbsent since we are not using the return value anymore here.", "author": "junkaixue", "createdAt": "2020-10-28T21:50:06Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -192,43 +191,38 @@ public void registerMessageHandlerFactory(String type, MessageHandlerFactory fac\n   @Override\n   public void registerMessageHandlerFactory(String type, MessageHandlerFactory factory,\n       int threadpoolSize) {\n-    if (factory instanceof  MultiTypeMessageHandlerFactory) {\n+    if (factory instanceof MultiTypeMessageHandlerFactory) {\n       if (!((MultiTypeMessageHandlerFactory) factory).getMessageTypes().contains(type)) {\n         throw new HelixException(\"Message factory type mismatch. Type: \" + type + \", factory: \"\n             + ((MultiTypeMessageHandlerFactory) factory).getMessageTypes());\n       }\n     } else {\n       if (!factory.getMessageType().equals(type)) {\n         throw new HelixException(\n-            \"Message factory type mismatch. Type: \" + type + \", factory: \" + factory.getMessageType());\n+            \"Message factory type mismatch. Type: \" + type + \", factory: \" + factory\n+                .getMessageType());\n       }\n     }\n \n     _isShuttingDown = false;\n \n-    MsgHandlerFactoryRegistryItem newItem = new MsgHandlerFactoryRegistryItem(factory, threadpoolSize);\n+    MsgHandlerFactoryRegistryItem newItem =\n+        new MsgHandlerFactoryRegistryItem(factory, threadpoolSize);\n     MsgHandlerFactoryRegistryItem prevItem = _hdlrFtyRegistry.putIfAbsent(type, newItem);\n     if (prevItem == null) {\n-      ExecutorService newPool = Executors.newFixedThreadPool(threadpoolSize, new ThreadFactory() {\n-        @Override public Thread newThread(Runnable r) {\n-          return new Thread(r, \"HelixTaskExecutor-message_handle_thread_\" + thread_uid.getAndIncrement());\n-        }\n-      });\n-      ExecutorService prevExecutor = _executorMap.putIfAbsent(type, newPool);\n-      if (prevExecutor != null) {\n-        LOG.warn(\"Skip creating a new thread pool for type: \" + type + \", already existing pool: \"\n-            + prevExecutor + \", isShutdown: \" + prevExecutor.isShutdown());\n-        newPool.shutdown();\n-        newPool = null;\n-      } else {\n+      _executorMap.computeIfAbsent(type, msgType -> {", "originalCommit": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTQ5NA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513809494", "bodyText": "putIfAbsent is not good since you will need to create the new pool, check, then close the new pool if there is already an existing one.\nThis is what I optimized here.\ncomputeIfAbsent won't trigger the compute callback if the key already exists.", "author": "jiajunwang", "createdAt": "2020-10-28T22:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MzA0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTAwOQ==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513785009", "bodyText": "nit: better to name it as isNoOpMessage? The word check could be confusing here.", "author": "junkaixue", "createdAt": "2020-10-28T21:54:10Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -997,30 +873,186 @@ public void onMessage(String instanceName, List<Message> messages,\n       }\n     }\n \n-    // update message state to READ in batch and schedule all read messages\n+    // update message state to READ in batch and schedule tasks for all read messages\n     if (readMsgs.size() > 0) {\n       updateMessageState(readMsgs, accessor, instanceName);\n \n-      // Remove message if schedule tasks are failed.\n       for (Map.Entry<String, MessageHandler> handlerEntry : stateTransitionHandlers.entrySet()) {\n         MessageHandler handler = handlerEntry.getValue();\n         NotificationContext context = stateTransitionContexts.get(handlerEntry.getKey());\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n-        }\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n       }\n \n       for (int i = 0; i < nonStateTransitionHandlers.size(); i++) {\n         MessageHandler handler = nonStateTransitionHandlers.get(i);\n         NotificationContext context = nonStateTransitionContexts.get(i);\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Inspect the message. Report and remove it if no operation needs to be done.\n+   * @param message\n+   * @param instanceName\n+   * @param changeContext\n+   * @param manager\n+   * @param sessionId\n+   * @param stateTransitionHandlers\n+   * @return True if the message is no-op message and no other process step is required.\n+   */\n+  private boolean checkForNoOpMessage(Message message, String instanceName,", "originalCommit": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgwOTc5NA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513809794", "bodyText": "This method is now also cleaning up the message, and it is not easy to move the logic out. So I prefer not calling it as an isXXXX method.", "author": "jiajunwang", "createdAt": "2020-10-28T22:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxNDM5NA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513814394", "bodyText": "Changed to checkAndProcessNoOpMessage", "author": "jiajunwang", "createdAt": "2020-10-28T23:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4NTAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 2440fb710..b039afd43 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -901,7 +901,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n    * @param stateTransitionHandlers\n    * @return True if the message is no-op message and no other process step is required.\n    */\n-  private boolean checkForNoOpMessage(Message message, String instanceName,\n+  private boolean checkAndProcessNoOpMessage(Message message, String instanceName,\n       NotificationContext changeContext, HelixManager manager, String sessionId,\n       Map<String, MessageHandler> stateTransitionHandlers) {\n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDIwMA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513794200", "bodyText": "This is not just check noOp, it also has other functionalities, check message expired or cancellation logic. Shall we change the name of this one?\nMore importantly, any exception thrown out here without statemodel marked as ERROR can cause controller sending another message repeatedly. Can you this invariant to the comment? So later if someone not familiar with this code can understand the intention here.", "author": "kaisun2000", "createdAt": "2020-10-28T22:15:18Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -997,30 +873,186 @@ public void onMessage(String instanceName, List<Message> messages,\n       }\n     }\n \n-    // update message state to READ in batch and schedule all read messages\n+    // update message state to READ in batch and schedule tasks for all read messages\n     if (readMsgs.size() > 0) {\n       updateMessageState(readMsgs, accessor, instanceName);\n \n-      // Remove message if schedule tasks are failed.\n       for (Map.Entry<String, MessageHandler> handlerEntry : stateTransitionHandlers.entrySet()) {\n         MessageHandler handler = handlerEntry.getValue();\n         NotificationContext context = stateTransitionContexts.get(handlerEntry.getKey());\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n-        }\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n       }\n \n       for (int i = 0; i < nonStateTransitionHandlers.size(); i++) {\n         MessageHandler handler = nonStateTransitionHandlers.get(i);\n         NotificationContext context = nonStateTransitionContexts.get(i);\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Inspect the message. Report and remove it if no operation needs to be done.\n+   * @param message\n+   * @param instanceName\n+   * @param changeContext\n+   * @param manager\n+   * @param sessionId\n+   * @param stateTransitionHandlers\n+   * @return True if the message is no-op message and no other process step is required.\n+   */\n+  private boolean checkForNoOpMessage(Message message, String instanceName,", "originalCommit": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxMDc5Nw==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513810797", "bodyText": "Any suggestion regarding the name? I feel \"checkAndProcessNoOpMessage\" is too long. But maybe that's what we need.\nRegarding your 2nd comment, could you please point out the potential code that throws Exception? I will take care of that in the following PR. We won't change any business logic in this one.", "author": "jiajunwang", "createdAt": "2020-10-28T22:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg0MjAzMg==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513842032", "bodyText": "Right now, the code is actually within a big try{} block. the catch block would remove message. I know in the next diff you will do more magic to make sure when this method exit, they must be a statemodel with some state. Currently, there is no logic error (probably the only thing is the first line of getHelixDataAcessor() is one is super picky). However, state this variant would help later developers to understand the reasoning here. So I think it would be a good idea to have a comment here.", "author": "kaisun2000", "createdAt": "2020-10-29T00:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDIwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk0MTQ5MQ==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513941491", "bodyText": "Depends on the solution, we might need to comment on this logic from a different perspective. I'm not convinced by now that we shall return the statemodel. And the logic here is not only for state transition messages only. So comment here will introduce more confusion.\nI prefer to make the existing logic clean enough first. I will add a comment if necessary when on the real fix.", "author": "jiajunwang", "createdAt": "2020-10-29T04:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDIwMA=="}], "type": "inlineReview", "revised_code": {"commit": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 2440fb710..b039afd43 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -901,7 +901,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n    * @param stateTransitionHandlers\n    * @return True if the message is no-op message and no other process step is required.\n    */\n-  private boolean checkForNoOpMessage(Message message, String instanceName,\n+  private boolean checkAndProcessNoOpMessage(Message message, String instanceName,\n       NotificationContext changeContext, HelixManager manager, String sessionId,\n       Map<String, MessageHandler> stateTransitionHandlers) {\n     HelixDataAccessor accessor = manager.getHelixDataAccessor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDYzMg==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513794632", "bodyText": "why remove these two lines?", "author": "kaisun2000", "createdAt": "2020-10-28T22:16:19Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -810,164 +799,52 @@ public void onMessage(String instanceName, List<Message> messages,\n     Set<String> createCurStateNames = new HashSet<>();\n \n     for (Message message : messages) {\n-      try {\n-        // nop messages are simply removed. It is used to trigger onMessage() in\n-        // situations such as register a new message handler factory\n-        if (message.getMsgType().equalsIgnoreCase(MessageType.NO_OP.toString())) {\n-          LOG.info(\n-              \"Dropping NO-OP message. mid: \" + message.getId() + \", from: \" + message.getMsgSrc());\n-          reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.DISCARDED);\n-          continue;\n-        }\n-\n-        String tgtSessionId = message.getTgtSessionId();\n-        // sessionId mismatch normally means message comes from expired session, just remove it\n-        if (!sessionId.equals(tgtSessionId) && !tgtSessionId.equals(\"*\")) {\n-          String warningMessage =\n-              \"SessionId does NOT match. expected sessionId: \" + sessionId\n-                  + \", tgtSessionId in message: \" + tgtSessionId + \", messageId: \"\n-                  + message.getMsgId();\n-          LOG.warn(warningMessage);\n-          reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.DISCARDED);\n-          _statusUpdateUtil.logWarning(message, HelixStateMachineEngine.class, warningMessage, manager);\n-\n-          // Proactively send a session sync message from participant to controller\n-          // upon session mismatch after a new session is established\n-          if (manager.getInstanceType() == InstanceType.PARTICIPANT\n-              || manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT) {\n-            if (message.getCreateTimeStamp() > manager.getSessionStartTime()) {\n-              syncSessionToController(manager);\n-            }\n-          }\n-          continue;\n-        }\n-\n-        if ((manager.getInstanceType() == InstanceType.CONTROLLER\n-            || manager.getInstanceType() == InstanceType.CONTROLLER_PARTICIPANT)\n-            && MessageType.PARTICIPANT_SESSION_CHANGE.name().equals(message.getMsgType())) {\n-          LOG.info(String.format(\"Controller received PARTICIPANT_SESSION_CHANGE msg from src: %s\",\n-              message.getMsgSrc()));\n-          PropertyKey key = new Builder(manager.getClusterName()).liveInstances();\n-          List<LiveInstance> liveInstances =\n-              manager.getHelixDataAccessor().getChildValues(key, true);\n-          _controller.onLiveInstanceChange(liveInstances, changeContext);\n-          reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.COMPLETED);\n-          continue;\n-        }\n-\n-        // don't process message that is of READ or UNPROCESSABLE state\n-        if (MessageState.NEW != message.getMsgState()) {\n-          // It happens because we don't delete message right after\n-          // read. Instead we keep it until the current state is updated.\n-          // We will read the message again if there is a new message but we\n-          // check for the status and ignore if its already read\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Message already read. msgId: \" + message.getMsgId());\n-          }\n-          continue;\n-        }\n-\n-        if (message.isExpired()) {\n-          LOG.info(\n-              \"Dropping expired message. mid: \" + message.getId() + \", from: \" + message.getMsgSrc()\n-                  + \" relayed from: \" + message.getRelaySrcHost());\n-          reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.DISCARDED);\n-          continue;\n-        }\n-\n-        // State Transition Cancellation\n-        if (message.getMsgType().equals(MessageType.STATE_TRANSITION_CANCELLATION.name())) {\n-          boolean success = cancelNotStartedStateTransition(message, stateTransitionHandlers, accessor, instanceName);\n-          if (success) {\n-            continue;\n-          }\n-        }\n-\n-        _monitor.reportReceivedMessage(message);\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to process the message {}. Deleting the message from ZK. Exception: {}\",\n-            message, e);\n-        removeMessageFromTaskAndFutureMap(message);\n-        removeMessageFromZK(accessor, message, instanceName);\n+      if (checkForNoOpMessage(message, instanceName, changeContext, manager, sessionId,\n+          stateTransitionHandlers)) {\n+        // skip the following operations for the no-op messages.\n         continue;\n       }\n-\n       // create message handlers, if handlers not found, leave its state as NEW\n       NotificationContext msgWorkingContext = changeContext.clone();\n       try {\n-        MessageHandler createHandler = createMessageHandler(message, msgWorkingContext);\n-        if (createHandler == null) {\n+        MessageHandler msgHandler = createMessageHandler(message, msgWorkingContext);\n+        if (msgHandler == null) {\n+          // Failed to create message handler, skip processing this message in this callback.\n+          // The same message process will be retried in the next round.\n           continue;\n         }\n         if (message.getMsgType().equals(MessageType.STATE_TRANSITION.name()) || message.getMsgType()\n             .equals(MessageType.STATE_TRANSITION_CANCELLATION.name())) {\n-          String messageTarget =\n-              getMessageTarget(message.getResourceName(), message.getPartitionName());\n-\n-          if (message.getMsgType().equals(MessageType.STATE_TRANSITION.name())\n-              && isStateTransitionInProgress(messageTarget)) {\n-\n-            String taskId = _messageTaskMap.get(messageTarget);\n-            Message msg = _taskMap.get(taskId).getTask().getMessage();\n-\n-            // If there is another state transition for same partition is going on,\n-            // discard the message. Controller will resend if this is a valid message\n-            String errMsg = String.format(\n-                \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n-                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n-                System.currentTimeMillis(), message.getFromState(), message.getToState());\n-            handleUnprocessableMessage(message, null /* exception */, errMsg, accessor,\n-                instanceName, manager);\n-            continue;\n-          }\n-          if (createHandler instanceof HelixStateTransitionHandler) {\n-            // We only check to state if there is no ST task scheduled/executing.\n-            HelixStateTransitionHandler.StaleMessageValidateResult result =\n-                ((HelixStateTransitionHandler) createHandler).staleMessageValidator();\n-            if (!result.isValid) {\n-              handleUnprocessableMessage(message, null /* exception */,\n-                  result.exception.getMessage(), accessor, instanceName, manager);\n-              continue;\n-            }\n-          }\n-          if (stateTransitionHandlers.containsKey(messageTarget)) {\n-            // If there are 2 messages in same batch about same partition's state transition,\n-            // the later one is discarded\n-            Message duplicatedMessage = stateTransitionHandlers.get(messageTarget)._message;\n-            String errMsg = String.format(\n-                \"Duplicated state transition message: %s. Existing: %s->%s; New (Discarded): %s->%s\",\n-                message.getMsgId(), duplicatedMessage.getFromState(),\n-                duplicatedMessage.getToState(), message.getFromState(), message.getToState());\n-            handleUnprocessableMessage(message, null /* exception */, errMsg, accessor,\n-                instanceName, manager);\n+          if (validateStateTransitionMessage(message, instanceName, manager,\n+              stateTransitionHandlers, msgHandler)) {\n+            // Need future process by triggering state transition\n+            String msgTarget =\n+                getMessageTarget(message.getResourceName(), message.getPartitionName());\n+            stateTransitionHandlers.put(msgTarget, msgHandler);\n+            stateTransitionContexts.put(msgTarget, msgWorkingContext);\n+          } else {\n+            // skip the following operations for the invalid/expired state transition messages.\n             continue;\n           }\n-\n-          stateTransitionHandlers\n-              .put(getMessageTarget(message.getResourceName(), message.getPartitionName()),\n-                  createHandler);\n-          stateTransitionContexts\n-              .put(getMessageTarget(message.getResourceName(), message.getPartitionName()),\n-                  msgWorkingContext);\n         } else {\n-          nonStateTransitionHandlers.add(createHandler);\n+          // Need future process non state transition messages by triggering the handler\n+          nonStateTransitionHandlers.add(msgHandler);\n           nonStateTransitionContexts.add(msgWorkingContext);\n         }\n       } catch (Exception e) {\n         handleUnprocessableMessage(message, e, e.getMessage(), accessor, instanceName, manager);\n         continue;\n       }\n \n-      markReadMessage(message, msgWorkingContext, manager);\n-      readMsgs.add(message);\n-", "originalCommit": "0777cd369d48fba480ac9ffb7e0b309fda7540ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgxMTA0NQ==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513811045", "bodyText": "Nothing being removed.", "author": "jiajunwang", "createdAt": "2020-10-28T22:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc5NDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 2440fb710..b039afd43 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -799,7 +799,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n     Set<String> createCurStateNames = new HashSet<>();\n \n     for (Message message : messages) {\n-      if (checkForNoOpMessage(message, instanceName, changeContext, manager, sessionId,\n+      if (checkAndProcessNoOpMessage(message, instanceName, changeContext, manager, sessionId,\n           stateTransitionHandlers)) {\n         // skip the following operations for the no-op messages.\n         continue;\n"}}, {"oid": "6ea105430205475ea9b97f4182564f6719aa5045", "url": "https://github.com/apache/helix/commit/6ea105430205475ea9b97f4182564f6719aa5045", "message": "Refine the HelixTaskExecutor to reduce duplicate code and clarify the code structure.\n\nThere is minor code logic change for optimization. But there is no business logic change in this PR.", "committedDate": "2020-10-29T00:36:33Z", "type": "commit"}, {"oid": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "url": "https://github.com/apache/helix/commit/78fb311b83fcc0e6365fc9212711795d62cc3e2c", "message": "Address comment.", "committedDate": "2020-10-29T00:36:33Z", "type": "commit"}, {"oid": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "url": "https://github.com/apache/helix/commit/78fb311b83fcc0e6365fc9212711795d62cc3e2c", "message": "Address comment.", "committedDate": "2020-10-29T00:36:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDAzOA==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513854038", "bodyText": "nit, put this line also into try{} block.", "author": "kaisun2000", "createdAt": "2020-10-29T01:17:59Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -997,30 +873,186 @@ public void onMessage(String instanceName, List<Message> messages,\n       }\n     }\n \n-    // update message state to READ in batch and schedule all read messages\n+    // update message state to READ in batch and schedule tasks for all read messages\n     if (readMsgs.size() > 0) {\n       updateMessageState(readMsgs, accessor, instanceName);\n \n-      // Remove message if schedule tasks are failed.\n       for (Map.Entry<String, MessageHandler> handlerEntry : stateTransitionHandlers.entrySet()) {\n         MessageHandler handler = handlerEntry.getValue();\n         NotificationContext context = stateTransitionContexts.get(handlerEntry.getKey());\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n-        }\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n       }\n \n       for (int i = 0; i < nonStateTransitionHandlers.size(); i++) {\n         MessageHandler handler = nonStateTransitionHandlers.get(i);\n         NotificationContext context = nonStateTransitionContexts.get(i);\n-        Message msg = handler._message;\n-        if (!scheduleTask(new HelixTask(msg, context, handler, this))) {\n-          removeMessageFromTaskAndFutureMap(msg);\n-          removeMessageFromZK(accessor, msg, instanceName);\n+        scheduleTaskForMessage(instanceName, accessor, handler, context);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Inspect the message. Report and remove it if no operation needs to be done.\n+   * @param message\n+   * @param instanceName\n+   * @param changeContext\n+   * @param manager\n+   * @param sessionId\n+   * @param stateTransitionHandlers\n+   * @return True if the message is no-op message and no other process step is required.\n+   */\n+  private boolean checkAndProcessNoOpMessage(Message message, String instanceName,\n+      NotificationContext changeContext, HelixManager manager, String sessionId,\n+      Map<String, MessageHandler> stateTransitionHandlers) {\n+    HelixDataAccessor accessor = manager.getHelixDataAccessor();", "originalCommit": "78fb311b83fcc0e6365fc9212711795d62cc3e2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkzNTQ3Mg==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513935472", "bodyText": "If this fails, meaning we lost ZK connection and the wait is timed out. In this case, I think it would be better to throw the exception instead of proceeding. The handleUnprocessableMessage will fail too due to ZK connection breaks.", "author": "jiajunwang", "createdAt": "2020-10-29T03:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk0MjE4Mw==", "url": "https://github.com/apache/helix/pull/1489#discussion_r513942183", "bodyText": "One more point why we should not change it, moving this line into the try-catch block changes the business logic.", "author": "jiajunwang", "createdAt": "2020-10-29T04:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NzMwMw==", "url": "https://github.com/apache/helix/pull/1489#discussion_r514547303", "bodyText": "public HelixDataAccessor getHelixDataAccessor() {\n    checkConnected(_waitForConnectedTimeout);\n    return _dataAccessor;\n  }\n\nif somehow the _zkClient is closed, the above code would throw exception, which would cause the same issue of repeatedly controller sending messages.\nNote, with new change to statusUpdateUtil, we won't really use _zkClient from ZKHelixManager to write to Zookeeper.\nIn sum, I think the core idea (invariant) is that don't throw anything out from this method. Anyway, up to you.", "author": "kaisun2000", "createdAt": "2020-10-29T20:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1MjUyMQ==", "url": "https://github.com/apache/helix/pull/1489#discussion_r514552521", "bodyText": "This specific case won't cause retry, since the message won't be removed when zkclient is down.\nstatusUpdateUtil is a different story. It should be considered in different PRs.\nBased on what we discussed today with @dasahcc and @lei-xia , we agreed that it is not ideal or applicable for us to eliminate all potential Exceptions. And leave the message in any of the Exception cases is dangerous, IMO.\nSo we will take this case by case.\nIn the following PRs, we will ensure all the Exceptions of application code (behind the interfaces) will be handled gracefully. But our internal logic exceptions will be evaluated one by one in other PRs, if necessary.", "author": "jiajunwang", "createdAt": "2020-10-29T20:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDAzOA=="}], "type": "inlineReview", "revised_code": null}]}