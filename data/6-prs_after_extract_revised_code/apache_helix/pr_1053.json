{"pr_number": 1053, "pr_title": "Fix test testDropInstance", "pr_createdAt": "2020-06-03T02:49:54Z", "pr_url": "https://github.com/apache/helix/pull/1053", "timeline": [{"oid": "eb60cb0ff836b5c4e82a9db1b7b6d398db11f752", "url": "https://github.com/apache/helix/commit/eb60cb0ff836b5c4e82a9db1b7b6d398db11f752", "message": "Fix test testDropInstance", "committedDate": "2020-06-03T02:41:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4Nzk5Ng==", "url": "https://github.com/apache/helix/pull/1053#discussion_r434287996", "bodyText": "Nit: usually a good idea to add a TestHelper.verify() to make sure the cluster has been dropped. This is recommended.", "author": "narendly", "createdAt": "2020-06-03T03:29:37Z", "path": "helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java", "diffHunk": "@@ -356,51 +360,57 @@ public void testDropInstance() throws Exception {\n         \"MasterSlave\", true); // do rebalance\n \n     // add fake liveInstance\n-    ZKHelixDataAccessor accessor =\n-        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(ZK_ADDR));\n-    Builder keyBuilder = new Builder(clusterName);\n-    LiveInstance liveInstance = new LiveInstance(\"localhost_12918\");\n-    liveInstance.setSessionId(\"session_0\");\n-    liveInstance.setHelixVersion(\"version_0\");\n-    accessor.setProperty(keyBuilder.liveInstance(\"localhost_12918\"), liveInstance);\n+    HelixDataAccessor accessor = new ZKHelixDataAccessor(clusterName,\n+        new ZkBaseDataAccessor.Builder<ZNRecord>()\n+            .setRealmMode(RealmAwareZkClient.RealmMode.SINGLE_REALM)\n+            .setZkClientType(ZkBaseDataAccessor.ZkClientType.DEDICATED)\n+            .setZkAddress(ZK_ADDR)\n+            .build());\n \n-    // drop without stop the process, should throw exception\n     try {\n-      ClusterSetup.processCommandLineArgs(new String[] {\n-          \"--zkSvr\", ZK_ADDR, \"--dropNode\", clusterName, \"localhost:12918\"\n-      });\n-      Assert.fail(\"Should throw exception since localhost_12918 is still in LIVEINSTANCES/\");\n-    } catch (Exception e) {\n-      // OK\n+      Builder keyBuilder = new Builder(clusterName);\n+      LiveInstance liveInstance = new LiveInstance(instanceName);\n+      liveInstance.setSessionId(\"session_0\");\n+      liveInstance.setHelixVersion(\"version_0\");\n+      accessor.setProperty(keyBuilder.liveInstance(instanceName), liveInstance);\n+\n+      // Drop instance without stopping the live instance, should throw HelixException\n+      try {\n+        ClusterSetup.processCommandLineArgs(\n+            new String[]{\"--zkSvr\", ZK_ADDR, \"--dropNode\", clusterName, instanceAddress});\n+        Assert.fail(\"Should throw exception since localhost_12918 is still in LIVEINSTANCES/\");\n+      } catch (HelixException expected) {\n+        Assert.assertEquals(expected.getMessage(),\n+            \"Cannot drop instance \" + instanceName + \" as it is still live. Please stop it first\");\n+      }\n+      accessor.removeProperty(keyBuilder.liveInstance(instanceName));\n+\n+      // drop without disable, should throw exception\n+      try {\n+        ClusterSetup.processCommandLineArgs(\n+            new String[]{\"--zkSvr\", ZK_ADDR, \"--dropNode\", clusterName, instanceAddress});\n+        Assert.fail(\"Should throw exception since \" + instanceName + \" is enabled\");\n+      } catch (HelixException expected) {\n+        Assert.assertEquals(expected.getMessage(),\n+            \"Node \" + instanceName + \" is enabled, cannot drop\");\n+      }\n+\n+      // Disable the instance\n+      ClusterSetup.processCommandLineArgs(\n+          new String[]{\"--zkSvr\", ZK_ADDR, \"--enableInstance\", clusterName, instanceName, \"false\"});\n+      // Drop the instance\n+      ClusterSetup.processCommandLineArgs(\n+          new String[]{\"--zkSvr\", ZK_ADDR, \"--dropNode\", clusterName, instanceAddress});\n+\n+      Assert.assertNull(accessor.getProperty(keyBuilder.instanceConfig(instanceName)),\n+          \"Instance config should be dropped\");\n+      Assert.assertFalse(_gZkClient.exists(PropertyPathBuilder.instance(clusterName, instanceName)),\n+          \"Instance/host should be dropped\");\n+    } finally {\n+      // Have to close the dedicated zkclient in accessor to avoid zkclient leakage.\n+      accessor.getBaseDataAccessor().close();\n+      TestHelper.dropCluster(clusterName, _gZkClient);", "originalCommit": "eb60cb0ff836b5c4e82a9db1b7b6d398db11f752", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDQxOA==", "url": "https://github.com/apache/helix/pull/1053#discussion_r434294418", "bodyText": "Verified and updated.", "author": "huizhilu", "createdAt": "2020-06-03T03:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4Nzk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6feb10e1a662ba050ef04de89f165a52464114aa", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java b/helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\nindex 12f1a017d..433ab911a 100644\n--- a/helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n+++ b/helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java\n\n@@ -410,6 +410,14 @@ public class TestClusterSetup extends ZkUnitTestBase {\n       // Have to close the dedicated zkclient in accessor to avoid zkclient leakage.\n       accessor.getBaseDataAccessor().close();\n       TestHelper.dropCluster(clusterName, _gZkClient);\n+\n+      // Verify the cluster has been dropped.\n+      Assert.assertTrue(TestHelper.verify(() -> {\n+        if (_gZkClient.exists(\"/\" + clusterName)) {\n+          TestHelper.dropCluster(clusterName, _gZkClient);\n+        }\n+        return true;\n+      }, TestHelper.WAIT_DURATION));\n     }\n \n     System.out.println(\"END \" + clusterName + \" at \" + new Date(System.currentTimeMillis()));\n"}}, {"oid": "6feb10e1a662ba050ef04de89f165a52464114aa", "url": "https://github.com/apache/helix/commit/6feb10e1a662ba050ef04de89f165a52464114aa", "message": "Verify cluster has been dropped", "committedDate": "2020-06-03T03:57:37Z", "type": "commit"}, {"oid": "06dc161aa23cd5b1c0255256991f5a7febac6b09", "url": "https://github.com/apache/helix/commit/06dc161aa23cd5b1c0255256991f5a7febac6b09", "message": "Verify live instance creation", "committedDate": "2020-06-03T04:29:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2MzY2Mg==", "url": "https://github.com/apache/helix/pull/1053#discussion_r434663662", "bodyText": "Does this mean if user constructs a ZKHelixDataAccessor with a ZK-ADDR, they can create an ephemeral node before, but not anymore after they bump to 1.0.0?", "author": "lei-xia", "createdAt": "2020-06-03T15:39:51Z", "path": "helix-core/src/test/java/org/apache/helix/tools/TestClusterSetup.java", "diffHunk": "@@ -356,51 +360,65 @@ public void testDropInstance() throws Exception {\n         \"MasterSlave\", true); // do rebalance\n \n     // add fake liveInstance\n-    ZKHelixDataAccessor accessor =\n-        new ZKHelixDataAccessor(clusterName, new ZkBaseDataAccessor<ZNRecord>(ZK_ADDR));", "originalCommit": "06dc161aa23cd5b1c0255256991f5a7febac6b09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDAyOQ==", "url": "https://github.com/apache/helix/pull/1053#discussion_r434794029", "bodyText": "@lei-xia No, it doesn't. Before 1.0.0, a ZKHelixDataAccessor with a ZK-ADDR is not able to create an ephemeral node, either. It is also by default using a shared zkclient internally. The only difference is the type of exceptions: before 1.0.0, HelixException is thrown from sharedZkClient, while in 1.0.0, UnsupportedOperationException is thrown.\nThe root cause for this test is, even though a live instance(ephemeral node) is not created by the ZKHelixDataAccessor with a ZK-ADDR, the test still passes, because the test doesn't catch or verify the correct result.", "author": "huizhilu", "createdAt": "2020-06-03T19:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2MzY2Mg=="}], "type": "inlineReview", "revised_code": null}]}