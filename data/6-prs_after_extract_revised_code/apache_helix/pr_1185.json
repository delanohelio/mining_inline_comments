{"pr_number": 1185, "pr_title": "Fix ZkHelixClusterVerifier related resource leakage", "pr_createdAt": "2020-07-29T00:48:40Z", "pr_url": "https://github.com/apache/helix/pull/1185", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTA3Mw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r462079073", "bodyText": "@kaisun2000 Could you rebase this PR with master?", "author": "huizhilu", "createdAt": "2020-07-29T06:56:41Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java", "diffHunk": "@@ -120,6 +122,41 @@ public void handle() {\n     }\n   }\n \n+  public static class SyncCallbackHandler extends DefaultCallback implements AsyncCallback.VoidCallback {", "originalCommit": "bf8abba3d01aa0623c3d289426708f3f9997b66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NDY5Mw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r463244693", "bodyText": "rebased.", "author": "kaisun2000", "createdAt": "2020-07-30T20:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fcd46eb8cb801086c4c3e44d7463c5af1d19b172", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java\nindex 228bcaedf..d1275752e 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/callback/ZkAsyncCallbacks.java\n\n@@ -143,13 +143,11 @@ public class ZkAsyncCallbacks {\n     @Override\n     protected boolean needRetry(int rc) {\n       try {\n-        switch (KeeperException.Code.get(rc)) {\n-          /** Connection to the server has been lost */\n-          case CONNECTIONLOSS:\n-            return true;\n-          default:\n-            return false;\n-        }\n+        // Connection to the server has been lost\n+        if (KeeperException.Code.get(rc) == Code.CONNECTIONLOSS) {\n+          return true;\n+        } \n+        return false;\n       } catch (ClassCastException | NullPointerException ex) {\n         LOG.error(\"Session {} failed to handle unknown return code {}. Skip retrying. ex {}\",\n             _sessionId, rc, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg==", "url": "https://github.com/apache/helix/pull/1185#discussion_r462080702", "bodyText": "It seems this log is for your debugging. Do we want to remove it then?", "author": "huizhilu", "createdAt": "2020-07-29T07:00:08Z", "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -74,7 +81,8 @@ public void syncStart() {\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n+        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "originalCommit": "bf8abba3d01aa0623c3d289426708f3f9997b66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIxNTYyNw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r463215627", "bodyText": "No, we don't. We specifically need this. This is a building block to identify leakage.", "author": "kaisun2000", "createdAt": "2020-07-30T19:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxOTExNg==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465419116", "bodyText": "What's the usage of stacktrace? If this is for human debug, I would suggest making it debug log.", "author": "jiajunwang", "createdAt": "2020-08-05T01:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyOTM1MQ==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465429351", "bodyText": "This is testing code. Make it info won't pollute log. Will change to debug anyway.", "author": "kaisun2000", "createdAt": "2020-08-05T02:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MDcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java b/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\nindex 74705f217..98e68822b 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\n\n@@ -81,8 +74,7 @@ public class ClusterManager extends ZKHelixManager implements Runnable, ZkTestMa\n \n     _watcher = new Thread(this);\n     _watcher.setName(String\n-        .format(\"ClusterManager_Watcher_%s_%s_%s_%d\", _clusterName, _instanceName, _type.name(), _uid));\n-    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} started, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());\n+        .format(\"ClusterManager_Watcher_%s_%s_%s\", _clusterName, _instanceName, _type.name()));\n     _watcher.start();\n \n     try {\n"}}, {"oid": "27d985b183c55332c1c1d87fcf2d0a70cd4f7618", "url": "https://github.com/apache/helix/commit/27d985b183c55332c1c1d87fcf2d0a70cd4f7618", "message": "Eliminate resource leak related to ZkHelixClusterVerifier (#1184)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request address\nthis issue.", "committedDate": "2020-07-30T20:09:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNzQ3MA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465417470", "bodyText": "AfterSuite is done after all test classes have been executed. So if you attach the class name, it won't be very informative, IMHO. What's the usage of this log?", "author": "jiajunwang", "createdAt": "2020-08-05T01:22:45Z", "path": "helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java", "diffHunk": "@@ -200,6 +200,7 @@ private void startZooKeeper(int i)\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMTAwNg==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465431006", "bodyText": "Removed.", "author": "kaisun2000", "createdAt": "2020-08-05T02:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNzQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java b/helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java\nindex 6d6f0039e..0d9c6d28d 100644\n--- a/helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java\n+++ b/helix-core/src/test/java/org/apache/helix/common/ZkTestBase.java\n\n@@ -200,7 +200,6 @@ public class ZkTestBase {\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n-    System.out.println(\"afterSuite \" + getClass().getName());\n     // Clean up all JMX objects\n     for (ObjectName mbean : _server.queryNames(null, null)) {\n       try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODMxNw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465418317", "bodyText": "Just curious, why somewhere we use _gZkCLient, but other places we keep using the ZK_ADDR?\nIf this is because of the test creates more ZKServers, then will the people who add more verifiers with the raw address make more leakage later?", "author": "jiajunwang", "createdAt": "2020-08-05T01:25:34Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestDriver.java", "diffHunk": "@@ -246,7 +246,11 @@ public static void verifyCluster(String uniqClusterName, long beginTime, long ti\n \n     ZkHelixClusterVerifier verifier =\n         new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMTQ3NA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465431474", "bodyText": "Note, here, in TestDriver, we don't have _gZkClient as it is not a subclass of ZkTestBase.java", "author": "kaisun2000", "createdAt": "2020-08-05T02:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/TestDriver.java b/helix-core/src/test/java/org/apache/helix/integration/TestDriver.java\nindex 8d0e46e78..ba2f2d75a 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/TestDriver.java\n\n@@ -246,11 +246,7 @@ public class TestDriver {\n \n     ZkHelixClusterVerifier verifier =\n         new BestPossibleExternalViewVerifier.Builder(clusterName).setZkAddr(ZK_ADDR).build();\n-    try {\n-      Assert.assertTrue(verifier.verifyByPolling());\n-    } finally {\n-      verifier.close();\n-    }\n+    Assert.assertTrue(verifier.verifyByPolling());\n \n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODgyNw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465418827", "bodyText": "I don't think watcher is created here. It was created when sync start is called.", "author": "jiajunwang", "createdAt": "2020-08-05T01:27:37Z", "path": "helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java", "diffHunk": "@@ -51,6 +55,9 @@ protected ClusterManager(String zkAddr, String clusterName, String instanceName,\n     _clusterName = clusterName;\n     _instanceName = instanceName;\n     _type = type;\n+    _uid = UID.getAndIncrement();\n+\n+    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} created, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMjM2NA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465432364", "bodyText": "You are right. Originally, the idea is that sync_start time, you don't see which one is created as you want the creation context of the object, not the creation context of the starting thread. Later, it turned the two places are the same test class. so it does not really matter. Let me remove this one.", "author": "kaisun2000", "createdAt": "2020-08-05T02:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java b/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\nindex 74705f217..98e68822b 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/manager/ClusterManager.java\n\n@@ -55,9 +51,6 @@ public class ClusterManager extends ZKHelixManager implements Runnable, ZkTestMa\n     _clusterName = clusterName;\n     _instanceName = instanceName;\n     _type = type;\n-    _uid = UID.getAndIncrement();\n-\n-    LOG.info(\"ClusterManager_watcher_{}_{}_{}_{} created, stacktrace {}\", _clusterName, _instanceName, _type.name(), _uid, Thread.currentThread().getStackTrace());\n   }\n \n   public void syncStop() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425588", "bodyText": "This is not testing code, please be careful not to pollute the log in production. I think recording this info in the related thread would be good enough to support detecting leakage in test.", "author": "jiajunwang", "createdAt": "2020-08-05T01:52:26Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNDcwNA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465434704", "bodyText": "There are many time when I debugged, I wish to know where the zkclient is created when I look at the zkclient event thread logs. I think this is actually very useful. In fact, I would event want to add the _uid to each line of logs from Zkclient. It would save a lot time.", "author": "kaisun2000", "createdAt": "2020-08-05T02:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjQyNQ==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465436425", "bodyText": "Basically, for a log from a thread, such as ZkClient event thread or asycn retry thread, you have the thread id in the log. grepping thread id, you will find the _uid, grepping the _uid, you see the context of where the zkclient is created, such from zkhelixmanager or whatever other Helix java api. This is basically also the technique used to track the watcher leakage.\nThe log would not be excessive as only one zkclient creation has 3 more lines.\nFor now, let me change it to debug, if this is ok. We can discussed adding this thing to callbackhandler and zkclient later.", "author": "kaisun2000", "createdAt": "2020-08-05T02:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTg5Mw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445893", "bodyText": "removed.", "author": "kaisun2000", "createdAt": "2020-08-05T03:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\nindex 3ce260c9d..fa0b09b95 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n\n@@ -217,12 +206,6 @@ public class ZkClient implements Watcher {\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n-\n-    _uid = UID.getAndIncrement();\n-    if (LOG.isInfoEnabled()) {\n-      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());\n-    }\n-\n     _connection = zkConnection;\n     _pathBasedZkSerializer = zkSerializer;\n     _operationRetryTimeoutInMillis = operationRetryTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTcxNQ==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425715", "bodyText": "Same here", "author": "jiajunwang", "createdAt": "2020-08-05T01:52:53Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -215,13 +218,21 @@ protected ZkClient(IZkConnection zkConnection, int connectionTimeout, long opera\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n \n+    _uid = UID.getAndIncrement();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());\n+    }\n+\n     _connection = zkConnection;\n     _pathBasedZkSerializer = zkSerializer;\n     _operationRetryTimeoutInMillis = operationRetryTimeout;\n     _isNewSessionEventFired = false;\n \n     _asyncCallRetryThread = new ZkAsyncRetryThread(zkConnection.getServers());\n     _asyncCallRetryThread.start();\n+    if (LOG.isInfoEnabled()) {\n+      LOG.info(\"ZkClient created with _uid {}, _asyncCallRetryThread id {}\", _uid, _asyncCallRetryThread.getId());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTk0Mw==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445943", "bodyText": "changed to debug", "author": "kaisun2000", "createdAt": "2020-08-05T03:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\nindex 3ce260c9d..fa0b09b95 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n\n@@ -217,12 +206,6 @@ public class ZkClient implements Watcher {\n     if (zkConnection == null) {\n       throw new NullPointerException(\"Zookeeper connection is null!\");\n     }\n-\n-    _uid = UID.getAndIncrement();\n-    if (LOG.isInfoEnabled()) {\n-      LOG.info(\"ZkClient created with _uid {}, stacktrace {}\", _uid, Thread.currentThread().getStackTrace());\n-    }\n-\n     _connection = zkConnection;\n     _pathBasedZkSerializer = zkSerializer;\n     _operationRetryTimeoutInMillis = operationRetryTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTc0OA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465425748", "bodyText": "Same here", "author": "jiajunwang", "createdAt": "2020-08-05T01:52:59Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2157,6 +2166,8 @@ public void connect(final long maxMsToWaitUntilConnected, Watcher watcher)\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n       _eventThread.start();\n \n+      LOG.info(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTk4NA==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465445984", "bodyText": "changed to debug", "author": "kaisun2000", "createdAt": "2020-08-05T03:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\nindex 3ce260c9d..fa0b09b95 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java\n\n@@ -2166,8 +2148,6 @@ public class ZkClient implements Watcher {\n       _eventThread = new ZkEventThread(zkConnection.getServers());\n       _eventThread.start();\n \n-      LOG.info(\"ZkClient created with _uid {}, _eventThread {}\", _uid, _eventThread.getId());\n-\n       if (isManagingZkConnection()) {\n         zkConnection.connect(watcher);\n         LOG.debug(\"Awaiting connection to Zookeeper server\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzcyMQ==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465427721", "bodyText": "Same here, what's the usage of this output?", "author": "jiajunwang", "createdAt": "2020-08-05T02:00:02Z", "path": "helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java", "diffHunk": "@@ -76,6 +76,7 @@ public void beforeMethod() {\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n+    System.out.println(\"afterSuite \" + getClass().getName());", "originalCommit": "14cb3603449c0339a3390e667cf5e7957ede41db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzY4Ng==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465433686", "bodyText": "removed.", "author": "kaisun2000", "createdAt": "2020-08-05T02:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "chunk": "diff --git a/helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java b/helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java\nindex 4e6169c7b..ef80cf879 100644\n--- a/helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java\n+++ b/helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java\n\n@@ -76,7 +76,6 @@ public class TestZKHelixNonblockingLock extends ZkTestBase {\n \n   @AfterSuite\n   public void afterSuite() throws IOException {\n-    System.out.println(\"afterSuite \" + getClass().getName());\n     _lock.close();\n     super.afterSuite();\n   }\n"}}, {"oid": "e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "url": "https://github.com/apache/helix/commit/e9b0553f1f1248f70e4a2679ed8d2eda3cef9d76", "message": "Add sync() call first for new session handling (#1118)\n\nHelix may see stale data when session expires and get reconnected to\na slower ZKServer. This would cause various correctness problem.\nWe would call sync() to ZKserver first. This ensures Helix would\nnot see data that saw before.", "committedDate": "2020-08-05T19:45:02Z", "type": "commit"}, {"oid": "f4cc3b0db6529850983f36ba7943b10e8f94e72d", "url": "https://github.com/apache/helix/commit/f4cc3b0db6529850983f36ba7943b10e8f94e72d", "message": "blocking version.", "committedDate": "2020-08-05T19:45:53Z", "type": "commit"}, {"oid": "53bfd32662e8db9b4c2303c58ba5070516ce764f", "url": "https://github.com/apache/helix/commit/53bfd32662e8db9b4c2303c58ba5070516ce764f", "message": "leverage AsyncCallbacks pattern; rebased", "committedDate": "2020-08-05T19:46:01Z", "type": "commit"}, {"oid": "bb2c8c7c5cfedcfc97a5de948c1aba3546d006de", "url": "https://github.com/apache/helix/commit/bb2c8c7c5cfedcfc97a5de948c1aba3546d006de", "message": "some further refactor based on feedback.", "committedDate": "2020-08-05T19:46:01Z", "type": "commit"}, {"oid": "2209376c8b309b07966b1e66a527a22a2828df1f", "url": "https://github.com/apache/helix/commit/2209376c8b309b07966b1e66a527a22a2828df1f", "message": "treat sync() metric the same as Zk server metric", "committedDate": "2020-08-05T19:46:55Z", "type": "commit"}, {"oid": "e5b8543c167e22736f3d33ba3f77b64583437f80", "url": "https://github.com/apache/helix/commit/e5b8543c167e22736f3d33ba3f77b64583437f80", "message": "added tests", "committedDate": "2020-08-05T19:47:02Z", "type": "commit"}, {"oid": "fcd46eb8cb801086c4c3e44d7463c5af1d19b172", "url": "https://github.com/apache/helix/commit/fcd46eb8cb801086c4c3e44d7463c5af1d19b172", "message": "mintor style fix.", "committedDate": "2020-08-05T19:47:46Z", "type": "commit"}, {"oid": "34f24b6e592ca6b9d31d105b6746a7b8f9c4d11f", "url": "https://github.com/apache/helix/commit/34f24b6e592ca6b9d31d105b6746a7b8f9c4d11f", "message": "remove redundant params to issueSync()", "committedDate": "2020-08-05T19:47:51Z", "type": "commit"}, {"oid": "9814e570966487774393bf9e34e459aafd4d62dc", "url": "https://github.com/apache/helix/commit/9814e570966487774393bf9e34e459aafd4d62dc", "message": "some change based on huizhi's feedback.", "committedDate": "2020-08-05T19:47:51Z", "type": "commit"}, {"oid": "1b2f06de4221eb9f6ee87c40bb99b2c681e593cb", "url": "https://github.com/apache/helix/commit/1b2f06de4221eb9f6ee87c40bb99b2c681e593cb", "message": "change to make sure not understanding return code is logged.", "committedDate": "2020-08-05T19:47:51Z", "type": "commit"}, {"oid": "18946c737f8475fdde1d0c905f07c7695c976d82", "url": "https://github.com/apache/helix/commit/18946c737f8475fdde1d0c905f07c7695c976d82", "message": "Eliminate resource leak related to ZkHelixClusterVerifier (#1184)\n\nZkHelixClusterVerifier and its subclass built with ZK addres would\ncreate an internal ZkClient. Without properly closing the ZkClient\nor using global ZkClient in the test base. There would be four\nthreads and one ZooKeeper client object leaked. The leaked threads\nwould be in thousands and thus be one of the main contributor\npreventing the unit test from finishing. This pull request address\nthis issue.", "committedDate": "2020-08-05T19:49:59Z", "type": "commit"}, {"oid": "300c2c9c533d45d7714efa9b71dd7a375f8a2df0", "url": "https://github.com/apache/helix/commit/300c2c9c533d45d7714efa9b71dd7a375f8a2df0", "message": "invoke gc", "committedDate": "2020-08-05T19:50:03Z", "type": "commit"}, {"oid": "75f68e9da144f5035cc8b47ceb3afe606f1aeb6c", "url": "https://github.com/apache/helix/commit/75f68e9da144f5035cc8b47ceb3afe606f1aeb6c", "message": "stablize one test a little bit more if logging enabled. The gist\nis still verifier has timing issue. It may validate too early.", "committedDate": "2020-08-05T19:51:02Z", "type": "commit"}, {"oid": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520", "url": "https://github.com/apache/helix/commit/e797fb478a6bd00f95b9f0b362e8c1ac146d4520", "message": "change logging based on jj's feedback.", "committedDate": "2020-08-05T19:51:34Z", "type": "commit"}, {"oid": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520", "url": "https://github.com/apache/helix/commit/e797fb478a6bd00f95b9f0b362e8c1ac146d4520", "message": "change logging based on jj's feedback.", "committedDate": "2020-08-05T19:51:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NzA3Ng==", "url": "https://github.com/apache/helix/pull/1185#discussion_r465967076", "bodyText": "Remove?", "author": "jiajunwang", "createdAt": "2020-08-05T19:55:04Z", "path": "helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java", "diffHunk": "@@ -81,7 +81,8 @@ public void beforeClass() throws Exception {\n     _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n     _controller.syncStart();\n \n-    _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n+    //_clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();", "originalCommit": "e797fb478a6bd00f95b9f0b362e8c1ac146d4520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aed8703aee909c32b87033a5b2d87292d66d7089", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java b/helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java\nindex 52139260f..5843de1fc 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/common/ZkStandAloneCMTestBase.java\n\n@@ -80,8 +80,7 @@ public class ZkStandAloneCMTestBase extends ZkTestBase {\n     String controllerName = CONTROLLER_PREFIX + \"_0\";\n     _controller = new ClusterControllerManager(ZK_ADDR, CLUSTER_NAME, controllerName);\n     _controller.syncStart();\n-\n-    //_clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkAddr(ZK_ADDR).build();\n+    \n     _clusterVerifier = new BestPossibleExternalViewVerifier.Builder(CLUSTER_NAME).setZkClient(_gZkClient).build();\n     Assert.assertTrue(_clusterVerifier.verifyByPolling());\n \n"}}, {"oid": "6cd79e2a4c5b961b832b05f48866d0067a722ecb", "url": "https://github.com/apache/helix/commit/6cd79e2a4c5b961b832b05f48866d0067a722ecb", "message": "remove accidentally added log", "committedDate": "2020-08-05T19:59:19Z", "type": "commit"}, {"oid": "aed8703aee909c32b87033a5b2d87292d66d7089", "url": "https://github.com/apache/helix/commit/aed8703aee909c32b87033a5b2d87292d66d7089", "message": "remove comments", "committedDate": "2020-08-05T20:04:35Z", "type": "commit"}]}