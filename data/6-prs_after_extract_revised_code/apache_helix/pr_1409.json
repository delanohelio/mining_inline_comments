{"pr_number": 1409, "pr_title": "Add Builder to ZKDistributedNonblockingLock to enable ZooScalability use", "pr_createdAt": "2020-09-25T19:35:16Z", "pr_url": "https://github.com/apache/helix/pull/1409", "timeline": [{"oid": "e553702758a189c7004f47ead8c80224fdddad6e", "url": "https://github.com/apache/helix/commit/e553702758a189c7004f47ead8c80224fdddad6e", "message": "Add Builder to ZKDistributedNonblockingLock to enable ZooScalability use\n\nZKDistributedNonblockingLock and its related helix-lock API were not ZooScalability-compliant, meaning they could not be used in a multi-ZK environment. This PR updates the said APIs so that we could use them in multi-ZK environment by adding a Builder that allows users to set multi-ZK parameters.", "committedDate": "2020-09-25T19:31:30Z", "type": "commit"}, {"oid": "a0a4d80fb30ad135a3136c86c9ad558f9a3e8519", "url": "https://github.com/apache/helix/commit/a0a4d80fb30ad135a3136c86c9ad558f9a3e8519", "message": "Add JavaDoc", "committedDate": "2020-09-25T19:36:24Z", "type": "commit"}, {"oid": "97533e695f12b7e7b4bea7399c731b094f93ef98", "url": "https://github.com/apache/helix/commit/97533e695f12b7e7b4bea7399c731b094f93ef98", "message": "fix", "committedDate": "2020-09-25T22:11:27Z", "type": "commit"}, {"oid": "9fb23deeb79a09cb101a8578244332d627e783c4", "url": "https://github.com/apache/helix/commit/9fb23deeb79a09cb101a8578244332d627e783c4", "message": "Fix builder", "committedDate": "2020-09-29T17:41:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3Mzg0NA==", "url": "https://github.com/apache/helix/pull/1409#discussion_r497073844", "bodyText": "I'm not sure the purpose of this comment. Is this targeting whoever changes this class? what about non zooscalablity use case?", "author": "zhangmeng916", "createdAt": "2020-09-29T21:34:41Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java", "diffHunk": "@@ -24,17 +24,21 @@\n import org.apache.helix.AccessOption;\n import org.apache.helix.BaseDataAccessor;\n import org.apache.helix.HelixException;\n+import org.apache.helix.SystemPropertyKeys;\n import org.apache.helix.lock.DistributedLock;\n import org.apache.helix.lock.LockInfo;\n import org.apache.helix.lock.LockScope;\n+import org.apache.helix.manager.zk.GenericZkHelixApiBuilder;\n import org.apache.helix.manager.zk.ZkBaseDataAccessor;\n import org.apache.helix.zookeeper.datamodel.ZNRecord;\n import org.apache.helix.zookeeper.zkclient.DataUpdater;\n import org.apache.log4j.Logger;\n \n \n /**\n- * Helix nonblocking lock implementation based on Zookeeper\n+ * Helix nonblocking lock implementation based on Zookeeper.\n+ * NOTE: do NOT use ephemeral nodes in this implementation because ephemeral mode is not supported", "originalCommit": "9fb23deeb79a09cb101a8578244332d627e783c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEyOTc4OQ==", "url": "https://github.com/apache/helix/pull/1409#discussion_r497129789", "bodyText": "Yes, in order to keep things compatible, we shouldn't be using ephemeral nodes for the implementation of this class. If ephemeral nodes are needed, that would have to be a separate class with a different metadata store or mode of access.\nOne can say - what about on single-zk mode? Then the behavior of this class becomes harder to understand. So it's easier to say no ephemeral node use for this class (which is the case right now).", "author": "narendly", "createdAt": "2020-09-29T23:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3Mzg0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3NDMzNA==", "url": "https://github.com/apache/helix/pull/1409#discussion_r497074334", "bodyText": "This line can be put together with the following comments.", "author": "zhangmeng916", "createdAt": "2020-09-29T21:35:41Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java", "diffHunk": "@@ -143,11 +147,65 @@ public ZNRecord update(ZNRecord current) {\n       if (!(System.currentTimeMillis() < curLockInfo.getTimeout()) || isCurrentOwner()) {\n         return _record;\n       }\n-      // For users who are not the lock owner and try to do an update on a lock that is held by someone else, exception thrown is to be caught by data accessor, and return false for the update\n+      // For users who are not the lock owner and try to do an update on a lock that is held by\n+      // someone else, exception thrown is to be caught by data accessor, and return false for\n+      // the update\n       LOG.error(\n           \"User \" + _userId + \" tried to update the lock at \" + new Date(System.currentTimeMillis())\n               + \". Lock path: \" + _lockPath);\n       throw new HelixException(\"User is not authorized to perform this operation.\");\n     }\n   }\n+\n+  /**\n+   * Builder class to use with ZKDistributedNonblockingLock.\n+   */\n+  public static class Builder extends GenericZkHelixApiBuilder<Builder> {\n+    private LockScope _lockScope;\n+    private String _userId;\n+    private long _timeout;\n+    private String _lockMsg;\n+\n+    public Builder() {\n+    }\n+\n+    public Builder setLockScope(LockScope lockScope) {\n+      _lockScope = lockScope;\n+      return this;\n+    }\n+\n+    public Builder setUserId(String userId) {\n+      _userId = userId;\n+      return this;\n+    }\n+\n+    public Builder setTimeout(long timeout) {\n+      _timeout = timeout;\n+      return this;\n+    }\n+\n+    public Builder setLockMsg(String lockMsg) {\n+      _lockMsg = lockMsg;\n+      return this;\n+    }\n+\n+    public ZKDistributedNonblockingLock build() {\n+      // Resolve which way we want to create BaseDataAccessor instance", "originalCommit": "9fb23deeb79a09cb101a8578244332d627e783c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}