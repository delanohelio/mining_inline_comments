{"pr_number": 1456, "pr_title": "Fix Periodic rebalancer Timer leak", "pr_createdAt": "2020-10-09T18:30:45Z", "pr_url": "https://github.com/apache/helix/pull/1456", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzE5OQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627199", "bodyText": "Just lock the _periodicalRebalanceExecutor?\n&\nHave you tried the atomic reference solution that we discussed? I think that one is easier.", "author": "jiajunwang", "createdAt": "2020-10-13T02:13:13Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n   long _timerPeriod = Long.MAX_VALUE;\n+  private final Object _lock = new Object();", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNDYyOQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508734629", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-10-20T18:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -174,16 +174,15 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n   /**\n    * The executors that can periodically run the rebalancing pipeline. A\n-   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n    * periodically rebalance.\n    */\n   private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n       Executors.newSingleThreadScheduledExecutor();\n-  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n+  private ScheduledFuture _periodicRebalanceFutureTask = null;\n   long _timerPeriod = Long.MAX_VALUE;\n   private final Object _lock = new Object();\n \n-\n   /**\n    * The timer that triggers the on-demand rebalance pipeline.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzgyMQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627821", "bodyText": "Is this check necessary?", "author": "jiajunwang", "createdAt": "2020-10-13T02:15:29Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n-      if (_periodicalRebalanceTimer != null) {\n-        _periodicalRebalanceTimer.cancel();\n+      ScheduledFuture lastScheduledFuture = null;\n+      synchronized (_lock) {\n+        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4MjQ3Mw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508882473", "bodyText": "Yea no need to check here. Updated.", "author": "xyuanlu", "createdAt": "2020-10-20T22:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -340,16 +339,16 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n       ScheduledFuture lastScheduledFuture = null;\n       synchronized (_lock) {\n-        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {\n-          lastScheduledFuture = _periodicRebalancerFutureTasks;\n+        if (_periodicRebalanceFutureTask!=null && !_periodicRebalanceFutureTask.isCancelled()) {\n+          lastScheduledFuture = _periodicRebalanceFutureTask;\n         }\n         _timerPeriod = period;\n-        _periodicRebalancerFutureTasks = _periodicalRebalanceExecutor\n+        _periodicRebalanceFutureTask = _periodicalRebalanceExecutor\n             .scheduleAtFixedRate(new RebalanceTask(manager, ClusterEventType.PeriodicalRebalance),\n                 _timerPeriod, _timerPeriod, TimeUnit.MILLISECONDS);\n       }\n       if (lastScheduledFuture != null) {\n-        lastScheduledFuture.cancel(true /* mayInterruptIfRunning */);\n+        lastScheduledFuture.cancel(false /* mayInterruptIfRunning */);\n       }\n     } else {\n       logger.info(\"Controller already has periodical rebalance timer at period \" + _timerPeriod);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503627992", "bodyText": "I think this check needs to be included in the critical section too.", "author": "jiajunwang", "createdAt": "2020-10-13T02:16:09Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0MjQxNw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508742417", "bodyText": "I think including this check in won't have any functional different compared to not including it. For case where 2 threads change value from v0->v1 and v0->v2 at the same time, the result is indeterministic in either way.  I prefer critical section like this since it excludes 2 log IOs.", "author": "xyuanlu", "createdAt": "2020-10-20T18:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2Njk3MQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508866971", "bodyText": "Second JJ's comment. IMO since the set of this value is inside critical section, the read should be included too. Theoretically you could get a bad value.", "author": "mgao0", "createdAt": "2020-10-20T22:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3NjQwNA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508876404", "bodyText": "TFTR. I think you are referring to situations like two threads both try to change period to a same value. including this compare in the inside critical section or not won't have different result.\nFor the case when we change period to different values, the result is indeterminable in either way.\nPlease correct m if I am wrong. I think in conclusion, having the compare in or out of critical section will have the same behavior. So I prefer smallest  critical section in this case, especially we have two IOs here.", "author": "xyuanlu", "createdAt": "2020-10-20T22:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -340,16 +339,16 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n       ScheduledFuture lastScheduledFuture = null;\n       synchronized (_lock) {\n-        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {\n-          lastScheduledFuture = _periodicRebalancerFutureTasks;\n+        if (_periodicRebalanceFutureTask!=null && !_periodicRebalanceFutureTask.isCancelled()) {\n+          lastScheduledFuture = _periodicRebalanceFutureTask;\n         }\n         _timerPeriod = period;\n-        _periodicRebalancerFutureTasks = _periodicalRebalanceExecutor\n+        _periodicRebalanceFutureTask = _periodicalRebalanceExecutor\n             .scheduleAtFixedRate(new RebalanceTask(manager, ClusterEventType.PeriodicalRebalance),\n                 _timerPeriod, _timerPeriod, TimeUnit.MILLISECONDS);\n       }\n       if (lastScheduledFuture != null) {\n-        lastScheduledFuture.cancel(true /* mayInterruptIfRunning */);\n+        lastScheduledFuture.cancel(false /* mayInterruptIfRunning */);\n       }\n     } else {\n       logger.info(\"Controller already has periodical rebalance timer at period \" + _timerPeriod);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODQ2NA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503628464", "bodyText": "This changes the logic. Keep it as it was, please.\nInterrupt it may cause some unexpected result. One example, the newly scheduled rebalance is scheduled with a delay. If you cancel the previous one by interrupt, then there might be a very long period that no rebalance is triggered.", "author": "jiajunwang", "createdAt": "2020-10-13T02:18:02Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -333,15 +338,19 @@ private void forceRebalance(HelixManager manager, ClusterEventType eventType) {\n   void startPeriodRebalance(long period, HelixManager manager) {\n     if (period != _timerPeriod) {\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n-      if (_periodicalRebalanceTimer != null) {\n-        _periodicalRebalanceTimer.cancel();\n+      ScheduledFuture lastScheduledFuture = null;\n+      synchronized (_lock) {\n+        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {\n+          lastScheduledFuture = _periodicRebalancerFutureTasks;\n+        }\n+        _timerPeriod = period;\n+        _periodicRebalancerFutureTasks = _periodicalRebalanceExecutor\n+            .scheduleAtFixedRate(new RebalanceTask(manager, ClusterEventType.PeriodicalRebalance),\n+                _timerPeriod, _timerPeriod, TimeUnit.MILLISECONDS);\n+      }\n+      if (lastScheduledFuture != null) {\n+        lastScheduledFuture.cancel(true /* mayInterruptIfRunning */);", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MTMzMw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508061333", "bodyText": "Updated.", "author": "xyuanlu", "createdAt": "2020-10-19T21:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -340,16 +339,16 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n       logger.info(\"Controller starting periodical rebalance timer at period \" + period);\n       ScheduledFuture lastScheduledFuture = null;\n       synchronized (_lock) {\n-        if (_periodicRebalancerFutureTasks!=null && !_periodicRebalancerFutureTasks.isCancelled()) {\n-          lastScheduledFuture = _periodicRebalancerFutureTasks;\n+        if (_periodicRebalanceFutureTask!=null && !_periodicRebalanceFutureTask.isCancelled()) {\n+          lastScheduledFuture = _periodicRebalanceFutureTask;\n         }\n         _timerPeriod = period;\n-        _periodicRebalancerFutureTasks = _periodicalRebalanceExecutor\n+        _periodicRebalanceFutureTask = _periodicalRebalanceExecutor\n             .scheduleAtFixedRate(new RebalanceTask(manager, ClusterEventType.PeriodicalRebalance),\n                 _timerPeriod, _timerPeriod, TimeUnit.MILLISECONDS);\n       }\n       if (lastScheduledFuture != null) {\n-        lastScheduledFuture.cancel(true /* mayInterruptIfRunning */);\n+        lastScheduledFuture.cancel(false /* mayInterruptIfRunning */);\n       }\n     } else {\n       logger.info(\"Controller already has periodical rebalance timer at period \" + _timerPeriod);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyODUyNw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503628527", "bodyText": "Same here.", "author": "jiajunwang", "createdAt": "2020-10-13T02:18:16Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -352,11 +361,11 @@ void startPeriodRebalance(long period, HelixManager manager) {\n    */\n   void stopPeriodRebalance() {\n     logger.info(\"Controller stopping periodical rebalance timer at period \" + _timerPeriod);\n-    if (_periodicalRebalanceTimer != null) {\n-      _periodicalRebalanceTimer.cancel();\n-      _periodicalRebalanceTimer = null;\n-      _timerPeriod = Long.MAX_VALUE;\n-      logger.info(\"Controller stopped periodical rebalance timer at period \" + _timerPeriod);\n+    synchronized (_lock) {\n+      if (_periodicRebalancerFutureTasks != null && !_periodicRebalancerFutureTasks.isCancelled()) {\n+        _periodicRebalancerFutureTasks.cancel(true /* mayInterruptIfRunning */);", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -362,8 +361,8 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n   void stopPeriodRebalance() {\n     logger.info(\"Controller stopping periodical rebalance timer at period \" + _timerPeriod);\n     synchronized (_lock) {\n-      if (_periodicRebalancerFutureTasks != null && !_periodicRebalancerFutureTasks.isCancelled()) {\n-        _periodicRebalancerFutureTasks.cancel(true /* mayInterruptIfRunning */);\n+      if (_periodicRebalanceFutureTask != null && !_periodicRebalanceFutureTask.isCancelled()) {\n+        _periodicRebalanceFutureTask.cancel(false /* mayInterruptIfRunning */);\n         _timerPeriod = Long.MAX_VALUE;\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMjY0Mg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503632642", "bodyText": "Why need to cancel the task while stopPeriodRebalance is called here?", "author": "jiajunwang", "createdAt": "2020-10-13T02:35:15Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1299,6 +1308,10 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n   }\n \n   public void shutdown() throws InterruptedException {\n+    if (_periodicRebalancerFutureTasks != null) {\n+      _periodicRebalancerFutureTasks.cancel(false);\n+    }", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MTI4Mg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508061282", "bodyText": "Yea you are correct. shutDown will cancel tasks later. Updated.", "author": "xyuanlu", "createdAt": "2020-10-19T21:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzMjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1308,9 +1307,6 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n   }\n \n   public void shutdown() throws InterruptedException {\n-    if (_periodicRebalancerFutureTasks != null) {\n-      _periodicRebalancerFutureTasks.cancel(false);\n-    }\n     _periodicalRebalanceExecutor.shutdown();\n     stopPeriodRebalance();\n     shutdownOnDemandTimer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NzgwMg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503687802", "bodyText": "We totally only have one SingleThreadScheduledExecutor at most for each genericHelixController object, right? This sounds like per resource group has one. Can we make it clear the life cycle of SingleThreadScheduledExecutor is the same as genericHelixController?", "author": "kaisun2000", "createdAt": "2020-10-13T06:07:27Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5Mzg4Mw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508793883", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-10-20T19:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4NzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -174,16 +174,15 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n   /**\n    * The executors that can periodically run the rebalancing pipeline. A\n-   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n    * periodically rebalance.\n    */\n   private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n       Executors.newSingleThreadScheduledExecutor();\n-  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n+  private ScheduledFuture _periodicRebalanceFutureTask = null;\n   long _timerPeriod = Long.MAX_VALUE;\n   private final Object _lock = new Object();\n \n-\n   /**\n    * The timer that triggers the on-demand rebalance pipeline.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r503689234", "bodyText": "Does this shutdown kill the thread immediately? I think not.\nShall we provide an shutDownNow which kill the thread immediately? That would be useful for tests.", "author": "kaisun2000", "createdAt": "2020-10-13T06:11:24Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1299,6 +1308,10 @@ protected void checkLiveInstancesObservation(List<LiveInstance> liveInstances,\n   }\n \n   public void shutdown() throws InterruptedException {\n+    if (_periodicRebalancerFutureTasks != null) {\n+      _periodicRebalancerFutureTasks.cancel(false);\n+    }\n+    _periodicalRebalanceExecutor.shutdown();", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2ODUyNg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r504968526", "bodyText": "Yea it does not kill the thread immediately. There is a ScheduledExecutorService.shutDownNow() that interrupt threads and we could use that in test I guess.", "author": "xyuanlu", "createdAt": "2020-10-14T20:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzNjU0NQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508836545", "bodyText": "_asyncTasksThreadPool.shutdownNow(); try { _asyncTasksThreadPool.awaitTermination(EVENT_THREAD_JOIN_TIMEOUT, TimeUnit.MILLISECONDS); } catch (InterruptedException ex) { logger.warn(\"Timeout when terminating async tasks. Some async tasks are still executing.\"); }\nsee the above. Can we do something similar like the above?", "author": "kaisun2000", "createdAt": "2020-10-20T21:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0NTIwMA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508845200", "bodyText": "shutdownNow cancels already scheduled TimerTask and interrupt running TimerTask. For this  _periodicalRebalanceExecutor, scheduled TimerTask is canceled in stopPeriodRebalance() and if there is running one, it is interrupted in shutdownPipeline();", "author": "xyuanlu", "createdAt": "2020-10-20T21:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTUzNg==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508851536", "bodyText": "Should we use shutDownNow() here then? You could add something like this:\n _periodicalRebalanceExecutor.shutdown();\n stopPeriodRebalance();\nshutdownOnDemandTimer();\nif (!_periodicalRebalanceExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\n          _periodicalRebalanceExecutor.shutdownNow(); }\nThis is also suggested here https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html. This way you could make sure there's no leakage.", "author": "mgao0", "createdAt": "2020-10-20T21:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4MTg5NA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508881894", "bodyText": "Please correct me if I am wrong. In my understanding, shutdownPipeline() guarantees no event processor thread is alive anymore.", "author": "xyuanlu", "createdAt": "2020-10-20T22:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5MjA1Ng==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508892056", "bodyText": "Yes shutdownPipeline() does shut down the event process thread, but when you call shutdownNow, it's the thread inside the executor is shut down. I think they are different threads.", "author": "mgao0", "createdAt": "2020-10-20T23:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyNzM1OA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508927358", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-10-21T00:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1308,9 +1307,6 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n   }\n \n   public void shutdown() throws InterruptedException {\n-    if (_periodicRebalancerFutureTasks != null) {\n-      _periodicRebalancerFutureTasks.cancel(false);\n-    }\n     _periodicalRebalanceExecutor.shutdown();\n     stopPeriodRebalance();\n     shutdownOnDemandTimer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzkwNQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r504107905", "bodyText": "_periodicRebalancerFutureTasks -> _periodicRebalancerFutureTask?  Should there always be only 1 (periodical) task?", "author": "lei-xia", "createdAt": "2020-10-13T16:46:22Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,11 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private ScheduledFuture _periodicRebalancerFutureTasks = null;", "originalCommit": "31885df1202f73bbd9068926463f0f6b5f59d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2NzU1NQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508767555", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-10-20T18:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 1dae5f223..182e6f963 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -174,16 +174,15 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n   /**\n    * The executors that can periodically run the rebalancing pipeline. A\n-   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n+   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n    * periodically rebalance.\n    */\n   private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n       Executors.newSingleThreadScheduledExecutor();\n-  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n+  private ScheduledFuture _periodicRebalanceFutureTask = null;\n   long _timerPeriod = Long.MAX_VALUE;\n   private final Object _lock = new Object();\n \n-\n   /**\n    * The timer that triggers the on-demand rebalance pipeline.\n    */\n"}}, {"oid": "dc09da01da783f6e9d83aa6351b5e9271b71ba10", "url": "https://github.com/apache/helix/commit/dc09da01da783f6e9d83aa6351b5e9271b71ba10", "message": "address comments", "committedDate": "2020-10-14T20:55:32Z", "type": "forcePushed"}, {"oid": "8acfd63559737493d24a361121485abe47747591", "url": "https://github.com/apache/helix/commit/8acfd63559737493d24a361121485abe47747591", "message": "address comments", "committedDate": "2020-10-15T17:51:07Z", "type": "forcePushed"}, {"oid": "8f2fd94e54349da2153dbe861440ba5111cd9c3e", "url": "https://github.com/apache/helix/commit/8f2fd94e54349da2153dbe861440ba5111cd9c3e", "message": "address comments", "committedDate": "2020-10-20T19:43:19Z", "type": "forcePushed"}, {"oid": "a0564e9c46578fb6507b8448fd6d45b36541b4a6", "url": "https://github.com/apache/helix/commit/a0564e9c46578fb6507b8448fd6d45b36541b4a6", "message": "address comments", "committedDate": "2020-10-20T19:44:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508861643", "bodyText": "When you initialize the executor service, you might want to setRemoveOnCancelPolicy to true, so the cancelled tasks are immediately removed from the work queue at time of cancellation. Otherwise, there could be memory leak in the work queue, might be a minor issue if we don't cancel tasks for many times, but if we cancel tasks frequently, you should consider adding this.", "author": "mgao0", "createdAt": "2020-10-20T21:50:19Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -172,13 +173,15 @@\n   private boolean _inMaintenanceMode;\n \n   /**\n-   * The timer that can periodically run the rebalancing pipeline. The timer will start if there is\n-   * one resource group has the config to use the timer.\n+   * The executors that can periodically run the rebalancing pipeline. A\n+   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n+   * periodically rebalance.\n    */\n-  Timer _periodicalRebalanceTimer = null;\n+  private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n+      Executors.newSingleThreadScheduledExecutor();", "originalCommit": "a0564e9c46578fb6507b8448fd6d45b36541b4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4MDEyMQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508880121", "bodyText": "Good suggestion. Will update.", "author": "xyuanlu", "createdAt": "2020-10-20T22:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5MTE0Nw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508891147", "bodyText": "I think this is a valid suggestion. However, I did not find setRemoveOnCancelPolicy() for interface ScheduledExecutorService  we are using here..", "author": "xyuanlu", "createdAt": "2020-10-20T23:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5MjUzOQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508892539", "bodyText": "This method is only available in ScheduledThreadPoolExecutor. Is it easy to switch to ScheduledThreadPoolExecutor?", "author": "mgao0", "createdAt": "2020-10-20T23:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkyNTY1OA==", "url": "https://github.com/apache/helix/pull/1456#discussion_r508925658", "bodyText": "Thanks Molly! We had an offline discussion.  Since cancelled tasks will be removed from the work queue when delay elapses, and there is no setRemoveOnCancelPolicy() for interface ScheduledExecutorService. We think for our current workload, it is ok to keep the way it is now.", "author": "xyuanlu", "createdAt": "2020-10-21T00:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2MTY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "18e22bd24ca7036135f77f59165617a66566c79e", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 5b41ac4fc..dff12e156 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -174,13 +174,14 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n \n   /**\n    * The executors that can periodically run the rebalancing pipeline. A\n-   * SingleThreadScheduledExecutor will start if there is resource group that has the config to do\n+   * SingleThreadScheduledExecutor will start if there is one resource group has the config to do\n    * periodically rebalance.\n    */\n   private static final ScheduledExecutorService _periodicalRebalanceExecutor =\n       Executors.newSingleThreadScheduledExecutor();\n-  private ScheduledFuture _periodicRebalanceFutureTask = null;\n+  private ScheduledFuture _periodicRebalancerFutureTasks = null;\n   long _timerPeriod = Long.MAX_VALUE;\n+  private final Object _lock = new Object();\n \n   /**\n    * The timer that triggers the on-demand rebalance pipeline.\n"}}, {"oid": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "url": "https://github.com/apache/helix/commit/6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "message": "address comments", "committedDate": "2020-10-21T00:58:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MDg4Ng==", "url": "https://github.com/apache/helix/pull/1456#discussion_r509550886", "bodyText": "Could supurious wake up can impact this?  I am not sure why we would like to wait here? Are we worrying about the partial task running? If it wakes up and return false, it will kill thread immediately. There is no difference as we kill it at first beginning.", "author": "junkaixue", "createdAt": "2020-10-21T18:24:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java", "diffHunk": "@@ -1307,6 +1315,11 @@ public void shutdown() throws InterruptedException {\n     logger.info(\"Shutting down {} pipeline\", Pipeline.Type.TASK.name());\n     shutdownPipeline(_taskEventThread, _taskEventQueue);\n \n+    if (!_periodicalRebalanceExecutor", "originalCommit": "6cc45a9e55fa9bd5dc8c54b24f0e5bef23eb8b9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU3ODIyNQ==", "url": "https://github.com/apache/helix/pull/1456#discussion_r509578225", "bodyText": "TFTR.\nDo you think it's better to do a _periodicalRebalanceExecutor.shutdownNow() at beginning and then check if no thread is running like this here? Or just do _periodicalRebalanceExecutor.shutdownNow() at beginning is enough?", "author": "xyuanlu", "createdAt": "2020-10-21T18:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5MjQ5Nw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r509792497", "bodyText": "I think it is fine. But it would be easier for the reader to understand if you put all the related logic together.", "author": "jiajunwang", "createdAt": "2020-10-21T23:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NjkyMw==", "url": "https://github.com/apache/helix/pull/1456#discussion_r510556923", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-10-23T02:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "18e22bd24ca7036135f77f59165617a66566c79e", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\nindex 359351eca..dff12e156 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/GenericHelixController.java\n\n@@ -1315,11 +1319,6 @@ public class GenericHelixController implements IdealStateChangeListener, LiveIns\n     logger.info(\"Shutting down {} pipeline\", Pipeline.Type.TASK.name());\n     shutdownPipeline(_taskEventThread, _taskEventQueue);\n \n-    if (!_periodicalRebalanceExecutor\n-        .awaitTermination(EVENT_THREAD_JOIN_TIMEOUT, TimeUnit.MILLISECONDS)) {\n-      _periodicalRebalanceExecutor.shutdownNow();\n-    }\n-\n     // shutdown asycTasksThreadpool and wait for terminate.\n     _asyncTasksThreadPool.shutdownNow();\n     try {\n"}}, {"oid": "18e22bd24ca7036135f77f59165617a66566c79e", "url": "https://github.com/apache/helix/commit/18e22bd24ca7036135f77f59165617a66566c79e", "message": "fix timer", "committedDate": "2020-10-22T23:30:15Z", "type": "commit"}, {"oid": "5238c130ffc4369a601addf137a37ffafad612c6", "url": "https://github.com/apache/helix/commit/5238c130ffc4369a601addf137a37ffafad612c6", "message": "address comments", "committedDate": "2020-10-22T23:30:15Z", "type": "commit"}, {"oid": "0655c421cbadf8310183d054e83266dbcd1ec47c", "url": "https://github.com/apache/helix/commit/0655c421cbadf8310183d054e83266dbcd1ec47c", "message": "address comments", "committedDate": "2020-10-22T23:30:15Z", "type": "commit"}, {"oid": "89a554574079fc68fba97cbbd0621b4cb224410a", "url": "https://github.com/apache/helix/commit/89a554574079fc68fba97cbbd0621b4cb224410a", "message": "address comment", "committedDate": "2020-10-22T23:30:15Z", "type": "commit"}, {"oid": "89a554574079fc68fba97cbbd0621b4cb224410a", "url": "https://github.com/apache/helix/commit/89a554574079fc68fba97cbbd0621b4cb224410a", "message": "address comment", "committedDate": "2020-10-22T23:30:15Z", "type": "forcePushed"}]}