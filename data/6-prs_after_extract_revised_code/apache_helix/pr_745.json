{"pr_number": 745, "pr_title": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces", "pr_createdAt": "2020-02-11T07:57:25Z", "pr_url": "https://github.com/apache/helix/pull/745", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MjI0Nw==", "url": "https://github.com/apache/helix/pull/745#discussion_r377982247", "bodyText": "Just a note, this means that we need to use the RealmAwareZkClientConfig to generate HelixZkClient.ZkConnectionConfig.\nHelixZkClient.ZkConnectionConfig is pair {zkServerAddress, sessiontimeout} .\nzkServerAddress can be derived from shardingKey in RealAwareZkClientConfig. However, sessiontimout can not.\nSo here, shall we  do:\n1/ add sessiontimeout to  RealmAwareZkClientConfig?\nor\n2/ having another parameter to specify a sessiontimeout to the interface method buildZkClient?", "author": "kaisun2000", "createdAt": "2020-02-12T00:37:26Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,14 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,\n+      RealmAwareZkClient.RealmAwareZkClientConfig config);", "originalCommit": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MjIzNg==", "url": "https://github.com/apache/helix/pull/745#discussion_r377992236", "bodyText": "Another high level question, in the scope of dedicatedZkClient or sharedZkClient discussion, all the create ZkClient already are RealAware, right? we don't really need to have a mode for user to specify.\nThe mode can be kept internally for the client to know. In fact, even this (internally keep the type) may not be needed as we have new dedicatedZkClient and new sharedZkClient which wraps sharedZkClient and zkclient as of now. The type information is already encode in the class design. The beauty of OO inheritance.", "author": "kaisun2000", "createdAt": "2020-02-12T01:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MTA4Mw==", "url": "https://github.com/apache/helix/pull/745#discussion_r378591083", "bodyText": "@kaisun2000\n\nYes, we should add the sessionTimeout field to this. I will add it for completeness (this was a draft, so I just wanted to first give you an idea). :)\nYes and no.\n\n\nRealmAwareZkClients produced by RealmAwareZkClientFactory are all single-realm mode. So yes, mode might not be required as a method parameter for buildZkClient().\nWe should still keep this field internally because not all RealmAwareZkClients are single-realm mode. For example, if you create a FederatedZkClient instance, it should still have a mode = MULTI_REALM.\nSo yes, let's follow your suggestion to remove the mode parameter from here, but we should keep it as an internal variable that we could expose to the user (for instance, RealmAwareZkClient should support an interface method like getMode() that returns either SINGLE_REALM or MULTI_REALM)", "author": "narendly", "createdAt": "2020-02-13T00:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4MjI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3878f4017e448783fee01f7610eff6ce2a23a868", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\nsimilarity index 76%\nrename from zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java\nrename to zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\nindex 42f6568c7..fd4c49bb9 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\n\n@@ -19,14 +19,13 @@ package org.apache.helix.zookeeper.api.api.factory;\n  * under the License.\n  */\n \n-import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n \n \n /**\n  * Creates an instance of RealmAwareZkClient.\n  */\n public interface RealmAwareZkClientFactory {\n-\n-  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,\n-      RealmAwareZkClient.RealmAwareZkClientConfig config);\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjU5Ng==", "url": "https://github.com/apache/helix/pull/745#discussion_r377986596", "bodyText": "mode is redundant, it is already presented in RealmAwareZkClientConfig", "author": "kaisun2000", "createdAt": "2020-02-12T00:53:00Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,14 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,", "originalCommit": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MTE0Mw==", "url": "https://github.com/apache/helix/pull/745#discussion_r378591143", "bodyText": "Yes, I will remove :)", "author": "narendly", "createdAt": "2020-02-13T00:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NjU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3878f4017e448783fee01f7610eff6ce2a23a868", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\nsimilarity index 76%\nrename from zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java\nrename to zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\nindex 42f6568c7..fd4c49bb9 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/factory/RealmAwareZkClientFactory.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\n\n@@ -19,14 +19,13 @@ package org.apache.helix.zookeeper.api.api.factory;\n  * under the License.\n  */\n \n-import org.apache.helix.zookeeper.api.api.client.RealmAwareZkClient;\n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n \n \n /**\n  * Creates an instance of RealmAwareZkClient.\n  */\n public interface RealmAwareZkClientFactory {\n-\n-  RealmAwareZkClient buildZkClient(RealmAwareZkClient.MODE mode,\n-      RealmAwareZkClient.RealmAwareZkClientConfig config);\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n+      RealmAwareZkClient.RealmAwareZkClientConfig clientConfig);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Nzk1Ng==", "url": "https://github.com/apache/helix/pull/745#discussion_r377987956", "bodyText": "Do we want to deprecate the following?\npublic abstract HelixZkClient buildZkClient(HelixZkClient.ZkConnectionConfig connectionConfig, HelixZkClient.ZkClientConfig clientConfig)\nOr put it another way, user later should not directly create non-real aware zkclient from this factory?", "author": "kaisun2000", "createdAt": "2020-02-12T00:57:59Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/impl/factory/HelixZkClientFactory.java", "diffHunk": "@@ -28,7 +29,7 @@\n /**\n  * Abstract class of the ZkClient factory.\n  */\n-abstract class HelixZkClientFactory {\n+abstract class HelixZkClientFactory implements RealmAwareZkClientFactory {", "originalCommit": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MTM2NQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r378591365", "bodyText": "Yes, let us deprecate all HelixZkClientFactory/HelixZkClient APIs.", "author": "narendly", "createdAt": "2020-02-13T00:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4Nzk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3878f4017e448783fee01f7610eff6ce2a23a868", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/impl/factory/HelixZkClientFactory.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/HelixZkClientFactory.java\nsimilarity index 85%\nrename from zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/impl/factory/HelixZkClientFactory.java\nrename to zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/HelixZkClientFactory.java\nindex 558b50ee8..9584c57a1 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/impl/factory/HelixZkClientFactory.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/impl/factory/HelixZkClientFactory.java\n\n@@ -19,11 +19,11 @@ package org.apache.helix.zookeeper.api.impl.factory;\n  * under the License.\n  */\n \n-import org.apache.helix.zookeeper.api.api.client.HelixZkClient;\n-import org.apache.helix.zookeeper.api.api.factory.RealmAwareZkClientFactory;\n-import org.apache.helix.zookeeper.api.exception.ZkClientException;\n-import org.apache.helix.zookeeper.api.zkclient.IZkConnection;\n-import org.apache.helix.zookeeper.api.zkclient.ZkConnection;\n+import org.apache.helix.zookeeper.api.client.HelixZkClient;\n+import org.apache.helix.zookeeper.api.factory.RealmAwareZkClientFactory;\n+import org.apache.helix.zookeeper.exception.ZkClientException;\n+import org.apache.helix.zookeeper.zkclient.IZkConnection;\n+import org.apache.helix.zookeeper.zkclient.ZkConnection;\n \n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5OTY4Nw==", "url": "https://github.com/apache/helix/pull/745#discussion_r378599687", "bodyText": "Shall we change the name to RealmAwareConnectionConfig? Conceptually this is the same as HelixZkClient.ZkConnectionConfig. In HelixZkClient the ClientConfig is about the monitor key, serializer etc. Let us keep the naming to concept consistent, otherwise, it can be confusing.", "author": "kaisun2000", "createdAt": "2020-02-13T01:02:02Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -305,159 +314,12 @@ public int hashCode() {\n     }\n   }\n \n-  /**\n-   * Configuration for creating a new ZkConnection.\n-   */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n-\n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-      if (obj == this) {\n-        return true;\n-      }\n-      if (!(obj instanceof HelixZkClient.ZkConnectionConfig)) {\n-        return false;\n-      }\n-      HelixZkClient.ZkConnectionConfig configObj = (HelixZkClient.ZkConnectionConfig) obj;\n-      return (_zkServers == null && configObj._zkServers == null ||\n-          _zkServers != null && _zkServers.equals(configObj._zkServers)) &&\n-          _sessionTimeout == configObj._sessionTimeout;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-      return _sessionTimeout * 31 + _zkServers.hashCode();\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return (_zkServers + \"_\" + _sessionTimeout).replaceAll(\"[\\\\W]\", \"_\");\n-    }\n-\n-    public HelixZkClient.ZkConnectionConfig setSessionTimeout(Integer sessionTimeout) {\n-      this._sessionTimeout = sessionTimeout;\n-      return this;\n-    }\n-\n-    public String getZkServers() {\n-      return _zkServers;\n-    }\n-\n-    public int getSessionTimeout() {\n-      return _sessionTimeout;\n-    }\n-  }\n-\n-  /**\n-   * Configuration for creating a new RealmAwareZkClient with serializer and monitor.\n-   */\n-  class ZkClientConfig {\n-    // For client to init the connection\n-    private long _connectInitTimeout = HelixZkClient.DEFAULT_CONNECTION_TIMEOUT;\n-\n-    // Data access configs\n-    private long _operationRetryTimeout = HelixZkClient.DEFAULT_OPERATION_TIMEOUT;\n-\n-    // Others\n-    private PathBasedZkSerializer _zkSerializer;\n-\n-    // Monitoring\n-    private String _monitorType;\n-    private String _monitorKey;\n-    private String _monitorInstanceName = null;\n-    private boolean _monitorRootPathOnly = true;\n-\n-    public HelixZkClient.ZkClientConfig setZkSerializer(PathBasedZkSerializer zkSerializer) {\n-      this._zkSerializer = zkSerializer;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setZkSerializer(ZkSerializer zkSerializer) {\n-      this._zkSerializer = new BasicZkSerializer(zkSerializer);\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n-     *\n-     * @param monitorType\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorType(String monitorType) {\n-      this._monitorType = monitorType;\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n-     *\n-     * @param monitorKey\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorKey(String monitorKey) {\n-      this._monitorKey = monitorKey;\n-      return this;\n-    }\n-\n-    /**\n-     * Used as part of the MBean ObjectName. This item is optional.\n-     *\n-     * @param instanceName\n-     */\n-    public HelixZkClient.ZkClientConfig setMonitorInstanceName(String instanceName) {\n-      this._monitorInstanceName = instanceName;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setMonitorRootPathOnly(Boolean monitorRootPathOnly) {\n-      this._monitorRootPathOnly = monitorRootPathOnly;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setOperationRetryTimeout(Long operationRetryTimeout) {\n-      this._operationRetryTimeout = operationRetryTimeout;\n-      return this;\n-    }\n-\n-    public HelixZkClient.ZkClientConfig setConnectInitTimeout(long _connectInitTimeout) {\n-      this._connectInitTimeout = _connectInitTimeout;\n-      return this;\n-    }\n-\n-    public PathBasedZkSerializer getZkSerializer() {\n-      if (_zkSerializer == null) {\n-        _zkSerializer = new BasicZkSerializer(new SerializableSerializer());\n-      }\n-      return _zkSerializer;\n-    }\n-\n-    public long getOperationRetryTimeout() {\n-      return _operationRetryTimeout;\n-    }\n-\n-    public String getMonitorType() {\n-      return _monitorType;\n-    }\n-\n-    public String getMonitorKey() {\n-      return _monitorKey;\n-    }\n-\n-    public String getMonitorInstanceName() {\n-      return _monitorInstanceName;\n-    }\n-\n-    public boolean isMonitorRootPathOnly() {\n-      return _monitorRootPathOnly;\n-    }\n-\n-    public long getConnectInitTimeout() {\n-      return _connectInitTimeout;\n+  class RealmAwareZkClientConfig {", "originalCommit": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3878f4017e448783fee01f7610eff6ce2a23a868", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/client/RealmAwareZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nsimilarity index 62%\nrename from zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/client/RealmAwareZkClient.java\nrename to zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nindex 669c5894d..6f3bea665 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/api/client/RealmAwareZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n\n@@ -314,12 +322,129 @@ public interface RealmAwareZkClient {\n     }\n   }\n \n-  class RealmAwareZkClientConfig {\n+  /**\n+   * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n+   */\n+  class RealmAwareZkConnectionConfig {\n+    /**\n+     * mode: Which mode the RealmAwareZkClientConfig should be created in\n+     */\n     private final MODE _mode;\n+    /**\n+     * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n+     * NOTE: this field is not used if MODE is MULTI_REALM!\n+     */\n     private final String _zkRealmShardingKey;\n-    public RealmAwareZkClientConfig(MODE mode, String zkRealmShardingKey) {\n+\n+    public RealmAwareZkConnectionConfig(MODE mode, String zkRealmShardingKey) {\n       _mode = mode;\n       _zkRealmShardingKey = zkRealmShardingKey;\n     }\n   }\n+\n+  /**\n+   * ZkClient-related configs for creating an instance of RealmAwareZkClient.\n+   */\n+  class RealmAwareZkClientConfig {\n+    // For client to init the connection\n+    private long _connectInitTimeout = DEFAULT_CONNECTION_TIMEOUT;\n+\n+    // Data access configs\n+    private long _operationRetryTimeout = DEFAULT_OPERATION_TIMEOUT;\n+\n+    // Others\n+    private PathBasedZkSerializer _zkSerializer;\n+\n+    // Monitoring\n+    private String _monitorType;\n+    private String _monitorKey;\n+    private String _monitorInstanceName = null;\n+    private boolean _monitorRootPathOnly = true;\n+\n+    public RealmAwareZkClientConfig setZkSerializer(PathBasedZkSerializer zkSerializer) {\n+      this._zkSerializer = zkSerializer;\n+      return this;\n+    }\n+\n+    public RealmAwareZkClientConfig setZkSerializer(ZkSerializer zkSerializer) {\n+      this._zkSerializer = new BasicZkSerializer(zkSerializer);\n+      return this;\n+    }\n+\n+    /**\n+     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n+     *\n+     * @param monitorType\n+     */\n+    public RealmAwareZkClientConfig setMonitorType(String monitorType) {\n+      this._monitorType = monitorType;\n+      return this;\n+    }\n+\n+    /**\n+     * Used as part of the MBean ObjectName. This item is required for enabling monitoring.\n+     *\n+     * @param monitorKey\n+     */\n+    public RealmAwareZkClientConfig setMonitorKey(String monitorKey) {\n+      this._monitorKey = monitorKey;\n+      return this;\n+    }\n+\n+    /**\n+     * Used as part of the MBean ObjectName. This item is optional.\n+     *\n+     * @param instanceName\n+     */\n+    public RealmAwareZkClientConfig setMonitorInstanceName(String instanceName) {\n+      this._monitorInstanceName = instanceName;\n+      return this;\n+    }\n+\n+    public RealmAwareZkClientConfig setMonitorRootPathOnly(Boolean monitorRootPathOnly) {\n+      this._monitorRootPathOnly = monitorRootPathOnly;\n+      return this;\n+    }\n+\n+    public RealmAwareZkClientConfig setOperationRetryTimeout(Long operationRetryTimeout) {\n+      this._operationRetryTimeout = operationRetryTimeout;\n+      return this;\n+    }\n+\n+    public RealmAwareZkClientConfig setConnectInitTimeout(long _connectInitTimeout) {\n+      this._connectInitTimeout = _connectInitTimeout;\n+      return this;\n+    }\n+\n+    public PathBasedZkSerializer getZkSerializer() {\n+      if (_zkSerializer == null) {\n+        _zkSerializer = new BasicZkSerializer(new SerializableSerializer());\n+      }\n+      return _zkSerializer;\n+    }\n+\n+    public long getOperationRetryTimeout() {\n+      return _operationRetryTimeout;\n+    }\n+\n+    public String getMonitorType() {\n+      return _monitorType;\n+    }\n+\n+    public String getMonitorKey() {\n+      return _monitorKey;\n+    }\n+\n+    public String getMonitorInstanceName() {\n+      return _monitorInstanceName;\n+    }\n+\n+    public boolean isMonitorRootPathOnly() {\n+      return _monitorRootPathOnly;\n+    }\n+\n+    public long getConnectInitTimeout() {\n+      return _connectInitTimeout;\n+    }\n+  }\n }\n"}}, {"oid": "3878f4017e448783fee01f7610eff6ce2a23a868", "url": "https://github.com/apache/helix/commit/3878f4017e448783fee01f7610eff6ce2a23a868", "message": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces", "committedDate": "2020-02-13T02:03:40Z", "type": "commit"}, {"oid": "3878f4017e448783fee01f7610eff6ce2a23a868", "url": "https://github.com/apache/helix/commit/3878f4017e448783fee01f7610eff6ce2a23a868", "message": "Add RealmAwareZkClient and RealmAwareZkClientFactory interfaces", "committedDate": "2020-02-13T02:03:40Z", "type": "forcePushed"}, {"oid": "fc608bcb47bc8cf6de027eaa921ab03626ec632b", "url": "https://github.com/apache/helix/commit/fc608bcb47bc8cf6de027eaa921ab03626ec632b", "message": "Fix config extends", "committedDate": "2020-02-13T02:10:40Z", "type": "commit"}, {"oid": "e577b3a5e96d7659fdb05cd5801c78715ec1a427", "url": "https://github.com/apache/helix/commit/e577b3a5e96d7659fdb05cd5801c78715ec1a427", "message": "Complete javadoc", "committedDate": "2020-02-11T19:28:49Z", "type": "forcePushed"}, {"oid": "fc608bcb47bc8cf6de027eaa921ab03626ec632b", "url": "https://github.com/apache/helix/commit/fc608bcb47bc8cf6de027eaa921ab03626ec632b", "message": "Fix config extends", "committedDate": "2020-02-13T02:10:40Z", "type": "forcePushed"}, {"oid": "744aa8d30dc439b2c18065579b7f963dda81270f", "url": "https://github.com/apache/helix/commit/744aa8d30dc439b2c18065579b7f963dda81270f", "message": "Fix javadoc", "committedDate": "2020-02-13T02:14:45Z", "type": "commit"}, {"oid": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "url": "https://github.com/apache/helix/commit/7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "message": "Add missing methods", "committedDate": "2020-02-13T02:28:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NTQ1MA==", "url": "https://github.com/apache/helix/pull/745#discussion_r379055450", "bodyText": "Another choice is to let ZkClientConfig inherit RealmAwareZkClient.RealmAwareZkClientConfig as the implementation of this two class are implementation are exactly the same. This way, no duplicate code. What is your take?", "author": "kaisun2000", "createdAt": "2020-02-13T18:56:45Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java", "diffHunk": "@@ -19,8 +19,178 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.zkclient.serialize.BasicZkSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.PathBasedZkSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.SerializableSerializer;\n+import org.apache.helix.zookeeper.zkclient.serialize.ZkSerializer;\n+\n+\n /**\n+ * Deprecated - please use RealmAwareZkClient instead.\n+ *\n  * HelixZkClient interface that follows the supported API structure of RealmAwareZkClient.\n  */\n+@Deprecated\n public interface HelixZkClient extends RealmAwareZkClient {\n+\n+  /**\n+   * Deprecated - please use RealmAwareZkClient and RealmAwareZkConnectionConfig instead.\n+   *\n+   * Configuration for creating a new ZkConnection.\n+   */\n+  @Deprecated\n+  class ZkConnectionConfig {\n+    // Connection configs\n+    private final String _zkServers;\n+    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+\n+    public ZkConnectionConfig(String zkServers) {\n+      _zkServers = zkServers;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+      if (obj == this) {\n+        return true;\n+      }\n+      if (!(obj instanceof HelixZkClient.ZkConnectionConfig)) {\n+        return false;\n+      }\n+      HelixZkClient.ZkConnectionConfig configObj = (HelixZkClient.ZkConnectionConfig) obj;\n+      return (_zkServers == null && configObj._zkServers == null || _zkServers != null && _zkServers\n+          .equals(configObj._zkServers)) && _sessionTimeout == configObj._sessionTimeout;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return _sessionTimeout * 31 + _zkServers.hashCode();\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return (_zkServers + \"_\" + _sessionTimeout).replaceAll(\"[\\\\W]\", \"_\");\n+    }\n+\n+    public HelixZkClient.ZkConnectionConfig setSessionTimeout(Integer sessionTimeout) {\n+      this._sessionTimeout = sessionTimeout;\n+      return this;\n+    }\n+\n+    public String getZkServers() {\n+      return _zkServers;\n+    }\n+\n+    public int getSessionTimeout() {\n+      return _sessionTimeout;\n+    }\n+  }\n+\n+  /**\n+   * Deprecated - please use RealmAwareZkClient and RealmAwareZkClientConfig instead.\n+   *\n+   * Configuration for creating a new HelixZkClient with serializer and monitor.\n+   */\n+  @Deprecated\n+  class ZkClientConfig {", "originalCommit": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NTA2MQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r379065061", "bodyText": "@kaisun2000\nI tried that but that is going to break backward-compatibility because of different return types in the setter methods.\nTo illustrate:\npublic ZkClientConfig setZkSerializer(PathBasedZkSerializer zkSerializer) is what we have in HelixZkClient. But if this class extended RealmAwareZkClientConfig, then it will be returning an instance of RealmAwareZkClientConfig, which would break the existing methods in Shared and DedicatedZkClientFactories.", "author": "narendly", "createdAt": "2020-02-13T19:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NTQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a806ac85806c3970f2cd3952500dffd15c687c0f", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java\nindex a32e3b2c9..9a1a69d4a 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/HelixZkClient.java\n\n@@ -89,6 +89,9 @@ public interface HelixZkClient extends RealmAwareZkClient {\n    * Deprecated - please use RealmAwareZkClient and RealmAwareZkClientConfig instead.\n    *\n    * Configuration for creating a new HelixZkClient with serializer and monitor.\n+   *\n+   * TODO: If possible, try to merge with RealmAwareZkClient's RealmAwareZkClientConfig to reduce duplicate logic/code (without breaking backward-compatibility).\n+   * Simply making this a subclass of RealmAwareZkClientConfig will break backward-compatiblity.\n    */\n   @Deprecated\n   class ZkClientConfig {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NzI4MQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r379057281", "bodyText": "To achieve feature parity of HelixZkClientInterface, shall we add this constructor too?\n   public RealmAwareZkClient buildZkClient( RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig) { return buildZkClient(connectConfig, new RealmAwareZkClient.RealmAwareZkClientConfig()); }", "author": "kaisun2000", "createdAt": "2020-02-13T19:00:16Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java", "diffHunk": "@@ -19,5 +19,13 @@\n  * under the License.\n  */\n \n+import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n+\n+\n+/**\n+ * Creates an instance of RealmAwareZkClient.\n+ */\n public interface RealmAwareZkClientFactory {\n+  RealmAwareZkClient buildZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,", "originalCommit": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NTUzOQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r379065539", "bodyText": "Sure, that's a good idea. Let me add it as well.", "author": "narendly", "createdAt": "2020-02-13T19:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NzI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\nindex fd4c49bb9..f68ffe404 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/factory/RealmAwareZkClientFactory.java\n\n@@ -26,6 +26,20 @@ import org.apache.helix.zookeeper.api.client.RealmAwareZkClient;\n  * Creates an instance of RealmAwareZkClient.\n  */\n public interface RealmAwareZkClientFactory {\n+  /**\n+   * Build a RealmAwareZkClient using specified connection config and client config.\n+   * @param connectionConfig\n+   * @param clientConfig\n+   * @return HelixZkClient\n+   */\n   RealmAwareZkClient buildZkClient(RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig,\n       RealmAwareZkClient.RealmAwareZkClientConfig clientConfig);\n+\n+  /**\n+   * Builds a RealmAwareZkClient using specified connection config and default client config.\n+   * @param connectionConfig\n+   * @return RealmAwareZkClient\n+   */\n+  RealmAwareZkClient buildZkClient(\n+      RealmAwareZkClient.RealmAwareZkConnectionConfig connectionConfig);\n }\n"}}, {"oid": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "url": "https://github.com/apache/helix/commit/78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "message": "Add another interface method", "committedDate": "2020-02-13T19:23:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4NzQxMg==", "url": "https://github.com/apache/helix/pull/745#discussion_r379087412", "bodyText": "If we think MODE is already encoded in the Type (class hierarchy), we don't need this in the constructor.  Based on looking at the psuedo code I drew, I don't fee we really need to pass this in.", "author": "kaisun2000", "createdAt": "2020-02-13T19:59:19Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -306,48 +326,63 @@ public int hashCode() {\n   }\n \n   /**\n-   * Configuration for creating a new ZkConnection.\n+   * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+  class RealmAwareZkConnectionConfig {\n+    /**\n+     * mode: Which mode the RealmAwareZkClientConfig should be created in\n+     */\n+    private final MODE _mode;\n+    /**\n+     * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n+     * NOTE: this field will be ignored if MODE is MULTI_REALM!\n+     */\n+    private final String _zkRealmShardingKey;\n+    private int _sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n \n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n+    public RealmAwareZkConnectionConfig(MODE mode, String zkRealmShardingKey) {", "originalCommit": "78b8de5584904c4ac7aa555c572a5bd4a88ee9b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNDQ0NA==", "url": "https://github.com/apache/helix/pull/745#discussion_r379124444", "bodyText": "I am thinking that we would use this for FederatedZkClient as well since FederatedZkClient is an implementation of RealmAwareZkClient. With that said, this is necessary because the mode will have to be different.\nSo mode is not necessarily encoded in the type.", "author": "narendly", "createdAt": "2020-02-13T21:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4NzQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMTIxNA==", "url": "https://github.com/apache/helix/pull/745#discussion_r379131214", "bodyText": "FederatedZkClient is always multi. The implementation of FederateZkClient can assume this without you passing a mode. The problem is that if you pass a non-multi, it need to handle it then.", "author": "kaisun2000", "createdAt": "2020-02-13T21:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4NzQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "a806ac85806c3970f2cd3952500dffd15c687c0f", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nindex 98a83b4fc..5f3dcfa21 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n\n@@ -329,10 +323,7 @@ public interface RealmAwareZkClient {\n    * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n   class RealmAwareZkConnectionConfig {\n-    /**\n-     * mode: Which mode the RealmAwareZkClientConfig should be created in\n-     */\n-    private final MODE _mode;\n+\n     /**\n      * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n      * NOTE: this field will be ignored if MODE is MULTI_REALM!\n"}}, {"oid": "917794795b38115860e48d37f612d3407f2de9be", "url": "https://github.com/apache/helix/commit/917794795b38115860e48d37f612d3407f2de9be", "message": "asdf", "committedDate": "2020-02-13T21:10:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2OTU4Ng==", "url": "https://github.com/apache/helix/pull/745#discussion_r379069586", "bodyText": "Make the second one separate line.", "author": "junkaixue", "createdAt": "2020-02-13T19:24:43Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -40,7 +41,24 @@\n import org.apache.zookeeper.data.Stat;\n \n \n+/**\n+ * The Realm-aware ZkClient interface.\n+ * NOTE: \"Realm-aware\" does not necessarily mean that the RealmAwareZkClient instance will be connecting to multiple ZK realms.\n+ * On single-realm mode, RealmAwareZkClient will reject requests going out to other ZK realms than the one set at initialization.\n+ * On multi-realm mode, RealmAwareZkClient will connect to multiple ZK realms but will reject EPHEMERAL AccessMode operations.\n+ */\n public interface RealmAwareZkClient {\n+\n+  /**\n+   * Specifies which mode to run this RealmAwareZkClient on.\n+   *\n+   * SINGLE_REALM: CRUD, change subscription, and EPHEMERAL CreateMode are supported.\n+   * MULTI_REALM: CRUD and change subscription are supported. Operations involving EPHEMERAL CreateMode will throw an UnsupportedOperationException.\n+   */\n+  enum MODE {\n+    SINGLE_REALM, MULTI_REALM", "originalCommit": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NDE3Mw==", "url": "https://github.com/apache/helix/pull/745#discussion_r379164173", "bodyText": "updated!", "author": "narendly", "createdAt": "2020-02-13T22:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2OTU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a806ac85806c3970f2cd3952500dffd15c687c0f", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nindex 98a83b4fc..5f3dcfa21 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n\n@@ -55,9 +54,7 @@ public interface RealmAwareZkClient {\n    * SINGLE_REALM: CRUD, change subscription, and EPHEMERAL CreateMode are supported.\n    * MULTI_REALM: CRUD and change subscription are supported. Operations involving EPHEMERAL CreateMode will throw an UnsupportedOperationException.\n    */\n-  enum MODE {\n-    SINGLE_REALM, MULTI_REALM\n-  }\n+  enum MODE {SINGLE_REALM, MULTI_REALM}\n \n   int DEFAULT_OPERATION_TIMEOUT = Integer.MAX_VALUE;\n   int DEFAULT_CONNECTION_TIMEOUT = 60 * 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDk5OQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r379134999", "bodyText": "Shall we remove Helix word?", "author": "junkaixue", "createdAt": "2020-02-13T21:42:54Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -250,21 +268,22 @@ default long waitForEstablishedSession(long timeout, TimeUnit timeUnit) {\n    * This is for backward compatibility and to avoid breaking the original implementation of\n    * {@link org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener}.\n    */\n-  class I0ItecIZkStateListenerHelixImpl\n-      implements org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener {\n+  class I0ItecIZkStateListenerHelixImpl implements org.apache.helix.zookeeper.zkclient.deprecated.IZkStateListener {", "originalCommit": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0Mjg3NA==", "url": "https://github.com/apache/helix/pull/745#discussion_r379142874", "bodyText": "Removed", "author": "narendly", "createdAt": "2020-02-13T21:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a806ac85806c3970f2cd3952500dffd15c687c0f", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nindex 98a83b4fc..5f3dcfa21 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n\n@@ -276,14 +273,12 @@ public interface RealmAwareZkClient {\n     }\n \n     @Override\n-    public void handleStateChanged(Watcher.Event.KeeperState keeperState)\n-        throws Exception {\n+    public void handleStateChanged(Watcher.Event.KeeperState keeperState) throws Exception {\n       _listener.handleStateChanged(keeperState);\n     }\n \n     @Override\n-    public void handleNewSession()\n-        throws Exception {\n+    public void handleNewSession() throws Exception {\n       /*\n        * org.apache.helix.manager.zk.zookeeper.IZkStateListener does not have handleNewSession(),\n        * so null is passed into handleNewSession(sessionId).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNTYyMA==", "url": "https://github.com/apache/helix/pull/745#discussion_r379135620", "bodyText": "Seemed to me the connection is per zk realm. Then the routing logic should be at Factory layer, right?", "author": "junkaixue", "createdAt": "2020-02-13T21:44:11Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java", "diffHunk": "@@ -306,48 +326,63 @@ public int hashCode() {\n   }\n \n   /**\n-   * Configuration for creating a new ZkConnection.\n+   * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n-  class ZkConnectionConfig {\n-    // Connection configs\n-    private final String _zkServers;\n-    private int _sessionTimeout = HelixZkClient.DEFAULT_SESSION_TIMEOUT;\n+  class RealmAwareZkConnectionConfig {\n+    /**\n+     * mode: Which mode the RealmAwareZkClientConfig should be created in\n+     */\n+    private final MODE _mode;\n+    /**\n+     * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n+     * NOTE: this field will be ignored if MODE is MULTI_REALM!\n+     */\n+    private final String _zkRealmShardingKey;\n+    private int _sessionTimeout = DEFAULT_SESSION_TIMEOUT;\n \n-    public ZkConnectionConfig(String zkServers) {\n-      _zkServers = zkServers;\n+    public RealmAwareZkConnectionConfig(MODE mode, String zkRealmShardingKey) {\n+      if (mode == null) {\n+        throw new ZkClientException(\"Mode cannot be null!\");\n+      }\n+      _mode = mode;\n+      _zkRealmShardingKey = zkRealmShardingKey;", "originalCommit": "7ba69ceaef51c21e71355a6387f3ef03fdecf64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzODk2MQ==", "url": "https://github.com/apache/helix/pull/745#discussion_r379138961", "bodyText": "That's exactly right.", "author": "narendly", "createdAt": "2020-02-13T21:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNTYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a806ac85806c3970f2cd3952500dffd15c687c0f", "chunk": "diff --git a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\nindex 98a83b4fc..5f3dcfa21 100644\n--- a/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n+++ b/zookeeper-api/src/main/java/org/apache/helix/zookeeper/api/client/RealmAwareZkClient.java\n\n@@ -329,10 +323,7 @@ public interface RealmAwareZkClient {\n    * ZkConnection-related configs for creating an instance of RealmAwareZkClient.\n    */\n   class RealmAwareZkConnectionConfig {\n-    /**\n-     * mode: Which mode the RealmAwareZkClientConfig should be created in\n-     */\n-    private final MODE _mode;\n+\n     /**\n      * zkRealmShardingKey: used to deduce which ZK realm this RealmAwareZkClientConfig should connect to.\n      * NOTE: this field will be ignored if MODE is MULTI_REALM!\n"}}, {"oid": "a806ac85806c3970f2cd3952500dffd15c687c0f", "url": "https://github.com/apache/helix/commit/a806ac85806c3970f2cd3952500dffd15c687c0f", "message": "remove mode'", "committedDate": "2020-02-13T21:47:12Z", "type": "commit"}, {"oid": "14f5ba2a653fc7cc9d267d2f7cd41dccf6f7e4c9", "url": "https://github.com/apache/helix/commit/14f5ba2a653fc7cc9d267d2f7cd41dccf6f7e4c9", "message": "Format", "committedDate": "2020-02-13T22:51:13Z", "type": "commit"}, {"oid": "2a7e8f487bd32cd6e8bf2d4a3c2dd61859ab8d35", "url": "https://github.com/apache/helix/commit/2a7e8f487bd32cd6e8bf2d4a3c2dd61859ab8d35", "message": "Tested", "committedDate": "2020-02-14T01:25:26Z", "type": "commit"}]}