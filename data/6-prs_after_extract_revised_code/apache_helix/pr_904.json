{"pr_number": 904, "pr_title": "Fix the concurrent modification error happens during the HelixManager initHandlers() call", "pr_createdAt": "2020-03-20T22:50:11Z", "pr_url": "https://github.com/apache/helix/pull/904", "timeline": [{"oid": "167885e38dfe2e4b541628588845f2a46d92b18a", "url": "https://github.com/apache/helix/commit/167885e38dfe2e4b541628588845f2a46d92b18a", "message": "Fix the concurrent modification error happens during the HelixManager.initHandlers() call.\n\nAdd test case to verify the fix and ensure this error not happen again.", "committedDate": "2020-03-20T21:35:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyOTg2Ng==", "url": "https://github.com/apache/helix/pull/904#discussion_r395929866", "bodyText": "Nit: modify -> modifies", "author": "huizhilu", "createdAt": "2020-03-20T23:23:14Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java", "diffHunk": "@@ -1004,7 +1004,10 @@ void waitUntilConnected() {\n   void initHandlers(List<CallbackHandler> handlers) {\n     synchronized (this) {\n       if (handlers != null) {\n-        for (CallbackHandler handler : handlers) {\n+        // get a copy of the list and iterate over the copy list\n+        // in case handler.init() modify the original handler list", "originalCommit": "167885e38dfe2e4b541628588845f2a46d92b18a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\nindex 8e0fd46f6..532ef44da 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixManager.java\n\n@@ -1005,7 +1005,7 @@ public class ZKHelixManager implements HelixManager, IZkStateListener {\n     synchronized (this) {\n       if (handlers != null) {\n         // get a copy of the list and iterate over the copy list\n-        // in case handler.init() modify the original handler list\n+        // in case handler.init() modifies the original handler list\n         List<CallbackHandler> tmpHandlers = new ArrayList<>(handlers);\n         for (CallbackHandler handler : tmpHandlers) {\n           handler.init();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDE1Ng==", "url": "https://github.com/apache/helix/pull/904#discussion_r395940156", "bodyText": "testConcurrentHandlerProcessing  -> testConcurrentInitCallbackHandlers", "author": "huizhilu", "createdAt": "2020-03-21T00:18:35Z", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_2\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);", "originalCommit": "167885e38dfe2e4b541628588845f2a46d92b18a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\nindex 9ea93580d..92eb3c4e5 100644\n--- a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n+++ b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n\n@@ -468,12 +470,42 @@ public class TestHandleSession extends ZkTestBase {\n     deleteCluster(clusterName);\n   }\n \n+  class MockLiveInstanceChangeListener implements LiveInstanceChangeListener {\n+    private final HelixManager _manager;\n+    private final Set<String> _expectedLiveInstances;\n+\n+    public MockLiveInstanceChangeListener(HelixManager manager,\n+        Set<String> expectedLiveInstanceNames) {\n+      _manager = manager;\n+      _expectedLiveInstances = expectedLiveInstanceNames;\n+    }\n+\n+    @Override\n+    public void onLiveInstanceChange(List<LiveInstance> liveInstances,\n+        NotificationContext changeContext) {\n+      if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+        for (LiveInstance liveInstance : liveInstances) {\n+          if (_expectedLiveInstances.contains(liveInstance.getInstanceName())) {\n+            try {\n+              _manager.addCurrentStateChangeListener(\n+                  (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                    // empty callback\n+                  }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+            } catch (Exception e) {\n+              throw new HelixException(\"Unexpected exception in the test method.\", e);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testConcurrentInitCallbackHandlers() throws Exception {\n     final String clusterName =\n         CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n     TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n-    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    final String spectatorName = TestHelper.getTestMethodName() + \"Spectator\";\n     try {\n       BlockingHandleNewSessionZkHelixManager helixManager =\n           new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDM3OQ==", "url": "https://github.com/apache/helix/pull/904#discussion_r395940379", "bodyText": "testConcurrentHandlerProcessing -> testConcurrentInitCallbackHandlers.\nMay be better to just getTestMethodName().", "author": "huizhilu", "createdAt": "2020-03-21T00:20:19Z", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);", "originalCommit": "167885e38dfe2e4b541628588845f2a46d92b18a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\nindex 9ea93580d..92eb3c4e5 100644\n--- a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n+++ b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n\n@@ -468,12 +470,42 @@ public class TestHandleSession extends ZkTestBase {\n     deleteCluster(clusterName);\n   }\n \n+  class MockLiveInstanceChangeListener implements LiveInstanceChangeListener {\n+    private final HelixManager _manager;\n+    private final Set<String> _expectedLiveInstances;\n+\n+    public MockLiveInstanceChangeListener(HelixManager manager,\n+        Set<String> expectedLiveInstanceNames) {\n+      _manager = manager;\n+      _expectedLiveInstances = expectedLiveInstanceNames;\n+    }\n+\n+    @Override\n+    public void onLiveInstanceChange(List<LiveInstance> liveInstances,\n+        NotificationContext changeContext) {\n+      if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+        for (LiveInstance liveInstance : liveInstances) {\n+          if (_expectedLiveInstances.contains(liveInstance.getInstanceName())) {\n+            try {\n+              _manager.addCurrentStateChangeListener(\n+                  (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                    // empty callback\n+                  }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+            } catch (Exception e) {\n+              throw new HelixException(\"Unexpected exception in the test method.\", e);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testConcurrentInitCallbackHandlers() throws Exception {\n     final String clusterName =\n         CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n     TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n-    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    final String spectatorName = TestHelper.getTestMethodName() + \"Spectator\";\n     try {\n       BlockingHandleNewSessionZkHelixManager helixManager =\n           new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDg1MQ==", "url": "https://github.com/apache/helix/pull/904#discussion_r395940851", "bodyText": "Nit, wrap this long line by concatenation?", "author": "huizhilu", "createdAt": "2020-03-21T00:23:24Z", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_2\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }\n+          });\n+      // Session expire will trigger all callbacks to be init. And the injected liveInstance\n+      // listener will trigger more callbackhandlers to be registered during the init process.\n+      ZkTestHelper.asyncExpireSession(helixManager.getZkClient());\n+      // Create mock live instance znodes to trigger the internal callback handling logic which will\n+      // modify the handler list.\n+      setupLiveInstances(clusterName, new int[] { 1, 2 });\n+      // Start new session handling so the manager will call the initHandler() for initializing all\n+      // existing handlers.\n+      helixManager.proceedNewSessionHandling();\n+      // Ensure the new session has been processed.\n+      TestHelper.verify(() -> helixManager.getHandleNewSessionEndTime() != 0, 3000);\n+      // Verify that both new mock current state callback handlers have been initialized normally.\n+      // Note that if there is concurrent modification that cause errors, one of the callback will\n+      // not be initialized normally.\n+      for (CallbackHandler handler : helixManager.getHandlers()) {\n+        Assert.assertTrue(handler.isReady(),\n+            \"CallbackHandler is not initialized as expected. It might be caused by a ConcurrentModificationException\");", "originalCommit": "167885e38dfe2e4b541628588845f2a46d92b18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NjgzNw==", "url": "https://github.com/apache/helix/pull/904#discussion_r395946837", "bodyText": "This is done by the auto format.", "author": "jiajunwang", "createdAt": "2020-03-21T01:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\nindex 9ea93580d..92eb3c4e5 100644\n--- a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n+++ b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n\n@@ -468,12 +470,42 @@ public class TestHandleSession extends ZkTestBase {\n     deleteCluster(clusterName);\n   }\n \n+  class MockLiveInstanceChangeListener implements LiveInstanceChangeListener {\n+    private final HelixManager _manager;\n+    private final Set<String> _expectedLiveInstances;\n+\n+    public MockLiveInstanceChangeListener(HelixManager manager,\n+        Set<String> expectedLiveInstanceNames) {\n+      _manager = manager;\n+      _expectedLiveInstances = expectedLiveInstanceNames;\n+    }\n+\n+    @Override\n+    public void onLiveInstanceChange(List<LiveInstance> liveInstances,\n+        NotificationContext changeContext) {\n+      if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+        for (LiveInstance liveInstance : liveInstances) {\n+          if (_expectedLiveInstances.contains(liveInstance.getInstanceName())) {\n+            try {\n+              _manager.addCurrentStateChangeListener(\n+                  (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                    // empty callback\n+                  }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+            } catch (Exception e) {\n+              throw new HelixException(\"Unexpected exception in the test method.\", e);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testConcurrentInitCallbackHandlers() throws Exception {\n     final String clusterName =\n         CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n     TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n-    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    final String spectatorName = TestHelper.getTestMethodName() + \"Spectator\";\n     try {\n       BlockingHandleNewSessionZkHelixManager helixManager =\n           new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTQ2Mg==", "url": "https://github.com/apache/helix/pull/904#discussion_r395941462", "bodyText": "Can we wrap this block into a private method to avoid the duplicate code in these 2 listeners?", "author": "huizhilu", "createdAt": "2020-03-21T00:28:05Z", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java", "diffHunk": "@@ -466,6 +468,79 @@ public void testSessionExpiredWhenResetHandlers() throws Exception {\n     deleteCluster(clusterName);\n   }\n \n+  @Test\n+  public void testConcurrentInitCallbackHandlers() throws Exception {\n+    final String clusterName =\n+        CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n+    TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n+    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    try {\n+      BlockingHandleNewSessionZkHelixManager helixManager =\n+          new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n+              InstanceType.SPECTATOR, _gZkClient.getServers());\n+      helixManager.connect();\n+      // Add two mock listeners that will add more callback handlers while handling INIT or CALLBACK event.\n+      // Note that we have to test with 2 separate listeners so one of them has a chance to fail if\n+      // there is a concurrent modification exception.\n+      helixManager.addLiveInstanceChangeListener(\n+          (LiveInstanceChangeListener) (liveInstances, changeContext) -> {\n+            if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+              for (LiveInstance liveInstance : liveInstances) {\n+                if (liveInstance.getInstanceName().equals(\"localhost_1\")) {\n+                  try {\n+                    helixManager.addCurrentStateChangeListener(\n+                        (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                          // empty callback\n+                        }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+                  } catch (Exception e) {\n+                    throw new HelixException(\n+                        \"Unexpected exception in the testConcurrentHandlerProcessing.\", e);\n+                  }\n+                }\n+              }\n+            }", "originalCommit": "167885e38dfe2e4b541628588845f2a46d92b18a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\nindex 9ea93580d..92eb3c4e5 100644\n--- a/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n+++ b/helix-core/src/test/java/org/apache/helix/manager/zk/TestHandleSession.java\n\n@@ -468,12 +470,42 @@ public class TestHandleSession extends ZkTestBase {\n     deleteCluster(clusterName);\n   }\n \n+  class MockLiveInstanceChangeListener implements LiveInstanceChangeListener {\n+    private final HelixManager _manager;\n+    private final Set<String> _expectedLiveInstances;\n+\n+    public MockLiveInstanceChangeListener(HelixManager manager,\n+        Set<String> expectedLiveInstanceNames) {\n+      _manager = manager;\n+      _expectedLiveInstances = expectedLiveInstanceNames;\n+    }\n+\n+    @Override\n+    public void onLiveInstanceChange(List<LiveInstance> liveInstances,\n+        NotificationContext changeContext) {\n+      if (changeContext.getType() != NotificationContext.Type.FINALIZE) {\n+        for (LiveInstance liveInstance : liveInstances) {\n+          if (_expectedLiveInstances.contains(liveInstance.getInstanceName())) {\n+            try {\n+              _manager.addCurrentStateChangeListener(\n+                  (CurrentStateChangeListener) (instanceName, statesInfo, currentStateChangeContext) -> {\n+                    // empty callback\n+                  }, liveInstance.getInstanceName(), liveInstance.getEphemeralOwner());\n+            } catch (Exception e) {\n+              throw new HelixException(\"Unexpected exception in the test method.\", e);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testConcurrentInitCallbackHandlers() throws Exception {\n     final String clusterName =\n         CLUSTER_PREFIX + \"_\" + _className + \"_\" + TestHelper.getTestMethodName();\n     TestHelper.setupEmptyCluster(_gZkClient, clusterName);\n-    final String spectatorName = \"testConcurrentHandlerChangeSpectator\";\n+    final String spectatorName = TestHelper.getTestMethodName() + \"Spectator\";\n     try {\n       BlockingHandleNewSessionZkHelixManager helixManager =\n           new BlockingHandleNewSessionZkHelixManager(clusterName, spectatorName,\n"}}, {"oid": "0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "url": "https://github.com/apache/helix/commit/0a95c9b7902dfb28b57d3d46d62ba23af2884e33", "message": "Address comments.", "committedDate": "2020-03-21T01:12:48Z", "type": "commit"}]}