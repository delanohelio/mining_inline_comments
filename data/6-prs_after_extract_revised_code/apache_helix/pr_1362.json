{"pr_number": 1362, "pr_title": "Move ST message to state validation from executing phase to scheduling phase.", "pr_createdAt": "2020-09-14T18:43:05Z", "pr_url": "https://github.com/apache/helix/pull/1362", "timeline": [{"oid": "1ffa8291da2feae9aeb96f576b057b3003399bcb", "url": "https://github.com/apache/helix/commit/1ffa8291da2feae9aeb96f576b057b3003399bcb", "message": "remove debug log", "committedDate": "2020-09-14T18:46:44Z", "type": "forcePushed"}, {"oid": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "url": "https://github.com/apache/helix/commit/54cc5c1bf937942dafb113ff4f76f44f4253688e", "message": "remove debug log", "committedDate": "2020-09-14T19:10:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTI5MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488205290", "bodyText": "minor: change isMessageStaled to isMessageStale. We didn't on purpose stale the message.", "author": "zhangmeng916", "createdAt": "2020-09-14T20:37:29Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception isMessageStaled(boolean inSchedulerCheck) {", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzMDU2NQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488230565", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-09-14T21:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex 12c975ba9..8630a87f1 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -443,7 +443,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  public Exception isMessageStaled(boolean inSchedulerCheck) {\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjExOQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488206119", "bodyText": "Besides the current_state equals to_state case, is this also a case that we can move to scheduling phase instead of execution phase? That could help reduce even more threads usage.", "author": "zhangmeng916", "createdAt": "2020-09-14T20:39:10Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception isMessageStaled(boolean inSchedulerCheck) {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    Exception err = null;\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      err = new HelixDuplicatedStateTransitionException(String\n+          .format(\"Partition %s current state is same as toState (%s->%s) from message.\",\n+              partitionName, fromState, toState));\n+    } else if (!inSchedulerCheck && fromState != null && !fromState.equals(\"*\") && !fromState", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyMTAzMw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488221033", "bodyText": "TFTR. This case is a bit different than the above one. The handling for these two cases are different.\nFor the first case when toState == currentState, we just treat the task as succeeded and finish task. There is no difference between doing the no-op when executing and bypass the task at scheduling phase.\nIn the second case when currentState != fromState, executor will set the task as failed and report state transition error. Ir will also update ZK.", "author": "xyuanlu", "createdAt": "2020-09-14T21:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MzM2MQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r493193361", "bodyText": "I had an offline sync with Ali. He has submit a PR to fix this issue (#1390). I changed my PR accordingly. We now do the same validation for scheduling stage and execution stage.\nCurrently my PR contains his patch. Will rebase after his PR merged.", "author": "xyuanlu", "createdAt": "2020-09-23T04:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex 12c975ba9..8630a87f1 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -443,7 +443,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  public Exception isMessageStaled(boolean inSchedulerCheck) {\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODA5Mw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488208093", "bodyText": "The return type is confusing. isMessageStaled implies a boolean value as return. You can change the function name to something like validateStaleMessage, etc, or change the return type.", "author": "zhangmeng916", "createdAt": "2020-09-14T20:42:58Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).isMessageStaled(true /*inSchedulerCheck*/);", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex d99f16bbf..96f33d7ef 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -918,10 +918,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n           }\n           if (createHandler instanceof HelixStateTransitionHandler) {\n             // We only check to state if there is no ST task scheduled/executing.\n-            Exception err = ((HelixStateTransitionHandler) createHandler).isMessageStaled(true /*inSchedulerCheck*/);\n-            if (err != null) {\n-              throw err;\n-            }\n+            ((HelixStateTransitionHandler) createHandler).precheckForStaleMessage();\n           }\n           if (stateTransitionHandlers.containsKey(messageTarget)) {\n             // If there are 2 messages in same batch about same partition's state transition,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODYzOQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488208639", "bodyText": "Is this just a log improvement? The logic is not impacted by this PR's change, right?", "author": "zhangmeng916", "createdAt": "2020-09-14T20:44:02Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -980,9 +980,10 @@ public TaskState pollForJobState(String workflowName, String jobName, long timeo\n         && System.currentTimeMillis() < st + timeout);\n \n     if (ctx == null || !allowedStates.contains(ctx.getJobState(jobName))) {\n-      throw new HelixException(\n-          String.format(\"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s\",\n-              workflowName, jobName, allowedStates));\n+      String cur = ctx == null ? \"null\" : ctx.getJobState(jobName).toString();\n+      throw new HelixException(String.format(\n+          \"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s, cur state is: %s\",\n+          workflowName, jobName, allowedStates, cur));", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxNzUwMw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488217503", "bodyText": "Yes it is a log improvement. I personally find the new log more helpful when debugging. Since we are comparing two states, printing out the expected state and actually state could be more useful.", "author": "xyuanlu", "createdAt": "2020-09-14T21:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwODYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "33c40449dacf27541d4350a41f6f87701a225564", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/task/TaskDriver.java b/helix-core/src/main/java/org/apache/helix/task/TaskDriver.java\nindex 4c17ebd39..fe4316647 100644\n--- a/helix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n+++ b/helix-core/src/main/java/org/apache/helix/task/TaskDriver.java\n\n@@ -980,10 +941,15 @@ public class TaskDriver {\n         && System.currentTimeMillis() < st + timeout);\n \n     if (ctx == null || !allowedStates.contains(ctx.getJobState(jobName))) {\n-      String cur = ctx == null ? \"null\" : ctx.getJobState(jobName).toString();\n-      throw new HelixException(String.format(\n-          \"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s, cur state is: %s\",\n-          workflowName, jobName, allowedStates, cur));\n+      WorkflowConfig wfcfg = getWorkflowConfig(workflowName);\n+      JobConfig jobConfig = getJobConfig(jobName);\n+      JobContext jbCtx = getJobContext(jobName);\n+      throw new HelixException(\n+          String.format(\"Workflow \\\"%s\\\" context is null or job \\\"%s\\\" is not in states: %s; ctx is %s, jobState is %s, wf cfg %s, jobcfg %s, jbctx %s\",\n+              workflowName, jobName, allowedStates,\n+              ctx == null ? \"null\" : ctx, ctx != null ? ctx.getJobState(jobName) : \"null\",\n+              wfcfg, jobConfig, jbCtx));\n+\n     }\n \n     return ctx.getJobState(jobName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMTg4MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488211880", "bodyText": "The test name is wrong here.", "author": "zhangmeng916", "createdAt": "2020-09-14T20:50:31Z", "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -377,6 +414,55 @@ public void testDuplicatedMessage() throws InterruptedException {\n     System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n   }\n \n+  @Test()\n+  public void testStaledMessage() throws InterruptedException {\n+    System.out.println(\"START TestHelixTaskExecutor.testStaledMessage()\");\n+    HelixTaskExecutor executor = new HelixTaskExecutor();\n+    HelixManager manager = new MockClusterManager();\n+    HelixDataAccessor dataAccessor = manager.getHelixDataAccessor();\n+    PropertyKey.Builder keyBuilder = dataAccessor.keyBuilder();\n+\n+    TestStateTransitionHandlerFactory stateTransitionFactory =\n+        new TestStateTransitionHandlerFactory(Message.MessageType.STATE_TRANSITION.name(), 1000);\n+    executor.registerMessageHandlerFactory(Message.MessageType.STATE_TRANSITION.name(),\n+        stateTransitionFactory);\n+\n+    NotificationContext changeContext = new NotificationContext(manager);\n+    List<Message> msgList = new ArrayList<Message>();\n+\n+    int nMsgs = 1;\n+    String instanceName = manager.getInstanceName();\n+    for (int i = 0; i < nMsgs; i++) {\n+      Message msg =\n+          new Message(Message.MessageType.STATE_TRANSITION.name(), UUID.randomUUID().toString());\n+      msg.setTgtSessionId(manager.getSessionId());\n+      msg.setCreateTimeStamp((long) i);\n+      msg.setTgtName(\"Localhost_1123\");\n+      msg.setSrcName(\"127.101.1.23_2234\");\n+      msg.setPartitionName(\"Partition\");\n+      msg.setResourceName(\"testStaledMessageResource\");\n+      msg.setStateModelDef(\"DummyMasterSlave\");\n+      msg.setFromState(\"SLAVE\");\n+      msg.setToState(\"MASTER\");\n+      dataAccessor.setProperty(msg.getKey(keyBuilder, instanceName), msg);\n+      msgList.add(msg);\n+    }\n+\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+            nMsgs);\n+\n+    changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+    executor.onMessage(instanceName, msgList, changeContext);\n+\n+    Thread.sleep(200);\n+\n+    // The message should be ignored since toState is the same as current state.\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+        0);\n+\n+    System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\nindex 47ff3aa7d..3d629dcc7 100644\n--- a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n+++ b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\n@@ -460,7 +457,7 @@ public class TestHelixTaskExecutor {\n     Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n         0);\n \n-    System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n+    System.out.println(\"END TestHelixTaskExecutor.testStaledMessage()\");\n   }\n \n   @Test()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMzk0MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488213940", "bodyText": "How soon is the message gets deleted from instance?", "author": "zhangmeng916", "createdAt": "2020-09-14T20:54:31Z", "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -377,6 +414,55 @@ public void testDuplicatedMessage() throws InterruptedException {\n     System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n   }\n \n+  @Test()\n+  public void testStaledMessage() throws InterruptedException {\n+    System.out.println(\"START TestHelixTaskExecutor.testStaledMessage()\");\n+    HelixTaskExecutor executor = new HelixTaskExecutor();\n+    HelixManager manager = new MockClusterManager();\n+    HelixDataAccessor dataAccessor = manager.getHelixDataAccessor();\n+    PropertyKey.Builder keyBuilder = dataAccessor.keyBuilder();\n+\n+    TestStateTransitionHandlerFactory stateTransitionFactory =\n+        new TestStateTransitionHandlerFactory(Message.MessageType.STATE_TRANSITION.name(), 1000);\n+    executor.registerMessageHandlerFactory(Message.MessageType.STATE_TRANSITION.name(),\n+        stateTransitionFactory);\n+\n+    NotificationContext changeContext = new NotificationContext(manager);\n+    List<Message> msgList = new ArrayList<Message>();\n+\n+    int nMsgs = 1;\n+    String instanceName = manager.getInstanceName();\n+    for (int i = 0; i < nMsgs; i++) {\n+      Message msg =\n+          new Message(Message.MessageType.STATE_TRANSITION.name(), UUID.randomUUID().toString());\n+      msg.setTgtSessionId(manager.getSessionId());\n+      msg.setCreateTimeStamp((long) i);\n+      msg.setTgtName(\"Localhost_1123\");\n+      msg.setSrcName(\"127.101.1.23_2234\");\n+      msg.setPartitionName(\"Partition\");\n+      msg.setResourceName(\"testStaledMessageResource\");\n+      msg.setStateModelDef(\"DummyMasterSlave\");\n+      msg.setFromState(\"SLAVE\");\n+      msg.setToState(\"MASTER\");\n+      dataAccessor.setProperty(msg.getKey(keyBuilder, instanceName), msg);\n+      msgList.add(msg);\n+    }\n+\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n+            nMsgs);\n+\n+    changeContext.setChangeType(HelixConstants.ChangeType.MESSAGE);\n+    executor.onMessage(instanceName, msgList, changeContext);\n+\n+    Thread.sleep(200);\n+\n+    // The message should be ignored since toState is the same as current state.\n+    Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),", "originalCommit": "54cc5c1bf937942dafb113ff4f76f44f4253688e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNTUxNg==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488225516", "bodyText": "In scheduling phase, HelixUtil.removeMessageFromZK will be called as soon as we hit the HelixDuplicatedStateTransitionException exception. There is no thread queueing in between. So I think it should be the IO delay time.", "author": "xyuanlu", "createdAt": "2020-09-14T21:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMzk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyOTc0MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488229740", "bodyText": "ok, that's fine. Asked cause I saw the 200ms sleep, just to confirm it immediately happens.", "author": "zhangmeng916", "createdAt": "2020-09-14T21:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMzk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\nindex 47ff3aa7d..3d629dcc7 100644\n--- a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n+++ b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\n@@ -460,7 +457,7 @@ public class TestHelixTaskExecutor {\n     Assert.assertEquals(dataAccessor.getChildValues(keyBuilder.messages(instanceName), true).size(),\n         0);\n \n-    System.out.println(\"END TestHelixTaskExecutor.testDuplicatedMessage()\");\n+    System.out.println(\"END TestHelixTaskExecutor.testStaledMessage()\");\n   }\n \n   @Test()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjE5OQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488302199", "bodyText": "Usually, our validate method follows the same convention. It either returns boolean or void (in this case, throw an exception if invalid). I suggest we follow the same logic here.", "author": "jiajunwang", "createdAt": "2020-09-14T23:58:41Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,35 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  public Exception validateStaleMessage(boolean inSchedulerCheck) {", "originalCommit": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxOTUzNQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488319535", "bodyText": "Passing an additional boolean parameter is hard for the user to call. I suggest doing the following,\n\ncreate a private method \"private void validateStaleMessage(boolean checkFromState) {...}\"\ncreate a public method \"public void precheckForStaleMessage() {validateStaleMessage(true)}\"", "author": "jiajunwang", "createdAt": "2020-09-15T00:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMzgwMw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488323803", "bodyText": "TFTR. Will update.", "author": "xyuanlu", "createdAt": "2020-09-15T01:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMjE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex ee58a75f0..8630a87f1 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -443,7 +443,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  public Exception validateStaleMessage(boolean inSchedulerCheck) {\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDU2MQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488314561", "bodyText": "I think we want to \"continue\" instead of throwing the Exception for more graceful handling.\nWe can do this:\n\"reportAndRemoveMessage(message, accessor, instanceName, ProcessedMessageState.DISCARDED);\"", "author": "jiajunwang", "createdAt": "2020-09-15T00:41:50Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;", "originalCommit": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMjQ0MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488322440", "bodyText": "We do continue when catch the exception (line 957). We could change the message if I think if the wording is not accurate in the catch block.", "author": "xyuanlu", "createdAt": "2020-09-15T01:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA0MzAwNw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r494043007", "bodyText": "try-catch is relatively expensive. And it might be misused if the caught exception is too wildly defined. So my suggestion is to handle the error case with regular logic as long as it is possible.", "author": "jiajunwang", "createdAt": "2020-09-24T05:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA4Njg4OQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r497086889", "bodyText": "Updated.", "author": "xyuanlu", "createdAt": "2020-09-29T22:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 9e9eee2a9..96f33d7ef 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -918,10 +918,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n           }\n           if (createHandler instanceof HelixStateTransitionHandler) {\n             // We only check to state if there is no ST task scheduled/executing.\n-            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n-            if (err != null) {\n-              throw err;\n-            }\n+            ((HelixStateTransitionHandler) createHandler).precheckForStaleMessage();\n           }\n           if (stateTransitionHandlers.containsKey(messageTarget)) {\n             // If there are 2 messages in same batch about same partition's state transition,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTI5NA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488315294", "bodyText": "Same for this one. It is the existing logic, but this exception will be processed by the following catch, which records the error as \"Failed to create message handler...\". This seems to be inaccurate.", "author": "jiajunwang", "createdAt": "2020-09-15T00:44:18Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;\n+            }\n+          }\n+          if (stateTransitionHandlers.containsKey(messageTarget)) {\n+            // If there are 2 messages in same batch about same partition's state transition,\n+            // the later one is discarded\n+            Message duplicatedMessage = stateTransitionHandlers.get(messageTarget)._message;\n+            throw new HelixException(String.format(", "originalCommit": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MzQxMQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r493193411", "bodyText": "Updated.", "author": "xyuanlu", "createdAt": "2020-09-23T04:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 9e9eee2a9..96f33d7ef 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -918,10 +918,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n           }\n           if (createHandler instanceof HelixStateTransitionHandler) {\n             // We only check to state if there is no ST task scheduled/executing.\n-            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n-            if (err != null) {\n-              throw err;\n-            }\n+            ((HelixStateTransitionHandler) createHandler).precheckForStaleMessage();\n           }\n           if (stateTransitionHandlers.containsKey(messageTarget)) {\n             // If there are 2 messages in same batch about same partition's state transition,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjYwOA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488316608", "bodyText": "Just curious, why we want this to happen later than the other 2?", "author": "jiajunwang", "createdAt": "2020-09-15T00:48:51Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n+            if (err != null) {\n+              throw err;\n+            }\n+          }\n+          if (stateTransitionHandlers.containsKey(messageTarget)) {", "originalCommit": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMzc0NA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488323744", "bodyText": "Please correct me if I am wrong. I think if we have an old O->S and a new S->M with current state is S. We do want to ignore the O->S and continue with S->M.", "author": "xyuanlu", "createdAt": "2020-09-15T01:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgwNjE4Mw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r491806183", "bodyText": "So I think the logic changed here. Previously we always discard the later one (so it's possible we choose the stale one, which is the earlier one). But now we do a filtering first based on current state, and if the message is stale, we will directly delete it, and there won't be duplicated message exception at all. Is this the logic you think?", "author": "zhangmeng916", "createdAt": "2020-09-21T05:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjYwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyNjEzNA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r492326134", "bodyText": "Yes. We do a filtering first based on current state, and if the message is stale, we will directly delete it. (and we will throw exception as well, but not at the execution stage as before)\nAlthough there is no existing bug complaining 2 valid new messages at the same time, I think we should not assume there will be no duplicated messages so we should still keep the 3rd check.", "author": "xyuanlu", "createdAt": "2020-09-21T20:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 9e9eee2a9..96f33d7ef 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -918,10 +918,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n           }\n           if (createHandler instanceof HelixStateTransitionHandler) {\n             // We only check to state if there is no ST task scheduled/executing.\n-            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n-            if (err != null) {\n-              throw err;\n-            }\n+            ((HelixStateTransitionHandler) createHandler).precheckForStaleMessage();\n           }\n           if (stateTransitionHandlers.containsKey(messageTarget)) {\n             // If there are 2 messages in same batch about same partition's state transition,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDU4MQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488320581", "bodyText": "What will be wrong if we do validateStaleMessage(false) here? If it works, then we can have a common logic, right?", "author": "jiajunwang", "createdAt": "2020-09-15T01:02:39Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java", "diffHunk": "@@ -919,9 +912,25 @@ public void onMessage(String instanceName, List<Message> messages,\n             // discard the message. Controller will resend if this is a valid message\n             throw new HelixException(String.format(\n                 \"Another state transition for %s:%s is in progress with msg: %s, p2p: %s, read: %d, current:%d. Discarding %s->%s message\",\n-                message.getResourceName(), message.getPartitionName(), msg.getMsgId(), String.valueOf(msg.isRelayMessage()),\n-                msg.getReadTimeStamp(), System.currentTimeMillis(), message.getFromState(),\n-                message.getToState()));\n+                message.getResourceName(), message.getPartitionName(), msg.getMsgId(),\n+                String.valueOf(msg.isRelayMessage()), msg.getReadTimeStamp(),\n+                System.currentTimeMillis(), message.getFromState(), message.getToState()));\n+          }\n+          if (createHandler instanceof HelixStateTransitionHandler) {\n+            // We only check to state if there is no ST task scheduled/executing.\n+            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);", "originalCommit": "fcaa9c8f5ad166f6c6d9a01b530dc156fc9c3bc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyNTYxNw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r488325617", "bodyText": "The handling for these two cases are different.\nFor the first case when toState == currentState, we just treat the task as succeeded and finish task. There is no difference between doing the no-op when executing and bypass the task at scheduling phase.\nIn the second case when currentState != fromState, executor will set the task as failed and report state transition error. Ir will also update ZK.\nHaving same logic causes a test fail. Controller keeps sending many 'INIT->RUNNING' message when currentState is TASK_ERROR if we don't report task error. Currently task error is reported in HelixStateTransitionHandler.", "author": "xyuanlu", "createdAt": "2020-09-15T01:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5MzU1OA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r493193558", "bodyText": "I had an offline sync with Ali. He has submit a PR to fix this issue (#1390). I changed my PR accordingly. We now do the same validation for scheduling stage and execution stage.\nCurrently my PR contains his patch. Will rebase after his PR merged.", "author": "xyuanlu", "createdAt": "2020-09-23T04:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMDU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\nindex 9e9eee2a9..96f33d7ef 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixTaskExecutor.java\n\n@@ -918,10 +918,7 @@ public class HelixTaskExecutor implements MessageListener, TaskExecutor {\n           }\n           if (createHandler instanceof HelixStateTransitionHandler) {\n             // We only check to state if there is no ST task scheduled/executing.\n-            Exception err = ((HelixStateTransitionHandler) createHandler).validateStaleMessage(true /*inSchedulerCheck*/);\n-            if (err != null) {\n-              throw err;\n-            }\n+            ((HelixStateTransitionHandler) createHandler).precheckForStaleMessage();\n           }\n           if (stateTransitionHandlers.containsKey(messageTarget)) {\n             // If there are 2 messages in same batch about same partition's state transition,\n"}}, {"oid": "dd92565c35f880e95ad9d90ed4ef724b257701ec", "url": "https://github.com/apache/helix/commit/dd92565c35f880e95ad9d90ed4ef724b257701ec", "message": "address comments", "committedDate": "2020-09-15T01:56:55Z", "type": "forcePushed"}, {"oid": "43eec8a4d6c2871d6c3ea2a52f041453f1701542", "url": "https://github.com/apache/helix/commit/43eec8a4d6c2871d6c3ea2a52f041453f1701542", "message": "address comments", "committedDate": "2020-09-15T02:13:38Z", "type": "forcePushed"}, {"oid": "748d599f01b30b9b6483882a7c2b6fa4e9652acb", "url": "https://github.com/apache/helix/commit/748d599f01b30b9b6483882a7c2b6fa4e9652acb", "message": "address comments", "committedDate": "2020-09-15T02:22:33Z", "type": "forcePushed"}, {"oid": "911cce77470432229c4997dd5bac878985bdc5fc", "url": "https://github.com/apache/helix/commit/911cce77470432229c4997dd5bac878985bdc5fc", "message": "address comments", "committedDate": "2020-09-15T17:10:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1ODUxOA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r489758518", "bodyText": "Why we need this precheck flag? Two checks in onMessage and HelixTask execution validation logic should be same", "author": "junkaixue", "createdAt": "2020-09-16T21:15:08Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,36 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      throw new HelixDuplicatedStateTransitionException(String\n+          .format(\"Partition %s current state is same as toState (%s->%s) from message.\",\n+              partitionName, fromState, toState));\n+    } else if (!isPreCheck && fromState != null && !fromState.equals(\"*\") && !fromState", "originalCommit": "911cce77470432229c4997dd5bac878985bdc5fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMjI3OQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490412279", "bodyText": "TFTR.\nOriginally in HelixStateTransitionHandler, handling for these two cases are different.\nFor the first case when toState == currentState, we just treat the task as succeeded and finish task. There is no difference between doing the no-op when executing and bypass the task at scheduling phase.\nIn the second case when currentState != fromState, executor will set the task as failed and report state transition error. Ir will also update ZK.\nHaving same logic causes a test fail. Controller keeps sending many 'INIT->RUNNING' message when currentState is TASK_ERROR if we don't report task error. Currently task error is reported in HelixStateTransitionHandler.", "author": "xyuanlu", "createdAt": "2020-09-17T16:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1ODUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0ODk2NQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r492248965", "bodyText": "For the test you talked about, I think we may need to understand why we keep sending message INIT -> RUNNING. Because once the message has been DROPPED, controller should refresh current state and get the TASK_ERROR state. Then we should have some message like TASK_ERROR -> INIT or something, if we miss it, we should fix the logic to make it more robust. And I am OK to not fix it in this PR. But if that's the case, let's propose another PR for that. Otherwise, this is not a complete scenario. For regular resource management, it is not a complete filtering logic.", "author": "junkaixue", "createdAt": "2020-09-21T18:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1ODUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE5Mjg3NQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r493192875", "bodyText": "I had an offline sync with Ali. He has submit a PR to fix this issue (#1390). I changed my PR accordingly. We now do the same validation for scheduling stage and execution stage.\nCurrently my PR contains his patch. Will rebase after his PR merged.", "author": "xyuanlu", "createdAt": "2020-09-23T04:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1ODUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "e1c787841ae381ad960801b5a19b0f8143809921", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex 4d2b5a60b..25d0c21eb 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -443,7 +443,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+  public void validateStaleMessage() throws Exception {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTA2Mg==", "url": "https://github.com/apache/helix/pull/1362#discussion_r489759062", "bodyText": "This is not duplicate state transition. Could be some STs are old in pending queue just not match what target state we have now.", "author": "junkaixue", "createdAt": "2020-09-16T21:16:12Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -463,6 +442,36 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n \n   }\n \n+  // Verify the fromState and current state of the stateModel.\n+  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+    String fromState = _message.getFromState();\n+    String toState = _message.getToState();\n+    String partitionName = _message.getPartitionName();\n+\n+    // state in _currentStateDelta uses current state from state model. It has the\n+    // most up-to-date. current state. In case currentState in stateModel is null,\n+    // partition is in initial state and we using it as current state.\n+    // Defined in HelixStateMachineEngine.\n+    String state = _currentStateDelta.getState(partitionName);\n+\n+    if (toState.equalsIgnoreCase(state)) {\n+      // To state equals current state, we can just ignore the message\n+      throw new HelixDuplicatedStateTransitionException(String", "originalCommit": "911cce77470432229c4997dd5bac878985bdc5fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNzA1MA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490407050", "bodyText": "If it already been processed (in READ or UNPROCESSABLE state) then we would ignore the ST message before this check. (line 856 in HelixTaskExecutor)", "author": "xyuanlu", "createdAt": "2020-09-17T16:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3MDQxNg==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490470416", "bodyText": "What I am trying to say is not use HelixDuplicatedStateTransitionException, because there could be other cases for this scenario. If we check log, we may get confused for new check logic.", "author": "junkaixue", "createdAt": "2020-09-17T18:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3Njg4NQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490476885", "bodyText": "Thanks for the follow up.\nIn my understanding, this message must be a new message generated by controller, maybe caused by reading the old currentState etc.\nSince this is a new message, doesn't this count as DuplicatedStateTransition?", "author": "xyuanlu", "createdAt": "2020-09-17T18:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e1c787841ae381ad960801b5a19b0f8143809921", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex 4d2b5a60b..25d0c21eb 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -443,7 +443,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  private void validateStaleMessage (boolean isPreCheck) throws Exception {\n+  public void validateStaleMessage() throws Exception {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NDU2NA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490754564", "bodyText": "equals() should be used to check the string names are the same.\n!= checks if they are the same object: same memory address, etc..", "author": "huizhilu", "createdAt": "2020-09-18T07:27:16Z", "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -232,11 +248,29 @@ public HelixTaskResult handleMessage() throws InterruptedException {\n       @Override\n       public void onError(Exception e, ErrorCode code, ErrorType type) {\n       }\n+\n+      @Override\n+      public void precheckForStaleMessage() throws Exception {\n+        if (_testIsMessageStaled) {\n+          super.precheckForStaleMessage();\n+        }\n+      }\n     }\n \n     @Override\n     public MessageHandler createHandler(Message message, NotificationContext context) {\n-      return new TestStateTransitionMessageHandler(message, context);\n+      if (message.getResourceName()!=\"testStaledMessageResource\") {", "originalCommit": "911cce77470432229c4997dd5bac878985bdc5fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTkzOA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r492321938", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-09-21T20:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NDU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "486015cb00514fc02dbb9044cd914bb06b722617", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\nindex 3d629dcc7..b47a5d73a 100644\n--- a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n+++ b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\n@@ -259,7 +259,7 @@ public class TestHelixTaskExecutor {\n \n     @Override\n     public MessageHandler createHandler(Message message, NotificationContext context) {\n-      if (message.getResourceName()!=\"testStaledMessageResource\") {\n+      if (!message.getResourceName().equals(\"testStaledMessageResource\")) {\n         return new TestStateTransitionMessageHandler(message, context);\n       } else {\n         CurrentState currentStateDelta = new CurrentState(message.getResourceName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r490756395", "bodyText": "Can you help understand why we need to assert instead of throwing an InterruptedException?", "author": "huizhilu", "createdAt": "2020-09-18T07:31:12Z", "path": "helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java", "diffHunk": "@@ -212,18 +213,33 @@ public TestStateTransitionHandlerFactory(String msgType, long delay) {\n       _delay = delay;\n     }\n \n-    class TestStateTransitionMessageHandler extends MessageHandler {\n+    class TestStateTransitionMessageHandler extends HelixStateTransitionHandler {\n+      boolean _testIsMessageStaled;\n+\n       public TestStateTransitionMessageHandler(Message message, NotificationContext context) {\n-        super(message, context);\n+        super(null, null, message, context, null);\n+        _testIsMessageStaled = false;\n+      }\n+\n+      public TestStateTransitionMessageHandler(Message message, NotificationContext context,\n+          CurrentState currentStateDelta) {\n+        super(null, null, message, context, currentStateDelta);\n+        _testIsMessageStaled = true;\n+\n+\n       }\n \n       @Override\n-      public HelixTaskResult handleMessage() throws InterruptedException {\n+      public HelixTaskResult handleMessage() {\n         HelixTaskResult result = new HelixTaskResult();\n         _processedMsgIds.put(_message.getMsgId(), _message.getMsgId());\n         if (_delay > 0) {\n           System.out.println(\"Sleeping...\" + _delay);\n-          Thread.sleep(_delay);\n+          try{\n+            Thread.sleep(_delay);\n+          } catch (Exception e) {\n+            assert (false);", "originalCommit": "911cce77470432229c4997dd5bac878985bdc5fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMDg5Mw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r492320893", "bodyText": "I think the reason is that the base handleMessage does not throw exception. The try-catch block here is only for handle exceptions in test.", "author": "xyuanlu", "createdAt": "2020-09-21T20:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTEwNQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r495429105", "bodyText": "I don't think we need this change, as throwing an InterruptedException is good enough and cleaner to fail the test, unless the upstream caller catches and swallows the InterruptedException", "author": "huizhilu", "createdAt": "2020-09-26T07:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxNTI4OQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r496215289", "bodyText": "Please correct me if I am wrong.\nFor the InterruptedException, we need to either catch it or add a declaration in method signature. Since the HelixStateTransitionHandler.handleMessage() does not throw exception, we could only do a try-catch here.", "author": "xyuanlu", "createdAt": "2020-09-28T20:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "46af411dedbbf668b97e6d0a7e87d5e50c21d05d", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\nindex 3d629dcc7..680673967 100644\n--- a/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n+++ b/helix-core/src/test/java/org/apache/helix/messaging/handling/TestHelixTaskExecutor.java\n\n@@ -225,8 +225,6 @@ public class TestHelixTaskExecutor {\n           CurrentState currentStateDelta) {\n         super(null, null, message, context, currentStateDelta);\n         _testIsMessageStaled = true;\n-\n-\n       }\n \n       @Override\n"}}, {"oid": "486015cb00514fc02dbb9044cd914bb06b722617", "url": "https://github.com/apache/helix/commit/486015cb00514fc02dbb9044cd914bb06b722617", "message": "address comment", "committedDate": "2020-09-21T20:17:49Z", "type": "forcePushed"}, {"oid": "e1c787841ae381ad960801b5a19b0f8143809921", "url": "https://github.com/apache/helix/commit/e1c787841ae381ad960801b5a19b0f8143809921", "message": "add Ali's patch", "committedDate": "2020-09-23T01:33:08Z", "type": "forcePushed"}, {"oid": "7608742260b7308e27b6bc242764ae6a4815bc77", "url": "https://github.com/apache/helix/commit/7608742260b7308e27b6bc242764ae6a4815bc77", "message": "add Ali's patch", "committedDate": "2020-09-23T04:36:28Z", "type": "forcePushed"}, {"oid": "97c39142695a48ab7dc3f3145370e11b5b1a9755", "url": "https://github.com/apache/helix/commit/97c39142695a48ab7dc3f3145370e11b5b1a9755", "message": "add Ali's patch", "committedDate": "2020-09-25T00:08:02Z", "type": "forcePushed"}, {"oid": "93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "url": "https://github.com/apache/helix/commit/93bb78b0d58c4bed7c673f8ddd5262e69ee3b702", "message": "add Ali's patch", "committedDate": "2020-09-25T01:10:02Z", "type": "forcePushed"}, {"oid": "a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "url": "https://github.com/apache/helix/commit/a0b288139c6ef8e9207a969dbce3f5ff097ae54a", "message": "add Ali's patch", "committedDate": "2020-09-25T01:13:32Z", "type": "forcePushed"}, {"oid": "96becaa76f5d30eab30076349e990efe64572748", "url": "https://github.com/apache/helix/commit/96becaa76f5d30eab30076349e990efe64572748", "message": "add Ali's patch", "committedDate": "2020-09-25T01:15:02Z", "type": "forcePushed"}, {"oid": "46af411dedbbf668b97e6d0a7e87d5e50c21d05d", "url": "https://github.com/apache/helix/commit/46af411dedbbf668b97e6d0a7e87d5e50c21d05d", "message": "add Ali's patch", "committedDate": "2020-09-25T01:17:17Z", "type": "forcePushed"}, {"oid": "25fb5ce8eb474e1c6701a1d4838044c30875d147", "url": "https://github.com/apache/helix/commit/25fb5ce8eb474e1c6701a1d4838044c30875d147", "message": "no throw in non-exceptional cases", "committedDate": "2020-09-25T18:26:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r495429734", "bodyText": "staleMessageValidator sounds more like a class/variable name. How about changing the method name to a verb style: validateStaleMessage() (it does something)?", "author": "huizhilu", "createdAt": "2020-09-26T08:00:29Z", "path": "helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java", "diffHunk": "@@ -460,7 +438,33 @@ public void onError(Exception e, ErrorCode code, ErrorType type) {\n       StateTransitionError error = new StateTransitionError(type, code, e);\n       _stateModel.rollbackOnError(_message, _notificationContext, error);\n     }\n+  }\n+\n+  // Verify the fromState and current state of the stateModel.\n+  public Exception staleMessageValidator() {", "originalCommit": "25fb5ce8eb474e1c6701a1d4838044c30875d147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjczOA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r498412738", "bodyText": "In my understanding, validateXXX is a function throws exception and returns void or boolean. Since I have a function that returns an exception, I am not sure about the name validateXXX.", "author": "xyuanlu", "createdAt": "2020-10-01T17:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0OTMyNw==", "url": "https://github.com/apache/helix/pull/1362#discussion_r498549327", "bodyText": "nit, it would be more graceful to define a ValidationResult class and contain a boolean (pass or not) and an optional Exception. Especially as a public method. Is there a chance we can make it protected or package private?", "author": "jiajunwang", "createdAt": "2020-10-01T22:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1MDI4NA==", "url": "https://github.com/apache/helix/pull/1362#discussion_r499050284", "bodyText": "We are not using the boolean return value. May I ask is this for a cleaner interface purpose for further usage?", "author": "xyuanlu", "createdAt": "2020-10-02T21:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4MTEyMQ==", "url": "https://github.com/apache/helix/pull/1362#discussion_r501281121", "bodyText": "Updated.", "author": "xyuanlu", "createdAt": "2020-10-07T20:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQyOTczNA=="}], "type": "inlineReview", "revised_code": {"commit": "705382c62037995b205d7307bb6abf819c274113", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\nindex 8a457ee7d..bdb0d0bad 100644\n--- a/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/messaging/handling/HelixStateTransitionHandler.java\n\n@@ -441,7 +452,7 @@ public class HelixStateTransitionHandler extends MessageHandler {\n   }\n \n   // Verify the fromState and current state of the stateModel.\n-  public Exception staleMessageValidator() {\n+  public StaleMessageValidateResult staleMessageValidator() {\n     String fromState = _message.getFromState();\n     String toState = _message.getToState();\n     String partitionName = _message.getPartitionName();\n"}}, {"oid": "4b985e7f14c7272a8e0cda75336ce06ed7441516", "url": "https://github.com/apache/helix/commit/4b985e7f14c7272a8e0cda75336ce06ed7441516", "message": "no throw in non-exceptional cases", "committedDate": "2020-10-01T20:24:22Z", "type": "forcePushed"}, {"oid": "705382c62037995b205d7307bb6abf819c274113", "url": "https://github.com/apache/helix/commit/705382c62037995b205d7307bb6abf819c274113", "message": "adress comments", "committedDate": "2020-10-06T01:18:01Z", "type": "forcePushed"}, {"oid": "33c40449dacf27541d4350a41f6f87701a225564", "url": "https://github.com/apache/helix/commit/33c40449dacf27541d4350a41f6f87701a225564", "message": "add stale check when scheduling ST task", "committedDate": "2020-10-07T03:14:13Z", "type": "commit"}, {"oid": "0036951aa0c003f935d6ffc2da104887c9f74c38", "url": "https://github.com/apache/helix/commit/0036951aa0c003f935d6ffc2da104887c9f74c38", "message": "add test", "committedDate": "2020-10-07T03:14:13Z", "type": "commit"}, {"oid": "a983cbb3426cdf5499b92e8ecbe07522dc9cf227", "url": "https://github.com/apache/helix/commit/a983cbb3426cdf5499b92e8ecbe07522dc9cf227", "message": "investigate test", "committedDate": "2020-10-07T03:15:45Z", "type": "commit"}, {"oid": "5d520da3f4ced14cb64c94ff3ab23532f34e30fe", "url": "https://github.com/apache/helix/commit/5d520da3f4ced14cb64c94ff3ab23532f34e30fe", "message": "fix", "committedDate": "2020-10-07T03:15:59Z", "type": "commit"}, {"oid": "deb26c7c4e8cff29f555f71dbd6f389c78747f52", "url": "https://github.com/apache/helix/commit/deb26c7c4e8cff29f555f71dbd6f389c78747f52", "message": "remove log", "committedDate": "2020-10-07T03:15:59Z", "type": "commit"}, {"oid": "5e4f098fac427b94f81b5742a654bfd1a967cd08", "url": "https://github.com/apache/helix/commit/5e4f098fac427b94f81b5742a654bfd1a967cd08", "message": "remove debug log", "committedDate": "2020-10-07T03:20:55Z", "type": "commit"}, {"oid": "b3538fd4ca710f6fe283cc5bb31f47e0f1751753", "url": "https://github.com/apache/helix/commit/b3538fd4ca710f6fe283cc5bb31f47e0f1751753", "message": "address comments", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "485c1903e19933deedba6711476ab6c5b0067084", "url": "https://github.com/apache/helix/commit/485c1903e19933deedba6711476ab6c5b0067084", "message": "address comments", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "9c6c91eaa4256a3d469bd8eea6207e1e0f3bc89d", "url": "https://github.com/apache/helix/commit/9c6c91eaa4256a3d469bd8eea6207e1e0f3bc89d", "message": "address comment", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "6728d25c513e67697bdbd3c6a4ed0656b950bc01", "url": "https://github.com/apache/helix/commit/6728d25c513e67697bdbd3c6a4ed0656b950bc01", "message": "c1", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "16d12fa5ec16e1b24bfeb41ea908cd1e3dccb211", "url": "https://github.com/apache/helix/commit/16d12fa5ec16e1b24bfeb41ea908cd1e3dccb211", "message": "add Ali's patch", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "bf37de674139b0a8d155c5501bbaf63557a58b4b", "url": "https://github.com/apache/helix/commit/bf37de674139b0a8d155c5501bbaf63557a58b4b", "message": "no throw in non-exceptional cases", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "56f0ecb37ebbce1c480efe531cac372b16caa413", "url": "https://github.com/apache/helix/commit/56f0ecb37ebbce1c480efe531cac372b16caa413", "message": "adress comments", "committedDate": "2020-10-07T03:20:59Z", "type": "commit"}, {"oid": "56f0ecb37ebbce1c480efe531cac372b16caa413", "url": "https://github.com/apache/helix/commit/56f0ecb37ebbce1c480efe531cac372b16caa413", "message": "adress comments", "committedDate": "2020-10-07T03:20:59Z", "type": "forcePushed"}]}