{"pr_number": 1077, "pr_title": "Add close method to Helix lock", "pr_createdAt": "2020-06-09T18:21:09Z", "pr_url": "https://github.com/apache/helix/pull/1077", "timeline": [{"oid": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "url": "https://github.com/apache/helix/commit/f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "message": "Add close method", "committedDate": "2020-06-09T18:22:25Z", "type": "commit"}, {"oid": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "url": "https://github.com/apache/helix/commit/f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "message": "Add close method", "committedDate": "2020-06-09T18:22:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Nzg3Nw==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437647877", "bodyText": "I suggest making this interface AutoClosable, then you implement close() naturally.", "author": "jiajunwang", "createdAt": "2020-06-09T18:53:09Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java", "diffHunk": "@@ -49,4 +49,9 @@\n    * false if the user is not the lock owner or the lock doesn't have a owner\n    */\n   boolean isCurrentOwner();\n+\n+  /**\n+   * Close the lock and release resources\n+   */\n+  void close();", "originalCommit": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3MzEwOQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437773109", "bodyText": "As discussed offline, to avoid unexpected close of the lock, we will not implement AutoClosable interface for now.", "author": "mgao0", "createdAt": "2020-06-09T23:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Nzg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e21b4bc96786c508ff0c14b6e10f81f430546afa", "chunk": "diff --git a/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java b/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\nindex 9fd65448f..3adbb75c4 100644\n--- a/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\n+++ b/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\n\n@@ -51,7 +51,8 @@ public interface DistributedLock {\n   boolean isCurrentOwner();\n \n   /**\n-   * Close the lock and release resources\n+   * Call this method to close the lock's zookeeper connection\n+   * The lock has to be unlocked or expired before this method can be called\n    */\n   void close();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0ODYzNQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437648635", "bodyText": "You don't call unlock() here?", "author": "jiajunwang", "createdAt": "2020-06-09T18:54:36Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java", "diffHunk": "@@ -115,6 +113,11 @@ public boolean isCurrentOwner() {\n         .getTimeout());\n   }\n \n+  @Override\n+  public void close() {\n+    _baseDataAccessor.close();", "originalCommit": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3Mzk5OQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437773999", "bodyText": "Discussed offline. Won't unlock the lock inside close(), but will check to make sure the lock is unlocked when the user calls close().", "author": "mgao0", "createdAt": "2020-06-09T23:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0ODYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e21b4bc96786c508ff0c14b6e10f81f430546afa", "chunk": "diff --git a/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java b/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\nindex f4a14c2b4..4b322e273 100644\n--- a/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\n+++ b/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\n\n@@ -115,6 +115,9 @@ public class ZKDistributedNonblockingLock implements DistributedLock {\n \n   @Override\n   public void close() {\n+    if (isCurrentOwner()) {\n+      throw new HelixException(\"Please unlock the lock before closing it.\");\n+    }\n     _baseDataAccessor.close();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTIzMw==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437649233", "bodyText": "Add a test case about close() to validate:\n\nlock released properly. The releases information should be right (if we have any).\nthe connection has been ended.", "author": "jiajunwang", "createdAt": "2020-06-09T18:55:31Z", "path": "helix-lock/src/test/java/org/apache/helix/lock/helix/TestZKHelixNonblockingLock.java", "diffHunk": "@@ -71,9 +73,14 @@ public void beforeMethod() {\n     Assert.assertFalse(_gZkClient.exists(_lockPath));\n   }\n \n+  @AfterSuite\n+  public void afterSuite() throws IOException {\n+    _lock.close();", "originalCommit": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3NDIzNA==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437774234", "bodyText": "I added two tests. One is trying to close the lock when it's unlocked, and one is trying to close it when it's locked.", "author": "mgao0", "createdAt": "2020-06-09T23:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTIzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTg1MQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437649851", "bodyText": "So we would expect lock users to explicitly call this one? This is a bit unintuitive, when put together with the other APIs that are intended for lock purpose only.", "author": "zhangmeng916", "createdAt": "2020-06-09T18:56:30Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java", "diffHunk": "@@ -49,4 +49,9 @@\n    * false if the user is not the lock owner or the lock doesn't have a owner\n    */\n   boolean isCurrentOwner();\n+\n+  /**\n+   * Close the lock and release resources\n+   */\n+  void close();", "originalCommit": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3Mzc1NQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437773755", "bodyText": "Discussed offline, for now we will let user to explicitly call the close method, since we cannot determine all the use cases where we should close the lock right now. After we have a clearer picture of all the features, we can try to do this for our users.", "author": "mgao0", "createdAt": "2020-06-09T23:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e21b4bc96786c508ff0c14b6e10f81f430546afa", "chunk": "diff --git a/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java b/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\nindex 9fd65448f..3adbb75c4 100644\n--- a/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\n+++ b/helix-lock/src/main/java/org/apache/helix/lock/DistributedLock.java\n\n@@ -51,7 +51,8 @@ public interface DistributedLock {\n   boolean isCurrentOwner();\n \n   /**\n-   * Close the lock and release resources\n+   * Call this method to close the lock's zookeeper connection\n+   * The lock has to be unlocked or expired before this method can be called\n    */\n   void close();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNjk5OQ==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437726999", "bodyText": "Can you fix the typo \"lcok\" in this file?", "author": "zhangmeng916", "createdAt": "2020-06-09T21:15:24Z", "path": "helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java", "diffHunk": "@@ -54,8 +53,8 @@\n    * @param lockMsg the reason for having this lock", "originalCommit": "f6e4c9564fca5d9a6039998186c87e4eb64cb7eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3NDQzNA==", "url": "https://github.com/apache/helix/pull/1077#discussion_r437774434", "bodyText": "Updated. Thanks for checking!", "author": "mgao0", "createdAt": "2020-06-09T23:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNjk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e21b4bc96786c508ff0c14b6e10f81f430546afa", "chunk": "diff --git a/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java b/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\nindex f4a14c2b4..4b322e273 100644\n--- a/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\n+++ b/helix-lock/src/main/java/org/apache/helix/lock/helix/ZKDistributedNonblockingLock.java\n\n@@ -49,7 +49,7 @@ public class ZKDistributedNonblockingLock implements DistributedLock {\n    * Initialize the lock with user provided information, e.g.,cluster, scope, etc.\n    * @param scope the scope to lock\n    * @param zkAddress the zk address the cluster connects to\n-   * @param timeout the timeout period of the lcok\n+   * @param timeout the timeout period of the lock\n    * @param lockMsg the reason for having this lock\n    * @param userId a universal unique userId for lock owner identity\n    */\n"}}, {"oid": "e21b4bc96786c508ff0c14b6e10f81f430546afa", "url": "https://github.com/apache/helix/commit/e21b4bc96786c508ff0c14b6e10f81f430546afa", "message": "Update close method", "committedDate": "2020-06-09T22:42:43Z", "type": "commit"}, {"oid": "c7ddc05379c5ffa4d6f58f85c9739282bf3eb2bd", "url": "https://github.com/apache/helix/commit/c7ddc05379c5ffa4d6f58f85c9739282bf3eb2bd", "message": "Add tests", "committedDate": "2020-06-09T23:10:04Z", "type": "commit"}, {"oid": "c7ddc05379c5ffa4d6f58f85c9739282bf3eb2bd", "url": "https://github.com/apache/helix/commit/c7ddc05379c5ffa4d6f58f85c9739282bf3eb2bd", "message": "Add tests", "committedDate": "2020-06-09T23:10:04Z", "type": "forcePushed"}]}