{"pr_number": 941, "pr_title": "Fix unexpceted partition movements in the CrushEd strategy.", "pr_createdAt": "2020-04-09T17:28:54Z", "pr_url": "https://github.com/apache/helix/pull/941", "timeline": [{"oid": "9018289ca51005282622678768dfddbddbe1043e", "url": "https://github.com/apache/helix/commit/9018289ca51005282622678768dfddbddbe1043e", "message": "Fix unexpceted partition movements in the CrushEd strategy.\n\nThis is a workaround fix to ensure backward compatibility. An additonal cache map is used to keep the stable partition list so as to remove the randomness in the agorithm input.\nNote that the right fix would be cleaner that we sort the list inside the strategy class. However, that will also change all existing cluster assignments in production.", "committedDate": "2020-04-09T06:13:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDg4Ng==", "url": "https://github.com/apache/helix/pull/941#discussion_r406854886", "bodyText": "When do you think we can fix it permanently?", "author": "lei-xia", "createdAt": "2020-04-10T17:16:44Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java", "diffHunk": "@@ -64,7 +64,12 @@ public IdealState computeNewIdealState(String resourceName,\n \n     LOG.info(\"Computing IdealState for \" + resourceName);\n \n-    List<String> partitions = new ArrayList<>(currentIdealState.getPartitionSet());\n+    // This is part of the backward compatible workaround to fix\n+    // https://github.com/apache/helix/issues/940.\n+    // TODO: remove the workaround once we are able to apply the simple fix without majorly", "originalCommit": "9018289ca51005282622678768dfddbddbe1043e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzkyNA==", "url": "https://github.com/apache/helix/pull/941#discussion_r406867924", "bodyText": "There are 2 plans in my mind:\n\nEncourage customers to use WAGED. Needs to wait until WAGED is stable.\nAdding a CRUSHedV2 with the sorting logic, and leave V1 as it is now. Then deprecate V1. For this one, I would prefer to do it after we find all issues in the CRUSHed otherwise we might have V3 later.\n\nAfter compare between these 2 options, I personally prefer the first option. That's why I actually removed the CRUSHedV2 after I added it to my PR. What's your opinion?", "author": "jiajunwang", "createdAt": "2020-04-10T17:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\nindex 6d67f6aa4..cb323a33f 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AutoRebalancer.java\n\n@@ -64,12 +64,7 @@ public class AutoRebalancer extends AbstractRebalancer<ResourceControllerDataPro\n \n     LOG.info(\"Computing IdealState for \" + resourceName);\n \n-    // This is part of the backward compatible workaround to fix\n-    // https://github.com/apache/helix/issues/940.\n-    // TODO: remove the workaround once we are able to apply the simple fix without majorly\n-    // TODO: impacting user's clusters.\n-    List<String> partitions =\n-        clusterData.getOrSetStablePartitionList(resourceName, currentIdealState.getPartitionSet());\n+    List<String> partitions = getStablePartitionList(clusterData, currentIdealState);\n     String stateModelName = currentIdealState.getStateModelDefRef();\n     StateModelDefinition stateModelDef = clusterData.getStateModelDef(stateModelName);\n     if (stateModelDef == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzAxMQ==", "url": "https://github.com/apache/helix/pull/941#discussion_r406857011", "bodyText": "This method is confusing. Another option is to call this method when the cluster data cache refresh IdealStates, this can keep all logic within data cache.\ni.e,\nsplit to two methods: 1) refreshPartitionList(), this is private.  and 2) getPartitionList(), this is public and used by the rebalancer (and probably in other stages too where a partition list is needed, so there will be consistent over all stages).", "author": "lei-xia", "createdAt": "2020-04-10T17:21:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java", "diffHunk": "@@ -294,4 +304,32 @@ public void clearMonitoringRecords() {\n     _missingTopStateMap.clear();\n     _lastTopStateLocationMap.clear();\n   }\n+\n+  /**\n+   * If the list items are the same, return the stable partition list cache. Otherwise, refresh\n+   * the cache with new list and return the new list.\n+   * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n+   *\n+   * @param resourceName\n+   * @param newPartitionSet\n+   */\n+  public List<String> getOrSetStablePartitionList(String resourceName,", "originalCommit": "9018289ca51005282622678768dfddbddbe1043e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MjczNA==", "url": "https://github.com/apache/helix/pull/941#discussion_r406962734", "bodyText": "Changed with some additional modification to ensure safety.", "author": "jiajunwang", "createdAt": "2020-04-10T22:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java b/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\nindex 171455b9c..f614c0657 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\n\n@@ -306,30 +314,31 @@ public class ResourceControllerDataProvider extends BaseControllerDataProvider {\n   }\n \n   /**\n-   * If the list items are the same, return the stable partition list cache. Otherwise, refresh\n-   * the cache with new list and return the new list.\n+   * Return the cached stable partition list of the specified resource. If no such cached item,\n+   * return empty list.\n    * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n    *\n    * @param resourceName\n-   * @param newPartitionSet\n    */\n-  public List<String> getOrSetStablePartitionList(String resourceName,\n-      Set<String> newPartitionSet) {\n-    List<String> cachedPartitions = _stablePartitionListCache.get(resourceName);\n-    if (cachedPartitions == null || cachedPartitions.size() != newPartitionSet.size()\n-        || !cachedPartitions.containsAll(newPartitionSet)) {\n-      _stablePartitionListCache.put(resourceName, new ArrayList<>(newPartitionSet));\n-    }\n-    return _stablePartitionListCache.get(resourceName);\n+  public List<String> getStablePartitionList(String resourceName) {\n+    return _stablePartitionListCache.getOrDefault(resourceName, Collections.EMPTY_LIST);\n   }\n \n   /**\n-   * Retain the valid partition list cache items and remove the non-exist resources' cache.\n+   * Refresh the stable partition list cache items and remove the non-exist resources' cache.\n    * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n    *\n-   * @param resourceNames a list of the valid resources.\n+   * @param idealStateMap\n    */\n-  public void retainStablePartitionListCache(Set<String> resourceNames) {\n-    _stablePartitionListCache.keySet().retainAll(resourceNames);\n+  final void refreshStablePartitionList(Map<String, IdealState> idealStateMap) {\n+    _stablePartitionListCache.keySet().retainAll(idealStateMap.keySet());\n+    for (String resourceName : idealStateMap.keySet()) {\n+      Set<String> newPartitionSet = idealStateMap.get(resourceName).getPartitionSet();\n+      List<String> cachedPartitionList = getStablePartitionList(resourceName);\n+      if (cachedPartitionList.size() != newPartitionSet.size() || !newPartitionSet\n+          .containsAll(cachedPartitionList)) {\n+        _stablePartitionListCache.put(resourceName, new ArrayList<>(newPartitionSet));\n+      }\n+    }\n   }\n }\n"}}, {"oid": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "url": "https://github.com/apache/helix/commit/bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "message": "Address comment.", "committedDate": "2020-04-10T21:51:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNTk4Mw==", "url": "https://github.com/apache/helix/pull/941#discussion_r407625983", "bodyText": "Keep in mind \"newPartitionSet.containsAll(cachedPartitionList))\" could cause a performance (delay) issue, the operation is O(N^2), given if we have large number of partitions.", "author": "lei-xia", "createdAt": "2020-04-13T18:07:49Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java", "diffHunk": "@@ -294,4 +312,33 @@ public void clearMonitoringRecords() {\n     _missingTopStateMap.clear();\n     _lastTopStateLocationMap.clear();\n   }\n+\n+  /**\n+   * Return the cached stable partition list of the specified resource. If no such cached item,\n+   * return empty list.\n+   * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n+   *\n+   * @param resourceName\n+   */\n+  public List<String> getStablePartitionList(String resourceName) {\n+    return _stablePartitionListCache.getOrDefault(resourceName, Collections.EMPTY_LIST);\n+  }\n+\n+  /**\n+   * Refresh the stable partition list cache items and remove the non-exist resources' cache.\n+   * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n+   *\n+   * @param idealStateMap\n+   */\n+  final void refreshStablePartitionList(Map<String, IdealState> idealStateMap) {\n+    _stablePartitionListCache.keySet().retainAll(idealStateMap.keySet());\n+    for (String resourceName : idealStateMap.keySet()) {\n+      Set<String> newPartitionSet = idealStateMap.get(resourceName).getPartitionSet();\n+      List<String> cachedPartitionList = getStablePartitionList(resourceName);\n+      if (cachedPartitionList.size() != newPartitionSet.size() || !newPartitionSet\n+          .containsAll(cachedPartitionList)) {", "originalCommit": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NzAwNA==", "url": "https://github.com/apache/helix/pull/941#discussion_r407647004", "bodyText": "Why it is O(N^2)? The containsAll of the set is looping on the input list and then call contains() to check. So it should be O(N). Note that we are copying the input set to a list anyway. So this won't change the latency dramatically. The O() calculation has the same result.\nBut I agree that this might still cause an additional delay. Since this is related to the later 2 comments, let's keep in the same threads. I will resolve this one.", "author": "jiajunwang", "createdAt": "2020-04-13T18:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "47c85a08cec56c6a0524d92f02ad53314872b348", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java b/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\nindex f614c0657..e8e5738da 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/dataproviders/ResourceControllerDataProvider.java\n\n@@ -314,14 +314,14 @@ public class ResourceControllerDataProvider extends BaseControllerDataProvider {\n   }\n \n   /**\n-   * Return the cached stable partition list of the specified resource. If no such cached item,\n-   * return empty list.\n    * This is for a backward compatible workaround to fix https://github.com/apache/helix/issues/940.\n    *\n    * @param resourceName\n+   * @return the cached stable partition list of the specified resource. If no such cached item,\n+   * return null.\n    */\n   public List<String> getStablePartitionList(String resourceName) {\n-    return _stablePartitionListCache.getOrDefault(resourceName, Collections.EMPTY_LIST);\n+    return _stablePartitionListCache.get(resourceName);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyODMxNw==", "url": "https://github.com/apache/helix/pull/941#discussion_r407628317", "bodyText": "Let us think about if we  have any other way to do this.  We actually found containsAll() has been a big performance issue before, specially if you compare a set with a list (which take O(N) to iterator).", "author": "lei-xia", "createdAt": "2020-04-13T18:12:06Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java", "diffHunk": "@@ -417,4 +417,25 @@ public int compare(String ins1, String ins2) {\n       return p1.compareTo(p2);\n     }\n   }\n+\n+  // This is for a backward compatible workaround to fix\n+  // https://github.com/apache/helix/issues/940.\n+  // TODO: remove the workaround once we are able to apply the simple fix without majorly\n+  // TODO: impacting user's clusters.\n+  protected List<String> getStablePartitionList(ResourceControllerDataProvider clusterData,\n+      IdealState currentIdealState) {\n+    List<String> partitions =\n+        clusterData.getStablePartitionList(currentIdealState.getResourceName());\n+    Set<String> currentPartitionSet = currentIdealState.getPartitionSet();\n+    if (partitions.size() != currentPartitionSet.size() || !currentPartitionSet\n+        .containsAll(partitions)) {", "originalCommit": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0ODc3OQ==", "url": "https://github.com/apache/helix/pull/941#discussion_r407648779", "bodyText": "I thought about this, but the other ways are not safe or creating too many additional dependencies. For example, if IS has not been changed, then we don't update the partition lists.\nBut there is a big assumption there. Doing that might cause some bugs in the future.\nI don't have a better idea now. Please suggest.", "author": "jiajunwang", "createdAt": "2020-04-13T18:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyODMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MDU3MA==", "url": "https://github.com/apache/helix/pull/941#discussion_r407660570", "bodyText": "Run a quick profile about containsAll() of Set.\n  public static void main(String[] args) {\n    Set<String> set;\n    List<String> input = new ArrayList<>();\n    Random ran = new Random();\n    for (int i = 0; i < 10000000; i++)  {\n      input.add(\"test\" + ran.nextInt() + i);\n    }\n    long start = System.currentTimeMillis();\n    set = new HashSet<>(input);\n    long mid = System.currentTimeMillis();\n    set.containsAll(input);\n    long end = System.currentTimeMillis();\n    System.out.println(\"Phase I: \" + (mid - start) + \" Phase II: \" + (end - mid));\n  }\n\nThe result is Phase I: 5560 Phase II: 1242\nSo containsAll is not a major concern here. I think.\nActually, I also compared with List.containsAll(), that one is for sure O(N^2). It took forever to run in my laptop.", "author": "jiajunwang", "createdAt": "2020-04-13T19:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyODMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "47c85a08cec56c6a0524d92f02ad53314872b348", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\nindex 9bdb8d724..9416c7ee0 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\n@@ -426,14 +426,12 @@ public abstract class AbstractRebalancer<T extends BaseControllerDataProvider> i\n       IdealState currentIdealState) {\n     List<String> partitions =\n         clusterData.getStablePartitionList(currentIdealState.getResourceName());\n-    Set<String> currentPartitionSet = currentIdealState.getPartitionSet();\n-    if (partitions.size() != currentPartitionSet.size() || !currentPartitionSet\n-        .containsAll(partitions)) {\n+    if (partitions == null) {\n+      Set<String> currentPartitionSet = currentIdealState.getPartitionSet();\n       // In theory, the cached stable partition list must have contains all items in the current\n       // partition set. Add one more check to avoid any intermediate change that modifies the list.\n-      LOG.warn(\"The current partition set {} has been modified and it is different from the cached \"\n-              + \"stable list {}. Use the current partition set.\", currentPartitionSet.toString(),\n-          partitions.toString());\n+      LOG.warn(\"The current partition set {} has not been cached in the stable partition list. \"\n+              + \"Use the IdealState partition set directly.\", currentPartitionSet.toString());\n       partitions = new ArrayList<>(currentPartitionSet);\n     }\n     return partitions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyODk2OA==", "url": "https://github.com/apache/helix/pull/941#discussion_r407628968", "bodyText": "Why do  we compare here again? You are saying the IdealState used here could be different from  cluster data cache?", "author": "lei-xia", "createdAt": "2020-04-13T18:13:18Z", "path": "helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java", "diffHunk": "@@ -417,4 +417,25 @@ public int compare(String ins1, String ins2) {\n       return p1.compareTo(p2);\n     }\n   }\n+\n+  // This is for a backward compatible workaround to fix\n+  // https://github.com/apache/helix/issues/940.\n+  // TODO: remove the workaround once we are able to apply the simple fix without majorly\n+  // TODO: impacting user's clusters.\n+  protected List<String> getStablePartitionList(ResourceControllerDataProvider clusterData,", "originalCommit": "bbea75cb2e398c6ecd40689b4e8cc60b99b901e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTM3Nw==", "url": "https://github.com/apache/helix/pull/941#discussion_r407675377", "bodyText": "If the method is put in a different class, it would be safer to protect from the OO design perspective. In detail, after we put refreshStablePartitionList as private into ResourceControllerDataProvider, we don't have a mechanism to guarantee refreshStablePartitionList() is called and the refresh is done completely.\nIt is optional though, especially it is a workaround. If it is a big concern to you, I can remove it.", "author": "jiajunwang", "createdAt": "2020-04-13T19:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyODk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "47c85a08cec56c6a0524d92f02ad53314872b348", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\nindex 9bdb8d724..9416c7ee0 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/rebalancer/AbstractRebalancer.java\n\n@@ -426,14 +426,12 @@ public abstract class AbstractRebalancer<T extends BaseControllerDataProvider> i\n       IdealState currentIdealState) {\n     List<String> partitions =\n         clusterData.getStablePartitionList(currentIdealState.getResourceName());\n-    Set<String> currentPartitionSet = currentIdealState.getPartitionSet();\n-    if (partitions.size() != currentPartitionSet.size() || !currentPartitionSet\n-        .containsAll(partitions)) {\n+    if (partitions == null) {\n+      Set<String> currentPartitionSet = currentIdealState.getPartitionSet();\n       // In theory, the cached stable partition list must have contains all items in the current\n       // partition set. Add one more check to avoid any intermediate change that modifies the list.\n-      LOG.warn(\"The current partition set {} has been modified and it is different from the cached \"\n-              + \"stable list {}. Use the current partition set.\", currentPartitionSet.toString(),\n-          partitions.toString());\n+      LOG.warn(\"The current partition set {} has not been cached in the stable partition list. \"\n+              + \"Use the IdealState partition set directly.\", currentPartitionSet.toString());\n       partitions = new ArrayList<>(currentPartitionSet);\n     }\n     return partitions;\n"}}, {"oid": "47c85a08cec56c6a0524d92f02ad53314872b348", "url": "https://github.com/apache/helix/commit/47c85a08cec56c6a0524d92f02ad53314872b348", "message": "Address comments.", "committedDate": "2020-04-13T19:39:44Z", "type": "commit"}]}