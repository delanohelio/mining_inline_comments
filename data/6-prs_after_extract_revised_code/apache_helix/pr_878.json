{"pr_number": 878, "pr_title": "Get the MinActiveReplica from Resource Config and Idea State", "pr_createdAt": "2020-03-09T18:10:18Z", "pr_url": "https://github.com/apache/helix/pull/878", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTg2Ng==", "url": "https://github.com/apache/helix/pull/878#discussion_r389921866", "bodyText": "I see a lot of duplicate code here -\ncould we just create an array of all ResourceConfig.ResourceConfigPropertys and just copy the fields?", "author": "narendly", "createdAt": "2020-03-09T19:47:38Z", "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,89 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    // Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+    // 1. The fields shall have exactly the same meaning.\n+    // 2. The value shall be fully compatible, no additional calculation involved.\n+    // 3. Resource Config items have a high priority.\n+\n+    // Return a newly constructed resource config to avoid the original value be modified.\n+    ResourceConfig mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n+          idealState.getInstanceGroupTag());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n+              idealState.getMaxPartitionsPerInstance());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.NUM_PARTITIONS.name())) {\n+      mergedZNRecord\n+          .setIntField(ResourceConfigProperty.NUM_PARTITIONS.name(), idealState.getNumPartitions());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n+              idealState.getStateModelDefRef());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n+              idealState.getStateModelFactoryName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n+          idealState.getReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name())) {\n+      mergedZNRecord.setIntField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n+          idealState.getMinActiveReplicas());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name())) {\n+      mergedZNRecord.setBooleanField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n+          idealState.isEnabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name())) {\n+      mergedZNRecord\n+          .setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n+              idealState.getResourceGroupName());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name())) {\n+      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n+          idealState.getResourceType());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n+              idealState.isExternalViewDisabled());\n+    }\n+    if (null == mergedZNRecord\n+        .getSimpleField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name())) {\n+      mergedZNRecord\n+          .setBooleanField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n+              idealState.isDelayRebalanceEnabled());\n+    }", "originalCommit": "62f94d8e89632a0a965f3b2ca3f1b8b2914f887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NTg2OA==", "url": "https://github.com/apache/helix/pull/878#discussion_r389975868", "bodyText": "I tried.\n\nAlthough the field keys are the same, the get logic is different. If I copypaste directly based on the field names, I might change the IS logic. For example, getReplicas(). It would be safer that I call the explicit IdealState get methods.\nUnfortunately, this will lead to a similar code. But if we take this as a temporary backward compatible workaround, I think it is acceptable. For the correctness.\nThe 2 lists are not exactly the same. DELAY_REBALANCE_DISABLED in IS and DELAY_REBALANCE_ENABLED in the ResourceConfig.\n\nTo reduce this complex, I propose to add some setXXXIfAbsent in the ZNRecord class. Will update soon.", "author": "jiajunwang", "createdAt": "2020-03-09T21:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java b/helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\nindex d94264d85..5e03695ed 100644\n--- a/helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n+++ b/helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java\n\n@@ -846,83 +846,66 @@ public class ResourceConfig extends HelixProperty {\n    * For backward compatibility, propagate the critical simple fields from the IdealState to\n    * the Resource Config.\n    * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   *\n+   * Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+   *  1. The fields shall have exactly the same meaning.\n+   *  2. The value shall be fully compatible, no additional calculation involved.\n+   *  3. Resource Config items have a high priority.\n    */\n   public static ResourceConfig mergeIdealStateWithResourceConfig(\n       final ResourceConfig resourceConfig, final IdealState idealState) {\n-    // Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n-    // 1. The fields shall have exactly the same meaning.\n-    // 2. The value shall be fully compatible, no additional calculation involved.\n-    // 3. Resource Config items have a high priority.\n-\n-    // Return a newly constructed resource config to avoid the original value be modified.\n-    ResourceConfig mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n-    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name())) {\n-      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n-          idealState.getInstanceGroupTag());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name())) {\n-      mergedZNRecord\n-          .setIntField(ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n-              idealState.getMaxPartitionsPerInstance());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.NUM_PARTITIONS.name())) {\n-      mergedZNRecord\n-          .setIntField(ResourceConfigProperty.NUM_PARTITIONS.name(), idealState.getNumPartitions());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name())) {\n-      mergedZNRecord\n-          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n-              idealState.getStateModelDefRef());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name())) {\n-      mergedZNRecord\n-          .setSimpleField(ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n-              idealState.getStateModelFactoryName());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name())) {\n-      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n-          idealState.getReplicas());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name())) {\n-      mergedZNRecord.setIntField(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n-          idealState.getMinActiveReplicas());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name())) {\n-      mergedZNRecord.setBooleanField(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n-          idealState.isEnabled());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name())) {\n-      mergedZNRecord\n-          .setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n-              idealState.getResourceGroupName());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name())) {\n-      mergedZNRecord.setSimpleField(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n-          idealState.getResourceType());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name())) {\n-      mergedZNRecord\n-          .setBooleanField(ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n-              idealState.isExternalViewDisabled());\n-    }\n-    if (null == mergedZNRecord\n-        .getSimpleField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name())) {\n-      mergedZNRecord\n-          .setBooleanField(ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n-              idealState.isDelayRebalanceEnabled());\n+    if (idealState == null) {\n+      return resourceConfig;\n+    }\n+    ResourceConfig mergedResourceConfig;\n+    if (resourceConfig != null) {\n+      if (!resourceConfig.getResourceName().equals(idealState.getResourceName())) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Cannot merge the IdealState of resource %s with the ResourceConfig of resource %s\",\n+            resourceConfig.getResourceName(), idealState.getResourceName()));\n+      }\n+      // Copy the resource config to avoid the original value being modified unexpectedly.\n+      mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    } else {\n+      // If no resource config specified, construct one based on the Idealstate.\n+      mergedResourceConfig = new ResourceConfig(idealState.getResourceName());\n     }\n+    // Fill the compatible Idealstate fields to the ResourceConfig if possible.\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();\n+    mergedZNRecord\n+        .setSimpleFieldIfAbsent(ResourceConfig.ResourceConfigProperty.INSTANCE_GROUP_TAG.name(),\n+            idealState.getInstanceGroupTag());\n+    mergedZNRecord.setIntFieldIfAbsent(\n+        ResourceConfig.ResourceConfigProperty.MAX_PARTITIONS_PER_INSTANCE.name(),\n+        idealState.getMaxPartitionsPerInstance());\n+    mergedZNRecord.setIntFieldIfAbsent(ResourceConfigProperty.NUM_PARTITIONS.name(),\n+        idealState.getNumPartitions());\n+    mergedZNRecord\n+        .setSimpleFieldIfAbsent(ResourceConfig.ResourceConfigProperty.STATE_MODEL_DEF_REF.name(),\n+            idealState.getStateModelDefRef());\n+    mergedZNRecord.setSimpleFieldIfAbsent(\n+        ResourceConfig.ResourceConfigProperty.STATE_MODEL_FACTORY_NAME.name(),\n+        idealState.getStateModelFactoryName());\n+    mergedZNRecord.setSimpleFieldIfAbsent(ResourceConfig.ResourceConfigProperty.REPLICAS.name(),\n+        idealState.getReplicas());\n+    mergedZNRecord\n+        .setIntFieldIfAbsent(ResourceConfig.ResourceConfigProperty.MIN_ACTIVE_REPLICAS.name(),\n+            idealState.getMinActiveReplicas());\n+    mergedZNRecord\n+        .setBooleanFieldIfAbsent(ResourceConfig.ResourceConfigProperty.HELIX_ENABLED.name(),\n+            idealState.isEnabled());\n+    mergedZNRecord\n+        .setSimpleFieldIfAbsent(ResourceConfig.ResourceConfigProperty.RESOURCE_GROUP_NAME.name(),\n+            idealState.getResourceGroupName());\n+    mergedZNRecord\n+        .setSimpleFieldIfAbsent(ResourceConfig.ResourceConfigProperty.RESOURCE_TYPE.name(),\n+            idealState.getResourceType());\n+    mergedZNRecord.setBooleanFieldIfAbsent(\n+        ResourceConfig.ResourceConfigProperty.EXTERNAL_VIEW_DISABLED.name(),\n+        idealState.isExternalViewDisabled());\n+    mergedZNRecord.setBooleanFieldIfAbsent(\n+        ResourceConfig.ResourceConfigProperty.DELAY_REBALANCE_ENABLED.name(),\n+        idealState.isDelayRebalanceEnabled());\n     return mergedResourceConfig;\n   }\n }\n"}}, {"oid": "77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "url": "https://github.com/apache/helix/commit/77a62b7b13f9dafdb46a4c276854e4a9d3343daf", "message": "Add test.", "committedDate": "2020-03-09T21:28:15Z", "type": "forcePushed"}, {"oid": "45d582090a58d919c6d10ecedffe4d05093a35e0", "url": "https://github.com/apache/helix/commit/45d582090a58d919c6d10ecedffe4d05093a35e0", "message": "Add test.", "committedDate": "2020-03-10T01:12:03Z", "type": "forcePushed"}, {"oid": "0d7b8ea04dbef90586a1c54182f52f9b978cdce1", "url": "https://github.com/apache/helix/commit/0d7b8ea04dbef90586a1c54182f52f9b978cdce1", "message": "Migrate the IdealState usage to read Resource Config for the delayed rebalance.\n\nCurrently, the same configuration item can be configured in both Resource Config and Ideal State. In theory, the Resource Config is the right place.\nThis is the first step to migrate the IdealState usage to read the Resource Config.\nMoving forward, IdealState should not be a method for the controller to take input. And any ideal state update to the IS nodes won't trigger a rebalance pipeline.", "committedDate": "2020-03-10T17:59:44Z", "type": "commit"}, {"oid": "de40fc40d6c38c3ce32f2b40b047081fb687c8c5", "url": "https://github.com/apache/helix/commit/de40fc40d6c38c3ce32f2b40b047081fb687c8c5", "message": "Add setXXXIfAbsent methods to the ZNRecord for simplifying code.", "committedDate": "2020-03-10T17:59:44Z", "type": "commit"}, {"oid": "6c9bb43ecc8383df7284e0c3e30fdb625f02741a", "url": "https://github.com/apache/helix/commit/6c9bb43ecc8383df7284e0c3e30fdb625f02741a", "message": "Add test.", "committedDate": "2020-03-10T17:59:44Z", "type": "commit"}, {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da", "url": "https://github.com/apache/helix/commit/2564adeda51fc4350d240b03dd2eba0d82a928da", "message": "Add redundent paramter IdealState to the DelayedRebalanceUtil.getMinActiveReplica() before we fully migrate the configs to the resource config to avoid incorrect usage.", "committedDate": "2020-03-10T21:33:30Z", "type": "commit"}, {"oid": "2564adeda51fc4350d240b03dd2eba0d82a928da", "url": "https://github.com/apache/helix/commit/2564adeda51fc4350d240b03dd2eba0d82a928da", "message": "Add redundent paramter IdealState to the DelayedRebalanceUtil.getMinActiveReplica() before we fully migrate the configs to the resource config to avoid incorrect usage.", "committedDate": "2020-03-10T21:33:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDY1OQ==", "url": "https://github.com/apache/helix/pull/878#discussion_r390630659", "bodyText": "Can we make a list of constants for these necessary field and use a loop to do the merge instead of have these code?", "author": "junkaixue", "createdAt": "2020-03-10T21:47:13Z", "path": "helix-core/src/main/java/org/apache/helix/model/ResourceConfig.java", "diffHunk": "@@ -842,5 +841,72 @@ public ResourceConfig build() {\n           _mapFields, _p2pMessageEnabled, _partitionCapacityMap);\n     }\n   }\n+\n+  /**\n+   * For backward compatibility, propagate the critical simple fields from the IdealState to\n+   * the Resource Config.\n+   * Eventually, Resource Config should be the only metadata node that contains the required information.\n+   *\n+   * Note that the config fields get updated in this method shall be fully compatible with ones in the IdealState.\n+   *  1. The fields shall have exactly the same meaning.\n+   *  2. The value shall be fully compatible, no additional calculation involved.\n+   *  3. Resource Config items have a high priority.\n+   */\n+  public static ResourceConfig mergeIdealStateWithResourceConfig(\n+      final ResourceConfig resourceConfig, final IdealState idealState) {\n+    if (idealState == null) {\n+      return resourceConfig;\n+    }\n+    ResourceConfig mergedResourceConfig;\n+    if (resourceConfig != null) {\n+      if (!resourceConfig.getResourceName().equals(idealState.getResourceName())) {\n+        throw new IllegalArgumentException(String.format(\n+            \"Cannot merge the IdealState of resource %s with the ResourceConfig of resource %s\",\n+            resourceConfig.getResourceName(), idealState.getResourceName()));\n+      }\n+      // Copy the resource config to avoid the original value being modified unexpectedly.\n+      mergedResourceConfig = new ResourceConfig(resourceConfig.getRecord());\n+    } else {\n+      // If no resource config specified, construct one based on the Idealstate.\n+      mergedResourceConfig = new ResourceConfig(idealState.getResourceName());\n+    }\n+    // Fill the compatible Idealstate fields to the ResourceConfig if possible.\n+    ZNRecord mergedZNRecord = mergedResourceConfig.getRecord();", "originalCommit": "2564adeda51fc4350d240b03dd2eba0d82a928da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMTM0NQ==", "url": "https://github.com/apache/helix/pull/878#discussion_r390631345", "bodyText": "Please check my reply to Hunter's question. The get methods are different.", "author": "jiajunwang", "createdAt": "2020-03-10T21:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDY1OQ=="}], "type": "inlineReview", "revised_code": null}]}