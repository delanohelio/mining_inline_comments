{"pr_number": 1068, "pr_title": "Remove waiting on message deletion if current state is already updated", "pr_createdAt": "2020-06-05T22:59:48Z", "pr_url": "https://github.com/apache/helix/pull/1068", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437058553", "bodyText": "When \"pendingMessage != null\" but \"currentState.equalsIgnoreCase(pendingMessage.getToState())\", the cancellation message will be replaced with the new ST message right? I think it works. But would it be better to send both of the cancellation message and the new one?\nIf we do this, will the participant discards the cancellation message, or proceed with both of them? It would be safer from Helix perspective since the pending message will be removed for sure with cancellation. But it could be complicated from the participant perspective since I think we might need some sync control on the participant side.", "author": "jiajunwang", "createdAt": "2020-06-08T23:39:21Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -220,7 +220,8 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n                 generateCancellationMessageForPendingMessage(desiredState, currentState, nextState, pendingMessage,\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n-          } else {\n+          }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {", "originalCommit": "6e1295a547ed4978b5ce5691b5fe71338a99e3e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzY1MA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437063650", "bodyText": "Actually if looking at the generateCancellationMessageForPendingMessage logic, there is\nelse if (currentState.equalsIgnoreCase(pendingState)) { LogUtil.logInfo(logger, _eventId, \"Message hasn't been removed for \" + instanceName + \" to transit \" + resource .getResourceName() + \".\" + partition.getPartitionName() + \" to \" + pendingState + \", desiredState: \" + desiredState + \", isRelay: \" + pendingMessage.isRelayMessage()); }\nSo actually when currentState equals pendingState, there is no cancellation message generated.", "author": "zhangmeng916", "createdAt": "2020-06-08T23:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODQ3NA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437068474", "bodyText": "Then it means the decision of canceling or not is purely in the generateCancellationMessageForPendingMessage(). And we don't have the option to send both of the messages for now.", "author": "jiajunwang", "createdAt": "2020-06-09T00:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MjE1OA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437072158", "bodyText": "I was thinking if there is a way to avoid the same condition being checked inside generateCancellationMessageForPendingMessage and here. But it seems that there is no easy way.\nHowever, to avoid the possible unexpected overwrite (for instance, if we change the private method logic later), I think we can change as following,\nOption one,\nif (message == null && (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState()))) {\nWhich means if there is no cancellation message and the the pending message has been done then we generate new ST.\nOption two,\nRemove generateCancellationMessageForPendingMessage and move all if-else conditions back to the caller methods. Because you do need to handle those conditions with different logic. That seems to be a clearer logic.", "author": "jiajunwang", "createdAt": "2020-06-09T00:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjIyNA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437152224", "bodyText": "GenerateCancellationMessageForPendingMessage is used in different places. Doesn't look good to move that function back. We can guard it with \"message == null\" for now.", "author": "zhangmeng916", "createdAt": "2020-06-09T05:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1Mjk4Mg==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437152982", "bodyText": "I think the other place will never hit the other 2 conditions. But not 100% sure.\nAnyway, both options work.", "author": "jiajunwang", "createdAt": "2020-06-09T05:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java b/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\nindex b017edce5..675a5380f 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\n@@ -221,7 +221,10 @@ public abstract class MessageGenerationPhase extends AbstractBaseStage {\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n           }\n-          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {\n+          // We will generate new message if pending message is null or current state equals\n+          // pending message's toState (no cancellation message should be generated in this case)\n+          if (pendingMessage == null || (message == null &&\n+              currentState.equalsIgnoreCase(pendingMessage.getToState()))) {\n             // Create new state transition message\n             message = createStateTransitionMessage(manager, resource, partition.getPartitionName(),\n                 instanceName, currentState, nextState, sessionIdMap.get(instanceName),\n"}}, {"oid": "dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148", "url": "https://github.com/apache/helix/commit/dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148", "message": "minor change", "committedDate": "2020-06-09T05:44:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjA5OA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437672098", "bodyText": "Impressive!", "author": "jiajunwang", "createdAt": "2020-06-09T19:38:12Z", "path": "helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java", "diffHunk": "@@ -172,7 +172,7 @@ public void testP2PStateTransitionEnabled() {\n     }\n \n     double ratio = ((double) p2pTrigged) / ((double) total);\n-    Assert.assertTrue(ratio > 0.6, String\n+    Assert.assertTrue(ratio == 1, String", "originalCommit": "dbd5f7f96b7e0cfe7099e96e0b135d8991c3d148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjUyOA==", "url": "https://github.com/apache/helix/pull/1068#discussion_r437672528", "bodyText": "nit, you can use Assert.assertEquals(p2pTrigged, total) now.", "author": "jiajunwang", "createdAt": "2020-06-09T19:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8f13526bce163d86583f42c3f43f4531367a3cbe", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java b/helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java\nindex 001d1b637..c0cea8f55 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/messaging/TestP2PNoDuplicatedMessage.java\n\n@@ -171,11 +171,7 @@ public class TestP2PNoDuplicatedMessage extends ZkTestBase {\n       verifyP2PEnabled(startTime);\n     }\n \n-    double ratio = ((double) p2pTrigged) / ((double) total);\n-    Assert.assertTrue(ratio == 1, String\n-       .format(\"Only %d out of %d percent transitions to Master were triggered by expected host!\",\n-           p2pTrigged, total));\n-\n+    Assert.assertEquals(p2pTrigged, total);\n     Assert.assertEquals(MockHelixTaskExecutor.duplicatedMessagesInProgress, 0,\n         \"There are duplicated transition messages sent while participant is handling the state-transition!\");\n     Assert.assertEquals(MockHelixTaskExecutor.duplicatedMessages, 0,\n"}}, {"oid": "8f13526bce163d86583f42c3f43f4531367a3cbe", "url": "https://github.com/apache/helix/commit/8f13526bce163d86583f42c3f43f4531367a3cbe", "message": "add log and modify test", "committedDate": "2020-06-09T20:29:46Z", "type": "forcePushed"}, {"oid": "076b74b85a27e716d86538e0bdd21f34e349983b", "url": "https://github.com/apache/helix/commit/076b74b85a27e716d86538e0bdd21f34e349983b", "message": "add log and modify test", "committedDate": "2020-06-10T00:11:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2NzgyNg==", "url": "https://github.com/apache/helix/pull/1068#discussion_r439067826", "bodyText": "What happened to this condition?\nAren't they duplicate?", "author": "jiajunwang", "createdAt": "2020-06-11T20:59:38Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java", "diffHunk": "@@ -225,6 +225,13 @@ private void generateMessage(final Resource resource, final BaseControllerDataPr\n           // pending message's toState (no cancellation message should be generated in this case)\n           if (pendingMessage == null || (message == null &&", "originalCommit": "076b74b85a27e716d86538e0bdd21f34e349983b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e71047c6622ef78b1c91f288e647f6655efaa25", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java b/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\nindex 8ed26395e..b017edce5 100644\n--- a/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n+++ b/helix-core/src/main/java/org/apache/helix/controller/stages/MessageGenerationPhase.java\n\n@@ -221,17 +221,7 @@ public abstract class MessageGenerationPhase extends AbstractBaseStage {\n                     manager, resource, partition, sessionIdMap, instanceName, stateModelDef,\n                     cancellationMessage, isCancellationEnabled);\n           }\n-          // We will generate new message if pending message is null or current state equals\n-          // pending message's toState (no cancellation message should be generated in this case)\n-          if (pendingMessage == null || (message == null &&\n-              currentState.equalsIgnoreCase(pendingMessage.getToState()))) {\n-            if (pendingMessage != null && message == null && currentState\n-                .equalsIgnoreCase(pendingMessage.getToState())) {\n-              logger.info(\"Ignore the pending message for resource %s partition %s instance \"\n-                      + \"%s since the current state %s equals toState of pending message.\",\n-                  resource.getResourceName(), partition.getPartitionName(), instanceName,\n-                  currentState);\n-            }\n+          if (pendingMessage == null || currentState.equalsIgnoreCase(pendingMessage.getToState())) {\n             // Create new state transition message\n             message = createStateTransitionMessage(manager, resource, partition.getPartitionName(),\n                 instanceName, currentState, nextState, sessionIdMap.get(instanceName),\n"}}, {"oid": "3e71047c6622ef78b1c91f288e647f6655efaa25", "url": "https://github.com/apache/helix/commit/3e71047c6622ef78b1c91f288e647f6655efaa25", "message": "Remove waiting on message deletion if current state is already updated", "committedDate": "2020-06-22T17:37:58Z", "type": "commit"}, {"oid": "bcdefbb6ca2c2530ddcc77ae56a19fd5fa748c94", "url": "https://github.com/apache/helix/commit/bcdefbb6ca2c2530ddcc77ae56a19fd5fa748c94", "message": "minor change", "committedDate": "2020-06-22T17:37:58Z", "type": "commit"}, {"oid": "7f94240e7b12a4e0f1448b442a04e40f27742283", "url": "https://github.com/apache/helix/commit/7f94240e7b12a4e0f1448b442a04e40f27742283", "message": "add log and modify test", "committedDate": "2020-06-22T17:37:58Z", "type": "commit"}, {"oid": "6f1d778599c5762b4a06b2009e1a12f8832e3ed3", "url": "https://github.com/apache/helix/commit/6f1d778599c5762b4a06b2009e1a12f8832e3ed3", "message": "remove redundancy", "committedDate": "2020-06-22T17:37:58Z", "type": "commit"}, {"oid": "6f1d778599c5762b4a06b2009e1a12f8832e3ed3", "url": "https://github.com/apache/helix/commit/6f1d778599c5762b4a06b2009e1a12f8832e3ed3", "message": "remove redundancy", "committedDate": "2020-06-22T17:37:58Z", "type": "forcePushed"}]}