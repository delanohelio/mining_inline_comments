{"pr_number": 1360, "pr_title": "Use the DelayedAutoRebalancer as the default rebalancer.", "pr_createdAt": "2020-09-11T21:06:11Z", "pr_url": "https://github.com/apache/helix/pull/1360", "timeline": [{"oid": "042576f316ddc00ddf7893ef1eef64369d9e02a9", "url": "https://github.com/apache/helix/commit/042576f316ddc00ddf7893ef1eef64369d9e02a9", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.", "committedDate": "2020-09-15T17:45:45Z", "type": "forcePushed"}, {"oid": "a954e836805b16247f7d0fc3be828c12277bfc50", "url": "https://github.com/apache/helix/commit/a954e836805b16247f7d0fc3be828c12277bfc50", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.", "committedDate": "2020-09-16T06:25:48Z", "type": "forcePushed"}, {"oid": "0db8a214fd109b71d4cb3203227c8485efe54fe9", "url": "https://github.com/apache/helix/commit/0db8a214fd109b71d4cb3203227c8485efe54fe9", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.", "committedDate": "2020-09-17T00:10:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyOTEzMQ==", "url": "https://github.com/apache/helix/pull/1360#discussion_r488329131", "bodyText": "Let us make sure I understand this test fix correctly. With #1359 fix, the net effect is that previous missing \"rebalance error\" metric is added. Also, avoid setting empty best possible state to the output which is used by later rebalance stage.\nIn this test, we did not assert anything about rebalance error metrics; thus, even missing one rebalance failure metrics, it would cause this test not stable. So why do we need the change in this test?\nPut it another way, what caused the this test unstable?", "author": "kaisun2000", "createdAt": "2020-09-15T01:33:19Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java", "diffHunk": "@@ -118,18 +120,25 @@ public void beforeMethod() throws IOException {\n \n   @Test\n   public void testParticipantUnavailable() throws Exception {\n-    _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n-        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.name());\n+    IdealState idealState = new FullAutoModeISBuilder(testDb)", "originalCommit": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzMDc5MA==", "url": "https://github.com/apache/helix/pull/1360#discussion_r488330790", "bodyText": "I see, this assertion may not work, if pipeline run another cycle?\n    pollForError(accessor, errorNodeKey);\n    checkRebalanceFailureGauge(true);\n    checkResourceBestPossibleCalFailureState(\n        ResourceMonitor.RebalanceStatus.BEST_POSSIBLE_STATE_CAL_FAILED, testDb);", "author": "kaisun2000", "createdAt": "2020-09-15T01:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyOTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxMzA0Nw==", "url": "https://github.com/apache/helix/pull/1360#discussion_r490713047", "bodyText": "Out of date. Let's focus on the newer change.", "author": "jiajunwang", "createdAt": "2020-09-18T05:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyOTEzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ==", "url": "https://github.com/apache/helix/pull/1360#discussion_r488368555", "bodyText": "Previously, we use AutoRebalancer with AutoRebalanceStrategy. With this change, we use DelayedAutoRebalancer with CrushEd strategy.\nThe question is that now, by default with this change, we will use DelayedAutoRebalancer by default. If we forget to add CrushEdRebalanceStrategy, the default seems to be AutoRebalanceStrategy. Will that work?", "author": "kaisun2000", "createdAt": "2020-09-15T03:59:41Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestAlertingRebalancerFailure.java", "diffHunk": "@@ -161,7 +170,8 @@ public void testParticipantUnavailable() throws Exception {\n   @Test(dependsOnMethods = \"testParticipantUnavailable\")\n   public void testTagSetIncorrect() throws Exception {\n     _gSetupTool.addResourceToCluster(CLUSTER_NAME, testDb, 5,\n-        BuiltInStateModelDefinitions.MasterSlave.name(), RebalanceMode.FULL_AUTO.name());", "originalCommit": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNDA0Nw==", "url": "https://github.com/apache/helix/pull/1360#discussion_r490714047", "bodyText": "It works in production. But it does not work in the test.\nThe reason is that our verifier does not read the controller cache (which is only used by the DelayedAutoRebalancer).\nSo the controller only does one calculation, and later pipeline will only read from the cache. But the verifier is calculating from scratch every time. And since the AutoRebalanceStrategy is not stable, the verify result will never converge.\nIf we change to CrushEd, then even the verifier computing from scratch, the result would be the same. And our tests can pass.", "author": "jiajunwang", "createdAt": "2020-09-18T05:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNTA4NQ==", "url": "https://github.com/apache/helix/pull/1360#discussion_r490715085", "bodyText": "The argument here is that we do want to deprecate AutoRebalancer and AutoRebalanceStrategy. Since they are buggy and unstable. So even the behavior change will hurt some of their use cases (any logic that use the bestpossible verifier), we will take it.\nIf this assumption does not hold, then we can never change the default rebalancer to DelayedAutoRebalancer.", "author": "jiajunwang", "createdAt": "2020-09-18T05:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTY4NQ==", "url": "https://github.com/apache/helix/pull/1360#discussion_r491225685", "bodyText": "So controller cache only works for DelayedAutoRebalancer and AutoRebalanceStrategy? I am not sure exactly where it is. Can you point to a code link?", "author": "kaisun2000", "createdAt": "2020-09-18T22:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTE1MA==", "url": "https://github.com/apache/helix/pull/1360#discussion_r493039150", "bodyText": "Synced offline with Kai. It is clear now.", "author": "jiajunwang", "createdAt": "2020-09-22T21:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2ODU1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MTQ5MQ==", "url": "https://github.com/apache/helix/pull/1360#discussion_r488371491", "bodyText": "why remove this line?", "author": "kaisun2000", "createdAt": "2020-09-15T04:11:29Z", "path": "helix-core/src/test/java/org/apache/helix/monitoring/mbeans/TestRebalancerMetrics.java", "diffHunk": "@@ -128,8 +128,10 @@ public void testLoadBalanceMetrics() {\n     event.addAttribute(AttributeName.CURRENT_STATE.name(), currentStateOutput);\n     setupLiveInstances(4);\n \n-    runStage(event, new ReadClusterDataStage());", "originalCommit": "5e90e3767fbf5851b60a73a902b8ef6d77a6ca04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNDQxOA==", "url": "https://github.com/apache/helix/pull/1360#discussion_r490714418", "bodyText": "It is moved to later. Since we do need to clear the cache before running this stage.", "author": "jiajunwang", "createdAt": "2020-09-18T05:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MTQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e68722168fd031b6d754f122195b6562ff69849b", "url": "https://github.com/apache/helix/commit/e68722168fd031b6d754f122195b6562ff69849b", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config.", "committedDate": "2020-09-21T19:18:21Z", "type": "forcePushed"}, {"oid": "0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "url": "https://github.com/apache/helix/commit/0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config.", "committedDate": "2020-09-22T18:44:33Z", "type": "commit"}, {"oid": "0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "url": "https://github.com/apache/helix/commit/0414df2afaf9a4dcfca94c83bd50cab6a584fcf3", "message": "Use the DelayedAutoRebalancer as the default rebalancer.\n\nIf no rebalancer class name is specified, use the DelayedAutoRebalancer instead of AutoRebalancer.\n\nNote that DelayedAutoRebalancer is compatible with the AutoRebalanceStrategy. So the assignment would remain the same even after migration.\n\nHowever, since DelayedAutoRebalancer keeps a cached rebalance result in the Controller cache, it causes a behavior change.\n- We need to modify multiple test classes to use the CrushEd rebalance strategy for the correct test logic.\n- This behavior change only impacts BestPossibleExternalViewVerifier if the resource was on the older AutoRebalancer (by DEFAULT setting) and AutoRebalanceStrategy.\n- If any Helix client is using BestPossibleExternalViewVerifier with the described configuration, then changing the rebalancer class config in the IdealState explicitly to AutoRebalancer is required before the Helix version bump-up. Or the BestPossibleExternalViewVerifier may fail.\n\nIf the client application code is using BestPossibleExternalViewVerifier with AutoRebalancer/AutoRebalanceStrategy, then to avoid problem about this change, please do either of the following 2 changes.\n- Explicitly configure the AutoRebalancer class in the resource IdealState.\n- Change to use StrictMatchExternalViewVerifier. Note that using this verifier requires PERSIST_BEST_POSSIBLE_ASSIGNMENT to be true in the cluster config.", "committedDate": "2020-09-22T18:44:33Z", "type": "forcePushed"}]}