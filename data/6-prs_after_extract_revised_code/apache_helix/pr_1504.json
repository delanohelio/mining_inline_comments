{"pr_number": 1504, "pr_title": "Remove duplicate subscribe in CallBackHandler", "pr_createdAt": "2020-11-02T21:23:41Z", "pr_url": "https://github.com/apache/helix/pull/1504", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMDIwNQ==", "url": "https://github.com/apache/helix/pull/1504#discussion_r516300205", "bodyText": "Let's follow the convention of format. this._isxxx = xxx;", "author": "junkaixue", "createdAt": "2020-11-02T22:41:04Z", "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "diffHunk": "@@ -227,4 +228,12 @@ public void setPathChanged(String pathChanged) {\n   public void setChangeType(HelixConstants.ChangeType changeType) {\n     this._changeType = changeType;\n   }\n+\n+  public boolean getIsChildChange() {\n+    return _isChildChange;\n+  }\n+\n+  public void setIsChildChange(boolean cc) {\n+    _isChildChange = cc;", "originalCommit": "47e4507b5568bc7cfa0e2014ae518b6ee21e12fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "377e2212783610fb9c41715f54d266e5c64adc66", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/NotificationContext.java b/helix-core/src/main/java/org/apache/helix/NotificationContext.java\nindex 468273ab4..ada596cbe 100644\n--- a/helix-core/src/main/java/org/apache/helix/NotificationContext.java\n+++ b/helix-core/src/main/java/org/apache/helix/NotificationContext.java\n\n@@ -234,6 +234,6 @@ public class NotificationContext {\n   }\n \n   public void setIsChildChange(boolean cc) {\n-    _isChildChange = cc;\n+    this._isChildChange = cc;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyMzY0Nw==", "url": "https://github.com/apache/helix/pull/1504#discussion_r516323647", "bodyText": "Did we try to get rid of async subscribe in this PR and do all subscription synchronously? I thought we only remove the extra one.", "author": "zhangmeng916", "createdAt": "2020-11-02T23:18:08Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -402,13 +357,9 @@ public void invoke(NotificationContext changeContext) throws Exception {\n       }\n       _expectTypes = nextNotificationType.get(type);\n \n-      if (type == Type.INIT || type == Type.FINALIZE) {\n+      if (type == Type.INIT || type == Type.FINALIZE || changeContext.getIsChildChange()) {\n         subscribeForChanges(changeContext.getType(), _path, _watchChild);\n-      } else {\n-        // put SubscribeForChange run in async thread to reduce the latency of zk callback handling.\n-        subscribeForChangesAsyn(changeContext.getType(), _path, _watchChild);", "originalCommit": "47e4507b5568bc7cfa0e2014ae518b6ee21e12fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyNjY1Nw==", "url": "https://github.com/apache/helix/pull/1504#discussion_r516326657", "bodyText": "TFTR. The duplicated subscribeForChanges in HandleChildChange and do resubscribe for child change in line 361. For data changes, this async subscribe is also duplicated since the path is already resubscribed in zkClient.", "author": "xyuanlu", "createdAt": "2020-11-02T23:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyMzY0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "377e2212783610fb9c41715f54d266e5c64adc66", "url": "https://github.com/apache/helix/commit/377e2212783610fb9c41715f54d266e5c64adc66", "message": "address comments", "committedDate": "2020-11-03T23:31:17Z", "type": "forcePushed"}, {"oid": "e3185ac60d2454feb7919cc3e17c7340c6635a12", "url": "https://github.com/apache/helix/commit/e3185ac60d2454feb7919cc3e17c7340c6635a12", "message": "stable test", "committedDate": "2020-11-04T19:50:16Z", "type": "forcePushed"}, {"oid": "c840da8d9d0034ad847a028156507de91fb43662", "url": "https://github.com/apache/helix/commit/c840da8d9d0034ad847a028156507de91fb43662", "message": "stable test", "committedDate": "2020-11-04T21:22:19Z", "type": "forcePushed"}, {"oid": "e420e6140db391d5905674ea3185f56cb2850ec6", "url": "https://github.com/apache/helix/commit/e420e6140db391d5905674ea3185f56cb2850ec6", "message": "stable test", "committedDate": "2020-11-04T23:31:10Z", "type": "forcePushed"}, {"oid": "c2f5eba7c3ef4de9bceaf85ca83f249aabc086f0", "url": "https://github.com/apache/helix/commit/c2f5eba7c3ef4de9bceaf85ca83f249aabc086f0", "message": "address comments", "committedDate": "2020-11-04T23:31:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTAxMA==", "url": "https://github.com/apache/helix/pull/1504#discussion_r518325010", "bodyText": "You may want to change cc to a more meaningful meaning, like childChange.", "author": "zhangmeng916", "createdAt": "2020-11-05T19:51:46Z", "path": "helix-core/src/main/java/org/apache/helix/NotificationContext.java", "diffHunk": "@@ -227,4 +228,12 @@ public void setPathChanged(String pathChanged) {\n   public void setChangeType(HelixConstants.ChangeType changeType) {\n     this._changeType = changeType;\n   }\n+\n+  public boolean getIsChildChange() {\n+    return _isChildChange;\n+  }\n+\n+  public void setIsChildChange(boolean cc) {", "originalCommit": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MjAzOA==", "url": "https://github.com/apache/helix/pull/1504#discussion_r518392038", "bodyText": "TFTR. Updated.", "author": "xyuanlu", "createdAt": "2020-11-05T21:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "49a784dbfe9e0f024a17015393e874579aa50f62", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/NotificationContext.java b/helix-core/src/main/java/org/apache/helix/NotificationContext.java\nindex ada596cbe..b35968b94 100644\n--- a/helix-core/src/main/java/org/apache/helix/NotificationContext.java\n+++ b/helix-core/src/main/java/org/apache/helix/NotificationContext.java\n\n@@ -233,7 +233,7 @@ public class NotificationContext {\n     return _isChildChange;\n   }\n \n-  public void setIsChildChange(boolean cc) {\n-    this._isChildChange = cc;\n+  public void setIsChildChange(boolean isChildChange) {\n+    this._isChildChange = isChildChange;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ==", "url": "https://github.com/apache/helix/pull/1504#discussion_r518327495", "bodyText": "I think we try to get rid of this kind of thread sleep, and use verifier. But as this is legacy test, I think it's fine. You can let @kaisun2000 know.", "author": "zhangmeng916", "createdAt": "2020-11-05T19:56:30Z", "path": "helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java", "diffHunk": "@@ -467,23 +464,31 @@ public void testCurrentStatePathLeakingByAsycRemoval() throws Exception {\n     cs.setSessionId(jobSessionId);\n     cs.setStateModelDefRef(db0.getStateModelDefRef());\n \n+    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n+    Assert.assertFalse(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n+\n     LOG.info(\"add job\");\n-    boolean rtJob = false;\n     for (int i = 0; i < mJobUpdateCnt; i++) {\n-      rtJob = jobAccesor.setProperty(jobKey, cs);\n+      jobAccesor.setProperty(jobKey, cs);\n     }\n \n+    // verify new watcher is installed on the new node\n+    Thread.sleep(5000);", "originalCommit": "c1419fa03c9559d6dd51af283b63ab4ce4a80df2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NTgxMA==", "url": "https://github.com/apache/helix/pull/1504#discussion_r518395810", "bodyText": "I am not sure if we have watcher or listener installation verifier. If not, may be larger change is needed.", "author": "xyuanlu", "createdAt": "2020-11-05T22:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTMyMQ==", "url": "https://github.com/apache/helix/pull/1504#discussion_r519069321", "bodyText": "Thanks for offline discuss. Updated.", "author": "xyuanlu", "createdAt": "2020-11-07T00:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNzQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ead48eeb94c3185c1a1abecdfabb7ca7d09da7ae", "chunk": "diff --git a/helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java b/helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java\nindex 056d18499..60dbf914a 100644\n--- a/helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java\n+++ b/helix-core/src/test/java/org/apache/helix/integration/TestZkCallbackHandlerLeak.java\n\n@@ -464,31 +467,23 @@ public class TestZkCallbackHandlerLeak extends ZkUnitTestBase {\n     cs.setSessionId(jobSessionId);\n     cs.setStateModelDefRef(db0.getStateModelDefRef());\n \n-    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n-    Assert.assertFalse(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n-\n     LOG.info(\"add job\");\n+    boolean rtJob = false;\n     for (int i = 0; i < mJobUpdateCnt; i++) {\n-      jobAccesor.setProperty(jobKey, cs);\n+      rtJob = jobAccesor.setProperty(jobKey, cs);\n     }\n \n-    // verify new watcher is installed on the new node\n-    Thread.sleep(5000);\n-    Map<String, Set<String>> listenersByZkPath = ZkTestHelper.getListenersByZkPath(ZK_ADDR);\n-    Assert.assertTrue(listenersByZkPath.keySet().contains(jobKey.getPath()));\n-    rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n-    Assert.assertTrue(rpWatchPaths.get(\"dataWatches\").contains(jobKey.getPath()));\n-\n     LOG.info(\"remove job\");\n-    jobParticipant.getZkClient().delete(jobKey.getPath());\n+    rtJob = jobParticipant.getZkClient().delete(jobKey.getPath());\n \n     // validate the job watch is not leaked.\n     Thread.sleep(5000);\n \n-    listenersByZkPath = ZkTestHelper.getListenersByZkPath(ZK_ADDR);\n-    Assert.assertFalse(listenersByZkPath.keySet().contains(jobKey.getPath()));\n+    Map<String, Set<String>> listenersByZkPath = ZkTestHelper.getListenersByZkPath(ZK_ADDR);\n+    boolean jobKeyExists = listenersByZkPath.keySet().contains(jobKey.getPath());\n+    Assert.assertFalse(jobKeyExists);\n \n-    rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n+    Map<String, List<String>> rpWatchPaths = ZkTestHelper.getZkWatch(rpManager.getZkClient());\n     List<String> existWatches = rpWatchPaths.get(\"existWatches\");\n     Assert.assertTrue(existWatches.isEmpty());\n \n"}}, {"oid": "49a784dbfe9e0f024a17015393e874579aa50f62", "url": "https://github.com/apache/helix/commit/49a784dbfe9e0f024a17015393e874579aa50f62", "message": "stable test", "committedDate": "2020-11-05T21:52:28Z", "type": "forcePushed"}, {"oid": "ead48eeb94c3185c1a1abecdfabb7ca7d09da7ae", "url": "https://github.com/apache/helix/commit/ead48eeb94c3185c1a1abecdfabb7ca7d09da7ae", "message": "remove duplicate subscribe in CallBackHandler", "committedDate": "2020-11-07T00:37:28Z", "type": "commit"}, {"oid": "a3df3b4be15c90b976b00f440697e6bed89c66db", "url": "https://github.com/apache/helix/commit/a3df3b4be15c90b976b00f440697e6bed89c66db", "message": "address comments", "committedDate": "2020-11-07T00:37:28Z", "type": "commit"}, {"oid": "c25c92223e37fb37a1eca15ff72312fbcb6f29ad", "url": "https://github.com/apache/helix/commit/c25c92223e37fb37a1eca15ff72312fbcb6f29ad", "message": "stable test", "committedDate": "2020-11-07T00:37:28Z", "type": "commit"}, {"oid": "ce0b61d062b3b01a370097aa5b5cf6ef38e90e78", "url": "https://github.com/apache/helix/commit/ce0b61d062b3b01a370097aa5b5cf6ef38e90e78", "message": "address comments", "committedDate": "2020-11-07T00:37:28Z", "type": "commit"}, {"oid": "ce0b61d062b3b01a370097aa5b5cf6ef38e90e78", "url": "https://github.com/apache/helix/commit/ce0b61d062b3b01a370097aa5b5cf6ef38e90e78", "message": "address comments", "committedDate": "2020-11-07T00:37:28Z", "type": "forcePushed"}]}