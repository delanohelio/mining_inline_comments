{"pr_number": 1580, "pr_title": "Update the internal fields of the Data Providr when overriding the data through set methods.", "pr_createdAt": "2020-12-09T01:38:19Z", "pr_url": "https://github.com/apache/helix/pull/1580", "timeline": [{"oid": "b941a3c65dcae92990d0aa52bb00523801733250", "url": "https://github.com/apache/helix/commit/b941a3c65dcae92990d0aa52bb00523801733250", "message": "Update the internal fields of the Data Providr when overriding the data through set methods.\n\nIt was observed that the set methods, which are used but the Helix tools or tests, are not updating the derived fields.\nThis makes the override incomplete and it causes some potential issues when the tools are used.\nThis PR ensures that the set methods are modifying important derived fields.", "committedDate": "2020-12-08T20:46:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5NjI0Nw==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539696247", "bodyText": "why here we use getClusterConfig() while later in setClusterConfig we use _clusterConfig?\nIn fact,\n  public ClusterConfig getClusterConfig() {\n    return _clusterConfig;\n  }\n\nany specific reason?", "author": "kaisun2000", "createdAt": "2020-12-09T22:29:15Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -384,8 +384,8 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _instanceMessagesCache.updateRelayMessages(_liveInstanceCache.getPropertyMap(),\n         _currentStateCache.getParticipantStatesMap());\n \n-    updateIdealRuleMap();\n-    updateDisabledInstances();\n+    updateIdealRuleMap(getClusterConfig());", "originalCommit": "b941a3c65dcae92990d0aa52bb00523801733250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5ODU5NA==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539698594", "bodyText": "This seems to be a non-essential change?", "author": "kaisun2000", "createdAt": "2020-12-09T22:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5NjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMTIyMw==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539711223", "bodyText": "Because setClusterConfig() is where you update _clusterConfig. And here, it is using it as an input.\nIt is a good practice that we don't refer to a private field directly in a private method. Note that the main reason no one calls this method to update for now is that we hide it too deep, so no one remembers. If the parameters are explicitly passed, meaning input and output are clearly divided, then we avoid potential bugs.\nSo, IMO this is tightly related to this change.", "author": "jiajunwang", "createdAt": "2020-12-09T22:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5NjI0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNDQzMQ==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539704431", "bodyText": "again, is clusterConfig passed in would always to the same as _clusterConfig?", "author": "kaisun2000", "createdAt": "2020-12-09T22:44:34Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -744,30 +747,31 @@ private void updateOfflineInstanceHistory(HelixDataAccessor accessor) {\n     _updateInstanceOfflineTime = false;\n   }\n \n-  private void updateDisabledInstances() {\n+  private void updateDisabledInstances(Collection<InstanceConfig> instanceConfigs,\n+      ClusterConfig clusterConfig) {\n     // Move the calculating disabled instances to refresh\n     _disabledInstanceForPartitionMap.clear();\n     _disabledInstanceSet.clear();\n-    for (InstanceConfig config : _instanceConfigCache.getPropertyMap().values()) {\n+    for (InstanceConfig config : instanceConfigs) {\n       Map<String, List<String>> disabledPartitionMap = config.getDisabledPartitionsMap();\n       if (!config.getInstanceEnabled()) {\n         _disabledInstanceSet.add(config.getInstanceName());\n       }\n       for (String resource : disabledPartitionMap.keySet()) {\n         if (!_disabledInstanceForPartitionMap.containsKey(resource)) {\n-          _disabledInstanceForPartitionMap.put(resource, new HashMap<String, Set<String>>());\n+          _disabledInstanceForPartitionMap.put(resource, new HashMap<>());\n         }\n         for (String partition : disabledPartitionMap.get(resource)) {\n           if (!_disabledInstanceForPartitionMap.get(resource).containsKey(partition)) {\n-            _disabledInstanceForPartitionMap.get(resource).put(partition, new HashSet<String>());\n+            _disabledInstanceForPartitionMap.get(resource).put(partition, new HashSet<>());\n           }\n           _disabledInstanceForPartitionMap.get(resource).get(partition)\n               .add(config.getInstanceName());\n         }\n       }\n     }\n-    if (_clusterConfig != null && _clusterConfig.getDisabledInstances() != null) {\n-      _disabledInstanceSet.addAll(_clusterConfig.getDisabledInstances().keySet());\n+    if (clusterConfig != null && clusterConfig.getDisabledInstances() != null) {", "originalCommit": "b941a3c65dcae92990d0aa52bb00523801733250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMTQ3MA==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539711470", "bodyText": "Please refer to the previous comment.", "author": "jiajunwang", "createdAt": "2020-12-09T22:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNDQzMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNzU3NA==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539707574", "bodyText": "This seems to be non-essential too, right? The problem is in the setClusterConfig and setInstanceConfig", "author": "kaisun2000", "createdAt": "2020-12-09T22:50:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -384,8 +384,8 @@ public synchronized void refresh(HelixDataAccessor accessor) {\n     _instanceMessagesCache.updateRelayMessages(_liveInstanceCache.getPropertyMap(),\n         _currentStateCache.getParticipantStatesMap());\n \n-    updateIdealRuleMap();\n-    updateDisabledInstances();\n+    updateIdealRuleMap(getClusterConfig());\n+    updateDisabledInstances(getInstanceConfigMap().values(), getClusterConfig());", "originalCommit": "b941a3c65dcae92990d0aa52bb00523801733250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMTYzNw==", "url": "https://github.com/apache/helix/pull/1580#discussion_r539711637", "bodyText": "This is to improve the style so we lower the chance of making such a mistake again.", "author": "jiajunwang", "createdAt": "2020-12-09T22:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNzU3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0NTk3Nw==", "url": "https://github.com/apache/helix/pull/1580#discussion_r540445977", "bodyText": "Then why this place we don't use getClusterConfig().\nEither way it is find to me. But please do use one approach.", "author": "kaisun2000", "createdAt": "2020-12-10T19:40:48Z", "path": "helix-core/src/main/java/org/apache/helix/controller/dataproviders/BaseControllerDataProvider.java", "diffHunk": "@@ -418,6 +418,8 @@ public ClusterConfig getClusterConfig() {\n   public void setClusterConfig(ClusterConfig clusterConfig) {\n     _clusterConfig = clusterConfig;\n     refreshAbnormalStateResolverMap(_clusterConfig);\n+    updateIdealRuleMap(_clusterConfig);\n+    updateDisabledInstances(getInstanceConfigMap().values(), _clusterConfig);", "originalCommit": "b941a3c65dcae92990d0aa52bb00523801733250", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY4ODk2OQ==", "url": "https://github.com/apache/helix/pull/1580#discussion_r540688969", "bodyText": "I can change to \"clusterConfig\" instead of \"_clusterConfig\". But it makes very little difference.\ngetClusterConfig() is a different story. It is in set method, we should not call get method in a set method. It is just confusing.\nLet's don't make it too complicated. My target is just to remove all the unnecessary private field references. And this specific method is a set method. It is necessary.", "author": "jiajunwang", "createdAt": "2020-12-11T04:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0NTk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjI5OQ==", "url": "https://github.com/apache/helix/pull/1580#discussion_r540696299", "bodyText": "I think I might need to clarify it a little bit more. Since you seem to be confused by the style things...\nI'm not sure what is the \"approach\" that you refer to... Calling the method or referring to the private fields are both OK. They are actually the same thing, right? Unless the method has some concurrent control or so.\nI don't see any reason why we have to use getClusterConfig() or _clusterConfig or clusterConfig in this context. They make a minor difference. If I have to compare getClusterConfig() is the worst, since it triggers one more method call.\nThe difference is whether you pass the INPUT as the method parameters or directly refer to the private fields. This makes a difference. The latter introduces hidden dependencies between different private things. So this style is not good.\nThis is the small improvement that I'm trying to do here.\nAnd obviously, this rule is not applicable in the set methods. Because they have to refer to the private fields, right?", "author": "jiajunwang", "createdAt": "2020-12-11T05:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0NTk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTY2Mw==", "url": "https://github.com/apache/helix/pull/1580#discussion_r543661663", "bodyText": "Feel free to resolve this comment thread. The reason I ask is not for styling. It is that initially I not sure about the intention. I thought getInstanceConfigMap() had some tricks inside and that was why we did not use _configMap. If it is styling, no such intention, then either way is fine to me. Making them same style would also be good, but up to you.", "author": "kaisun2000", "createdAt": "2020-12-15T20:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ0NTk3Nw=="}], "type": "inlineReview", "revised_code": null}]}