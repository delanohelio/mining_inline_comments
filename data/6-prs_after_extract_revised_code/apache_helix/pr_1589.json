{"pr_number": 1589, "pr_title": "Reduce lock contention in CallbackHandler.enqueueTask", "pr_createdAt": "2020-12-10T22:55:12Z", "pr_url": "https://github.com/apache/helix/pull/1589", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODEwNQ==", "url": "https://github.com/apache/helix/pull/1589#discussion_r541458105", "bodyText": "Should be the reverse way? I guess.\nCallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();", "author": "jiajunwang", "createdAt": "2020-12-12T00:43:38Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -319,13 +320,12 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        synchronized (this) {\n-          if (_batchCallbackProcessor != null) {\n-            _batchCallbackProcessor.queueEvent(changeContext.getType(), changeContext);\n-          } else {\n-            throw new HelixException(\n-                \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n-          }\n+        CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();", "originalCommit": "87162ebb70fb30e9d5d24659aa00167b62556ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a918b63a6522acd85905662882f812195ce574c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 1e7178a6a..4ead23b35 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -320,9 +320,9 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n-        if (callbackProcessorRef != null) {\n-          callbackProcessorRef.queueEvent(changeContext.getType(), changeContext);\n+        CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();\n+        if (callbackProcessor != null) {\n+          callbackProcessor.queueEvent(changeContext.getType(), changeContext);\n         } else {\n           throw new HelixException(\n               \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTAzNg==", "url": "https://github.com/apache/helix/pull/1589#discussion_r541459036", "bodyText": "Just do getAndSet(null). Then shutdown the returned value.", "author": "jiajunwang", "createdAt": "2020-12-12T00:47:18Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -766,16 +769,16 @@ void reset(boolean isShutdown) {\n         isShutdown);\n     try {\n       _ready = false;\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();", "originalCommit": "87162ebb70fb30e9d5d24659aa00167b62556ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDUxMA==", "url": "https://github.com/apache/helix/pull/1589#discussion_r542834510", "bodyText": "Sorry I did not quite follow here. We still need to do nullptr check of the return value from getAndSet and also need to check isShutdown in the outer if. It does not seems to make this embedded if simpler.", "author": "xyuanlu", "createdAt": "2020-12-14T21:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "2a918b63a6522acd85905662882f812195ce574c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 1e7178a6a..4ead23b35 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -769,14 +768,14 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n         isShutdown);\n     try {\n       _ready = false;\n-      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n-        if (callbackProcessorRef != null) {\n+      CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();\n+        if (callbackProcessor != null) {\n           if (isShutdown) {\n-            if (_batchCallbackProcessor.compareAndSet(callbackProcessorRef, null)) {\n-              callbackProcessorRef.shutdown();\n+            if (_batchCallbackProcessorRef.compareAndSet(callbackProcessor, null)) {\n+              callbackProcessor.shutdown();\n             }\n           } else {\n-            callbackProcessorRef.resetEventQueue();\n+            callbackProcessor.resetEventQueue();\n           }\n         }\n       NotificationContext changeContext = new NotificationContext(_manager);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MTgyOA==", "url": "https://github.com/apache/helix/pull/1589#discussion_r541461828", "bodyText": "This is not necessary if the start() is done after insertion, right?\nIf we change the design due to the previous comment, then it is a different story.", "author": "jiajunwang", "createdAt": "2020-12-12T00:59:07Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -643,14 +643,17 @@ public void init() {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n-          _batchCallbackProcessor.resetEventQueue();\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.resetEventQueue();\n         } else {\n-          _batchCallbackProcessor = new CallbackProcessor(this);\n-          _batchCallbackProcessor.start();\n+          callbackProcessorRef = new CallbackProcessor(this);\n+          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n+            callbackProcessorRef.start();\n+          } else {\n+            callbackProcessorRef.shutdown();", "originalCommit": "87162ebb70fb30e9d5d24659aa00167b62556ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMDY0OQ==", "url": "https://github.com/apache/helix/pull/1589#discussion_r542830649", "bodyText": "I think new CallbackProcessor(this) creates a new thread and we need to close it if the new thread is not updated to _batchCallbackProcessor. However, since are doing start and then insert now, we need this shutdown anyway.", "author": "xyuanlu", "createdAt": "2020-12-14T21:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "2a918b63a6522acd85905662882f812195ce574c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 1e7178a6a..4ead23b35 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -643,17 +643,16 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n-        if (callbackProcessorRef != null) {\n-          callbackProcessorRef.resetEventQueue();\n-        } else {\n-          callbackProcessorRef = new CallbackProcessor(this);\n-          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n-            callbackProcessorRef.start();\n-          } else {\n-            callbackProcessorRef.shutdown();\n-          }\n+      CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();\n+      if (callbackProcessor != null) {\n+        callbackProcessor.resetEventQueue();\n+      } else {\n+        callbackProcessor = new CallbackProcessor(this);\n+        callbackProcessor.start();\n+        if (!_batchCallbackProcessorRef.compareAndSet(null, callbackProcessor)) {\n+          callbackProcessor.shutdown();\n         }\n+      }\n     }\n \n     updateNotificationTime(System.nanoTime());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDE0OQ==", "url": "https://github.com/apache/helix/pull/1589#discussion_r541464149", "bodyText": "Consider the following operation order:\n\ninit() and reset() is called at the same time.\nIn init(), the code reaches line 652, but not start yet.\nAt the same time, in reset(), code reaches line 776, and tries to shutdown the thread. But it cannot, since the thread has not been started yet. Note, in java doc, \"Interrupting a thread that is not alive need not have any effect.\"\nThen the code in init() try to start, the thread is started.\n\nWe have a leaked thread, eventually.", "author": "jiajunwang", "createdAt": "2020-12-12T01:09:03Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -643,14 +643,17 @@ public void init() {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      synchronized (this) {\n-        if (_batchCallbackProcessor != null) {\n-          _batchCallbackProcessor.resetEventQueue();\n+      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.resetEventQueue();\n         } else {\n-          _batchCallbackProcessor = new CallbackProcessor(this);\n-          _batchCallbackProcessor.start();\n+          callbackProcessorRef = new CallbackProcessor(this);\n+          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n+            callbackProcessorRef.start();", "originalCommit": "87162ebb70fb30e9d5d24659aa00167b62556ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDQzMQ==", "url": "https://github.com/apache/helix/pull/1589#discussion_r541464431", "bodyText": "I think you will need to start and then insert it into the atomic object.\nBut please revisit and see if there are any other ways.", "author": "jiajunwang", "createdAt": "2020-12-12T01:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyODg2MA==", "url": "https://github.com/apache/helix/pull/1589#discussion_r542828860", "bodyText": "TFTR. I think you are correct. We should't touch the callbackProcessorRef  object after compareAndSet returns true.\nNeed to start and then insert", "author": "xyuanlu", "createdAt": "2020-12-14T21:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2NDE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a918b63a6522acd85905662882f812195ce574c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 1e7178a6a..4ead23b35 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -643,17 +643,16 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n     logger.info(\"initializing CallbackHandler: {}, content: {} \", _uid, getContent());\n \n     if (_batchModeEnabled) {\n-      CallbackProcessor callbackProcessorRef = _batchCallbackProcessor.get();\n-        if (callbackProcessorRef != null) {\n-          callbackProcessorRef.resetEventQueue();\n-        } else {\n-          callbackProcessorRef = new CallbackProcessor(this);\n-          if (_batchCallbackProcessor.compareAndSet(null, callbackProcessorRef)) {\n-            callbackProcessorRef.start();\n-          } else {\n-            callbackProcessorRef.shutdown();\n-          }\n+      CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();\n+      if (callbackProcessor != null) {\n+        callbackProcessor.resetEventQueue();\n+      } else {\n+        callbackProcessor = new CallbackProcessor(this);\n+        callbackProcessor.start();\n+        if (!_batchCallbackProcessorRef.compareAndSet(null, callbackProcessor)) {\n+          callbackProcessor.shutdown();\n         }\n+      }\n     }\n \n     updateNotificationTime(System.nanoTime());\n"}}, {"oid": "2a918b63a6522acd85905662882f812195ce574c", "url": "https://github.com/apache/helix/commit/2a918b63a6522acd85905662882f812195ce574c", "message": "addredd comment", "committedDate": "2020-12-14T22:11:40Z", "type": "forcePushed"}, {"oid": "b0187965ac3aec5541ee847906ee53a8169e02a1", "url": "https://github.com/apache/helix/commit/b0187965ac3aec5541ee847906ee53a8169e02a1", "message": "addredd comment", "committedDate": "2020-12-15T19:53:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNDUwNg==", "url": "https://github.com/apache/helix/pull/1589#discussion_r543814506", "bodyText": "nit, extra ;", "author": "jiajunwang", "createdAt": "2020-12-16T01:41:55Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -133,7 +134,7 @@\n   private HelixCallbackMonitor _monitor;\n \n   // TODO: make this be per _manager or per _listener instaed of per callbackHandler -- Lei\n-  private CallbackProcessor _batchCallbackProcessor;\n+  private AtomicReference<CallbackProcessor> _batchCallbackProcessorRef = new AtomicReference<>();;", "originalCommit": "b0187965ac3aec5541ee847906ee53a8169e02a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "947f13a5301f927d12a2ba8de916571761ea239b", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 4ead23b35..7a13e34b3 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -134,7 +134,8 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n   private HelixCallbackMonitor _monitor;\n \n   // TODO: make this be per _manager or per _listener instaed of per callbackHandler -- Lei\n-  private AtomicReference<CallbackProcessor> _batchCallbackProcessorRef = new AtomicReference<>();;\n+  private CallbackProcessor _batchCallbackProcessor;\n+  private Object _batchCallbackProcessorLock = new Object();\n   private boolean _watchChild = true; // Whether we should subscribe to the child znode's data\n   // change.\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNTQ3MA==", "url": "https://github.com/apache/helix/pull/1589#discussion_r543815470", "bodyText": "Not necessarily wrong behavior. But this may change the behavior.\nThe older logic will throw an exception if the event won't be processed. But with the new code, it is possible that we add the event to a closed processor without throwing exception?", "author": "jiajunwang", "createdAt": "2020-12-16T01:44:24Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java", "diffHunk": "@@ -319,13 +320,12 @@ public void enqueueTask(NotificationContext changeContext) throws Exception {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        synchronized (this) {\n-          if (_batchCallbackProcessor != null) {\n-            _batchCallbackProcessor.queueEvent(changeContext.getType(), changeContext);\n-          } else {\n-            throw new HelixException(\n-                \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n-          }\n+        CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();", "originalCommit": "b0187965ac3aec5541ee847906ee53a8169e02a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0NjI2Mw==", "url": "https://github.com/apache/helix/pull/1589#discussion_r543846263", "bodyText": "TFTR. Yes, it is a behavior change. However, I think in the old code when er get exception notice like this, we would treat it as a no-harm exception... So I think this change is ok.", "author": "xyuanlu", "createdAt": "2020-12-16T02:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxNTQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "947f13a5301f927d12a2ba8de916571761ea239b", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\nindex 4ead23b35..7a13e34b3 100644\n--- a/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n+++ b/helix-core/src/main/java/org/apache/helix/manager/zk/CallbackHandler.java\n\n@@ -320,9 +321,12 @@ public class CallbackHandler implements IZkChildListener, IZkDataListener {\n         logger.info(\"CallbackHandler {} is not ready, ignore change callback from path: {}, for \"\n             + \"listener: {}\", _uid, _path, _listener);\n       } else {\n-        CallbackProcessor callbackProcessor = _batchCallbackProcessorRef.get();\n-        if (callbackProcessor != null) {\n-          callbackProcessor.queueEvent(changeContext.getType(), changeContext);\n+        CallbackProcessor callbackProcessorRef;\n+        synchronized (_batchCallbackProcessorLock) {\n+          callbackProcessorRef = _batchCallbackProcessor;\n+        }\n+        if (callbackProcessorRef != null) {\n+          callbackProcessorRef.queueEvent(changeContext.getType(), changeContext);\n         } else {\n           throw new HelixException(\n               \"Failed to process callback in batch mode. Batch Callback Processor does not exist.\");\n"}}, {"oid": "947f13a5301f927d12a2ba8de916571761ea239b", "url": "https://github.com/apache/helix/commit/947f13a5301f927d12a2ba8de916571761ea239b", "message": "reduce lock scope of _batchCallbackProcessor in CallbackHandler", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "98947a3c75f50d7d6ba5e85482df1bd0a6a7bcbd", "url": "https://github.com/apache/helix/commit/98947a3c75f50d7d6ba5e85482df1bd0a6a7bcbd", "message": "use atomic ref", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "cbf7e60119e384397457005a6bc9962493bac5d6", "url": "https://github.com/apache/helix/commit/cbf7e60119e384397457005a6bc9962493bac5d6", "message": "use compare and set", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "658a7a2cd579882ee2f90b45526fcf62ab2326d9", "url": "https://github.com/apache/helix/commit/658a7a2cd579882ee2f90b45526fcf62ab2326d9", "message": "add shut down for duplicated CallbackProcessor thread", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "6372ab968a6db581141e13df2373102089d2d409", "url": "https://github.com/apache/helix/commit/6372ab968a6db581141e13df2373102089d2d409", "message": "addredd comment", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "url": "https://github.com/apache/helix/commit/a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "message": "fix typo", "committedDate": "2020-12-17T01:38:53Z", "type": "commit"}, {"oid": "a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "url": "https://github.com/apache/helix/commit/a0a898fe4d85c1a2820bc6fa98481031aaac6f85", "message": "fix typo", "committedDate": "2020-12-17T01:38:53Z", "type": "forcePushed"}]}