{"pr_number": 861, "pr_title": "Make ClusterSetup realm-aware", "pr_createdAt": "2020-03-05T02:11:05Z", "pr_url": "https://github.com/apache/helix/pull/861", "timeline": [{"oid": "742c5da410efa1eafe30b9819c77b264273bac33", "url": "https://github.com/apache/helix/commit/742c5da410efa1eafe30b9819c77b264273bac33", "message": "ClusterSetup", "committedDate": "2020-03-05T01:32:15Z", "type": "commit"}, {"oid": "d510e5626204a544c9e22a12e11624f9fbc4e599", "url": "https://github.com/apache/helix/commit/d510e5626204a544c9e22a12e11624f9fbc4e599", "message": "a", "committedDate": "2020-03-05T02:06:39Z", "type": "commit"}, {"oid": "6a38aaab9459f63bb5a0be64566afa6141f31b13", "url": "https://github.com/apache/helix/commit/6a38aaab9459f63bb5a0be64566afa6141f31b13", "message": "comment", "committedDate": "2020-03-05T02:26:43Z", "type": "commit"}, {"oid": "989d7958ec628a28b3663ed555dbc1c553d7963f", "url": "https://github.com/apache/helix/commit/989d7958ec628a28b3663ed555dbc1c553d7963f", "message": "default serializer", "committedDate": "2020-03-05T02:29:25Z", "type": "commit"}, {"oid": "447437b92cc5bee5a997aa518abd3743b3b29b4d", "url": "https://github.com/apache/helix/commit/447437b92cc5bee5a997aa518abd3743b3b29b4d", "message": "fsad", "committedDate": "2020-03-05T02:47:00Z", "type": "commit"}, {"oid": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "url": "https://github.com/apache/helix/commit/2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "message": "Commit", "committedDate": "2020-03-05T04:18:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTU2OA==", "url": "https://github.com/apache/helix/pull/861#discussion_r388709568", "bodyText": "Like you mentioned, do we need the checked exception signature? If yes, what is the consideration to have it thrown checked exceptions?", "author": "huizhilu", "createdAt": "2020-03-06T04:37:11Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");\n+      }\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+    }\n+\n+    _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = false;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient) {\n+  public ClusterSetup(RealmAwareZkClient zkClient) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = true;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient, HelixAdmin zkHelixAdmin) {\n+  public ClusterSetup(RealmAwareZkClient zkClient, HelixAdmin zkHelixAdmin) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = zkHelixAdmin;\n     _usesExternalZkClient = true;\n   }\n \n+  private ClusterSetup(Builder builder) throws IOException, InvalidRoutingDataException {", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjMyMQ==", "url": "https://github.com/apache/helix/pull/861#discussion_r389042321", "bodyText": "Good cross validation. This shouldn't be needed. Let me update the PR \ud83d\udc4d", "author": "narendly", "createdAt": "2020-03-06T17:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NzcyMw==", "url": "https://github.com/apache/helix/pull/861#discussion_r389157723", "bodyText": "Discussed with @pkuwm offline.\nWe decided to keep these checked exceptions. As a matter of fact, all builder-based constructors should throw checked exceptions because things could go wrong on multi-realm mode.", "author": "narendly", "createdAt": "2020-03-06T21:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwOTU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\nindex 610fd569d..3216ec9fe 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n\n@@ -138,7 +138,6 @@ public class ClusterSetup {\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private String _zkServerAddress;\n   private final RealmAwareZkClient _zkClient;\n   // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDA3OQ==", "url": "https://github.com/apache/helix/pull/861#discussion_r388710079", "bodyText": "If it fails, shall we fall it back to connect to single ZK?", "author": "huizhilu", "createdAt": "2020-03-06T04:40:06Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");\n+      }\n+      zkClient = SharedZkClientFactory.getInstance()\n+          .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n+      zkClient.setZkSerializer(new ZNRecordSerializer());\n+    }\n+\n+    _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = false;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient) {\n+  public ClusterSetup(RealmAwareZkClient zkClient) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = new ZKHelixAdmin(_zkClient);\n     _usesExternalZkClient = true;\n   }\n \n-  public ClusterSetup(HelixZkClient zkClient, HelixAdmin zkHelixAdmin) {\n+  public ClusterSetup(RealmAwareZkClient zkClient, HelixAdmin zkHelixAdmin) {\n     _zkServerAddress = zkClient.getServers();\n     _zkClient = zkClient;\n     _admin = zkHelixAdmin;\n     _usesExternalZkClient = true;\n   }\n \n+  private ClusterSetup(Builder builder) throws IOException, InvalidRoutingDataException {\n+    switch (builder._realmMode) {\n+      case MULTI_REALM:", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1Nzg2Nw==", "url": "https://github.com/apache/helix/pull/861#discussion_r389157867", "bodyText": "Discussed offline. We shouldn't fall back on multi-realm mode.", "author": "narendly", "createdAt": "2020-03-06T21:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\nindex 610fd569d..3216ec9fe 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n\n@@ -138,7 +138,6 @@ public class ClusterSetup {\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private String _zkServerAddress;\n   private final RealmAwareZkClient _zkClient;\n   // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjQ2Ng==", "url": "https://github.com/apache/helix/pull/861#discussion_r388712466", "bodyText": "If zk address is not set for multi-realm mode, a user would not expect an IllegalArgumentException. Shall we throw an IllegalStateException as the user doesn't set this argument? And also include the original exception message/stack?", "author": "huizhilu", "createdAt": "2020-03-06T04:53:15Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;\n+  private final RealmAwareZkClient _zkClient;\n+  // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n   // ZkClient\n   private final boolean _usesExternalZkClient;\n   private final HelixAdmin _admin;\n \n   public ClusterSetup(String zkServerAddress) {\n     _zkServerAddress = zkServerAddress;\n-    _zkClient = SharedZkClientFactory.getInstance()\n-        .buildZkClient(new HelixZkClient.ZkConnectionConfig(_zkServerAddress));\n-    _zkClient.setZkSerializer(new ZNRecordSerializer());\n+\n+    // First, try to start on multi-realm mode using FederatedZkClient\n+    RealmAwareZkClient zkClient;\n+    try {\n+      zkClient = new FederatedZkClient(\n+          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n+          new RealmAwareZkClient.RealmAwareZkClientConfig());\n+    } catch (InvalidRoutingDataException | IOException | IllegalStateException e) {\n+      // Note: IllegalStateException is for HttpRoutingDataReader if MSDS endpoint cannot be found\n+      // Fall back to single-realm mode using SharedZkClient (HelixZkClient)\n+      // This is to preserve backward-compatibility\n+      if (zkServerAddress == null || zkServerAddress.isEmpty()) {\n+        throw new IllegalArgumentException(\"ZK server address is null or empty!\");", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NzMyNw==", "url": "https://github.com/apache/helix/pull/861#discussion_r389157327", "bodyText": "If we want to preserve the existing behavior, I say we just remove this check (because the original implementation doesn't have this check).\nI am not sure what you're asking exactly... could you explain?", "author": "narendly", "createdAt": "2020-03-06T21:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\nindex 610fd569d..3216ec9fe 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n\n@@ -138,7 +138,6 @@ public class ClusterSetup {\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private String _zkServerAddress;\n   private final RealmAwareZkClient _zkClient;\n   // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODM2NA==", "url": "https://github.com/apache/helix/pull/861#discussion_r388728364", "bodyText": "nit, is this import needed anymore?", "author": "jiajunwang", "createdAt": "2020-03-06T06:12:05Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ZKHelixAdmin.java", "diffHunk": "@@ -78,6 +78,7 @@\n import org.apache.helix.util.HelixUtil;\n import org.apache.helix.util.RebalanceUtil;\n import org.apache.helix.zookeeper.api.client.HelixZkClient;", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4MjI0NA==", "url": "https://github.com/apache/helix/pull/861#discussion_r389182244", "bodyText": "Needed. HelixZkClient is still used.", "author": "narendly", "createdAt": "2020-03-06T22:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODM2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODYwNg==", "url": "https://github.com/apache/helix/pull/861#discussion_r388728606", "bodyText": "It seems this field can still be final. Why do we need to remove the final keyword?", "author": "jiajunwang", "createdAt": "2020-03-06T06:13:13Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -135,37 +138,74 @@\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private final String _zkServerAddress;\n-  private final HelixZkClient _zkClient;\n-  // true if ZkBaseDataAccessor was instantiated with a HelixZkClient, false otherwise\n+  private String _zkServerAddress;", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1Mjk2Ng==", "url": "https://github.com/apache/helix/pull/861#discussion_r389152966", "bodyText": "If the user wants to create this class on multi-realm mode, FederatedZkClient will be used. FederatedZkClient does not and should not expose ZkAddress because it's an internal state info.\nIn fact, this _zkServerAddress was not being used anywhere and doesn't need to exist. I've removed this field from this class for further safety. I think we want to avoid exposing specific ZK server-related details as much as possible in a multi-zk environment to prevent misuse and unauthorized operations.", "author": "narendly", "createdAt": "2020-03-06T21:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyODYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\nindex 610fd569d..3216ec9fe 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n\n@@ -138,7 +138,6 @@ public class ClusterSetup {\n   public static final String removeConstraint = \"removeConstraint\";\n \n   private static final Logger _logger = LoggerFactory.getLogger(ClusterSetup.class);\n-  private String _zkServerAddress;\n   private final RealmAwareZkClient _zkClient;\n   // true if ZkBaseDataAccessor was instantiated with a RealmAwareZkClient, false otherwise\n   // This is used for close() to determine how ZkBaseDataAccessor should close the underlying\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyOTI3OA==", "url": "https://github.com/apache/helix/pull/861#discussion_r388729278", "bodyText": "I see similar builders in multiple PRs for the different accessor or tools. Can we have a parent ZkClient builder which contains basic info and validation, and these builders can be the children of that parent.", "author": "jiajunwang", "createdAt": "2020-03-06T06:15:46Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java", "diffHunk": "@@ -1570,4 +1610,66 @@ public static void main(String[] args) throws Exception {\n     int ret = processCommandLineArgs(args);\n     System.exit(ret);\n   }\n+\n+  public static class Builder {", "originalCommit": "2ab24ad0df5a7c5d86aea338fbc076a780415e3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0NDA2OA==", "url": "https://github.com/apache/helix/pull/861#discussion_r389044068", "bodyText": "@jiajunwang This was an option considered carefully, but let me note here that having a parent builder doesn't actually remove duplicate code because all setters and constructors will have to either be re-written or overriden. This is because setters return Builder objects that aren't compatible with children builders. Take a look at the ZkClusterVerifier PR - in that PR, it makes more sense to have a parent Builder, but we don't see the reduction in duplicate code.\nIn general, having an inheritance hierarchy for static Builders is not necessarily a good idea because 1) it doesn't reduce code duplication, 2) Builder's setter and validation logic need to / may evolve differently, and inheritance might make that difficult in the future.", "author": "narendly", "createdAt": "2020-03-06T17:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyOTI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NDkyOA==", "url": "https://github.com/apache/helix/pull/861#discussion_r389074928", "bodyText": "For 2) the setter and validation logic should be common for the ZK parameters. And ZK related input and validation will be evolved the same. That's why a single class would help us to reduce maintenance costs.\nFor 1) There are multiple options to avoid the problem. Not sure if we have these options evaluated. If any document, that would be great so I can take a look : )\n\nPass the ZK Client builder to the verifier's builders. So there is no inheritance, but the ZK client building logic is in the client builder only.\nUse a template class as mentioned here, https://stackoverflow.com/questions/4031857/way-to-make-java-parent-class-method-return-object-of-child-class\nSince ZK parameters are in most cases requried, include them in the constructor and you don't need to worry about the return value. In the verifier builder, the constructor calls the super(...) constructor to finish the ZK client build.\nThere could be more ways.", "author": "jiajunwang", "createdAt": "2020-03-06T18:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyOTI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE0ODk4Nw==", "url": "https://github.com/apache/helix/pull/861#discussion_r389148987", "bodyText": "There aren't any documents. However, I think this input is valid.\nLet's use this to track this issue. I think it would be wise to first focus on making Java APIs realm-aware, and take a step back and look at all of our Helix Java API classes and determine how we should refactor the Builders.\n#873", "author": "narendly", "createdAt": "2020-03-06T21:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyOTI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\nindex 610fd569d..3216ec9fe 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterSetup.java\n\n@@ -1654,6 +1649,10 @@ public class ClusterSetup {\n         throw new HelixException(\n             \"ClusterSetup: RealmMode cannot be single-realm without a valid ZkAddress set!\");\n       }\n+      if (_realmMode == RealmAwareZkClient.RealmMode.MULTI_REALM && isZkAddressSet) {\n+        throw new HelixException(\n+            \"ClusterSetup: You cannot set the ZkAddress on multi-realm mode!\");\n+      }\n       if (_realmMode == null) {\n         _realmMode = isZkAddressSet ? RealmAwareZkClient.RealmMode.SINGLE_REALM\n             : RealmAwareZkClient.RealmMode.MULTI_REALM;\n"}}, {"oid": "499a5f3e3a3855715f61719ccb91cf00dc5bd275", "url": "https://github.com/apache/helix/commit/499a5f3e3a3855715f61719ccb91cf00dc5bd275", "message": "Address comments", "committedDate": "2020-03-06T21:43:54Z", "type": "commit"}, {"oid": "75580730792ba556f16fdbb6a55bd5aae1b3767d", "url": "https://github.com/apache/helix/commit/75580730792ba556f16fdbb6a55bd5aae1b3767d", "message": "update", "committedDate": "2020-03-06T22:50:55Z", "type": "commit"}, {"oid": "e4bca40a76e6f8cbd2494b31dc0c2d705f645759", "url": "https://github.com/apache/helix/commit/e4bca40a76e6f8cbd2494b31dc0c2d705f645759", "message": "asdf", "committedDate": "2020-03-06T23:06:51Z", "type": "commit"}, {"oid": "9b90c774a0121845c828fc216791e52451ba5cef", "url": "https://github.com/apache/helix/commit/9b90c774a0121845c828fc216791e52451ba5cef", "message": "update with no fallback logic", "committedDate": "2020-03-11T00:29:44Z", "type": "commit"}, {"oid": "f7beee40b316e59d4154fd872eba57f09d654413", "url": "https://github.com/apache/helix/commit/f7beee40b316e59d4154fd872eba57f09d654413", "message": "deprecate", "committedDate": "2020-03-11T01:09:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3MDI4OQ==", "url": "https://github.com/apache/helix/pull/861#discussion_r391070289", "bodyText": "I understand there is no rule for naming convention for a property key. But are we considering xxx.yyy.zzz in lowercase ? I would prefer this way as it is more readable, commonly used and easier to troubleshoot. I prefer this way. Just 2 cents", "author": "huizhilu", "createdAt": "2020-03-11T15:46:56Z", "path": "helix-common/src/main/java/org/apache/helix/SystemPropertyKeys.java", "diffHunk": "@@ -57,4 +60,7 @@\n \n   // MBean monitor for helix.\n   public static final String HELIX_MONITOR_TIME_WINDOW_LENGTH_MS = \"helix.monitor.slidingTimeWindow.ms\";\n+\n+  // Multi-ZK mode enable/disable flag\n+  public static final String MULTI_ZK_ENABLED = \"helix.multiZkEnabled\";", "originalCommit": "f7beee40b316e59d4154fd872eba57f09d654413", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNTI2OQ==", "url": "https://github.com/apache/helix/pull/861#discussion_r391125269", "bodyText": "Nit: not sure whether or not we would allow users to set upper case \u201cTRUE\u201d and honor it as true. I just use getBoolean() to restrict it to true if and only if string is lowercase \u201ctrue\u201d.", "author": "huizhilu", "createdAt": "2020-03-11T17:05:20Z", "path": "helix-core/src/main/java/org/apache/helix/ConfigAccessor.java", "diffHunk": "@@ -123,23 +127,23 @@ public ConfigAccessor(RealmAwareZkClient zkClient) {\n    * @param zkAddress\n    */\n   public ConfigAccessor(String zkAddress) {\n-    // First, attempt to connect on multi-realm mode using FederatedZkClient\n-    RealmAwareZkClient zkClient;\n-    try {\n-      zkClient = new FederatedZkClient(\n-          new RealmAwareZkClient.RealmAwareZkConnectionConfig.Builder().build(),\n-          new RealmAwareZkClient.RealmAwareZkClientConfig());\n-    } catch (IOException | InvalidRoutingDataException | IllegalStateException e) {\n-      // Connecting multi-realm failed - fall back to creating it on single-realm mode using the given ZK address\n-      LOG.info(\n-          \"ConfigAccessor: not able to connect on multi-realm mode; connecting single-realm mode to ZK: {}\",\n-          zkAddress, e);\n-      zkClient = SharedZkClientFactory.getInstance()\n-          .buildZkClient(new HelixZkClient.ZkConnectionConfig(zkAddress),\n-              new HelixZkClient.ZkClientConfig().setZkSerializer(new ZNRecordSerializer()));\n-    }\n-    _zkClient = zkClient;\n     _usesExternalZkClient = false;\n+\n+    // If the multi ZK config is enabled, use FederatedZkClient on multi-realm mode\n+    if (Boolean.parseBoolean(System.getProperty(SystemPropertyKeys.MULTI_ZK_ENABLED))) {", "originalCommit": "f7beee40b316e59d4154fd872eba57f09d654413", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0Mzg0OA==", "url": "https://github.com/apache/helix/pull/861#discussion_r391343848", "bodyText": "They should both be considered as true. Either way works.", "author": "narendly", "createdAt": "2020-03-12T00:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyNTI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d919b316428b7ab2d4690461ba27e2201c50bc56", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java b/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java\nindex 0e94f01ea..b1fecbce4 100644\n--- a/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n+++ b/helix-core/src/main/java/org/apache/helix/ConfigAccessor.java\n\n@@ -126,6 +127,7 @@ public class ConfigAccessor {\n    * ConfigAccessor only deals with Helix's data models like ResourceConfig.\n    * @param zkAddress\n    */\n+  @Deprecated\n   public ConfigAccessor(String zkAddress) {\n     _usesExternalZkClient = false;\n \n"}}, {"oid": "9e0c9cb50c7c4e3c8150966ab49ee22f6e96f1f2", "url": "https://github.com/apache/helix/commit/9e0c9cb50c7c4e3c8150966ab49ee22f6e96f1f2", "message": "remove default serializer", "committedDate": "2020-03-12T02:17:00Z", "type": "commit"}, {"oid": "4debac81900bee085f81ce8c7cc0d806e317236c", "url": "https://github.com/apache/helix/commit/4debac81900bee085f81ce8c7cc0d806e317236c", "message": "FSAD'\ngit", "committedDate": "2020-03-12T02:19:10Z", "type": "commit"}, {"oid": "d919b316428b7ab2d4690461ba27e2201c50bc56", "url": "https://github.com/apache/helix/commit/d919b316428b7ab2d4690461ba27e2201c50bc56", "message": "default serializer", "committedDate": "2020-03-12T02:28:18Z", "type": "commit"}]}