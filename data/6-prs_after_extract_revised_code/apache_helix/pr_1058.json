{"pr_number": 1058, "pr_title": "Fix ReadOnlyWagedRebalancer so that it computes mapping from scratch", "pr_createdAt": "2020-06-04T16:38:16Z", "pr_url": "https://github.com/apache/helix/pull/1058", "timeline": [{"oid": "bf7f289910555f6af0aa8c7a98a963c06026319f", "url": "https://github.com/apache/helix/commit/bf7f289910555f6af0aa8c7a98a963c06026319f", "message": "Fix ReadOnlyWagedRebalancer so that it computes mapping from scratch\n\nPreviously, ReadOnlyWagedRebalancer would only read from the previously computed best possible mapping and returns it. This commit changes it so that it computes things from scratch - it can read the previously computed best possible mapping but shouldn't just return it without doing any calculation.", "committedDate": "2020-06-04T16:32:58Z", "type": "commit"}, {"oid": "c88fcb0e58508acaacdef4dcda9af46802480cb0", "url": "https://github.com/apache/helix/commit/c88fcb0e58508acaacdef4dcda9af46802480cb0", "message": "Fix util so that global rebalance happens synchronously", "committedDate": "2020-06-06T19:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMjc3MQ==", "url": "https://github.com/apache/helix/pull/1058#discussion_r436902771", "bodyText": "Let's have a different name for this private class. I would still prefer the old name DryrunWagedRebalancer.\nBut feel free to have a better name for this method.", "author": "jiajunwang", "createdAt": "2020-06-08T18:17:55Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -428,4 +432,20 @@ public String toString() {\n     return verifierName + \"(\" + _clusterName + \"@\" + _zkClient + \"@resources[\"\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n+\n+  private class ReadOnlyWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.ReadOnlyWagedRebalancer {", "originalCommit": "c88fcb0e58508acaacdef4dcda9af46802480cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTc4NA==", "url": "https://github.com/apache/helix/pull/1058#discussion_r437881784", "bodyText": "Okay. Changed to Dryrun", "author": "narendly", "createdAt": "2020-06-10T06:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMjc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "35988bce164f80c1102085110f1c58f6efb28beb", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 41da289f7..63a20d7f8 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -433,8 +433,8 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n \n-  private class ReadOnlyWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.ReadOnlyWagedRebalancer {\n-    public ReadOnlyWagedRebalancer(String metadataStoreAddress, String clusterName,\n+  private class DryrunWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.DryrunWagedRebalancer {\n+    public DryrunWagedRebalancer(String metadataStoreAddress, String clusterName,\n         Map<ClusterConfig.GlobalRebalancePreferenceKey, Integer> preferences) {\n       super(metadataStoreAddress, clusterName, preferences);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMzU1OQ==", "url": "https://github.com/apache/helix/pull/1058#discussion_r436903559", "bodyText": "As we see in the test, the current way overriding the live instance info won't work. We need to retain the session Id somehow. Otherwise, the current state won't be read correctly.", "author": "jiajunwang", "createdAt": "2020-06-08T18:19:25Z", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -175,27 +175,34 @@ public static String serializeByComma(List<String> objects) {\n       String metadataStoreAddress, ClusterConfig clusterConfig,\n       List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n       List<IdealState> idealStates, List<ResourceConfig> resourceConfigs) {\n+    // Copy the cluster config and make globalRebalance happen synchronously\n+    // Otherwise, globalRebalance may not complete and this util might end up returning\n+    // an empty assignment.\n+    ClusterConfig globalSyncClusterConfig = new ClusterConfig(clusterConfig.getRecord());\n+    globalSyncClusterConfig.setGlobalRebalanceAsyncMode(false);\n+\n     // Prepare a data accessor for a dataProvider (cache) refresh\n     BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n     HelixDataAccessor helixDataAccessor =\n-        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+        new ZKHelixDataAccessor(globalSyncClusterConfig.getClusterName(), baseDataAccessor);\n \n     // Create an instance of read-only WAGED rebalancer\n     ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n-        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n-            clusterConfig.getGlobalRebalancePreference());\n+        new ReadOnlyWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n+            globalSyncClusterConfig.getGlobalRebalancePreference());\n \n     // Use a dummy event to run the required stages for BestPossibleState calculation\n     // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n-    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    ClusterEvent event =\n+        new ClusterEvent(globalSyncClusterConfig.getClusterName(), ClusterEventType.Unknown);\n \n     try {\n       // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n       ResourceControllerDataProvider dataProvider =\n-          new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+          new ResourceControllerDataProvider(globalSyncClusterConfig.getClusterName());\n       dataProvider.requireFullRefresh();\n       dataProvider.refresh(helixDataAccessor);\n-      dataProvider.setClusterConfig(clusterConfig);\n+      dataProvider.setClusterConfig(globalSyncClusterConfig);\n       dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n           .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n       dataProvider.setLiveInstances(", "originalCommit": "c88fcb0e58508acaacdef4dcda9af46802480cb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35988bce164f80c1102085110f1c58f6efb28beb", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java b/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\nindex e94f2b67b..78d6e3228 100644\n--- a/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\n@@ -187,8 +187,8 @@ public final class HelixUtil {\n         new ZKHelixDataAccessor(globalSyncClusterConfig.getClusterName(), baseDataAccessor);\n \n     // Create an instance of read-only WAGED rebalancer\n-    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n-        new ReadOnlyWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n+    DryrunWagedRebalancer dryrunWagedRebalancer =\n+        new DryrunWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n             globalSyncClusterConfig.getGlobalRebalancePreference());\n \n     // Use a dummy event to run the required stages for BestPossibleState calculation\n"}}, {"oid": "35988bce164f80c1102085110f1c58f6efb28beb", "url": "https://github.com/apache/helix/commit/35988bce164f80c1102085110f1c58f6efb28beb", "message": "Change name and fix liveinstances", "committedDate": "2020-06-10T06:23:00Z", "type": "commit"}, {"oid": "647996cf95c185a73893613fb04ad38911f7b4a0", "url": "https://github.com/apache/helix/commit/647996cf95c185a73893613fb04ad38911f7b4a0", "message": "Fix unmodifiablemap", "committedDate": "2020-06-10T15:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNTI4Ng==", "url": "https://github.com/apache/helix/pull/1058#discussion_r438325286", "bodyText": "I should have made myself clearer. What I meant to say is that you can name the newly defined private class DryrunWagedRebalancer here. But the one in the package org.apache.helix.controller.rebalancer.waged can still be named ReadOnlyWagedRebalancer.\nThe purpose is to differentiate the names so as to avoid confusion.", "author": "jiajunwang", "createdAt": "2020-06-10T18:25:13Z", "path": "helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java", "diffHunk": "@@ -428,4 +432,20 @@ public String toString() {\n     return verifierName + \"(\" + _clusterName + \"@\" + _zkClient + \"@resources[\"\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n+\n+  private class DryrunWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.DryrunWagedRebalancer {", "originalCommit": "647996cf95c185a73893613fb04ad38911f7b4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "587917c3f59bd713ba2460fb2aa7793d1e470f5c", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\nindex 63a20d7f8..7ea9a059e 100644\n--- a/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n+++ b/helix-core/src/main/java/org/apache/helix/tools/ClusterVerifiers/BestPossibleExternalViewVerifier.java\n\n@@ -433,7 +433,7 @@ public class BestPossibleExternalViewVerifier extends ZkHelixClusterVerifier {\n        + (_resources != null ? Arrays.toString(_resources.toArray()) : \"\") + \"])\";\n   }\n \n-  private class DryrunWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.DryrunWagedRebalancer {\n+  private class DryrunWagedRebalancer extends org.apache.helix.controller.rebalancer.waged.ReadOnlyWagedRebalancer {\n     public DryrunWagedRebalancer(String metadataStoreAddress, String clusterName,\n         Map<ClusterConfig.GlobalRebalancePreferenceKey, Integer> preferences) {\n       super(metadataStoreAddress, clusterName, preferences);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNzMwOQ==", "url": "https://github.com/apache/helix/pull/1058#discussion_r438327309", "bodyText": "Please don't filter out any live instances that are in the input but not in the dataProvider.\nThe caller might want to test with those non-exist live instances. And even the sessions of those non-exist live instances are empty, the tool can still running fine because there won't be any current state read for the non-exist instances anyway.", "author": "jiajunwang", "createdAt": "2020-06-10T18:28:53Z", "path": "helix-core/src/main/java/org/apache/helix/util/HelixUtil.java", "diffHunk": "@@ -175,37 +176,50 @@ public static String serializeByComma(List<String> objects) {\n       String metadataStoreAddress, ClusterConfig clusterConfig,\n       List<InstanceConfig> instanceConfigs, List<String> liveInstances,\n       List<IdealState> idealStates, List<ResourceConfig> resourceConfigs) {\n+    // Copy the cluster config and make globalRebalance happen synchronously\n+    // Otherwise, globalRebalance may not complete and this util might end up returning\n+    // an empty assignment.\n+    ClusterConfig globalSyncClusterConfig = new ClusterConfig(clusterConfig.getRecord());\n+    globalSyncClusterConfig.setGlobalRebalanceAsyncMode(false);\n+\n     // Prepare a data accessor for a dataProvider (cache) refresh\n     BaseDataAccessor<ZNRecord> baseDataAccessor = new ZkBaseDataAccessor<>(metadataStoreAddress);\n     HelixDataAccessor helixDataAccessor =\n-        new ZKHelixDataAccessor(clusterConfig.getClusterName(), baseDataAccessor);\n+        new ZKHelixDataAccessor(globalSyncClusterConfig.getClusterName(), baseDataAccessor);\n \n     // Create an instance of read-only WAGED rebalancer\n-    ReadOnlyWagedRebalancer readOnlyWagedRebalancer =\n-        new ReadOnlyWagedRebalancer(metadataStoreAddress, clusterConfig.getClusterName(),\n-            clusterConfig.getGlobalRebalancePreference());\n+    DryrunWagedRebalancer dryrunWagedRebalancer =\n+        new DryrunWagedRebalancer(metadataStoreAddress, globalSyncClusterConfig.getClusterName(),\n+            globalSyncClusterConfig.getGlobalRebalancePreference());\n \n     // Use a dummy event to run the required stages for BestPossibleState calculation\n     // Attributes RESOURCES and RESOURCES_TO_REBALANCE are populated in ResourceComputationStage\n-    ClusterEvent event = new ClusterEvent(clusterConfig.getClusterName(), ClusterEventType.Unknown);\n+    ClusterEvent event =\n+        new ClusterEvent(globalSyncClusterConfig.getClusterName(), ClusterEventType.Unknown);\n \n     try {\n       // Obtain a refreshed dataProvider (cache) and overwrite cluster parameters with the given parameters\n       ResourceControllerDataProvider dataProvider =\n-          new ResourceControllerDataProvider(clusterConfig.getClusterName());\n+          new ResourceControllerDataProvider(globalSyncClusterConfig.getClusterName());\n       dataProvider.requireFullRefresh();\n       dataProvider.refresh(helixDataAccessor);\n-      dataProvider.setClusterConfig(clusterConfig);\n+      dataProvider.setClusterConfig(globalSyncClusterConfig);\n       dataProvider.setInstanceConfigMap(instanceConfigs.stream()\n           .collect(Collectors.toMap(InstanceConfig::getInstanceName, Function.identity())));\n-      dataProvider.setLiveInstances(\n-          liveInstances.stream().map(LiveInstance::new).collect(Collectors.toList()));\n+      // For LiveInstances, we must preserve the existing session IDs\n+      // So read LiveInstance objects from the cluster and do a \"retainAll\" on them\n+      // liveInstanceMap is an unmodifiableMap instances, so we filter using a stream\n+      Map<String, LiveInstance> liveInstanceMap = dataProvider.getLiveInstances();\n+      List<LiveInstance> filteredLiveInstances = liveInstanceMap.entrySet().stream()\n+          .filter(entry -> liveInstances.contains(entry.getKey())).map(Map.Entry::getValue)", "originalCommit": "647996cf95c185a73893613fb04ad38911f7b4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NDY5Ng==", "url": "https://github.com/apache/helix/pull/1058#discussion_r438374696", "bodyText": "Fixed", "author": "narendly", "createdAt": "2020-06-10T19:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNzMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "13e5946ffd141bef176a0ac00e0080490ce893b3", "chunk": "diff --git a/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java b/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\nindex 684449ec3..63d486e25 100644\n--- a/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n+++ b/helix-core/src/main/java/org/apache/helix/util/HelixUtil.java\n\n@@ -213,6 +214,18 @@ public final class HelixUtil {\n       List<LiveInstance> filteredLiveInstances = liveInstanceMap.entrySet().stream()\n           .filter(entry -> liveInstances.contains(entry.getKey())).map(Map.Entry::getValue)\n           .collect(Collectors.toList());\n+      // Synthetically create LiveInstance objects that are passed in as the parameter\n+      // First, determine which new LiveInstance objects need to be created\n+      liveInstances.removeAll(filteredLiveInstances.stream().map(LiveInstance::getInstanceName)\n+          .collect(Collectors.toList()));\n+      liveInstances.forEach(liveInstanceName -> {\n+        // Create a new LiveInstance object and give it a random UUID as a session ID\n+        LiveInstance newLiveInstanceObj = new LiveInstance(liveInstanceName);\n+        newLiveInstanceObj.getRecord()\n+            .setSimpleField(LiveInstance.LiveInstanceProperty.SESSION_ID.name(),\n+                UUID.randomUUID().toString().replace(\"-\", \"\"));\n+        filteredLiveInstances.add(newLiveInstanceObj);\n+      });\n       dataProvider.setLiveInstances(new ArrayList<>(filteredLiveInstances));\n       dataProvider.setIdealStates(idealStates);\n       dataProvider.setResourceConfigMap(resourceConfigs.stream()\n"}}, {"oid": "13e5946ffd141bef176a0ac00e0080490ce893b3", "url": "https://github.com/apache/helix/commit/13e5946ffd141bef176a0ac00e0080490ce893b3", "message": "improve", "committedDate": "2020-06-10T19:55:59Z", "type": "commit"}, {"oid": "587917c3f59bd713ba2460fb2aa7793d1e470f5c", "url": "https://github.com/apache/helix/commit/587917c3f59bd713ba2460fb2aa7793d1e470f5c", "message": "change name", "committedDate": "2020-06-10T19:57:56Z", "type": "commit"}, {"oid": "bcae1bd1b2bdeca10cff9b96d7a57c8881c505f3", "url": "https://github.com/apache/helix/commit/bcae1bd1b2bdeca10cff9b96d7a57c8881c505f3", "message": "add test", "committedDate": "2020-06-10T21:39:25Z", "type": "commit"}]}