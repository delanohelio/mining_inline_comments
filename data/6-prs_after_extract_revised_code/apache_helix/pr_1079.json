{"pr_number": 1079, "pr_title": "Add delete for PropertyStore in Helix REST", "pr_createdAt": "2020-06-09T22:26:00Z", "pr_url": "https://github.com/apache/helix/pull/1079", "timeline": [{"oid": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "url": "https://github.com/apache/helix/commit/76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "message": "Add delete for PropertyStore in Helix REST\n\nThis commit adds the delete endpoint for PropertyStore in Helix REST.", "committedDate": "2020-06-09T22:20:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzI1NQ==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437757255", "bodyText": "Nit, long line? Maybe split it into two strings concatenation?", "author": "huizhilu", "createdAt": "2020-06-09T22:28:10Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");", "originalCommit": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2NTM2MA==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437765360", "bodyText": "This has been formatted with helix-style, so I don't think we need to do a string concatenation.", "author": "narendly", "createdAt": "2020-06-09T22:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2NzgwMA==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437767800", "bodyText": "helix-style won't be able to limit such long string within 100 chars per line. We just need to do it manually. If we have checkstyle for 100 chars check, this won't pass.", "author": "huizhilu", "createdAt": "2020-06-09T22:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzI1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2ODg1Mw==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437768853", "bodyText": "If it's not something we could strictly enforce, then I don't see a strong reason for doing so. That is if we have a checkstyle check- we don't have this check.\nIf you want to enforce a lint/checkstyle check, then we could again do it project-wide.", "author": "narendly", "createdAt": "2020-06-09T23:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NzI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "383c240a62909da5acccd19ac993c192102b7df7", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\nindex 0c17c20bf..e92a689dd 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n\n@@ -153,7 +152,7 @@ public class PropertyStoreAccessor extends AbstractHelixResource {\n           \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n     }\n     final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n-    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n+    BaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n     if (!propertyStoreDataAccessor.remove(recordPath, AccessOption.PERSISTENT)) {\n       return serverError(\"Failed to delete PropertyStore record in path: \" + path);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODEyNQ==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437758125", "bodyText": "Nit, ZkBaseDataAccessor -> BaseDataAccessor?", "author": "huizhilu", "createdAt": "2020-06-09T22:30:42Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n+    }\n+    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n+    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();", "originalCommit": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2NzcxNQ==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437767715", "bodyText": "Changed.", "author": "narendly", "createdAt": "2020-06-09T22:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "383c240a62909da5acccd19ac993c192102b7df7", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\nindex 0c17c20bf..e92a689dd 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n\n@@ -153,7 +152,7 @@ public class PropertyStoreAccessor extends AbstractHelixResource {\n           \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n     }\n     final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n-    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n+    BaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n     if (!propertyStoreDataAccessor.remove(recordPath, AccessOption.PERSISTENT)) {\n       return serverError(\"Failed to delete PropertyStore record in path: \" + path);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODc4Mw==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437758783", "bodyText": "Nit, if I were a user, I would expect to see a clear response indicating the request is successful:\n{\n  \"success\": true\n}\n\nI think this is included in helix rest improvement plan.", "author": "huizhilu", "createdAt": "2020-06-09T22:32:31Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java", "diffHunk": "@@ -134,4 +135,28 @@ public Response putPropertyByPath(@PathParam(\"clusterId\") String clusterId,\n       return serverError(e);\n     }\n   }\n+\n+  /**\n+   * Recursively deletes the PropertyStore path. If the node does not exist, it returns OK().\n+   * @param clusterId\n+   * @param path\n+   * @return\n+   */\n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response deletePropertyByPath(@PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"path\") String path) {\n+    path = \"/\" + path;\n+    if (!ZkValidationUtil.isPathValid(path)) {\n+      LOG.info(\"The propertyStore path {} is invalid for cluster {}\", path, clusterId);\n+      return badRequest(\n+          \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n+    }\n+    final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n+    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n+    if (!propertyStoreDataAccessor.remove(recordPath, AccessOption.PERSISTENT)) {\n+      return serverError(\"Failed to delete PropertyStore record in path: \" + path);\n+    }\n+    return OK();", "originalCommit": "76cb16bf7e51fb32e0ca9d00580c8f9850a4f292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2ODEyNQ==", "url": "https://github.com/apache/helix/pull/1079#discussion_r437768125", "bodyText": "Let's discuss that as part of the rest improvement plan. We need to discuss what would make the most sense.\nThis is done to keep it consistent with other DELETE endpoints.", "author": "narendly", "createdAt": "2020-06-09T23:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1ODc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "383c240a62909da5acccd19ac993c192102b7df7", "chunk": "diff --git a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\nindex 0c17c20bf..e92a689dd 100644\n--- a/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n+++ b/helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/PropertyStoreAccessor.java\n\n@@ -153,7 +152,7 @@ public class PropertyStoreAccessor extends AbstractHelixResource {\n           \"Invalid path string. Valid path strings use slash as the directory separator and names the location of ZNode\");\n     }\n     final String recordPath = PropertyPathBuilder.propertyStore(clusterId) + path;\n-    ZkBaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n+    BaseDataAccessor<byte[]> propertyStoreDataAccessor = getByteArrayDataAccessor();\n     if (!propertyStoreDataAccessor.remove(recordPath, AccessOption.PERSISTENT)) {\n       return serverError(\"Failed to delete PropertyStore record in path: \" + path);\n     }\n"}}, {"oid": "383c240a62909da5acccd19ac993c192102b7df7", "url": "https://github.com/apache/helix/commit/383c240a62909da5acccd19ac993c192102b7df7", "message": "Use BaseDataAccessor", "committedDate": "2020-06-09T22:58:30Z", "type": "commit"}]}