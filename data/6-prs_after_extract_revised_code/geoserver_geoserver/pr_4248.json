{"pr_number": 4248, "pr_title": "[GEOS-9625] Add filtering support in json-ld module", "pr_createdAt": "2020-05-18T13:30:11Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4248", "timeline": [{"oid": "7af4b6e48110831b82d9c5e3674bc9a3f04280a4", "url": "https://github.com/geoserver/geoserver/commit/7af4b6e48110831b82d9c5e3674bc9a3f04280a4", "message": "[GEOS-9625] Add filtering support in json-ld module", "committedDate": "2020-05-18T16:01:33Z", "type": "commit"}, {"oid": "e5ba2d0bcf8e2ce3436b26c2076d082042fbad68", "url": "https://github.com/geoserver/geoserver/commit/e5ba2d0bcf8e2ce3436b26c2076d082042fbad68", "message": "add validation for filter and changes for better class readability", "committedDate": "2020-05-18T16:01:33Z", "type": "commit"}, {"oid": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "url": "https://github.com/geoserver/geoserver/commit/fa265e67c1d6f2e2fb1201370f613df483cafcfa", "message": "tests and documentation updates", "committedDate": "2020-05-18T16:01:33Z", "type": "commit"}, {"oid": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "url": "https://github.com/geoserver/geoserver/commit/fa265e67c1d6f2e2fb1201370f613df483cafcfa", "message": "tests and documentation updates", "committedDate": "2020-05-18T16:01:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5OTEzNw==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435099137", "bodyText": "Public method without javadoc... but it seems it's in good company, and the module is unsupported, so eventually javadocs can be improved at the eventual graduation time, no need to do it now.", "author": "aaime", "createdAt": "2020-06-04T08:58:00Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/JsonLdGenerator.java", "diffHunk": "@@ -133,6 +133,11 @@ public void writeResult(Object result) throws IOException {\n         }\n     }\n \n+    public void writeString(String entryName, String value) throws IOException {", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDE4Ng==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435100186", "bodyText": "Why couldn't this be written using a simple for loop? I don't see odd exit conditions.", "author": "aaime", "createdAt": "2020-06-04T08:59:40Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/AbstractJsonBuilder.java", "diffHunk": "@@ -6,26 +6,60 @@\n \n import java.io.IOException;\n import org.geoserver.jsonld.JsonLdGenerator;\n+import org.geoserver.jsonld.builders.impl.JsonBuilderContext;\n+import org.geoserver.jsonld.expressions.JsonLdCqlManager;\n+import org.geotools.filter.text.cql2.CQLException;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.expression.*;\n+import org.xml.sax.helpers.NamespaceSupport;\n \n /** Abstract implementation of {@link JsonBuilder} who groups some common attributes and methods. */\n public abstract class AbstractJsonBuilder implements JsonBuilder {\n \n     protected String key;\n \n-    public AbstractJsonBuilder(String key) {\n+    protected Filter filter;\n+\n+    protected int filterContextPos = 0;\n+\n+    protected NamespaceSupport namespaces;\n+\n+    public AbstractJsonBuilder(String key, NamespaceSupport namespaces) {\n         this.key = key;\n+        this.namespaces = namespaces;\n     }\n \n     protected void writeKey(JsonLdGenerator writer) throws IOException {\n         if (key != null && !key.equals(\"\")) writer.writeFieldName(key);\n         else throw new RuntimeException(\"Cannot write null key value\");\n     }\n \n+    protected boolean evaluateFilter(JsonBuilderContext context) {\n+        if (filter == null) return true;\n+        int i = 0;", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNTYzMQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435135631", "bodyText": "Indeed no need for the while here, fixed", "author": "taba90", "createdAt": "2020-06-04T09:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ca1763b490e951afd15222c8a382180af65eb3c0", "chunk": "diff --git a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/AbstractJsonBuilder.java b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/AbstractJsonBuilder.java\nindex 5c2e584df2..f002dc232f 100644\n--- a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/AbstractJsonBuilder.java\n+++ b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/AbstractJsonBuilder.java\n\n@@ -7,10 +7,9 @@ package org.geoserver.jsonld.builders;\n import java.io.IOException;\n import org.geoserver.jsonld.JsonLdGenerator;\n import org.geoserver.jsonld.builders.impl.JsonBuilderContext;\n-import org.geoserver.jsonld.expressions.JsonLdCqlManager;\n+import org.geoserver.jsonld.expressions.JsonLdCQLManager;\n import org.geotools.filter.text.cql2.CQLException;\n import org.opengis.filter.Filter;\n-import org.opengis.filter.expression.*;\n import org.xml.sax.helpers.NamespaceSupport;\n \n /** Abstract implementation of {@link JsonBuilder} who groups some common attributes and methods. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDU3Mw==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435100573", "bodyText": "Commented out code, please remove.", "author": "aaime", "createdAt": "2020-06-04T09:00:16Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -38,65 +33,42 @@\n     private static final Logger LOGGER = Logging.getLogger(DynamicValueBuilder.class);\n \n     public DynamicValueBuilder(String key, String expression, NamespaceSupport namespaces) {\n-        super(key);\n+        super(key, namespaces);\n         this.namespaces = namespaces;\n+        JsonLdCqlManager cqlManager = new JsonLdCqlManager(expression, namespaces);\n         if (expression.startsWith(\"$${\")) {\n-            strCqlToExpression(expression);\n+            this.cql = cqlManager.getExpressionFromString();\n+            // strCqlToExpression(expression);", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNTgwOQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435135809", "bodyText": "removed", "author": "taba90", "createdAt": "2020-06-04T09:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ca1763b490e951afd15222c8a382180af65eb3c0", "chunk": "diff --git a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\nindex d6a6b00d14..66ed14fcef 100644\n--- a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\n+++ b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\n\n@@ -35,13 +35,11 @@ public class DynamicValueBuilder extends AbstractJsonBuilder {\n     public DynamicValueBuilder(String key, String expression, NamespaceSupport namespaces) {\n         super(key, namespaces);\n         this.namespaces = namespaces;\n-        JsonLdCqlManager cqlManager = new JsonLdCqlManager(expression, namespaces);\n+        JsonLdCQLManager cqlManager = new JsonLdCQLManager(expression, namespaces);\n         if (expression.startsWith(\"$${\")) {\n             this.cql = cqlManager.getExpressionFromString();\n-            // strCqlToExpression(expression);\n         } else if (expression.startsWith(\"${\")) {\n             this.xpath = cqlManager.getAttributeExpressionFromString();\n-            // strXpathToPropertyName(expression);\n         }\n         this.contextPos = cqlManager.getContextPos();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDYyNQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435100625", "bodyText": "Commented out code, please remove.", "author": "aaime", "createdAt": "2020-06-04T09:00:22Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java", "diffHunk": "@@ -38,65 +33,42 @@\n     private static final Logger LOGGER = Logging.getLogger(DynamicValueBuilder.class);\n \n     public DynamicValueBuilder(String key, String expression, NamespaceSupport namespaces) {\n-        super(key);\n+        super(key, namespaces);\n         this.namespaces = namespaces;\n+        JsonLdCqlManager cqlManager = new JsonLdCqlManager(expression, namespaces);\n         if (expression.startsWith(\"$${\")) {\n-            strCqlToExpression(expression);\n+            this.cql = cqlManager.getExpressionFromString();\n+            // strCqlToExpression(expression);\n         } else if (expression.startsWith(\"${\")) {\n-            strXpathToPropertyName(expression);\n+            this.xpath = cqlManager.getAttributeExpressionFromString();\n+            // strXpathToPropertyName(expression);", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNTg5MQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435135891", "bodyText": "removed", "author": "taba90", "createdAt": "2020-06-04T09:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca1763b490e951afd15222c8a382180af65eb3c0", "chunk": "diff --git a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\nindex d6a6b00d14..66ed14fcef 100644\n--- a/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\n+++ b/src/community/json-ld/src/main/java/org/geoserver/jsonld/builders/impl/DynamicValueBuilder.java\n\n@@ -35,13 +35,11 @@ public class DynamicValueBuilder extends AbstractJsonBuilder {\n     public DynamicValueBuilder(String key, String expression, NamespaceSupport namespaces) {\n         super(key, namespaces);\n         this.namespaces = namespaces;\n-        JsonLdCqlManager cqlManager = new JsonLdCqlManager(expression, namespaces);\n+        JsonLdCQLManager cqlManager = new JsonLdCQLManager(expression, namespaces);\n         if (expression.startsWith(\"$${\")) {\n             this.cql = cqlManager.getExpressionFromString();\n-            // strCqlToExpression(expression);\n         } else if (expression.startsWith(\"${\")) {\n             this.xpath = cqlManager.getAttributeExpressionFromString();\n-            // strXpathToPropertyName(expression);\n         }\n         this.contextPos = cqlManager.getContextPos();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjI2Mw==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435102263", "bodyText": "What if the filter itself contains a comma? (a CQL filter can contain a \"in\" operator that uses it, or might have a string literal containing it).", "author": "aaime", "createdAt": "2020-06-04T09:03:04Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/configuration/JsonLdTemplateReader.java", "diffHunk": "@@ -121,13 +136,47 @@ private void getBuilderFromJsonArray(\n \n     private void getBuilderFromJsonAttribute(\n             String nodeName, JsonNode node, JsonBuilder currentBuilder) {\n+        String strNode = node.asText();\n+        String filter = null;\n+        if (strNode.contains(FILTERKEY)) {\n+            String[] arrNode = strNode.split(\",\");", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNTk5MQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435135991", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-06-04T09:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ca1763b490e951afd15222c8a382180af65eb3c0", "chunk": "diff --git a/src/community/json-ld/src/main/java/org/geoserver/jsonld/configuration/JsonLdTemplateReader.java b/src/community/json-ld/src/main/java/org/geoserver/jsonld/configuration/JsonLdTemplateReader.java\nindex 09a3da8c22..7366709d87 100644\n--- a/src/community/json-ld/src/main/java/org/geoserver/jsonld/configuration/JsonLdTemplateReader.java\n+++ b/src/community/json-ld/src/main/java/org/geoserver/jsonld/configuration/JsonLdTemplateReader.java\n\n@@ -139,10 +139,13 @@ public class JsonLdTemplateReader {\n         String strNode = node.asText();\n         String filter = null;\n         if (strNode.contains(FILTERKEY)) {\n-            String[] arrNode = strNode.split(\",\");\n+            strNode = strNode.replace(FILTERKEY + \"{\", \"\");\n+            int sepIndex = strNode.indexOf('}') + 1;\n+            String sep = String.valueOf(strNode.charAt(sepIndex));\n+            String[] arrNode = strNode.split(sep);\n             strNode = arrNode[1];\n             filter = arrNode[0];\n-            filter = filter.replace(\"$filter{\", \"\").replace(\"}\", \"\");\n+            filter = filter.substring(0, filter.length() - 1);\n         }\n         if (node.toString().contains(EXPRSTART) && !node.asText().equals(\"FeatureCollection\")) {\n             DynamicValueBuilder dynamicBuilder =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjkwNQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435102905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class JsonLdCqlManager {\n          \n          \n            \n            public class JsonLdCQLManager {\n          \n      \n    \n    \n  \n\nDoes the class need to be public?", "author": "aaime", "createdAt": "2020-06-04T09:04:09Z", "path": "src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCqlManager.java", "diffHunk": "@@ -1,38 +1,125 @@\n-/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n  * This code is licensed under the GPL 2.0 license, available at the root\n  * application directory.\n  */\n package org.geoserver.jsonld.expressions;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.geoserver.jsonld.builders.impl.JsonBuilderContext;\n-import org.geotools.data.complex.feature.type.ComplexFeatureTypeImpl;\n import org.geotools.factory.CommonFactoryFinder;\n-import org.geotools.feature.type.Types;\n+import org.geotools.filter.AttributeExpressionImpl;\n import org.geotools.filter.text.cql2.CQLException;\n import org.geotools.filter.text.ecql.ECQL;\n-import org.opengis.feature.type.FeatureType;\n+import org.geotools.filter.visitor.DuplicatingFilterVisitor;\n+import org.opengis.filter.Filter;\n import org.opengis.filter.FilterFactory;\n import org.opengis.filter.expression.Expression;\n+import org.opengis.filter.expression.Literal;\n import org.xml.sax.helpers.NamespaceSupport;\n \n /**\n  * Helper class that mainly allows the extraction of CQL and Xpath expressions out of a plain text\n- * string using special separators. It also provides some Utility methods to handle namespaces and\n- * xpath syntax\n+ * string using special separators. Moreover, since JsonLd templates can declare an xpath('some\n+ * xpath') function that has no real FunctionExpression implementation, this class provides methods\n+ * to extracts the xpath from the function as a literal, to substitute it after cql encoding\n+ * happened with an AttributeExpression.\n  */\n-public class ExpressionsUtils {\n+public class JsonLdCqlManager {", "originalCommit": "fa265e67c1d6f2e2fb1201370f613df483cafcfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNzI0OQ==", "url": "https://github.com/geoserver/geoserver/pull/4248#discussion_r435137249", "bodyText": "at the moment it is used outside its package by the builders", "author": "taba90", "createdAt": "2020-06-04T10:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMjkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca1763b490e951afd15222c8a382180af65eb3c0", "chunk": "diff --git a/src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCqlManager.java b/src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCQLManager.java\nsimilarity index 99%\nrename from src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCqlManager.java\nrename to src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCQLManager.java\nindex 79a3d3c960..dfc5cb82b5 100644\n--- a/src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCqlManager.java\n+++ b/src/community/json-ld/src/main/java/org/geoserver/jsonld/expressions/JsonLdCQLManager.java\n\n@@ -27,7 +27,7 @@ import org.xml.sax.helpers.NamespaceSupport;\n  * to extracts the xpath from the function as a literal, to substitute it after cql encoding\n  * happened with an AttributeExpression.\n  */\n-public class JsonLdCqlManager {\n+public class JsonLdCQLManager {\n \n     private String strCql;\n \n"}}, {"oid": "ca1763b490e951afd15222c8a382180af65eb3c0", "url": "https://github.com/geoserver/geoserver/commit/ca1763b490e951afd15222c8a382180af65eb3c0", "message": "reviewer's suggestion applied", "committedDate": "2020-06-04T09:52:55Z", "type": "commit"}]}