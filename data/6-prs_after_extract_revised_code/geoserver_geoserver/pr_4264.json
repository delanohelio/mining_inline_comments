{"pr_number": 4264, "pr_title": "[GEOS-9633] Pregeneralized DataStore and Vector-tile", "pr_createdAt": "2020-05-28T15:35:39Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4264", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzAwOQ==", "url": "https://github.com/geoserver/geoserver/pull/4264#discussion_r436593009", "bodyText": "No need for the comment, the change must be covered by a test case anyways.", "author": "aaime", "createdAt": "2020-06-08T10:16:01Z", "path": "src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/VectorTileMapOutputFormat.java", "diffHunk": "@@ -203,7 +203,10 @@ void run(\n                     continue;\n                 }\n \n-                final String layerName = feature.getName().getLocalPart();\n+                final String layerName =\n+                        feature.getType()\n+                                .getName()\n+                                .getLocalPart(); // Pregeneralized have null getName()!!!", "originalCommit": "ae30de389f847a654021b6dcea91a126bfa30d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5543d5fb93e5e6785b5428da73a47c8a8e739000", "chunk": "diff --git a/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/VectorTileMapOutputFormat.java b/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/VectorTileMapOutputFormat.java\nindex e05e5b59c5..6a6582cf91 100644\n--- a/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/VectorTileMapOutputFormat.java\n+++ b/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/VectorTileMapOutputFormat.java\n\n@@ -196,17 +220,17 @@ public class VectorTileMapOutputFormat extends AbstractMapOutputFormat {\n                 try {\n                     finalGeom = pipeline.execute(originalGeom);\n                 } catch (Exception processingException) {\n-                    processingException.printStackTrace();\n+                    LOGGER.log(\n+                            Level.WARNING,\n+                            processingException.getLocalizedMessage(),\n+                            processingException);\n                     continue;\n                 }\n                 if (finalGeom.isEmpty()) {\n                     continue;\n                 }\n \n-                final String layerName =\n-                        feature.getType()\n-                                .getName()\n-                                .getLocalPart(); // Pregeneralized have null getName()!!!\n+                final String layerName = feature.getType().getName().getLocalPart();\n                 final String featureId = feature.getIdentifier().toString();\n                 final String geometryName = geometryDescriptor.getName().getLocalPart();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5NzQ1OQ==", "url": "https://github.com/geoserver/geoserver/pull/4264#discussion_r436597459", "bodyText": "The screenmap is already set at the PipelineBuilder level, should probably be using that one (a code path to make it available needs to be created), but if you do, then the PreProcess step needs have the screenamap usage disabled.\nEven if they are kept separate, the two screenmaps should at least have the exact same config.", "author": "aaime", "createdAt": "2020-06-08T10:24:46Z", "path": "src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java", "diffHunk": "@@ -105,10 +110,99 @@ public static Query getStyleQuery(Layer layer, WMSMapContent mapContent) throws\n         query.setProperties(Query.ALL_PROPERTIES);\n \n         Hints hints = query.getHints();\n+\n         hints.put(Hints.FEATURE_2D, Boolean.TRUE);\n \n+        // update the screenmaps\n+        try {", "originalCommit": "ae30de389f847a654021b6dcea91a126bfa30d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5543d5fb93e5e6785b5428da73a47c8a8e739000", "chunk": "diff --git a/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java b/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\nindex 2c6640e67c..9f2f3ce291 100644\n--- a/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\n+++ b/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\n\n@@ -110,99 +105,10 @@ public class VectorMapRenderUtils {\n         query.setProperties(Query.ALL_PROPERTIES);\n \n         Hints hints = query.getHints();\n-\n         hints.put(Hints.FEATURE_2D, Boolean.TRUE);\n \n-        // update the screenmaps\n-        try {\n-            CoordinateReferenceSystem crs = schema.getCoordinateReferenceSystem();\n-            if (crs != null) {\n-                FeatureSource<FeatureType, Feature> source =\n-                        (FeatureSource<FeatureType, Feature>) layer.getFeatureSource();\n-                Set<RenderingHints.Key> fsHints = source.getSupportedHints();\n-                CoordinateReferenceSystem destSRS = query.getCoordinateSystemReproject();\n-                MathTransform sourceToScreen =\n-                        buildFullTransform(\n-                                crs,\n-                                destSRS != null ? destSRS : crs,\n-                                mapContent.getRenderingTransform());\n-                double[] spans =\n-                        // fallback, use the entire rendering area\n-                        Decimator.computeGeneralizationDistances(\n-                                sourceToScreen.inverse(), screenSize, generalizationDistance);\n-                for (LiteFeatureTypeStyle fts : styleList) {\n-                    if (fts.screenMap != null) {\n-                        fts.screenMap.setTransform(sourceToScreen);\n-                        fts.screenMap.setSpans(spans[0], spans[1]);\n-                        if (fsHints.contains(Hints.SCREENMAP)) {\n-                            // replace the renderer screenmap with the hint, and avoid doing\n-                            // the work twice\n-                            hints.put(Hints.SCREENMAP, fts.screenMap);\n-                            fts.screenMap = null;\n-                        }\n-                    }\n-                }\n-\n-                double distance = spans[0] < spans[1] ? spans[0] : spans[1];\n-                // ... if possible we let the datastore do the generalization\n-                if (fsHints.contains(Hints.GEOMETRY_SIMPLIFICATION)) {\n-                    // good, we don't need to perform in memory generalization, the datastore\n-                    // does it all for us\n-                    hints.put(Hints.GEOMETRY_SIMPLIFICATION, distance);\n-                    disableInMemoryGeneralization(styleList);\n-                } else if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {\n-                    // in this case the datastore can get us close, but we can still\n-                    // perform some in memory generalization\n-                    hints.put(Hints.GEOMETRY_DISTANCE, distance);\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOGGER.log(Level.INFO, \"Error computing the generalization hints\", e);\n-        }\n-\n         return query;\n     }\n-    /**\n-     * Enables advanced reprojection handling. Geometries will be sliced to fit into the area of\n-     * definition of the rendering projection.\n-     */\n-    public static final String ADVANCED_PROJECTION_HANDLING_KEY = \"advancedProjectionHandling\";\n-\n-    /**\n-     * Builds a full transform going from the source CRS to the destination CRS and from there to\n-     * the screen.\n-     *\n-     * <p>Although we ask for 2D content (via {@link Hints#FEATURE_2D} ) not all DataStore\n-     * implementations are capable. In this event we will manually stage the information into {@link\n-     * DefaultGeographicCRS#WGS84}) and before using this transform.\n-     */\n-    private static MathTransform buildFullTransform(\n-            CoordinateReferenceSystem sourceCRS,\n-            CoordinateReferenceSystem destCRS,\n-            AffineTransform worldToScreenTransform)\n-            throws FactoryException {\n-        MathTransform mt = buildTransform(sourceCRS, destCRS);\n-\n-        // concatenate from world to screen\n-        if (mt != null && !mt.isIdentity()) {\n-            mt =\n-                    ConcatenatedTransform.create(\n-                            mt, ProjectiveTransform.create(worldToScreenTransform));\n-        } else {\n-            mt = ProjectiveTransform.create(worldToScreenTransform);\n-        }\n-\n-        return mt;\n-    }\n-\n-    /** Maximum displacement for generalization during rendering */\n-    private static double generalizationDistance = 0.8;\n-\n-    private static void disableInMemoryGeneralization(List<LiteFeatureTypeStyle> styleList) {\n-        for (LiteFeatureTypeStyle fts : styleList) {\n-            fts.inMemoryGeneralization = false;\n-        }\n-    }\n \n     public static double getMapScale(\n             WMSMapContent mapContent, final ReferencedEnvelope renderingArea) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5Nzg3MA==", "url": "https://github.com/geoserver/geoserver/pull/4264#discussion_r436597870", "bodyText": "Code should be updated to match the vector tiles context (there is no \"renderer screenmap\", but the code could be referring to the PreProcess pipeline step screenmap instead).", "author": "aaime", "createdAt": "2020-06-08T10:25:34Z", "path": "src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java", "diffHunk": "@@ -105,10 +110,99 @@ public static Query getStyleQuery(Layer layer, WMSMapContent mapContent) throws\n         query.setProperties(Query.ALL_PROPERTIES);\n \n         Hints hints = query.getHints();\n+\n         hints.put(Hints.FEATURE_2D, Boolean.TRUE);\n \n+        // update the screenmaps\n+        try {\n+            CoordinateReferenceSystem crs = schema.getCoordinateReferenceSystem();\n+            if (crs != null) {\n+                FeatureSource<FeatureType, Feature> source =\n+                        (FeatureSource<FeatureType, Feature>) layer.getFeatureSource();\n+                Set<RenderingHints.Key> fsHints = source.getSupportedHints();\n+                CoordinateReferenceSystem destSRS = query.getCoordinateSystemReproject();\n+                MathTransform sourceToScreen =\n+                        buildFullTransform(\n+                                crs,\n+                                destSRS != null ? destSRS : crs,\n+                                mapContent.getRenderingTransform());\n+                double[] spans =\n+                        // fallback, use the entire rendering area\n+                        Decimator.computeGeneralizationDistances(\n+                                sourceToScreen.inverse(), screenSize, generalizationDistance);\n+                for (LiteFeatureTypeStyle fts : styleList) {\n+                    if (fts.screenMap != null) {\n+                        fts.screenMap.setTransform(sourceToScreen);\n+                        fts.screenMap.setSpans(spans[0], spans[1]);\n+                        if (fsHints.contains(Hints.SCREENMAP)) {\n+                            // replace the renderer screenmap with the hint, and avoid doing", "originalCommit": "ae30de389f847a654021b6dcea91a126bfa30d8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5543d5fb93e5e6785b5428da73a47c8a8e739000", "chunk": "diff --git a/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java b/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\nindex 2c6640e67c..9f2f3ce291 100644\n--- a/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\n+++ b/src/extension/vectortiles/src/main/java/org/geotools/renderer/lite/VectorMapRenderUtils.java\n\n@@ -110,99 +105,10 @@ public class VectorMapRenderUtils {\n         query.setProperties(Query.ALL_PROPERTIES);\n \n         Hints hints = query.getHints();\n-\n         hints.put(Hints.FEATURE_2D, Boolean.TRUE);\n \n-        // update the screenmaps\n-        try {\n-            CoordinateReferenceSystem crs = schema.getCoordinateReferenceSystem();\n-            if (crs != null) {\n-                FeatureSource<FeatureType, Feature> source =\n-                        (FeatureSource<FeatureType, Feature>) layer.getFeatureSource();\n-                Set<RenderingHints.Key> fsHints = source.getSupportedHints();\n-                CoordinateReferenceSystem destSRS = query.getCoordinateSystemReproject();\n-                MathTransform sourceToScreen =\n-                        buildFullTransform(\n-                                crs,\n-                                destSRS != null ? destSRS : crs,\n-                                mapContent.getRenderingTransform());\n-                double[] spans =\n-                        // fallback, use the entire rendering area\n-                        Decimator.computeGeneralizationDistances(\n-                                sourceToScreen.inverse(), screenSize, generalizationDistance);\n-                for (LiteFeatureTypeStyle fts : styleList) {\n-                    if (fts.screenMap != null) {\n-                        fts.screenMap.setTransform(sourceToScreen);\n-                        fts.screenMap.setSpans(spans[0], spans[1]);\n-                        if (fsHints.contains(Hints.SCREENMAP)) {\n-                            // replace the renderer screenmap with the hint, and avoid doing\n-                            // the work twice\n-                            hints.put(Hints.SCREENMAP, fts.screenMap);\n-                            fts.screenMap = null;\n-                        }\n-                    }\n-                }\n-\n-                double distance = spans[0] < spans[1] ? spans[0] : spans[1];\n-                // ... if possible we let the datastore do the generalization\n-                if (fsHints.contains(Hints.GEOMETRY_SIMPLIFICATION)) {\n-                    // good, we don't need to perform in memory generalization, the datastore\n-                    // does it all for us\n-                    hints.put(Hints.GEOMETRY_SIMPLIFICATION, distance);\n-                    disableInMemoryGeneralization(styleList);\n-                } else if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {\n-                    // in this case the datastore can get us close, but we can still\n-                    // perform some in memory generalization\n-                    hints.put(Hints.GEOMETRY_DISTANCE, distance);\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOGGER.log(Level.INFO, \"Error computing the generalization hints\", e);\n-        }\n-\n         return query;\n     }\n-    /**\n-     * Enables advanced reprojection handling. Geometries will be sliced to fit into the area of\n-     * definition of the rendering projection.\n-     */\n-    public static final String ADVANCED_PROJECTION_HANDLING_KEY = \"advancedProjectionHandling\";\n-\n-    /**\n-     * Builds a full transform going from the source CRS to the destination CRS and from there to\n-     * the screen.\n-     *\n-     * <p>Although we ask for 2D content (via {@link Hints#FEATURE_2D} ) not all DataStore\n-     * implementations are capable. In this event we will manually stage the information into {@link\n-     * DefaultGeographicCRS#WGS84}) and before using this transform.\n-     */\n-    private static MathTransform buildFullTransform(\n-            CoordinateReferenceSystem sourceCRS,\n-            CoordinateReferenceSystem destCRS,\n-            AffineTransform worldToScreenTransform)\n-            throws FactoryException {\n-        MathTransform mt = buildTransform(sourceCRS, destCRS);\n-\n-        // concatenate from world to screen\n-        if (mt != null && !mt.isIdentity()) {\n-            mt =\n-                    ConcatenatedTransform.create(\n-                            mt, ProjectiveTransform.create(worldToScreenTransform));\n-        } else {\n-            mt = ProjectiveTransform.create(worldToScreenTransform);\n-        }\n-\n-        return mt;\n-    }\n-\n-    /** Maximum displacement for generalization during rendering */\n-    private static double generalizationDistance = 0.8;\n-\n-    private static void disableInMemoryGeneralization(List<LiteFeatureTypeStyle> styleList) {\n-        for (LiteFeatureTypeStyle fts : styleList) {\n-            fts.inMemoryGeneralization = false;\n-        }\n-    }\n \n     public static double getMapScale(\n             WMSMapContent mapContent, final ReferencedEnvelope renderingArea) {\n"}}, {"oid": "5543d5fb93e5e6785b5428da73a47c8a8e739000", "url": "https://github.com/geoserver/geoserver/commit/5543d5fb93e5e6785b5428da73a47c8a8e739000", "message": "[GEOS-9633] first draft\nintegrating with the pipeline builder\n\nleverage on target distance\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables", "committedDate": "2020-06-22T15:35:55Z", "type": "forcePushed"}, {"oid": "0906d4a46a3b21f05b3615a791f53f1b7d7a2150", "url": "https://github.com/geoserver/geoserver/commit/0906d4a46a3b21f05b3615a791f53f1b7d7a2150", "message": "[GEOS-9633] first draft\nintegrating with the pipeline builder\n\nleverage on target distance\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nfix WFS3 module build", "committedDate": "2020-06-22T17:14:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTM3MA==", "url": "https://github.com/geoserver/geoserver/pull/4264#discussion_r445031370", "bodyText": "Not so sure about this (actually copied from other Renderer). in case of GEOMETRY_SIMPLIFICATION do we have to skip the GEOMETRY_DISTANCE hint? why can't we leverage on both?\nNote also that with VectorTile GEOMETRY_SIMPLIFICATION is causing invalid geometries as discussed here", "author": "ccancellieri", "createdAt": "2020-06-24T16:46:05Z", "path": "src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/PipelineBuilder.java", "diffHunk": "@@ -268,8 +278,27 @@ public PipelineBuilder transform(final boolean transformToScreenCoordinates) {\n      *\n      * @param isTransformToScreenCoordinates Use screen coordinate space simplification tolerance\n      */\n-    public PipelineBuilder simplify(boolean isTransformToScreenCoordinates) {\n+    public PipelineBuilder simplify(\n+            boolean isTransformToScreenCoordinates,\n+            final Set<RenderingHints.Key> fsHints,\n+            final Hints qHints) {\n \n+        if (fsHints != null && qHints != null) {\n+            // ... if possible we let the datastore do the generalization\n+            if (fsHints.contains(Hints.GEOMETRY_SIMPLIFICATION)) {\n+                // good, we don't need to perform in memory generalization, the datastore\n+                // does it all for us\n+                qHints.put(Hints.GEOMETRY_SIMPLIFICATION, context.sourceCRSSimplificationDistance);\n+\n+                return this;\n+\n+            } else if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {", "originalCommit": "0906d4a46a3b21f05b3615a791f53f1b7d7a2150", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60a5ac89f1a37741b2a0c82a188348328fd32b25", "chunk": "diff --git a/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/PipelineBuilder.java b/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/PipelineBuilder.java\nindex 96c13d49ed..9a7a601686 100644\n--- a/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/PipelineBuilder.java\n+++ b/src/extension/vectortiles/src/main/java/org/geoserver/wms/vector/PipelineBuilder.java\n\n@@ -284,19 +284,16 @@ public class PipelineBuilder {\n             final Hints qHints) {\n \n         if (fsHints != null && qHints != null) {\n-            // ... if possible we let the datastore do the generalization\n-            if (fsHints.contains(Hints.GEOMETRY_SIMPLIFICATION)) {\n-                // good, we don't need to perform in memory generalization, the datastore\n-                // does it all for us\n-                qHints.put(Hints.GEOMETRY_SIMPLIFICATION, context.sourceCRSSimplificationDistance);\n+            // if possible we let the datastore do the generalizations\n \n-                return this;\n+            // check for distance support\n+            if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {\n \n-            } else if (fsHints.contains(Hints.GEOMETRY_DISTANCE)) {\n-\n-                // in this case the datastore can get us close, but we can still\n-                // perform some in memory generalization\n+                // the datastore supports distance based simplification,\n+                // let's add the Hint to the query\n                 qHints.put(Hints.GEOMETRY_DISTANCE, context.sourceCRSSimplificationDistance);\n+\n+                // do not return: we can still perform some in memory generalization ...\n             }\n         }\n         double pixelDistance = context.screenSimplificationDistance;\n"}}, {"oid": "60a5ac89f1a37741b2a0c82a188348328fd32b25", "url": "https://github.com/geoserver/geoserver/commit/60a5ac89f1a37741b2a0c82a188348328fd32b25", "message": "[GEOS-9633] first draft\nintegrating with the pipeline builder\n\nleverage on target distance\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nfix WFS3 module build\n\nFinalize pull request with tests and comments\n\nFinalize pull request with tests and comments", "committedDate": "2020-08-02T08:39:51Z", "type": "forcePushed"}, {"oid": "3146247d5c366476f978c36a68934a285ca71ccb", "url": "https://github.com/geoserver/geoserver/commit/3146247d5c366476f978c36a68934a285ca71ccb", "message": "[GEOS-9633] first draft\nintegrating with the pipeline builder\n\nleverage on target distance\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nfix WFS3 module build\n\nFinalize pull request with tests and comments\n\nFinalize pull request with tests and comments\n\nlet's startup again the pipeline", "committedDate": "2020-08-03T07:31:28Z", "type": "forcePushed"}, {"oid": "7d132135997419cef530f968da6f978a5e2111bf", "url": "https://github.com/geoserver/geoserver/commit/7d132135997419cef530f968da6f978a5e2111bf", "message": "[GEOS-9633] first draft\nintegrating with the pipeline builder\n\nleverage on target distance\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nrefactor to reduce code duplication and variables\n\nfix WFS3 module build\n\nFinalize pull request with tests and comments\n\nFinalize pull request with tests and comments\n\nlet's startup again the pipeline", "committedDate": "2020-08-03T15:48:34Z", "type": "forcePushed"}, {"oid": "79e58873102141ee7f52c2067ff7fb69c2ecb64d", "url": "https://github.com/geoserver/geoserver/commit/79e58873102141ee7f52c2067ff7fb69c2ecb64d", "message": "[GEOS-9633] Provide Pre-Generalized support to VectorTile extension", "committedDate": "2020-08-05T16:32:58Z", "type": "forcePushed"}, {"oid": "cd9ed93db1475b4d7016856e56a459beed447373", "url": "https://github.com/geoserver/geoserver/commit/cd9ed93db1475b4d7016856e56a459beed447373", "message": "[GEOS-9633] Provide Pre-Generalized support to VectorTile extension", "committedDate": "2020-08-06T17:07:07Z", "type": "forcePushed"}, {"oid": "00d68dbeab7a938847c88455f43b7b0a9d2c3d85", "url": "https://github.com/geoserver/geoserver/commit/00d68dbeab7a938847c88455f43b7b0a9d2c3d85", "message": "[GEOS-9633] Provide Pre-Generalized support to VectorTile extension", "committedDate": "2020-08-09T20:03:56Z", "type": "commit"}, {"oid": "00d68dbeab7a938847c88455f43b7b0a9d2c3d85", "url": "https://github.com/geoserver/geoserver/commit/00d68dbeab7a938847c88455f43b7b0a9d2c3d85", "message": "[GEOS-9633] Provide Pre-Generalized support to VectorTile extension", "committedDate": "2020-08-09T20:03:56Z", "type": "forcePushed"}]}