{"pr_number": 4033, "pr_title": "[GEOS-9489] Invalid <OnlineResource> for external legend graphics accessible in WMS capability document", "pr_createdAt": "2020-02-07T05:51:38Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4033", "timeline": [{"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67", "url": "https://github.com/geoserver/geoserver/commit/02a9c3e344818bd029c637e3c2247cad127c8e67", "message": "[GEOS-9489] Invalid <OnlineResource> for external legend graphics\naccessible over URL/URI in WMS capability document\n\n-UI page does not complain on URL and URI\n-cap doc does not prefix external URL/URIs with base url\n\t-legend urls are adverstised as get legend requests", "committedDate": "2020-02-07T05:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNzg3Mw==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376717873", "bodyText": "Not looking for a file here, this is not used to access any file on the file system - instead only used to access a resource in the styles folder (ideally via Resource API.)", "author": "jodygarnett", "createdAt": "2020-02-08T16:03:23Z", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -64,6 +65,8 @@\n \n     private Model<String> showhideStyleModel = new Model<String>(\"\");\n \n+    private static String externalURIPattern = \"^(http|https|file)://.*$\";", "originalCommit": "02a9c3e344818bd029c637e3c2247cad127c8e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDI0Mw==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376894243", "bodyText": "that functionality still holds and untouched, the unit tests assert that. This is for http, https and file:///", "author": "imranrajjad", "createdAt": "2020-02-10T07:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNzg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b6e89970519f119350682a5fd7a17e6aeb8a7c75", "chunk": "diff --git a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\nindex ed433cdb46..4306eb77d6 100644\n--- a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n+++ b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n\n@@ -65,8 +64,6 @@ public class ExternalGraphicPanel extends Panel {\n \n     private Model<String> showhideStyleModel = new Model<String>(\"\");\n \n-    private static String externalURIPattern = \"^(http|https|file)://.*$\";\n-\n     public ExternalGraphicPanel(\n             String id, final CompoundPropertyModel<StyleInfo> styleModel, final Form<?> styleForm) {\n         super(id, styleModel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxODAyNQ==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376718025", "bodyText": "The logic is getting duplicated between transformers, may be worth some code reuse.", "author": "jodygarnett", "createdAt": "2020-02-08T16:06:08Z", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java", "diffHunk": "@@ -1488,121 +1485,87 @@ protected void handleAttribution(PublishedInfo layer) {\n         protected void handleLegendURL(\n                 LayerInfo layer, LegendInfo legend, StyleInfo style, StyleInfo sampleStyle) {\n             // add CapabilityUtil.validateLegendInfo\n+            int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n+            int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+\n+            String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n+\n             if (validateLegendInfo(legend)) {\n                 if (LOGGER.isLoggable(Level.FINE)) {\n                     LOGGER.fine(\"using user supplied legend URL\");\n                 }\n+                // reading sizes of external graphics\n+                legendWidth = legend.getWidth();\n+                legendHeight = legend.getHeight();\n+                // remove any charset info\n+                defaultFormat = legend.getFormat().replaceFirst(\";charset=utf-8\", \"\");\n+\n+            } else if (sampleStyle != null) {\n+                // delegate to legendSample the calculus of proper legend size for\n+                // the given style\n+                Dimension dimension;\n+                try {\n+                    dimension = legendSample.getLegendURLSize(sampleStyle);\n+                    if (dimension != null) {\n+                        legendWidth = (int) dimension.getWidth();\n+                        legendHeight = (int) dimension.getHeight();\n+                    }\n+                } catch (Exception e) {\n+                    LOGGER.log(Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n+                }\n+            }\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legend.getWidth()));\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legend.getHeight()));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", legend.getFormat());\n-                attrs.clear();\n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                WorkspaceInfo styleWs = sampleStyle.getWorkspace();\n-                String legendUrl;\n-\n-                if (layer.getResource() instanceof WMSLayerInfo)\n-                    legendUrl = legend.getOnlineResource();\n-                else if (styleWs != null) {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\n-                                            \"styles\",\n-                                            styleWs.getName(),\n-                                            legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n-                } else {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\"styles\", legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n+            if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n+                if (LOGGER.isLoggable(Level.WARNING)) {\n+                    LOGGER.warning(\n+                            new StringBuffer(\"Default legend format (\")\n+                                    .append(defaultFormat)\n+                                    .append(\n+                                            \")is not supported (jai not available?), can't add LegendURL element\")\n+                                    .toString());\n                 }\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendUrl);\n-                element(\"OnlineResource\", null, attrs);\n \n-                end(\"LegendURL\");\n-            } else {\n-                int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n-                int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+                return;\n+            }\n \n-                if (sampleStyle != null) {\n-                    // delegate to legendSample the calculus of proper legend size for\n-                    // the given style\n-                    Dimension dimension;\n-                    try {\n-                        dimension = legendSample.getLegendURLSize(sampleStyle);\n-                        if (dimension != null) {\n-                            legendWidth = (int) dimension.getWidth();\n-                            legendHeight = (int) dimension.getHeight();\n-                        }\n-                    } catch (Exception e) {\n-                        LOGGER.log(\n-                                Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n-                    }\n-                }\n-                String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n-\n-                if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n-                    if (LOGGER.isLoggable(Level.WARNING)) {\n-                        LOGGER.warning(\n-                                new StringBuffer(\"Default legend format (\")\n-                                        .append(defaultFormat)\n-                                        .append(\n-                                                \")is not supported (jai not available?), can't add LegendURL element\")\n-                                        .toString());\n-                    }\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n+            }\n \n-                    return;\n-                }\n+            AttributesImpl attrs = new AttributesImpl();\n+            attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n-                }\n+            attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n-\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", defaultFormat);\n-                attrs.clear();\n-\n-                String layerName = layer.prefixedName();\n-                Map<String, String> params =\n-                        params(\n-                                \"request\",\n-                                \"GetLegendGraphic\",\n-                                \"format\",\n-                                defaultFormat,\n-                                \"width\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n-                                \"height\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n-                                \"layer\",\n-                                layerName);\n-                if (style != null) {\n-                    params.put(\"style\", style.getName());\n-                }\n-                String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+            start(\"LegendURL\", attrs);\n \n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n-                element(\"OnlineResource\", null, attrs);\n+            element(\"Format\", defaultFormat);\n+            attrs.clear();\n \n-                end(\"LegendURL\");\n+            String layerName = layer.prefixedName();\n+            Map<String, String> params =\n+                    params(\n+                            \"request\",\n+                            \"GetLegendGraphic\",\n+                            \"format\",\n+                            defaultFormat,\n+                            \"width\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n+                            \"height\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n+                            \"layer\",\n+                            layerName);\n+            if (style != null) {\n+                params.put(\"style\", style.getName());\n             }\n+            String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+\n+            attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n+            attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n+            attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n+            element(\"OnlineResource\", null, attrs);", "originalCommit": "02a9c3e344818bd029c637e3c2247cad127c8e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDExOA==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376894118", "bodyText": "understood, will change", "author": "imranrajjad", "createdAt": "2020-02-10T07:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxODAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b6e89970519f119350682a5fd7a17e6aeb8a7c75", "chunk": "diff --git a/src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java b/src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java\nindex a09c58de67..9df329dfbc 100644\n--- a/src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java\n+++ b/src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java\n\n@@ -1559,10 +1559,7 @@ public class GetCapabilitiesTransformer extends TransformerBase {\n                 params.put(\"style\", style.getName());\n             }\n             String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n-\n-            attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-            attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-            attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n+            CapabilityUtil.addGetLegendAttributes(attrs, legendURL, XLINK_NS);\n             element(\"OnlineResource\", null, attrs);\n \n             end(\"LegendURL\");\n"}}, {"oid": "b6e89970519f119350682a5fd7a17e6aeb8a7c75", "url": "https://github.com/geoserver/geoserver/commit/b6e89970519f119350682a5fd7a17e6aeb8a7c75", "message": "[GEOS-9489] addressing Jody and Andrea comments\n\n-common utility method to populate legend attributes\n-reverted documentation change\n-removed direct file support outside data_dir/styles\n-updated unit tests", "committedDate": "2020-02-11T18:56:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MzQ0NA==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r378073444", "bodyText": "This method is not needed, the logic is already provided in the GeoServerDataDirectory class:\nA couple things - we don't want a File, we just want to check if a file exists.\nThe class GeoServerDataDirectory already has tested methods for these checks:\nResource icon = geoServerDataDirectory.getStylesget(value );\nreturn icon.getType() == Resource.Type.RESOURCE;", "author": "jodygarnett", "createdAt": "2020-02-12T07:15:10Z", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -350,7 +330,28 @@ private void updateVisibility(boolean b) {\n         show.setVisible(!b);\n     }\n \n-    private boolean isUrlOrFile(final String uri) {\n-        return externalURIPattern.matches(uri);\n+    private boolean isUrl(final String uri) {\n+        return uri.startsWith(\"http\");\n+    }\n+\n+    private File findResourceinStylesDirectory(WorkspaceInfo wsInfo, String value)", "originalCommit": "b6e89970519f119350682a5fd7a17e6aeb8a7c75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NDE4NQ==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r378084185", "bodyText": "@jodygarnett this method is basically wrapping the re-usable code, which is currently duplicated, perhaps the name of the method is misleading. It is being used in multiple scenarios. It was the same code doing same thing, but the file was only being used once, as you can observe the placed where its being called. I will be glad to implement your recommendations", "author": "imranrajjad", "createdAt": "2020-02-12T07:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MzQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "chunk": "diff --git a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\nindex 4306eb77d6..e9ac28e05f 100644\n--- a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n+++ b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n\n@@ -334,24 +334,20 @@ public class ExternalGraphicPanel extends Panel {\n         return uri.startsWith(\"http\");\n     }\n \n-    private File findResourceinStylesDirectory(WorkspaceInfo wsInfo, String value)\n+    private Resource getIconFromStyleDirectory(WorkspaceInfo wsInfo, String value)\n             throws Exception {\n         GeoServerResourceLoader resources = GeoServerApplication.get().getResourceLoader();\n-\n-        String[] path = value.split(Pattern.quote(File.separator));\n-        File test = null;\n+        GeoServerDataDirectory gsDataDir = new GeoServerDataDirectory(resources);\n+        Resource icon = null;\n         if (wsInfo != null) {\n-            String wsName = wsInfo.getName();\n-            List<String> list = new ArrayList();\n-            list.addAll(Arrays.asList(\"workspaces\", wsName, \"styles\"));\n-            list.addAll(Arrays.asList(path));\n-            test = resources.find(list.toArray(new String[list.size()]));\n+            icon = gsDataDir.getStyles(wsInfo, value);\n         }\n-        if (test == null) {\n-            // resources.find(styles, path);\n-            test = resources.find(\"styles\" + File.separator + value);\n-            if (test == null) throw new Exception(\"file not found\");\n+        if (icon == null) {\n+            icon = gsDataDir.getStyles(value);\n+            if (icon == null) throw new FileNotFoundException(\"file not found\");\n+            else if (icon.getType() != Resource.Type.RESOURCE)\n+                throw new Exception(\"given path is a directory\");\n         }\n-        return test;\n+        return icon;\n     }\n }\n"}}, {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "url": "https://github.com/geoserver/geoserver/commit/b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "message": "[GEOS-9489] rev 2 Addressing Jody comments\n\n-switched to GeoServerDataDirectory from Java File API", "committedDate": "2020-02-16T16:19:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDEzNg==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380210136", "bodyText": "Commented out code?", "author": "aaime", "createdAt": "2020-02-17T14:24:08Z", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -304,25 +280,20 @@ protected URLConnection getExternalGraphic(AjaxRequestTarget target, Form<?> for\n         if (onlineResource.getModelObject() != null) {\n             URL url = null;\n             try {\n-                String baseUrl = baseURL(form);\n+                // String baseUrl = baseURL(form);", "originalCommit": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDk1Ng==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454956", "bodyText": "will remove", "author": "imranrajjad", "createdAt": "2020-02-18T04:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "chunk": "diff --git a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\nindex e9ac28e05f..16f2bb5d9d 100644\n--- a/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n+++ b/src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java\n\n@@ -280,11 +280,10 @@ public class ExternalGraphicPanel extends Panel {\n         if (onlineResource.getModelObject() != null) {\n             URL url = null;\n             try {\n-                // String baseUrl = baseURL(form);\n                 String external = onlineResource.getModelObject().toString();\n \n                 URI uri = new URI(external);\n-                if (uri.isAbsolute() || isUrl(external)) {\n+                if (uri.isAbsolute() && isUrl(external)) {\n                     url = uri.toURL();\n                 } else {\n                     WorkspaceInfo wsInfo = ((StyleInfo) getDefaultModelObject()).getWorkspace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDgyNQ==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380210825", "bodyText": "Potentially inconsistent logic... here is uri.isAbsolute() && isUrl(value) but below in the class (getExternalGraphic) there is a uri.isAbsolute() || isUrl(value).", "author": "aaime", "createdAt": "2020-02-17T14:25:28Z", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -101,13 +100,8 @@ public void validate(IValidatable<String> input) {\n                         } catch (URISyntaxException e1) {\n                             // Unable to check if absolute\n                         }\n-                        if (uri != null && uri.isAbsolute()) {\n+                        if (uri != null && uri.isAbsolute() && isUrl(value)) {", "originalCommit": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDkzOQ==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454939", "bodyText": "will fix", "author": "imranrajjad", "createdAt": "2020-02-18T04:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDgyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjMyNg==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380212326", "bodyText": "New public method, no javadoc.", "author": "aaime", "createdAt": "2020-02-17T14:28:14Z", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -186,4 +187,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getHeight() > 0\n                 && legend.getWidth() > 0;\n     }\n+\n+    public static AttributesImpl addGetLegendAttributes(", "originalCommit": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDk4NA==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454984", "bodyText": "will add javadoc", "author": "imranrajjad", "createdAt": "2020-02-18T04:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "chunk": "diff --git a/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java b/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\nindex 35c04efce3..dfd08b1dd9 100644\n--- a/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\n+++ b/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\n\n@@ -188,6 +188,14 @@ public final class CapabilityUtil {\n                 && legend.getWidth() > 0;\n     }\n \n+    /**\n+     * A Utility method to populate legend url href attribute\n+     *\n+     * @param attrs AttributesImpl to be populated with Legend URL href\n+     * @param legendURL URL String\n+     * @param XLINK_NS Namsepace like (e.g http://www.w3.org/1999/xlink)\n+     * @return attrs with Legend URL attributes\n+     */\n     public static AttributesImpl addGetLegendAttributes(\n             AttributesImpl attrs, String legendURL, String XLINK_NS) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMzc3Mg==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380213772", "bodyText": "HTP_LEGND? HTTP_LEGEND was not that much longer (other instance in this file)", "author": "aaime", "createdAt": "2020-02-17T14:30:47Z", "path": "src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java", "diffHunk": "@@ -31,16 +33,22 @@\n     // Reusing layer and SLD files from another test; their content doesn't really matter.\n     // What is important for this test is the legend info we are adding.\n     private static final String LAYER_NAME = \"watertemp\";\n+    private static final String LAYER_NAME_HTP_LEGND = \"watertemp_http_legend\";", "originalCommit": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NTAyMQ==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380455021", "bodyText": "will rename", "author": "imranrajjad", "createdAt": "2020-02-18T04:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMzc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "chunk": "diff --git a/src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java b/src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java\nindex 51148ddcc8..d7e88d1545 100644\n--- a/src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java\n+++ b/src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java\n\n@@ -33,15 +32,14 @@ public class LegendCapabilitiesTest extends WMSTestSupport {\n     // Reusing layer and SLD files from another test; their content doesn't really matter.\n     // What is important for this test is the legend info we are adding.\n     private static final String LAYER_NAME = \"watertemp\";\n-    private static final String LAYER_NAME_HTP_LEGND = \"watertemp_http_legend\";\n+    private static final String HTTP_LEGEND_LAYER = \"watertemp_http_legend\";\n     private static final QName LAYER_QNAME =\n             new QName(MockData.DEFAULT_URI, LAYER_NAME, MockData.DEFAULT_PREFIX);\n     private static final QName LAYER_QNAME_HTP_LEGND =\n-            new QName(MockData.DEFAULT_URI, LAYER_NAME_HTP_LEGND, MockData.DEFAULT_PREFIX);\n+            new QName(MockData.DEFAULT_URI, HTTP_LEGEND_LAYER, MockData.DEFAULT_PREFIX);\n     private static final String LAYER_FILE = \"custwatertemp.zip\";\n     private static final String STYLE_NAME = \"temperature\";\n     private static final String STYLE_NAME_HTTP = \"temperature_http_url\";\n-    private static final String STYLE_NAME_LOCALFILE = \"temperature_file_url\";\n     private static final String STYLE_FILE = \"../temperature.sld\";\n \n     private static final int LEGEND_WIDTH = 22;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380566183", "bodyText": "A check that we are about to include with the checkstyle upgrade will fail on undocumented params... either a param is there and documented, or it can be removed (won't complain for missing docs), but cannot be declared and undocumented.", "author": "aaime", "createdAt": "2020-02-18T09:55:15Z", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -188,6 +188,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getWidth() > 0;\n     }\n \n+    /**\n+     * A Utility method to populate legend url href attribute\n+     *\n+     * @param attrs AttributesImpl to be poplated with Legend URL href\n+     * @param legendURL URL String\n+     * @param XLINK_NS", "originalCommit": "3e7a8b0b1a64830cea8f115da49fccc4aa986b70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2ODQyMA==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380568420", "bodyText": "understood, will document it", "author": "imranrajjad", "createdAt": "2020-02-18T09:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3MzA5Mg==", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380573092", "bodyText": "@aaime its done", "author": "imranrajjad", "createdAt": "2020-02-18T10:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "chunk": "diff --git a/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java b/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\nindex 76e5b05ef3..dfd08b1dd9 100644\n--- a/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\n+++ b/src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java\n\n@@ -191,9 +191,9 @@ public final class CapabilityUtil {\n     /**\n      * A Utility method to populate legend url href attribute\n      *\n-     * @param attrs AttributesImpl to be poplated with Legend URL href\n+     * @param attrs AttributesImpl to be populated with Legend URL href\n      * @param legendURL URL String\n-     * @param XLINK_NS\n+     * @param XLINK_NS Namsepace like (e.g http://www.w3.org/1999/xlink)\n      * @return attrs with Legend URL attributes\n      */\n     public static AttributesImpl addGetLegendAttributes(\n"}}, {"oid": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "url": "https://github.com/geoserver/geoserver/commit/c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "message": "[GEOS-9489] AA requested changes rev 3\n\n-fixed logic inconsistency\n-cleaned up comments and unused variables\n-added javadocs to new method", "committedDate": "2020-02-18T10:06:29Z", "type": "commit"}, {"oid": "c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "url": "https://github.com/geoserver/geoserver/commit/c717a570b3fdb6fd7fc435d6d2cdd5a57481fc53", "message": "[GEOS-9489] AA requested changes rev 3\n\n-fixed logic inconsistency\n-cleaned up comments and unused variables\n-added javadocs to new method", "committedDate": "2020-02-18T10:06:29Z", "type": "forcePushed"}]}