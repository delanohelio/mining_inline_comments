{"pr_number": 4118, "pr_title": "[GEOS-9534] Add percentages to sldService classify output", "pr_createdAt": "2020-03-09T12:27:41Z", "pr_url": "https://github.com/geoserver/geoserver/pull/4118", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDkyMg==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390254922", "bodyText": "This assumes color map entries are aligned with the bins, but see above, if a bin is empty, it's going to get skipped and the two array will lose alignment. Probably best to include the percentage calculation in the above loop instead, while building the ColorMapEntry.", "author": "aaime", "createdAt": "2020-03-10T11:39:09Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -147,6 +153,21 @@ public ColorMap uniqueIntervalClassification(RenderedImage image, Integer maxInt\n                             + maxIntervals\n                             + \" was requested\");\n         }\n+        if (outputPercentages) {\n+            double total = IntStream.of(bins).sum();\n+            ColorMapEntry[] cEntries = colorMap.getColorMapEntries();\n+            for (int i = 0; i < cEntries.length; i++) {\n+                ColorMapEntry entry = cEntries[i];\n+                double classMembers = (double) bins[i];", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTM4OA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305388", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\nindex f0bea1f197..6bb846fbc7 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n\n@@ -153,22 +167,6 @@ public class RasterSymbolizerBuilder {\n                             + maxIntervals\n                             + \" was requested\");\n         }\n-        if (outputPercentages) {\n-            double total = IntStream.of(bins).sum();\n-            ColorMapEntry[] cEntries = colorMap.getColorMapEntries();\n-            for (int i = 0; i < cEntries.length; i++) {\n-                ColorMapEntry entry = cEntries[i];\n-                double classMembers = (double) bins[i];\n-                double percentage = (classMembers / total) * 100;\n-                StringBuilder sb =\n-                        new StringBuilder(entry.getLabel())\n-                                .append(\" (\")\n-                                .append(percentage)\n-                                .append(\"%)\");\n-                entry.setLabel(sb.toString());\n-            }\n-        }\n-\n         return colorMap;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDQ1Mg==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390860452", "bodyText": "If instructed to build percentages while doing a custom color map, they should show up. It's possible to calculate them using a histogram operation.", "author": "aaime", "createdAt": "2020-03-11T10:02:29Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -370,7 +424,7 @@ public ColorMap createCustomColorMap(\n             breaks[i + 1] = Converters.convert(classifier.getMax(i), Double.class);\n         }\n \n-        return getColorMapFromBreaks(breaks, open, continuous);\n+        return getColorMapFromBreaks(breaks, open, continuous, null);", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTQ2Nw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305467", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\nindex f0bea1f197..6bb846fbc7 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n\n@@ -417,14 +415,19 @@ public class RasterSymbolizerBuilder {\n \n     /** Builds a ColorMap based on a user specified set of values */\n     public ColorMap createCustomColorMap(\n-            RangedClassifier classifier, boolean open, boolean continuous) {\n+            RenderedImage image, RangedClassifier classifier, boolean open, boolean continuous) {\n         Number[] breaks = new Number[classifier.getSize() + (continuous ? 0 : 1)];\n         breaks[0] = Converters.convert(classifier.getMin(0), Double.class);\n         for (int i = 0; i < breaks.length - 1; i++) {\n             breaks[i + 1] = Converters.convert(classifier.getMax(i), Double.class);\n         }\n-\n-        return getColorMapFromBreaks(breaks, open, continuous, null);\n+        double[] percentages = null;\n+        if (outputPercentages) {\n+            percentages = getPercentagesForCustom(image, breaks.length);\n+            percentages =\n+                    new PercentagesRoundHandler(percentagesScale).roundPercentages(percentages);\n+        }\n+        return getColorMapFromBreaks(breaks, open, continuous, percentages);\n     }\n \n     public void setStandardDeviations(Double standardDeviations) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDg4OQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390860889", "bodyText": "Overly complicated:\nif (percentages == null) return \"\";\nreturn \" (\" + percentages[i] + \")\";", "author": "aaime", "createdAt": "2020-03-11T10:03:18Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -418,4 +472,12 @@ private NumberRange getOperationRange(ImageWorker iw) {\n             }\n         }\n     }\n+\n+    private String getPercentagesLabelPortion(double[] percentages, int i) {\n+        StringBuilder sb = new StringBuilder();", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2Mzk4OA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390863988", "bodyText": "By the way, the vector code states it's a percentage, e..g adds \" (x%)\" while this one just adds \" (x)\". I think it's best to have the % sign, the number per se means nothing to the ones just looking at the map without knowing how the the SLD classification service worked, but at the very least, they should be consistent.", "author": "aaime", "createdAt": "2020-03-11T10:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTU2Nw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305567", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\nindex f0bea1f197..6bb846fbc7 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n\n@@ -474,10 +477,28 @@ public class RasterSymbolizerBuilder {\n     }\n \n     private String getPercentagesLabelPortion(double[] percentages, int i) {\n-        StringBuilder sb = new StringBuilder();\n-        if (percentages != null) {\n-            sb.append(\" (\").append(percentages[i]).append(\")\");\n+        if (percentages == null) return \"\";\n+        else return \" (\" + percentages[i] + \"%)\";\n+    }\n+\n+    private double[] getPercentagesForCustom(RenderedImage image, int intervals) {\n+        ImageWorker iw = getImageWorker(image);\n+        final NumberRange range = getOperationRange(iw);\n+        double low = (int) range.getMinimum();\n+        double high = (int) range.getMaximum();\n+        return computePercentagesFromHistogram(iw, intervals, low, high);\n+    }\n+\n+    private double[] computePercentagesFromHistogram(\n+            ImageWorker iw, int intervals, double low, double high) {\n+        Histogram hist =\n+                iw.getHistogram(new int[] {intervals}, new double[] {low}, new double[] {high});\n+        int[] bins = hist.getBins(0);\n+        double[] percentages = new double[intervals];\n+        int total = IntStream.of(bins).sum();\n+        for (int i = 0; i < intervals; i++) {\n+            percentages[i] = ((double) bins[i] / total) * 100;\n         }\n-        return sb.toString();\n+        return percentages;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTU0Mw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390861543", "bodyText": "Problematic with that function having two optional values at the end (see the GeoTools review)", "author": "aaime", "createdAt": "2020-03-11T10:04:32Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -86,7 +92,11 @@ public void setIncludeStrokeForPoints(boolean includeStrokeForPoints) {\n             String functionName) {\n         try {\n             final Function classify =\n-                    FF.function(functionName, FF.property(property), FF.literal(classNumber));\n+                    FF.function(", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTcxOQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305719", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -91,12 +97,23 @@ public class RulesBuilder {\n             boolean normalize,\n             String functionName) {\n         try {\n-            final Function classify =\n-                    FF.function(\n-                            functionName,\n-                            FF.property(property),\n-                            FF.literal(classNumber),\n-                            FF.literal(outputPercentages));\n+            final Function classify;\n+            if (functionName.equals(\"EqualArea\")) {\n+                classify =\n+                        FF.function(\n+                                functionName,\n+                                FF.property(property),\n+                                FF.literal(classNumber),\n+                                FF.literal(\"\"),\n+                                FF.literal(outputPercentages));\n+            } else {\n+                classify =\n+                        FF.function(\n+                                functionName,\n+                                FF.property(property),\n+                                FF.literal(classNumber),\n+                                FF.literal(outputPercentages));\n+            }\n             Classifier groups = (Classifier) classify.evaluate(features);\n             if (groups instanceof RangedClassifier)\n                 if (open)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTk0OA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390861948", "bodyText": "Why split declaration and assignment over two lines?", "author": "aaime", "createdAt": "2020-03-11T10:05:12Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -315,7 +325,8 @@ public StyleFactory getStyleFactory() {\n         Filter f;\n         List<Rule> list = new ArrayList();\n         Expression att = normalizeProperty(FF.property(property), propertyType, normalize);\n-\n+        PercentagesManager percMan = null;", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTc3MA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305770", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -325,8 +342,7 @@ public class RulesBuilder {\n         Filter f;\n         List<Rule> list = new ArrayList();\n         Expression att = normalizeProperty(FF.property(property), propertyType, normalize);\n-        PercentagesManager percMan = null;\n-        percMan = new PercentagesManager(groups.getPercentages());\n+        PercentagesManager percMan = new PercentagesManager(groups.getPercentages());\n         try {\n             /* First class */\n             r = SF.createRule();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NDQ4NQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390864485", "bodyText": "Two nested if can be expressed as one if with and-ed conditions", "author": "aaime", "createdAt": "2020-03-11T10:09:39Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -472,8 +496,16 @@ private Expression normalizeProperty(\n         return null;\n     }\n \n-    private boolean isDuplicatedClass(List<Rule> rules, Filter f) {\n-        return rules.stream().anyMatch(r -> r.getFilter().equals(f));\n+    private boolean isDuplicatedClass(\n+            List<Rule> rules, Filter f, PercentagesManager percMan, int currentIdx) {\n+        Optional<Rule> opRule = rules.stream().filter(r -> r.getFilter().equals(f)).findFirst();\n+        boolean result = opRule.isPresent();\n+        if (percMan != null) {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTg0Mg==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305842", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NDQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -496,6 +512,57 @@ public class RulesBuilder {\n         return null;\n     }\n \n+    public double[] getCustomPercentages(\n+            FeatureCollection features,\n+            RangedClassifier classifier,\n+            String attribute,\n+            Class<?> propertyType,\n+            boolean normalize) {\n+        int size = classifier.getSize();\n+        PropertyName prop = new AttributeExpressionImpl(attribute);\n+        List<Filter> filters = new ArrayList<>(size);\n+        Expression attr = normalizeProperty(prop, propertyType, normalize);\n+        for (int i = 0; i < size; i++) {\n+            Object min = classifier.getMin(i);\n+            Object max = classifier.getMax(i);\n+            if (min.equals(max)) {\n+                filters.add(FF.equals(attr, FF.literal(min)));\n+            } else if (i == size - 1) {\n+                Filter f1 = FF.greaterOrEqual(attr, FF.literal(min));\n+                Filter f2 = FF.lessOrEqual(attr, FF.literal(max));\n+                Filter and = FF.and(f1, f2);\n+                filters.add(and);\n+            } else {\n+                Filter f1 = FF.greaterOrEqual(attr, FF.literal(min));\n+                Filter f2 = FF.less(attr, FF.literal(max));\n+                Filter and = FF.and(f1, f2);\n+                filters.add(and);\n+            }\n+        }\n+        int[][] bins = new int[size][1];\n+        FeatureIterator it = features.features();\n+        while (it.hasNext()) {\n+            Feature f = it.next();\n+            int i = 0;\n+            for (Filter filter : filters) {\n+                if (filter.evaluate(f)) {\n+                    bins[i][0]++;\n+                    break;\n+                }\n+                i++;\n+            }\n+        }\n+        return computeCustomPercentages(bins, features.size());\n+    }\n+\n+    private double[] computeCustomPercentages(int[][] bins, double totalSize) {\n+        double[] percentages = new double[bins.length];\n+        for (int i = 0; i < bins.length; i++) {\n+            percentages[i] = ((double) bins[i][0] / totalSize) * 100;\n+        }\n+        return percentages;\n+    }\n+\n     private boolean isDuplicatedClass(\n             List<Rule> rules, Filter f, PercentagesManager percMan, int currentIdx) {\n         Optional<Rule> opRule = rules.stream().filter(r -> r.getFilter().equals(f)).findFirst();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjM5Ng==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866396", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n          \n          \n            \n                    public void collapseRulePercentage(List<Rule> rules, Rule current, int index) {", "author": "aaime", "createdAt": "2020-03-11T10:13:05Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTg5NA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305894", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -554,20 +621,23 @@ public class RulesBuilder {\n             }\n         }\n \n-        public void addPercentages(int currentIndex) {\n+        public void collectRulePercentage(int currentIndex) {\n             if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n         }\n \n-        public void addPercentagesToLabel(List<Rule> rules) {\n+        public void addPercentagesToLabels(List<Rule> rules) {\n+            collapsedPercentages =\n+                    new PercentagesRoundHandler(percentagesScale)\n+                            .roundPercentages(collapsedPercentages);\n             if (outputPercentages) {\n                 for (int i = 0; i < rules.size(); i++) {\n                     Rule rule = rules.get(i);\n-                    StringBuffer sb =\n-                            new StringBuffer(rule.getDescription().getTitle())\n-                                    .append(\" (\")\n-                                    .append(collapsedPercentages.get(i))\n-                                    .append(\"%)\");\n-                    rule.getDescription().setTitle(sb.toString());\n+                    String percLabel =\n+                            rule.getDescription().getTitle()\n+                                    + \" (\"\n+                                    + collapsedPercentages.get(i)\n+                                    + \"%)\";\n+                    rule.getDescription().setTitle(percLabel);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjQ5Nw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void addPercentages(int currentIndex) {\n          \n          \n            \n                    public void collectRulePercentage(int currentIndex) {\n          \n      \n    \n    \n  \n\n(adding might seem a sum)", "author": "aaime", "createdAt": "2020-03-11T10:13:16Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTk1Mw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392305953", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -554,20 +621,23 @@ public class RulesBuilder {\n             }\n         }\n \n-        public void addPercentages(int currentIndex) {\n+        public void collectRulePercentage(int currentIndex) {\n             if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n         }\n \n-        public void addPercentagesToLabel(List<Rule> rules) {\n+        public void addPercentagesToLabels(List<Rule> rules) {\n+            collapsedPercentages =\n+                    new PercentagesRoundHandler(percentagesScale)\n+                            .roundPercentages(collapsedPercentages);\n             if (outputPercentages) {\n                 for (int i = 0; i < rules.size(); i++) {\n                     Rule rule = rules.get(i);\n-                    StringBuffer sb =\n-                            new StringBuffer(rule.getDescription().getTitle())\n-                                    .append(\" (\")\n-                                    .append(collapsedPercentages.get(i))\n-                                    .append(\"%)\");\n-                    rule.getDescription().setTitle(sb.toString());\n+                    String percLabel =\n+                            rule.getDescription().getTitle()\n+                                    + \" (\"\n+                                    + collapsedPercentages.get(i)\n+                                    + \"%)\";\n+                    rule.getDescription().setTitle(percLabel);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2Njg4Ng==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void addPercentagesToLabel(List<Rule> rules) {\n          \n          \n            \n                    public void appendPercentagesToLabels(List<Rule> rules) {", "author": "aaime", "createdAt": "2020-03-11T10:13:56Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {\n+            if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n+        }\n+\n+        public void addPercentagesToLabel(List<Rule> rules) {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjE1Mw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392306153", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2Njg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -554,20 +621,23 @@ public class RulesBuilder {\n             }\n         }\n \n-        public void addPercentages(int currentIndex) {\n+        public void collectRulePercentage(int currentIndex) {\n             if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n         }\n \n-        public void addPercentagesToLabel(List<Rule> rules) {\n+        public void addPercentagesToLabels(List<Rule> rules) {\n+            collapsedPercentages =\n+                    new PercentagesRoundHandler(percentagesScale)\n+                            .roundPercentages(collapsedPercentages);\n             if (outputPercentages) {\n                 for (int i = 0; i < rules.size(); i++) {\n                     Rule rule = rules.get(i);\n-                    StringBuffer sb =\n-                            new StringBuffer(rule.getDescription().getTitle())\n-                                    .append(\" (\")\n-                                    .append(collapsedPercentages.get(i))\n-                                    .append(\"%)\");\n-                    rule.getDescription().setTitle(sb.toString());\n+                    String percLabel =\n+                            rule.getDescription().getTitle()\n+                                    + \" (\"\n+                                    + collapsedPercentages.get(i)\n+                                    + \"%)\";\n+                    rule.getDescription().setTitle(percLabel);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzkzNg==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390867936", "bodyText": "Java builds a StringBuffer every time you concatenate strings, avoid building it explicitly unless you're working on a loop/conditional where multiple string concatenations are split among different commands.\nFor this one using:\nString title = rule.getDescription().getTitle() + \" (\" + collapsedPercentanges.get(i) + \"%)\"\nis just as efficient, but more readable.", "author": "aaime", "createdAt": "2020-03-11T10:15:47Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {\n+            if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n+        }\n+\n+        public void addPercentagesToLabel(List<Rule> rules) {\n+            if (outputPercentages) {\n+                for (int i = 0; i < rules.size(); i++) {\n+                    Rule rule = rules.get(i);\n+                    StringBuffer sb =", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjIyNQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392306225", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\nindex 2b9ca02adb..2d179a30da 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java\n\n@@ -554,20 +621,23 @@ public class RulesBuilder {\n             }\n         }\n \n-        public void addPercentages(int currentIndex) {\n+        public void collectRulePercentage(int currentIndex) {\n             if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n         }\n \n-        public void addPercentagesToLabel(List<Rule> rules) {\n+        public void addPercentagesToLabels(List<Rule> rules) {\n+            collapsedPercentages =\n+                    new PercentagesRoundHandler(percentagesScale)\n+                            .roundPercentages(collapsedPercentages);\n             if (outputPercentages) {\n                 for (int i = 0; i < rules.size(); i++) {\n                     Rule rule = rules.get(i);\n-                    StringBuffer sb =\n-                            new StringBuffer(rule.getDescription().getTitle())\n-                                    .append(\" (\")\n-                                    .append(collapsedPercentages.get(i))\n-                                    .append(\"%)\");\n-                    rule.getDescription().setTitle(sb.toString());\n+                    String percLabel =\n+                            rule.getDescription().getTitle()\n+                                    + \" (\"\n+                                    + collapsedPercentages.get(i)\n+                                    + \"%)\";\n+                    rule.getDescription().setTitle(percLabel);\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODgyNA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390868824", "bodyText": "Please split the tests in one test method per check, and validate the computed percentage values too.", "author": "aaime", "createdAt": "2020-03-11T10:17:25Z", "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -2128,4 +2130,195 @@ private void checkNotOverlappingRules(Rule first, Rule second) throws IOExceptio\n         assertTrue(first.getFilter().evaluate(feature));\n         assertFalse(second.getFilter().evaluate(feature));\n     }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsVectors() throws Exception {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2OTkxNA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390869914", "bodyText": "Please add a test for user provided classes as well, both raster and vector cases.\nAlso, these are all \"happy paths\", can you consider tests where things go wrong (e.g., rules that need to be merged, think of more) and add those as well?", "author": "aaime", "createdAt": "2020-03-11T10:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMDEzNw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392320137", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T16:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java b/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\nindex aea2e3888f..2bc69ba68b 100644\n--- a/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\n+++ b/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\n\n@@ -2132,8 +2132,8 @@ public class ClassifierTest extends SLDServiceBaseTest {\n     }\n \n     @Test\n-    public void testPercentagesInRulesLabelsVectors() throws Exception {\n-        String regex = \"\\\\d+(?:\\\\.\\\\d+)?%\";\n+    public void testPercentagesInRulesLabelsVectorsQuantile() throws Exception {\n+        String regex = \"\\\\d+(\\\\.\\\\d)%\";\n         Pattern rgx = Pattern.compile(regex);\n         final String restPathQuantile =\n                 RestBaseController.ROOT_PATH\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODk3NA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390868974", "bodyText": "Same as above.", "author": "aaime", "createdAt": "2020-03-11T10:17:43Z", "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -2128,4 +2130,195 @@ private void checkNotOverlappingRules(Rule first, Rule second) throws IOExceptio\n         assertTrue(first.getFilter().evaluate(feature));\n         assertFalse(second.getFilter().evaluate(feature));\n     }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsVectors() throws Exception {\n+        String regex = \"\\\\d+(?:\\\\.\\\\d+)?%\";\n+        Pattern rgx = Pattern.compile(regex);\n+        final String restPathQuantile =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile\"\n+                        + \"&intervals=3&open=true&percentages=true\";\n+        Document domQuantile = getAsDOM(restPathQuantile, 200);\n+        print(domQuantile);\n+        ByteArrayOutputStream baosQuantile = new ByteArrayOutputStream();\n+        print(domQuantile, baosQuantile);\n+        String resultXml = baosQuantile.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesQuantile =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesQuantile.length == 3);\n+        for (Rule r : rulesQuantile) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+\n+        final String restPathArea =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=equalArea\"\n+                        + \"&intervals=2&percentages=true\";\n+        Document domArea = getAsDOM(restPathArea, 200);\n+        print(domArea);\n+        ByteArrayOutputStream baosArea = new ByteArrayOutputStream();\n+        print(domArea, baosArea);\n+        String resultArea = baosArea.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesArea =\n+                checkSLD(resultArea.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesArea.length == 2);\n+        for (Rule r : rulesArea) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=3&open=true\"\n+                        + \"&percentages=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 3);\n+        for (Rule r : rulesJenks) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+        final String restPathUnique =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=uniqueInterval&intervals=8&\"\n+                        + \"percentages=true\";\n+        Document domUnique = getAsDOM(restPathUnique, 200);\n+        print(domUnique);\n+        ByteArrayOutputStream baosUnique = new ByteArrayOutputStream();\n+        print(domUnique, baosUnique);\n+        String resultXmlUnique = baosUnique.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesUnique =\n+                checkSLD(\n+                        resultXmlUnique\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesUnique.length == 8);\n+        for (Rule r : rulesUnique) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+\n+        final String restPathEqual =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar\"\n+                        + \"&intervals=3&open=false&percentages=true\";\n+        Document domEqual = getAsDOM(restPathEqual);\n+        print(domEqual);\n+        ByteArrayOutputStream baosEqual = new ByteArrayOutputStream();\n+        print(domEqual, baosEqual);\n+        String resultXmlEqual = baosEqual.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesEqual =\n+                checkSLD(\n+                        resultXmlEqual\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesEqual.length == 3);\n+        for (Rule r : rulesEqual) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+    }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsRaster() throws Exception {", "originalCommit": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNjUyMA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392306520", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-13T15:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f403dce65882c7ae745902903c87a22eebd73833", "chunk": "diff --git a/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java b/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\nindex aea2e3888f..2bc69ba68b 100644\n--- a/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\n+++ b/src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java\n\n@@ -2132,8 +2132,8 @@ public class ClassifierTest extends SLDServiceBaseTest {\n     }\n \n     @Test\n-    public void testPercentagesInRulesLabelsVectors() throws Exception {\n-        String regex = \"\\\\d+(?:\\\\.\\\\d+)?%\";\n+    public void testPercentagesInRulesLabelsVectorsQuantile() throws Exception {\n+        String regex = \"\\\\d+(\\\\.\\\\d)%\";\n         Pattern rgx = Pattern.compile(regex);\n         final String restPathQuantile =\n                 RestBaseController.ROOT_PATH\n"}}, {"oid": "f403dce65882c7ae745902903c87a22eebd73833", "url": "https://github.com/geoserver/geoserver/commit/f403dce65882c7ae745902903c87a22eebd73833", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-13T15:36:23Z", "type": "forcePushed"}, {"oid": "f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "url": "https://github.com/geoserver/geoserver/commit/f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-13T15:58:34Z", "type": "forcePushed"}, {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5", "url": "https://github.com/geoserver/geoserver/commit/130b86a23bf183c44e92f05788e204269b4cb2b5", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-13T16:01:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MzM2OQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392963369", "bodyText": "Does not need to be public, right?", "author": "aaime", "createdAt": "2020-03-16T11:53:44Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {", "originalCommit": "130b86a23bf183c44e92f05788e204269b4cb2b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTEyNw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r395021127", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-19T13:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\nindex 7dc6a5f3e9..1c700f0566 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n\n@@ -6,56 +6,52 @@ package org.geoserver.sldservice.utils.classifier;\n \n import java.math.BigDecimal;\n import java.math.RoundingMode;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.DoubleStream;\n+import org.apache.commons.lang3.ArrayUtils;\n \n-public class PercentagesRoundHandler {\n+class PercentagesRoundHandler {\n \n     private int scale;\n \n-    public PercentagesRoundHandler(Integer scale) {\n+    PercentagesRoundHandler(Integer scale) {\n         this.scale = scale != null ? scale : 1;\n     }\n \n-    public PercentagesRoundHandler() {\n+    PercentagesRoundHandler() {\n         this.scale = 1;\n     }\n \n-    public List<Double> roundPercentages(List<Double> percentages) {\n-        if (percentages == null || percentages.size() == 0) return null;\n-        int size = percentages.size();\n-        for (int i = 0; i < size; i++) {\n-            double percentage = percentages.get(i);\n-            double rounded = roundDouble(percentage);\n-            percentages.set(i, rounded);\n-        }\n-        double delta = 100.0 - percentages.stream().mapToDouble(d -> d).sum();\n-        if (delta > 0.0) {\n-            Double lastRule = percentages.get(size - 1) + roundDouble(delta);\n-            percentages.set(size - 1, lastRule);\n-        }\n-        return percentages;\n+    List<Double> roundPercentages(List<Double> percentages) {\n+        Double[] array = percentages.toArray(new Double[percentages.size()]);\n+        double[] rounded = roundPercentages(ArrayUtils.toPrimitive(array));\n+        return Arrays.asList(ArrayUtils.toObject(rounded));\n     }\n \n-    public double[] roundPercentages(double[] percentages) {\n+    double[] roundPercentages(double[] percentages) {\n         if (percentages == null) return null;\n+        double delta = 0.0;\n         for (int i = 0; i < percentages.length; i++) {\n-            double percentage = percentages[i];\n+            double percentage = percentages[i] += delta;\n             double rounded = roundDouble(percentage);\n+            delta = percentage - rounded;\n             percentages[i] = rounded;\n         }\n-\n-        double delta = 100.0 - DoubleStream.of(percentages).sum();\n-        if (delta > 0.0) {\n-            double lastRule = percentages[percentages.length - 1] + roundDouble(delta);\n-            percentages[percentages.length - 1] = lastRule;\n+        if (DoubleStream.of(percentages).sum() != 100.0) {\n+            double firstRule = percentages[0] + delta;\n+            percentages[0] = roundDouble(firstRule, RoundingMode.HALF_EVEN);\n         }\n \n         return percentages;\n     }\n \n-    public double roundDouble(double percentage) {\n-        BigDecimal bd = new BigDecimal(percentage).setScale(scale, RoundingMode.HALF_EVEN);\n+    double roundDouble(double percentage) {\n+        return roundDouble(percentage, RoundingMode.HALF_EVEN);\n+    }\n+\n+    double roundDouble(double percentage, RoundingMode roundingMode) {\n+        BigDecimal bd = new BigDecimal(percentage).setScale(scale, roundingMode);\n         return bd.doubleValue();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mzg5Nw==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392963897", "bodyText": "Please avoid the internal code duplication, make it so that either one of the \"roundPercetanges\" method calls the other by converting the data structure", "author": "aaime", "createdAt": "2020-03-16T11:54:55Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {\n+\n+    private int scale;\n+\n+    public PercentagesRoundHandler(Integer scale) {\n+        this.scale = scale != null ? scale : 1;\n+    }\n+\n+    public PercentagesRoundHandler() {\n+        this.scale = 1;\n+    }\n+\n+    public List<Double> roundPercentages(List<Double> percentages) {\n+        if (percentages == null || percentages.size() == 0) return null;", "originalCommit": "130b86a23bf183c44e92f05788e204269b4cb2b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTIxOA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r395021218", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-19T13:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mzg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\nindex 7dc6a5f3e9..1c700f0566 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n\n@@ -6,56 +6,52 @@ package org.geoserver.sldservice.utils.classifier;\n \n import java.math.BigDecimal;\n import java.math.RoundingMode;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.DoubleStream;\n+import org.apache.commons.lang3.ArrayUtils;\n \n-public class PercentagesRoundHandler {\n+class PercentagesRoundHandler {\n \n     private int scale;\n \n-    public PercentagesRoundHandler(Integer scale) {\n+    PercentagesRoundHandler(Integer scale) {\n         this.scale = scale != null ? scale : 1;\n     }\n \n-    public PercentagesRoundHandler() {\n+    PercentagesRoundHandler() {\n         this.scale = 1;\n     }\n \n-    public List<Double> roundPercentages(List<Double> percentages) {\n-        if (percentages == null || percentages.size() == 0) return null;\n-        int size = percentages.size();\n-        for (int i = 0; i < size; i++) {\n-            double percentage = percentages.get(i);\n-            double rounded = roundDouble(percentage);\n-            percentages.set(i, rounded);\n-        }\n-        double delta = 100.0 - percentages.stream().mapToDouble(d -> d).sum();\n-        if (delta > 0.0) {\n-            Double lastRule = percentages.get(size - 1) + roundDouble(delta);\n-            percentages.set(size - 1, lastRule);\n-        }\n-        return percentages;\n+    List<Double> roundPercentages(List<Double> percentages) {\n+        Double[] array = percentages.toArray(new Double[percentages.size()]);\n+        double[] rounded = roundPercentages(ArrayUtils.toPrimitive(array));\n+        return Arrays.asList(ArrayUtils.toObject(rounded));\n     }\n \n-    public double[] roundPercentages(double[] percentages) {\n+    double[] roundPercentages(double[] percentages) {\n         if (percentages == null) return null;\n+        double delta = 0.0;\n         for (int i = 0; i < percentages.length; i++) {\n-            double percentage = percentages[i];\n+            double percentage = percentages[i] += delta;\n             double rounded = roundDouble(percentage);\n+            delta = percentage - rounded;\n             percentages[i] = rounded;\n         }\n-\n-        double delta = 100.0 - DoubleStream.of(percentages).sum();\n-        if (delta > 0.0) {\n-            double lastRule = percentages[percentages.length - 1] + roundDouble(delta);\n-            percentages[percentages.length - 1] = lastRule;\n+        if (DoubleStream.of(percentages).sum() != 100.0) {\n+            double firstRule = percentages[0] + delta;\n+            percentages[0] = roundDouble(firstRule, RoundingMode.HALF_EVEN);\n         }\n \n         return percentages;\n     }\n \n-    public double roundDouble(double percentage) {\n-        BigDecimal bd = new BigDecimal(percentage).setScale(scale, RoundingMode.HALF_EVEN);\n+    double roundDouble(double percentage) {\n+        return roundDouble(percentage, RoundingMode.HALF_EVEN);\n+    }\n+\n+    double roundDouble(double percentage, RoundingMode roundingMode) {\n+        BigDecimal bd = new BigDecimal(percentage).setScale(scale, roundingMode);\n         return bd.doubleValue();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2NTcyOQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392965729", "bodyText": "This accumulates the delta all on the last class, which could even make it reach a negative number in some unlucky cases (e.g., 10 classes, all happening to have a 0.6 decimal, accumulating a 3.6 error... what if the last class is lower than that?). The delta should be calculated step by step and accumulated onto the next value before rounding it.\nSee also: https://stackoverflow.com/questions/13483430/how-to-make-rounded-percentages-add-up-to-100", "author": "aaime", "createdAt": "2020-03-16T11:58:41Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {\n+\n+    private int scale;\n+\n+    public PercentagesRoundHandler(Integer scale) {\n+        this.scale = scale != null ? scale : 1;\n+    }\n+\n+    public PercentagesRoundHandler() {\n+        this.scale = 1;\n+    }\n+\n+    public List<Double> roundPercentages(List<Double> percentages) {\n+        if (percentages == null || percentages.size() == 0) return null;\n+        int size = percentages.size();\n+        for (int i = 0; i < size; i++) {\n+            double percentage = percentages.get(i);\n+            double rounded = roundDouble(percentage);\n+            percentages.set(i, rounded);\n+        }\n+        double delta = 100.0 - percentages.stream().mapToDouble(d -> d).sum();\n+        if (delta > 0.0) {", "originalCommit": "130b86a23bf183c44e92f05788e204269b4cb2b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTMxOA==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r395021318", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-19T13:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2NTcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\nindex 7dc6a5f3e9..1c700f0566 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java\n\n@@ -6,56 +6,52 @@ package org.geoserver.sldservice.utils.classifier;\n \n import java.math.BigDecimal;\n import java.math.RoundingMode;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.stream.DoubleStream;\n+import org.apache.commons.lang3.ArrayUtils;\n \n-public class PercentagesRoundHandler {\n+class PercentagesRoundHandler {\n \n     private int scale;\n \n-    public PercentagesRoundHandler(Integer scale) {\n+    PercentagesRoundHandler(Integer scale) {\n         this.scale = scale != null ? scale : 1;\n     }\n \n-    public PercentagesRoundHandler() {\n+    PercentagesRoundHandler() {\n         this.scale = 1;\n     }\n \n-    public List<Double> roundPercentages(List<Double> percentages) {\n-        if (percentages == null || percentages.size() == 0) return null;\n-        int size = percentages.size();\n-        for (int i = 0; i < size; i++) {\n-            double percentage = percentages.get(i);\n-            double rounded = roundDouble(percentage);\n-            percentages.set(i, rounded);\n-        }\n-        double delta = 100.0 - percentages.stream().mapToDouble(d -> d).sum();\n-        if (delta > 0.0) {\n-            Double lastRule = percentages.get(size - 1) + roundDouble(delta);\n-            percentages.set(size - 1, lastRule);\n-        }\n-        return percentages;\n+    List<Double> roundPercentages(List<Double> percentages) {\n+        Double[] array = percentages.toArray(new Double[percentages.size()]);\n+        double[] rounded = roundPercentages(ArrayUtils.toPrimitive(array));\n+        return Arrays.asList(ArrayUtils.toObject(rounded));\n     }\n \n-    public double[] roundPercentages(double[] percentages) {\n+    double[] roundPercentages(double[] percentages) {\n         if (percentages == null) return null;\n+        double delta = 0.0;\n         for (int i = 0; i < percentages.length; i++) {\n-            double percentage = percentages[i];\n+            double percentage = percentages[i] += delta;\n             double rounded = roundDouble(percentage);\n+            delta = percentage - rounded;\n             percentages[i] = rounded;\n         }\n-\n-        double delta = 100.0 - DoubleStream.of(percentages).sum();\n-        if (delta > 0.0) {\n-            double lastRule = percentages[percentages.length - 1] + roundDouble(delta);\n-            percentages[percentages.length - 1] = lastRule;\n+        if (DoubleStream.of(percentages).sum() != 100.0) {\n+            double firstRule = percentages[0] + delta;\n+            percentages[0] = roundDouble(firstRule, RoundingMode.HALF_EVEN);\n         }\n \n         return percentages;\n     }\n \n-    public double roundDouble(double percentage) {\n-        BigDecimal bd = new BigDecimal(percentage).setScale(scale, RoundingMode.HALF_EVEN);\n+    double roundDouble(double percentage) {\n+        return roundDouble(percentage, RoundingMode.HALF_EVEN);\n+    }\n+\n+    double roundDouble(double percentage, RoundingMode roundingMode) {\n+        BigDecimal bd = new BigDecimal(percentage).setScale(scale, roundingMode);\n         return bd.doubleValue();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2ODA0NQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392968045", "bodyText": "This seems to assume an equal interval approach, but with the custom classification the client is passing in the break values instead, they can be distributed in whatever way. User provided breaks should be used, please add a test with custom values and a non uniformly distributed set of breaks.", "author": "aaime", "createdAt": "2020-03-16T12:03:27Z", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -418,4 +475,30 @@ private NumberRange getOperationRange(ImageWorker iw) {\n             }\n         }\n     }\n+\n+    private String getPercentagesLabelPortion(double[] percentages, int i) {\n+        if (percentages == null) return \"\";\n+        else return \" (\" + percentages[i] + \"%)\";\n+    }\n+\n+    private double[] getPercentagesForCustom(RenderedImage image, int intervals) {", "originalCommit": "130b86a23bf183c44e92f05788e204269b4cb2b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMTM4NQ==", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r395021385", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-19T13:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2ODA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "chunk": "diff --git a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\nindex 6bb846fbc7..609abf3613 100644\n--- a/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n+++ b/src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java\n\n@@ -481,12 +479,44 @@ public class RasterSymbolizerBuilder {\n         else return \" (\" + percentages[i] + \"%)\";\n     }\n \n-    private double[] getPercentagesForCustom(RenderedImage image, int intervals) {\n-        ImageWorker iw = getImageWorker(image);\n-        final NumberRange range = getOperationRange(iw);\n-        double low = (int) range.getMinimum();\n-        double high = (int) range.getMaximum();\n-        return computePercentagesFromHistogram(iw, intervals, low, high);\n+    private double[] getPercentagesForCustom(RenderedImage image, Number[] breaks) {\n+        PixelAccessor accessor = new PixelAccessor(image);\n+        UnpackedImageData uid =\n+                accessor.getPixels(\n+                        image.getData(),\n+                        image.getData().getBounds(),\n+                        DataBuffer.TYPE_DOUBLE,\n+                        false);\n+        int classNum = breaks.length - 1;\n+        double[] doubleValues = uid.getDoubleData()[0];\n+        double[][] classes = new double[classNum][2];\n+        double classMembers[] = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            classes[i][0] = (double) breaks[i];\n+            classes[i][1] = (double) breaks[i + 1];\n+        }\n+        for (int i = 0; i < doubleValues.length; i++) {\n+            double value = doubleValues[i];\n+            for (int j = 0; j < classes.length; j++) {\n+                double min = classes[j][0];\n+                double max = classes[j][1];\n+                if (j == classes.length - 1) {\n+                    if (value >= min && value <= max) {\n+                        classMembers[j]++;\n+                    }\n+                } else {\n+                    if (value >= min && value < max) {\n+                        classMembers[j]++;\n+                    }\n+                }\n+            }\n+        }\n+        double total = DoubleStream.of(classMembers).sum();\n+        double[] percentages = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            percentages[i] = (classMembers[i] / total) * 100;\n+        }\n+        return percentages;\n     }\n \n     private double[] computePercentagesFromHistogram(\n"}}, {"oid": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "url": "https://github.com/geoserver/geoserver/commit/8f0ba4eea95c35ee41cec179a23265a49b23d19c", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-19T10:48:58Z", "type": "forcePushed"}, {"oid": "a570bf211033d429403f10a487e81f8d9a77d808", "url": "https://github.com/geoserver/geoserver/commit/a570bf211033d429403f10a487e81f8d9a77d808", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-19T10:53:27Z", "type": "forcePushed"}, {"oid": "85999cb005e8b2346e1691725dd92ac1d0e6861e", "url": "https://github.com/geoserver/geoserver/commit/85999cb005e8b2346e1691725dd92ac1d0e6861e", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-19T13:14:50Z", "type": "forcePushed"}, {"oid": "d232ee098edb4494731b95164f350786622cd42b", "url": "https://github.com/geoserver/geoserver/commit/d232ee098edb4494731b95164f350786622cd42b", "message": "reviewer's feedback applied", "committedDate": "2020-03-19T13:22:56Z", "type": "forcePushed"}, {"oid": "372f332f46d9c512f371fa5809f62d8d18e2d0fb", "url": "https://github.com/geoserver/geoserver/commit/372f332f46d9c512f371fa5809f62d8d18e2d0fb", "message": "[GEOS-9534] Add percentages to sldService classify output", "committedDate": "2020-03-25T15:55:39Z", "type": "commit"}, {"oid": "85d212dd6896488a47cbfebe28b78592e97c7692", "url": "https://github.com/geoserver/geoserver/commit/85d212dd6896488a47cbfebe28b78592e97c7692", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T08:49:34Z", "type": "forcePushed"}, {"oid": "1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "url": "https://github.com/geoserver/geoserver/commit/1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T16:08:54Z", "type": "forcePushed"}, {"oid": "bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "url": "https://github.com/geoserver/geoserver/commit/bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T17:13:20Z", "type": "forcePushed"}, {"oid": "444cd1879aa4f79b45f45cd75c5e82839605dc57", "url": "https://github.com/geoserver/geoserver/commit/444cd1879aa4f79b45f45cd75c5e82839605dc57", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T17:21:09Z", "type": "forcePushed"}, {"oid": "e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "url": "https://github.com/geoserver/geoserver/commit/e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T17:46:26Z", "type": "forcePushed"}, {"oid": "9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "url": "https://github.com/geoserver/geoserver/commit/9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T18:44:04Z", "type": "forcePushed"}, {"oid": "c806bfe27cedce80b3e42095a114cfb3d8484c08", "url": "https://github.com/geoserver/geoserver/commit/c806bfe27cedce80b3e42095a114cfb3d8484c08", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T22:24:43Z", "type": "commit"}, {"oid": "c806bfe27cedce80b3e42095a114cfb3d8484c08", "url": "https://github.com/geoserver/geoserver/commit/c806bfe27cedce80b3e42095a114cfb3d8484c08", "message": "reviewer's feedback applied", "committedDate": "2020-03-26T22:24:43Z", "type": "forcePushed"}]}