{"pr_number": 589, "pr_title": "fix PerformanceRPC", "pr_createdAt": "2020-05-21T11:55:23Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/589", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNzYzMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428607633", "bodyText": "[PMD] No need to call String.valueOf to append to a string. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUselessStringValueOf\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_performance.html#uselessstringvalueof\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T11:56:26Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -65,7 +67,7 @@ public void onMessage(Response response, Long _cost) {\n                 System.out.println(\r\n                         \"===================================================================\");\r\n \r\n-                System.out.println(\"Total transactions:  \" + String.valueOf(total));\r\n+                System.out.println(\"Total RPC Requests:  \" + String.valueOf(total));\r", "originalCommit": "c65c321183d59fa28a8aa97449a436f5223fd599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNzY0Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428607642", "bodyText": "[PMD] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T11:56:27Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -65,7 +67,7 @@ public void onMessage(Response response, Long _cost) {\n                 System.out.println(\r\n                         \"===================================================================\");\r\n \r\n-                System.out.println(\"Total transactions:  \" + String.valueOf(total));\r\n+                System.out.println(\"Total RPC Requests:  \" + String.valueOf(total));\r", "originalCommit": "c65c321183d59fa28a8aa97449a436f5223fd599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNzY0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428607647", "bodyText": "[PMD] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T11:56:28Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -152,5 +154,6 @@ public void onMessage(Response response, Long _cost) {\n     private Integer total = 0;\r\n     private AtomicInteger received = new AtomicInteger(0);\r\n     private AtomicInteger error = new AtomicInteger(0);\r\n+    private AtomicBoolean printed = new AtomicBoolean(false);\r", "originalCommit": "c65c321183d59fa28a8aa97449a436f5223fd599", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "chunk": "diff --git a/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java b/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\nindex d103b9dd9..4b4bb1c4f 100644\n--- a/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\n+++ b/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\n\n@@ -154,6 +150,5 @@ public class PerformanceRpcCollector {\n     private Integer total = 0;\n     private AtomicInteger received = new AtomicInteger(0);\n     private AtomicInteger error = new AtomicInteger(0);\n-    private AtomicBoolean printed = new AtomicBoolean(false);\n     private Long startTimestamp = System.currentTimeMillis();\n }\n"}}, {"oid": "141f52b5530ded64dd94a9131a31d23e0c443c65", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/141f52b5530ded64dd94a9131a31d23e0c443c65", "message": "fix PerformanceRPC", "committedDate": "2020-05-21T12:08:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMzMyMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428613322", "bodyText": "[PMD] Private field 'printed' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T12:10:27Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -152,5 +154,6 @@ public void onMessage(Response response, Long _cost) {\n     private Integer total = 0;\r\n     private AtomicInteger received = new AtomicInteger(0);\r\n     private AtomicInteger error = new AtomicInteger(0);\r\n+    private AtomicBoolean printed = new AtomicBoolean(false);\r", "originalCommit": "141f52b5530ded64dd94a9131a31d23e0c443c65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "chunk": "diff --git a/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java b/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\nindex 89f51fd40..4b4bb1c4f 100644\n--- a/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\n+++ b/src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java\n\n@@ -154,6 +150,5 @@ public class PerformanceRpcCollector {\n     private Integer total = 0;\n     private AtomicInteger received = new AtomicInteger(0);\n     private AtomicInteger error = new AtomicInteger(0);\n-    private AtomicBoolean printed = new AtomicBoolean(false);\n     private Long startTimestamp = System.currentTimeMillis();\n }\n"}}, {"oid": "ec427155e42deed33dc3695bc953f78e6c5705bd", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ec427155e42deed33dc3695bc953f78e6c5705bd", "message": "1. fix PerformanceRPC,\n\n2.add queryAccountQPS to support account-query limit", "committedDate": "2020-05-21T12:25:52Z", "type": "forcePushed"}, {"oid": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "message": "1. fix PerformanceRPC,\n2.add queryAccountQPS to support account-query limit", "committedDate": "2020-05-21T12:59:41Z", "type": "commit"}, {"oid": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "message": "1. fix PerformanceRPC,\n2.add queryAccountQPS to support account-query limit", "committedDate": "2020-05-21T12:59:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjM3Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428636373", "bodyText": "[PMD] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T13:01:05Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -65,7 +63,7 @@ public void onMessage(Response response, Long _cost) {\n                 System.out.println(\r\n                         \"===================================================================\");\r\n \r\n-                System.out.println(\"Total transactions:  \" + String.valueOf(total));\r\n+                System.out.println(\"Total RPC Requests:  \" + String.valueOf(total));\r", "originalCommit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjM4Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428636382", "bodyText": "[PMD] No need to call String.valueOf to append to a string. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUselessStringValueOf\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_performance.html#uselessstringvalueof\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T13:01:06Z", "path": "src/test/java/org/fisco/bcos/channel/test/parallel/parallelok/PerformanceDTCollector.java", "diffHunk": "@@ -83,12 +83,10 @@ public void onMessage(TransactionReceipt receipt, Long cost) {\n                 error.addAndGet(1);\n             }\n \n-            int count = received.incrementAndGet();\n-\n-            if (count % (total / 10) == 0) {\n+            if ((received.get() + 1) % (total / 10) == 0) {\n                 System.out.println(\n                         \"                                                       |received:\"\n-                                + String.valueOf(count * 100 / total)\n+                                + String.valueOf((received.get() + 1) * 100 / total)", "originalCommit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjM5Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428636392", "bodyText": "[PMD] No need to call String.valueOf to append to a string. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUselessStringValueOf\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_performance.html#uselessstringvalueof\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T13:01:07Z", "path": "src/test/java/org/fisco/bcos/channel/test/parallel/precompile/PerformanceDTCollector.java", "diffHunk": "@@ -98,12 +98,10 @@ public void onMessage(TransactionReceipt receipt, Long cost) {\n                 error.addAndGet(1);\n             }\n \n-            int count = received.incrementAndGet();\n-\n-            if (count % (total / 10) == 0) {\n+            if ((received.get() + 1) % (total / 10) == 0) {\n                 System.out.println(\n                         \"                                                       |received:\"\n-                                + String.valueOf(count * 100 / total)\n+                                + String.valueOf((received.get() + 1) * 100 / total)", "originalCommit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNjQwNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/589#discussion_r428636407", "bodyText": "[PMD] No need to call String.valueOf to append to a string. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUselessStringValueOf\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_performance.html#uselessstringvalueof\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-05-21T13:01:08Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/PerformanceRpcCollector.java", "diffHunk": "@@ -65,7 +63,7 @@ public void onMessage(Response response, Long _cost) {\n                 System.out.println(\r\n                         \"===================================================================\");\r\n \r\n-                System.out.println(\"Total transactions:  \" + String.valueOf(total));\r\n+                System.out.println(\"Total RPC Requests:  \" + String.valueOf(total));\r", "originalCommit": "1a4c34738705fd9f28ea7c7cca77766a97d5c41f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}