{"pr_number": 706, "pr_title": "update getAddress compatible with 03 04 public key", "pr_createdAt": "2020-09-15T11:40:46Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/706", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODYxOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r488598619", "bodyText": "[PMD Java] Avoid empty if statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nEmptyIfStmt\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_errorprone.html#emptyifstmt\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-15T11:41:26Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +100,20 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "74a7654af618d099e581191ac4db63ea173a20ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\nindex 7d244390..c2efe39d 100644\n--- a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n+++ b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n\n@@ -102,13 +104,20 @@ public class Keys {\n                             + publicKeyNoPrefix;\n         } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n             // do nothing\n-        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG) {\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n             // 130 length,should start with 03 or 04\n             if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n                 throw new IllegalArgumentException(\n                         \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n             }\n             publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {\n+            // 129 length,should start with 3 or 4\n+            if (!(publicKeyNoPrefix.startsWith(\"3\") || publicKeyNoPrefix.startsWith(\"4\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"3\\\" or \\\"4\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(1);\n         } else {\n             // invalid public key\n             throw new IllegalArgumentException(\" invalid publicKey: \" + publicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODYyMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r488598622", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-15T11:41:26Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +100,20 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "74a7654af618d099e581191ac4db63ea173a20ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\nindex 7d244390..c2efe39d 100644\n--- a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n+++ b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n\n@@ -102,13 +104,20 @@ public class Keys {\n                             + publicKeyNoPrefix;\n         } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n             // do nothing\n-        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG) {\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n             // 130 length,should start with 03 or 04\n             if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n                 throw new IllegalArgumentException(\n                         \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n             }\n             publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {\n+            // 129 length,should start with 3 or 4\n+            if (!(publicKeyNoPrefix.startsWith(\"3\") || publicKeyNoPrefix.startsWith(\"4\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"3\\\" or \\\"4\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(1);\n         } else {\n             // invalid public key\n             throw new IllegalArgumentException(\" invalid publicKey: \" + publicKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5ODYyNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r488598626", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-15T11:41:26Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +100,20 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG) {", "originalCommit": "74a7654af618d099e581191ac4db63ea173a20ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\nindex 7d244390..c2efe39d 100644\n--- a/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n+++ b/src/main/java/org/fisco/bcos/web3j/crypto/Keys.java\n\n@@ -102,13 +104,20 @@ public class Keys {\n                             + publicKeyNoPrefix;\n         } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n             // do nothing\n-        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG) {\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n             // 130 length,should start with 03 or 04\n             if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n                 throw new IllegalArgumentException(\n                         \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n             }\n             publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {\n+            // 129 length,should start with 3 or 4\n+            if (!(publicKeyNoPrefix.startsWith(\"3\") || publicKeyNoPrefix.startsWith(\"4\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"3\\\" or \\\"4\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(1);\n         } else {\n             // invalid public key\n             throw new IllegalArgumentException(\" invalid publicKey: \" + publicKey);\n"}}, {"oid": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "message": "update getAddress compatible with 03 04 public key", "committedDate": "2020-09-16T07:27:10Z", "type": "commit"}, {"oid": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "message": "update getAddress compatible with 03 04 public key", "committedDate": "2020-09-16T07:27:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTczMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r489221732", "bodyText": "[PMD Java] Avoid empty if statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nEmptyIfStmt\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_errorprone.html#emptyifstmt\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-16T07:28:15Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTczNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r489221736", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-16T07:28:15Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTczNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r489221737", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-16T07:28:15Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {", "originalCommit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTczOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r489221739", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-16T07:28:16Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n+            // 130 length,should start with 03 or 04\n+            if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {", "originalCommit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTc0MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r489221740", "bodyText": "[PMD Java] This call to String.startsWith can be rewritten using String.charAt(0) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSimplifyStartsWith\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_performance.html#simplifystartswith\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-16T07:28:16Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n+            // 130 length,should start with 03 or 04\n+            if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {\n+            // 129 length,should start with 3 or 4\n+            if (!(publicKeyNoPrefix.startsWith(\"3\") || publicKeyNoPrefix.startsWith(\"4\"))) {", "originalCommit": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "cc62d68d2200d9fe822ffb5d6d1e6ec2c49c6b89", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cc62d68d2200d9fe822ffb5d6d1e6ec2c49c6b89", "message": "fix ABIDefinition.isConstant bug when using solc 0.6.10", "committedDate": "2020-09-17T02:18:27Z", "type": "commit"}, {"oid": "0ade11f535511a3b5bbde2424d809026302373ca", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/0ade11f535511a3b5bbde2424d809026302373ca", "message": "add failedTxSum field", "committedDate": "2020-09-17T06:34:33Z", "type": "commit"}, {"oid": "0ade11f535511a3b5bbde2424d809026302373ca", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/0ade11f535511a3b5bbde2424d809026302373ca", "message": "add failedTxSum field", "committedDate": "2020-09-17T06:34:33Z", "type": "forcePushed"}, {"oid": "76eccee76628f89fec8c5872adebb070def50a0e", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/76eccee76628f89fec8c5872adebb070def50a0e", "message": "add interface ret receipt for precompiled service", "committedDate": "2020-09-18T03:10:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAwNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675005", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:14Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/cns/CnsService.java", "diffHunk": "@@ -99,14 +99,16 @@ public String getAddressByContractNameAndVersion(String contractNameAndVersion)\n \n     public String registerCns(String name, String version, String address, String abi)\n             throws Exception {\n-        CNS cns = lookupResolver();\n-        if (version.length() > MAX_VERSION_LENGTH) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.VersionExceeds);\n-        }\n-        TransactionReceipt receipt = cns.insert(name, version, address, abi).send();\n+        TransactionReceipt receipt = registerCnsAndRetReceipt(name, version, address, abi);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt registerCnsAndRetReceipt(\n+            String name, String version, String address, String abi) throws Exception {\n+        CNS cns = lookupResolver();\n+        return cns.insert(name, version, address, abi).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAwNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675007", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:14Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/cns/CnsService.java", "diffHunk": "@@ -99,14 +99,16 @@ public String getAddressByContractNameAndVersion(String contractNameAndVersion)\n \n     public String registerCns(String name, String version, String address, String abi)\n             throws Exception {\n-        CNS cns = lookupResolver();\n-        if (version.length() > MAX_VERSION_LENGTH) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.VersionExceeds);\n-        }\n-        TransactionReceipt receipt = cns.insert(name, version, address, abi).send();\n+        TransactionReceipt receipt = registerCnsAndRetReceipt(name, version, address, abi);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt registerCnsAndRetReceipt(\n+            String name, String version, String address, String abi) throws Exception {\n+        CNS cns = lookupResolver();\n+        return cns.insert(name, version, address, abi).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAwOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675008", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:14Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/config/SystemConfigService.java", "diffHunk": "@@ -25,7 +25,12 @@ public SystemConfigService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String setValueByKey(String key, String value) throws Exception {\n-        TransactionReceipt receipt = systemConfig.setValueByKey(key, value).send();\n+        TransactionReceipt receipt = setValueByKeyAndRetReceipt(key, value);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n+\n+    public TransactionReceipt setValueByKeyAndRetReceipt(String key, String value)\n+            throws Exception {\n+        return systemConfig.setValueByKey(key, value).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAxMA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675010", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:14Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAxNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675014", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:15Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.unfreeze(addr).send();\n+    public String unfreeze(String addr) throws Exception {\n+        TransactionReceipt receipt = unfreezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String grantManager(String addr, String user) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr) || !WalletUtils.isValidAddress(user)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt unfreezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.unfreeze(addr).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAxNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675017", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:15Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.unfreeze(addr).send();\n+    public String unfreeze(String addr) throws Exception {\n+        TransactionReceipt receipt = unfreezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String grantManager(String addr, String user) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr) || !WalletUtils.isValidAddress(user)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt unfreezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.unfreeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.grantManager(addr, user).send();\n+    public String grantManager(String addr, String user) throws Exception {\n+        TransactionReceipt receipt = grantManagerAndRetReceipt(addr, user);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String getStatus(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt grantManagerAndRetReceipt(String addr, String user) throws Exception {\n+        return contractLifeCycle.grantManager(addr, user).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAxOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675018", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:15Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -69,11 +69,14 @@ public BigInteger queryThreshold() throws Exception {\n     }\n \n     public String grantCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.grantCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = grantCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt grantCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.grantCommitteeMember(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAxOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675019", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAyMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675021", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+    }\n+\n     public String revokeCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.revokeCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = revokeCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeCommitteeMember(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAyMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675022", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+    }\n+\n     public String revokeCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.revokeCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = revokeCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeCommitteeMember(account).send();\n+    }\n+\n     public String grantOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        TransactionReceipt transactionReceipt = grantOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt grantOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.grantOperator(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAyNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675024", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+    }\n+\n     public String revokeCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.revokeCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = revokeCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeCommitteeMember(account).send();\n+    }\n+\n     public String grantOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        TransactionReceipt transactionReceipt = grantOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt grantOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.grantOperator(account).send();\n+    }\n+\n     public String revokeOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        TransactionReceipt transactionReceipt = revokeOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeOperator(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAyNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675027", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+    }\n+\n     public String revokeCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.revokeCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = revokeCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeCommitteeMember(account).send();\n+    }\n+\n     public String grantOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        TransactionReceipt transactionReceipt = grantOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt grantOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.grantOperator(account).send();\n+    }\n+\n     public String revokeOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        TransactionReceipt transactionReceipt = revokeOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeOperator(account).send();\n+    }\n+\n     public String freezeAccount(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        TransactionReceipt transactionReceipt = freezeAccountAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt freezeAccountAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.freezeAccount(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzMA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675030", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:16Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -85,37 +88,59 @@ public String grantCommitteeMember(String account) throws Exception {\n     }\n \n     public String updateThreshold(int threshold) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        TransactionReceipt transactionReceipt = updateThresholdAndRetReceipt(threshold);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateThresholdAndRetReceipt(int threshold) throws Exception {\n+        return chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+    }\n+\n     public String revokeCommitteeMember(String account) throws Exception {\n-        TransactionReceipt transactionReceipt =\n-                chainGovernance.revokeCommitteeMember(account).send();\n+        TransactionReceipt transactionReceipt = revokeCommitteeMemberAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeCommitteeMemberAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeCommitteeMember(account).send();\n+    }\n+\n     public String grantOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        TransactionReceipt transactionReceipt = grantOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt grantOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.grantOperator(account).send();\n+    }\n+\n     public String revokeOperator(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        TransactionReceipt transactionReceipt = revokeOperatorAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt revokeOperatorAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.revokeOperator(account).send();\n+    }\n+\n     public String freezeAccount(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        TransactionReceipt transactionReceipt = freezeAccountAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt freezeAccountAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.freezeAccount(account).send();\n+    }\n+\n     public String unfreezeAccount(String account) throws Exception {\n-        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();\n+        TransactionReceipt transactionReceipt = unfreezeAccountAndRetReceipt(account);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt unfreezeAccountAndRetReceipt(String account) throws Exception {\n+        return chainGovernance.unfreezeAccount(account).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675031", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:17Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -31,28 +30,36 @@ public PermissionService(Web3j web3j, Credentials credentials) {\n     }\n \n     public List<PermissionInfo> queryPermission(String address) throws Exception {\n-        String permissionyInfo = permission.queryPermission(address).send();\n+        String permissionInfo = permission.queryPermission(address).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675033", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:17Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -31,28 +30,36 @@ public PermissionService(Web3j web3j, Credentials credentials) {\n     }\n \n     public List<PermissionInfo> queryPermission(String address) throws Exception {\n-        String permissionyInfo = permission.queryPermission(address).send();\n+        String permissionInfo = permission.queryPermission(address).send();\n         ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n         return objectMapper.readValue(\n-                permissionyInfo,\n+                permissionInfo,\n                 objectMapper\n                         .getTypeFactory()\n                         .constructCollectionType(List.class, PermissionInfo.class));\n     }\n \n     public String grantWrite(String address, String user) throws Exception {\n-        TransactionReceipt receipt = permission.grantWrite(address, user).send();\n-        return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n+        TransactionReceipt transactionReceipt = grantWriteAndRetReceipt(address, user);\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public TransactionReceipt grantWriteAndRetReceipt(String address, String user)\n+            throws Exception {\n+        return permission.grantWrite(address, user).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675034", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:17Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -31,28 +30,36 @@ public PermissionService(Web3j web3j, Credentials credentials) {\n     }\n \n     public List<PermissionInfo> queryPermission(String address) throws Exception {\n-        String permissionyInfo = permission.queryPermission(address).send();\n+        String permissionInfo = permission.queryPermission(address).send();\n         ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n         return objectMapper.readValue(\n-                permissionyInfo,\n+                permissionInfo,\n                 objectMapper\n                         .getTypeFactory()\n                         .constructCollectionType(List.class, PermissionInfo.class));\n     }\n \n     public String grantWrite(String address, String user) throws Exception {\n-        TransactionReceipt receipt = permission.grantWrite(address, user).send();\n-        return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n+        TransactionReceipt transactionReceipt = grantWriteAndRetReceipt(address, user);\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public TransactionReceipt grantWriteAndRetReceipt(String address, String user)\n+            throws Exception {\n+        return permission.grantWrite(address, user).send();\n     }\n \n     public String revokeWrite(String address, String user) throws Exception {\n-        TransactionReceipt receipt = permission.revokeWrite(address, user).send();\n+        TransactionReceipt receipt = revokeWriteAndRetReceipt(address, user);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt revokeWriteAndRetReceipt(String address, String user)\n+            throws Exception {\n+        return permission.revokeWrite(address, user).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675035", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:17Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -120,25 +127,40 @@ public String revokeSysConfigManager(String grantress) throws Exception {\n         return revoke(PrecompiledCommon.SYS_CONFIG, grantress);\n     }\n \n+    public TransactionReceipt revokeSysConfigManagerAndRetReceipt(String grantress)\n+            throws Exception {\n+        return revokeAndRetReceipt(PrecompiledCommon.SYS_CONFIG, grantress);\n+    }\n+\n     public List<PermissionInfo> listSysConfigManager() throws Exception {\n         return list(PrecompiledCommon.SYS_CONFIG);\n     }\n \n-    private String grant(String tableName, String grantress) throws Exception {\n-        TransactionReceipt receipt = permission.insert(tableName, grantress).send();\n+    public String grant(String tableName, String grandness) throws Exception {\n+        TransactionReceipt receipt = grantAndRetReceipt(tableName, grandness);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private String revoke(String tableName, String address) throws Exception {\n-        TransactionReceipt receipt = permission.remove(tableName, address).send();\n+    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+            throws Exception {\n+        return permission.insert(tableName, grantress).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71ce26adfe59368d5645d10a0519584dc62e35ea", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\nindex 8381d1472..4de79cd3f 100644\n--- a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n+++ b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n\n@@ -141,7 +141,7 @@ public class PermissionService {\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+    public TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n             throws Exception {\n         return permission.insert(tableName, grantress).send();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675036", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:17Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -120,25 +127,40 @@ public String revokeSysConfigManager(String grantress) throws Exception {\n         return revoke(PrecompiledCommon.SYS_CONFIG, grantress);\n     }\n \n+    public TransactionReceipt revokeSysConfigManagerAndRetReceipt(String grantress)\n+            throws Exception {\n+        return revokeAndRetReceipt(PrecompiledCommon.SYS_CONFIG, grantress);\n+    }\n+\n     public List<PermissionInfo> listSysConfigManager() throws Exception {\n         return list(PrecompiledCommon.SYS_CONFIG);\n     }\n \n-    private String grant(String tableName, String grantress) throws Exception {\n-        TransactionReceipt receipt = permission.insert(tableName, grantress).send();\n+    public String grant(String tableName, String grandness) throws Exception {\n+        TransactionReceipt receipt = grantAndRetReceipt(tableName, grandness);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private String revoke(String tableName, String address) throws Exception {\n-        TransactionReceipt receipt = permission.remove(tableName, address).send();\n+    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+            throws Exception {\n+        return permission.insert(tableName, grantress).send();\n+    }\n+\n+    public String revoke(String tableName, String address) throws Exception {\n+        TransactionReceipt receipt = revokeAndRetReceipt(tableName, address);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    private TransactionReceipt revokeAndRetReceipt(String tableName, String address)\n+            throws Exception {\n+        return permission.remove(tableName, address).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71ce26adfe59368d5645d10a0519584dc62e35ea", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\nindex 8381d1472..4de79cd3f 100644\n--- a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n+++ b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n\n@@ -141,7 +141,7 @@ public class PermissionService {\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+    public TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n             throws Exception {\n         return permission.insert(tableName, grantress).send();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675037", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java", "diffHunk": "@@ -120,25 +127,40 @@ public String revokeSysConfigManager(String grantress) throws Exception {\n         return revoke(PrecompiledCommon.SYS_CONFIG, grantress);\n     }\n \n+    public TransactionReceipt revokeSysConfigManagerAndRetReceipt(String grantress)\n+            throws Exception {\n+        return revokeAndRetReceipt(PrecompiledCommon.SYS_CONFIG, grantress);\n+    }\n+\n     public List<PermissionInfo> listSysConfigManager() throws Exception {\n         return list(PrecompiledCommon.SYS_CONFIG);\n     }\n \n-    private String grant(String tableName, String grantress) throws Exception {\n-        TransactionReceipt receipt = permission.insert(tableName, grantress).send();\n+    public String grant(String tableName, String grandness) throws Exception {\n+        TransactionReceipt receipt = grantAndRetReceipt(tableName, grandness);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private String revoke(String tableName, String address) throws Exception {\n-        TransactionReceipt receipt = permission.remove(tableName, address).send();\n+    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+            throws Exception {\n+        return permission.insert(tableName, grantress).send();\n+    }\n+\n+    public String revoke(String tableName, String address) throws Exception {\n+        TransactionReceipt receipt = revokeAndRetReceipt(tableName, address);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    private TransactionReceipt revokeAndRetReceipt(String tableName, String address)\n+            throws Exception {\n+        return permission.remove(tableName, address).send();\n+    }\n+\n     private List<PermissionInfo> list(String tableName) throws Exception {\n-        String permissionyInfo = permission.queryByName(tableName).send();\n+        String permissionInfo = permission.queryByName(tableName).send();", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71ce26adfe59368d5645d10a0519584dc62e35ea", "chunk": "diff --git a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\nindex 8381d1472..4de79cd3f 100644\n--- a/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n+++ b/src/main/java/org/fisco/bcos/web3j/precompile/permission/PermissionService.java\n\n@@ -141,7 +141,7 @@ public class PermissionService {\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    private TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n+    public TransactionReceipt grantAndRetReceipt(String tableName, String grantress)\n             throws Exception {\n         return permission.insert(tableName, grantress).send();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTAzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675039", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/cns/CnsService.java", "diffHunk": "@@ -99,14 +99,16 @@ public String getAddressByContractNameAndVersion(String contractNameAndVersion)\n \n     public String registerCns(String name, String version, String address, String abi)\n             throws Exception {\n-        CNS cns = lookupResolver();\n-        if (version.length() > MAX_VERSION_LENGTH) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.VersionExceeds);\n-        }\n-        TransactionReceipt receipt = cns.insert(name, version, address, abi).send();\n+        TransactionReceipt receipt = registerCnsAndRetReceipt(name, version, address, abi);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt registerCnsAndRetReceipt(\n+            String name, String version, String address, String abi) throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTA0MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675041", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/config/SystemConfigService.java", "diffHunk": "@@ -25,7 +25,12 @@ public SystemConfigService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String setValueByKey(String key, String value) throws Exception {\n-        TransactionReceipt receipt = systemConfig.setValueByKey(key, value).send();\n+        TransactionReceipt receipt = setValueByKeyAndRetReceipt(key, value);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n+\n+    public TransactionReceipt setValueByKeyAndRetReceipt(String key, String value)\n+            throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTA0Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675042", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTA0NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675044", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.unfreeze(addr).send();\n+    public String unfreeze(String addr) throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTA0Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675046", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:18Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.unfreeze(addr).send();\n+    public String unfreeze(String addr) throws Exception {\n+        TransactionReceipt receipt = unfreezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String grantManager(String addr, String user) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr) || !WalletUtils.isValidAddress(user)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt unfreezeAndRetReceipt(String addr) throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY3NTA0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r490675047", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-18T03:11:19Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/csm/ContractStatusService.java", "diffHunk": "@@ -32,37 +31,33 @@ public ContractStatusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String freeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n-\n-        TransactionReceipt receipt = contractLifeCycle.freeze(addr).send();\n+        TransactionReceipt receipt = freezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String unfreeze(String addr) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt freezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.freeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.unfreeze(addr).send();\n+    public String unfreeze(String addr) throws Exception {\n+        TransactionReceipt receipt = unfreezeAndRetReceipt(addr);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n-    public String grantManager(String addr, String user) throws Exception {\n-        if (!WalletUtils.isValidAddress(addr) || !WalletUtils.isValidAddress(user)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.InvalidAddress);\n-        }\n+    public TransactionReceipt unfreezeAndRetReceipt(String addr) throws Exception {\n+        return contractLifeCycle.unfreeze(addr).send();\n+    }\n \n-        TransactionReceipt receipt = contractLifeCycle.grantManager(addr, user).send();\n+    public String grantManager(String addr, String user) throws Exception {", "originalCommit": "76eccee76628f89fec8c5872adebb070def50a0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "bfe636dac88ae08e1937c939f1f2af138ccf7402", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/bfe636dac88ae08e1937c939f1f2af138ccf7402", "message": "fix getConsensusStatus response decode exception bug", "committedDate": "2020-09-18T07:26:02Z", "type": "commit"}, {"oid": "9db7613d180becc7cf3c447da5024b3cb4a4cf38", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9db7613d180becc7cf3c447da5024b3cb4a4cf38", "message": "add interface ret receipt for consensus precompiled service", "committedDate": "2020-09-18T08:59:16Z", "type": "commit"}, {"oid": "bbc28a261ee89878b06132161ad57a5e1522f4eb", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/bbc28a261ee89878b06132161ad57a5e1522f4eb", "message": "add seq info for timeout message", "committedDate": "2020-09-21T23:35:14Z", "type": "commit"}, {"oid": "61f0c41a1e0aa028854e61afcac09fa92b504089", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/61f0c41a1e0aa028854e61afcac09fa92b504089", "message": "remove throw TransactionException when it's not necessary", "committedDate": "2020-09-22T04:48:52Z", "type": "commit"}, {"oid": "9295950b23038499bc1b10fddcbbc78293a52cfc", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9295950b23038499bc1b10fddcbbc78293a52cfc", "message": "add TransactionReceipt to TransactionException", "committedDate": "2020-09-22T04:48:52Z", "type": "forcePushed"}, {"oid": "71ce26adfe59368d5645d10a0519584dc62e35ea", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/71ce26adfe59368d5645d10a0519584dc62e35ea", "message": "add TransactionReceipt to TransactionException", "committedDate": "2020-09-22T05:07:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3ODgyMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r492478821", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-22T05:18:35Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -54,12 +54,17 @@ public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n \n     public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n         TransactionReceipt transactionReceipt =\n-                chainGovernance\n-                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n-                        .send();\n+                updateCommitteeMemberWeightAndRetReceipt(account, weight);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateCommitteeMemberWeightAndRetReceipt(String account, int weight)\n+            throws Exception {\n+        return chainGovernance", "originalCommit": "7188330d0acc4b02506a961f8ab644e5f4f3ae26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3ODgyMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r492478822", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-22T05:18:35Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -54,12 +54,17 @@ public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n \n     public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n         TransactionReceipt transactionReceipt =\n-                chainGovernance\n-                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n-                        .send();\n+                updateCommitteeMemberWeightAndRetReceipt(account, weight);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateCommitteeMemberWeightAndRetReceipt(String account, int weight)\n+            throws Exception {", "originalCommit": "7188330d0acc4b02506a961f8ab644e5f4f3ae26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3ODgyMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r492478823", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.26.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-22T05:18:35Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,31 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n+import com.sun.org.apache.regexp.internal.RE;\n import org.fisco.bcos.TestBase;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceiptWithProof;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n+\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t  System.out.println(i);", "originalCommit": "7188330d0acc4b02506a961f8ab644e5f4f3ae26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ead745d455675af825b4630009874306b2f6f92c", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex ebde909ec..59c4778a1 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -3,13 +3,10 @@ package org.fisco.bcos.precompile;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import com.sun.org.apache.regexp.internal.RE;\n import org.fisco.bcos.TestBase;\n import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n-import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceiptWithProof;\n import org.junit.Assert;\n import org.junit.Test;\n \n"}}, {"oid": "ead745d455675af825b4630009874306b2f6f92c", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ead745d455675af825b4630009874306b2f6f92c", "message": "add TransactionReceipt to TransactionException", "committedDate": "2020-09-28T01:42:26Z", "type": "commit"}, {"oid": "ead745d455675af825b4630009874306b2f6f92c", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ead745d455675af825b4630009874306b2f6f92c", "message": "add TransactionReceipt to TransactionException", "committedDate": "2020-09-28T01:42:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc0NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650745", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:31Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -54,12 +54,17 @@ public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n \n     public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n         TransactionReceipt transactionReceipt =\n-                chainGovernance\n-                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n-                        .send();\n+                updateCommitteeMemberWeightAndRetReceipt(account, weight);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateCommitteeMemberWeightAndRetReceipt(String account, int weight)\n+            throws Exception {\n+        return chainGovernance", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650747", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:31Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -54,12 +54,17 @@ public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n \n     public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n         TransactionReceipt transactionReceipt =\n-                chainGovernance\n-                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n-                        .send();\n+                updateCommitteeMemberWeightAndRetReceipt(account, weight);\n         return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n     }\n \n+    public TransactionReceipt updateCommitteeMemberWeightAndRetReceipt(String account, int weight)\n+            throws Exception {", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc0OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650748", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:31Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,28 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n+\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t  System.out.println(\" ===> \" + i);\n+\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 59c4778a1..4973605b0 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -18,11 +18,15 @@ public class PermissionServiceTest extends TestBase {\n   @Test\n   public void userTableManager() throws Exception {\n \n-\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n-\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n-\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t  System.out.println(\" ===> \" + i);\n-\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {\n+  \t\te.printStackTrace();\n+\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc1MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650750", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:31Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,28 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t  Assert.assertTrue(transactionReceipt.isStatusOK());", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 59c4778a1..4973605b0 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -18,11 +18,15 @@ public class PermissionServiceTest extends TestBase {\n   @Test\n   public void userTableManager() throws Exception {\n \n-\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n-\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n-\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t  System.out.println(\" ===> \" + i);\n-\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {\n+  \t\te.printStackTrace();\n+\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc1Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650753", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:32Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,28 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n+\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t  System.out.println(\" ===> \" + i);", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 59c4778a1..4973605b0 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -18,11 +18,15 @@ public class PermissionServiceTest extends TestBase {\n   @Test\n   public void userTableManager() throws Exception {\n \n-\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n-\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n-\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t  System.out.println(\" ===> \" + i);\n-\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {\n+  \t\te.printStackTrace();\n+\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MDc1NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495650754", "bodyText": "[PMD Java] Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUseAssertSameInsteadOfAssertTrue\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T01:43:32Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,28 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n+\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t  System.out.println(\" ===> \" + i);\n+\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "ead745d455675af825b4630009874306b2f6f92c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 59c4778a1..4973605b0 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -18,11 +18,15 @@ public class PermissionServiceTest extends TestBase {\n   @Test\n   public void userTableManager() throws Exception {\n \n-\t  TransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n-\t  Assert.assertTrue(transactionReceipt.isStatusOK());\n-\t  int i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t  System.out.println(\" ===> \" + i);\n-\t  assertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {\n+  \t\te.printStackTrace();\n+\t}\n   }\n   \n   @Test\n"}}, {"oid": "4a192dac265431a08687ac91c7c3e88642d52ac6", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/4a192dac265431a08687ac91c7c3e88642d52ac6", "message": "gradle update", "committedDate": "2020-09-28T02:04:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIyMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655223", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:56Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIyNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655225", "bodyText": "[PMD Java] Avoid printStackTrace(); use a logger call instead. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidPrintStackTrace\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#avoidprintstacktrace\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:56Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t} catch (Exception e) {\n+  \t\te.printStackTrace();", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIyNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655226", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:56Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIyNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655227", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:57Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIyOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655228", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:57Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NTIzMA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495655230", "bodyText": "[PMD Java] Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUseAssertSameInsteadOfAssertTrue\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:04:57Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,32 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\n+  \ttry {\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "4a192dac265431a08687ac91c7c3e88642d52ac6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 4973605b0..81957d81a 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,16 +17,11 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\n-  \ttry {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n \t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n-\t} catch (Exception e) {\n-  \t\te.printStackTrace();\n-\t}\n   }\n   \n   @Test\n"}}, {"oid": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "message": "gradle update", "committedDate": "2020-09-28T02:45:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzIzMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495663233", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:46:17Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,27 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 81957d81a..0cee83090 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,10 +17,9 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n   }\n   \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzIzNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495663234", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:46:17Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,27 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());", "originalCommit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 81957d81a..0cee83090 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,10 +17,9 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n   }\n   \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzIzNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495663235", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:46:17Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,27 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);", "originalCommit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 81957d81a..0cee83090 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,10 +17,9 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n   }\n   \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY2MzIzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495663236", "bodyText": "[PMD Java] Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUseAssertSameInsteadOfAssertTrue\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T02:46:17Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,27 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tSystem.out.println(\" ===> \" + i);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "3d8a6eb41366ef07dcbdfa9cc85b18a8380061b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 81957d81a..0cee83090 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -17,10 +17,9 @@ public class PermissionServiceTest extends TestBase {\n \n   @Test\n   public void userTableManager() throws Exception {\n-\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt_1111\", Common.TX_ORIGIN);\n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tSystem.out.println(\" ===> \" + i);\n \t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n   }\n   \n"}}, {"oid": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "message": "gradle update", "committedDate": "2020-09-28T06:34:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNjQ0OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495716448", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T06:35:16Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 0cee83090..c5a0b39da 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -20,7 +20,7 @@ public class PermissionServiceTest extends TestBase {\n \t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t\tassertEquals(i , 1);\n   }\n   \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNjQ1MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495716451", "bodyText": "[PMD Java] Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUseAssertSameInsteadOfAssertTrue\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T06:35:16Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);", "originalCommit": "aa6f76098dc9e88e7affbd86f2b8e5400c36e849", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "chunk": "diff --git a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\nindex 0cee83090..c5a0b39da 100644\n--- a/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n+++ b/src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java\n\n@@ -20,7 +20,7 @@ public class PermissionServiceTest extends TestBase {\n \t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n \t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n \t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n-\t\tassertTrue(i == PrecompiledCommon.InvalidTableNotExist);\n+\t\tassertEquals(i , 1);\n   }\n   \n   @Test\n"}}, {"oid": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/65784c29855efea0975a2096bbc5bf4427ba4e2f", "message": "gradle update", "committedDate": "2020-09-28T06:55:23Z", "type": "commit"}, {"oid": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/65784c29855efea0975a2096bbc5bf4427ba4e2f", "message": "gradle update", "committedDate": "2020-09-28T06:55:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNDgxOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495724818", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T06:56:22Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tassertEquals(i , 1);", "originalCommit": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNDgxOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/706#discussion_r495724819", "bodyText": "[PMD Java] Avoid unused imports such as 'org.junit.Assert.assertTrue' (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUnusedImports\nBest Practices\n4\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#unusedimports\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-28T06:56:22Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;", "originalCommit": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}