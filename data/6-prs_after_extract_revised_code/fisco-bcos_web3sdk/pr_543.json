{"pr_number": 543, "pr_title": "add ECCEncrpyt/ECCDecrypt", "pr_createdAt": "2020-03-23T10:43:50Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/543", "timeline": [{"oid": "26c8ca385242c90f44656ebfab302c77589a3c62", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/26c8ca385242c90f44656ebfab302c77589a3c62", "message": "add encrypt/decrypt/verify method for ECKeyPair.", "committedDate": "2020-03-11T15:30:27Z", "type": "commit"}, {"oid": "00878aada8e110936985b104573419caa80b15c0", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/00878aada8e110936985b104573419caa80b15c0", "message": "update ECDSA encrpyt/decrypt", "committedDate": "2020-03-12T01:33:49Z", "type": "commit"}, {"oid": "163626424146f7b30ad720f196f0240a42f629d4", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/163626424146f7b30ad720f196f0240a42f629d4", "message": "add ECCEcrypt/ECCDecrpyt", "committedDate": "2020-03-12T07:56:03Z", "type": "commit"}, {"oid": "65e5b4fa9035c9ca0aa023881676290baa539a95", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/65e5b4fa9035c9ca0aa023881676290baa539a95", "message": "fix ECCEncrpyt bug.", "committedDate": "2020-03-22T14:29:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1ODM4OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/543#discussion_r396358389", "bodyText": "[Misspell] \"encrpyt\" is a misspelling of \"encrypt\" (view)\n\n\n\n\nRule\n\n\n\n\n\"encrpyt\" is a misspelling of \"encrypt\"\n\n\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "author": "sider", "createdAt": "2020-03-23T10:44:44Z", "path": "src/test/java/org/fisco/bcos/web3j/crypto/ECKeyPairTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.fisco.bcos.web3j.crypto;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.fisco.bcos.channel.client.P12Manager;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.tool.ECCDecrypt;\n+import org.fisco.bcos.web3j.crypto.tool.ECCEncrypt;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class ECKeyPairTest {\n+\n+    @Test\n+    public void encryptECKeyPairTest() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"ecc encrypt test\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        String decrpptMessage = new String(decryptData, \"utf-8\");\n+        assertEquals(message, decrpptMessage);\n+    }\n+\n+    @Test\n+    public void encryptECKeyPairTestEmptyString() throws Exception {\n+        Credentials credentials = GenCredential.create();\n+        ECKeyPair ecKeyPair = credentials.getEcKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        assertEquals(message, new String(decryptData, \"utf-8\"));\n+    }\n+\n+    @Test\n+    public void encryptECKeyPairTestWithPem() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\n+                        \"classpath:applicationContext-keystore-sample.xml\");\n+        // test p12\n+        P12Manager p12 = context.getBean(P12Manager.class);\n+\n+        ECKeyPair ecKeyPair = p12.getECKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        assertEquals(message, new String(decryptData, \"utf-8\"));\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTest() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+        String message = \"verify test\";\n+        ECDSASignature signature = ecKeyPair.sign(message.getBytes());\n+        boolean verify = ecKeyPair.verify(message.getBytes(), signature);\n+\n+        assertEquals(verify, true);\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTestEmptyString() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+        String message = \"\";\n+        ECDSASignature signature = ecKeyPair.sign(message.getBytes());\n+        boolean verify = ecKeyPair.verify(message.getBytes(), signature);\n+\n+        assertEquals(verify, true);\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTestWithPem() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\n+                        \"classpath:applicationContext-keystore-sample.xml\");\n+        // test p12\n+        P12Manager p12 = context.getBean(P12Manager.class);\n+\n+        ECKeyPair ecKeyPair = p12.getECKeyPair();\n+\n+        String message = \"ecc encrpyt test\";", "originalCommit": "65e5b4fa9035c9ca0aa023881676290baa539a95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}