{"pr_number": 713, "pr_title": "Release 2.6.2", "pr_createdAt": "2020-09-30T09:08:13Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/713", "timeline": [{"oid": "cd66d378e38869be89eae7f9d4c16afe4741c0ad", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cd66d378e38869be89eae7f9d4c16afe4741c0ad", "message": "set jdk.disabled.namedCurves to resolved the issue of jdK14 unavailable", "committedDate": "2020-08-17T03:00:19Z", "type": "commit"}, {"oid": "cdd7a25e3b6b58ffe65244d911dce1b38acc044d", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cdd7a25e3b6b58ffe65244d911dce1b38acc044d", "message": "add jdk14 travis ci", "committedDate": "2020-08-17T03:32:49Z", "type": "commit"}, {"oid": "515e9f266f137db101781583077dc4b83ff8a589", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/515e9f266f137db101781583077dc4b83ff8a589", "message": "update build.gradle to suitable jdK14", "committedDate": "2020-08-17T04:29:52Z", "type": "commit"}, {"oid": "afeaea3384c08a003d5ca64901ca2bc464291f45", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/afeaea3384c08a003d5ca64901ca2bc464291f45", "message": "update publish web3sdk version", "committedDate": "2020-08-17T07:33:17Z", "type": "commit"}, {"oid": "1a3e495e3ec60a9ba5d3ee887fcb272078470873", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/1a3e495e3ec60a9ba5d3ee887fcb272078470873", "message": "Merge pull request #699 from ywy2090/dev\n\nset jdk.disabled.namedCurves to resolved the issue of jdK14 unavailable", "committedDate": "2020-08-17T07:59:04Z", "type": "commit"}, {"oid": "03ae2125a68b54edadab142ccd16ea86a32a1668", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/03ae2125a68b54edadab142ccd16ea86a32a1668", "message": "Table.sol getUint update", "committedDate": "2020-08-21T02:25:02Z", "type": "commit"}, {"oid": "9569288145607d7dfaa75925de753812dd045704", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9569288145607d7dfaa75925de753812dd045704", "message": "Merge pull request #700 from ywy2090/dev\n\nTable.sol getUint update", "committedDate": "2020-08-21T02:42:22Z", "type": "commit"}, {"oid": "f76106f7b529c8fafa83663c12a7a92db9a3441a", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/f76106f7b529c8fafa83663c12a7a92db9a3441a", "message": "update release_node.txt and ChangeLog.md", "committedDate": "2020-08-24T02:59:41Z", "type": "commit"}, {"oid": "a40456a800d13efc792f2ed0a11abce9a3687ec0", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/a40456a800d13efc792f2ed0a11abce9a3687ec0", "message": "update abi wrapper", "committedDate": "2020-08-24T03:16:17Z", "type": "commit"}, {"oid": "311436a0c17cc14573128f7b123d90b27362e71f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/311436a0c17cc14573128f7b123d90b27362e71f", "message": "Merge pull request #701 from ywy2090/release-2.6.2\n\nupdate release_node.txt and ChangeLog.md", "committedDate": "2020-08-24T10:53:34Z", "type": "commit"}, {"oid": "318e61f7a65fd9eea08062149de4aa3252f74570", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/318e61f7a65fd9eea08062149de4aa3252f74570", "message": "add async method for CRUD Service", "committedDate": "2020-08-25T12:59:47Z", "type": "commit"}, {"oid": "5abdb0412f8628aed2753936aa5d04c8d24d5b11", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/5abdb0412f8628aed2753936aa5d04c8d24d5b11", "message": "Merge pull request #703 from ywy2090/release-2.6.2\n\nadd async method for CRUD Service", "committedDate": "2020-08-26T03:02:47Z", "type": "commit"}, {"oid": "7f20c889efe4dd777bc30d6731ff6ab3fa68fc64", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/7f20c889efe4dd777bc30d6731ff6ab3fa68fc64", "message": "add getBlockLimit and Deprecated getBlockNumberCache", "committedDate": "2020-08-26T06:35:30Z", "type": "commit"}, {"oid": "c425efbb0de6c0efddaa0f37db4228d2a7b75e58", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/c425efbb0de6c0efddaa0f37db4228d2a7b75e58", "message": "fix queryCNS when constructor Contract object", "committedDate": "2020-08-26T08:17:09Z", "type": "commit"}, {"oid": "fc334f9904aff8394f5d5ffa8cab13b74677ca8d", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/fc334f9904aff8394f5d5ffa8cab13b74677ca8d", "message": "fix integTest bug", "committedDate": "2020-08-27T02:09:43Z", "type": "commit"}, {"oid": "380aefa0aca8dbf7d192b798f4d4e90defce8907", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/380aefa0aca8dbf7d192b798f4d4e90defce8907", "message": "Merge pull request #704 from ywy2090/release-2.6.2\n\nadd getBlockLimit and Deprecated getBlockNumberCache", "committedDate": "2020-08-27T02:34:05Z", "type": "commit"}, {"oid": "2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/2e25e2a8d1802f1782f8b81160245643c8bbdfa3", "message": "update getAddress compatible with 03 04 public key", "committedDate": "2020-09-16T07:27:10Z", "type": "commit"}, {"oid": "cc62d68d2200d9fe822ffb5d6d1e6ec2c49c6b89", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cc62d68d2200d9fe822ffb5d6d1e6ec2c49c6b89", "message": "fix ABIDefinition.isConstant bug when using solc 0.6.10", "committedDate": "2020-09-17T02:18:27Z", "type": "commit"}, {"oid": "0ade11f535511a3b5bbde2424d809026302373ca", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/0ade11f535511a3b5bbde2424d809026302373ca", "message": "add failedTxSum field", "committedDate": "2020-09-17T06:34:33Z", "type": "commit"}, {"oid": "76eccee76628f89fec8c5872adebb070def50a0e", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/76eccee76628f89fec8c5872adebb070def50a0e", "message": "add interface ret receipt for precompiled service", "committedDate": "2020-09-18T03:10:23Z", "type": "commit"}, {"oid": "bfe636dac88ae08e1937c939f1f2af138ccf7402", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/bfe636dac88ae08e1937c939f1f2af138ccf7402", "message": "fix getConsensusStatus response decode exception bug", "committedDate": "2020-09-18T07:26:02Z", "type": "commit"}, {"oid": "9db7613d180becc7cf3c447da5024b3cb4a4cf38", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9db7613d180becc7cf3c447da5024b3cb4a4cf38", "message": "add interface ret receipt for consensus precompiled service", "committedDate": "2020-09-18T08:59:16Z", "type": "commit"}, {"oid": "bbc28a261ee89878b06132161ad57a5e1522f4eb", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/bbc28a261ee89878b06132161ad57a5e1522f4eb", "message": "add seq info for timeout message", "committedDate": "2020-09-21T23:35:14Z", "type": "commit"}, {"oid": "61f0c41a1e0aa028854e61afcac09fa92b504089", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/61f0c41a1e0aa028854e61afcac09fa92b504089", "message": "remove throw TransactionException when it's not necessary", "committedDate": "2020-09-22T04:48:52Z", "type": "commit"}, {"oid": "ead745d455675af825b4630009874306b2f6f92c", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ead745d455675af825b4630009874306b2f6f92c", "message": "add TransactionReceipt to TransactionException", "committedDate": "2020-09-28T01:42:26Z", "type": "commit"}, {"oid": "65784c29855efea0975a2096bbc5bf4427ba4e2f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/65784c29855efea0975a2096bbc5bf4427ba4e2f", "message": "gradle update", "committedDate": "2020-09-28T06:55:23Z", "type": "commit"}, {"oid": "9034d6ec17306ee7cf8a3dfa52df22c451972f25", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9034d6ec17306ee7cf8a3dfa52df22c451972f25", "message": "Merge pull request #706 from ywy2090/release-2.6.2\n\nupdate getAddress compatible with 03 04 public key", "committedDate": "2020-09-28T08:20:29Z", "type": "commit"}, {"oid": "775f0eecb72532f8fb1c7bbd5900c65ddcb81ac4", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/775f0eecb72532f8fb1c7bbd5900c65ddcb81ac4", "message": "remove . of Transaction receipt timeout message", "committedDate": "2020-09-28T11:35:49Z", "type": "commit"}, {"oid": "5abe2b5b3a9ef6639a21e295e2cb1bfa1dc4aef8", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/5abe2b5b3a9ef6639a21e295e2cb1bfa1dc4aef8", "message": "Merge pull request #710 from ywy2090/release-2.6.2\n\nremove . of Transaction receipt timeout message", "committedDate": "2020-09-28T12:10:01Z", "type": "commit"}, {"oid": "c4372236a4e057c2317edfbc233fbb67fe4c55ea", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/c4372236a4e057c2317edfbc233fbb67fe4c55ea", "message": "update StatusCode", "committedDate": "2020-09-30T03:08:03Z", "type": "commit"}, {"oid": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "message": "Merge pull request #712 from ywy2090/release-2.6.2\n\nupdate StatusCode", "committedDate": "2020-09-30T05:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODgzMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358832", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:06Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/consensus/ConsensusService.java", "diffHunk": "@@ -26,34 +26,50 @@ public ConsensusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String addSealer(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> sealerList = web3j.getSealerList().send().getResult();\n-        if (sealerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.SealerList);\n-        }\n-        TransactionReceipt receipt = consensus.addSealer(nodeID).send();\n+        TransactionReceipt receipt = addSealerAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addSealerAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addSealer(nodeID).send();\n+    }\n+\n     public String addObserver(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> observerList = web3j.getObserverList().send().getResult();\n-        if (observerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.ObserverList);\n-        }\n-        TransactionReceipt receipt = consensus.addObserver(nodeID).send();\n+        TransactionReceipt receipt = addObserverAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addObserverAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addObserver(nodeID).send();\n+    }\n+\n     public String removeNode(String nodeId) throws Exception {\n         List<String> groupPeers = web3j.getGroupPeers().send().getResult();\n         if (!groupPeers.contains(nodeId)) {\n             return PrecompiledCommon.transferToJson(PrecompiledCommon.GroupPeers);\n         }\n+        TransactionReceipt receipt = null;\n+        try {\n+            receipt = removeNodeAndRetReceipt(nodeId);\n+        } catch (RuntimeException e) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODgzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358836", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:07Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -132,6 +132,19 @@ public BigInteger getBlockNumberCache() {\n         return getLocalBlockNumber().add(new BigInteger(BlockLimit.blockLimit.toString()));\n     }\n \n+    @Override\n+    public BigInteger getBlockLimit() {\n+        if (getLocalBlockNumber().intValue() == 1) {\n+            try {\n+                BlockNumber blockNumber = getBlockNumber().sendAsync().get();\n+                setBlockNumber(blockNumber.getBlockNumber());\n+            } catch (Exception e) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODgzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358839", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:07Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABIObject.java", "diffHunk": "@@ -349,6 +350,10 @@ public String encode() {\n                             }\n                         case BYTES:\n                             {\n+                                if (bytesValue.getValue().length > 32) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg0Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358842", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:07Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -132,6 +132,19 @@ public BigInteger getBlockNumberCache() {\n         return getLocalBlockNumber().add(new BigInteger(BlockLimit.blockLimit.toString()));\n     }\n \n+    @Override\n+    public BigInteger getBlockLimit() {\n+        if (getLocalBlockNumber().intValue() == 1) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg0Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358843", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:07Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/ConsensusStatus.java", "diffHunk": "@@ -1,10 +1,460 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n import org.fisco.bcos.web3j.protocol.core.Response;\n \n /** getConsensusStatus */\n-public class ConsensusStatus extends Response<String> {\n-    public String getConsensusStatus() {\n+public class ConsensusStatus extends Response<ConsensusStatus.ConsensusInfo> {\n+    @Override\n+    @JsonDeserialize(using = ConsensusStatusDeserializer.class)\n+    public void setResult(ConsensusStatus.ConsensusInfo result) {\n+        super.setResult(result);\n+    }\n+\n+    public ConsensusInfo getConsensusStatus() {\n         return getResult();\n     }\n+\n+    public static class ViewInfo {\n+        private String nodeId;\n+        private String view;\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getView() {\n+            return view;\n+        }\n+\n+        public void setView(String view) {\n+            this.view = view;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ViewInfo viewInfo = (ViewInfo) o;\n+            return Objects.equals(nodeId, viewInfo.nodeId) && Objects.equals(view, viewInfo.view);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(nodeId, view);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ViewInfo{\" + \"nodeId='\" + nodeId + '\\'' + \", view='\" + view + '\\'' + '}';\n+        }\n+    }\n+\n+    public static class BasicConsensusInfo {\n+        private String nodeNum;\n+\n+        @JsonProperty(\"node_index\")\n+        private String nodeIndex;\n+\n+        @JsonProperty(\"node index\")\n+        private String raftNodeIndex;\n+\n+        @JsonProperty(\"max_faulty_leader\")\n+        private String maxFaultyNodeNum;\n+\n+        @JsonProperty(\"sealer.\")\n+        private List<String> sealerList;\n+\n+        private String consensusedBlockNumber;\n+        private String highestblockNumber;\n+        private String groupId;\n+        private String protocolId;\n+        private String accountType;\n+        private String cfgErr;\n+        private String omitEmptyBlock;\n+        private String nodeId;\n+        private String allowFutureBlocks;\n+        private String connectedNodes;\n+        private String currentView;\n+        private String toView;\n+        private String leaderFailed;\n+        private String highestblockHash;\n+        private String leaderId;\n+        private String leaderIdx;\n+\n+        public String getRaftNodeIndex() {\n+            return raftNodeIndex;\n+        }\n+\n+        public void setRaftNodeIndex(String raftNodeIndex) {\n+            this.raftNodeIndex = raftNodeIndex;\n+        }\n+\n+        public String getLeaderId() {\n+            return leaderId;\n+        }\n+\n+        public void setLeaderId(String leaderId) {\n+            this.leaderId = leaderId;\n+        }\n+\n+        public String getLeaderIdx() {\n+            return leaderIdx;\n+        }\n+\n+        public void setLeaderIdx(String leaderIdx) {\n+            this.leaderIdx = leaderIdx;\n+        }\n+\n+        public String getNodeIndex() {\n+            return nodeIndex;\n+        }\n+\n+        public void setNodeIndex(String nodeIndex) {\n+            this.nodeIndex = nodeIndex;\n+        }\n+\n+        public String getHighestblockHash() {\n+            return highestblockHash;\n+        }\n+\n+        public void setHighestblockHash(String highestblockHash) {\n+            this.highestblockHash = highestblockHash;\n+        }\n+\n+        public String getNodeNum() {\n+            return nodeNum;\n+        }\n+\n+        public void setNodeNum(String nodeNum) {\n+            this.nodeNum = nodeNum;\n+        }\n+\n+        public String getMaxFaultyNodeNum() {\n+            return maxFaultyNodeNum;\n+        }\n+\n+        public void setMaxFaultyNodeNum(String maxFaultyNodeNum) {\n+            this.maxFaultyNodeNum = maxFaultyNodeNum;\n+        }\n+\n+        public List<String> getSealerList() {\n+            return sealerList;\n+        }\n+\n+        public void setSealerList(List<String> sealerList) {\n+            this.sealerList = sealerList;\n+        }\n+\n+        public String getConsensusedBlockNumber() {\n+            return consensusedBlockNumber;\n+        }\n+\n+        public void setConsensusedBlockNumber(String consensusedBlockNumber) {\n+            this.consensusedBlockNumber = consensusedBlockNumber;\n+        }\n+\n+        public String getHighestblockNumber() {\n+            return highestblockNumber;\n+        }\n+\n+        public void setHighestblockNumber(String highestblockNumber) {\n+            this.highestblockNumber = highestblockNumber;\n+        }\n+\n+        public String getGroupId() {\n+            return groupId;\n+        }\n+\n+        public void setGroupId(String groupId) {\n+            this.groupId = groupId;\n+        }\n+\n+        public String getProtocolId() {\n+            return protocolId;\n+        }\n+\n+        public void setProtocolId(String protocolId) {\n+            this.protocolId = protocolId;\n+        }\n+\n+        public String getAccountType() {\n+            return accountType;\n+        }\n+\n+        public void setAccountType(String accountType) {\n+            this.accountType = accountType;\n+        }\n+\n+        public String getCfgErr() {\n+            return cfgErr;\n+        }\n+\n+        public void setCfgErr(String cfgErr) {\n+            this.cfgErr = cfgErr;\n+        }\n+\n+        public String getOmitEmptyBlock() {\n+            return omitEmptyBlock;\n+        }\n+\n+        public void setOmitEmptyBlock(String omitEmptyBlock) {\n+            this.omitEmptyBlock = omitEmptyBlock;\n+        }\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getAllowFutureBlocks() {\n+            return allowFutureBlocks;\n+        }\n+\n+        public void setAllowFutureBlocks(String allowFutureBlocks) {\n+            this.allowFutureBlocks = allowFutureBlocks;\n+        }\n+\n+        public String getConnectedNodes() {\n+            return connectedNodes;\n+        }\n+\n+        public void setConnectedNodes(String connectedNodes) {\n+            this.connectedNodes = connectedNodes;\n+        }\n+\n+        public String getCurrentView() {\n+            return currentView;\n+        }\n+\n+        public void setCurrentView(String currentView) {\n+            this.currentView = currentView;\n+        }\n+\n+        public String getToView() {\n+            return toView;\n+        }\n+\n+        public void setToView(String toView) {\n+            this.toView = toView;\n+        }\n+\n+        public String getLeaderFailed() {\n+            return leaderFailed;\n+        }\n+\n+        public void setLeaderFailed(String leaderFailed) {\n+            this.leaderFailed = leaderFailed;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            BasicConsensusInfo that = (BasicConsensusInfo) o;\n+            return Objects.equals(nodeNum, that.nodeNum)\n+                    && Objects.equals(nodeIndex, that.nodeIndex)\n+                    && Objects.equals(maxFaultyNodeNum, that.maxFaultyNodeNum)\n+                    && Objects.equals(sealerList, that.sealerList)\n+                    && Objects.equals(consensusedBlockNumber, that.consensusedBlockNumber)\n+                    && Objects.equals(highestblockNumber, that.highestblockNumber)\n+                    && Objects.equals(groupId, that.groupId)\n+                    && Objects.equals(protocolId, that.protocolId)\n+                    && Objects.equals(accountType, that.accountType)\n+                    && Objects.equals(cfgErr, that.cfgErr)\n+                    && Objects.equals(omitEmptyBlock, that.omitEmptyBlock)\n+                    && Objects.equals(nodeId, that.nodeId)\n+                    && Objects.equals(allowFutureBlocks, that.allowFutureBlocks)\n+                    && Objects.equals(connectedNodes, that.connectedNodes)\n+                    && Objects.equals(currentView, that.currentView)\n+                    && Objects.equals(toView, that.toView)\n+                    && Objects.equals(leaderFailed, that.leaderFailed)\n+                    && Objects.equals(highestblockHash, that.highestblockHash);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(\n+                    nodeNum,\n+                    nodeIndex,\n+                    maxFaultyNodeNum,\n+                    sealerList,\n+                    consensusedBlockNumber,\n+                    highestblockNumber,\n+                    groupId,\n+                    protocolId,\n+                    accountType,\n+                    cfgErr,\n+                    omitEmptyBlock,\n+                    nodeId,\n+                    allowFutureBlocks,\n+                    connectedNodes,\n+                    currentView,\n+                    toView,\n+                    leaderFailed,\n+                    highestblockHash);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"BasicConsensusInfo{\"\n+                    + \"nodeNum='\"\n+                    + nodeNum\n+                    + '\\''\n+                    + \", nodeIndex='\"\n+                    + nodeIndex\n+                    + '\\''\n+                    + \", maxFaultyNodeNum='\"\n+                    + maxFaultyNodeNum\n+                    + '\\''\n+                    + \", sealerList=\"\n+                    + sealerList\n+                    + \", consensusedBlockNumber='\"\n+                    + consensusedBlockNumber\n+                    + '\\''\n+                    + \", highestblockNumber='\"\n+                    + highestblockNumber\n+                    + '\\''\n+                    + \", groupId='\"\n+                    + groupId\n+                    + '\\''\n+                    + \", protocolId='\"\n+                    + protocolId\n+                    + '\\''\n+                    + \", accountType='\"\n+                    + accountType\n+                    + '\\''\n+                    + \", cfgErr='\"\n+                    + cfgErr\n+                    + '\\''\n+                    + \", omitEmptyBlock='\"\n+                    + omitEmptyBlock\n+                    + '\\''\n+                    + \", nodeId='\"\n+                    + nodeId\n+                    + '\\''\n+                    + \", allowFutureBlocks='\"\n+                    + allowFutureBlocks\n+                    + '\\''\n+                    + \", connectedNodes='\"\n+                    + connectedNodes\n+                    + '\\''\n+                    + \", currentView='\"\n+                    + currentView\n+                    + '\\''\n+                    + \", toView='\"\n+                    + toView\n+                    + '\\''\n+                    + \", leaderFailed='\"\n+                    + leaderFailed\n+                    + '\\''\n+                    + \", highestblockHash='\"\n+                    + highestblockHash\n+                    + '\\''\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusInfo {\n+        private BasicConsensusInfo baseConsensusInfo;\n+        private List<ViewInfo> viewInfos;\n+\n+        public ConsensusInfo() {}\n+\n+        public ConsensusInfo(BasicConsensusInfo baseConsensusInfo, List<ViewInfo> viewInfos) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        public BasicConsensusInfo getBaseConsensusInfo() {\n+            return baseConsensusInfo;\n+        }\n+\n+        public void setBaseConsensusInfo(BasicConsensusInfo baseConsensusInfo) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+        }\n+\n+        public List<ViewInfo> getViewInfos() {\n+            return viewInfos;\n+        }\n+\n+        public void setViewInfos(List<ViewInfo> viewInfos) {\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ConsensusInfo that = (ConsensusInfo) o;\n+            return Objects.equals(baseConsensusInfo, that.baseConsensusInfo)\n+                    && Objects.equals(viewInfos, that.viewInfos);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(baseConsensusInfo, viewInfos);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ConsensusInfo{\"\n+                    + \"baseConsensusInfo=\"\n+                    + baseConsensusInfo\n+                    + \", viewInfos=\"\n+                    + viewInfos\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusStatusDeserializer extends JsonDeserializer<ConsensusInfo> {\n+        private ObjectMapper objecMapper = ObjectMapperFactory.getObjectMapper();\n+\n+        @Override\n+        public ConsensusInfo deserialize(\n+                JsonParser jsonParser, DeserializationContext deserializationContext)\n+                throws IOException {\n+            JsonNode node = jsonParser.getCodec().readTree(jsonParser);\n+            BasicConsensusInfo baseConsensusInfo = null;\n+            List<ViewInfo> viewInfos = null;\n+            if (node.size() > 0) {\n+                baseConsensusInfo =\n+                        objecMapper.readValue(node.get(0).toString(), BasicConsensusInfo.class);\n+                Integer sealersNum = Integer.valueOf(baseConsensusInfo.getNodeNum());\n+                baseConsensusInfo.setSealerList(new ArrayList<String>(sealersNum));\n+                // parse sealerList\n+                for (Integer i = 0; i < sealersNum; i++) {\n+                    String key = \"sealer.\" + String.valueOf(i);\n+                    if (node.get(0).has(key)) {\n+                        baseConsensusInfo.getSealerList().add(i, node.get(0).get(key).asText());\n+                    }\n+                }\n+            }\n+            if (node.size() > 1) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg0Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358846", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:08Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -37,6 +37,12 @@ private void errorReport(String path, String expected, String actual)\n         throw new InvalidParameterException(errorMessage);\n     }\n \n+    private void errorReport(String path, String desc) throws InvalidParameterException {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg1MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358850", "bodyText": "[PMD Java] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:08Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/ConsensusStatus.java", "diffHunk": "@@ -1,10 +1,460 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n import org.fisco.bcos.web3j.protocol.core.Response;\n \n /** getConsensusStatus */\n-public class ConsensusStatus extends Response<String> {\n-    public String getConsensusStatus() {\n+public class ConsensusStatus extends Response<ConsensusStatus.ConsensusInfo> {\n+    @Override\n+    @JsonDeserialize(using = ConsensusStatusDeserializer.class)\n+    public void setResult(ConsensusStatus.ConsensusInfo result) {\n+        super.setResult(result);\n+    }\n+\n+    public ConsensusInfo getConsensusStatus() {\n         return getResult();\n     }\n+\n+    public static class ViewInfo {\n+        private String nodeId;\n+        private String view;\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getView() {\n+            return view;\n+        }\n+\n+        public void setView(String view) {\n+            this.view = view;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ViewInfo viewInfo = (ViewInfo) o;\n+            return Objects.equals(nodeId, viewInfo.nodeId) && Objects.equals(view, viewInfo.view);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(nodeId, view);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ViewInfo{\" + \"nodeId='\" + nodeId + '\\'' + \", view='\" + view + '\\'' + '}';\n+        }\n+    }\n+\n+    public static class BasicConsensusInfo {\n+        private String nodeNum;\n+\n+        @JsonProperty(\"node_index\")\n+        private String nodeIndex;\n+\n+        @JsonProperty(\"node index\")\n+        private String raftNodeIndex;\n+\n+        @JsonProperty(\"max_faulty_leader\")\n+        private String maxFaultyNodeNum;\n+\n+        @JsonProperty(\"sealer.\")\n+        private List<String> sealerList;\n+\n+        private String consensusedBlockNumber;\n+        private String highestblockNumber;\n+        private String groupId;\n+        private String protocolId;\n+        private String accountType;\n+        private String cfgErr;\n+        private String omitEmptyBlock;\n+        private String nodeId;\n+        private String allowFutureBlocks;\n+        private String connectedNodes;\n+        private String currentView;\n+        private String toView;\n+        private String leaderFailed;\n+        private String highestblockHash;\n+        private String leaderId;\n+        private String leaderIdx;\n+\n+        public String getRaftNodeIndex() {\n+            return raftNodeIndex;\n+        }\n+\n+        public void setRaftNodeIndex(String raftNodeIndex) {\n+            this.raftNodeIndex = raftNodeIndex;\n+        }\n+\n+        public String getLeaderId() {\n+            return leaderId;\n+        }\n+\n+        public void setLeaderId(String leaderId) {\n+            this.leaderId = leaderId;\n+        }\n+\n+        public String getLeaderIdx() {\n+            return leaderIdx;\n+        }\n+\n+        public void setLeaderIdx(String leaderIdx) {\n+            this.leaderIdx = leaderIdx;\n+        }\n+\n+        public String getNodeIndex() {\n+            return nodeIndex;\n+        }\n+\n+        public void setNodeIndex(String nodeIndex) {\n+            this.nodeIndex = nodeIndex;\n+        }\n+\n+        public String getHighestblockHash() {\n+            return highestblockHash;\n+        }\n+\n+        public void setHighestblockHash(String highestblockHash) {\n+            this.highestblockHash = highestblockHash;\n+        }\n+\n+        public String getNodeNum() {\n+            return nodeNum;\n+        }\n+\n+        public void setNodeNum(String nodeNum) {\n+            this.nodeNum = nodeNum;\n+        }\n+\n+        public String getMaxFaultyNodeNum() {\n+            return maxFaultyNodeNum;\n+        }\n+\n+        public void setMaxFaultyNodeNum(String maxFaultyNodeNum) {\n+            this.maxFaultyNodeNum = maxFaultyNodeNum;\n+        }\n+\n+        public List<String> getSealerList() {\n+            return sealerList;\n+        }\n+\n+        public void setSealerList(List<String> sealerList) {\n+            this.sealerList = sealerList;\n+        }\n+\n+        public String getConsensusedBlockNumber() {\n+            return consensusedBlockNumber;\n+        }\n+\n+        public void setConsensusedBlockNumber(String consensusedBlockNumber) {\n+            this.consensusedBlockNumber = consensusedBlockNumber;\n+        }\n+\n+        public String getHighestblockNumber() {\n+            return highestblockNumber;\n+        }\n+\n+        public void setHighestblockNumber(String highestblockNumber) {\n+            this.highestblockNumber = highestblockNumber;\n+        }\n+\n+        public String getGroupId() {\n+            return groupId;\n+        }\n+\n+        public void setGroupId(String groupId) {\n+            this.groupId = groupId;\n+        }\n+\n+        public String getProtocolId() {\n+            return protocolId;\n+        }\n+\n+        public void setProtocolId(String protocolId) {\n+            this.protocolId = protocolId;\n+        }\n+\n+        public String getAccountType() {\n+            return accountType;\n+        }\n+\n+        public void setAccountType(String accountType) {\n+            this.accountType = accountType;\n+        }\n+\n+        public String getCfgErr() {\n+            return cfgErr;\n+        }\n+\n+        public void setCfgErr(String cfgErr) {\n+            this.cfgErr = cfgErr;\n+        }\n+\n+        public String getOmitEmptyBlock() {\n+            return omitEmptyBlock;\n+        }\n+\n+        public void setOmitEmptyBlock(String omitEmptyBlock) {\n+            this.omitEmptyBlock = omitEmptyBlock;\n+        }\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getAllowFutureBlocks() {\n+            return allowFutureBlocks;\n+        }\n+\n+        public void setAllowFutureBlocks(String allowFutureBlocks) {\n+            this.allowFutureBlocks = allowFutureBlocks;\n+        }\n+\n+        public String getConnectedNodes() {\n+            return connectedNodes;\n+        }\n+\n+        public void setConnectedNodes(String connectedNodes) {\n+            this.connectedNodes = connectedNodes;\n+        }\n+\n+        public String getCurrentView() {\n+            return currentView;\n+        }\n+\n+        public void setCurrentView(String currentView) {\n+            this.currentView = currentView;\n+        }\n+\n+        public String getToView() {\n+            return toView;\n+        }\n+\n+        public void setToView(String toView) {\n+            this.toView = toView;\n+        }\n+\n+        public String getLeaderFailed() {\n+            return leaderFailed;\n+        }\n+\n+        public void setLeaderFailed(String leaderFailed) {\n+            this.leaderFailed = leaderFailed;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            BasicConsensusInfo that = (BasicConsensusInfo) o;\n+            return Objects.equals(nodeNum, that.nodeNum)\n+                    && Objects.equals(nodeIndex, that.nodeIndex)\n+                    && Objects.equals(maxFaultyNodeNum, that.maxFaultyNodeNum)\n+                    && Objects.equals(sealerList, that.sealerList)\n+                    && Objects.equals(consensusedBlockNumber, that.consensusedBlockNumber)\n+                    && Objects.equals(highestblockNumber, that.highestblockNumber)\n+                    && Objects.equals(groupId, that.groupId)\n+                    && Objects.equals(protocolId, that.protocolId)\n+                    && Objects.equals(accountType, that.accountType)\n+                    && Objects.equals(cfgErr, that.cfgErr)\n+                    && Objects.equals(omitEmptyBlock, that.omitEmptyBlock)\n+                    && Objects.equals(nodeId, that.nodeId)\n+                    && Objects.equals(allowFutureBlocks, that.allowFutureBlocks)\n+                    && Objects.equals(connectedNodes, that.connectedNodes)\n+                    && Objects.equals(currentView, that.currentView)\n+                    && Objects.equals(toView, that.toView)\n+                    && Objects.equals(leaderFailed, that.leaderFailed)\n+                    && Objects.equals(highestblockHash, that.highestblockHash);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(\n+                    nodeNum,\n+                    nodeIndex,\n+                    maxFaultyNodeNum,\n+                    sealerList,\n+                    consensusedBlockNumber,\n+                    highestblockNumber,\n+                    groupId,\n+                    protocolId,\n+                    accountType,\n+                    cfgErr,\n+                    omitEmptyBlock,\n+                    nodeId,\n+                    allowFutureBlocks,\n+                    connectedNodes,\n+                    currentView,\n+                    toView,\n+                    leaderFailed,\n+                    highestblockHash);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"BasicConsensusInfo{\"\n+                    + \"nodeNum='\"\n+                    + nodeNum\n+                    + '\\''\n+                    + \", nodeIndex='\"\n+                    + nodeIndex\n+                    + '\\''\n+                    + \", maxFaultyNodeNum='\"\n+                    + maxFaultyNodeNum\n+                    + '\\''\n+                    + \", sealerList=\"\n+                    + sealerList\n+                    + \", consensusedBlockNumber='\"\n+                    + consensusedBlockNumber\n+                    + '\\''\n+                    + \", highestblockNumber='\"\n+                    + highestblockNumber\n+                    + '\\''\n+                    + \", groupId='\"\n+                    + groupId\n+                    + '\\''\n+                    + \", protocolId='\"\n+                    + protocolId\n+                    + '\\''\n+                    + \", accountType='\"\n+                    + accountType\n+                    + '\\''\n+                    + \", cfgErr='\"\n+                    + cfgErr\n+                    + '\\''\n+                    + \", omitEmptyBlock='\"\n+                    + omitEmptyBlock\n+                    + '\\''\n+                    + \", nodeId='\"\n+                    + nodeId\n+                    + '\\''\n+                    + \", allowFutureBlocks='\"\n+                    + allowFutureBlocks\n+                    + '\\''\n+                    + \", connectedNodes='\"\n+                    + connectedNodes\n+                    + '\\''\n+                    + \", currentView='\"\n+                    + currentView\n+                    + '\\''\n+                    + \", toView='\"\n+                    + toView\n+                    + '\\''\n+                    + \", leaderFailed='\"\n+                    + leaderFailed\n+                    + '\\''\n+                    + \", highestblockHash='\"\n+                    + highestblockHash\n+                    + '\\''\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusInfo {\n+        private BasicConsensusInfo baseConsensusInfo;\n+        private List<ViewInfo> viewInfos;\n+\n+        public ConsensusInfo() {}\n+\n+        public ConsensusInfo(BasicConsensusInfo baseConsensusInfo, List<ViewInfo> viewInfos) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        public BasicConsensusInfo getBaseConsensusInfo() {\n+            return baseConsensusInfo;\n+        }\n+\n+        public void setBaseConsensusInfo(BasicConsensusInfo baseConsensusInfo) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+        }\n+\n+        public List<ViewInfo> getViewInfos() {\n+            return viewInfos;\n+        }\n+\n+        public void setViewInfos(List<ViewInfo> viewInfos) {\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ConsensusInfo that = (ConsensusInfo) o;\n+            return Objects.equals(baseConsensusInfo, that.baseConsensusInfo)\n+                    && Objects.equals(viewInfos, that.viewInfos);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(baseConsensusInfo, viewInfos);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ConsensusInfo{\"\n+                    + \"baseConsensusInfo=\"\n+                    + baseConsensusInfo\n+                    + \", viewInfos=\"\n+                    + viewInfos\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusStatusDeserializer extends JsonDeserializer<ConsensusInfo> {\n+        private ObjectMapper objecMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg1NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358855", "bodyText": "[PMD Java] Dont create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBigIntegerInstantiation\nPerformance\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_performance.html#bigintegerinstantiation\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:08Z", "path": "src/test/java/org/fisco/bcos/web3j/tx/ManagedTransactionTester.java", "diffHunk": "@@ -58,7 +58,7 @@ void prepareBlockNumberRequest() throws IOException {\n         Request<?, BlockNumber> ethBlockNumberRequest = mock(Request.class);\n         when(ethBlockNumberRequest.send()).thenReturn(ethBlockNumber);\n         when(web3j.getBlockNumber()).thenReturn((Request) ethBlockNumberRequest);\n-        when(web3j.getBlockNumberCache()).thenReturn(new BigInteger(\"1\"));\n+        when(web3j.getBlockLimit()).thenReturn(new BigInteger(\"1\"));", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg1Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358857", "bodyText": "[PMD Java] Avoid empty if statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nEmptyIfStmt\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#emptyifstmt\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:08Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg2MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358861", "bodyText": "[PMD Java] Possible God Class (WMC=48, ATFD=19, TCC=13.333%) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nGodClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#godclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:08Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/ConsensusStatus.java", "diffHunk": "@@ -1,10 +1,460 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n import org.fisco.bcos.web3j.protocol.core.Response;\n \n /** getConsensusStatus */\n-public class ConsensusStatus extends Response<String> {\n-    public String getConsensusStatus() {\n+public class ConsensusStatus extends Response<ConsensusStatus.ConsensusInfo> {\n+    @Override\n+    @JsonDeserialize(using = ConsensusStatusDeserializer.class)\n+    public void setResult(ConsensusStatus.ConsensusInfo result) {\n+        super.setResult(result);\n+    }\n+\n+    public ConsensusInfo getConsensusStatus() {\n         return getResult();\n     }\n+\n+    public static class ViewInfo {\n+        private String nodeId;\n+        private String view;\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getView() {\n+            return view;\n+        }\n+\n+        public void setView(String view) {\n+            this.view = view;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ViewInfo viewInfo = (ViewInfo) o;\n+            return Objects.equals(nodeId, viewInfo.nodeId) && Objects.equals(view, viewInfo.view);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(nodeId, view);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ViewInfo{\" + \"nodeId='\" + nodeId + '\\'' + \", view='\" + view + '\\'' + '}';\n+        }\n+    }\n+\n+    public static class BasicConsensusInfo {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg2Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358863", "bodyText": "[PMD Java] Logger calls should be surrounded by log level guards. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nGuardLogStatement\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#guardlogstatement\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:09Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -132,6 +132,19 @@ public BigInteger getBlockNumberCache() {\n         return getLocalBlockNumber().add(new BigInteger(BlockLimit.blockLimit.toString()));\n     }\n \n+    @Override\n+    public BigInteger getBlockLimit() {\n+        if (getLocalBlockNumber().intValue() == 1) {\n+            try {\n+                BlockNumber blockNumber = getBlockNumber().sendAsync().get();\n+                setBlockNumber(blockNumber.getBlockNumber());\n+            } catch (Exception e) {\n+                logger.error(\"Exception: \" + e);", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg2NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358864", "bodyText": "[PMD Java] Private field 'objecMapper' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:09Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/ConsensusStatus.java", "diffHunk": "@@ -1,10 +1,460 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n import org.fisco.bcos.web3j.protocol.core.Response;\n \n /** getConsensusStatus */\n-public class ConsensusStatus extends Response<String> {\n-    public String getConsensusStatus() {\n+public class ConsensusStatus extends Response<ConsensusStatus.ConsensusInfo> {\n+    @Override\n+    @JsonDeserialize(using = ConsensusStatusDeserializer.class)\n+    public void setResult(ConsensusStatus.ConsensusInfo result) {\n+        super.setResult(result);\n+    }\n+\n+    public ConsensusInfo getConsensusStatus() {\n         return getResult();\n     }\n+\n+    public static class ViewInfo {\n+        private String nodeId;\n+        private String view;\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getView() {\n+            return view;\n+        }\n+\n+        public void setView(String view) {\n+            this.view = view;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ViewInfo viewInfo = (ViewInfo) o;\n+            return Objects.equals(nodeId, viewInfo.nodeId) && Objects.equals(view, viewInfo.view);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(nodeId, view);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ViewInfo{\" + \"nodeId='\" + nodeId + '\\'' + \", view='\" + view + '\\'' + '}';\n+        }\n+    }\n+\n+    public static class BasicConsensusInfo {\n+        private String nodeNum;\n+\n+        @JsonProperty(\"node_index\")\n+        private String nodeIndex;\n+\n+        @JsonProperty(\"node index\")\n+        private String raftNodeIndex;\n+\n+        @JsonProperty(\"max_faulty_leader\")\n+        private String maxFaultyNodeNum;\n+\n+        @JsonProperty(\"sealer.\")\n+        private List<String> sealerList;\n+\n+        private String consensusedBlockNumber;\n+        private String highestblockNumber;\n+        private String groupId;\n+        private String protocolId;\n+        private String accountType;\n+        private String cfgErr;\n+        private String omitEmptyBlock;\n+        private String nodeId;\n+        private String allowFutureBlocks;\n+        private String connectedNodes;\n+        private String currentView;\n+        private String toView;\n+        private String leaderFailed;\n+        private String highestblockHash;\n+        private String leaderId;\n+        private String leaderIdx;\n+\n+        public String getRaftNodeIndex() {\n+            return raftNodeIndex;\n+        }\n+\n+        public void setRaftNodeIndex(String raftNodeIndex) {\n+            this.raftNodeIndex = raftNodeIndex;\n+        }\n+\n+        public String getLeaderId() {\n+            return leaderId;\n+        }\n+\n+        public void setLeaderId(String leaderId) {\n+            this.leaderId = leaderId;\n+        }\n+\n+        public String getLeaderIdx() {\n+            return leaderIdx;\n+        }\n+\n+        public void setLeaderIdx(String leaderIdx) {\n+            this.leaderIdx = leaderIdx;\n+        }\n+\n+        public String getNodeIndex() {\n+            return nodeIndex;\n+        }\n+\n+        public void setNodeIndex(String nodeIndex) {\n+            this.nodeIndex = nodeIndex;\n+        }\n+\n+        public String getHighestblockHash() {\n+            return highestblockHash;\n+        }\n+\n+        public void setHighestblockHash(String highestblockHash) {\n+            this.highestblockHash = highestblockHash;\n+        }\n+\n+        public String getNodeNum() {\n+            return nodeNum;\n+        }\n+\n+        public void setNodeNum(String nodeNum) {\n+            this.nodeNum = nodeNum;\n+        }\n+\n+        public String getMaxFaultyNodeNum() {\n+            return maxFaultyNodeNum;\n+        }\n+\n+        public void setMaxFaultyNodeNum(String maxFaultyNodeNum) {\n+            this.maxFaultyNodeNum = maxFaultyNodeNum;\n+        }\n+\n+        public List<String> getSealerList() {\n+            return sealerList;\n+        }\n+\n+        public void setSealerList(List<String> sealerList) {\n+            this.sealerList = sealerList;\n+        }\n+\n+        public String getConsensusedBlockNumber() {\n+            return consensusedBlockNumber;\n+        }\n+\n+        public void setConsensusedBlockNumber(String consensusedBlockNumber) {\n+            this.consensusedBlockNumber = consensusedBlockNumber;\n+        }\n+\n+        public String getHighestblockNumber() {\n+            return highestblockNumber;\n+        }\n+\n+        public void setHighestblockNumber(String highestblockNumber) {\n+            this.highestblockNumber = highestblockNumber;\n+        }\n+\n+        public String getGroupId() {\n+            return groupId;\n+        }\n+\n+        public void setGroupId(String groupId) {\n+            this.groupId = groupId;\n+        }\n+\n+        public String getProtocolId() {\n+            return protocolId;\n+        }\n+\n+        public void setProtocolId(String protocolId) {\n+            this.protocolId = protocolId;\n+        }\n+\n+        public String getAccountType() {\n+            return accountType;\n+        }\n+\n+        public void setAccountType(String accountType) {\n+            this.accountType = accountType;\n+        }\n+\n+        public String getCfgErr() {\n+            return cfgErr;\n+        }\n+\n+        public void setCfgErr(String cfgErr) {\n+            this.cfgErr = cfgErr;\n+        }\n+\n+        public String getOmitEmptyBlock() {\n+            return omitEmptyBlock;\n+        }\n+\n+        public void setOmitEmptyBlock(String omitEmptyBlock) {\n+            this.omitEmptyBlock = omitEmptyBlock;\n+        }\n+\n+        public String getNodeId() {\n+            return nodeId;\n+        }\n+\n+        public void setNodeId(String nodeId) {\n+            this.nodeId = nodeId;\n+        }\n+\n+        public String getAllowFutureBlocks() {\n+            return allowFutureBlocks;\n+        }\n+\n+        public void setAllowFutureBlocks(String allowFutureBlocks) {\n+            this.allowFutureBlocks = allowFutureBlocks;\n+        }\n+\n+        public String getConnectedNodes() {\n+            return connectedNodes;\n+        }\n+\n+        public void setConnectedNodes(String connectedNodes) {\n+            this.connectedNodes = connectedNodes;\n+        }\n+\n+        public String getCurrentView() {\n+            return currentView;\n+        }\n+\n+        public void setCurrentView(String currentView) {\n+            this.currentView = currentView;\n+        }\n+\n+        public String getToView() {\n+            return toView;\n+        }\n+\n+        public void setToView(String toView) {\n+            this.toView = toView;\n+        }\n+\n+        public String getLeaderFailed() {\n+            return leaderFailed;\n+        }\n+\n+        public void setLeaderFailed(String leaderFailed) {\n+            this.leaderFailed = leaderFailed;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            BasicConsensusInfo that = (BasicConsensusInfo) o;\n+            return Objects.equals(nodeNum, that.nodeNum)\n+                    && Objects.equals(nodeIndex, that.nodeIndex)\n+                    && Objects.equals(maxFaultyNodeNum, that.maxFaultyNodeNum)\n+                    && Objects.equals(sealerList, that.sealerList)\n+                    && Objects.equals(consensusedBlockNumber, that.consensusedBlockNumber)\n+                    && Objects.equals(highestblockNumber, that.highestblockNumber)\n+                    && Objects.equals(groupId, that.groupId)\n+                    && Objects.equals(protocolId, that.protocolId)\n+                    && Objects.equals(accountType, that.accountType)\n+                    && Objects.equals(cfgErr, that.cfgErr)\n+                    && Objects.equals(omitEmptyBlock, that.omitEmptyBlock)\n+                    && Objects.equals(nodeId, that.nodeId)\n+                    && Objects.equals(allowFutureBlocks, that.allowFutureBlocks)\n+                    && Objects.equals(connectedNodes, that.connectedNodes)\n+                    && Objects.equals(currentView, that.currentView)\n+                    && Objects.equals(toView, that.toView)\n+                    && Objects.equals(leaderFailed, that.leaderFailed)\n+                    && Objects.equals(highestblockHash, that.highestblockHash);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(\n+                    nodeNum,\n+                    nodeIndex,\n+                    maxFaultyNodeNum,\n+                    sealerList,\n+                    consensusedBlockNumber,\n+                    highestblockNumber,\n+                    groupId,\n+                    protocolId,\n+                    accountType,\n+                    cfgErr,\n+                    omitEmptyBlock,\n+                    nodeId,\n+                    allowFutureBlocks,\n+                    connectedNodes,\n+                    currentView,\n+                    toView,\n+                    leaderFailed,\n+                    highestblockHash);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"BasicConsensusInfo{\"\n+                    + \"nodeNum='\"\n+                    + nodeNum\n+                    + '\\''\n+                    + \", nodeIndex='\"\n+                    + nodeIndex\n+                    + '\\''\n+                    + \", maxFaultyNodeNum='\"\n+                    + maxFaultyNodeNum\n+                    + '\\''\n+                    + \", sealerList=\"\n+                    + sealerList\n+                    + \", consensusedBlockNumber='\"\n+                    + consensusedBlockNumber\n+                    + '\\''\n+                    + \", highestblockNumber='\"\n+                    + highestblockNumber\n+                    + '\\''\n+                    + \", groupId='\"\n+                    + groupId\n+                    + '\\''\n+                    + \", protocolId='\"\n+                    + protocolId\n+                    + '\\''\n+                    + \", accountType='\"\n+                    + accountType\n+                    + '\\''\n+                    + \", cfgErr='\"\n+                    + cfgErr\n+                    + '\\''\n+                    + \", omitEmptyBlock='\"\n+                    + omitEmptyBlock\n+                    + '\\''\n+                    + \", nodeId='\"\n+                    + nodeId\n+                    + '\\''\n+                    + \", allowFutureBlocks='\"\n+                    + allowFutureBlocks\n+                    + '\\''\n+                    + \", connectedNodes='\"\n+                    + connectedNodes\n+                    + '\\''\n+                    + \", currentView='\"\n+                    + currentView\n+                    + '\\''\n+                    + \", toView='\"\n+                    + toView\n+                    + '\\''\n+                    + \", leaderFailed='\"\n+                    + leaderFailed\n+                    + '\\''\n+                    + \", highestblockHash='\"\n+                    + highestblockHash\n+                    + '\\''\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusInfo {\n+        private BasicConsensusInfo baseConsensusInfo;\n+        private List<ViewInfo> viewInfos;\n+\n+        public ConsensusInfo() {}\n+\n+        public ConsensusInfo(BasicConsensusInfo baseConsensusInfo, List<ViewInfo> viewInfos) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        public BasicConsensusInfo getBaseConsensusInfo() {\n+            return baseConsensusInfo;\n+        }\n+\n+        public void setBaseConsensusInfo(BasicConsensusInfo baseConsensusInfo) {\n+            this.baseConsensusInfo = baseConsensusInfo;\n+        }\n+\n+        public List<ViewInfo> getViewInfos() {\n+            return viewInfos;\n+        }\n+\n+        public void setViewInfos(List<ViewInfo> viewInfos) {\n+            this.viewInfos = viewInfos;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            ConsensusInfo that = (ConsensusInfo) o;\n+            return Objects.equals(baseConsensusInfo, that.baseConsensusInfo)\n+                    && Objects.equals(viewInfos, that.viewInfos);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(baseConsensusInfo, viewInfos);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ConsensusInfo{\"\n+                    + \"baseConsensusInfo=\"\n+                    + baseConsensusInfo\n+                    + \", viewInfos=\"\n+                    + viewInfos\n+                    + '}';\n+        }\n+    }\n+\n+    public static class ConsensusStatusDeserializer extends JsonDeserializer<ConsensusInfo> {\n+        private ObjectMapper objecMapper = ObjectMapperFactory.getObjectMapper();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg2OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358868", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:09Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());\n+\t\tint i = PrecompiledCommon.handleTransactionReceiptForCRUD(transactionReceipt);\n+\t\tassertEquals(i , 1);", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg3MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358870", "bodyText": "[PMD Java] JUnit assertions should include a message (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nJUnitAssertionsShouldIncludeMessage\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:09Z", "path": "src/integration-test/java/org/fisco/bcos/web3j/Web3jApITest.java", "diffHunk": "@@ -56,6 +56,12 @@ public void getBlockNumberCache() throws IOException {\n     assertNotNull(blockNumberCache);\n   }\n \n+  @Test\n+  public void getBlockNumberLimit() throws IOException {\n+    BigInteger blockLimit = web3j.getBlockLimit();\n+    assertNotNull(blockLimit);", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg3NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358874", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:09Z", "path": "src/integration-test/java/org/fisco/bcos/precompile/PermissionServiceTest.java", "diffHunk": "@@ -1,22 +1,26 @@\n package org.fisco.bcos.precompile;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n import org.fisco.bcos.TestBase;\n-import org.fisco.bcos.web3j.precompile.exception.PrecompileMessageException;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n import org.fisco.bcos.web3j.precompile.permission.PermissionService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class PermissionServiceTest extends TestBase {\n \n \n   private PermissionService permissionService = new PermissionService(web3j, credentials);\n \n-  @Test(expected= PrecompileMessageException.class) \n+  @Test\n   public void userTableManager() throws Exception {\n-  \t\n-\t  permissionService.grantUserTableManager(\"tt\", Common.TX_ORIGIN);\n-  \n+\t\tTransactionReceipt transactionReceipt = permissionService.grantAndRetReceipt(\"tt\", Common.TX_ORIGIN);\n+\t\tAssert.assertTrue(transactionReceipt.isStatusOK());", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg3OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358878", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -224,9 +229,8 @@ private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n \n                             if (structNode == null) {\n                                 errorReport(\n-                                        path + \"miss field value, field name: \" + field.getName(),\n-                                        template.getValueType().toString(),\n-                                        node.getNodeType().toString());\n+                                        path,\n+                                        \" Missing struct field, field name: \" + field.getName());", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg4MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358881", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABIObject.java", "diffHunk": "@@ -349,6 +350,10 @@ public String encode() {\n                             }\n                         case BYTES:\n                             {\n+                                if (bytesValue.getValue().length > 32) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg4Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358883", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg4NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358885", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg4Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358886", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/Keys.java", "diffHunk": "@@ -99,7 +102,27 @@ public static String getAddress(String publicKey) {\n             publicKeyNoPrefix =\n                     Strings.zeros(PUBLIC_KEY_LENGTH_IN_HEX - publicKeyNoPrefix.length())\n                             + publicKeyNoPrefix;\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX) {\n+            // do nothing\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_2) {\n+            // 130 length,should start with 03 or 04\n+            if (!(publicKeyNoPrefix.startsWith(\"03\") || publicKeyNoPrefix.startsWith(\"04\"))) {\n+                throw new IllegalArgumentException(\n+                        \" publicKey not start with \\\"03\\\" or \\\"04\\\", publicKey: \" + publicKey);\n+            }\n+            publicKeyNoPrefix = publicKeyNoPrefix.substring(2);\n+        } else if (publicKeyNoPrefix.length() == PUBLIC_KEY_LENGTH_IN_HEX_WITH_COMPRESS_FLAG_1) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg4OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358888", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:10Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/cns/CnsService.java", "diffHunk": "@@ -99,14 +99,16 @@ public String getAddressByContractNameAndVersion(String contractNameAndVersion)\n \n     public String registerCns(String name, String version, String address, String abi)\n             throws Exception {\n-        CNS cns = lookupResolver();\n-        if (version.length() > MAX_VERSION_LENGTH) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.VersionExceeds);\n-        }\n-        TransactionReceipt receipt = cns.insert(name, version, address, abi).send();\n+        TransactionReceipt receipt = registerCnsAndRetReceipt(name, version, address, abi);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt registerCnsAndRetReceipt(\n+            String name, String version, String address, String abi) throws Exception {\n+        CNS cns = lookupResolver();\n+        return cns.insert(name, version, address, abi).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg5MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358890", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/cns/CnsService.java", "diffHunk": "@@ -99,14 +99,16 @@ public String getAddressByContractNameAndVersion(String contractNameAndVersion)\n \n     public String registerCns(String name, String version, String address, String abi)\n             throws Exception {\n-        CNS cns = lookupResolver();\n-        if (version.length() > MAX_VERSION_LENGTH) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.VersionExceeds);\n-        }\n-        TransactionReceipt receipt = cns.insert(name, version, address, abi).send();\n+        TransactionReceipt receipt = registerCnsAndRetReceipt(name, version, address, abi);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt registerCnsAndRetReceipt(\n+            String name, String version, String address, String abi) throws Exception {\n+        CNS cns = lookupResolver();\n+        return cns.insert(name, version, address, abi).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg5MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358891", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/config/SystemConfigService.java", "diffHunk": "@@ -25,7 +25,12 @@ public SystemConfigService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String setValueByKey(String key, String value) throws Exception {\n-        TransactionReceipt receipt = systemConfig.setValueByKey(key, value).send();\n+        TransactionReceipt receipt = setValueByKeyAndRetReceipt(key, value);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n+\n+    public TransactionReceipt setValueByKeyAndRetReceipt(String key, String value)\n+            throws Exception {\n+        return systemConfig.setValueByKey(key, value).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg5Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358893", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/consensus/ConsensusService.java", "diffHunk": "@@ -26,34 +26,50 @@ public ConsensusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String addSealer(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> sealerList = web3j.getSealerList().send().getResult();\n-        if (sealerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.SealerList);\n-        }\n-        TransactionReceipt receipt = consensus.addSealer(nodeID).send();\n+        TransactionReceipt receipt = addSealerAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addSealerAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addSealer(nodeID).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODg5OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358898", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/consensus/ConsensusService.java", "diffHunk": "@@ -26,34 +26,50 @@ public ConsensusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String addSealer(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> sealerList = web3j.getSealerList().send().getResult();\n-        if (sealerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.SealerList);\n-        }\n-        TransactionReceipt receipt = consensus.addSealer(nodeID).send();\n+        TransactionReceipt receipt = addSealerAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addSealerAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addSealer(nodeID).send();\n+    }\n+\n     public String addObserver(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> observerList = web3j.getObserverList().send().getResult();\n-        if (observerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.ObserverList);\n-        }\n-        TransactionReceipt receipt = consensus.addObserver(nodeID).send();\n+        TransactionReceipt receipt = addObserverAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addObserverAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addObserver(nodeID).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODkwMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358901", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/consensus/ConsensusService.java", "diffHunk": "@@ -26,34 +26,50 @@ public ConsensusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String addSealer(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> sealerList = web3j.getSealerList().send().getResult();\n-        if (sealerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.SealerList);\n-        }\n-        TransactionReceipt receipt = consensus.addSealer(nodeID).send();\n+        TransactionReceipt receipt = addSealerAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addSealerAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addSealer(nodeID).send();\n+    }\n+\n     public String addObserver(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> observerList = web3j.getObserverList().send().getResult();\n-        if (observerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.ObserverList);\n-        }\n-        TransactionReceipt receipt = consensus.addObserver(nodeID).send();\n+        TransactionReceipt receipt = addObserverAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addObserverAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addObserver(nodeID).send();\n+    }\n+\n     public String removeNode(String nodeId) throws Exception {\n         List<String> groupPeers = web3j.getGroupPeers().send().getResult();\n         if (!groupPeers.contains(nodeId)) {\n             return PrecompiledCommon.transferToJson(PrecompiledCommon.GroupPeers);\n         }\n+        TransactionReceipt receipt = null;\n+        try {\n+            receipt = removeNodeAndRetReceipt(nodeId);\n+        } catch (RuntimeException e) {\n+            // firstly remove node that sdk connected to the node, return the request that present\n+            // susscces\n+            // because the exception is throwed by getTransactionReceipt, we need ignore it.\n+            if (e.getMessage().contains(\"Don't send requests to this group\")) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODkwNQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358905", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:11Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/consensus/ConsensusService.java", "diffHunk": "@@ -26,34 +26,50 @@ public ConsensusService(Web3j web3j, Credentials credentials) {\n     }\n \n     public String addSealer(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> sealerList = web3j.getSealerList().send().getResult();\n-        if (sealerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.SealerList);\n-        }\n-        TransactionReceipt receipt = consensus.addSealer(nodeID).send();\n+        TransactionReceipt receipt = addSealerAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addSealerAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addSealer(nodeID).send();\n+    }\n+\n     public String addObserver(String nodeID) throws Exception {\n-        if (!isValidNodeID(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.P2pNetwork);\n-        }\n-        List<String> observerList = web3j.getObserverList().send().getResult();\n-        if (observerList.contains(nodeID)) {\n-            return PrecompiledCommon.transferToJson(PrecompiledCommon.ObserverList);\n-        }\n-        TransactionReceipt receipt = consensus.addObserver(nodeID).send();\n+        TransactionReceipt receipt = addObserverAndRetReceipt(nodeID);\n         return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n     }\n \n+    public TransactionReceipt addObserverAndRetReceipt(String nodeID) throws Exception {\n+        return consensus.addObserver(nodeID).send();\n+    }\n+\n     public String removeNode(String nodeId) throws Exception {\n         List<String> groupPeers = web3j.getGroupPeers().send().getResult();\n         if (!groupPeers.contains(nodeId)) {\n             return PrecompiledCommon.transferToJson(PrecompiledCommon.GroupPeers);\n         }\n+        TransactionReceipt receipt = null;\n+        try {\n+            receipt = removeNodeAndRetReceipt(nodeId);\n+        } catch (RuntimeException e) {\n+            // firstly remove node that sdk connected to the node, return the request that present\n+            // susscces\n+            // because the exception is throwed by getTransactionReceipt, we need ignore it.\n+            if (e.getMessage().contains(\"Don't send requests to this group\")) {\n+                return PrecompiledCommon.transferToJson(0);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        return PrecompiledCommon.handleTransactionReceipt(receipt, web3j);\n+    }\n+\n+    public TransactionReceipt removeNodeAndRetReceipt(String nodeId) throws Exception {\n+        return consensus.remove(nodeId).send();", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODkwNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358907", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:12Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/crud/CRUDService.java", "diffHunk": "@@ -64,6 +70,21 @@ public int insert(Table table, Entry entry) throws Exception {\n         return PrecompiledCommon.handleTransactionReceiptForCRUD(receipt);\n     }\n \n+    public void insert(Table table, Entry entry, TransactionSucCallback callback) throws Exception {\n+\n+        if (table.getKey().length() > PrecompiledCommon.TABLE_KEY_MAX_LENGTH) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODkxMQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358911", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:12Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/crud/CRUDService.java", "diffHunk": "@@ -64,6 +70,21 @@ public int insert(Table table, Entry entry) throws Exception {\n         return PrecompiledCommon.handleTransactionReceiptForCRUD(receipt);\n     }\n \n+    public void insert(Table table, Entry entry, TransactionSucCallback callback) throws Exception {\n+\n+        if (table.getKey().length() > PrecompiledCommon.TABLE_KEY_MAX_LENGTH) {\n+            throw new PrecompileMessageException(\n+                    \"The value of the table key exceeds the maximum limit(\"\n+                            + PrecompiledCommon.TABLE_KEY_MAX_LENGTH\n+                            + \").\");\n+        }\n+        String entryJsonStr =\n+                ObjectMapperFactory.getObjectMapper().writeValueAsString(entry.getFields());", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1ODkxMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/713#discussion_r497358913", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-09-30T09:09:12Z", "path": "src/main/java/org/fisco/bcos/web3j/precompile/crud/CRUDService.java", "diffHunk": "@@ -87,6 +108,30 @@ public int update(Table table, Entry entry, Condition condition) throws Exceptio\n         return PrecompiledCommon.handleTransactionReceiptForCRUD(receipt);\n     }\n \n+    public void update(\n+            Table table, Entry entry, Condition condition, TransactionSucCallback callback)\n+            throws Exception {\n+\n+        if (table.getKey().length() > PrecompiledCommon.TABLE_KEY_MAX_LENGTH) {", "originalCommit": "14b2987801cbc9d69fb8de19e91a8ecd3ddda385", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}