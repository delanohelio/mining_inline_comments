{"pr_number": 731, "pr_title": "sync 2.6.3 to master", "pr_createdAt": "2020-12-30T02:03:50Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/731", "timeline": [{"oid": "cd7208b908ebc0cdcb87156ee0a8a0345ff8e912", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cd7208b908ebc0cdcb87156ee0a8a0345ff8e912", "message": "update netty-all to 4.1.53 and update netty-sm-ssl-context to 1.2.0", "committedDate": "2020-10-22T02:22:54Z", "type": "commit"}, {"oid": "d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "message": "add getBlockTransactionReceipts and getBlockTransactionReceiptsByHash", "committedDate": "2020-10-22T12:07:17Z", "type": "commit"}, {"oid": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "message": "update getBlockTransactionReceipts and getBlockTransactionReceiptsByHash inteface", "committedDate": "2020-10-22T12:45:59Z", "type": "commit"}, {"oid": "8266f302ab29804693e064e0b6ae4c01ad3c24b7", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/8266f302ab29804693e064e0b6ae4c01ad3c24b7", "message": "Merge pull request #715 from ywy2090/release-2.7.0\n\nupdate netty-all to 4.1.53 and update netty-sm-ssl-context to 1.2.0", "committedDate": "2020-10-23T02:21:45Z", "type": "commit"}, {"oid": "93997aa3faaf02b03f77e9749eaa13167bce589a", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/93997aa3faaf02b03f77e9749eaa13167bce589a", "message": "add serialize for Block", "committedDate": "2020-11-17T13:03:11Z", "type": "commit"}, {"oid": "ef80169806bcd00f3945698e909946182da6b7dc", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ef80169806bcd00f3945698e909946182da6b7dc", "message": "add switch for openssl engine", "committedDate": "2020-11-19T11:38:16Z", "type": "commit"}, {"oid": "86bad7d05da2477308d9bc9d7063e97ea10d732f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/86bad7d05da2477308d9bc9d7063e97ea10d732f", "message": "Merge pull request #720 from ywy2090/release-2.7.0\n\nRelease 2.7.0", "committedDate": "2020-11-19T11:48:07Z", "type": "commit"}, {"oid": "44cc605ebd7a9283083dcea5d83cb46da80e72a2", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/44cc605ebd7a9283083dcea5d83cb46da80e72a2", "message": "fix getBlockHeader", "committedDate": "2020-11-30T08:47:50Z", "type": "commit"}, {"oid": "e5856e82137c4a36040d479b318151e7728f6d4d", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/e5856e82137c4a36040d479b318151e7728f6d4d", "message": "Merge pull request #721 from ywy2090/release-2.7.0\n\nfix getBlockHeader", "committedDate": "2020-11-30T08:50:27Z", "type": "commit"}, {"oid": "6d01e402a63dd40fbe082b4f991b09e3da3e9d24", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/6d01e402a63dd40fbe082b4f991b09e3da3e9d24", "message": "modify log level", "committedDate": "2020-12-07T12:34:05Z", "type": "commit"}, {"oid": "84c921b0e093f87bdbbc4dc8edcd1362ac1c188b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/84c921b0e093f87bdbbc4dc8edcd1362ac1c188b", "message": "add sm2 sign verify interface", "committedDate": "2020-12-08T15:28:27Z", "type": "commit"}, {"oid": "ef24bbe8099dee9f4a33f6e6b4f944c6a7fff69d", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ef24bbe8099dee9f4a33f6e6b4f944c6a7fff69d", "message": "Merge pull request #722 from ywy2090/release-2.7.0\n\nadd sm2 sign verify interface", "committedDate": "2020-12-08T15:30:18Z", "type": "commit"}, {"oid": "ac1ba1f9916b7ac4c934a26168ab62cdf172f6d9", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/ac1ba1f9916b7ac4c934a26168ab62cdf172f6d9", "message": "rename getReceiptsByBlockHashAndRange and getReceiptsByBlockNumberAndRange", "committedDate": "2020-12-11T01:28:33Z", "type": "commit"}, {"oid": "e82c11bce36f19229319dc7da2bfa5934f183c5a", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/e82c11bce36f19229319dc7da2bfa5934f183c5a", "message": "Merge pull request #724 from ywy2090/release-2.7.0\n\nrename getReceiptsByBlockHashAndRange and getReceiptsByBlockNumberAnd\u2026", "committedDate": "2020-12-11T01:30:06Z", "type": "commit"}, {"oid": "9585340c8b7ac3cbbc5fbcb452284051f9f18fa8", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/9585340c8b7ac3cbbc5fbcb452284051f9f18fa8", "message": "getBlockReceipts bug fix", "committedDate": "2020-12-11T04:40:43Z", "type": "commit"}, {"oid": "46346ff706f8eb49aff6c3de266c8ccbaf5ba940", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/46346ff706f8eb49aff6c3de266c8ccbaf5ba940", "message": "Merge pull request #726 from ywy2090/release-2.7.0\n\ngetBlockReceipts bug fix", "committedDate": "2020-12-11T04:41:57Z", "type": "commit"}, {"oid": "47f3b6581d0322e1a74b06fc86d8df9c383b9a66", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/47f3b6581d0322e1a74b06fc86d8df9c383b9a66", "message": "add CallResult to ContractCallException", "committedDate": "2020-12-23T03:27:56Z", "type": "commit"}, {"oid": "e5aa0b528c15035aa314bcfac686dd1de1e7d69c", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/e5aa0b528c15035aa314bcfac686dd1de1e7d69c", "message": "add support for jdk15", "committedDate": "2020-12-23T06:13:25Z", "type": "commit"}, {"oid": "06a18c6708eb8d3691c147d2137545b4ffb0ecce", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/06a18c6708eb8d3691c147d2137545b4ffb0ecce", "message": "Merge pull request #729 from ywy2090/release-2.7.0\n\nadd CallResult to ContractCallException", "committedDate": "2020-12-23T06:14:42Z", "type": "commit"}, {"oid": "de20b47e697b2fa0531eb393d78e7179063a494f", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/de20b47e697b2fa0531eb393d78e7179063a494f", "message": "update version number", "committedDate": "2020-12-23T06:20:12Z", "type": "commit"}, {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/33655c8451cf14e7c016aab6859a9b89fdc3b72a", "message": "Merge pull request #730 from ywy2090/release-2.7.0\n\nupdate version number", "committedDate": "2020-12-23T06:22:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911145", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\n+                    \" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());\n+\n+        } catch (Exception e) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911147", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911148", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911149", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911150", "bodyText": "[PMD Java] Overridable method 'init' called during object construction (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nConstructorCallsOverridableMethod\nError Prone\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911151", "bodyText": "[PMD Java] High amount of different objects as members denotes a high coupling (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCouplingBetweenObjects\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#couplingbetweenobjects\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:39Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911152", "bodyText": "[PMD Java] The class 'Service' has a total cyclomatic complexity of 184 (highest 17). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:40Z", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911154", "bodyText": "[PMD Java] The class 'ChannelConnections' has a total cyclomatic complexity of 133 (highest 23). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:40Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911155", "bodyText": "[PMD Java] The method 'startConnect()' has a cyclomatic complexity of 11. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:40Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -387,7 +396,8 @@ public void startConnect() throws Exception {\n                     @Override\n                     public void initChannel(SocketChannel ch) throws Exception {\n                         /*\n-                         * Each connection is fetched from the socketChannel, using the new handler connection information\n+                         * Each connection is fetched from the socketChannel, using the new", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911156", "bodyText": "[PMD Java] The method 'initSslContext()' has a cyclomatic complexity of 23. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:40Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -559,6 +569,11 @@ private SslContext initSslContext() throws SSLException {\n         SslContext sslCtx;\n         try {\n \n+            if (!isEnableOpenSSL()) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911157", "bodyText": "[PMD Java] The method 'send(Request, Class)' has a cyclomatic complexity of 21. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:40Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/channel/ChannelEthereumService.java", "diffHunk": "@@ -92,26 +92,36 @@ public ChannelEthereumService() {\n                     }\n \n                     if (StatusCode.RevertInstruction.equals(callResult.getStatus())) {\n-                        throw new ContractCallException(\n-                                \"The execution of the contract rolled back\"\n-                                        + (revertMessage.getValue1()\n-                                                ? \", \" + revertMessage.getValue2()\n-                                                : \"\")\n-                                        + \".\");\n+                        ContractCallException contractCallException =", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911159", "bodyText": "[PMD Java] The class 'JsonRpc2_0Web3j' has a total cyclomatic complexity of 87 (highest 3). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:41Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -357,6 +358,44 @@ public BigInteger getBlockLimit() {\n                 TransactionReceiptWithProof.class);\n     }\n \n+    @Override", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911162", "bodyText": "[PMD Java] The class 'Block' has a total cyclomatic complexity of 107 (highest 40). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:41Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -44,7 +48,10 @@ public Block getBlock() {\n         private String gasLimit;\n         private String gasUsed;\n         private String timestamp;\n+", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911166", "bodyText": "[PMD Java] The class 'ContractABIDefinition' is suspected to be a Data Class (WOC=27.273%, NOPA=0, NOAM=8, WMC=14) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:41Z", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ContractABIDefinition.java", "diffHunk": "@@ -65,8 +65,8 @@ public void addFunction(String name, ABIDefinition abiDefinition) {\n         String methodId = abiDefinition.getMethodId();\n         methodIDToFunctions.put(methodId, abiDefinition);\n \n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\n+        if (logger.isTraceEnabled()) {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911169", "bodyText": "[PMD Java] The class 'BlockHeader' is suspected to be a Data Class (WOC=11.429%, NOPA=0, NOAM=30, WMC=38) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:41Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlockHeader.java", "diffHunk": "@@ -51,7 +52,7 @@ public void setSignature(String signature) {\n         private String gasUsed;\n         private String hash;\n         private String logsBloom;\n-        private BigInteger number;\n+        private String number;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911172", "bodyText": "[PMD Java] The class 'BlockTransactionReceiptsInfo' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=5) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()\n+                        .readValue(jsonData, BlockTransactionReceiptsInfo.class);\n+\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\n+                    \" base64 pack size: {}, unzip size: {}, json size: {}\",\n+                    base64Data.length(),\n+                    zipData.length,\n+                    jsonData.length);\n+            logger.trace(\" block receipts: {}\", blockTransactionReceiptsInfo);\n+        }\n+\n+        return blockTransactionReceiptsInfo;\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911174", "bodyText": "[PMD Java] The class 'BlockInfo' is suspected to be a Data Class (WOC=11.111%, NOPA=0, NOAM=8, WMC=9) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()\n+                        .readValue(jsonData, BlockTransactionReceiptsInfo.class);\n+\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\n+                    \" base64 pack size: {}, unzip size: {}, json size: {}\",\n+                    base64Data.length(),\n+                    zipData.length,\n+                    jsonData.length);\n+            logger.trace(\" block receipts: {}\", blockTransactionReceiptsInfo);\n+        }\n+\n+        return blockTransactionReceiptsInfo;\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {\n+        private BlockInfo blockInfo;\n+        private List<TransactionReceipt> transactionReceipts;\n+\n+        public BlockInfo getBlockInfo() {\n+            return blockInfo;\n+        }\n+\n+        public void setBlockInfo(BlockInfo blockInfo) {\n+            this.blockInfo = blockInfo;\n+        }\n+\n+        public List<TransactionReceipt> getTransactionReceipts() {\n+            return transactionReceipts;\n+        }\n+\n+        public void setTransactionReceipts(List<TransactionReceipt> transactionReceipts) {\n+            this.transactionReceipts = transactionReceipts;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ReceiptsInfo{\"\n+                    + \"blockInfo=\"\n+                    + blockInfo\n+                    + \", transactionReceipts=\"\n+                    + transactionReceipts\n+                    + '}';\n+        }\n+    }\n+\n+    /** The transaction receipts common fields of the block */\n+    public static class BlockInfo {", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911177", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotTerminateVM\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#donotterminatevm\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911178", "bodyText": "[PMD Java] Avoid really long classes. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveClassLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveclasslength\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911180", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911182", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:42Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911184", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "diffHunk": "@@ -12,6 +12,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911187", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911190", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -387,7 +396,8 @@ public void startConnect() throws Exception {\n                     @Override\n                     public void initChannel(SocketChannel ch) throws Exception {\n                         /*\n-                         * Each connection is fetched from the socketChannel, using the new handler connection information\n+                         * Each connection is fetched from the socketChannel, using the new", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911192", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911195", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911197", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "diffHunk": "@@ -12,6 +12,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911199", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:43Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTIwMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911202", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:44Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -1,11 +1,15 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.core.JsonGenerator;", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTIwMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911203", "bodyText": "[PMD Java] Possible God Class (WMC=184, ATFD=527, TCC=21.283%) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nGodClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#godclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-12-30T02:04:44Z", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "originalCommit": "33655c8451cf14e7c016aab6859a9b89fdc3b72a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}