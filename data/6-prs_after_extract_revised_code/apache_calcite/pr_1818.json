{"pr_number": 1818, "pr_title": "[CALCITE-3809] RexSimplify simplifies nondeterministic function incorrectly", "pr_createdAt": "2020-02-20T14:59:10Z", "pr_url": "https://github.com/apache/calcite/pull/1818", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NjI0NA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382056244", "bodyText": "RexUtil.isDeterministic walks over the full expression tree which might result in O(N^2) behaviors. Did you mean call.getOperator().isDeterministic() here?", "author": "vlsi", "createdAt": "2020-02-20T15:03:51Z", "path": "core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java", "diffHunk": "@@ -128,6 +128,10 @@ public RexAnalyzer(RexNode e, RelOptPredicateList predicates) {\n     }\n \n     @Override public Void visitCall(RexCall call) {\n+      if (!RexUtil.isDeterministic(call)) {", "originalCommit": "46c2a3c276cb3bc0c81e146f16c22fb311e9ade8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1OTg1OA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382059858", "bodyText": "Oops, you're right.", "author": "chunweilei", "createdAt": "2020-02-20T15:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA2NDMyOQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382064329", "bodyText": "There's a question what to do with AND(randbool(), randbool(), randbool(), randbool()) :-/", "author": "vlsi", "createdAt": "2020-02-20T15:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NDMwMA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382084300", "bodyText": "Note that VariableCollector is instance of RexVisitorImpl. So it will visit the operand and then return null.", "author": "chunweilei", "createdAt": "2020-02-20T15:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NjI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "50fa47d6393301c834b92bfd4db194ac5318ac03", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\nindex 76558d8bb..16f3822fe 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n\n@@ -128,7 +128,7 @@ public RexAnalyzer(RexNode e, RelOptPredicateList predicates) {\n     }\n \n     @Override public Void visitCall(RexCall call) {\n-      if (!RexUtil.isDeterministic(call)) {\n+      if (!call.getOperator().isDeterministic()) {\n         ++unsupportedCount;\n         return null;\n       }\n"}}, {"oid": "50fa47d6393301c834b92bfd4db194ac5318ac03", "url": "https://github.com/apache/calcite/commit/50fa47d6393301c834b92bfd4db194ac5318ac03", "message": "[CALCITE-3809] RexSimplify simplifies nondeterministic function incorrectly", "committedDate": "2020-02-20T15:11:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382071096", "bodyText": "Can you please clarify why do you think RexInterpreter can't handle non-deterministic functions?", "author": "vlsi", "createdAt": "2020-02-20T15:25:33Z", "path": "core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java", "diffHunk": "@@ -128,6 +128,10 @@ public RexAnalyzer(RexNode e, RelOptPredicateList predicates) {\n     }\n \n     @Override public Void visitCall(RexCall call) {\n+      if (!call.getOperator().isDeterministic()) {\n+        ++unsupportedCount;", "originalCommit": "50fa47d6393301c834b92bfd4db194ac5318ac03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4MDAxMQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382080011", "bodyText": "It throws exception without these codes.", "author": "chunweilei", "createdAt": "2020-02-20T15:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NTM5NQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382085395", "bodyText": "Does it? Can you please clarify what is the exception?", "author": "vlsi", "createdAt": "2020-02-20T15:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MzE0MA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382343140", "bodyText": "Actually RexInterpreter supports a few functions[1].\njava.lang.IllegalArgumentException: unbound: NDC()\n\tat org.apache.calcite.rex.RexInterpreter.unbound(RexInterpreter.java:71)\n\tat org.apache.calcite.rex.RexInterpreter.visitCall(RexInterpreter.java:203)\n\tat org.apache.calcite.rex.RexInterpreter.visitCall(RexInterpreter.java:47)\n\tat org.apache.calcite.rex.RexCall.accept(RexCall.java:288)\n\tat org.apache.calcite.rex.RexInterpreter.visitCall(RexInterpreter.java:129)\n\tat org.apache.calcite.rex.RexInterpreter.visitCall(RexInterpreter.java:47)\n\tat org.apache.calcite.rex.RexCall.accept(RexCall.java:288)\n\tat org.apache.calcite.rex.RexInterpreter.evaluate(RexInterpreter.java:63)\n\tat org.apache.calcite.rex.RexSimplify.verify(RexSimplify.java:1796)\n\tat org.apache.calcite.rex.RexSimplify.simplifyUnknownAs(RexSimplify.java:233)\n\tat org.apache.calcite.rex.RexProgramTestBase.checkSimplify3_(RexProgramTestBase.java:127)\n\tat org.apache.calcite.rex.RexProgramTestBase.checkSimplifyUnchanged(RexProgramTestBase.java:92)\n\tat org.apache.calcite.rex.RexProgramTest.testSimplifyNonDeterministicFunction(RexProgramTest.java:2569)\n\n[1] https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rex/RexInterpreter.java#L126-L204", "author": "chunweilei", "createdAt": "2020-02-21T00:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMTM3Mg==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382801372", "bodyText": "If it can't handle lots of things that is fine. It is not fine to exclude isDeterministic here because one day rand() function might get supported in RexAnalyzer, and it would be hard to tell why it is not used.\nHow about adding a method like RexInterpreter#isSupported(RexCall)?", "author": "vlsi", "createdAt": "2020-02-21T20:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTkxMw==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382881913", "bodyText": "It might be better to put isSupported(RexCall) into  VariableCollector  which is used to counts features (such as CAST) that  RexInterpreter cannot handle[1].\n[1] https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java#L105-L109.", "author": "chunweilei", "createdAt": "2020-02-22T03:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "42e38d71b8477fcf43b2cd17953ea363479f27e7", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\nindex 16f3822fe..dea076c96 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n\n@@ -128,17 +128,11 @@ public RexAnalyzer(RexNode e, RelOptPredicateList predicates) {\n     }\n \n     @Override public Void visitCall(RexCall call) {\n-      if (!call.getOperator().isDeterministic()) {\n+      if (!RexInterpreter.SUPPORTED_SQL_KIND.contains(call.getKind())) {\n         ++unsupportedCount;\n         return null;\n       }\n-      switch (call.getKind()) {\n-      case CAST:\n-        ++unsupportedCount;\n-        return null;\n-      default:\n-        return super.visitCall(call);\n-      }\n+      return super.visitCall(call);\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382071527", "bodyText": "Is deep check required here? Doesn't it produce O(N^2) behaviors?", "author": "vlsi", "createdAt": "2020-02-20T15:26:10Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -323,7 +323,7 @@ private RexNode simplifyComparison(RexCall e, RexUnknownAs unknownAs) {\n     // Simplify \"x <op> x\"\n     final RexNode o0 = operands.get(0);\n     final RexNode o1 = operands.get(1);\n-    if (o0.equals(o1)) {\n+    if (o0.equals(o1) && RexUtil.isDeterministic(o0)) {", "originalCommit": "50fa47d6393301c834b92bfd4db194ac5318ac03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4Mjc4Mg==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382082782", "bodyText": "IMO, yes, it is necessary here. It cannot be simplified if there is nondeterministic call, i.e. abs(abs(abs(rand())))=abs(abs(abs(rand()))).", "author": "chunweilei", "createdAt": "2020-02-20T15:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyNTYxMg==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382125612", "bodyText": "Is the implementation linear with regards to the number of nodes in the tree?", "author": "vlsi", "createdAt": "2020-02-20T16:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MTEyOQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382341129", "bodyText": "Yes for RexUtil.isDeterministic. Are you worried about the performance of RexUtil.isDeterministic? Or do you think it is not the right solution?", "author": "chunweilei", "createdAt": "2020-02-21T00:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMzc2OQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382803769", "bodyText": "Suppose the expression is always deterministic. It looks like \"deep isDeterministic\" would fire too often, and it could ruin the performance of RexSimplify for perfectly valid deterministic cases. That is not how the thing should work.\nIf I were you, I would try to answer the following question:\n\nIs it legitimate to simplify at all if non-deterministic functions are known to exist in the tree.\nFor instance: AND(rand(), true, true, rand())\nWhat do we want to do with #1 (e.g. keep unsimplified, or simplify deterministic subexpressions)\nUse a single pass to find non-deterministic expressions. A single pass is enough to tell if the expression is fully deterministic or not. If it is, then you don't need to check for non-deterministic expressions later.\n\nI don't like adding non-trivial logic inside RexSimplify, because it is really hard to tell if the resulting performance is linear or not.", "author": "vlsi", "createdAt": "2020-02-21T21:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTQwMQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r382881401", "bodyText": "Thank you for your clarification. I kind of understand your point. But I am not convinced. Currently, you can find several places in RexSimplify where RexUtil.isDeterministic is used[1][2][3], which I think is necessary. Do they ruin the performance of RexSimplify for valid deterministic cases? I don't think so.\nNow for the 1st question, it can be simplified though non-deterministic functions exist. For instance, AND(rand()=rand(), true, true) can be simplified to rand()=rand().\n[1]https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rex/RexSimplify.java#L1385\n[2]https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rex/RexSimplify.java#L1542\n[3]https://github.com/apache/calcite/blob/master/core/src/main/java/org/apache/calcite/rex/RexSimplify.java#L2251", "author": "chunweilei", "createdAt": "2020-02-22T03:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNjE0OQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384436149", "bodyText": "@vlsi do we reach a consensus about this point? Appreciate your review.", "author": "chunweilei", "createdAt": "2020-02-26T11:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0NDA2MA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384444060", "bodyText": "Do they ruin the performance of RexSimplify for valid deterministic cases? I don't think so.\n\nDo you have proof of that?\nOnce again: adding RexUtil.isDeterministic inside every RexSimplify method would easily produce O(N^2) behaviour.\nSo I see the following ways to proceed:\n\nYou add a single top-level check that walks over the expression tree and just bails out in case it sees a non-deterministic expression\nYou provide verifiable proof that your change never results in O(N^2) behaviours\nYou ignore my reviews and commit as is\n\nI agree it is important to fix the functional issue \"wrong results when a non-deterministic function is present\". However, it is not acceptable to solve a functional issue by dramatically slowing down the processing, especially, when the slowdown affects all the cases.\nI would rather accept a trivial and understandable solution like skip simplification if non-deterministic is present rather than an arcane scatter RexUtil.isDeterministic all over the place until it works.\nIf you want to implement a clever approach (e.g. that would simplify AND(rand()=rand(), false, false) to AND(rand()=rand(), false)) it is fine. However, the implementation should still be linear with regard to the expression tree size.\nPS. Of course, RexSimplify might contain ill calls to RexUtil.isDeterministic. That does not automatically allow adding new slow RexUtil.isDeterministic checks all over the place. I would consider the existing calls to be bugs that need to be fixed.", "author": "vlsi", "createdAt": "2020-02-26T11:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5MzcxMw==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384493713", "bodyText": "Do you notice that RexUtil.isDeterministic check is only called when simplifying \"x <op> x ?\nWill it have such a significant impact as you said? I have a doubt about it.", "author": "chunweilei", "createdAt": "2020-02-26T13:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NjA5Mw==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384496093", "bodyText": "How about ((rand()=rand())=(rand()=rand()))=((rand()=rand())=(rand()=rand())) denial of service attack?\nI don't really want to spend your time, so please proceed with whatever way you feel is right.", "author": "vlsi", "createdAt": "2020-02-26T13:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxODIxNQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384518215", "bodyText": "I believe we're not arguing. Both of us are trying to find the best way. Appreciate your time and attention.", "author": "chunweilei", "createdAt": "2020-02-26T14:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTUyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NTE3NA==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384355174", "bodyText": "Does it belong to RexInterpreter?", "author": "vlsi", "createdAt": "2020-02-26T09:04:11Z", "path": "core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java", "diffHunk": "@@ -41,6 +43,16 @@\n   public final List<RexNode> variables;\n   public final int unsupportedCount;\n \n+  public static final EnumSet<SqlKind> SUPPORTED_SQL_KIND =\n+      EnumSet.of(SqlKind.IS_NOT_DISTINCT_FROM, SqlKind.EQUALS, SqlKind.IS_DISTINCT_FROM,", "originalCommit": "488ac31bd1df89ecd7b2a8a8736eada3cfa0ef1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxODQwMQ==", "url": "https://github.com/apache/calcite/pull/1818#discussion_r384418401", "bodyText": "I am not very strong about it. Will remove it to RexInterpreter.", "author": "chunweilei", "createdAt": "2020-02-26T10:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1NTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "42e38d71b8477fcf43b2cd17953ea363479f27e7", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\nindex 5857c65aa..dea076c96 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java\n\n@@ -43,16 +41,6 @@\n   public final List<RexNode> variables;\n   public final int unsupportedCount;\n \n-  public static final EnumSet<SqlKind> SUPPORTED_SQL_KIND =\n-      EnumSet.of(SqlKind.IS_NOT_DISTINCT_FROM, SqlKind.EQUALS, SqlKind.IS_DISTINCT_FROM,\n-          SqlKind.NOT_EQUALS, SqlKind.GREATER_THAN, SqlKind.GREATER_THAN_OR_EQUAL,\n-          SqlKind.LESS_THAN, SqlKind.LESS_THAN_OR_EQUAL, SqlKind.AND, SqlKind.OR,\n-          SqlKind.NOT, SqlKind.CASE, SqlKind.IS_TRUE, SqlKind.IS_NOT_TRUE,\n-          SqlKind.IS_FALSE, SqlKind.IS_NOT_FALSE, SqlKind.PLUS_PREFIX,\n-          SqlKind.MINUS_PREFIX, SqlKind.PLUS, SqlKind.MINUS, SqlKind.TIMES,\n-          SqlKind.DIVIDE, SqlKind.COALESCE, SqlKind.CEIL,\n-          SqlKind.FLOOR, SqlKind.EXTRACT);\n-\n   /** Creates a RexAnalyzer. */\n   public RexAnalyzer(RexNode e, RelOptPredicateList predicates) {\n     this.e = e;\n"}}, {"oid": "42e38d71b8477fcf43b2cd17953ea363479f27e7", "url": "https://github.com/apache/calcite/commit/42e38d71b8477fcf43b2cd17953ea363479f27e7", "message": "address comments", "committedDate": "2020-02-26T10:54:14Z", "type": "forcePushed"}, {"oid": "f756c888629dfd50a8bfb37123a56539255ac81b", "url": "https://github.com/apache/calcite/commit/f756c888629dfd50a8bfb37123a56539255ac81b", "message": "[CALCITE-3809] RexSimplify simplifies nondeterministic function incorrectly", "committedDate": "2020-03-06T09:35:30Z", "type": "commit"}, {"oid": "f756c888629dfd50a8bfb37123a56539255ac81b", "url": "https://github.com/apache/calcite/commit/f756c888629dfd50a8bfb37123a56539255ac81b", "message": "[CALCITE-3809] RexSimplify simplifies nondeterministic function incorrectly", "committedDate": "2020-03-06T09:35:30Z", "type": "forcePushed"}]}