{"pr_number": 2037, "pr_title": "[CALCITE-3834] Support AntiJoin in EnumerableMergeJoin", "pr_createdAt": "2020-06-19T09:02:07Z", "pr_url": "https://github.com/apache/calcite/pull/2037", "timeline": [{"oid": "ae1353fe87c44785357da3d8be80bb12a35afdee", "url": "https://github.com/apache/calcite/commit/ae1353fe87c44785357da3d8be80bb12a35afdee", "message": "[CALCITE-3834] Support AntiJoin in EnumerableMergeJoin", "committedDate": "2020-06-19T09:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTAxMQ==", "url": "https://github.com/apache/calcite/pull/2037#discussion_r447379011", "bodyText": "1 trivial question:\nIf it is true, does it mean we have enumerated all the right tuples, but there are still some tuple remaining (not yet matched) on the left relation?", "author": "hsyuan", "createdAt": "2020-06-30T02:59:46Z", "path": "linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java", "diffHunk": "@@ -3878,6 +3879,8 @@ public void remove() {\n     private final Comparator<TKey> comparator;\n     private boolean done;\n     private Enumerator<TResult> results;\n+    // only used for ANTI join: if right input is over, all remaining elements from left are results\n+    private boolean remainingLeft;", "originalCommit": "ae1353fe87c44785357da3d8be80bb12a35afdee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MjI2Nw==", "url": "https://github.com/apache/calcite/pull/2037#discussion_r447452267", "bodyText": "Correct, it means the right input is over, but the left is not; hence all remaining tuples from the left relation are results for the anti-join", "author": "rubenada", "createdAt": "2020-06-30T06:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTAxMQ=="}], "type": "inlineReview", "revised_code": null}]}