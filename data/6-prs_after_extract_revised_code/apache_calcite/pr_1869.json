{"pr_number": 1869, "pr_title": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "pr_createdAt": "2020-03-23T23:30:25Z", "pr_url": "https://github.com/apache/calcite/pull/1869", "timeline": [{"oid": "2df439464cac8321e5ed3c98d278c57193501dbb", "url": "https://github.com/apache/calcite/commit/2df439464cac8321e5ed3c98d278c57193501dbb", "message": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "committedDate": "2020-03-23T23:54:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0MzY2MA==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396943660", "bodyText": "How should we validate the rule description pattern now ?", "author": "danny0405", "createdAt": "2020-03-24T07:21:42Z", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -130,24 +125,15 @@ public void checkCancel() {\n    *\n    * @param rule Rule\n    */\n-  protected void mapRuleDescription(RelOptRule rule) {\n-    // Check that there isn't a rule with the same description,\n-    // also validating description string.\n-\n+  protected boolean mapRuleDescription(RelOptRule rule) {\n+    // Check that there isn't a rule with the same description\n     final String description = rule.toString();\n     assert description != null;\n-    assert !description.contains(\"$\")\n-        : \"Rule's description should not contain '$': \"\n-        + description;\n-    assert !INTEGER_PATTERN.matcher(description).matches()\n-        : \"Rule's description should not be an integer: \"", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMjQ1MA==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397312450", "bodyText": "When creating the rule", "author": "hsyuan", "createdAt": "2020-03-24T16:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk0MzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\nindex 7547d4b4a..5309a006a 100644\n--- a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n\n@@ -120,12 +120,11 @@ public void checkCancel() {\n     }\n   }\n \n-  /**\n-   * Registers a rule's description.\n-   *\n-   * @param rule Rule\n-   */\n-  protected boolean mapRuleDescription(RelOptRule rule) {\n+  public List<RelOptRule> getRules() {\n+    return ImmutableList.copyOf(mapDescToRule.values());\n+  }\n+\n+  public boolean addRule(RelOptRule rule) {\n     // Check that there isn't a rule with the same description\n     final String description = rule.toString();\n     assert description != null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396987477", "bodyText": "With this change the map becomes the main data structure holding the rules so I think the Javadoc should be updated to reflect this. Increasing the visibility of the field makes it public API; it might be better to keep this private and rely on public/protected methods to recover the necessary info.", "author": "zabetak", "createdAt": "2020-03-24T08:51:10Z", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -44,18 +44,13 @@\n  * Abstract base for implementations of the {@link RelOptPlanner} interface.\n  */\n public abstract class AbstractRelOptPlanner implements RelOptPlanner {\n-  //~ Static fields/initializers ---------------------------------------------\n-\n-  /** Regular expression for integer. */\n-  private static final Pattern INTEGER_PATTERN = Pattern.compile(\"[0-9]+\");\n-\n   //~ Instance fields --------------------------------------------------------\n \n   /**\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  private final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxOTYyOA==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397319628", "bodyText": "I think we may need to change it to LinkedHashMap to be consistent with the requirement of HepPlanner.", "author": "hsyuan", "createdAt": "2020-03-24T17:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Mjg4OQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398182889", "bodyText": "It turns out we still need it to be protected to avoid copying.", "author": "hsyuan", "createdAt": "2020-03-25T21:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMDE4Ng==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398410186", "bodyText": "I think that in most cases the number of rules is not very big so I was thinking that copying vs. mapDescToRule.values() is not going to have significant performance overhead in the planning phase, thus, I tend to prefer better encapsulation. Having that said, I do not have any concrete measures to support my claims (just instinct that could be wrong) :)", "author": "zabetak", "createdAt": "2020-03-26T09:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTI2MQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r399585261", "bodyText": "I agree the rules is not very big. But in onNewClass, every time we add a new logical/physical operator we have to copy it. It will copy N times depends on how many operators you have. Though not a significant overhead, but I think we still need to avoid multiple times copy.", "author": "hsyuan", "createdAt": "2020-03-27T23:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNzQ3Ng==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r399717476", "bodyText": "I'm fine with any option so I am leaving the final decision up to you :)", "author": "zabetak", "createdAt": "2020-03-28T22:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\nindex 7547d4b4a..5309a006a 100644\n--- a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n\n@@ -50,7 +50,7 @@\n    * Maps rule description to rule, just to ensure that rules' descriptions\n    * are unique.\n    */\n-  protected final Map<String, RelOptRule> mapDescToRule = new HashMap<>();\n+  protected final Map<String, RelOptRule> mapDescToRule = new LinkedHashMap<>();\n \n   protected final RelOptCostFactory costFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTE2Nw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396989167", "bodyText": "The method now basically registers the rule to the planner so it might be better to rename this entirely to addRule.", "author": "zabetak", "createdAt": "2020-03-24T08:54:00Z", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -130,24 +125,15 @@ public void checkCancel() {\n    *\n    * @param rule Rule\n    */\n-  protected void mapRuleDescription(RelOptRule rule) {\n-    // Check that there isn't a rule with the same description,\n-    // also validating description string.\n-\n+  protected boolean mapRuleDescription(RelOptRule rule) {", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\nindex 7547d4b4a..5309a006a 100644\n--- a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n\n@@ -120,12 +120,11 @@ public void checkCancel() {\n     }\n   }\n \n-  /**\n-   * Registers a rule's description.\n-   *\n-   * @param rule Rule\n-   */\n-  protected boolean mapRuleDescription(RelOptRule rule) {\n+  public List<RelOptRule> getRules() {\n+    return ImmutableList.copyOf(mapDescToRule.values());\n+  }\n+\n+  public boolean addRule(RelOptRule rule) {\n     // Check that there isn't a rule with the same description\n     final String description = rule.toString();\n     assert description != null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396989637", "bodyText": "Rename this to removeRule and update the Javadoc?", "author": "zabetak", "createdAt": "2020-03-24T08:54:46Z", "path": "core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java", "diffHunk": "@@ -156,16 +142,18 @@ protected void mapRuleDescription(RelOptRule rule) {\n             + \"existing rule=\" + existingRule + \"; new rule=\" + rule);\n       }\n     }\n+    return true;\n   }\n \n   /**\n    * Removes the mapping between a rule and its description.\n    *\n    * @param rule Rule\n+   * @return the rule that is removed, or null if no rule is removed\n    */\n-  protected void unmapRuleDescription(RelOptRule rule) {\n+  protected RelOptRule unmapRuleDescription(RelOptRule rule) {", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxODk5Mw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397318993", "bodyText": "will do", "author": "hsyuan", "createdAt": "2020-03-24T17:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTA4Mw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397599083", "bodyText": "The parameter of this method is weird, should be string description of the rule, like removeRule(String desc) ?", "author": "danny0405", "createdAt": "2020-03-25T04:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4OTYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\nindex 7547d4b4a..5309a006a 100644\n--- a/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java\n\n@@ -145,15 +144,10 @@ protected boolean mapRuleDescription(RelOptRule rule) {\n     return true;\n   }\n \n-  /**\n-   * Removes the mapping between a rule and its description.\n-   *\n-   * @param rule Rule\n-   * @return the rule that is removed, or null if no rule is removed\n-   */\n-  protected RelOptRule unmapRuleDescription(RelOptRule rule) {\n+  public boolean removeRule(RelOptRule rule) {\n     String description = rule.toString();\n-    return mapDescToRule.remove(description);\n+    RelOptRule removed = mapDescToRule.remove(description);\n+    return removed != null;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MjczMA==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396992730", "bodyText": "Would it be a good idea to move the method to AbstractRelOptPlanner? This would allow us to keep mapDescToRule private and replace calls to mapDescToRule.values() with calls to this method.", "author": "zabetak", "createdAt": "2020-03-24T08:59:39Z", "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxODg0MQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r397318841", "bodyText": "Yes.", "author": "hsyuan", "createdAt": "2020-03-24T17:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MjczMA=="}], "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\nindex 7f32c36ac..881e96039 100644\n--- a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\n\n@@ -387,16 +387,12 @@ public RelSet getSet(RelNode rel) {\n     this.provenanceMap.clear();\n   }\n \n-  public List<RelOptRule> getRules() {\n-    return ImmutableList.copyOf(mapDescToRule.values());\n-  }\n-\n   public boolean addRule(RelOptRule rule) {\n     if (locked) {\n       return false;\n     }\n \n-    if (!mapRuleDescription(rule)) {\n+    if (!super.addRule(rule)) {\n       return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzkzNg==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r396993936", "bodyText": "If we choose to add this method to the superclass (instead of having mapRuleDescription) then here we can ovverride.", "author": "zabetak", "createdAt": "2020-03-24T09:01:36Z", "path": "core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java", "diffHunk": "@@ -392,35 +382,24 @@ public RelSet getSet(RelNode rel) {\n     this.mapRel2Subset.clear();\n     this.relImportances.clear();\n     this.ruleQueue.clear();\n-    this.ruleNames.clear();\n     this.materializations.clear();\n     this.latticeByName.clear();\n     this.provenanceMap.clear();\n   }\n \n   public List<RelOptRule> getRules() {\n-    return ImmutableList.copyOf(ruleSet);\n+    return ImmutableList.copyOf(mapDescToRule.values());\n   }\n \n   public boolean addRule(RelOptRule rule) {", "originalCommit": "2df439464cac8321e5ed3c98d278c57193501dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MTE5MQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398241191", "bodyText": "@zabetak I have addressed your comments. Thanks.", "author": "hsyuan", "createdAt": "2020-03-25T23:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\nindex 7f32c36ac..881e96039 100644\n--- a/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\n+++ b/core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java\n\n@@ -387,16 +387,12 @@ public RelSet getSet(RelNode rel) {\n     this.provenanceMap.clear();\n   }\n \n-  public List<RelOptRule> getRules() {\n-    return ImmutableList.copyOf(mapDescToRule.values());\n-  }\n-\n   public boolean addRule(RelOptRule rule) {\n     if (locked) {\n       return false;\n     }\n \n-    if (!mapRuleDescription(rule)) {\n+    if (!super.addRule(rule)) {\n       return false;\n     }\n \n"}}, {"oid": "19f913d76fb488d6b6615b74be38d6edf9699c12", "url": "https://github.com/apache/calcite/commit/19f913d76fb488d6b6615b74be38d6edf9699c12", "message": "Address comments", "committedDate": "2020-03-25T21:30:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398354625", "bodyText": "If we already know the size of mapDescToRule, we can create a set with exact size, which will eliminate capacity expansion overhead and space waste when creating. Even though this is trivial update, I think it is always a good manner to create collection in such way if possible.\ninstruction.ruleSet = Sets.newHashSetWithExpectedSize(mapDescToRule.size());", "author": "neoremind", "createdAt": "2020-03-26T07:06:49Z", "path": "core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java", "diffHunk": "@@ -275,7 +253,7 @@ void executeInstruction(\n     LOGGER.trace(\"Applying rule class {}\", instruction.ruleClass);\n     if (instruction.ruleSet == null) {\n       instruction.ruleSet = new LinkedHashSet<>();\n-      for (RelOptRule rule : allRules) {\n+      for (RelOptRule rule : mapDescToRule.values()) {", "originalCommit": "19f913d76fb488d6b6615b74be38d6edf9699c12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM2MjM2Mw==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398362363", "bodyText": "Yes, will do.", "author": "hsyuan", "createdAt": "2020-03-26T07:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMzY5OA==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398933698", "bodyText": "It turns out the size instruction.ruleSet is undetermined, we don't know the exact size. So I will leave as it is.", "author": "hsyuan", "createdAt": "2020-03-26T22:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3OTUyOQ==", "url": "https://github.com/apache/calcite/pull/1869#discussion_r398979529", "bodyText": "I agree, there is \"if\" check to determine what to be added. I didn't find that out clearly, sorry about the false alert.", "author": "neoremind", "createdAt": "2020-03-27T01:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDYyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "21590a8557d86c177368a06db02b3d510b60c8af", "url": "https://github.com/apache/calcite/commit/21590a8557d86c177368a06db02b3d510b60c8af", "message": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "committedDate": "2020-03-29T02:13:12Z", "type": "forcePushed"}, {"oid": "9dddbdf23d8ddcf8b404bc1dc0afa93812eee582", "url": "https://github.com/apache/calcite/commit/9dddbdf23d8ddcf8b404bc1dc0afa93812eee582", "message": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "committedDate": "2020-04-13T01:13:32Z", "type": "forcePushed"}, {"oid": "010645ad411d8389100fa959822ef25798c1d5af", "url": "https://github.com/apache/calcite/commit/010645ad411d8389100fa959822ef25798c1d5af", "message": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "committedDate": "2020-04-21T07:10:26Z", "type": "commit"}, {"oid": "010645ad411d8389100fa959822ef25798c1d5af", "url": "https://github.com/apache/calcite/commit/010645ad411d8389100fa959822ef25798c1d5af", "message": "[CALCITE-3868] Remove redundant ruleSet and ruleNames in VolcanoPlanner", "committedDate": "2020-04-21T07:10:26Z", "type": "forcePushed"}]}