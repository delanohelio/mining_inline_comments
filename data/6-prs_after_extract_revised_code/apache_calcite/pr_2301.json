{"pr_number": 2301, "pr_title": "CALCITE-4434 fix cannot implement 'CASE row WHEN row...'", "pr_createdAt": "2020-12-16T09:27:24Z", "pr_url": "https://github.com/apache/calcite/pull/2301", "timeline": [{"oid": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2", "url": "https://github.com/apache/calcite/commit/3462a9115ff9a94f56f8553c9dbb12bb08496fe2", "message": "CALCITE-4434 fix cannot implement 'CASE row WHEN row...'", "committedDate": "2020-12-16T09:25:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMjQzNg==", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548412436", "bodyText": "Can you give an example for CASE (deptno, job) WHEN (20, 'CLERK') THEN 1, what is the exprs.get(0) and exprs.get(1)?\nIs exprs.get(0) (deptno, job and  exprs.get(1) (20, 'CLERK')", "author": "amaliujia", "createdAt": "2020-12-24T06:29:46Z", "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));\n+      SqlKind expr0Kind = expr0.getKind();\n+      SqlKind expr1Kind = expr1.getKind();\n+      if (expr0Kind == SqlKind.ROW && expr1Kind == SqlKind.ROW) {\n+        RexCall call0 = (RexCall) expr0;\n+        RexCall call1 = (RexCall) expr1;", "originalCommit": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDAwMQ==", "url": "https://github.com/apache/calcite/pull/2301#discussion_r549050001", "bodyText": "YES", "author": "zinking", "createdAt": "2020-12-27T01:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMjQzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw==", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548413547", "bodyText": "Actually why need to remove cast?", "author": "amaliujia", "createdAt": "2020-12-24T06:31:11Z", "path": "core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java", "diffHunk": "@@ -860,6 +861,29 @@ public RexNode convertCall(\n             : operandTypeChecker.getConsistency();\n     final List<RexNode> exprs = convertOperands(cx, call, consistency);\n     RelDataType type = rexBuilder.deriveReturnType(op, exprs);\n+\n+    //generate relation for `=(Row1,Row2)`\n+    if (op.kind == SqlKind.EQUALS) {\n+      RexNode expr0 = RexUtil.removeCast(exprs.get(0));\n+      RexNode expr1 = RexUtil.removeCast(exprs.get(1));", "originalCommit": "3462a9115ff9a94f56f8553c9dbb12bb08496fe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxNDcwMw==", "url": "https://github.com/apache/calcite/pull/2301#discussion_r548414703", "bodyText": "If you have to remove cast, then better to add a test that include CAST to show the difference?", "author": "amaliujia", "createdAt": "2020-12-24T06:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA1MDAzNQ==", "url": "https://github.com/apache/calcite/pull/2301#discussion_r549050035", "bodyText": "ROW operation naturally includes a Cast outside. so the example test already has it.", "author": "zinking", "createdAt": "2020-12-27T01:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQxMzU0Nw=="}], "type": "inlineReview", "revised_code": null}]}