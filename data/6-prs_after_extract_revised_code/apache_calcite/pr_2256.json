{"pr_number": 2256, "pr_title": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "pr_createdAt": "2020-11-12T03:43:24Z", "pr_url": "https://github.com/apache/calcite/pull/2256", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4OTI3NQ==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521889275", "bodyText": "Please factor this into a method and make the assertion messages distinguishable.", "author": "vlsi", "createdAt": "2020-11-12T07:31:20Z", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +197,31 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  @Test public void testEqualSansNullability() {\n+    final RelDataTypeFactory factory = f.typeFactory;\n+\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+\n+    // different types\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(factory, bigIntType, varCharType), is(false));\n+    assertThat(\n+        SqlTypeUtil.equalSansNullability(bigIntType, varCharType), is(false));", "originalCommit": "f68e982e3f6b1eb1df170b1b50ec52556024040f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkxMTU2Mg==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521911562", "bodyText": "Done. Thanks for the good suggestion.", "author": "liyafan82", "createdAt": "2020-11-12T08:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4OTI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "430249fcefd78b1ee877077fcb56adba4270487b", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\nindex b63121898..758d091cd 100644\n--- a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n+++ b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n\n@@ -198,30 +199,34 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     return builder.build();\n   }\n \n-  @Test public void testEqualSansNullability() {\n-    final RelDataTypeFactory factory = f.typeFactory;\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n \n+  @Test public void testEqualSansNullability() {\n     RelDataType bigIntType = f.sqlBigInt;\n     RelDataType nullableBigIntType = f.sqlBigIntNullable;\n     RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n \n     // different types\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(factory, bigIntType, varCharType), is(false));\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(bigIntType, varCharType), is(false));\n+    compareTypesIgnoringNullability(bigIntType, varCharType, false);\n \n     // types differ only in nullability\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(factory, bigIntType, nullableBigIntType), is(true));\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(bigIntType, nullableBigIntType), is(true));\n+    compareTypesIgnoringNullability(bigIntType, nullableBigIntType, true);\n \n     // equal types\n-    RelDataType bigIntType1 = factory.createTypeWithNullability(nullableBigIntType, false);\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(factory, bigIntType, bigIntType1), is(true));\n-    assertThat(\n-        SqlTypeUtil.equalSansNullability(bigIntType, bigIntType1), is(true));\n+    compareTypesIgnoringNullability(bigIntType, bigIntType1, true);\n   }\n }\n"}}, {"oid": "430249fcefd78b1ee877077fcb56adba4270487b", "url": "https://github.com/apache/calcite/commit/430249fcefd78b1ee877077fcb56adba4270487b", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T08:14:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521961891", "bodyText": "unequal  is not a valid word.", "author": "danny0405", "createdAt": "2020-11-12T09:30:45Z", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"unequal\");\n+", "originalCommit": "430249fcefd78b1ee877077fcb56adba4270487b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3MDk0NA==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521970944", "bodyText": "Changed to 'not equal'. Thanks.", "author": "liyafan82", "createdAt": "2020-11-12T09:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3ODE3Mw==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521978173", "bodyText": "Another issue here is that both asserts have the same message, so it is hard to tell which fails.\nI would suggest:\n    assertThat(\n        \"SqlTypeUtil.equalSansNullability(typeFactory, \" + type1 + \", \" + type2 + \"), comment: \" + comment,\n        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n    assertThat(\n        \"SqlTypeUtil.equalSansNullability(\" + type1 + \", \" + type2 + \"), comment: \" + comment,\n        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));", "author": "vlsi", "createdAt": "2020-11-12T09:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzMzMg==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521997332", "bodyText": "Sounds reasonable. Revised accordingly. Thank you.", "author": "liyafan82", "createdAt": "2020-11-12T10:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MTg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "01f5fa02aa3979e3a98a924223108cf7dff19226", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\nindex 758d091cd..04fdd6ce7 100644\n--- a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n+++ b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n\n@@ -205,7 +205,7 @@ private void compareTypesIgnoringNullability(\n         \"%s and %s are expected to be %s ignoring nullability.\",\n         type1.getFullTypeString(),\n         type2.getFullTypeString(),\n-        expectedResult ? \"equal\" : \"unequal\");\n+        expectedResult ? \"equal\" : \"not equal\");\n \n     assertThat(msg,\n         SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n"}}, {"oid": "01f5fa02aa3979e3a98a924223108cf7dff19226", "url": "https://github.com/apache/calcite/commit/01f5fa02aa3979e3a98a924223108cf7dff19226", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T09:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521979340", "bodyText": "This should a parameter to compareTypesIgnoringNullability method.", "author": "vlsi", "createdAt": "2020-11-12T09:57:11Z", "path": "core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java", "diffHunk": "@@ -197,4 +198,35 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     }\n     return builder.build();\n   }\n+\n+  private void compareTypesIgnoringNullability(\n+      RelDataType type1, RelDataType type2, boolean expectedResult) {\n+    String msg = String.format(Locale.ROOT,\n+        \"%s and %s are expected to be %s ignoring nullability.\",\n+        type1.getFullTypeString(),\n+        type2.getFullTypeString(),\n+        expectedResult ? \"equal\" : \"not equal\");\n+\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n+    assertThat(msg,\n+        SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n+  }\n+\n+  @Test public void testEqualSansNullability() {\n+    RelDataType bigIntType = f.sqlBigInt;\n+    RelDataType nullableBigIntType = f.sqlBigIntNullable;\n+    RelDataType varCharType = f.sqlVarchar;\n+    RelDataType bigIntType1 =\n+        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+\n+    // different types", "originalCommit": "01f5fa02aa3979e3a98a924223108cf7dff19226", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzY5MA==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r521997690", "bodyText": "I guess you mean the type factory should be a parameter? Revised accordingly. Thanks.", "author": "liyafan82", "createdAt": "2020-11-12T10:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTcwOQ==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r522001709", "bodyText": "I mean different types should be a comment parameter rather than a comment", "author": "vlsi", "createdAt": "2020-11-12T10:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxNzA2MQ==", "url": "https://github.com/apache/calcite/pull/2256#discussion_r522017061", "bodyText": "Revised. Thanks for your clarification.", "author": "liyafan82", "createdAt": "2020-11-12T10:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3OTM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "bd7b5f801c65a2d2190e4be5751f62653ab4ca6b", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\nindex 04fdd6ce7..ef07abb3d 100644\n--- a/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n+++ b/core/src/test/java/org/apache/calcite/sql/type/SqlTypeUtilTest.java\n\n@@ -199,34 +199,41 @@ private RelDataType struct(RelDataType...relDataTypes) {\n     return builder.build();\n   }\n \n-  private void compareTypesIgnoringNullability(\n+  private void compareTypesIgnoringNullability(RelDataTypeFactory factory,\n       RelDataType type1, RelDataType type2, boolean expectedResult) {\n-    String msg = String.format(Locale.ROOT,\n+    String typeString1 = type1.getFullTypeString();\n+    String typeString2 = type2.getFullTypeString();\n+\n+    String comment = String.format(Locale.ROOT,\n         \"%s and %s are expected to be %s ignoring nullability.\",\n-        type1.getFullTypeString(),\n-        type2.getFullTypeString(),\n+        typeString1, typeString2,\n         expectedResult ? \"equal\" : \"not equal\");\n \n-    assertThat(msg,\n-        SqlTypeUtil.equalSansNullability(f.typeFactory, type1, type2), is(expectedResult));\n-    assertThat(msg,\n+    assertThat(\n+        \"The result of SqlTypeUtil.equalSansNullability\"\n+            + \"(typeFactory, \" + typeString1 + \", \" + typeString2 + \") is incorrect: \" + comment,\n+        SqlTypeUtil.equalSansNullability(factory, type1, type2), is(expectedResult));\n+    assertThat(\"The result of SqlTypeUtil.equalSansNullability\"\n+            + \"(\" + typeString1 + \", \" + typeString2 + \") is incorrect: \" + comment,\n         SqlTypeUtil.equalSansNullability(type1, type2), is(expectedResult));\n   }\n \n   @Test public void testEqualSansNullability() {\n+    RelDataTypeFactory factory = f.typeFactory;\n+\n     RelDataType bigIntType = f.sqlBigInt;\n     RelDataType nullableBigIntType = f.sqlBigIntNullable;\n     RelDataType varCharType = f.sqlVarchar;\n     RelDataType bigIntType1 =\n-        f.typeFactory.createTypeWithNullability(nullableBigIntType, false);\n+        factory.createTypeWithNullability(nullableBigIntType, false);\n \n     // different types\n-    compareTypesIgnoringNullability(bigIntType, varCharType, false);\n+    compareTypesIgnoringNullability(factory, bigIntType, varCharType, false);\n \n     // types differ only in nullability\n-    compareTypesIgnoringNullability(bigIntType, nullableBigIntType, true);\n+    compareTypesIgnoringNullability(factory, bigIntType, nullableBigIntType, true);\n \n     // equal types\n-    compareTypesIgnoringNullability(bigIntType, bigIntType1, true);\n+    compareTypesIgnoringNullability(factory, bigIntType, bigIntType1, true);\n   }\n }\n"}}, {"oid": "bd7b5f801c65a2d2190e4be5751f62653ab4ca6b", "url": "https://github.com/apache/calcite/commit/bd7b5f801c65a2d2190e4be5751f62653ab4ca6b", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T10:23:31Z", "type": "forcePushed"}, {"oid": "e20d5b7d61b10064fa9c9523457af81a82cd35c7", "url": "https://github.com/apache/calcite/commit/e20d5b7d61b10064fa9c9523457af81a82cd35c7", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T10:55:31Z", "type": "forcePushed"}, {"oid": "0600bba518b126e85de384e5c2a2e7a74e3d1821", "url": "https://github.com/apache/calcite/commit/0600bba518b126e85de384e5c2a2e7a74e3d1821", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T10:59:19Z", "type": "commit"}, {"oid": "0600bba518b126e85de384e5c2a2e7a74e3d1821", "url": "https://github.com/apache/calcite/commit/0600bba518b126e85de384e5c2a2e7a74e3d1821", "message": "[CALCITE-4392] The operation of checking types equal ignoring null can be more efficient", "committedDate": "2020-11-12T10:59:19Z", "type": "forcePushed"}]}