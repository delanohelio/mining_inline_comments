{"pr_number": 2295, "pr_title": "[CALCITE-4435] Incorrect logic for validating RexFieldAccess", "pr_createdAt": "2020-12-11T03:02:59Z", "pr_url": "https://github.com/apache/calcite/pull/2295", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MzY1OQ==", "url": "https://github.com/apache/calcite/pull/2295#discussion_r540793659", "bodyText": "Just to complete: could we have a test that fails because we use index == fieldList.size()  (I guess 2 in this specific case) ?", "author": "rubenada", "createdAt": "2020-12-11T09:05:22Z", "path": "core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java", "diffHunk": "@@ -735,4 +740,46 @@ private void checkBigDecimalLiteral(RexBuilder builder, String val) {\n         literal.getValueAs(BigDecimal.class).toString(), is(val));\n   }\n \n+  @Test void testValidateRexFieldAccess() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RexBuilder builder = new RexBuilder(typeFactory);\n+\n+    RelDataType intType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n+    RelDataType longType = typeFactory.createSqlType(SqlTypeName.BIGINT);\n+\n+    RelDataType structType = typeFactory.createStructType(\n+        Arrays.asList(intType, longType), Arrays.asList(\"x\", \"y\"));\n+    RexInputRef inputRef = builder.makeInputRef(structType, 0);\n+\n+    // construct RexFieldAccess fails because of negative index\n+    IllegalArgumentException e1 = assertThrows(IllegalArgumentException.class, () -> {\n+      RelDataTypeField field = new RelDataTypeFieldImpl(\"z\", -1, intType);\n+      new RexFieldAccess(inputRef, field);\n+    });\n+    assertThat(e1.getMessage(),\n+        is(\"Field #-1: z INTEGER does not exist for expression $0\"));\n+", "originalCommit": "068cc12af15b8c06a509c32df932f337b751a5a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxMzYxNQ==", "url": "https://github.com/apache/calcite/pull/2295#discussion_r540813615", "bodyText": "@rubenada Thanks for your good suggestion.\nI have adjusted the PR to test the case for index == fieldList.size()", "author": "liyafan82", "createdAt": "2020-12-11T09:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5MzY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "54e4acc4858aae203cec13d2df03006b6ba18593", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java b/core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java\nindex 04a8291e2..7db42f637 100644\n--- a/core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java\n+++ b/core/src/test/java/org/apache/calcite/rex/RexBuilderTest.java\n\n@@ -762,11 +762,11 @@ private void checkBigDecimalLiteral(RexBuilder builder, String val) {\n \n     // construct RexFieldAccess fails because of too large index\n     IllegalArgumentException e2 = assertThrows(IllegalArgumentException.class, () -> {\n-      RelDataTypeField field = new RelDataTypeFieldImpl(\"z\", 100, intType);\n+      RelDataTypeField field = new RelDataTypeFieldImpl(\"z\", 2, intType);\n       new RexFieldAccess(inputRef, field);\n     });\n     assertThat(e2.getMessage(),\n-        is(\"Field #100: z INTEGER does not exist for expression $0\"));\n+        is(\"Field #2: z INTEGER does not exist for expression $0\"));\n \n     // construct RexFieldAccess fails because of incorrect type\n     IllegalArgumentException e3 = assertThrows(IllegalArgumentException.class, () -> {\n"}}, {"oid": "54e4acc4858aae203cec13d2df03006b6ba18593", "url": "https://github.com/apache/calcite/commit/54e4acc4858aae203cec13d2df03006b6ba18593", "message": "[CALCITE-4435] Incorrect logic for validating RexFieldAccess", "committedDate": "2020-12-11T09:35:06Z", "type": "commit"}, {"oid": "54e4acc4858aae203cec13d2df03006b6ba18593", "url": "https://github.com/apache/calcite/commit/54e4acc4858aae203cec13d2df03006b6ba18593", "message": "[CALCITE-4435] Incorrect logic for validating RexFieldAccess", "committedDate": "2020-12-11T09:35:06Z", "type": "forcePushed"}]}