{"pr_number": 2020, "pr_title": "[CALCITE-4060] Supports implicit type coercion for NOT IN.", "pr_createdAt": "2020-06-11T13:49:03Z", "pr_url": "https://github.com/apache/calcite/pull/2020", "timeline": [{"oid": "0268aea1756bb55630ae42d5c40bb72a9b10f4a4", "url": "https://github.com/apache/calcite/commit/0268aea1756bb55630ae42d5c40bb72a9b10f4a4", "message": "[CALCITE-4060] Supports implicit type coercion for \"NOT IN\".", "committedDate": "2020-06-16T03:00:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NTcxNQ==", "url": "https://github.com/apache/calcite/pull/2020#discussion_r440575715", "bodyText": "Trying to understand this test case:\nso it tests if value is coerced and the way to check it is doing not in. For example. 4 not in ('1', '2', '3'). 4 should be coerced to varchar then it is not in ('1', '2', '3').\nThen, I guess what is missing are negative cases. Because seems to me that even 4 is not coerced, it will still not in  ('1', '2', '3').\nSo for each positive case here, there could be a negative case. For example, 3 not in ('1', '2', '3') which returns false.", "author": "amaliujia", "createdAt": "2020-06-16T04:13:35Z", "path": "core/src/test/java/org/apache/calcite/test/TypeCoercionConverterTest.java", "diffHunk": "@@ -61,6 +61,14 @@\n         + \"from (values (true, true, true))\");\n   }\n \n+  @Test void testNotInOperation() {\n+    checkPlanEquals(\"select\\n\"\n+        + \"4 not in ('1', '2', '3') as f0,\\n\"\n+        + \"(3, 4) not in (('1', '2')) as f1,\\n\"\n+        + \"(2, 3) not in (('1', '2'), ('3', '4')) as f2\\n\"\n+        + \"from (values (true, true, true))\");", "originalCommit": "0268aea1756bb55630ae42d5c40bb72a9b10f4a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDU1OA==", "url": "https://github.com/apache/calcite/pull/2020#discussion_r440580558", "bodyText": "Trying to understand this test case:\nso it tests if value is coerced and the way to check it is doing not in. For example. 4 not in ('1', '2', '3'). 4 should be coerced to varchar then it is not in ('1', '2', '3').\nThen, I guess what is missing are negative cases. Because seems to me that even 4 is not coerced, it will still not in ('1', '2', '3').\nSo for each positive case here, there could be a negative case. For example, 3 not in ('1', '2', '3') which returns false.\n\nThanks for your advice, I've change my test case.", "author": "Aaaaaaron", "createdAt": "2020-06-16T04:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1dcba6b3d957658df91bf1cb96ffa6305756f7d7", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/test/TypeCoercionConverterTest.java b/core/src/test/java/org/apache/calcite/test/TypeCoercionConverterTest.java\nindex 823860076..afbbe7996 100644\n--- a/core/src/test/java/org/apache/calcite/test/TypeCoercionConverterTest.java\n+++ b/core/src/test/java/org/apache/calcite/test/TypeCoercionConverterTest.java\n\n@@ -63,10 +63,10 @@\n \n   @Test void testNotInOperation() {\n     checkPlanEquals(\"select\\n\"\n-        + \"4 not in ('1', '2', '3') as f0,\\n\"\n-        + \"(3, 4) not in (('1', '2')) as f1,\\n\"\n-        + \"(2, 3) not in (('1', '2'), ('3', '4')) as f2\\n\"\n-        + \"from (values (true, true, true))\");\n+        + \"1 not in ('1', '2', '3') as f0,\\n\"\n+        + \"(1, 2) not in (('1', '2')) as f1,\\n\"\n+        + \"(1, 2) not in (('1', '2'), ('3', '4')) as f2\\n\"\n+        + \"from (values (false, false, false))\");\n   }\n \n   /** Test cases for {@link TypeCoercion#inOperationCoercion}. */\n"}}, {"oid": "1dcba6b3d957658df91bf1cb96ffa6305756f7d7", "url": "https://github.com/apache/calcite/commit/1dcba6b3d957658df91bf1cb96ffa6305756f7d7", "message": "[CALCITE-4060] Supports implicit type coercion for \"NOT IN\".", "committedDate": "2020-06-16T04:42:58Z", "type": "forcePushed"}, {"oid": "29de15197d72817ea1865e8fd871376cb15b9f77", "url": "https://github.com/apache/calcite/commit/29de15197d72817ea1865e8fd871376cb15b9f77", "message": "[CALCITE-4060] Supports implicit type coercion for \"NOT IN\".", "committedDate": "2020-06-16T05:08:25Z", "type": "commit"}, {"oid": "29de15197d72817ea1865e8fd871376cb15b9f77", "url": "https://github.com/apache/calcite/commit/29de15197d72817ea1865e8fd871376cb15b9f77", "message": "[CALCITE-4060] Supports implicit type coercion for \"NOT IN\".", "committedDate": "2020-06-16T05:08:25Z", "type": "forcePushed"}]}