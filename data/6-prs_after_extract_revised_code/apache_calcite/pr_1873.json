{"pr_number": 1873, "pr_title": "[CALCITE-3872] Simplify expressions with unary minus", "pr_createdAt": "2020-03-25T07:02:47Z", "pr_url": "https://github.com/apache/calcite/pull/1873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDAyOQ==", "url": "https://github.com/apache/calcite/pull/1873#discussion_r399000029", "bodyText": "Should we add more test cases which covers decimal as well?", "author": "ritesh-kapoor", "createdAt": "2020-03-27T02:25:31Z", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -2265,8 +2265,8 @@ private void assertTypeAndToString(\n     checkSimplify(coalesce(gt(nullInt, nullInt), trueLiteral),\n         \"true\");\n     checkSimplify(coalesce(unaryPlus(nullInt), unaryPlus(vInt())),\n-        \"+(?0.int0)\");\n-    checkSimplifyUnchanged(coalesce(unaryPlus(vInt(1)), unaryPlus(vInt())));\n+        \"?0.int0\");", "originalCommit": "d299c4f98ac1016c85d44336e763cd93164e22af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNTM1Nw==", "url": "https://github.com/apache/calcite/pull/1873#discussion_r399025357", "bodyText": "Sounds good. I have added some test cases for decimal. Please take a look.", "author": "liyafan82", "createdAt": "2020-03-27T04:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4682701cc05760a44ccc5abd8dae2ffc38487dd0", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java b/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\nindex 0fa58558a..b0bcc4c23 100644\n--- a/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\n+++ b/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\n\n@@ -2271,6 +2274,32 @@ private void assertTypeAndToString(\n     checkSimplify(coalesce(nullInt, vInt()), \"?0.int0\");\n     checkSimplify(coalesce(vInt(), nullInt, vInt(1)),\n         \"COALESCE(?0.int0, ?0.int1)\");\n+\n+    // first arg not null\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimal()),\n+        \"?0.notNullDecimal0\");\n+    checkSimplifyUnchanged(coalesce(vDecimal(), vDecimalNotNull()));\n+    // repeated arg\n+    checkSimplify(coalesce(vDecimal(), vDecimal()),\n+        \"?0.decimal0\");\n+    // repeated arg\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimalNotNull()),\n+        \"?0.notNullDecimal0\");\n+    checkSimplify(coalesce(vDecimalNotNull(), literal(1)), \"?0.notNullDecimal0\");\n+    checkSimplifyUnchanged(coalesce(vDecimal(), literal(1)));\n+    checkSimplify(\n+        coalesce(vDecimal(), plus(vDecimal(), vDecimalNotNull()), literal(1),\n+            vDecimalNotNull()),\n+        \"COALESCE(?0.decimal0, +(?0.decimal0, ?0.notNullDecimal0), 1)\");\n+    checkSimplify(coalesce(gt(nullDecimal, nullDecimal), trueLiteral),\n+        \"true\");\n+    checkSimplify(coalesce(unaryPlus(nullDecimal), unaryPlus(vDecimal())),\n+        \"?0.decimal0\");\n+    checkSimplifyUnchanged(coalesce(vDecimal(1), vDecimal()));\n+\n+    checkSimplify(coalesce(nullDecimal, vDecimal()), \"?0.decimal0\");\n+    checkSimplify(coalesce(vDecimal(), nullInt, vDecimal(1)),\n+        \"COALESCE(?0.decimal0, ?0.decimal1)\");\n   }\n \n   @Test public void simplifyNull() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMjEzNg==", "url": "https://github.com/apache/calcite/pull/1873#discussion_r402032136", "bodyText": "Could you please put the comment on the top? Also squash commits.", "author": "chunweilei", "createdAt": "2020-04-02T03:30:00Z", "path": "core/src/test/java/org/apache/calcite/rex/RexProgramTest.java", "diffHunk": "@@ -2265,12 +2265,35 @@ private void assertTypeAndToString(\n     checkSimplify(coalesce(gt(nullInt, nullInt), trueLiteral),\n         \"true\");\n     checkSimplify(coalesce(unaryPlus(nullInt), unaryPlus(vInt())),\n-        \"+(?0.int0)\");\n-    checkSimplifyUnchanged(coalesce(unaryPlus(vInt(1)), unaryPlus(vInt())));\n+        \"?0.int0\");\n+    checkSimplifyUnchanged(coalesce(vInt(1), vInt()));\n \n     checkSimplify(coalesce(nullInt, vInt()), \"?0.int0\");\n     checkSimplify(coalesce(vInt(), nullInt, vInt(1)),\n         \"COALESCE(?0.int0, ?0.int1)\");\n+\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimal()), // first arg not null\n+        \"?0.notNullDecimal0\");\n+    checkSimplifyUnchanged(coalesce(vDecimal(), vDecimalNotNull()));\n+    checkSimplify(coalesce(vDecimal(), vDecimal()), // repeated arg\n+        \"?0.decimal0\");\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimalNotNull()), // repeated arg\n+        \"?0.notNullDecimal0\");", "originalCommit": "0763fe22dba2e9d2b6aa6c39b23ad1f0df8ed745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTk4MA==", "url": "https://github.com/apache/calcite/pull/1873#discussion_r402255980", "bodyText": "Done. Thank you.", "author": "liyafan82", "createdAt": "2020-04-02T11:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "4682701cc05760a44ccc5abd8dae2ffc38487dd0", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java b/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\nindex a9679a45e..b0bcc4c23 100644\n--- a/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\n+++ b/core/src/test/java/org/apache/calcite/rex/RexProgramTest.java\n\n@@ -2272,12 +2275,15 @@ private void assertTypeAndToString(\n     checkSimplify(coalesce(vInt(), nullInt, vInt(1)),\n         \"COALESCE(?0.int0, ?0.int1)\");\n \n-    checkSimplify(coalesce(vDecimalNotNull(), vDecimal()), // first arg not null\n+    // first arg not null\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimal()),\n         \"?0.notNullDecimal0\");\n     checkSimplifyUnchanged(coalesce(vDecimal(), vDecimalNotNull()));\n-    checkSimplify(coalesce(vDecimal(), vDecimal()), // repeated arg\n+    // repeated arg\n+    checkSimplify(coalesce(vDecimal(), vDecimal()),\n         \"?0.decimal0\");\n-    checkSimplify(coalesce(vDecimalNotNull(), vDecimalNotNull()), // repeated arg\n+    // repeated arg\n+    checkSimplify(coalesce(vDecimalNotNull(), vDecimalNotNull()),\n         \"?0.notNullDecimal0\");\n     checkSimplify(coalesce(vDecimalNotNull(), literal(1)), \"?0.notNullDecimal0\");\n     checkSimplifyUnchanged(coalesce(vDecimal(), literal(1)));\n"}}, {"oid": "4682701cc05760a44ccc5abd8dae2ffc38487dd0", "url": "https://github.com/apache/calcite/commit/4682701cc05760a44ccc5abd8dae2ffc38487dd0", "message": "[CALCITE-3872] Simplify expressions with unary minus", "committedDate": "2020-04-02T11:54:40Z", "type": "forcePushed"}, {"oid": "b358de09f36961b3e6c47316692f6e103ef3d2ea", "url": "https://github.com/apache/calcite/commit/b358de09f36961b3e6c47316692f6e103ef3d2ea", "message": "[CALCITE-3872] Simplify expressions with unary minus", "committedDate": "2020-04-07T13:09:54Z", "type": "commit"}, {"oid": "b358de09f36961b3e6c47316692f6e103ef3d2ea", "url": "https://github.com/apache/calcite/commit/b358de09f36961b3e6c47316692f6e103ef3d2ea", "message": "[CALCITE-3872] Simplify expressions with unary minus", "committedDate": "2020-04-07T13:09:54Z", "type": "forcePushed"}]}