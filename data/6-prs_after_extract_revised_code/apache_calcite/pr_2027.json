{"pr_number": 2027, "pr_title": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm", "pr_createdAt": "2020-06-16T06:10:35Z", "pr_url": "https://github.com/apache/calcite/pull/2027", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM0Nw==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r440911347", "bodyText": "minor thing: now that this variable is a boolean, maybe it should be renamed (changeCount -> change ?)", "author": "rubenada", "createdAt": "2020-06-16T14:49:43Z", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -56,42 +54,40 @@ public int size() {\n   public static <V, E extends DefaultEdge> FrozenGraph<V, E> makeImmutable(\n       DirectedGraph<V, E> graph) {\n     DefaultDirectedGraph<V, E> graph1 = (DefaultDirectedGraph<V, E>) graph;\n-    Map<Pair<V, V>, List<V>> shortestPaths = new HashMap<>();\n+    Map<Pair<V, V>, int[]> shortestDistances = new HashMap<>();\n     for (DefaultDirectedGraph.VertexInfo<V, E> arc\n         : graph1.vertexMap.values()) {\n       for (E edge : arc.outEdges) {\n         final V source = graph1.source(edge);\n         final V target = graph1.target(edge);\n-        shortestPaths.put(Pair.of(source, target),\n-            ImmutableList.of(source, target));\n+        shortestDistances.put(Pair.of(source, target), new int[] {1});\n       }\n     }\n     while (true) {\n       // Take a copy of the map's keys to avoid\n       // ConcurrentModificationExceptions.\n       final List<Pair<V, V>> previous =\n-          ImmutableList.copyOf(shortestPaths.keySet());\n-      int changeCount = 0;\n+          ImmutableList.copyOf(shortestDistances.keySet());\n+      boolean changeCount = false;", "originalCommit": "38cc79a2ad376725a22c88cf62acb5598dac6db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxODYyMw==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441518623", "bodyText": "Revised. Thanks for your kind reminder.", "author": "liyafan82", "createdAt": "2020-06-17T12:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "542dfd71cd8765f7c9982eea61c16592f75018fd", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\nindex 2c42b4445..77d0ade2d 100644\n--- a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n+++ b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n\n@@ -68,7 +70,7 @@ public int size() {\n       // ConcurrentModificationExceptions.\n       final List<Pair<V, V>> previous =\n           ImmutableList.copyOf(shortestDistances.keySet());\n-      boolean changeCount = false;\n+      boolean changed = false;\n       for (E edge : graph.edgeSet()) {\n         for (Pair<V, V> edge2 : previous) {\n           if (edge.target.equals(edge2.left)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441156674", "bodyText": "Can you also fix the getPaths() to return shortest paths first? This is to make sure we choose the shortest path during convert.", "author": "xndai", "createdAt": "2020-06-16T21:37:13Z", "path": "core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java", "diffHunk": "@@ -234,10 +234,10 @@ private ConversionData getConversionData(RelOptPlanner planner) {\n       return pathMap;\n     }\n \n-    public List<Convention> getShortestPath(\n+    public int getShortestDistance(", "originalCommit": "38cc79a2ad376725a22c88cf62acb5598dac6db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxODM5OQ==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441518399", "bodyText": "IMO, it would be an overkill to call getPaths() only to get the shortest path.\nTo support this scenario, I have restored the getShortestPath API, and implement it with BFS. It should be more efficient than the Dijkstra and Floyd algorihtms.", "author": "liyafan82", "createdAt": "2020-06-17T12:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzM2NA==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441533364", "bodyText": "IMHO this is not the ideal approach, now we would be re-computing everything time something (shortest path) that was previously computed only once and returned in O(1).\nIf we take a few steps back, I think it is clear that we require both pieces of information (shortesPath & distance), to be provided ASAP from FrozenGraph. Then why not just pre-computing both in Graphs#makeImmutable and storing both of them in FrozenGraph, so that we guarantee that getShortestPath & getShortestDistance are executed in O(1)?\nI think we could keep track of shortestPath and distance in Graphs#makeImmutable, somehow combining the old approach with the newly proposed approach, either keeping two maps:\nMap<Pair<V, V>, List<V>> shortestPaths\nMap<Pair<V, V>, int[]> shortestDistances\n\nOr a single map with the combination of both as value:\nMap<Pair<V, V>, Pair<List<V>, Integer>> shortestPathsAndDistances\n\nThen we would pass this information as a parameter for FrozeGraph constructor, and we would have shortesPath & distance pre-computed from the beginning.\nI'm not sure if what I say makes sense or it is an overkill. What do you guys think?", "author": "rubenada", "createdAt": "2020-06-17T13:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MTAzNg==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r441681036", "bodyText": "@liyafan82 I am not saying getPaths() to return shortest paths. What I mean is you should put shortest path at the front of list, so during convert() we always choose the shortest converted path if possible. This only requires a sort after generating all possible path.\n@rubenada I don't think we need to cache shortest path. This is only one time used and there's no benefit to cache it.", "author": "xndai", "createdAt": "2020-06-17T16:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxOTE5MQ==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442019191", "bodyText": "@xndai I have revised the getPaths() method accordingly. Thank you.\n@rubenada Thanks a lot for your suggestion. I tend to agree with @xndai. If getting shortest paths is not a frequently used operation, there is no need to store all pairs of shortest paths. Here, we preserve the getShortestPath API, mainly for the sake of backward compatibility.", "author": "liyafan82", "createdAt": "2020-06-18T07:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "542dfd71cd8765f7c9982eea61c16592f75018fd", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java b/core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java\nindex d38d296ad..fe9c5c525 100644\n--- a/core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java\n+++ b/core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java\n\n@@ -239,5 +239,11 @@ public int getShortestDistance(\n         Convention toConvention) {\n       return getPathMap().getShortestDistance(fromConvention, toConvention);\n     }\n+\n+    public List<Convention> getShortestPath(\n+        Convention fromConvention,\n+        Convention toConvention) {\n+      return getPathMap().getShortestPath(fromConvention, toConvention);\n+    }\n   }\n }\n"}}, {"oid": "542dfd71cd8765f7c9982eea61c16592f75018fd", "url": "https://github.com/apache/calcite/commit/542dfd71cd8765f7c9982eea61c16592f75018fd", "message": "[CALCITE-4049] Implement the shortest path algorithm by BFS", "committedDate": "2020-06-17T12:42:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzI0MQ==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023241", "bodyText": "I think we can just remove this method. Nobody is using it anymore.", "author": "xndai", "createdAt": "2020-06-18T07:29:47Z", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -134,7 +135,44 @@ public int size() {\n       if (from.equals(to)) {", "originalCommit": "8d8054aeedb88524f6e2464feaf7aa3f341a5781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMDc1Ng==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442100756", "bodyText": "Removed. Maybe we can add it back some time in the future, if we find a requirement for it.", "author": "liyafan82", "createdAt": "2020-06-18T09:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\nindex c8c693fd8..e731e173e 100644\n--- a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n+++ b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n\n@@ -118,63 +116,14 @@ public int size() {\n      */\n     public List<List<V>> getPaths(V from, V to) {\n       List<List<V>> list = new ArrayList<>();\n+      if (from.equals(to)) {\n+        list.add(ImmutableList.of(from));\n+      }\n       findPaths(from, to, list);\n       list.sort(Comparator.comparingInt(List::size));\n       return list;\n     }\n \n-    /**\n-     * Returns the shortest path between two points, null if there is no path.\n-     *\n-     * @param from From\n-     * @param to To\n-     *\n-     * @return A list of arcs, null if there is no path.\n-     */\n-    public List<V> getShortestPath(V from, V to) {\n-      if (from.equals(to)) {\n-        return ImmutableList.of();\n-      }\n-      int shortestLength = getShortestDistance(from, to);\n-      if (shortestLength == -1) {\n-        return null;\n-      }\n-\n-      // find the shortest path by BFS\n-      LinkedList<V> queue = new LinkedList<>();\n-      queue.add(from);\n-      HashSet<V> visited = new HashSet<>();\n-      Map<V, V> parentMap = new HashMap<>();\n-      while (!queue.isEmpty()) {\n-        V curNode = queue.poll();\n-        if (curNode.equals(to)) {\n-          // we have found the shortest path\n-          // construct the path by the parent map\n-          V[] path = (V[]) new Object[shortestLength + 1];\n-          for (int i = shortestLength; i >= 0; i--) {\n-            path[i] = curNode;\n-            curNode = parentMap.get(curNode);\n-          }\n-          return Arrays.asList(path);\n-        }\n-\n-        // visit the current node\n-        visited.add(curNode);\n-\n-        for (E outEdge : graph.vertexMap.get(curNode).outEdges) {\n-          V nextNode = (V) outEdge.target;\n-          if (!visited.contains(nextNode) && !parentMap.containsKey(nextNode)) {\n-            // If the parent map has an element for nextNode\n-            // it means nextNode is already in the queue, but not visited yet.\n-            // so there is no need to enqueue the current node\n-            parentMap.putIfAbsent(nextNode, curNode);\n-            queue.add(nextNode);\n-          }\n-        }\n-      }\n-      throw new IllegalStateException(\"No path from source to target\");\n-    }\n-\n     /**\n      * Returns the shortest distance between two points, -1, if there is no path.\n      * @param from From\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzQwNA==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442023404", "bodyText": "where are the tests for getShortestDistance()?", "author": "xndai", "createdAt": "2020-06-18T07:30:07Z", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -66,7 +66,7 @@\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n     assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n-    assertEquals(\"[[A, B, C, D], [A, B, D]]\", paths(g, \"A\", \"D\").toString());\n+    assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());", "originalCommit": "8d8054aeedb88524f6e2464feaf7aa3f341a5781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwMTAxOA==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r442101018", "bodyText": "We have DirectedGraphTest#testDistance", "author": "liyafan82", "createdAt": "2020-06-18T09:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java b/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\nindex db0e1ef1d..c98330e8c 100644\n--- a/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\n+++ b/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\n\n@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n     assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());\n   }\n \n   private <V> List<V> shortestPath(DirectedGraph<V, DefaultEdge> g,\n       V source, V target) {\n-    return Graphs.makeImmutable(g).getShortestPath(source, target);\n+    List<List<V>> paths = Graphs.makeImmutable(g).getPaths(source, target);\n+    return paths.isEmpty() ? null : paths.get(0);\n+  }\n+\n+  private <V> List<V> shortestPath(Graphs.FrozenGraph<V, DefaultEdge> g,\n+                                   V source, V target) {\n+    List<List<V>> paths = g.getPaths(source, target);\n+    return paths.isEmpty() ? null : paths.get(0);\n   }\n \n   private <V> List<List<V>> paths(DirectedGraph<V, DefaultEdge> g,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445405947", "bodyText": "This seems a regression, I think we should put somewhere (getPaths? findPaths?) that if (from.equals(to)) the empty list is a valid path (as it happened previously in the old getShortestPath method).", "author": "rubenada", "createdAt": "2020-06-25T08:50:24Z", "path": "core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java", "diffHunk": "@@ -64,14 +64,21 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());", "originalCommit": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDQ0Mg==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446590442", "bodyText": "Sounds reasonable. I have revised the code to include the empty path to itself.\nBTW, the empty path from node D to itself should be denoted \"[D]\"? as it helps to maintain the relation:\npathLength == path.size() - 1", "author": "liyafan82", "createdAt": "2020-06-28T02:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NzE5Ng==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446867196", "bodyText": "Ok.", "author": "rubenada", "createdAt": "2020-06-29T08:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNTk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java b/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\nindex 9977d50c2..c98330e8c 100644\n--- a/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\n+++ b/core/src/test/java/org/apache/calcite/util/graph/DirectedGraphTest.java\n\n@@ -64,7 +64,7 @@\n     g.addEdge(\"B\", \"D\");\n     assertEquals(\"[A, B, D]\", shortestPath(g, \"A\", \"D\").toString());\n     assertNull(shortestPath(g, \"A\", \"E\"), \"There is no path from A to E\");\n-    assertEquals(\"[D, C, D]\", shortestPath(g, \"D\", \"D\").toString());\n+    assertEquals(\"[D]\", shortestPath(g, \"D\", \"D\").toString());\n     assertNull(shortestPath(g, \"X\", \"A\"), \"Node X is not in the graph\");\n     assertEquals(\"[[A, B, D], [A, B, C, D]]\", paths(g, \"A\", \"D\").toString());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445406357", "bodyText": "minor: I'd use \"increasing order\" instead of \"non-decreasing order\"", "author": "rubenada", "createdAt": "2020-06-25T08:51:00Z", "path": "core/src/main/java/org/apache/calcite/util/graph/Graphs.java", "diffHunk": "@@ -102,41 +99,28 @@ public int size() {\n    */\n   public static class FrozenGraph<V, E extends DefaultEdge> {\n     private final DefaultDirectedGraph<V, E> graph;\n-    private final Map<Pair<V, V>, List<V>> shortestPaths;\n+    private final Map<Pair<V, V>, int[]> shortestDistances;\n \n     /** Creates a frozen graph as a copy of another graph. */\n     FrozenGraph(DefaultDirectedGraph<V, E> graph,\n-        Map<Pair<V, V>, List<V>> shortestPaths) {\n+        Map<Pair<V, V>, int[]> shortestDistances) {\n       this.graph = graph;\n-      this.shortestPaths = shortestPaths;\n+      this.shortestDistances = shortestDistances;\n     }\n \n     /**\n-     * Returns an iterator of all paths between two nodes, shortest first.\n+     * Returns an iterator of all paths between two nodes,\n+     * in non-decreasing order of path lengths.", "originalCommit": "259a8ce2b9c93e5d2bc2c6626a1b918749ac02ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMjYzMg==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r445712632", "bodyText": "+1", "author": "xndai", "createdAt": "2020-06-25T17:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDcwMQ==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446590701", "bodyText": "Thanks a lot for your careful review.\nIt seems there is a minor difference between increasing and non-decreasing order. A sequence is said to be in increasing order, if\na0 < a1 < ... < an\n\nIt is said to be in non-decreasing order, if\na0 <= a1 <= ... <= an\n\nFor paths between two nodes in a graph, it is possible that there are multiple paths with the same length. So the sequence of path lengths should be in non-decreasing order. What do you think", "author": "liyafan82", "createdAt": "2020-06-28T02:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NDUzNA==", "url": "https://github.com/apache/calcite/pull/2027#discussion_r446864534", "bodyText": "@liyafan82 you're right, thanks for the clarification.", "author": "rubenada", "createdAt": "2020-06-29T08:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\nindex 011c6b973..e731e173e 100644\n--- a/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n+++ b/core/src/main/java/org/apache/calcite/util/graph/Graphs.java\n\n@@ -116,6 +116,9 @@ public int size() {\n      */\n     public List<List<V>> getPaths(V from, V to) {\n       List<List<V>> list = new ArrayList<>();\n+      if (from.equals(to)) {\n+        list.add(ImmutableList.of(from));\n+      }\n       findPaths(from, to, list);\n       list.sort(Comparator.comparingInt(List::size));\n       return list;\n"}}, {"oid": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "url": "https://github.com/apache/calcite/commit/eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "message": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm", "committedDate": "2020-06-30T03:01:15Z", "type": "commit"}, {"oid": "eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "url": "https://github.com/apache/calcite/commit/eb02a6fcf6d462dbdaf2d068cc6a185bc5655b18", "message": "[CALCITE-4049] Improve the implementation of the shortest-path algorithm", "committedDate": "2020-06-30T03:01:15Z", "type": "forcePushed"}]}