{"pr_number": 2049, "pr_title": "[CALCITE-4094] Allow SqlOperator of SqlKind#OTHER_FUNCTION to define a Strong.Policy", "pr_createdAt": "2020-06-30T15:22:43Z", "pr_url": "https://github.com/apache/calcite/pull/2049", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMjU4Nw==", "url": "https://github.com/apache/calcite/pull/2049#discussion_r448732587", "bodyText": "I was thinking of adding an interface in SqlFunction, something like SqlFunction#getStrongPolicy and give it a default value.", "author": "danny0405", "createdAt": "2020-07-02T03:49:32Z", "path": "core/src/main/java/org/apache/calcite/plan/Strong.java", "diffHunk": "@@ -294,4 +319,10 @@ private boolean anyNull(List<RexNode> operands) {\n     /** This kind of expression may be null. There is no way to rewrite. */\n     AS_IS,\n   }\n+\n+  /** Interface to allow {@link SqlOperator} of kind {@link SqlKind#OTHER_FUNCTION}\n+   * to define their own {@link Policy}. */\n+  public interface PolicySupplier {\n+    Policy getPolicy();", "originalCommit": "192a1fbc854b47992e3c049c94029a80960012c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b54feb45b91d8206815a77cbd9786251806033a0", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/Strong.java b/core/src/main/java/org/apache/calcite/plan/Strong.java\nindex 595278449..745786f39 100644\n--- a/core/src/main/java/org/apache/calcite/plan/Strong.java\n+++ b/core/src/main/java/org/apache/calcite/plan/Strong.java\n\n@@ -320,9 +317,14 @@ private boolean anyNull(List<RexNode> operands) {\n     AS_IS,\n   }\n \n-  /** Interface to allow {@link SqlOperator} of kind {@link SqlKind#OTHER_FUNCTION}\n-   * to define their own {@link Policy}. */\n-  public interface PolicySupplier {\n-    Policy getPolicy();\n+  /**\n+   * Interface to allow {@link SqlOperator}s to define their own {@link Policy}.\n+   * For example, a UDF in a downstream project can implement it and have a specific policy.\n+   *\n+   * @see Strong\n+   */\n+  @API(status = API.Status.EXPERIMENTAL, since = \"1.24\")\n+  public interface PolicySupplier extends Supplier<Policy> {\n+    Policy get();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMjg1MQ==", "url": "https://github.com/apache/calcite/pull/2049#discussion_r448732851", "bodyText": "Is there any strong reason we must deprecate this interface ?\nIf we add an interface SqlFunction#getStrongPolicy, the only exception is the SqlKind.OTHER_FUNCTION, when we encounter that, a SqlFunction instance should be passed in.\nFor the other SqlKind and policy mapping, it is great if we can make the mapping configurable and pluggable, just like what we do to SqlTypeMappingRule", "author": "danny0405", "createdAt": "2020-07-02T03:50:43Z", "path": "core/src/main/java/org/apache/calcite/plan/Strong.java", "diffHunk": "@@ -85,8 +86,32 @@ public static boolean isNotTrue(RexNode node, ImmutableBitSet nullColumns) {\n   }\n \n   /** Returns how to deduce whether a particular kind of expression is null,\n-   * given whether its arguments are null. */\n+   * given whether its arguments are null.\n+   * @deprecated Use {@link Strong#policy(RexNode)} or {@link Strong#policy(SqlOperator)} */\n+  @Deprecated // to be removed before 2.0\n   public static Policy policy(SqlKind kind) {\n+    return getPolicy(kind);", "originalCommit": "192a1fbc854b47992e3c049c94029a80960012c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0NzQ2Nw==", "url": "https://github.com/apache/calcite/pull/2049#discussion_r448947467", "bodyText": "Currently, Strong#policy method works at SqlKind level, and this SqlKind can come from a RexNode, or from a SqlOperator. As discussed, the problem with the current approach is that SqlKind is not enough for SqlKind.OTHER_FUNCTION cases, for that reason I was thinking in replacing policy(SqlKind kind)  (first deprecate, eventually remove it) with the alternatives policy(RexNode rexNode) and policy(SqlOperator operator), which allows us to maintain the previous behavoir, plus be able to get some extra checks for SqlKind.OTHER_FUNCTION cases and return the other function's operator's Policy (if defined)", "author": "rubenada", "createdAt": "2020-07-02T11:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMjg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0Mzg5MQ==", "url": "https://github.com/apache/calcite/pull/2049#discussion_r449043891", "bodyText": "Apart from that, IMO changing (or making configurable) the Strong.Policy of SqlKinds is out of the scope of this ticket.", "author": "rubenada", "createdAt": "2020-07-02T14:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMjg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b54feb45b91d8206815a77cbd9786251806033a0", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/Strong.java b/core/src/main/java/org/apache/calcite/plan/Strong.java\nindex 595278449..745786f39 100644\n--- a/core/src/main/java/org/apache/calcite/plan/Strong.java\n+++ b/core/src/main/java/org/apache/calcite/plan/Strong.java\n\n@@ -85,34 +88,28 @@ public static boolean isNotTrue(RexNode node, ImmutableBitSet nullColumns) {\n     return of(nullColumns).isNotTrue(node);\n   }\n \n-  /** Returns how to deduce whether a particular kind of expression is null,\n+  /**\n+   * Returns how to deduce whether a particular kind of expression is null,\n    * given whether its arguments are null.\n-   * @deprecated Use {@link Strong#policy(RexNode)} or {@link Strong#policy(SqlOperator)} */\n-  @Deprecated // to be removed before 2.0\n+   *\n+   * @deprecated Use {@link Strong#policy(RexNode)}\n+   */\n+  @Deprecated // to be removed before 1.25\n   public static Policy policy(SqlKind kind) {\n-    return getPolicy(kind);\n+    return MAP.getOrDefault(kind, Policy.AS_IS);\n   }\n \n-  /** Returns how to deduce whether a particular {@link RexNode} is null. */\n+  /**\n+   * Returns how to deduce whether a particular {@link RexNode} expression is null,\n+   * given whether its arguments are null.\n+   */\n   public static Policy policy(RexNode rexNode) {\n-    if (rexNode instanceof RexCall) {\n-      return policy(((RexCall) rexNode).getOperator());\n+    if (rexNode instanceof RexCall\n+        && ((RexCall) rexNode).getOperator() instanceof PolicySupplier) {\n+      final PolicySupplier supplier = (PolicySupplier) ((RexCall) rexNode).getOperator();\n+      return supplier.get();\n     }\n-    return getPolicy(rexNode.getKind());\n-  }\n-\n-  /** Returns how to deduce whether a particular {@link SqlOperator} is null. */\n-  public static Policy policy(SqlOperator operator) {\n-    if (operator instanceof PolicySupplier) {\n-      return ((PolicySupplier) operator).getPolicy();\n-    }\n-    return getPolicy(operator.getKind());\n-  }\n-\n-  /** Returns how to deduce whether a particular kind of expression is null,\n-   * given whether its arguments are null. */\n-  private static Policy getPolicy(SqlKind kind) {\n-    return MAP.getOrDefault(kind, Policy.AS_IS);\n+    return MAP.getOrDefault(rexNode.getKind(), Policy.AS_IS);\n   }\n \n   /**\n"}}, {"oid": "b54feb45b91d8206815a77cbd9786251806033a0", "url": "https://github.com/apache/calcite/commit/b54feb45b91d8206815a77cbd9786251806033a0", "message": "[CALCITE-4094] Allow SqlOperator of SqlKind#OTHER_FUNCTION to define a Strong.Policy", "committedDate": "2020-07-09T06:56:40Z", "type": "commit"}, {"oid": "b54feb45b91d8206815a77cbd9786251806033a0", "url": "https://github.com/apache/calcite/commit/b54feb45b91d8206815a77cbd9786251806033a0", "message": "[CALCITE-4094] Allow SqlOperator of SqlKind#OTHER_FUNCTION to define a Strong.Policy", "committedDate": "2020-07-09T06:56:40Z", "type": "forcePushed"}]}