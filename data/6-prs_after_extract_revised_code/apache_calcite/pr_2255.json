{"pr_number": 2255, "pr_title": "[CALCITE-4393] ExceptionInInitializerError due to NPE in SqlCallBinding caused by circular dependency", "pr_createdAt": "2020-11-11T15:04:34Z", "pr_url": "https://github.com/apache/calcite/pull/2255", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5NzEyMQ==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521497121", "bodyText": "Suggest you don\u2019t create the defaultCall outside the loop. Most calls do not need default arguments.\nYou could in-line the defaultCall method, because it\u2019s very simple.", "author": "julianhyde", "createdAt": "2020-11-11T16:52:38Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -145,10 +144,11 @@ public SqlCall getCall() {\n       }\n       final SqlOperandCountRange range = checker.getOperandCountRange();\n       final List<SqlNode> list = Lists.newArrayList(operandList);\n+      final SqlCall defaultCall = createDefaultCall();\n       while (list.size() < range.getMax()\n           && checker.isOptional(list.size())\n           && checker.isFixedParameters()) {\n-        list.add(DEFAULT_CALL);\n+        list.add(defaultCall);", "originalCommit": "874f174f9bfcfe87217e77f683f7df27da91e267", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MjgwNw==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521992807", "bodyText": "Thanks, I was not aware that most case indeed did not require the default call. Changed.", "author": "rubenada", "createdAt": "2020-11-12T10:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5NzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c590954f6b31848537e3572c7da9db2c2e34292", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\nindex 9792a50c2..1d094414e 100644\n--- a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n+++ b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n\n@@ -144,11 +154,10 @@ public SqlCall getCall() {\n       }\n       final SqlOperandCountRange range = checker.getOperandCountRange();\n       final List<SqlNode> list = Lists.newArrayList(operandList);\n-      final SqlCall defaultCall = createDefaultCall();\n       while (list.size() < range.getMax()\n           && checker.isOptional(list.size())\n           && checker.isFixedParameters()) {\n-        list.add(defaultCall);\n+        list.add(DefaultCallHolder.DEFAULT_CALL);\n       }\n       return list;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMzgwMg==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521513802", "bodyText": "static? The motivation is to ensure the method does not accidentally use the fields.", "author": "vlsi", "createdAt": "2020-11-11T17:18:18Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {", "originalCommit": "874f174f9bfcfe87217e77f683f7df27da91e267", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MzEzNQ==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521993135", "bodyText": "method removed in the latest version", "author": "rubenada", "createdAt": "2020-11-12T10:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "3c590954f6b31848537e3572c7da9db2c2e34292", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\nindex 9792a50c2..1d094414e 100644\n--- a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n+++ b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n\n@@ -411,8 +420,4 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n-\n-  private SqlCall createDefaultCall() {\n-    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxNDk4OA==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521514988", "bodyText": "Should this be moved outside of the loop?", "author": "vlsi", "createdAt": "2020-11-11T17:20:18Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -201,7 +201,7 @@ private boolean hasAssignment() {\n             // with DEFAULT and then convert to nulls during sql-to-rel conversion.\n             // Thus, there is no need to show the optional operands in the plan and\n             // decide if the optional operand is null when code generation.\n-            permuted.add(DEFAULT_CALL);\n+            permuted.add(createDefaultCall());", "originalCommit": "874f174f9bfcfe87217e77f683f7df27da91e267", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c590954f6b31848537e3572c7da9db2c2e34292", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\nindex 9792a50c2..1d094414e 100644\n--- a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n+++ b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n\n@@ -201,7 +210,7 @@ private boolean hasAssignment() {\n             // with DEFAULT and then convert to nulls during sql-to-rel conversion.\n             // Thus, there is no need to show the optional operands in the plan and\n             // decide if the optional operand is null when code generation.\n-            permuted.add(createDefaultCall());\n+            permuted.add(DefaultCallHolder.DEFAULT_CALL);\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521813841", "bodyText": "Do we need to create a new call, if one already exists?", "author": "liyafan82", "createdAt": "2020-11-12T03:49:23Z", "path": "core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java", "diffHunk": "@@ -411,4 +411,8 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n+\n+  private SqlCall createDefaultCall() {\n+    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);", "originalCommit": "874f174f9bfcfe87217e77f683f7df27da91e267", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5MzgyNA==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521993824", "bodyText": "having a single static call caused a circular dependency, the purpose is to avoid it (by creating the default call ad-hoc only when needed)", "author": "rubenada", "createdAt": "2020-11-12T10:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzIwMA==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r521997200", "bodyText": "Just in case, a nested static class would avoid circular dependency as well.", "author": "vlsi", "createdAt": "2020-11-12T10:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwNjExMA==", "url": "https://github.com/apache/calcite/pull/2255#discussion_r522006110", "bodyText": "Yes... but my fear is that it would be a more \"obscure\" solution when looking at this code in the future: \"why is this static nested class here, for apparently no reason, just with a private static field...\".\nI guess it can be a good (and efficient) solution, but we'll need a clear javadoc stating the purpose of the class and why it is needed (and cannot be removed). It should be feasible, I'll commit this approach.", "author": "rubenada", "createdAt": "2020-11-12T10:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMzg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c590954f6b31848537e3572c7da9db2c2e34292", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\nindex 9792a50c2..1d094414e 100644\n--- a/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n+++ b/core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java\n\n@@ -411,8 +420,4 @@ public CalciteException newValidationError(\n   public boolean isTypeCoercionEnabled() {\n     return validator.config().typeCoercionEnabled();\n   }\n-\n-  private SqlCall createDefaultCall() {\n-    return SqlStdOperatorTable.DEFAULT.createCall(SqlParserPos.ZERO);\n-  }\n }\n"}}, {"oid": "3c590954f6b31848537e3572c7da9db2c2e34292", "url": "https://github.com/apache/calcite/commit/3c590954f6b31848537e3572c7da9db2c2e34292", "message": "[CALCITE-4393] ExceptionInInitializerError due to NPE in SqlCallBinding caused by circular dependency", "committedDate": "2020-11-13T09:48:57Z", "type": "commit"}, {"oid": "3c590954f6b31848537e3572c7da9db2c2e34292", "url": "https://github.com/apache/calcite/commit/3c590954f6b31848537e3572c7da9db2c2e34292", "message": "[CALCITE-4393] ExceptionInInitializerError due to NPE in SqlCallBinding caused by circular dependency", "committedDate": "2020-11-13T09:48:57Z", "type": "forcePushed"}]}