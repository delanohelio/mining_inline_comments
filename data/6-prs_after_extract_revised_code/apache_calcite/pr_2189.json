{"pr_number": 2189, "pr_title": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "pr_createdAt": "2020-10-03T09:21:55Z", "pr_url": "https://github.com/apache/calcite/pull/2189", "timeline": [{"oid": "84b9bed1d7db1932d6b1a2875d3dad15cd14d97b", "url": "https://github.com/apache/calcite/commit/84b9bed1d7db1932d6b1a2875d3dad15cd14d97b", "message": "[CALCITE-4251] Overload RelMetadataQuery#getColumnOrigin method (xzh)", "committedDate": "2020-10-03T09:34:56Z", "type": "forcePushed"}, {"oid": "fd27435d7bc8bc8dca31f0b2624f5ba80d025b66", "url": "https://github.com/apache/calcite/commit/fd27435d7bc8bc8dca31f0b2624f5ba80d025b66", "message": "[CALCITE-4251] Overload RelMetadataQuery#getColumnOrigin method (xzh)", "committedDate": "2020-10-06T01:51:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDI2NA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r508360264", "bodyText": "If derived == null, we would get an NPE here.", "author": "liyafan82", "createdAt": "2020-10-20T09:44:42Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +351,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (derived) {", "originalCommit": "fd27435d7bc8bc8dca31f0b2624f5ba80d025b66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkxODg4NA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r509918884", "bodyText": "If derived == null, we would get an NPE here.\n\nThanks, update the code.", "author": "xy2953396112", "createdAt": "2020-10-22T06:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDI2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3b2cf7bfb2dbd4e90d7200fa419c21ee6ff93cb9", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex db6ba5d69..0b91afba1 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -374,7 +376,7 @@ public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived)\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    if (derived) {\n+    if (BooleanUtils.isTrue(derived)) {\n       return origin;\n     }\n     return origin.isDerived() ? null : origin;\n"}}, {"oid": "3b2cf7bfb2dbd4e90d7200fa419c21ee6ff93cb9", "url": "https://github.com/apache/calcite/commit/3b2cf7bfb2dbd4e90d7200fa419c21ee6ff93cb9", "message": "[CALCITE-4251] Overload RelMetadataQuery#getColumnOrigin method (xzh)", "committedDate": "2020-10-22T06:50:33Z", "type": "forcePushed"}, {"oid": "4afd705ff1de6533bd6f049adafb165cf874a978", "url": "https://github.com/apache/calcite/commit/4afd705ff1de6533bd6f049adafb165cf874a978", "message": "[CALCITE-4251] Overload RelMetadataQuery#getColumnOrigin method (xzh)", "committedDate": "2020-11-08T14:35:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1MDkxMA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r521350910", "bodyText": "I think what you mean is\n\"\nDetermines the origin of a column, allow users to choose whether to include the derived column.\"", "author": "yanlin-Lynn", "createdAt": "2020-11-11T13:17:20Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +353,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.", "originalCommit": "4afd705ff1de6533bd6f049adafb165cf874a978", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "565c5cde3bc12f766a609a2199a21af388d78ef8", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex 0b91afba1..bd84c53b5 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -349,37 +347,15 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column provided it's a simple column;\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n-    return getColumnOrigin(rel, column, false);\n-  }\n-\n-  /**\n-   * Determines the origin of a column. If the param derived is false, provided the column maps\n-   * to a single column that isn't derived, otherwise the column is derived.\n-   *\n-   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n-   *\n-   * @param rel the RelNode of the column\n-   * @param column the offset of the column whose origin we are trying to\n-   * determine\n-   * @param derived allow column derived\n-   *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n-   */\n-  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    if (BooleanUtils.isTrue(derived)) {\n-      return origin;\n-    }\n-    return origin.isDerived() ? null : origin;\n+    return origin;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NzMyNA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r521777324", "bodyText": "Instead of overload the methods, why not return the origin directly, no matter if it is derived.", "author": "danny0405", "createdAt": "2020-11-12T02:26:23Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -351,11 +353,32 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * returns null\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n+    return getColumnOrigin(rel, column, false);\n+  }\n+\n+  /**\n+   * Determines the origin of a column. If the param derived is false, provided the column maps\n+   * to a single column that isn't derived, otherwise the column is derived.\n+   *\n+   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n+   *\n+   * @param rel the RelNode of the column\n+   * @param column the offset of the column whose origin we are trying to\n+   * determine\n+   * @param derived allow column derived\n+   *\n+   * @return the origin of a column provided it's a simple column; otherwise,\n+   * returns null\n+   */\n+  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n+    if (BooleanUtils.isTrue(derived)) {\n+      return origin;\n+    }\n     return origin.isDerived() ? null : origin;", "originalCommit": "4afd705ff1de6533bd6f049adafb165cf874a978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMzIxOQ==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522033219", "bodyText": "you are right. return the origin directly.", "author": "xy2953396112", "createdAt": "2020-11-12T11:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NzMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "565c5cde3bc12f766a609a2199a21af388d78ef8", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex 0b91afba1..bd84c53b5 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -349,37 +347,15 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column provided it's a simple column;\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n-    return getColumnOrigin(rel, column, false);\n-  }\n-\n-  /**\n-   * Determines the origin of a column. If the param derived is false, provided the column maps\n-   * to a single column that isn't derived, otherwise the column is derived.\n-   *\n-   * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n-   *\n-   * @param rel the RelNode of the column\n-   * @param column the offset of the column whose origin we are trying to\n-   * determine\n-   * @param derived allow column derived\n-   *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n-   */\n-  public RelColumnOrigin getColumnOrigin(RelNode rel, int column, Boolean derived) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    if (BooleanUtils.isTrue(derived)) {\n-      return origin;\n-    }\n-    return origin.isDerived() ? null : origin;\n+    return origin;\n   }\n \n   /**\n"}}, {"oid": "565c5cde3bc12f766a609a2199a21af388d78ef8", "url": "https://github.com/apache/calcite/commit/565c5cde3bc12f766a609a2199a21af388d78ef8", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-12T09:53:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNjc2Nw==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522106767", "bodyText": "The annotation here is in-correct.", "author": "yanlin-Lynn", "createdAt": "2020-11-12T13:31:49Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,24 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column, provided the column maps to a origin\n+   * column.", "originalCommit": "565c5cde3bc12f766a609a2199a21af388d78ef8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74856a5f06730f09dfaf0623d4d37af88aaa9703", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex bd84c53b5..607d93ad2 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -338,8 +338,7 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a origin\n-   * column.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNzE3OA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522107178", "bodyText": "The doc here does not match with the code.", "author": "yanlin-Lynn", "createdAt": "2020-11-12T13:32:25Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,24 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column, provided the column maps to a origin\n+   * column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column provided it's a simple column;", "originalCommit": "565c5cde3bc12f766a609a2199a21af388d78ef8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNTI3OA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522525278", "bodyText": "Thanks for review, update the doc.", "author": "xy2953396112", "createdAt": "2020-11-13T00:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNzE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "74856a5f06730f09dfaf0623d4d37af88aaa9703", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex bd84c53b5..607d93ad2 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -338,8 +338,7 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a origin\n-   * column.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n"}}, {"oid": "74856a5f06730f09dfaf0623d4d37af88aaa9703", "url": "https://github.com/apache/calcite/commit/74856a5f06730f09dfaf0623d4d37af88aaa9703", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-12T13:32:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUwNA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r522559504", "bodyText": "The code that uses this method should also be tweaked, such as the LoptMultiJoin.", "author": "danny0405", "createdAt": "2020-11-13T01:55:44Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n     if (origins == null || origins.size() != 1) {\n       return null;\n     }\n     final RelColumnOrigin origin = Iterables.getOnlyElement(origins);\n-    return origin.isDerived() ? null : origin;\n+    return origin;", "originalCommit": "74856a5f06730f09dfaf0623d4d37af88aaa9703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2MDMyNw==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523860327", "bodyText": "Thanks, Please review the code again.", "author": "xy2953396112", "createdAt": "2020-11-16T02:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1OTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "85faae3f2501ff9fe097ee9894c80047e6156a6b", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex 607d93ad2..080d582ef 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -346,7 +346,7 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column;\n+   * @return the origin of a column\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n"}}, {"oid": "802dde0ed961db4c5b311d41c2282b77a89ca80a", "url": "https://github.com/apache/calcite/commit/802dde0ed961db4c5b311d41c2282b77a89ca80a", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-13T02:26:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2NDcxMQ==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523864711", "bodyText": "Remove ;.", "author": "danny0405", "createdAt": "2020-11-16T02:32:07Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java", "diffHunk": "@@ -338,25 +338,23 @@ public Double getPercentageOriginalRows(RelNode rel) {\n   }\n \n   /**\n-   * Determines the origin of a column, provided the column maps to a single\n-   * column that isn't derived.\n+   * Determines the origin of a column.\n    *\n    * @see #getColumnOrigins(org.apache.calcite.rel.RelNode, int)\n    *\n    * @param rel the RelNode of the column\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column provided it's a simple column; otherwise,\n-   * returns null\n+   * @return the origin of a column;\n    */", "originalCommit": "802dde0ed961db4c5b311d41c2282b77a89ca80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NjEyNA==", "url": "https://github.com/apache/calcite/pull/2189#discussion_r523876124", "bodyText": "ok, Thanks", "author": "xy2953396112", "createdAt": "2020-11-16T03:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg2NDcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "85faae3f2501ff9fe097ee9894c80047e6156a6b", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\nindex 607d93ad2..080d582ef 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java\n\n@@ -346,7 +346,7 @@ public Double getPercentageOriginalRows(RelNode rel) {\n    * @param column the offset of the column whose origin we are trying to\n    * determine\n    *\n-   * @return the origin of a column;\n+   * @return the origin of a column\n    */\n   public RelColumnOrigin getColumnOrigin(RelNode rel, int column) {\n     final Set<RelColumnOrigin> origins = getColumnOrigins(rel, column);\n"}}, {"oid": "85faae3f2501ff9fe097ee9894c80047e6156a6b", "url": "https://github.com/apache/calcite/commit/85faae3f2501ff9fe097ee9894c80047e6156a6b", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-16T03:02:54Z", "type": "forcePushed"}, {"oid": "2f4292ee94e6e6c7154afa41d76f709dbab3a778", "url": "https://github.com/apache/calcite/commit/2f4292ee94e6e6c7154afa41d76f709dbab3a778", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-16T06:17:59Z", "type": "forcePushed"}, {"oid": "cacf8029659463621301e159964e724bd8f06fb4", "url": "https://github.com/apache/calcite/commit/cacf8029659463621301e159964e724bd8f06fb4", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-16T06:26:42Z", "type": "forcePushed"}, {"oid": "a1e3a4454e29c0e31ad1fbef5dc3d947af725bc7", "url": "https://github.com/apache/calcite/commit/a1e3a4454e29c0e31ad1fbef5dc3d947af725bc7", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-16T23:45:43Z", "type": "commit"}, {"oid": "a1e3a4454e29c0e31ad1fbef5dc3d947af725bc7", "url": "https://github.com/apache/calcite/commit/a1e3a4454e29c0e31ad1fbef5dc3d947af725bc7", "message": "[CALCITE-4251] Get the origin column, even if it is derived (xzh)", "committedDate": "2020-11-16T23:45:43Z", "type": "forcePushed"}]}