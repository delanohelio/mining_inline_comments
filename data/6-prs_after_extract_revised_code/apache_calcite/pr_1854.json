{"pr_number": 1854, "pr_title": "[CALCITE-3852] RexSimplify doesn't simplify NOT EQUAL predicates", "pr_createdAt": "2020-03-12T02:14:14Z", "pr_url": "https://github.com/apache/calcite/pull/1854", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyODA1Mg==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r391428052", "bodyText": "I think this logic could be applicable in other unknownAs modes\nIn case you want to do this only in UAF (this case) you may go further...and get into nulls.\nHowever I think that it would be better to move this out from this method into a method which is run for all simplifyAnd-s and do it generally .", "author": "kgyrtkirk", "createdAt": "2020-03-12T06:47:44Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1568,10 +1568,33 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     final Comparison comparison = Comparison.of(e);\n     // Check for comparison with null values\n     if (comparison == null\n-        || comparison.kind == SqlKind.NOT_EQUALS\n         || comparison.literal.getValue() == null) {\n       return e;\n     }\n+\n+    // Given x=5 and x is not null, x!=5 can be simplified to false.\n+    if (comparison.kind == SqlKind.NOT_EQUALS) {", "originalCommit": "684605bc29cd6790d5ee68175f57614aaad47886", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "611fc99356675540357f04e1e9bbaa80bb45692d", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\nindex de7a6e461..f4b32b276 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n\n@@ -1572,11 +1572,7 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n       return e;\n     }\n \n-    // Given x=5 and x is not null, x!=5 can be simplified to false.\n     if (comparison.kind == SqlKind.NOT_EQUALS) {\n-      if (comparison.ref.getType().isNullable()) {\n-        return e;\n-      }\n       for (RexNode node: predicates.pulledUpPredicates) {\n         final Comparison predicate = Comparison.of(node);\n         if (predicate == null\n"}}, {"oid": "611fc99356675540357f04e1e9bbaa80bb45692d", "url": "https://github.com/apache/calcite/commit/611fc99356675540357f04e1e9bbaa80bb45692d", "message": "[CALCITE-3852] RexSimplify doesn't simplify NOT EQUAL predicates", "committedDate": "2020-03-13T09:08:36Z", "type": "forcePushed"}, {"oid": "7ab36fdd61b4848a17831f9543fb824743ba19c1", "url": "https://github.com/apache/calcite/commit/7ab36fdd61b4848a17831f9543fb824743ba19c1", "message": "[CALCITE-3852] RexSimplify doesn't simplify NOT EQUAL predicates", "committedDate": "2020-03-13T09:40:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMTIxOQ==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393431219", "bodyText": "remove this line", "author": "hsyuan", "createdAt": "2020-03-17T03:52:54Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {\n+      return simplifyNotEqual(e);\n+    }\n+\n     final Comparison comparison = Comparison.of(e);\n     // Check for comparison with null values\n     if (comparison == null\n-        || comparison.kind == SqlKind.NOT_EQUALS\n         || comparison.literal.getValue() == null) {\n       return e;\n     }\n+\n+", "originalCommit": "7ab36fdd61b4848a17831f9543fb824743ba19c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwODQ2MQ==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393508461", "bodyText": "Ok.", "author": "chunweilei", "createdAt": "2020-03-17T08:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5be921831378f18dd563e9e7cf530975c1b095e", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\nindex edeb4855d..f08e0f1b6 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n\n@@ -1562,9 +1562,7 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n \n   private RexNode simplifyNotEqual(RexNode e) {\n     final Comparison comparison = Comparison.of(e);\n-    // Check for comparison with null values\n-    if (comparison == null\n-        || comparison.literal.getValue() == null) {\n+    if (comparison == null) {\n       return e;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MzIxMw==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393473213", "bodyText": "this can't happen. Please see the Comparison constructor\nplease remove:\n\nthe literal.getValue() == null checks\nand also the \"check for comparision with null values\" comment; which (after the removal) will be entirely misleading\n\nNote that: in case the literal is null; comparisions are simplifed because they are Strong.", "author": "kgyrtkirk", "createdAt": "2020-03-17T06:49:29Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null", "originalCommit": "7ab36fdd61b4848a17831f9543fb824743ba19c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNDA1MQ==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393534051", "bodyText": "Done.", "author": "chunweilei", "createdAt": "2020-03-17T09:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3MzIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "c5be921831378f18dd563e9e7cf530975c1b095e", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\nindex edeb4855d..f08e0f1b6 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n\n@@ -1562,9 +1562,7 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n \n   private RexNode simplifyNotEqual(RexNode e) {\n     final Comparison comparison = Comparison.of(e);\n-    // Check for comparison with null values\n-    if (comparison == null\n-        || comparison.literal.getValue() == null) {\n+    if (comparison == null) {\n       return e;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393474489", "bodyText": "please remove this \"nullable\" boolean - and let other parts of RexSimplify do their tricks; please note that the UnknownAs.FALSE case is not yet handled; I know in case of a second invokation of RexSimplify; that will be done - but ideally; RexSimplify should not be able to do any more simplification on a result of a previously simplification.\nconstruct the AND ; and call simplifyUnknownAs(andNode, unknownAs)", "author": "kgyrtkirk", "createdAt": "2020-03-17T06:53:42Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();", "originalCommit": "7ab36fdd61b4848a17831f9543fb824743ba19c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMTUwMQ==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393501501", "bodyText": "Makes sense.", "author": "chunweilei", "createdAt": "2020-03-17T08:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNDEzNA==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393534134", "bodyText": "Done.", "author": "chunweilei", "createdAt": "2020-03-17T09:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ3NDQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5be921831378f18dd563e9e7cf530975c1b095e", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\nindex edeb4855d..f08e0f1b6 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n\n@@ -1562,9 +1562,7 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n \n   private RexNode simplifyNotEqual(RexNode e) {\n     final Comparison comparison = Comparison.of(e);\n-    // Check for comparison with null values\n-    if (comparison == null\n-        || comparison.literal.getValue() == null) {\n+    if (comparison == null) {\n       return e;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDc5Ng==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393480796", "bodyText": "I believe the current simplification logic could be extended to also handle the case when we have an a!=0 predicate; and we have an a!=0 node to simplify.\nthis wasn't working before this patch; so it's entirely optional...", "author": "kgyrtkirk", "createdAt": "2020-03-17T07:13:26Z", "path": "core/src/main/java/org/apache/calcite/rex/RexSimplify.java", "diffHunk": "@@ -1560,18 +1560,62 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n     return RexUtil.composeConjunction(rexBuilder, terms);\n   }\n \n+  private RexNode simplifyNotEqual(RexNode e) {\n+    final Comparison comparison = Comparison.of(e);\n+    // Check for comparison with null values\n+    if (comparison == null\n+        || comparison.literal.getValue() == null) {\n+      return e;\n+    }\n+\n+    for (RexNode node: predicates.pulledUpPredicates) {\n+      final Comparison predicate = Comparison.of(node);\n+      if (predicate == null\n+          || predicate.kind != SqlKind.EQUALS\n+          || predicate.literal.getValue() == null\n+          || !predicate.ref.equals(comparison.ref)) {\n+        continue;\n+      }\n+\n+      // Given x=5 and x is not nullable, x!=5 can be simplified to false and x!=3 can be\n+      // simplified to true.\n+      // Given x=5 and x is nullable, x!=5 can be simplified to 'null and x is null' and x!=3 can\n+      // be simplified to 'null or x is not null'.\n+      final RelDataType type = comparison.ref.getType();\n+      final boolean nullable = type.isNullable();\n+      if (predicate.literal.equals(comparison.literal)) {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.AND,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(false);\n+      } else {\n+        return nullable ? rexBuilder.makeCall(SqlStdOperatorTable.OR,\n+            rexBuilder.makeNullLiteral(type),\n+            rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL, comparison.ref))\n+            : rexBuilder.makeLiteral(true);\n+      }\n+    }\n+    return e;\n+  }\n+\n   private <C extends Comparable<C>> RexNode simplifyUsingPredicates(RexNode e,\n       Class<C> clazz) {\n     if (predicates.pulledUpPredicates.isEmpty()) {\n       return e;\n     }\n+\n+    if (e.getKind() == SqlKind.NOT_EQUALS) {", "originalCommit": "7ab36fdd61b4848a17831f9543fb824743ba19c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUwMTYyNg==", "url": "https://github.com/apache/calcite/pull/1854#discussion_r393501626", "bodyText": "I am a little busy recently. So I prefer next pr to do it when I am free.", "author": "chunweilei", "createdAt": "2020-03-17T08:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c5be921831378f18dd563e9e7cf530975c1b095e", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\nindex edeb4855d..f08e0f1b6 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java\n\n@@ -1562,9 +1562,7 @@ RexNode simplifyAnd2ForUnknownAsFalse(List<RexNode> terms,\n \n   private RexNode simplifyNotEqual(RexNode e) {\n     final Comparison comparison = Comparison.of(e);\n-    // Check for comparison with null values\n-    if (comparison == null\n-        || comparison.literal.getValue() == null) {\n+    if (comparison == null) {\n       return e;\n     }\n \n"}}, {"oid": "c5be921831378f18dd563e9e7cf530975c1b095e", "url": "https://github.com/apache/calcite/commit/c5be921831378f18dd563e9e7cf530975c1b095e", "message": "[CALCITE-3852] RexSimplify doesn't simplify NOT EQUAL predicates", "committedDate": "2020-03-18T02:42:31Z", "type": "commit"}, {"oid": "c5be921831378f18dd563e9e7cf530975c1b095e", "url": "https://github.com/apache/calcite/commit/c5be921831378f18dd563e9e7cf530975c1b095e", "message": "[CALCITE-3852] RexSimplify doesn't simplify NOT EQUAL predicates", "committedDate": "2020-03-18T02:42:31Z", "type": "forcePushed"}]}