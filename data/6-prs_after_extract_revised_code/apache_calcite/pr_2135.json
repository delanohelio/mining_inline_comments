{"pr_number": 2135, "pr_title": "[CALCITE-4214] Make RelDataType.getSqlTypeName non-nullable", "pr_createdAt": "2020-09-02T20:13:00Z", "pr_url": "https://github.com/apache/calcite/pull/2135", "timeline": [{"oid": "7d1d445ffe132608a250710aa960e9be17bc4fcc", "url": "https://github.com/apache/calcite/commit/7d1d445ffe132608a250710aa960e9be17bc4fcc", "message": "[CALCITE-4214] Make RelDataType.getSqlTypeName non-nullable", "committedDate": "2020-09-02T20:12:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483007134", "bodyText": "Why is this null? How about SqlTypeName.ANY ?", "author": "xy2953396112", "createdAt": "2020-09-03T14:09:24Z", "path": "core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java", "diffHunk": "@@ -217,6 +217,12 @@ public int getScale() {\n     return SCALE_NOT_SPECIFIED;\n   }\n \n+  /**\n+   * Gets the {@link SqlTypeName} of this type.\n+   * Sub-classes must override the method to ensure the resulting value is non-nullable.\n+   *\n+   * @return SqlTypeName, never null\n+   */\n   public SqlTypeName getSqlTypeName() {\n     return null;", "originalCommit": "7d1d445ffe132608a250710aa960e9be17bc4fcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NTg3OA==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483075878", "bodyText": "The code was like that for ages, and this return null is never used in Calcite (it is always overridden).\nAnother option could be removing this implementation (the class is abstract anyway), however, that sounds like a backward-incompatible change, so I just kept the method as is.", "author": "vlsi", "createdAt": "2020-09-03T15:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0NzI5Nw==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483347297", "bodyText": "The code looks weird, the document says it never returns null but there is a default code returns null.", "author": "danny0405", "createdAt": "2020-09-04T02:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0OTQ0NA==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483349444", "bodyText": "Can we replace it with another SqlTypeName instead of null ?", "author": "xy2953396112", "createdAt": "2020-09-04T02:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwMTc0OA==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483401748", "bodyText": "I'm afraid no any default value is suitable here, for example SqlTypeName .ANY, because each SqlTypeName has a specific semantic, there is no default, returns a default value will cause confusion in some cases.", "author": "danny0405", "createdAt": "2020-09-04T05:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMjU2Mw==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483512563", "bodyText": "If no default value is suitable, maybe we should throw an UnSupportedOperationException here to make sure it is always overriden.", "author": "liyafan82", "createdAt": "2020-09-04T09:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxODU0OQ==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r483518549", "bodyText": "I would love to un-implement the method, however, it might happen that there is third-party code that extends the class, and it keeps the default return null implementation. It might even be the case that the default null implementation works because the code never tries to call methods on the result of getSqlTypeName().\nThat is why I'm inclined to keep the default return null, and deal with it later (e.g. announce the method would become abstract in 6 months).", "author": "vlsi", "createdAt": "2020-09-04T10:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjE1Mg==", "url": "https://github.com/apache/calcite/pull/2135#discussion_r495616152", "bodyText": "Just in case, there's getSqlIdentifier:\n  public SqlTypeName getSqlTypeName() {\n    // The implementations must provide non-null value, however, we keep this for compatibility\n    return castNonNull(null);\n  }\n\n  public @Nullable SqlIdentifier getSqlIdentifier() {\n    SqlTypeName typeName = getSqlTypeName();\n    if (typeName == null) {\n      return null;\n    }\nSo I would keep the method return null as before.", "author": "vlsi", "createdAt": "2020-09-27T21:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzEzNA=="}], "type": "inlineReview", "revised_code": null}]}