{"pr_number": 2017, "pr_title": "[CALCITE-4018] Support trait propagation for EnumerableValues", "pr_createdAt": "2020-06-10T00:25:30Z", "pr_url": "https://github.com/apache/calcite/pull/2017", "timeline": [{"oid": "d2e17f0d2099cec51accd0d19e21bea9e27629b9", "url": "https://github.com/apache/calcite/commit/d2e17f0d2099cec51accd0d19e21bea9e27629b9", "message": "[CALCITE-4018] Support trait propagation for EnumerableValues\n\nIn addition, add code snippet to demonstrate how to generate IndexScan on\ndemand by passing required collation through TableScan.", "committedDate": "2020-06-10T00:35:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTk3Mg==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437795972", "bodyText": "Can you add comments to describe what this for loop is doing? Sorry but I had a hard time to understand it.", "author": "amaliujia", "createdAt": "2020-06-10T00:34:05Z", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java", "diffHunk": "@@ -70,6 +74,32 @@ public static EnumerableValues create(RelOptCluster cluster,\n     return new EnumerableValues(getCluster(), rowType, tuples, traitSet);\n   }\n \n+  @Override public RelNode passThrough(final RelTraitSet required) {\n+    RelCollation collation = required.getCollation();\n+    if (collation == null || collation.isDefault()) {\n+      return null;\n+    }\n+    if (tuples.size() > 1) {\n+      Ordering<List<RexLiteral>> ordering = null;\n+      for (RelFieldCollation fc : collation.getFieldCollations()) {\n+        Ordering<List<RexLiteral>> comparator = RelMdCollation.comparator(fc);\n+        if (ordering == null) {\n+          ordering = comparator;\n+        } else {\n+          ordering = ordering.compound(comparator);\n+        }", "originalCommit": "f3a5999488d76777d65d6df9acfcf98da38a06af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5ODk3Mw==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437798973", "bodyText": "Sure, I added comments.", "author": "hsyuan", "createdAt": "2020-06-10T00:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d13e33f8e0591b01d60f4dc515642b5576151802", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java b/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\nindex d50ff655f..8c6fa5cae 100644\n--- a/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\n+++ b/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\n\n@@ -79,8 +79,11 @@ public static EnumerableValues create(RelOptCluster cluster,\n     if (collation == null || collation.isDefault()) {\n       return null;\n     }\n+\n+    // A Values with 0 or 1 rows can be ordered by any collation.\n     if (tuples.size() > 1) {\n       Ordering<List<RexLiteral>> ordering = null;\n+      // Generate ordering comparator according to the required collations.\n       for (RelFieldCollation fc : collation.getFieldCollations()) {\n         Ordering<List<RexLiteral>> comparator = RelMdCollation.comparator(fc);\n         if (ordering == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA1OQ==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437796059", "bodyText": "Could you also explain which this check?", "author": "amaliujia", "createdAt": "2020-06-10T00:34:28Z", "path": "core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java", "diffHunk": "@@ -70,6 +74,32 @@ public static EnumerableValues create(RelOptCluster cluster,\n     return new EnumerableValues(getCluster(), rowType, tuples, traitSet);\n   }\n \n+  @Override public RelNode passThrough(final RelTraitSet required) {\n+    RelCollation collation = required.getCollation();\n+    if (collation == null || collation.isDefault()) {\n+      return null;\n+    }\n+    if (tuples.size() > 1) {\n+      Ordering<List<RexLiteral>> ordering = null;\n+      for (RelFieldCollation fc : collation.getFieldCollations()) {\n+        Ordering<List<RexLiteral>> comparator = RelMdCollation.comparator(fc);\n+        if (ordering == null) {\n+          ordering = comparator;\n+        } else {\n+          ordering = ordering.compound(comparator);\n+        }\n+      }\n+      if (!ordering.isOrdered(tuples)) {\n+        return null;", "originalCommit": "f3a5999488d76777d65d6df9acfcf98da38a06af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMzYwOA==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437833608", "bodyText": "If the tuples are not sorted, we still have to add a sort on it.", "author": "chunweilei", "createdAt": "2020-06-10T03:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzNDE3Mg==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437834172", "bodyText": "@chunweilei Are you explaining to @amaliujia or just pointing out a potential bug? :)", "author": "hsyuan", "createdAt": "2020-06-10T03:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1MzM0NQ==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437853345", "bodyText": "@chunweilei Are you explaining to @amaliujia or just pointing out a potential bug? :)\n\nI am explaining to @amaliujia ~~", "author": "chunweilei", "createdAt": "2020-06-10T04:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2MzkwMg==", "url": "https://github.com/apache/calcite/pull/2017#discussion_r437863902", "bodyText": "Thanks! Now I see it better!", "author": "amaliujia", "createdAt": "2020-06-10T05:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d13e33f8e0591b01d60f4dc515642b5576151802", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java b/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\nindex d50ff655f..8c6fa5cae 100644\n--- a/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\n+++ b/core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java\n\n@@ -79,8 +79,11 @@ public static EnumerableValues create(RelOptCluster cluster,\n     if (collation == null || collation.isDefault()) {\n       return null;\n     }\n+\n+    // A Values with 0 or 1 rows can be ordered by any collation.\n     if (tuples.size() > 1) {\n       Ordering<List<RexLiteral>> ordering = null;\n+      // Generate ordering comparator according to the required collations.\n       for (RelFieldCollation fc : collation.getFieldCollations()) {\n         Ordering<List<RexLiteral>> comparator = RelMdCollation.comparator(fc);\n         if (ordering == null) {\n"}}, {"oid": "d13e33f8e0591b01d60f4dc515642b5576151802", "url": "https://github.com/apache/calcite/commit/d13e33f8e0591b01d60f4dc515642b5576151802", "message": "[CALCITE-4018] Support trait propagation for EnumerableValues\n\nIn addition, add code snippet to demonstrate how to generate IndexScan on\ndemand by passing required collation through TableScan.", "committedDate": "2020-06-10T00:45:43Z", "type": "commit"}, {"oid": "d13e33f8e0591b01d60f4dc515642b5576151802", "url": "https://github.com/apache/calcite/commit/d13e33f8e0591b01d60f4dc515642b5576151802", "message": "[CALCITE-4018] Support trait propagation for EnumerableValues\n\nIn addition, add code snippet to demonstrate how to generate IndexScan on\ndemand by passing required collation through TableScan.", "committedDate": "2020-06-10T00:45:43Z", "type": "forcePushed"}]}