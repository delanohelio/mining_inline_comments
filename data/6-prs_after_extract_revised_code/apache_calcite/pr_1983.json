{"pr_number": 1983, "pr_title": "[CALCITE-4005] Support Calc and SetOp operator in RelMdAllPredicates", "pr_createdAt": "2020-05-17T01:54:10Z", "pr_url": "https://github.com/apache/calcite/pull/1983", "timeline": [{"oid": "4023b4a34a72fd45a368a6efd74d656876fa4850", "url": "https://github.com/apache/calcite/commit/4023b4a34a72fd45a368a6efd74d656876fa4850", "message": "[CALCITE-4005] Support calc operator in RelMdAllPredicates and RelMdExpressionLineage (Xu Zhaohui)", "committedDate": "2020-06-17T00:13:25Z", "type": "forcePushed"}, {"oid": "b20dfca043f3fbf94dd3e0b8d5ea80a2029ac7b4", "url": "https://github.com/apache/calcite/commit/b20dfca043f3fbf94dd3e0b8d5ea80a2029ac7b4", "message": "[CALCITE-4005] Support calc operator in RelMdAllPredicates and RelMdExpressionLineage (Xu Zhaohui)", "committedDate": "2020-06-17T00:27:51Z", "type": "forcePushed"}, {"oid": "9efca97d010f24c4b1eb09604c8d87794d909174", "url": "https://github.com/apache/calcite/commit/9efca97d010f24c4b1eb09604c8d87794d909174", "message": "[CALCITE-4005] Support calc operator in RelMdAllPredicates and RelMdExpressionLineage (Xu Zhaohui)", "committedDate": "2020-06-27T08:51:38Z", "type": "forcePushed"}, {"oid": "ff1a44649eb7e1da9bc93dab3c453db8121812dc", "url": "https://github.com/apache/calcite/commit/ff1a44649eb7e1da9bc93dab3c453db8121812dc", "message": "[CALCITE-4005] Support Calc operator in RelMdAllPredicates and RelMdExpressionLineage (Xu Zhaohui)", "committedDate": "2020-06-27T11:11:48Z", "type": "forcePushed"}, {"oid": "1a64de3af2041cac0c6aa1e3ad1bf412ef3c3317", "url": "https://github.com/apache/calcite/commit/1a64de3af2041cac0c6aa1e3ad1bf412ef3c3317", "message": "[CALCITE-4005] Support Calc operator in RelMdAllPredicates and RelMdExpressionLineage (Xu Zhaohui)", "committedDate": "2020-10-06T02:55:06Z", "type": "forcePushed"}, {"oid": "fc5d983f5e88adb4d5669670f02e1a9c3d110cb1", "url": "https://github.com/apache/calcite/commit/fc5d983f5e88adb4d5669670f02e1a9c3d110cb1", "message": "[CALCITE-4251] Overload RelMetadataQuery#getColumnOrigin method (xzh)", "committedDate": "2020-10-06T03:00:28Z", "type": "forcePushed"}, {"oid": "26eefd8acf353f23801f3363d36dee2a759f83a8", "url": "https://github.com/apache/calcite/commit/26eefd8acf353f23801f3363d36dee2a759f83a8", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates and RelMdExpressionLineageq (xzh)", "committedDate": "2020-10-08T03:53:03Z", "type": "forcePushed"}, {"oid": "a8eaa59440f47fd2ce619697e6fed38623bd803f", "url": "https://github.com/apache/calcite/commit/a8eaa59440f47fd2ce619697e6fed38623bd803f", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates and RelMdExpressionLineag (xzh)", "committedDate": "2020-10-08T03:53:31Z", "type": "forcePushed"}, {"oid": "b54295f32c6b8dd7c75197f8c3cec678e350afb8", "url": "https://github.com/apache/calcite/commit/b54295f32c6b8dd7c75197f8c3cec678e350afb8", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates and RelMdExpressionLineag (xzh)", "committedDate": "2020-10-08T04:03:37Z", "type": "forcePushed"}, {"oid": "da3d45a81819207fc18e0ce44ce15875ddf2b3a4", "url": "https://github.com/apache/calcite/commit/da3d45a81819207fc18e0ce44ce15875ddf2b3a4", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates and RelMdExpressionLineag (xzh)", "committedDate": "2020-10-22T07:05:06Z", "type": "forcePushed"}, {"oid": "08fd4b3d22e5920d88ecd54e9726a1e26b886790", "url": "https://github.com/apache/calcite/commit/08fd4b3d22e5920d88ecd54e9726a1e26b886790", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-04T02:58:44Z", "type": "forcePushed"}, {"oid": "bc6ad6437739a9702dc06fc68118153bf03d1263", "url": "https://github.com/apache/calcite/commit/bc6ad6437739a9702dc06fc68118153bf03d1263", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-08T14:38:49Z", "type": "forcePushed"}, {"oid": "22ea3dc8d8ce22acbba667f4f1a996474262aacb", "url": "https://github.com/apache/calcite/commit/22ea3dc8d8ce22acbba667f4f1a996474262aacb", "message": "[CALCITE-4251] Support calc operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-13T00:10:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3ODMyOA==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r524078328", "bodyText": "Extract -> Extracts", "author": "chunweilei", "createdAt": "2020-11-16T10:19:16Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -120,12 +124,35 @@ public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extract predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extract predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    List<RexNode> condition = new ArrayList<>();", "originalCommit": "22ea3dc8d8ce22acbba667f4f1a996474262aacb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE0NTk2Ng==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r524145966", "bodyText": "ok", "author": "xy2953396112", "createdAt": "2020-11-16T11:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3ODMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0ead75ccff4b2330d5cf59b9234045c22e1164ee", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex f97ac2c88..d8ae5bb31 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -117,33 +117,31 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Extract predicates for a Filter.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n     return getAllFilterPredicates(filter, mq, filter.getCondition());\n   }\n \n   /**\n-   * Extract predicates for a Calc.\n+   * Extracts predicates for a Calc.\n    */\n   public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n     final RexProgram rexProgram = calc.getProgram();\n-    List<RexNode> condition = new ArrayList<>();\n+    RexNode condition = null;\n     if (rexProgram.getCondition() != null) {\n-      condition = Util.transform(ImmutableList.of(rexProgram.getCondition()),\n-          rexProgram::expandLocalRef);\n+      condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n     } else {\n       return mq.getAllPredicates(calc.getInput());\n     }\n-    assert condition.size() == 1;\n-    return getAllFilterPredicates(calc, mq, condition.get(0));\n+    return getAllFilterPredicates(calc, mq, condition);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MDUzMw==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r524080533", "bodyText": "The type of condition can be RexNode rather than List.", "author": "chunweilei", "createdAt": "2020-11-16T10:21:10Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -120,12 +124,35 @@ public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extract predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extract predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    List<RexNode> condition = new ArrayList<>();\n+    if (rexProgram.getCondition() != null) {\n+      condition = Util.transform(ImmutableList.of(rexProgram.getCondition()),\n+          rexProgram::expandLocalRef);\n+    } else {\n+      return mq.getAllPredicates(calc.getInput());", "originalCommit": "22ea3dc8d8ce22acbba667f4f1a996474262aacb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE0NjQ2MQ==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r524146461", "bodyText": "Thanks, update the code.", "author": "xy2953396112", "createdAt": "2020-11-16T11:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MDUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ead75ccff4b2330d5cf59b9234045c22e1164ee", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex f97ac2c88..d8ae5bb31 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -117,33 +117,31 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Extract predicates for a Filter.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n     return getAllFilterPredicates(filter, mq, filter.getCondition());\n   }\n \n   /**\n-   * Extract predicates for a Calc.\n+   * Extracts predicates for a Calc.\n    */\n   public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n     final RexProgram rexProgram = calc.getProgram();\n-    List<RexNode> condition = new ArrayList<>();\n+    RexNode condition = null;\n     if (rexProgram.getCondition() != null) {\n-      condition = Util.transform(ImmutableList.of(rexProgram.getCondition()),\n-          rexProgram::expandLocalRef);\n+      condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n     } else {\n       return mq.getAllPredicates(calc.getInput());\n     }\n-    assert condition.size() == 1;\n-    return getAllFilterPredicates(calc, mq, condition.get(0));\n+    return getAllFilterPredicates(calc, mq, condition);\n   }\n \n   /**\n"}}, {"oid": "0ead75ccff4b2330d5cf59b9234045c22e1164ee", "url": "https://github.com/apache/calcite/commit/0ead75ccff4b2330d5cf59b9234045c22e1164ee", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-16T11:17:34Z", "type": "forcePushed"}, {"oid": "fb3bc803a7c97b2416c89692658a8167f99abac8", "url": "https://github.com/apache/calcite/commit/fb3bc803a7c97b2416c89692658a8167f99abac8", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-16T11:26:00Z", "type": "forcePushed"}, {"oid": "1a1a11cf1506c54e8e5934f5454d6071cffea2e0", "url": "https://github.com/apache/calcite/commit/1a1a11cf1506c54e8e5934f5454d6071cffea2e0", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-18T02:49:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDYxMA==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r525910610", "bodyText": "You can put return getAllFilterPredicates(calc, mq, condition); in the if conditiion.", "author": "chunweilei", "createdAt": "2020-11-18T08:50:14Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -113,19 +115,40 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extracts predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    RexNode condition = null;\n+    if (rexProgram.getCondition() != null) {\n+      condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+    } else {\n+      return mq.getAllPredicates(calc.getInput());\n+    }\n+    return getAllFilterPredicates(calc, mq, condition);\n+  }", "originalCommit": "1a1a11cf1506c54e8e5934f5454d6071cffea2e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk0ODcyOQ==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r525948729", "bodyText": "You can put return getAllFilterPredicates(calc, mq, condition); in the if conditiion.\n\nThanks.", "author": "xy2953396112", "createdAt": "2020-11-18T09:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "a0c251010fa3cda2b0c7e58babed5d5d07585f1e", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex a89ec8cc8..a63001c45 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -133,13 +133,12 @@ public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq)\n    */\n   public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n     final RexProgram rexProgram = calc.getProgram();\n-    RexNode condition = null;\n     if (rexProgram.getCondition() != null) {\n-      condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+      final RexNode condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+      return getAllFilterPredicates(calc, mq, condition);\n     } else {\n       return mq.getAllPredicates(calc.getInput());\n     }\n-    return getAllFilterPredicates(calc, mq, condition);\n   }\n \n   /**\n"}}, {"oid": "a0c251010fa3cda2b0c7e58babed5d5d07585f1e", "url": "https://github.com/apache/calcite/commit/a0c251010fa3cda2b0c7e58babed5d5d07585f1e", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-18T09:01:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3MzAwMA==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r526573000", "bodyText": "Does this method have to be public? Maybe we should use private.", "author": "chunweilei", "createdAt": "2020-11-19T03:36:01Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -113,19 +115,39 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extracts predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    if (rexProgram.getCondition() != null) {\n+      final RexNode condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+      return getAllFilterPredicates(calc, mq, condition);\n+    } else {\n+      return mq.getAllPredicates(calc.getInput());\n+    }\n+  }\n+\n+  /**\n+   * Add the Filter condition to the list obtained from the input.\n+   */\n+  public RelOptPredicateList getAllFilterPredicates(RelNode rel,\n+      RelMetadataQuery mq, RexNode pred) {\n+    final RelNode input = rel.getInput(0);", "originalCommit": "a0c251010fa3cda2b0c7e58babed5d5d07585f1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3NDc0NA==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r526574744", "bodyText": "you are right. update the code.", "author": "xy2953396112", "createdAt": "2020-11-19T03:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3MzAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "3dc69071b1e8e906edc15d1994a92254f5847795", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex a63001c45..14e3686aa 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -144,7 +144,7 @@ public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n   /**\n    * Add the Filter condition to the list obtained from the input.\n    */\n-  public RelOptPredicateList getAllFilterPredicates(RelNode rel,\n+  private RelOptPredicateList getAllFilterPredicates(RelNode rel,\n       RelMetadataQuery mq, RexNode pred) {\n     final RelNode input = rel.getInput(0);\n     final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();\n"}}, {"oid": "3dc69071b1e8e906edc15d1994a92254f5847795", "url": "https://github.com/apache/calcite/commit/3dc69071b1e8e906edc15d1994a92254f5847795", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-19T03:40:40Z", "type": "forcePushed"}, {"oid": "a285f30fb74c3ddb66021ad9aef1f93f96554118", "url": "https://github.com/apache/calcite/commit/a285f30fb74c3ddb66021ad9aef1f93f96554118", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (xzh)", "committedDate": "2020-11-19T09:03:48Z", "type": "forcePushed"}, {"oid": "6ed97f5e8a52c36e432fc641fcd9b0832d4d2c21", "url": "https://github.com/apache/calcite/commit/6ed97f5e8a52c36e432fc641fcd9b0832d4d2c21", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (Xu Zhaohui)", "committedDate": "2020-11-19T09:57:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0NjYxMg==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r527346612", "bodyText": "How about just use rel, not rel.getInput(0) ?\nAnd add the doc, the pred comes from the parent of rel.", "author": "yanlin-Lynn", "createdAt": "2020-11-20T02:02:38Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -113,19 +115,39 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extracts predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    if (rexProgram.getCondition() != null) {\n+      final RexNode condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+      return getAllFilterPredicates(calc, mq, condition);\n+    } else {\n+      return mq.getAllPredicates(calc.getInput());\n+    }\n+  }\n+\n+  /**\n+   * Add the Filter condition to the list obtained from the input.\n+   */\n+  private RelOptPredicateList getAllFilterPredicates(RelNode rel,\n+      RelMetadataQuery mq, RexNode pred) {\n+    final RelNode input = rel.getInput(0);", "originalCommit": "6ed97f5e8a52c36e432fc641fcd9b0832d4d2c21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MTA4OA==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r527361088", "bodyText": "rel used in getAllFilterPredicates rather than only used for getInput().", "author": "xy2953396112", "createdAt": "2020-11-20T02:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0NjYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "80d838aa5438cbe6f3878a317cdffe70ce075052", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex 14e3686aa..0ece7579e 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -125,7 +125,7 @@ public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq\n    * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+    return getAllFilterPredicates(filter.getInput(), mq, filter.getCondition());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0Njc1Mg==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r527346752", "bodyText": "How about getAllFilterPredicates(calc.getInput(0), mq, condition)", "author": "yanlin-Lynn", "createdAt": "2020-11-20T02:03:13Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java", "diffHunk": "@@ -113,19 +115,39 @@ public RelOptPredicateList getAllPredicates(TableScan scan, RelMetadataQuery mq)\n   }\n \n   /**\n-   * Extract predicates for a project.\n+   * Extracts predicates for a project.\n    */\n   public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq) {\n     return mq.getAllPredicates(project.getInput());\n   }\n \n   /**\n-   * Add the Filter condition to the list obtained from the input.\n+   * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    final RelNode input = filter.getInput();\n-    final RexBuilder rexBuilder = filter.getCluster().getRexBuilder();\n-    final RexNode pred = filter.getCondition();\n+    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+  }\n+\n+  /**\n+   * Extracts predicates for a Calc.\n+   */\n+  public RelOptPredicateList getAllPredicates(Calc calc, RelMetadataQuery mq) {\n+    final RexProgram rexProgram = calc.getProgram();\n+    if (rexProgram.getCondition() != null) {\n+      final RexNode condition = rexProgram.expandLocalRef(rexProgram.getCondition());\n+      return getAllFilterPredicates(calc, mq, condition);", "originalCommit": "6ed97f5e8a52c36e432fc641fcd9b0832d4d2c21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM4MzMwOQ==", "url": "https://github.com/apache/calcite/pull/1983#discussion_r527383309", "bodyText": "ok,Thanks", "author": "xy2953396112", "createdAt": "2020-11-20T04:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0Njc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "80d838aa5438cbe6f3878a317cdffe70ce075052", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\nindex 14e3686aa..0ece7579e 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java\n\n@@ -125,7 +125,7 @@ public RelOptPredicateList getAllPredicates(Project project, RelMetadataQuery mq\n    * Extracts predicates for a Filter.\n    */\n   public RelOptPredicateList getAllPredicates(Filter filter, RelMetadataQuery mq) {\n-    return getAllFilterPredicates(filter, mq, filter.getCondition());\n+    return getAllFilterPredicates(filter.getInput(), mq, filter.getCondition());\n   }\n \n   /**\n"}}, {"oid": "80d838aa5438cbe6f3878a317cdffe70ce075052", "url": "https://github.com/apache/calcite/commit/80d838aa5438cbe6f3878a317cdffe70ce075052", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (Xu Zhaohui)", "committedDate": "2020-11-20T03:42:53Z", "type": "commit"}, {"oid": "80d838aa5438cbe6f3878a317cdffe70ce075052", "url": "https://github.com/apache/calcite/commit/80d838aa5438cbe6f3878a317cdffe70ce075052", "message": "[CALCITE-4251] Support Calc and SetOp operator in RelMdAllPredicates (Xu Zhaohui)", "committedDate": "2020-11-20T03:42:53Z", "type": "forcePushed"}]}