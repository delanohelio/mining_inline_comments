{"pr_number": 2146, "pr_title": "[CALCITE-4241] Some improvements to metadata query", "pr_createdAt": "2020-09-11T02:08:54Z", "pr_url": "https://github.com/apache/calcite/pull/2146", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyNzA5NA==", "url": "https://github.com/apache/calcite/pull/2146#discussion_r486827094", "bodyText": "RelMdUtil#areColumnsDefinitelyUniqueWhenNullsFiltered has different implementation from RelMdUtil#areColumnsDefinitelyUnique. The former one would ignore null while the other one not. Why do you say they have same behavoirs?", "author": "chunweilei", "createdAt": "2020-09-11T07:29:33Z", "path": "core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java", "diffHunk": "@@ -2064,7 +2064,7 @@ private static boolean areSelfJoinKeysUnique(RelMetadataQuery mq,\n     // are unique.  When removing self-joins, if needed, we'll later add an\n     // IS NOT NULL filter on the join keys that are nullable.  Therefore,\n     // it's ok if there are nulls in the unique key.\n-    return RelMdUtil.areColumnsDefinitelyUniqueWhenNullsFiltered(mq, leftRel,\n+    return RelMdUtil.areColumnsDefinitelyUnique(mq, leftRel,\n         joinInfo.leftSet());\n   }", "originalCommit": "dddaf5e85a912534f0b069a0f47484aa661b6363", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1NDM2Nw==", "url": "https://github.com/apache/calcite/pull/2146#discussion_r486854367", "bodyText": "@chunweilei Thanks a lot for your careful review. They are different indeed.\nHowever, areColumnsDefinitelyUniqueWhenNullsFiltered methods could be implemented in a more efficient way.", "author": "liyafan82", "createdAt": "2020-09-11T08:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyNzA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java b/core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java\nindex a701c9846..996b4cf61 100644\n--- a/core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java\n+++ b/core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java\n\n@@ -2064,7 +2064,7 @@ private static boolean areSelfJoinKeysUnique(RelMetadataQuery mq,\n     // are unique.  When removing self-joins, if needed, we'll later add an\n     // IS NOT NULL filter on the join keys that are nullable.  Therefore,\n     // it's ok if there are nulls in the unique key.\n-    return RelMdUtil.areColumnsDefinitelyUnique(mq, leftRel,\n+    return RelMdUtil.areColumnsDefinitelyUniqueWhenNullsFiltered(mq, leftRel,\n         joinInfo.leftSet());\n   }\n \n"}}, {"oid": "9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70", "url": "https://github.com/apache/calcite/commit/9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70", "message": "[CALCITE-4241] Some improvements to metadata query", "committedDate": "2020-09-11T08:20:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTI4Ng==", "url": "https://github.com/apache/calcite/pull/2146#discussion_r487615286", "bodyText": "Could you add a test case which contains null literal?", "author": "chunweilei", "createdAt": "2020-09-14T02:05:55Z", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -918,6 +918,28 @@ private void checkRelSelectivity(\n \n   @Test void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n+    RelNode rel = convertSql(\"select * from (values \"\n+        + \"(1, 2, 3), \"\n+        + \"(3, 4, 5), \"\n+        + \"(3, 4, 5), \"\n+        + \"(8, 4, 5) \"\n+        + \") t(c1, c2, c3)\");\n+    final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n+\n+    ImmutableBitSet groupKey = ImmutableBitSet.of(0, 1, 2);", "originalCommit": "9d2c0a6ec53fb0e90b8633f1b911b72d7181ff70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyODMzNw==", "url": "https://github.com/apache/calcite/pull/2146#discussion_r487628337", "bodyText": "Sure. Cases for null literals are added. Thanks for your good suggestion.", "author": "liyafan82", "createdAt": "2020-09-14T03:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bb44776ce506e52a755b3770b1837e25805e742b", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\nindex 828415b36..bb5b0fdfd 100644\n--- a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n+++ b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n\n@@ -919,24 +919,32 @@ private void checkRelSelectivity(\n   @Test void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n     RelNode rel = convertSql(\"select * from (values \"\n-        + \"(1, 2, 3), \"\n-        + \"(3, 4, 5), \"\n-        + \"(3, 4, 5), \"\n-        + \"(8, 4, 5) \"\n-        + \") t(c1, c2, c3)\");\n+        + \"(1, 2, 3, null), \"\n+        + \"(3, 4, 5, 6), \"\n+        + \"(3, 4, null, 6), \"\n+        + \"(8, 4, 5, null) \"\n+        + \") t(c1, c2, c3, c4)\");\n     final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();\n \n-    ImmutableBitSet groupKey = ImmutableBitSet.of(0, 1, 2);\n+    ImmutableBitSet groupKey = ImmutableBitSet.of(0, 1, 2, 3);\n     Double result = mq.getDistinctRowCount(rel, groupKey, null);\n-    assertThat(result, is(3D));\n+    // all rows are different\n+    assertThat(result, is(4D));\n \n     groupKey = ImmutableBitSet.of(1, 2);\n     result = mq.getDistinctRowCount(rel, groupKey, null);\n-    assertThat(result, is(2D));\n+    // rows 2 and 4 are the same in the specified columns\n+    assertThat(result, is(3D));\n \n     groupKey = ImmutableBitSet.of(0);\n     result = mq.getDistinctRowCount(rel, groupKey, null);\n+    // rows 2 and 3 are the same in the specified columns\n     assertThat(result, is(3D));\n+\n+    groupKey = ImmutableBitSet.of(3);\n+    result = mq.getDistinctRowCount(rel, groupKey, null);\n+    // the last column has 2 distinct values: 6 and null\n+    assertThat(result, is(2D));\n   }\n \n   @Test void testDistinctRowCountValues() {\n"}}, {"oid": "bb44776ce506e52a755b3770b1837e25805e742b", "url": "https://github.com/apache/calcite/commit/bb44776ce506e52a755b3770b1837e25805e742b", "message": "[CALCITE-4241] Some improvements to metadata query", "committedDate": "2020-09-14T03:06:34Z", "type": "commit"}, {"oid": "bb44776ce506e52a755b3770b1837e25805e742b", "url": "https://github.com/apache/calcite/commit/bb44776ce506e52a755b3770b1837e25805e742b", "message": "[CALCITE-4241] Some improvements to metadata query", "committedDate": "2020-09-14T03:06:34Z", "type": "forcePushed"}]}