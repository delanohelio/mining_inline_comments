{"pr_number": 2088, "pr_title": "[CALCITE-4145] Exception when query from UDF field with structured type", "pr_createdAt": "2020-07-28T08:21:16Z", "pr_url": "https://github.com/apache/calcite/pull/2088", "timeline": [{"oid": "f5d8f3e3a8a89c199ed93833f49b9819f03a7c9e", "url": "https://github.com/apache/calcite/commit/f5d8f3e3a8a89c199ed93833f49b9819f03a7c9e", "message": "[CALCITE-4145] Exception when query from UDF field with structured type", "committedDate": "2020-07-28T11:38:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxNTMwNQ==", "url": "https://github.com/apache/calcite/pull/2088#discussion_r461515305", "bodyText": "I made this change because there are some problem with the new added test case in test env with concurrency, the == check not works anymore.", "author": "danny0405", "createdAt": "2020-07-28T11:40:07Z", "path": "core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java", "diffHunk": "@@ -57,14 +59,23 @@\n   RexFieldAccess(\n       RexNode expr,\n       RelDataTypeField field) {\n+    checkValid(expr, field);\n     this.expr = expr;\n     this.field = field;\n     this.digest = expr + \".\" + field.getName();\n-    assert expr.getType().getFieldList().get(field.getIndex()) == field;\n   }\n \n   //~ Methods ----------------------------------------------------------------\n \n+  private static void checkValid(RexNode expr, RelDataTypeField field) {\n+    RelDataType exprType = expr.getType();\n+    int fieldsNum = exprType.getFieldList().size();\n+    int fieldIdx = field.getIndex();\n+    final String errMsg = \"Field \" + field + \" does not exist for expression \" + expr;\n+    Preconditions.checkArgument(fieldIdx < fieldsNum, errMsg);\n+    Preconditions.checkArgument(exprType.getFieldList().get(fieldIdx).equals(field), errMsg);\n+  }", "originalCommit": "f5d8f3e3a8a89c199ed93833f49b9819f03a7c9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b069c71b8923bdae40beffe140fe13a2c8cf6ca", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java b/core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java\nindex 55836b48e..bd0520204 100644\n--- a/core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java\n+++ b/core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java\n\n@@ -69,11 +69,11 @@\n \n   private static void checkValid(RexNode expr, RelDataTypeField field) {\n     RelDataType exprType = expr.getType();\n-    int fieldsNum = exprType.getFieldList().size();\n     int fieldIdx = field.getIndex();\n-    final String errMsg = \"Field \" + field + \" does not exist for expression \" + expr;\n-    Preconditions.checkArgument(fieldIdx < fieldsNum, errMsg);\n-    Preconditions.checkArgument(exprType.getFieldList().get(fieldIdx).equals(field), errMsg);\n+    Preconditions.checkArgument(\n+        fieldIdx < exprType.getFieldList().size()\n+            && exprType.getFieldList().get(fieldIdx).equals(field),\n+        \"Field \" + field + \" does not exist for expression \" + expr);\n   }\n \n   public RelDataTypeField getField() {\n"}}, {"oid": "4b069c71b8923bdae40beffe140fe13a2c8cf6ca", "url": "https://github.com/apache/calcite/commit/4b069c71b8923bdae40beffe140fe13a2c8cf6ca", "message": "[CALCITE-4145] Exception when query from UDF field with structured type", "committedDate": "2020-07-29T01:45:51Z", "type": "forcePushed"}, {"oid": "3961b8274e313dd18d76122d851a0979b9abb96e", "url": "https://github.com/apache/calcite/commit/3961b8274e313dd18d76122d851a0979b9abb96e", "message": "[CALCITE-4145] Exception when query from UDF field with structured type", "committedDate": "2020-07-29T02:49:50Z", "type": "commit"}, {"oid": "3961b8274e313dd18d76122d851a0979b9abb96e", "url": "https://github.com/apache/calcite/commit/3961b8274e313dd18d76122d851a0979b9abb96e", "message": "[CALCITE-4145] Exception when query from UDF field with structured type", "committedDate": "2020-07-29T02:49:50Z", "type": "forcePushed"}]}