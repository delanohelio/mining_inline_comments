{"pr_number": 2194, "pr_title": "[CALCITE-4315] NPE in RelMdUtil#checkInputForCollationAndLimit", "pr_createdAt": "2020-10-07T16:13:14Z", "pr_url": "https://github.com/apache/calcite/pull/2194", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQ0Nw==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501140447", "bodyText": "this is the NPE fix", "author": "rubenada", "createdAt": "2020-10-07T16:15:54Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java", "diffHunk": "@@ -872,23 +872,36 @@ public static boolean checkInputForCollationAndLimit(RelMetadataQuery mq,\n       RelNode input, RelCollation collation, RexNode offset, RexNode fetch) {\n     // Check if the input is already sorted\n     boolean alreadySorted = collation.getFieldCollations().isEmpty();\n-    for (RelCollation inputCollation : mq.collations(input)) {\n-      if (inputCollation.satisfies(collation)) {\n-        alreadySorted = true;\n-        break;\n+    if (!alreadySorted) {\n+      final ImmutableList<RelCollation> collations = mq.collations(input);\n+      if (collations != null) {", "originalCommit": "24f37a6d3eaa04c18e42e290adc47bbee1fe06d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODIwMw==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501148203", "bodyText": "Should it be like if (collations == null) { return false; } ?", "author": "vlsi", "createdAt": "2020-10-07T16:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUwNTMyMQ==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501505321", "bodyText": "Yes, totally. I'll change it", "author": "rubenada", "createdAt": "2020-10-08T07:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxODQ4Mw==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501518483", "bodyText": "Changed", "author": "rubenada", "createdAt": "2020-10-08T07:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "da8245e60953b846992d70d794a0ee19fc1c8472", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java\nindex 7380861ab..565ea63bc 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java\n\n@@ -874,12 +874,14 @@ public static boolean checkInputForCollationAndLimit(RelMetadataQuery mq,\n     boolean alreadySorted = collation.getFieldCollations().isEmpty();\n     if (!alreadySorted) {\n       final ImmutableList<RelCollation> collations = mq.collations(input);\n-      if (collations != null) {\n-        for (RelCollation inputCollation : collations) {\n-          if (inputCollation.satisfies(collation)) {\n-            alreadySorted = true;\n-            break;\n-          }\n+      if (collations == null) {\n+        // Cannot be determined\n+        return false;\n+      }\n+      for (RelCollation inputCollation : collations) {\n+        if (inputCollation.satisfies(collation)) {\n+          alreadySorted = true;\n+          break;\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM4Mg==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501204382", "bodyText": "Could you add a clarification why true is expected here?\nFrankly speaking, it would be hard to maintain the test if it fails with \"expected true got false\" :-/", "author": "vlsi", "createdAt": "2020-10-07T17:57:00Z", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -3132,6 +3133,35 @@ private void checkNodeTypeCount(String sql, Map<Class<? extends RelNode>, Intege\n         is(\"=($0, $1)\"));\n   }\n \n+  /** Test case for\n+   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-4315\">[CALCITE-4315]\n+   * NPE in RelMdUtil#checkInputForCollationAndLimit</a>. */\n+  @Test void testCheckInputForCollationAndLimit() {\n+    final Project rel = (Project) convertSql(\"select * from emp, dept\");\n+    final Join join = (Join) rel.getInput();\n+    final RelOptTable empTable = join.getInput(0).getTable();\n+    final RelOptTable deptTable = join.getInput(1).getTable();\n+    Frameworks.withPlanner((cluster, relOptSchema, rootSchema) -> {\n+      checkInputForCollationAndLimit(cluster, empTable, deptTable);\n+      return null;\n+    });\n+  }\n+\n+  private void checkInputForCollationAndLimit(RelOptCluster cluster, RelOptTable empTable,\n+      RelOptTable deptTable) {\n+    final RexBuilder rexBuilder = cluster.getRexBuilder();\n+    final RelMetadataQuery mq = cluster.getMetadataQuery();\n+    final List<RelHint> hints = ImmutableList.of();\n+    final LogicalTableScan empScan = LogicalTableScan.create(cluster, empTable, hints);\n+    final LogicalTableScan deptScan = LogicalTableScan.create(cluster, deptTable, hints);\n+    final LogicalJoin join =\n+        LogicalJoin.create(empScan, deptScan, ImmutableList.of(),\n+            rexBuilder.makeLiteral(true), ImmutableSet.of(), JoinRelType.INNER);\n+    assertTrue(\n+        RelMdUtil.checkInputForCollationAndLimit(mq, join, join.getTraitSet().getCollation(),\n+            null, null));", "originalCommit": "24f37a6d3eaa04c18e42e290adc47bbee1fe06d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUwNjkyMA==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501506920", "bodyText": "true is expected because we are checking the join against its own collation (so of course it is already sorted by that collation) and no limit (fetch parameter is null). In any case, checking the result of the method is not really relevant, the original problem was a NPE inside checkInputForCollationAndLimit, so for this test I can perfectly remove the assertTrue(...), and just the call checkInputForCollationAndLimit.", "author": "rubenada", "createdAt": "2020-10-08T07:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNDQwMg==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501514402", "bodyText": "It might be fine if you copy your explanation to the assert message: () -> \"we are checking the join against its own collation, fetch=null, offset=null => checkInputForCollationAndLimit must be true. join=\" + join)\nWDYT?\n\nfor this test I can perfectly remove the assertTrue(...), and just the call checkInputForCollationAndLimit.\n\nIf you remove all the asserts, then the test does not add much value. The code won't compile, and it would force the developer to handle null.", "author": "vlsi", "createdAt": "2020-10-08T07:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUyMDgwMg==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501520802", "bodyText": "The test without assert runs fine (I have just pushed a version in that way). It just executes a method that previously used to failed with a NPE, and now with the fix it runs successfully.\nBut I am ok with both (with or without assert). If you prefer, I can re-apply the assert with an explanation in the assert message.", "author": "rubenada", "createdAt": "2020-10-08T07:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NjEyMg==", "url": "https://github.com/apache/calcite/pull/2194#discussion_r501766122", "bodyText": "re-added assert, with message", "author": "rubenada", "createdAt": "2020-10-08T14:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "da8245e60953b846992d70d794a0ee19fc1c8472", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\nindex 56f66d719..6cc2e43b2 100644\n--- a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n+++ b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n\n@@ -3157,9 +3157,8 @@ private void checkInputForCollationAndLimit(RelOptCluster cluster, RelOptTable e\n     final LogicalJoin join =\n         LogicalJoin.create(empScan, deptScan, ImmutableList.of(),\n             rexBuilder.makeLiteral(true), ImmutableSet.of(), JoinRelType.INNER);\n-    assertTrue(\n-        RelMdUtil.checkInputForCollationAndLimit(mq, join, join.getTraitSet().getCollation(),\n-            null, null));\n+    RelMdUtil.checkInputForCollationAndLimit(mq, join, join.getTraitSet().getCollation(),\n+        null, null);\n   }\n \n   /**\n"}}, {"oid": "da8245e60953b846992d70d794a0ee19fc1c8472", "url": "https://github.com/apache/calcite/commit/da8245e60953b846992d70d794a0ee19fc1c8472", "message": "[CALCITE-4315] NPE in RelMdUtil#checkInputForCollationAndLimit", "committedDate": "2020-10-08T07:53:51Z", "type": "forcePushed"}, {"oid": "29122c3bfc7268670c2f9746eaf585b97d773977", "url": "https://github.com/apache/calcite/commit/29122c3bfc7268670c2f9746eaf585b97d773977", "message": "[CALCITE-4315] NPE in RelMdUtil#checkInputForCollationAndLimit", "committedDate": "2020-10-08T14:26:47Z", "type": "commit"}, {"oid": "29122c3bfc7268670c2f9746eaf585b97d773977", "url": "https://github.com/apache/calcite/commit/29122c3bfc7268670c2f9746eaf585b97d773977", "message": "[CALCITE-4315] NPE in RelMdUtil#checkInputForCollationAndLimit", "committedDate": "2020-10-08T14:26:47Z", "type": "forcePushed"}]}