{"pr_number": 2095, "pr_title": "[CALCITE-4156] ReflectiveRelMetadataProvider constructor should throw an exception (instead of assertion) when called with an empty map", "pr_createdAt": "2020-08-05T11:05:57Z", "pr_url": "https://github.com/apache/calcite/pull/2095", "timeline": [{"oid": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b", "url": "https://github.com/apache/calcite/commit/8df8c583be124a0b00b3538a7f3c7e6e145ae35b", "message": "[CALCITE-4156] ReflectiveRelMetadataProvider constructor should throw an exception (instead of assertion) when called with an empty map", "committedDate": "2020-08-05T11:02:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466171330", "bodyText": "There are many codes in Calcite use assert, should we also eliminate them ?", "author": "danny0405", "createdAt": "2020-08-06T06:21:54Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");\n+    }", "originalCommit": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5MTMwNw==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466191307", "bodyText": "No, I think generally assertions are a valid mechanism, but in this particular case in my opinion an exception is safer, for the reasons I mention in the Jira ticket: if assertions are deactivated we will not get later a runtime exception in this scenario, we will just end up silently constructing an invalid, empty ReflectiveRelMetadataProvider; and there is no mechanism in the caller module to verify this situation on its side. Hence this specific change to avoid this situation in 100% of the cases.", "author": "rubenada", "createdAt": "2020-08-06T07:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2ODkzOQ==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466268939", "bodyText": "No, I think generally assertions are a valid mechanism I'm not convinced by this, we may need to reorganize our assertion usage. Can you log an issue there ?", "author": "danny0405", "createdAt": "2020-08-06T09:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg3NA==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466293874", "bodyText": "Ok, @danny0405 . I will merge the current PR and open a separate ticket to discuss / review the general usage of assertions in the code", "author": "rubenada", "createdAt": "2020-08-06T09:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE3MTMzMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466578677", "bodyText": "Sorry I missed your PR.\nWhy not use CheckArgument in Guava?", "author": "amaliujia", "createdAt": "2020-08-06T17:39:16Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java", "diffHunk": "@@ -78,7 +78,9 @@ protected ReflectiveRelMetadataProvider(\n       ConcurrentMap<Class<RelNode>, UnboundMetadata> map,\n       Class<? extends Metadata> metadataClass0,\n       Multimap<Method, MetadataHandler> handlerMap) {\n-    assert !map.isEmpty() : \"are your methods named wrong?\";\n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(\"ReflectiveRelMetadataProvider methods map is empty\");", "originalCommit": "8df8c583be124a0b00b3538a7f3c7e6e145ae35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTA2OQ==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466679069", "bodyText": "Thanks for the feedback @amaliujia , you are right, I am considering open a follow-up PR to change it into Preconditions.checkArgument", "author": "rubenada", "createdAt": "2020-08-06T20:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4MTU2MA==", "url": "https://github.com/apache/calcite/pull/2095#discussion_r466881560", "bodyText": "@amaliujia please check #2100", "author": "rubenada", "createdAt": "2020-08-07T07:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3ODY3Nw=="}], "type": "inlineReview", "revised_code": null}]}