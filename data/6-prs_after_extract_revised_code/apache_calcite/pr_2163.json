{"pr_number": 2163, "pr_title": "[CALCITE-4273] Support get expression lineage for Calc", "pr_createdAt": "2020-09-22T11:14:48Z", "pr_url": "https://github.com/apache/calcite/pull/2163", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NzQ1MQ==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r492657451", "bodyText": "Could you please elaborate on what does explainCalc mean?", "author": "vlsi", "createdAt": "2020-09-22T11:23:24Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -3607,6 +3607,25 @@ public int size() {\n     return relBuilder.build();\n   }\n \n+  /** Explain filtering condition and projections for Calc. */\n+  public static Pair<RexNode, List<RexNode>> explainCalc(Calc calc) {", "originalCommit": "04d864777c5eb8090cf61849616501d70b6f2e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcxNTM5MA==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r493715390", "bodyText": "Maybe put a simple (non-trivial) example in the javadoc. Expressions, common sub-expressions, filter, some output fields based on constants, some input fields pruned from the output.", "author": "julianhyde", "createdAt": "2020-09-23T16:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTI2Nw==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r500925267", "bodyText": "Sure, I'll update", "author": "yanlin-Lynn", "createdAt": "2020-10-07T11:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NzQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7477c4201b471eefa7fe55244bf20624390f552f", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex 93a811978..3d457ec7f 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -3607,7 +3607,21 @@ public int size() {\n     return relBuilder.build();\n   }\n \n-  /** Explain filtering condition and projections for Calc. */\n+  /**\n+   * Explain filtering condition and projections for Calc.\n+   *\n+   * <p>For example, given\n+   * LogicalCalc(expr#0..8=[{inputs}], expr#9=[10], expr#10=[=($t7, $t9)],\n+   *  SAL=[$t5], $condition=[$t10])\n+   *   LogicalTableScan(table=[[CATALOG, SALES, EMP]])\n+   * , the explain result pair is <=($7, 10), [$5]>.\n+   * </p>\n+   * The left part of result pair is the filter condition of Calc, with local ref expanded,\n+   * the right part of result pair the the projects of Calc, with local ref expanded.\n+   *\n+   * @param calc The calc to be explained\n+   * @return The filter condition and projects pair\n+   */\n   public static Pair<RexNode, List<RexNode>> explainCalc(Calc calc) {\n     final RexShuttle shuttle = new RexShuttle() {\n       @Override public RexNode visitLocalRef(RexLocalRef localRef) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzE3Ng==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r492663176", "bodyText": "I'm afraid it is obscure what is the expected output and why is that expected. Do you think you can convert the expected value to a single string with a corresponding message that clarifies why the value is expected?\nFor instance, when testing planning rules we use full explain plan for comparison rather than adding lots assertions.", "author": "vlsi", "createdAt": "2020-09-22T11:34:50Z", "path": "core/src/test/java/org/apache/calcite/test/RelMetadataTest.java", "diffHunk": "@@ -2506,6 +2506,30 @@ private void checkPredicates(RelOptCluster cluster, RelOptTable empTable,\n     assertNull(r);\n   }\n \n+  @Test void testExpressionLineageCalc() {\n+    final RelNode rel = convertSql(\"select sal from (\\n\"\n+        + \" select * from emp) \"\n+        + \"where deptno = 10\");\n+    final RelNode tableRel = convertSql(\"select * from emp\");\n+    final HepProgramBuilder programBuilder = HepProgram.builder();\n+    programBuilder.addRuleInstance(CoreRules.PROJECT_TO_CALC);\n+    programBuilder.addRuleInstance(CoreRules.FILTER_TO_CALC);\n+    programBuilder.addRuleInstance(CoreRules.CALC_MERGE);\n+    final HepPlanner planner = new HepPlanner(programBuilder.build());\n+    planner.setRoot(rel);\n+    final RelNode optimizedRel = planner.findBestExp();\n+    final RelMetadataQuery mq = optimizedRel.getCluster().getMetadataQuery();\n+\n+    final RexNode ref = RexInputRef.of(0, optimizedRel.getRowType().getFieldList());\n+    final Set<RexNode> r = mq.getExpressionLineage(optimizedRel, ref);\n+\n+    final String inputRef = RexInputRef.of(5, tableRel.getRowType().getFieldList()).toString();\n+    assertThat(r.size(), is(1));\n+    final String resultString = r.iterator().next().toString();\n+    assertThat(resultString, startsWith(EMP_QNAME.toString()));\n+    assertThat(resultString, endsWith(inputRef));", "originalCommit": "04d864777c5eb8090cf61849616501d70b6f2e3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNjA3Nw==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r500926077", "bodyText": "This case just follow the style of other cases in this class.\nTo make it simple to read, I'll add a check for the full string result in the end of case.", "author": "yanlin-Lynn", "createdAt": "2020-10-07T11:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY2MzE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7477c4201b471eefa7fe55244bf20624390f552f", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\nindex 012a5afd8..a13a40255 100644\n--- a/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n+++ b/core/src/test/java/org/apache/calcite/test/RelMetadataTest.java\n\n@@ -2528,6 +2528,7 @@ private void checkPredicates(RelOptCluster cluster, RelOptTable empTable,\n     final String resultString = r.iterator().next().toString();\n     assertThat(resultString, startsWith(EMP_QNAME.toString()));\n     assertThat(resultString, endsWith(inputRef));\n+    assertThat(resultString, is(\"[CATALOG, SALES, EMP].#0.$5\"));\n   }\n \n   @Test void testAllPredicates() {\n"}}, {"oid": "7477c4201b471eefa7fe55244bf20624390f552f", "url": "https://github.com/apache/calcite/commit/7477c4201b471eefa7fe55244bf20624390f552f", "message": "[CALCITE-4273] Support get expression lineage for Calc", "committedDate": "2020-10-07T11:08:19Z", "type": "forcePushed"}, {"oid": "11db5b80279a375f48a4953eb3122c334f8a7f05", "url": "https://github.com/apache/calcite/commit/11db5b80279a375f48a4953eb3122c334f8a7f05", "message": "[CALCITE-4273] Support get expression lineage for Calc", "committedDate": "2020-10-15T06:44:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTc3OA==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r515829778", "bodyText": "calcFilterAndProjects  -> calcProjectsAndFilter ? Because projects are the key part.", "author": "danny0405", "createdAt": "2020-11-02T09:11:39Z", "path": "core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java", "diffHunk": "@@ -407,6 +409,35 @@ protected RelMdExpressionLineage() {}\n     return mq.getExpressionLineage(rel.getInput(), outputExpression);\n   }\n \n+  /**\n+   * Expression lineage from Calc.\n+   */\n+  public Set<RexNode> getExpressionLineage(Calc calc,\n+      RelMetadataQuery mq, RexNode outputExpression) {\n+    final RelNode input = calc.getInput();\n+    final RexBuilder rexBuilder = calc.getCluster().getRexBuilder();\n+    // Extract input fields referenced by expression\n+    final ImmutableBitSet inputFieldsUsed = extractInputRefs(outputExpression);\n+\n+    // Infer column origin expressions for given references\n+    final Map<RexInputRef, Set<RexNode>> mapping = new LinkedHashMap<>();\n+    Pair<ImmutableList<RexNode>, ImmutableList<RexNode>> calcFilterAndProjects =\n+        calc.getProgram().split();", "originalCommit": "11db5b80279a375f48a4953eb3122c334f8a7f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQwMjgxMA==", "url": "https://github.com/apache/calcite/pull/2163#discussion_r516402810", "bodyText": "OK, I'll update", "author": "yanlin-Lynn", "createdAt": "2020-11-03T02:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "96365f4f4cb12944d5c70fdab827b908ea884ad7", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java\nindex 0d092c1e5..9249be01b 100644\n--- a/core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java\n+++ b/core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java\n\n@@ -421,10 +421,10 @@ protected RelMdExpressionLineage() {}\n \n     // Infer column origin expressions for given references\n     final Map<RexInputRef, Set<RexNode>> mapping = new LinkedHashMap<>();\n-    Pair<ImmutableList<RexNode>, ImmutableList<RexNode>> calcFilterAndProjects =\n+    Pair<ImmutableList<RexNode>, ImmutableList<RexNode>> calcProjectsAndFilter =\n         calc.getProgram().split();\n     for (int idx : inputFieldsUsed) {\n-      final RexNode inputExpr = calcFilterAndProjects.getKey().get(idx);\n+      final RexNode inputExpr = calcProjectsAndFilter.getKey().get(idx);\n       final Set<RexNode> originalExprs = mq.getExpressionLineage(input, inputExpr);\n       if (originalExprs == null) {\n         // Bail out\n"}}, {"oid": "96365f4f4cb12944d5c70fdab827b908ea884ad7", "url": "https://github.com/apache/calcite/commit/96365f4f4cb12944d5c70fdab827b908ea884ad7", "message": "[CALCITE-4273] Support get expression lineage for Calc", "committedDate": "2020-11-03T02:53:53Z", "type": "commit"}, {"oid": "96365f4f4cb12944d5c70fdab827b908ea884ad7", "url": "https://github.com/apache/calcite/commit/96365f4f4cb12944d5c70fdab827b908ea884ad7", "message": "[CALCITE-4273] Support get expression lineage for Calc", "committedDate": "2020-11-03T02:53:53Z", "type": "forcePushed"}]}