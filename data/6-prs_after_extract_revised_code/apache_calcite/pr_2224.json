{"pr_number": 2224, "pr_title": "[CALCITE-4332] Improve error when planning rule produces a relational\u2026", "pr_createdAt": "2020-10-19T06:32:11Z", "pr_url": "https://github.com/apache/calcite/pull/2224", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNjc1Nw==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507516757", "bodyText": "Please, remove that.\nThe field count says nothing, and it would be a nightmare to debug errors saying \"one is 5, another one is 6\"\nPlease incorporate that into \"extra field\" / \"field removed\" message.", "author": "vlsi", "createdAt": "2020-10-19T07:05:02Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();", "originalCommit": "e10f5c51380328dc7b8284920b38b294d62f3ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2OTgwMA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507569800", "bodyText": "Sounds reasonable.", "author": "chunweilei", "createdAt": "2020-10-19T08:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNjc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex d37001b97..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2207,21 +2207,23 @@ public static boolean equal(\n     return litmus.succeed();\n   }\n \n-  public static String getFullTypeDifferenceString(RelDataType other,\n-      RelDataType another) {\n-    if (other == another) {\n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n       return \"\";\n     }\n \n-    if (other.getFieldCount() != another.getFieldCount()) {\n-      return \"Type mismatch: the field size is not equal,\"\n-         + \" one is \" + other.getFieldCount()\n-         + \", another one is \" + another.getFieldCount();\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n-    final List<RelDataTypeField> f1 = other.getFieldList();\n-    final List<RelDataTypeField> f2 = another.getFieldList();\n+    final StringBuilder stringBuilder = new StringBuilder();\n+    final List<RelDataTypeField> f1 = source.getFieldList();\n+    final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n       final RelDataType type1 = pair.left.getType();\n       final RelDataType type2 = pair.right.getType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxODIwOQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507518209", "bodyText": "It is better if we can make a difference which is the source type and which is the target type.", "author": "danny0405", "createdAt": "2020-10-19T07:08:07Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();\n+    }", "originalCommit": "e10f5c51380328dc7b8284920b38b294d62f3ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2OTY3NQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507569675", "bodyText": "Good idea.", "author": "chunweilei", "createdAt": "2020-10-19T08:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxODIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex d37001b97..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2207,21 +2207,23 @@ public static boolean equal(\n     return litmus.succeed();\n   }\n \n-  public static String getFullTypeDifferenceString(RelDataType other,\n-      RelDataType another) {\n-    if (other == another) {\n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n       return \"\";\n     }\n \n-    if (other.getFieldCount() != another.getFieldCount()) {\n-      return \"Type mismatch: the field size is not equal,\"\n-         + \" one is \" + other.getFieldCount()\n-         + \", another one is \" + another.getFieldCount();\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n-    final List<RelDataTypeField> f1 = other.getFieldList();\n-    final List<RelDataTypeField> f2 = another.getFieldList();\n+    final StringBuilder stringBuilder = new StringBuilder();\n+    final List<RelDataTypeField> f1 = source.getFieldList();\n+    final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n       final RelDataType type1 = pair.left.getType();\n       final RelDataType type2 = pair.right.getType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507519887", "bodyText": "Do you think the method could take a lambda for the equivalence rather than baking the logic here?\nI think we should use reuse the comparison rather than duplicate logic.", "author": "vlsi", "createdAt": "2020-10-19T07:11:34Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType other,\n+      RelDataType another) {\n+    if (other == another) {\n+      return \"\";\n+    }\n+\n+    if (other.getFieldCount() != another.getFieldCount()) {\n+      return \"Type mismatch: the field size is not equal,\"\n+         + \" one is \" + other.getFieldCount()\n+         + \", another one is \" + another.getFieldCount();\n+    }\n+\n+    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n+    final List<RelDataTypeField> f1 = other.getFieldList();\n+    final List<RelDataTypeField> f2 = another.getFieldList();\n+    for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n+      final RelDataType type1 = pair.left.getType();\n+      final RelDataType type2 = pair.right.getType();\n+      // If one of the types is ANY comparison should succeed\n+      if (type1.getSqlTypeName() == SqlTypeName.ANY\n+          || type2.getSqlTypeName() == SqlTypeName.ANY) {", "originalCommit": "e10f5c51380328dc7b8284920b38b294d62f3ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzNzE4MQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507637181", "bodyText": "Do you mean this method is the same as #areRowTypesEqual?", "author": "chunweilei", "createdAt": "2020-10-19T10:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjQ1OA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507676458", "bodyText": "yes, the method is the same.", "author": "vlsi", "createdAt": "2020-10-19T11:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNzkwNg==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507717906", "bodyText": "They are a bit different. areRowTypesEqual would quit immediately if two fields are not equal, while getFullTypeDifferenceString would find all the different fields.", "author": "chunweilei", "createdAt": "2020-10-19T12:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMDE1MQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507830151", "bodyText": "I mean the comparison rules should better be reused rather than duplicated.", "author": "vlsi", "createdAt": "2020-10-19T15:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MTg5MA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508171890", "bodyText": "I could not figure out a way to reuse those codes elegantly. Feel free to improve it if you have one~~", "author": "chunweilei", "createdAt": "2020-10-20T02:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxOTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex d37001b97..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2207,21 +2207,23 @@ public static boolean equal(\n     return litmus.succeed();\n   }\n \n-  public static String getFullTypeDifferenceString(RelDataType other,\n-      RelDataType another) {\n-    if (other == another) {\n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n       return \"\";\n     }\n \n-    if (other.getFieldCount() != another.getFieldCount()) {\n-      return \"Type mismatch: the field size is not equal,\"\n-         + \" one is \" + other.getFieldCount()\n-         + \", another one is \" + another.getFieldCount();\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n-    final List<RelDataTypeField> f1 = other.getFieldList();\n-    final List<RelDataTypeField> f2 = another.getFieldList();\n+    final StringBuilder stringBuilder = new StringBuilder();\n+    final List<RelDataTypeField> f1 = source.getFieldList();\n+    final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n       final RelDataType type1 = pair.left.getType();\n       final RelDataType type2 = pair.right.getType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUyMDM3Ng==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507520376", "bodyText": "This is nice, however, can you please add a planning case as well to see which message comes out of a planner?", "author": "vlsi", "createdAt": "2020-10-19T07:12:32Z", "path": "core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java", "diffHunk": "@@ -130,6 +130,43 @@\n         Util.toLinux(RelOptUtil.dumpType(t2) + \"\\n\"));\n   }\n \n+  @Test void testTypeDifference() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RelDataType t1 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+\n+    RelDataType t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 5)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f1: VARCHAR(10) NOT NULL -> VARCHAR(5) NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 4, 2)\n+            .add(\"f1\", SqlTypeName.BIGINT)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f0: DECIMAL(5, 2) NOT NULL -> DECIMAL(4, 2) NOT NULL\",\n+            \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));", "originalCommit": "e10f5c51380328dc7b8284920b38b294d62f3ff8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2OTk3OA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507569978", "bodyText": "With pleasure.", "author": "chunweilei", "createdAt": "2020-10-19T08:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUyMDM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java b/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\nindex 0843da3dd..3406552c0 100644\n--- a/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\n+++ b/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\n\n@@ -165,6 +166,15 @@\n             \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n             \"\"),\n         Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+    // Test identical types.\n+    assertThat(RelOptUtil.getFullTypeDifferenceString(t1, t2), equalTo(\"\"));\n+    assertThat(RelOptUtil.getFullTypeDifferenceString(t1, t1), equalTo(\"\"));\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjYzNw==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507676637", "bodyText": "Is this method used anywhere?", "author": "vlsi", "createdAt": "2020-10-19T11:37:02Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));", "originalCommit": "6e09e5db15516482bdc123e72f014140cd01fd0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNTgxOQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507715819", "bodyText": "Yes. Some classes use the method.", "author": "chunweilei", "createdAt": "2020-10-19T12:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyODY0OA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507828648", "bodyText": "It looks like the error message would duplicate full types multiple times: once from type1.getFullTypeString() and the second time would be from getFullTypeDifferenceString", "author": "vlsi", "createdAt": "2020-10-19T15:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MTAzNQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508171035", "bodyText": "Sometimes users want to know both what the source type or the target type is and their difference.", "author": "chunweilei", "createdAt": "2020-10-20T02:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NjYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex 11af92564..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2213,13 +2213,15 @@ public static String getFullTypeDifferenceString(RelDataType source,\n       return \"\";\n     }\n \n-    if (source.getFieldCount() > target.getFieldCount()) {\n-      return \"Type mismatch: the target type has less fields than the source type\";\n-    } else if (source.getFieldCount() < target.getFieldCount()) {\n-      return \"Type mismatch: the target type has more fields than the source type\";\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n+    final StringBuilder stringBuilder = new StringBuilder();\n     final List<RelDataTypeField> f1 = source.getFieldList();\n     final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyOTQ3NQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r507829475", "bodyText": "I'm afraid Type mismatch: the target type has less fields than the source type provides very little information to the developer on what is wrong.", "author": "vlsi", "createdAt": "2020-10-19T15:07:10Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    if (source.getFieldCount() > target.getFieldCount()) {\n+      return \"Type mismatch: the target type has less fields than the source type\";", "originalCommit": "6e09e5db15516482bdc123e72f014140cd01fd0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3MTQzMw==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508171433", "bodyText": "The error message is a hint to tell what may be wrong. From my experience, it is enough.", "author": "chunweilei", "createdAt": "2020-10-20T02:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyOTQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NDA3OA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508344078", "bodyText": "Agreed with @vlsi , it may be helpful to provide the field count.\nIf so, there is no need to distinguish the cases for source count > target count and source count < target count.", "author": "liyafan82", "createdAt": "2020-10-20T09:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyOTQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex 11af92564..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2213,13 +2213,15 @@ public static String getFullTypeDifferenceString(RelDataType source,\n       return \"\";\n     }\n \n-    if (source.getFieldCount() > target.getFieldCount()) {\n-      return \"Type mismatch: the target type has less fields than the source type\";\n-    } else if (source.getFieldCount() < target.getFieldCount()) {\n-      return \"Type mismatch: the target type has more fields than the source type\";\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n+    final StringBuilder stringBuilder = new StringBuilder();\n     final List<RelDataTypeField> f1 = source.getFieldList();\n     final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODEyNA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508348124", "bodyText": "If the fields are identical, we should not have the prefix \"Type mismatch\"?", "author": "liyafan82", "createdAt": "2020-10-20T09:26:28Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,49 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    if (source.getFieldCount() > target.getFieldCount()) {\n+      return \"Type mismatch: the target type has less fields than the source type\";\n+    } else if (source.getFieldCount() < target.getFieldCount()) {\n+      return \"Type mismatch: the target type has more fields than the source type\";\n+    }\n+\n+    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");", "originalCommit": "6e09e5db15516482bdc123e72f014140cd01fd0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NDk3OQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508364979", "bodyText": "Makes sense.", "author": "chunweilei", "createdAt": "2020-10-20T09:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex 11af92564..8a813c2d9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2213,13 +2213,15 @@ public static String getFullTypeDifferenceString(RelDataType source,\n       return \"\";\n     }\n \n-    if (source.getFieldCount() > target.getFieldCount()) {\n-      return \"Type mismatch: the target type has less fields than the source type\";\n-    } else if (source.getFieldCount() < target.getFieldCount()) {\n-      return \"Type mismatch: the target type has more fields than the source type\";\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";\n     }\n \n-    final StringBuilder stringBuilder = new StringBuilder(\"Type mismatch: \\n\");\n+    final StringBuilder stringBuilder = new StringBuilder();\n     final List<RelDataTypeField> f1 = source.getFieldList();\n     final List<RelDataTypeField> f2 = target.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDA2MQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508350061", "bodyText": "Please use assertThrows to make sure that an exception is actually thrown.", "author": "liyafan82", "createdAt": "2020-10-20T09:29:12Z", "path": "core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java", "diffHunk": "@@ -296,6 +300,32 @@\n                 \"PhysSingleRel:RelSubset#0.PHYS.[]\")));\n   }\n \n+  @Test void testTypeMismatch() {\n+    VolcanoPlanner planner = new VolcanoPlanner();\n+    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);\n+    planner.addRule(MockPhysLeafRule.INSTANCE);\n+\n+    RelOptCluster cluster = newCluster(planner);\n+    NoneLeafRel leafRel =\n+        new NoneLeafRel(\n+            cluster,\n+            \"a\");\n+    RelNode convertedRel =\n+        planner.changeTraits(\n+            leafRel,\n+            cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n+    planner.setRoot(convertedRel);\n+    try {\n+      planner.chooseDelegate().findBestExp();\n+    } catch (RuntimeException e) {", "originalCommit": "6e09e5db15516482bdc123e72f014140cd01fd0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNzAwNw==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r509007007", "bodyText": "Done. Thank you for your advice.", "author": "chunweilei", "createdAt": "2020-10-21T05:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MDA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java b/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java\nindex 799f78ca5..6d9228f55 100644\n--- a/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java\n+++ b/core/src/test/java/org/apache/calcite/plan/volcano/VolcanoPlannerTest.java\n\n@@ -315,15 +316,16 @@\n             leafRel,\n             cluster.traitSetOf(PHYS_CALLING_CONVENTION));\n     planner.setRoot(convertedRel);\n-    try {\n+\n+    RuntimeException ex = assertThrows(RuntimeException.class, () -> {\n       planner.chooseDelegate().findBestExp();\n-    } catch (RuntimeException e) {\n-      Throwable exception = ExceptionUtils.getRootCause(e);\n-      assertThat(exception, instanceOf(IllegalArgumentException.class));\n-      assertThat(\n-          exception.getMessage(), isLinux(\"Type mismatch: \\n\"\n-              + \"this: JavaType(class java.lang.Integer) -> JavaType(void) NOT NULL\\n\"));\n-    }\n+    }, \"Should throw exception fail since the type mismatches after applying rule.\");\n+\n+    Throwable exception = ExceptionUtils.getRootCause(ex);\n+    assertThat(exception, instanceOf(IllegalArgumentException.class));\n+    assertThat(\n+        exception.getMessage(), isLinux(\"Type mismatch: \\n\"\n+            + \"this: JavaType(class java.lang.Integer) -> JavaType(void) NOT NULL\\n\"));\n   }\n \n   private static <E extends Comparable> List<E> sort(List<E> list) {\n"}}, {"oid": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "url": "https://github.com/apache/calcite/commit/c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "message": "address comment", "committedDate": "2020-10-20T11:19:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2MzQ5Mg==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r508963492", "bodyText": "Maybe we also need a test case for which the types are identical, and the difference string is empty?", "author": "liyafan82", "createdAt": "2020-10-21T03:15:11Z", "path": "core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java", "diffHunk": "@@ -130,6 +130,43 @@\n         Util.toLinux(RelOptUtil.dumpType(t2) + \"\\n\"));\n   }\n \n+  @Test void testTypeDifference() {\n+    final RelDataTypeFactory typeFactory =\n+        new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n+    final RelDataType t1 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+\n+    RelDataType t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 5)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f1: VARCHAR(10) NOT NULL -> VARCHAR(5) NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 4, 2)\n+            .add(\"f1\", SqlTypeName.BIGINT)\n+            .build();\n+\n+    TestUtil.assertEqualsVerbose(\n+        TestUtil.fold(\n+            \"Type mismatch: \",\n+            \"f0: DECIMAL(5, 2) NOT NULL -> DECIMAL(4, 2) NOT NULL\",\n+            \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n+            \"\"),\n+        Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+  }", "originalCommit": "c5a2eb7d41c40df65c0f0b98db909f9a7e8d2b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNzExMQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r509007111", "bodyText": "Makes sense.", "author": "chunweilei", "createdAt": "2020-10-21T05:55:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk2MzQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "chunk": "diff --git a/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java b/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\nindex 0843da3dd..3406552c0 100644\n--- a/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\n+++ b/core/src/test/java/org/apache/calcite/plan/RelOptUtilTest.java\n\n@@ -165,6 +166,15 @@\n             \"f1: VARCHAR(10) NOT NULL -> BIGINT NOT NULL\",\n             \"\"),\n         Util.toLinux(RelOptUtil.getFullTypeDifferenceString(t1, t2) + \"\\n\"));\n+\n+    t2 =\n+        typeFactory.builder()\n+            .add(\"f0\", SqlTypeName.DECIMAL, 5, 2)\n+            .add(\"f1\", SqlTypeName.VARCHAR, 10)\n+            .build();\n+    // Test identical types.\n+    assertThat(RelOptUtil.getFullTypeDifferenceString(t1, t2), equalTo(\"\"));\n+    assertThat(RelOptUtil.getFullTypeDifferenceString(t1, t1), equalTo(\"\"));\n   }\n \n   /**\n"}}, {"oid": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "url": "https://github.com/apache/calcite/commit/7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type", "committedDate": "2020-10-22T02:24:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjk5MQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r510502991", "bodyText": "The message does not help developers.\nHere's a long-standing issue for JUnit4 which was finally fixed in 4.13\nhttps://github.com/junit-team/junit4/blob/HEAD/doc/ReleaseNotes4.13.md#pull-request-1300-show-contents-of-actual-array-when-array-lengths-differ\n\nPreviously, when comparing two arrays which differ in length, assertArrayEquals() would only report that they differ in length. Now, it does the usual array comparison even when arrays differ in length, producing a failure message which combines the difference in length and the first difference in content. Where the content is another array, it is described by its type and length\n\nThat is why \"source has 5 fields, target has 4 fields\" is not really much better than \"something is different\", and it indeed is way worse than the previous error which produced full type dump. At least, there was a possibility to manually inspect and compare types, and now it is lost.", "author": "vlsi", "createdAt": "2020-10-22T22:55:44Z", "path": "core/src/main/java/org/apache/calcite/plan/RelOptUtil.java", "diffHunk": "@@ -2199,13 +2199,57 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\",\n+      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n           desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString());\n+          desc2, type2.getFullTypeString(),\n+          getFullTypeDifferenceString(type1, type2));\n     }\n     return litmus.succeed();\n   }\n \n+  public static String getFullTypeDifferenceString(RelDataType source,\n+      RelDataType target) {\n+    if (source == target) {\n+      return \"\";\n+    }\n+\n+    final int sourceFieldCount = source.getFieldCount();\n+    final int targetFieldCount = target.getFieldCount();\n+    if (sourceFieldCount != targetFieldCount) {\n+      return \"Type mismatch: the field size of source and target are not equal, \"\n+          + \"the source type has \" + sourceFieldCount + \" fields, \"\n+          + \"while the target type has \" + targetFieldCount + \" fields\";", "originalCommit": "7bdc1ba4beff32624e6d6e1dbca51913b41d2fd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4MTI1OQ==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r510581259", "bodyText": "+1, let's also keep the full type dump.", "author": "danny0405", "createdAt": "2020-10-23T04:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTg2NA==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r510675864", "bodyText": "Sounds reasonable.", "author": "chunweilei", "createdAt": "2020-10-23T07:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwMjI1Ng==", "url": "https://github.com/apache/calcite/pull/2224#discussion_r510702256", "bodyText": "@vlsi If the size is not equal, the user should fix it first. Then the user would know the difference if the types are not equal.", "author": "chunweilei", "createdAt": "2020-10-23T07:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ca17213bfbda0e2f97441b81461e7adc70d609d", "chunk": "diff --git a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\nindex 8a813c2d9..54575d7c9 100644\n--- a/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n+++ b/core/src/main/java/org/apache/calcite/plan/RelOptUtil.java\n\n@@ -2199,51 +2199,55 @@ public static boolean equal(\n       RelDataType type2,\n       Litmus litmus) {\n     if (!areRowTypesEqual(type1, type2, false)) {\n-      return litmus.fail(\"Type mismatch:\\n{}:\\n{}\\n{}:\\n{}\\ndifference:\\n{}\",\n-          desc1, type1.getFullTypeString(),\n-          desc2, type2.getFullTypeString(),\n-          getFullTypeDifferenceString(type1, type2));\n+      return litmus.fail(getFullTypeDifferenceString(desc1, type1, desc2, type2));\n     }\n     return litmus.succeed();\n   }\n \n-  public static String getFullTypeDifferenceString(RelDataType source,\n-      RelDataType target) {\n-    if (source == target) {\n+  public static String getFullTypeDifferenceString(\n+      final String sourceDesc,\n+      RelDataType sourceType,\n+      final String targetDesc,\n+      RelDataType targetType\n+  ) {\n+    if (sourceType == targetType) {\n       return \"\";\n     }\n \n-    final int sourceFieldCount = source.getFieldCount();\n-    final int targetFieldCount = target.getFieldCount();\n+    final int sourceFieldCount = sourceType.getFieldCount();\n+    final int targetFieldCount = targetType.getFieldCount();\n     if (sourceFieldCount != targetFieldCount) {\n-      return \"Type mismatch: the field size of source and target are not equal, \"\n-          + \"the source type has \" + sourceFieldCount + \" fields, \"\n-          + \"while the target type has \" + targetFieldCount + \" fields\";\n+      return \"Type mismatch: the field sizes are not equal.\\n\"\n+          + sourceDesc + \": \" + sourceType.getFullTypeString() + \"\\n\"\n+          + targetDesc + \": \" + targetType.getFullTypeString();\n     }\n \n     final StringBuilder stringBuilder = new StringBuilder();\n-    final List<RelDataTypeField> f1 = source.getFieldList();\n-    final List<RelDataTypeField> f2 = target.getFieldList();\n+    final List<RelDataTypeField> f1 = sourceType.getFieldList();\n+    final List<RelDataTypeField> f2 = targetType.getFieldList();\n     for (Pair<RelDataTypeField, RelDataTypeField> pair : Pair.zip(f1, f2)) {\n-      final RelDataType type1 = pair.left.getType();\n-      final RelDataType type2 = pair.right.getType();\n+      final RelDataType t1 = pair.left.getType();\n+      final RelDataType t2 = pair.right.getType();\n       // If one of the types is ANY comparison should succeed\n-      if (type1.getSqlTypeName() == SqlTypeName.ANY\n-          || type2.getSqlTypeName() == SqlTypeName.ANY) {\n+      if (sourceType.getSqlTypeName() == SqlTypeName.ANY\n+          || targetType.getSqlTypeName() == SqlTypeName.ANY) {\n         continue;\n       }\n-      if (!type1.equals(type2)) {\n+      if (!t1.equals(t2)) {\n         stringBuilder.append(pair.left.getName());\n         stringBuilder.append(\": \");\n-        stringBuilder.append(type1.getFullTypeString());\n+        stringBuilder.append(t1.getFullTypeString());\n         stringBuilder.append(\" -> \");\n-        stringBuilder.append(type2.getFullTypeString());\n+        stringBuilder.append(t2.getFullTypeString());\n         stringBuilder.append(\"\\n\");\n       }\n     }\n     final String difference = stringBuilder.toString();\n     if (!difference.isEmpty()) {\n-      return \"Type mismatch: \\n\"\n+      return \"Type mismatch:\\n\"\n+          + sourceDesc + \": \" + sourceType.getFullTypeString() + \"\\n\"\n+          + targetDesc + \": \" + targetType.getFullTypeString() + \"\\n\"\n+          + \"Difference:\\n\"\n           + difference;\n     } else {\n       return \"\";\n"}}, {"oid": "2ca17213bfbda0e2f97441b81461e7adc70d609d", "url": "https://github.com/apache/calcite/commit/2ca17213bfbda0e2f97441b81461e7adc70d609d", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type", "committedDate": "2020-10-27T02:17:32Z", "type": "commit"}, {"oid": "2ca17213bfbda0e2f97441b81461e7adc70d609d", "url": "https://github.com/apache/calcite/commit/2ca17213bfbda0e2f97441b81461e7adc70d609d", "message": "[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type", "committedDate": "2020-10-27T02:17:32Z", "type": "forcePushed"}]}