{"pr_number": 581, "pr_title": "Cleanup stack test", "pr_createdAt": "2020-03-28T00:32:32Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/581", "timeline": [{"oid": "e412e9fdeb5bbd837f85fd6aad56746e0e8ea5b2", "url": "https://github.com/vmware/differential-datalog/commit/e412e9fdeb5bbd837f85fd6aad56746e0e8ea5b2", "message": "Cleanup stack test", "committedDate": "2020-03-28T01:09:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMDgzNA==", "url": "https://github.com/vmware/differential-datalog/pull/581#discussion_r400420834", "bodyText": "This line should be updated, following #587 (comment)\n\n-> os.equals(\"mac os x\")\n-> \"dylib\", not \"dynlib\"", "author": "lalithsuresh", "createdAt": "2020-03-30T18:56:03Z", "path": "java/ddlogapi/DDlogAPI.java", "diffHunk": "@@ -468,4 +470,134 @@ static public synchronized void logSetDefaultCallback(ObjIntConsumer<String> cb,\n             defaultLogCBInfo = new Long(new_cbinfo);\n         }\n     }\n+\n+    /******************************************/\n+\n+    /**\n+     * Get the path where DDlog is installed. This queries the DDLOG_HOME\n+     * environment variable. This throws if the variable is not set.\n+     */\n+    public static String ddlogInstallationPath() throws DDlogException {\n+        String ddlogHome = System.getenv(\"DDLOG_HOME\");\n+        if (ddlogHome == null)\n+            throw new DDlogException(\"No DDLOG_HOME\");\n+        return ddlogHome;\n+    }\n+\n+    /**\n+     * Run an external process by executing the specified command.\n+     * @param commands        Command and arguments.\n+     * @param workdirectory   If not null the working directory.\n+     * @return                The exit code of the process.  On error prints\n+     *                        the process stderr on stderr.\n+     */\n+    private static int runProcess(List<String> commands, String workdirectory) {\n+        try {\n+            System.out.println(\"Running \" + String.join(\" \", commands) +\n+                (workdirectory != null ? \" in \" + workdirectory : \"\"));\n+            ProcessBuilder pb = new ProcessBuilder(commands);\n+            pb.redirectErrorStream(true);\n+            if (workdirectory != null) {\n+                pb.directory(new File(workdirectory));\n+            }\n+            Process process = pb.start();\n+\n+            StringBuilder out = new StringBuilder();\n+            BufferedReader br = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                out.append(line).append('\\n');\n+            }\n+\n+            int exitCode = process.waitFor();\n+            if (exitCode != 0) {\n+                System.err.println(\"Error running \" + String.join(\" \", commands));\n+                System.err.println(out.toString());\n+            }\n+            return exitCode;\n+        } catch (Exception ex) {\n+            System.err.println(\"Error running \" + String.join(\" \", commands));\n+            System.err.println(ex.getMessage());\n+            return 1;\n+        }\n+    }\n+\n+    public static String libName(String lib) {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        if (os.equals(\"darwin\"))\n+            return \"lib\" + lib + \".dynlib\";", "originalCommit": "d1ef5c585abab8dc81bc75f3dd4641f186e5260c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8800323e09a9c8820aa120bf49686e1d1bc8ae25", "chunk": "diff --git a/java/ddlogapi/DDlogAPI.java b/java/ddlogapi/DDlogAPI.java\nindex 2d92a16b..806ccc78 100644\n--- a/java/ddlogapi/DDlogAPI.java\n+++ b/java/ddlogapi/DDlogAPI.java\n\n@@ -524,8 +524,8 @@ public class DDlogAPI {\n \n     public static String libName(String lib) {\n         String os = System.getProperty(\"os.name\").toLowerCase();\n-        if (os.equals(\"darwin\"))\n-            return \"lib\" + lib + \".dynlib\";\n+        if (os.equals(\"darwin\") || os.equals(\"mac os x\"))\n+            return \"lib\" + lib + \".dylib\";\n         else if (os.equals(\"windows\"))\n             return lib + \".dll\";\n         else\n"}}, {"oid": "7329b7c9ab9d883078eb391879cc87b92a1ed37f", "url": "https://github.com/vmware/differential-datalog/commit/7329b7c9ab9d883078eb391879cc87b92a1ed37f", "message": "Cleanup stack test", "committedDate": "2020-03-30T22:13:02Z", "type": "commit"}, {"oid": "91fa17436225d9d900719c4f2effb7a8b279c1f0", "url": "https://github.com/vmware/differential-datalog/commit/91fa17436225d9d900719c4f2effb7a8b279c1f0", "message": "Forgot one file", "committedDate": "2020-03-30T22:13:02Z", "type": "commit"}, {"oid": "8800323e09a9c8820aa120bf49686e1d1bc8ae25", "url": "https://github.com/vmware/differential-datalog/commit/8800323e09a9c8820aa120bf49686e1d1bc8ae25", "message": "Save reference outputs for failing programs", "committedDate": "2020-03-30T23:09:31Z", "type": "commit"}, {"oid": "8800323e09a9c8820aa120bf49686e1d1bc8ae25", "url": "https://github.com/vmware/differential-datalog/commit/8800323e09a9c8820aa120bf49686e1d1bc8ae25", "message": "Save reference outputs for failing programs", "committedDate": "2020-03-30T23:09:31Z", "type": "forcePushed"}]}