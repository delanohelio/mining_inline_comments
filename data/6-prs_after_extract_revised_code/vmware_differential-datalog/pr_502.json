{"pr_number": 502, "pr_title": "Implementation of raw SQL aggregates (without groupby)", "pr_createdAt": "2020-01-13T23:42:19Z", "pr_url": "https://github.com/vmware/differential-datalog/pull/502", "timeline": [{"oid": "c4cc545f309df555dbc88a630987e674a1ad448b", "url": "https://github.com/vmware/differential-datalog/commit/c4cc545f309df555dbc88a630987e674a1ad448b", "message": "Support for SQL aggregates", "committedDate": "2020-01-13T23:29:27Z", "type": "commit"}, {"oid": "74481d8dfda181cee12d4e17d5a2113da28b2c6a", "url": "https://github.com/vmware/differential-datalog/commit/74481d8dfda181cee12d4e17d5a2113da28b2c6a", "message": "Simplifications", "committedDate": "2020-01-13T23:29:27Z", "type": "commit"}, {"oid": "8851b7aa1a010f024a419168772cebab0cbea867", "url": "https://github.com/vmware/differential-datalog/commit/8851b7aa1a010f024a419168772cebab0cbea867", "message": "Aggregate and join test", "committedDate": "2020-01-13T23:29:27Z", "type": "commit"}, {"oid": "93e3910f6f50ae25b7ab762092d474643c5d7ac5", "url": "https://github.com/vmware/differential-datalog/commit/93e3910f6f50ae25b7ab762092d474643c5d7ac5", "message": "Generic comparison functions", "committedDate": "2020-01-13T23:29:27Z", "type": "commit"}, {"oid": "879a4b5ebc4d78987bd99031904b993b0c02511d", "url": "https://github.com/vmware/differential-datalog/commit/879a4b5ebc4d78987bd99031904b993b0c02511d", "message": "Test with string aggregation", "committedDate": "2020-01-13T23:35:24Z", "type": "commit"}, {"oid": "d288d137194e8be46e408e0d49943a0a7a4e3891", "url": "https://github.com/vmware/differential-datalog/commit/d288d137194e8be46e408e0d49943a0a7a4e3891", "message": "Deleted test program", "committedDate": "2020-01-13T23:37:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMzk1Mg==", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367523952", "bodyText": "functionCall(min, functionCall(min, salaries))) -> functionCall(min, functionCall(abs, salaries)))", "author": "lalithsuresh", "createdAt": "2020-01-16T16:35:40Z", "path": "sql/src/main/java/com/vmware/ddlog/translator/AggregateVisitor.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.vmware.ddlog.translator;\n+\n+import com.facebook.presto.sql.tree.*;\n+import com.vmware.ddlog.util.Ternary;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This visitor computes the AggregateDecomposition of an expression.\n+ * It returns 'true' if the expression is the result of an aggregation.\n+ */\n+public class AggregateVisitor\n+        extends AstVisitor<Ternary, TranslationContext> {\n+    /**\n+     * This class represents the decomposition of an expression that contains\n+     * aggregates into multiple expressions.  Consider this example:\n+     *\n+     * select max(salaries) + min(abs(salaries)) from employees\n+     *\n+     * Consider the expression tree\n+     * + ( functionCall(max, salaries), functionCall(min, functionCall(min, salaries)))", "originalCommit": "d288d137194e8be46e408e0d49943a0a7a4e3891", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNjQwNg==", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367526406", "bodyText": "Why does this need an instance? As opposed to calls like isAggregateFunction() etc being static methods?", "author": "lalithsuresh", "createdAt": "2020-01-16T16:39:50Z", "path": "sql/src/main/java/com/vmware/ddlog/translator/SqlSemantics.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.vmware.ddlog.translator;\n+\n+import com.vmware.ddlog.ir.*;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+\n+/**\n+ * This is a singleton pattern class\n+ * encoding various properties about SQL semantics.\n+ */\n+public class SqlSemantics {\n+    private final HashSet<String> aggregateFunctions = new HashSet<String>();\n+    private final HashMap<String, DDlogEBinOp.BOp> arithmeticFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+    private final HashMap<String, DDlogEBinOp.BOp> stringFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+    private final HashMap<String, DDlogEBinOp.BOp> booleanFunctions = new HashMap<String, DDlogEBinOp.BOp>();\n+\n+    private SqlSemantics() {\n+        this.aggregateFunctions.add(\"count\");\n+        this.aggregateFunctions.add(\"sum\");\n+        this.aggregateFunctions.add(\"avg\");\n+        this.aggregateFunctions.add(\"min\");\n+        this.aggregateFunctions.add(\"max\");\n+\n+        this.arithmeticFunctions.put(\"a_eq\", DDlogEBinOp.BOp.Eq);\n+        this.arithmeticFunctions.put(\"a_neq\", DDlogEBinOp.BOp.Neq);\n+        this.arithmeticFunctions.put(\"a_lt\", DDlogEBinOp.BOp.Lt);\n+        this.arithmeticFunctions.put(\"a_gt\", DDlogEBinOp.BOp.Gt);\n+        this.arithmeticFunctions.put(\"a_lte\", DDlogEBinOp.BOp.Lte);\n+        this.arithmeticFunctions.put(\"a_gte\", DDlogEBinOp.BOp.Gte);\n+        this.arithmeticFunctions.put(\"a_plus\", DDlogEBinOp.BOp.Plus);\n+        this.arithmeticFunctions.put(\"a_minus\", DDlogEBinOp.BOp.Minus);\n+        this.arithmeticFunctions.put(\"a_mod\", DDlogEBinOp.BOp.Mod);\n+        this.arithmeticFunctions.put(\"a_times\", DDlogEBinOp.BOp.Times);\n+        this.arithmeticFunctions.put(\"a_div\", DDlogEBinOp.BOp.Div);\n+        // The following don't work for 64 bits\n+        // this.arithmeticFunctions.put(\"a_shiftr\", DDlogEBinOp.BOp.ShiftR);\n+        // this.arithmeticFunctions.put(\"a_shiftl\", DDlogEBinOp.BOp.ShiftL);\n+        this.arithmeticFunctions.put(\"a_band\", DDlogEBinOp.BOp.BAnd);\n+        this.arithmeticFunctions.put(\"a_bor\", DDlogEBinOp.BOp.BOr);\n+        this.arithmeticFunctions.put(\"a_bxor\", DDlogEBinOp.BOp.BXor);\n+\n+        this.stringFunctions.put(\"s_concat\", DDlogEBinOp.BOp.Concat);\n+        this.stringFunctions.put(\"s_eq\", DDlogEBinOp.BOp.Eq);\n+        this.stringFunctions.put(\"s_neq\", DDlogEBinOp.BOp.Neq);\n+\n+        this.booleanFunctions.put(\"b_eq\", DDlogEBinOp.BOp.Eq);\n+        this.booleanFunctions.put(\"b_neq\", DDlogEBinOp.BOp.Neq);\n+        this.booleanFunctions.put(\"b_and\", DDlogEBinOp.BOp.And);\n+        this.booleanFunctions.put(\"b_or\", DDlogEBinOp.BOp.Or);\n+        this.booleanFunctions.put(\"b_impl\", DDlogEBinOp.BOp.Impl);\n+    }\n+\n+    public static SqlSemantics semantics = new SqlSemantics();", "originalCommit": "d288d137194e8be46e408e0d49943a0a7a4e3891", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNzE3MQ==", "url": "https://github.com/vmware/differential-datalog/pull/502#discussion_r367527171", "bodyText": "Why is generateLibrary in SqlSemantics?", "author": "lalithsuresh", "createdAt": "2020-01-16T16:41:06Z", "path": "sql/src/main/java/com/vmware/ddlog/translator/Translator.java", "diffHunk": "@@ -83,10 +83,9 @@ public DDlogIRNode translateExpression(final String sql) {\n     }\n \n     public DDlogProgram generateLibrary() {\n-        return this.translationContext.generateLibrary();\n+        return SqlSemantics.semantics.generateLibrary();", "originalCommit": "d288d137194e8be46e408e0d49943a0a7a4e3891", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "289d2a70b188cbb7ea9d01d4151f605e780fadd9", "url": "https://github.com/vmware/differential-datalog/commit/289d2a70b188cbb7ea9d01d4151f605e780fadd9", "message": "Renamed test classes for mvn", "committedDate": "2020-01-17T19:27:48Z", "type": "commit"}, {"oid": "beea9e6cbbd21d1f570781f67e326fd5121d28dc", "url": "https://github.com/vmware/differential-datalog/commit/beea9e6cbbd21d1f570781f67e326fd5121d28dc", "message": ".gitlab-ci.yml: Add SQL-to-DDlog compiler test.", "committedDate": "2020-01-18T00:29:49Z", "type": "commit"}, {"oid": "875e4e41ab22ce6f663ddfff9e0b57be5ff92adb", "url": "https://github.com/vmware/differential-datalog/commit/875e4e41ab22ce6f663ddfff9e0b57be5ff92adb", "message": ".gitlab-ci.yml: Install ddlogapi.jar before running mvn.", "committedDate": "2020-01-23T01:39:23Z", "type": "commit"}, {"oid": "ec2aae6b68bb12ab75335abe2338878dd4580953", "url": "https://github.com/vmware/differential-datalog/commit/ec2aae6b68bb12ab75335abe2338878dd4580953", "message": ".travis.yml: Use parglare 0.10.0\n\nThe default version of parglare on MacOS appears to be broken, causing Travis builds to fail.", "committedDate": "2020-01-24T16:37:17Z", "type": "commit"}]}