{"pr_number": 1311, "pr_title": "Add support for Kafka 2.6 brokers", "pr_createdAt": "2020-08-11T17:55:35Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1311", "timeline": [{"oid": "4f42f11715c16390c0b1532173591ed0b293dabd", "url": "https://github.com/linkedin/cruise-control/commit/4f42f11715c16390c0b1532173591ed0b293dabd", "message": "Kafka 2.6 compatibility changes\n\n* Switched to Kafka 2.6.0 library versions\n* Changed class used for obtaining the default metrics registry in the metrics reporter\n\nSigned-off-by: Thomas Cooper <tom.n.cooper@gmail.com>", "committedDate": "2020-08-10T14:01:42Z", "type": "commit"}, {"oid": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "url": "https://github.com/linkedin/cruise-control/commit/0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "message": "Refactored ExecutionTask.State enum into seperate class file\n\nThis was required to allow the ExecutionTask class to be compiled by\nscala without raising cyclical reference errors.\n\nSigned-off-by: Thomas Cooper <tom.n.cooper@gmail.com>", "committedDate": "2020-08-11T17:51:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1NTgzMg==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468855832", "bodyText": "Nit: Redundant space.", "author": "efeg", "createdAt": "2020-08-11T20:48:43Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -26,7 +26,10 @@\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 8562f130..f5f7811f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -26,11 +24,9 @@ import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-\n-import com.yammer.metrics.core.MetricsRegistry;\n import kafka.log.LogConfig;\n-import kafka.metrics.KafkaYammerMetrics;\n import kafka.server.KafkaConfig;\n+import kafka.metrics.KafkaYammerMetrics;\n import org.apache.kafka.clients.CommonClientConfigs;\n import org.apache.kafka.clients.admin.AdminClient;\n import org.apache.kafka.clients.admin.AlterConfigOp;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1Njg5NA==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468856894", "bodyText": "Typo: Therfore -> Therefore", "author": "efeg", "createdAt": "2020-08-11T20:50:34Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 8562f130..f5f7811f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -335,30 +356,11 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     });\n   }\n \n-  /**\n-   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n-   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n-   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n-   *\n-   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n-   *\n-   * @return  MetricsRegistry with Kafka metrics\n-   */\n-  private MetricsRegistry metricsRegistry()   {\n-    try {\n-      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");\n-      LOG.info(\"KafkaYammerMetrics found and will be used.\");\n-      return KafkaYammerMetrics.defaultRegistry();\n-    } catch (ClassNotFoundException e) {\n-      LOG.info(\"KafkaYammerMetrics not found. Metrics will be used.\");\n-      return Metrics.defaultRegistry();\n-    }\n-  }\n \n   private void reportYammerMetrics(long now) throws Exception {\n     LOG.debug(\"Reporting yammer metrics.\");\n     YammerMetricProcessor.Context context = new YammerMetricProcessor.Context(this, now, _brokerId, _reportingIntervalMs);\n-    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : metricsRegistry().allMetrics().entrySet()) {\n+    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : _metricsRegistry.allMetrics().entrySet()) {\n       LOG.trace(\"Processing yammer metric {}, scope = {}\", entry.getKey(), entry.getKey().getScope());\n       entry.getValue().processWith(_yammerMetricProcessor, entry.getKey(), context);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1ODM0NA==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468858344", "bodyText": "Nit: KafkaYammerMetrics  -> {@link KafkaYammerMetrics}.\nGiven this link, maybe we can drop: More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java?", "author": "efeg", "createdAt": "2020-08-11T20:53:28Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 8562f130..f5f7811f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -335,30 +356,11 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     });\n   }\n \n-  /**\n-   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n-   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n-   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n-   *\n-   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n-   *\n-   * @return  MetricsRegistry with Kafka metrics\n-   */\n-  private MetricsRegistry metricsRegistry()   {\n-    try {\n-      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");\n-      LOG.info(\"KafkaYammerMetrics found and will be used.\");\n-      return KafkaYammerMetrics.defaultRegistry();\n-    } catch (ClassNotFoundException e) {\n-      LOG.info(\"KafkaYammerMetrics not found. Metrics will be used.\");\n-      return Metrics.defaultRegistry();\n-    }\n-  }\n \n   private void reportYammerMetrics(long now) throws Exception {\n     LOG.debug(\"Reporting yammer metrics.\");\n     YammerMetricProcessor.Context context = new YammerMetricProcessor.Context(this, now, _brokerId, _reportingIntervalMs);\n-    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : metricsRegistry().allMetrics().entrySet()) {\n+    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : _metricsRegistry.allMetrics().entrySet()) {\n       LOG.trace(\"Processing yammer metric {}, scope = {}\", entry.getKey(), entry.getKey().getScope());\n       entry.getValue().processWith(_yammerMetricProcessor, entry.getKey(), context);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468866484", "bodyText": "I initially assumed there were significant backwards incompatible changes from 2.5 to 2.6, but if this function would be sufficient to make migrate_to_kafka_2_5 compatible with Kafka 2.6, can we rebase this patch on migrate_to_kafka_2_5 branch to eliminate the overhead of managing one more branch?", "author": "efeg", "createdAt": "2020-08-11T21:09:47Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwMjM4Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469102386", "bodyText": "I will run some tests to make sure this metrics reporter works ok with 2.5.", "author": "tomncooper", "createdAt": "2020-08-12T08:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMTIyOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469321229", "bodyText": "From my testing it seems this function works as expected and allows this code to be run on Kafka 2.5 and 2.6 brokers. So I will rebase this against the migrate_to_kafka_2_5 branch and you can delete the 2.6 branch.", "author": "tomncooper", "createdAt": "2020-08-12T14:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 8562f130..f5f7811f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -335,30 +356,11 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     });\n   }\n \n-  /**\n-   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n-   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n-   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n-   *\n-   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n-   *\n-   * @return  MetricsRegistry with Kafka metrics\n-   */\n-  private MetricsRegistry metricsRegistry()   {\n-    try {\n-      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");\n-      LOG.info(\"KafkaYammerMetrics found and will be used.\");\n-      return KafkaYammerMetrics.defaultRegistry();\n-    } catch (ClassNotFoundException e) {\n-      LOG.info(\"KafkaYammerMetrics not found. Metrics will be used.\");\n-      return Metrics.defaultRegistry();\n-    }\n-  }\n \n   private void reportYammerMetrics(long now) throws Exception {\n     LOG.debug(\"Reporting yammer metrics.\");\n     YammerMetricProcessor.Context context = new YammerMetricProcessor.Context(this, now, _brokerId, _reportingIntervalMs);\n-    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : metricsRegistry().allMetrics().entrySet()) {\n+    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : _metricsRegistry.allMetrics().entrySet()) {\n       LOG.trace(\"Processing yammer metric {}, scope = {}\", entry.getKey(), entry.getKey().getScope());\n       entry.getValue().processWith(_yammerMetricProcessor, entry.getKey(), context);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTk2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468871963", "bodyText": "Nit: Redundant space.", "author": "efeg", "createdAt": "2020-08-11T21:21:18Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java", "diffHunk": "@@ -11,12 +11,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java\nindex a814a7d8..49302476 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTask.java\n\n@@ -11,7 +11,6 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import com.linkedin.kafka.cruisecontrol.servlet.response.JsonResponseField;\n import com.linkedin.kafka.cruisecontrol.servlet.response.JsonResponseClass;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDAyMg==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r468874022", "bodyText": "Nit: 2017 -> 2020", "author": "efeg", "createdAt": "2020-08-11T21:25:39Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java\nindex 31691450..c85c98fd 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ExecutionTaskState.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n  */\n package com.linkedin.kafka.cruisecontrol.executor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODI2MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469048261", "bodyText": "This method seems to be called in each cycle of metrics reporting. Can we call the metricsRegistry() method once, cache the regustry and reuse it each time is required?", "author": "amuraru", "createdAt": "2020-08-12T07:05:01Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -332,10 +335,30 @@ public void onCompletion(RecordMetadata recordMetadata, Exception e) {\n     });\n   }\n \n+  /**\n+   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n+   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n+   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n+   *\n+   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n+   *\n+   * @return  MetricsRegistry with Kafka metrics\n+   */\n+  private MetricsRegistry metricsRegistry()   {\n+    try {\n+      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");", "originalCommit": "0c668011099ee6bbc6cb3e6394e5572f8ad80ccb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyMTc3NA==", "url": "https://github.com/linkedin/cruise-control/pull/1311#discussion_r469321774", "bodyText": "Good point, I added a field and instantiated it in the init() method.", "author": "tomncooper", "createdAt": "2020-08-12T14:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0ODI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "405787fca6bfa0eb022defeb37705230e12989aa", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 8562f130..f5f7811f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -335,30 +356,11 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     });\n   }\n \n-  /**\n-   * Starting with Kafka 2.6.0, a new class KafkaYammerMetrics provides the default Metrics Registry. The old default\n-   * registry does not work with 2.6+. Therfore if the new class exists, we use it and if it doesn't exist we use the\n-   * old one. More details can be found here: https://github.com/apache/kafka/blob/2.6.0/core/src/main/java/kafka/metrics/KafkaYammerMetrics.java\n-   *\n-   * Once CC supports only 2.6.0 and newer, we can clean this up and use only KafkaYammerMetrics all the time.\n-   *\n-   * @return  MetricsRegistry with Kafka metrics\n-   */\n-  private MetricsRegistry metricsRegistry()   {\n-    try {\n-      Class.forName(\"kafka.metrics.KafkaYammerMetrics\");\n-      LOG.info(\"KafkaYammerMetrics found and will be used.\");\n-      return KafkaYammerMetrics.defaultRegistry();\n-    } catch (ClassNotFoundException e) {\n-      LOG.info(\"KafkaYammerMetrics not found. Metrics will be used.\");\n-      return Metrics.defaultRegistry();\n-    }\n-  }\n \n   private void reportYammerMetrics(long now) throws Exception {\n     LOG.debug(\"Reporting yammer metrics.\");\n     YammerMetricProcessor.Context context = new YammerMetricProcessor.Context(this, now, _brokerId, _reportingIntervalMs);\n-    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : metricsRegistry().allMetrics().entrySet()) {\n+    for (Map.Entry<com.yammer.metrics.core.MetricName, Metric> entry : _metricsRegistry.allMetrics().entrySet()) {\n       LOG.trace(\"Processing yammer metric {}, scope = {}\", entry.getKey(), entry.getKey().getScope());\n       entry.getValue().processWith(_yammerMetricProcessor, entry.getKey(), context);\n     }\n"}}, {"oid": "405787fca6bfa0eb022defeb37705230e12989aa", "url": "https://github.com/linkedin/cruise-control/commit/405787fca6bfa0eb022defeb37705230e12989aa", "message": "Addressed reviewer comments\n\nSigned-off-by: Thomas Cooper <tom.n.cooper@gmail.com>", "committedDate": "2020-08-12T13:40:54Z", "type": "commit"}]}