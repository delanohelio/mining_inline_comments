{"pr_number": 1186, "pr_title": "Further filter detected slow broker against pre-defined flush time threshold.", "pr_createdAt": "2020-05-04T18:16:47Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1186", "timeline": [{"oid": "ea4026694fccc2ae4de3e3289f4180089aa24dc0", "url": "https://github.com/linkedin/cruise-control/commit/ea4026694fccc2ae4de3e3289f4180089aa24dc0", "message": "Further filter detected slow broker against pre-defined flush time threshold.", "committedDate": "2020-05-04T18:16:07Z", "type": "commit"}, {"oid": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "url": "https://github.com/linkedin/cruise-control/commit/e5215e0d98b6189de5b64879d660be8c3553d0c3", "message": "change threshold to 150ms.", "committedDate": "2020-05-04T18:19:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3ODY5OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419678699", "bodyText": "Can we avoid passing private variable _logFlushTimeThresholdMs to non-static function detectMetricAnomaliesFromThreshold and update the name of the function to indicate its custom role regarding log flush time?\nActually it is a little confusing that we have another function in this class called getMetricAnomalies, which is also used for detecting metric anomalies -- can we merge/rename them to make the logic more clear?", "author": "efeg", "createdAt": "2020-05-04T19:35:43Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java", "diffHunk": "@@ -174,6 +184,7 @@ public SlowBrokerFinder() {\n     }\n \n     Set<BrokerEntity> detectMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n+    detectMetricAnomalies.retainAll(detectMetricAnomaliesFromThreshold(currentLogFlushTimeMetricValues, _logFlushTimeThresholdMs));", "originalCommit": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMDA3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419700073", "bodyText": "I rename the method to make it more specific.\nI was thinking about merge this part of logic into getMetricAnomalies(). The issue is the logic in getMetricAnomalies() is generic and this extra check is specific to log flush time metrics.", "author": "kidkun", "createdAt": "2020-05-04T20:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3ODY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\nindex 3a21145a..eeb31418 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n\n@@ -183,10 +184,10 @@ public class SlowBrokerFinder implements MetricAnomalyFinder<BrokerEntity> {\n       LOG.info(\"Skip broker slowness checking for brokers {} because they serve negligible traffic.\", skippedBrokers);\n     }\n \n-    Set<BrokerEntity> detectMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n-    detectMetricAnomalies.retainAll(detectMetricAnomaliesFromThreshold(currentLogFlushTimeMetricValues, _logFlushTimeThresholdMs));\n-    detectMetricAnomalies.retainAll(getMetricAnomalies(historicalPerByteLogFlushTimeMetricValues, currentPerByteLogFlushTimeMetricValues));\n-    return detectMetricAnomalies;\n+    Set<BrokerEntity> detectedMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n+    detectedMetricAnomalies.retainAll(getMetricAnomalies(historicalPerByteLogFlushTimeMetricValues, currentPerByteLogFlushTimeMetricValues));\n+    detectedMetricAnomalies.retainAll(getLogFlushTimeMetricAnomaliesFromValue(currentLogFlushTimeMetricValues));\n+    return detectedMetricAnomalies;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3OTIyMg==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419679222", "bodyText": "Nit: detectMetricAnomalies -> detectedMetricAnomalies?", "author": "efeg", "createdAt": "2020-05-04T19:36:36Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java", "diffHunk": "@@ -174,6 +184,7 @@ public SlowBrokerFinder() {\n     }\n \n     Set<BrokerEntity> detectMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n+    detectMetricAnomalies.retainAll(detectMetricAnomaliesFromThreshold(currentLogFlushTimeMetricValues, _logFlushTimeThresholdMs));", "originalCommit": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\nindex 3a21145a..eeb31418 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n\n@@ -183,10 +184,10 @@ public class SlowBrokerFinder implements MetricAnomalyFinder<BrokerEntity> {\n       LOG.info(\"Skip broker slowness checking for brokers {} because they serve negligible traffic.\", skippedBrokers);\n     }\n \n-    Set<BrokerEntity> detectMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n-    detectMetricAnomalies.retainAll(detectMetricAnomaliesFromThreshold(currentLogFlushTimeMetricValues, _logFlushTimeThresholdMs));\n-    detectMetricAnomalies.retainAll(getMetricAnomalies(historicalPerByteLogFlushTimeMetricValues, currentPerByteLogFlushTimeMetricValues));\n-    return detectMetricAnomalies;\n+    Set<BrokerEntity> detectedMetricAnomalies = getMetricAnomalies(historicalLogFlushTimeMetricValues, currentLogFlushTimeMetricValues);\n+    detectedMetricAnomalies.retainAll(getMetricAnomalies(historicalPerByteLogFlushTimeMetricValues, currentPerByteLogFlushTimeMetricValues));\n+    detectedMetricAnomalies.retainAll(getLogFlushTimeMetricAnomaliesFromValue(currentLogFlushTimeMetricValues));\n+    return detectedMetricAnomalies;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4MTkyNw==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419681927", "bodyText": "The loop uses only the key, but iterates over entities. Can we either iterate over keySet() or update the logic to use getValue(), as well?", "author": "efeg", "createdAt": "2020-05-04T19:41:18Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java", "diffHunk": "@@ -286,6 +297,16 @@ private void detectMetricAnomaliesFromPeers(Map<BrokerEntity, Double> currentVal\n     }\n   }\n \n+  private Set<BrokerEntity> detectMetricAnomaliesFromThreshold(Map<BrokerEntity, Double> currentValue, double threshold) {\n+    Set<BrokerEntity> detectedMetricAnomalies = new HashSet<>();\n+    for (Map.Entry<BrokerEntity, Double> entry : currentValue.entrySet()) {", "originalCommit": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\nindex 3a21145a..eeb31418 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n\n@@ -297,10 +298,10 @@ public class SlowBrokerFinder implements MetricAnomalyFinder<BrokerEntity> {\n     }\n   }\n \n-  private Set<BrokerEntity> detectMetricAnomaliesFromThreshold(Map<BrokerEntity, Double> currentValue, double threshold) {\n+  private Set<BrokerEntity> getLogFlushTimeMetricAnomaliesFromValue(Map<BrokerEntity, Double> currentValue) {\n     Set<BrokerEntity> detectedMetricAnomalies = new HashSet<>();\n     for (Map.Entry<BrokerEntity, Double> entry : currentValue.entrySet()) {\n-      if (currentValue.get(entry.getKey()) > threshold) {\n+      if (currentValue.get(entry.getKey()) > _logFlushTimeThresholdMs) {\n         detectedMetricAnomalies.add(entry.getKey());\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4Mjk3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419682973", "bodyText": "This function (i.e. configure) is full of repeated code fragments. Can we use util functions to eliminate code repetition and be more concise?", "author": "efeg", "createdAt": "2020-05-04T19:43:01Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java", "diffHunk": "@@ -416,6 +437,21 @@ public void configure(Map<String, ?> configs) {\n       }\n     }\n \n+    String logFlushTimeThresholdMs = (String) originalConfig.get(SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG);", "originalCommit": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\nindex 3a21145a..eeb31418 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinder.java\n\n@@ -422,131 +423,49 @@ public class SlowBrokerFinder implements MetricAnomalyFinder<BrokerEntity> {\n     Map<String, Object> originalConfig = _kafkaCruiseControl.config().originals();\n     _slowBrokerRemovalEnabled = Boolean.parseBoolean((String) originalConfig.get(SELF_HEALING_SLOW_BROKER_REMOVAL_ENABLED_CONFIG));\n \n-    String bytesInRateDetectionThreshold = (String) originalConfig.get(SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD_CONFIG);\n-    if (bytesInRateDetectionThreshold == null) {\n-      _bytesInRateDetectionThreshold = DEFAULT_SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD;\n-    } else {\n-      try {\n-        _bytesInRateDetectionThreshold = Double.parseDouble(bytesInRateDetectionThreshold);\n-        if (_bytesInRateDetectionThreshold < 0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should not be set to negative, provided: %f.\",\n-                                                  SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD_CONFIG, _bytesInRateDetectionThreshold));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD_CONFIG, bytesInRateDetectionThreshold, e.getMessage());\n-      }\n-    }\n-\n-    String logFlushTimeThresholdMs = (String) originalConfig.get(SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG);\n-    if (bytesInRateDetectionThreshold == null) {\n-      _logFlushTimeThresholdMs = DEFAULT_SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG;\n-    } else {\n-      try {\n-        _logFlushTimeThresholdMs = Double.parseDouble(logFlushTimeThresholdMs);\n-        if (_logFlushTimeThresholdMs < 0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should not be set to negative, provided: %f.\",\n-                                                  SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG, _logFlushTimeThresholdMs));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG, logFlushTimeThresholdMs, e.getMessage());\n-      }\n-    }\n-\n-    String metricHistoryPercentile = (String) originalConfig.get(SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD_CONFIG);\n-    if (metricHistoryPercentile == null) {\n-      _metricHistoryPercentile = DEFAULT_SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD;\n-    } else {\n-      try {\n-        _metricHistoryPercentile = Double.parseDouble(metricHistoryPercentile);\n-        if (_metricHistoryPercentile < 0.0 || _metricHistoryPercentile > 100.0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should be set in range [0.0, 100.0], provided: %f.\",\n-                                                  SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD_CONFIG, _metricHistoryPercentile));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD_CONFIG, metricHistoryPercentile, e.getMessage());\n-      }\n-    }\n-\n-    String metricHistoryMargin = (String) originalConfig.get(SLOW_BROKER_METRIC_HISTORY_MARGIN_CONFIG);\n-    if (metricHistoryMargin == null) {\n-      _metricHistoryMargin = DEFAULT_SLOW_BROKER_METRIC_HISTORY_MARGIN;\n-    } else {\n-      try {\n-        _metricHistoryMargin = Double.parseDouble(metricHistoryMargin);\n-        if (_metricHistoryMargin < 1.0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should not be less than 1.0, provided: %f.\",\n-                                                  SLOW_BROKER_METRIC_HISTORY_MARGIN_CONFIG, _metricHistoryMargin));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_METRIC_HISTORY_MARGIN_CONFIG, metricHistoryMargin, e.getMessage());\n-      }\n-    }\n-\n-    String peerMetricPercentile = (String) originalConfig.get(SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD_CONFIG);\n-    if (peerMetricPercentile == null) {\n-      _peerMetricPercentile = DEFAULT_SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD;\n-    } else {\n-      try {\n-        _peerMetricPercentile = Double.parseDouble(peerMetricPercentile);\n-        if (_peerMetricPercentile < 0.0 || _peerMetricPercentile > 100.0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should be set in range [0.0, 100.0], provided: %f.\",\n-                                                  SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD_CONFIG, _peerMetricPercentile));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD_CONFIG, peerMetricPercentile, e.getMessage());\n-      }\n-    }\n-\n-    String peerMetricMargin = (String) originalConfig.get(SLOW_BROKER_PEER_METRIC_MARGIN_CONFIG);\n-    if (peerMetricMargin == null) {\n-      _peerMetricMargin = DEFAULT_SLOW_BROKER_PEER_METRIC_MARGIN;\n-    } else {\n-      try {\n-        _peerMetricMargin = Double.parseDouble(peerMetricMargin);\n-        if (_peerMetricMargin < 1.0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should not be less than 1.0, provided: %f.\",\n-                                                  SLOW_BROKER_PEER_METRIC_MARGIN_CONFIG, _peerMetricPercentile));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_PEER_METRIC_MARGIN_CONFIG, peerMetricPercentile, e.getMessage());\n-      }\n-    }\n-\n-    String slowBrokerDemotionScore = (String) originalConfig.get(SLOW_BROKER_DEMOTION_SCORE_CONFIG);\n-    if (slowBrokerDemotionScore == null) {\n-      _slowBrokerDemotionScore = DEFAULT_SLOW_BROKER_DEMOTION_SCORE;\n-    } else {\n-      try {\n-        _slowBrokerDemotionScore = Integer.parseUnsignedInt(slowBrokerDemotionScore);\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_DEMOTION_SCORE_CONFIG, slowBrokerDemotionScore, e.getMessage());\n-      }\n-    }\n-\n-    String slowBrokerDecommissionScore = (String) originalConfig.get(SLOW_BROKER_DECOMMISSION_SCORE_CONFIG);\n-    if (slowBrokerDecommissionScore == null) {\n-      _slowBrokerDecommissionScore = DEFAULT_SLOW_BROKER_DECOMMISSION_SCORE;\n-    } else {\n-      try {\n-        _slowBrokerDecommissionScore = Integer.parseUnsignedInt(slowBrokerDecommissionScore);\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_DECOMMISSION_SCORE_CONFIG, slowBrokerDecommissionScore, e.getMessage());\n-      }\n-  }\n-\n-    String selfHealingUnfixableRatio = (String) originalConfig.get(SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO_CONFIG);\n-    if (selfHealingUnfixableRatio == null) {\n-      _selfHealingUnfixableRatio = DEFAULT_SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO;\n-    } else {\n-      try {\n-        _selfHealingUnfixableRatio = Double.parseDouble(selfHealingUnfixableRatio);\n-        if (_selfHealingUnfixableRatio < 0.0 || _selfHealingUnfixableRatio > 1.0) {\n-          throw new ConfigException(String.format(\"%s config of slow broker finder should be set in range [0.0, 1.0], provided: %f.\",\n-                                                  SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO_CONFIG, _selfHealingUnfixableRatio));\n-        }\n-      } catch (NumberFormatException e) {\n-        throw new ConfigException(SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO_CONFIG, selfHealingUnfixableRatio, e.getMessage());\n-      }\n-    }\n+    _bytesInRateDetectionThreshold = parseAndGetConfig(originalConfig,\n+                                                       SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD_CONFIG,\n+                                                       DEFAULT_SLOW_BROKER_BYTES_IN_RATE_DETECTION_THRESHOLD,\n+                                                       val -> (val < 0.0));\n+\n+    _logFlushTimeThresholdMs = parseAndGetConfig(originalConfig,\n+                                                SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG,\n+                                                DEFAULT_SLOW_BROKER_LOG_FLUSH_TIME_THRESHOLD_MS_CONFIG,\n+                                                val -> (val < 0.0));\n+\n+    _metricHistoryPercentile = parseAndGetConfig(originalConfig,\n+                                                 SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD_CONFIG,\n+                                                 DEFAULT_SLOW_BROKER_METRIC_HISTORY_PERCENTILE_THRESHOLD,\n+                                                 val -> (val < 0.0 || val > 100.0));\n+\n+    _metricHistoryMargin = parseAndGetConfig(originalConfig,\n+                                             SLOW_BROKER_METRIC_HISTORY_MARGIN_CONFIG,\n+                                             DEFAULT_SLOW_BROKER_METRIC_HISTORY_MARGIN,\n+                                             val -> (val < 1.0));\n+\n+    _peerMetricPercentile = parseAndGetConfig(originalConfig,\n+                                              SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD_CONFIG,\n+                                              DEFAULT_SLOW_BROKER_PEER_METRIC_PERCENTILE_THRESHOLD,\n+                                              val -> (val < 0.0 || val > 100.0));\n+\n+    _peerMetricMargin = parseAndGetConfig(originalConfig,\n+                                          SLOW_BROKER_PEER_METRIC_MARGIN_CONFIG,\n+                                          DEFAULT_SLOW_BROKER_PEER_METRIC_MARGIN,\n+                                          val -> (val < 1.0));\n+\n+    _slowBrokerDemotionScore = parseAndGetConfig(originalConfig,\n+                                                 SLOW_BROKER_DEMOTION_SCORE_CONFIG,\n+                                                 DEFAULT_SLOW_BROKER_DEMOTION_SCORE,\n+                                                 (Predicate<Integer>) val -> (val < 0));\n+\n+    _slowBrokerDecommissionScore = parseAndGetConfig(originalConfig,\n+                                                     SLOW_BROKER_DECOMMISSION_SCORE_CONFIG,\n+                                                     DEFAULT_SLOW_BROKER_DECOMMISSION_SCORE,\n+                                                     (Predicate<Integer>)val -> (val < 0));\n+\n+    _selfHealingUnfixableRatio = parseAndGetConfig(originalConfig,\n+                                                   SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO_CONFIG,\n+                                                   DEFAULT_SLOW_BROKER_SELF_HEALING_UNFIXABLE_RATIO,\n+                                                   val -> (val < 0.0 || val > 1.0));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY4NDAzNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1186#discussion_r419684035", "bodyText": "Nit: Enumerating functions does not give much information about the difference between testNoFalsePositiveDetection() and testNoFalsePositiveDetection2(). Can we rename them with a suffix that describes what each function are?", "author": "efeg", "createdAt": "2020-05-04T19:45:01Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java", "diffHunk": "@@ -161,6 +161,36 @@ public void testNoFalsePositiveDetection() {\n     assertTrue(anomalies.isEmpty());\n   }\n \n+  /**\n+   * Test slow broker finder does not report false positive anomaly when the broker's absolute log flush time is small.\n+   */\n+  @Test\n+  public void testNoFalsePositiveDetection2() {", "originalCommit": "e5215e0d98b6189de5b64879d660be8c3553d0c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java\nindex 0cfe5616..184f31d4 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/SlowBrokerFinderTest.java\n\n@@ -165,7 +165,7 @@ public class SlowBrokerFinderTest {\n    * Test slow broker finder does not report false positive anomaly when the broker's absolute log flush time is small.\n    */\n   @Test\n-  public void testNoFalsePositiveDetection2() {\n+  public void testNoFalsePositiveDetectionOnSmallLogFlushTime() {\n     SlowBrokerFinder slowBrokerFinder = createSlowBrokerFinder();\n     Map<BrokerEntity, ValuesAndExtrapolations> currentMetrics = new HashMap<>(BROKER_ENTITIES.size());\n     Map<BrokerEntity, ValuesAndExtrapolations> history = new HashMap<>(BROKER_ENTITIES.size());\n"}}, {"oid": "eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "url": "https://github.com/linkedin/cruise-control/commit/eb435d115c1f366301c4d9d1ff56b0e654c96ba0", "message": "Address the feedback.", "committedDate": "2020-05-04T21:32:31Z", "type": "commit"}, {"oid": "bacfdfec0e9da87479fcf90628bd89629aeda25a", "url": "https://github.com/linkedin/cruise-control/commit/bacfdfec0e9da87479fcf90628bd89629aeda25a", "message": "Fix build failure.", "committedDate": "2020-05-04T21:36:18Z", "type": "commit"}]}