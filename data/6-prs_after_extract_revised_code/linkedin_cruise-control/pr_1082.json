{"pr_number": 1082, "pr_title": " Make CruiseControlReporter check metrics topic's partition count during bootstrap", "pr_createdAt": "2020-01-30T00:37:32Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1082", "timeline": [{"oid": "bc617947a5714f54893a6214b702e9a75a46421c", "url": "https://github.com/linkedin/cruise-control/commit/bc617947a5714f54893a6214b702e9a75a46421c", "message": "Fix the JSON response of state endpoint.", "committedDate": "2020-01-29T00:47:14Z", "type": "commit"}, {"oid": "5f066c1642a8a57a020d2cb708144a9af1ebfe19", "url": "https://github.com/linkedin/cruise-control/commit/5f066c1642a8a57a020d2cb708144a9af1ebfe19", "message": "Make CruiseControlReporter check metrics topic's partition count during bootstrap.", "committedDate": "2020-01-30T00:36:55Z", "type": "commit"}, {"oid": "2d7a95910241381a49a46ae8d409bf6041d57cae", "url": "https://github.com/linkedin/cruise-control/commit/2d7a95910241381a49a46ae8d409bf6041d57cae", "message": "Fix style issue.", "committedDate": "2020-01-30T01:15:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzUwNg==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373113506", "bodyText": "Nit: Should we use lazy logging to avoid string concat? -- i.e.\nLOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);", "author": "efeg", "createdAt": "2020-01-30T18:20:16Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);", "originalCommit": "2d7a95910241381a49a46ae8d409bf6041d57cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex f18cca8a..fefed4cd 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -163,9 +163,9 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODIxMw==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373118213", "bodyText": "We have some common logic regarding (1) creating non-existing topic and (2) modifying the selected configs of existing topics (i.e. here and in sample store topic creation).\nCan we make the relevant logic (1) shared and (2) pluggable between the two? The first part will ensure a common code path for similar execution. The second part will enable users to add their custom logic that they may want to automate during topic creation (e.g. generating ACLs).", "author": "efeg", "createdAt": "2020-01-30T18:29:34Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);", "originalCommit": "2d7a95910241381a49a46ae8d409bf6041d57cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMjE2Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373132167", "bodyText": "I was thinking about this.\nOne concern prevent me doing that is where should I put the common code. Because cruise-control and cruise-control-metrics-reporter are two separate module and we do not want one to depends on the other. And it also seems inappropriate to put this code in cruise-control-core module since it only contains non-kafka-specific code.", "author": "kidkun", "createdAt": "2020-01-30T18:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MDk3OA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373180978", "bodyText": "Sure, I agree with your concerns regarding sharing the logic.\nAre there any issues with making each logic pluggable within their corresponding modules?", "author": "efeg", "createdAt": "2020-01-30T20:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3ODk1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373278958", "bodyText": "While I was taking a deeper look, I just realize that CruiseControlMetricsReporter and KafkaSampleStore themselves are Configurable class, then to make the topic management logic pluggable, we can simply change corresponding methods to protected.\nFor example, if someone want to add some more check for metrics topic, (s)he can directly extends from CruiseControlMetricsReporter and override createNewTopicFromReporterConfig(), createCruiseControlMetricsTopic() and maybeUpdateCruiseControlMetricsTopic() methods.\nand then change the config metric.reporters to the extended class name.", "author": "kidkun", "createdAt": "2020-01-31T01:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODIxMw=="}], "type": "inlineReview", "revised_code": {"commit": "f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex f18cca8a..fefed4cd 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -163,9 +163,9 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODQ0Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373118447", "bodyText": "Nit: Can we avoid hard coding 5000?", "author": "efeg", "createdAt": "2020-01-30T18:30:03Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -162,20 +165,48 @@ private void createCruiseControlMetricsTopic() {\n       createTopicsResult.values().get(_newTopic.name()).get();\n       LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  private void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(String.format(\"Unable to increase Cruise Cruise Control metrics topic %s's partition number to %d\",\n+                             _cruiseControlMetricsTopic, _newTopic.replicationFactor()), e);\n+      }\n+    }\n+\n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();\n+        boolean topicExists = false;\n+        for (TopicListing topicListing : topicListings) {\n+          if (topicListing.name().equals(_cruiseControlMetricsTopic)) {\n+            topicExists = true;\n+            break;\n+          }\n+        }\n+        if (topicExists) {\n+          maybeUpdateCruiseControlMetricsTopic();\n+        } else {\n+          createCruiseControlMetricsTopic();\n+        }\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Skip checking Cruise Control metrics topic \" + _newTopic.name(), e);\n+      } finally {\n+        CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);", "originalCommit": "2d7a95910241381a49a46ae8d409bf6041d57cae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex f18cca8a..fefed4cd 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -163,9 +163,9 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      LOG.warn(\"Unable to create Cruise Control metrics topic \" + _cruiseControlMetricsTopic, e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n"}}, {"oid": "f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "url": "https://github.com/linkedin/cruise-control/commit/f766e44c02500f2e78d4a1394e8ca0bc0543d8a9", "message": "Address the feedback.", "committedDate": "2020-01-30T18:57:44Z", "type": "commit"}, {"oid": "86ff5e2850ef639896f143d02f997552a7b7be83", "url": "https://github.com/linkedin/cruise-control/commit/86ff5e2850ef639896f143d02f997552a7b7be83", "message": "Address the feedback.", "committedDate": "2020-01-31T01:21:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwMTAyNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r373701025", "bodyText": "(Applies to topic creation code path) Missing modification regarding cleanup policy and retention (please see KafkaSampleStore#ensureTopicCreated).", "author": "efeg", "createdAt": "2020-01-31T21:49:42Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -156,26 +159,54 @@ private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterCo\n     return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {", "originalCommit": "86ff5e2850ef639896f143d02f997552a7b7be83", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2321217263fcb88b875a9d8402bd36886679371", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex f6698924..38ef7455 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -151,12 +160,18 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n   protected void createCruiseControlMetricsTopic() {\n"}}, {"oid": "c2321217263fcb88b875a9d8402bd36886679371", "url": "https://github.com/linkedin/cruise-control/commit/c2321217263fcb88b875a9d8402bd36886679371", "message": "fix the feedback.", "committedDate": "2020-02-01T01:02:58Z", "type": "commit"}, {"oid": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "url": "https://github.com/linkedin/cruise-control/commit/afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "message": "Fix style issue.", "committedDate": "2020-02-03T18:09:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MzQ3NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374393475", "bodyText": "Should it be equals(...) or !equals(...)?", "author": "efeg", "createdAt": "2020-02-03T23:08:58Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||\n+          !topicConfig.get(LogConfig.RetentionMsProp()).value().equals(_newTopic.configs().get(LogConfig.RetentionMsProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.RetentionMsProp(),\n+                                                             _newTopic.configs().get(LogConfig.RetentionMsProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (topicConfig.get(LogConfig.CleanupPolicyProp()) == null ||\n+          topicConfig.get(LogConfig.CleanupPolicyProp()).value().equals(_newTopic.configs().get(LogConfig.CleanupPolicyProp()))) {", "originalCommit": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0000f286d2d3814fe65d6091927a569c30074a1", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 1cdaf5b9..4138d196 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -168,8 +169,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     Map<String, String> config = new HashMap<>(2);\n     config.put(LogConfig.RetentionMsProp(),\n                Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n-    config.put(LogConfig.CleanupPolicyProp(),\n-               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n     newTopic.configs(config);\n     return newTopic;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDEzOA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374394138", "bodyText": "This and the following if statements seem to be good candidates to move to a util function, which adds a config to the given set if it satisfies certain criteria.", "author": "efeg", "createdAt": "2020-02-03T23:10:59Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||", "originalCommit": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0000f286d2d3814fe65d6091927a569c30074a1", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 1cdaf5b9..4138d196 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -168,8 +169,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     Map<String, String> config = new HashMap<>(2);\n     config.put(LogConfig.RetentionMsProp(),\n                Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n-    config.put(LogConfig.CleanupPolicyProp(),\n-               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n     newTopic.configs(config);\n     return newTopic;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDkyMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374394921", "bodyText": "This and the preceding try-catch blocks seem to perform independent operations -- would it possible to move them to their own functions?", "author": "efeg", "createdAt": "2020-02-03T23:13:19Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +150,105 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(),\n+               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n-      }\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n   }\n \n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      if (topicConfig.get(LogConfig.RetentionMsProp()) == null ||\n+          !topicConfig.get(LogConfig.RetentionMsProp()).value().equals(_newTopic.configs().get(LogConfig.RetentionMsProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.RetentionMsProp(),\n+                                                             _newTopic.configs().get(LogConfig.RetentionMsProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (topicConfig.get(LogConfig.CleanupPolicyProp()) == null ||\n+          topicConfig.get(LogConfig.CleanupPolicyProp()).value().equals(_newTopic.configs().get(LogConfig.CleanupPolicyProp()))) {\n+        configsToBeSet.add(new AlterConfigOp(new ConfigEntry(LogConfig.CleanupPolicyProp(),\n+                                                             _newTopic.configs().get(LogConfig.CleanupPolicyProp())),\n+                                             AlterConfigOp.OpType.SET));\n+      }\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+\n+    try {", "originalCommit": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0000f286d2d3814fe65d6091927a569c30074a1", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 1cdaf5b9..4138d196 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -168,8 +169,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     Map<String, String> config = new HashMap<>(2);\n     config.put(LogConfig.RetentionMsProp(),\n                Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n-    config.put(LogConfig.CleanupPolicyProp(),\n-               reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY_CONFIG));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n     newTopic.configs(config);\n     return newTopic;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NTI0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374395242", "bodyText": "I don't think this should be configurable -- i.e. we do not support any other configuration, let's avoid exposing it.", "author": "efeg", "createdAt": "2020-02-03T23:14:11Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -48,6 +52,8 @@\n   private static final Integer DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS = -1;\n   private static final boolean DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE = false;\n   private static final Short DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR = -1;\n+  private static final String DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY = \"delete\";", "originalCommit": "afb28135f1dc1875d50ae2f9a33c8497ed0969dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0000f286d2d3814fe65d6091927a569c30074a1", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\nindex 659139c7..7d4e7374 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\n\n@@ -52,7 +50,6 @@ public class CruiseControlMetricsReporterConfig extends AbstractConfig {\n   private static final Integer DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS = -1;\n   private static final boolean DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE = false;\n   private static final Short DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR = -1;\n-  private static final String DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY = \"delete\";\n   private static final long DEFAULT_CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS = 18000000L;\n   private static final long DEFAULT_CRUISE_CONTROL_METRICS_REPORTER_INTERVAL_MS = 60000;\n   private static final String PRODUCER_ID = \"CruiseControlMetricsReporter\";\n"}}, {"oid": "f0000f286d2d3814fe65d6091927a569c30074a1", "url": "https://github.com/linkedin/cruise-control/commit/f0000f286d2d3814fe65d6091927a569c30074a1", "message": "Address the feedback.", "committedDate": "2020-02-04T00:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMzQyOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374413429", "bodyText": "Nit-1: The description is missing the unit of the retention time.\nNit-2: Missing dot at the end.", "author": "efeg", "createdAt": "2020-02-04T00:14:13Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -31,6 +31,8 @@\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_DOC = \"The number of partitions of Cruise Control metrics topic\";\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG = \"cruise.control.metrics.topic.replication.factor\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_DOC = \"The replication factor of Cruise Control metrics topic\";\n+  public static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG = \"cruise.control.metrics.topic.retention.ms\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time of Cruise Control metrics topic\";", "originalCommit": "f0000f286d2d3814fe65d6091927a569c30074a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3664fb06d55ec9708625404c3360168db415e224", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\nindex 7d4e7374..0b6bd00b 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java\n\n@@ -32,7 +32,7 @@ public class CruiseControlMetricsReporterConfig extends AbstractConfig {\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG = \"cruise.control.metrics.topic.replication.factor\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_DOC = \"The replication factor of Cruise Control metrics topic\";\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG = \"cruise.control.metrics.topic.retention.ms\";\n-  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time of Cruise Control metrics topic\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time in milliseconds of Cruise Control metrics topic.\";\n   public static final String CRUISE_CONTROL_METRICS_REPORTER_INTERVAL_MS_CONFIG = PREFIX + \"metrics.reporting.interval.ms\";\n   private static final String CRUISE_CONTROL_METRICS_REPORTER_INTERVAL_MS_DOC = \"The interval in milliseconds the \"\n       + \"metrics reporter should report the metrics.\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNDQyOA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374414428", "bodyText": "Can we (1) make it static? ... -> protected static void maybeUpdateConfig and (2) move it to CruiseControlMetricsUtils with a JavaDoc?", "author": "efeg", "createdAt": "2020-02-04T00:17:46Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +151,116 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n+      }\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,", "originalCommit": "f0000f286d2d3814fe65d6091927a569c30074a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3664fb06d55ec9708625404c3360168db415e224", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 4138d196..ee13dc92 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -213,15 +216,6 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     }\n   }\n \n-  protected void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n-                                   String configName,\n-                                   String targetConfigValue,\n-                                   Config currentConfig) {\n-    if (currentConfig.get(configName) == null || !currentConfig.get(configName).value().equals(targetConfigValue)) {\n-      configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n-    }\n-  }\n-\n   protected void maybeIncreaseTopicPartitionCount() {\n     try {\n       // Retrieve topic partition count to check and update.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNTY0NA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r374415644", "bodyText": "Can we add a unit test to verify that this function works as expected?", "author": "efeg", "createdAt": "2020-02-04T00:21:50Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +151,116 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {", "originalCommit": "f0000f286d2d3814fe65d6091927a569c30074a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTMyMg==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r377321322", "bodyText": "I find writing a unit test for this method is pretty hard given it is a broker dependency, I would like to verify this in deployment.", "author": "kidkun", "createdAt": "2020-02-10T21:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNTY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0NjY2NA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r377346664", "bodyText": "Can we use CCKafkaClientsIntegrationTestHarness to handle broker dependency?", "author": "efeg", "createdAt": "2020-02-10T22:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNTY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzU4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r377993589", "bodyText": "Added test.", "author": "kidkun", "createdAt": "2020-02-12T01:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "3664fb06d55ec9708625404c3360168db415e224", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 4138d196..ee13dc92 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -213,15 +216,6 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     }\n   }\n \n-  protected void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n-                                   String configName,\n-                                   String targetConfigValue,\n-                                   Config currentConfig) {\n-    if (currentConfig.get(configName) == null || !currentConfig.get(configName).value().equals(targetConfigValue)) {\n-      configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n-    }\n-  }\n-\n   protected void maybeIncreaseTopicPartitionCount() {\n     try {\n       // Retrieve topic partition count to check and update.\n"}}, {"oid": "3664fb06d55ec9708625404c3360168db415e224", "url": "https://github.com/linkedin/cruise-control/commit/3664fb06d55ec9708625404c3360168db415e224", "message": "Address the feedback.", "committedDate": "2020-02-04T00:58:26Z", "type": "commit"}, {"oid": "27262f62fc0cef66ddf41929ec69569ada0b601e", "url": "https://github.com/linkedin/cruise-control/commit/27262f62fc0cef66ddf41929ec69569ada0b601e", "message": "Remove redundant import.", "committedDate": "2020-02-04T00:59:28Z", "type": "commit"}, {"oid": "0beb3c721bded6d816ccacc83185c103c481758f", "url": "https://github.com/linkedin/cruise-control/commit/0beb3c721bded6d816ccacc83185c103c481758f", "message": "Add unit test.", "committedDate": "2020-02-12T01:19:28Z", "type": "commit"}, {"oid": "6acfb598b9702ae12757e74f0ab0add04f29a54e", "url": "https://github.com/linkedin/cruise-control/commit/6acfb598b9702ae12757e74f0ab0add04f29a54e", "message": "Get rid of wildcard import.", "committedDate": "2020-02-12T01:22:03Z", "type": "commit"}, {"oid": "12e088bc8d080f6ad3d53db8e8e9cb0b2ef2fcd2", "url": "https://github.com/linkedin/cruise-control/commit/12e088bc8d080f6ad3d53db8e8e9cb0b2ef2fcd2", "message": "Fix build failure.", "committedDate": "2020-02-12T18:25:31Z", "type": "commit"}, {"oid": "33d5e7ef435cabf96a01dbac92b0fd5ea9bd8959", "url": "https://github.com/linkedin/cruise-control/commit/33d5e7ef435cabf96a01dbac92b0fd5ea9bd8959", "message": "Increase broker boot waiting time.", "committedDate": "2020-02-12T19:13:38Z", "type": "commit"}, {"oid": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "url": "https://github.com/linkedin/cruise-control/commit/be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "message": "Skip ssl test.", "committedDate": "2020-02-12T23:04:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTEyNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379171125", "bodyText": "Nit: Would it be possible to make this and the other DEFAULT_* static final variables public? This allows users to access these defaults in other pluggable implementations of metrics reporter in case of need.", "author": "efeg", "createdAt": "2020-02-13T23:12:28Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporterConfig.java", "diffHunk": "@@ -31,6 +31,8 @@\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_DOC = \"The number of partitions of Cruise Control metrics topic\";\n   public static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG = \"cruise.control.metrics.topic.replication.factor\";\n   private static final String CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_DOC = \"The replication factor of Cruise Control metrics topic\";\n+  public static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG = \"cruise.control.metrics.topic.retention.ms\";\n+  private static final String CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_DOC = \"The retention time in milliseconds of Cruise Control metrics topic.\";", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3ODc2Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379178762", "bodyText": "This call to listTopics() introduces an additional network roundtrip in case the topic does not exist.\nWouldn't it be more efficient to attempt to create the topic and handle TopicExistsException? If the topic exists, then we can update it.\nMaybe more importantly, if the topic is created after the topic list is retrieved here, the call to create topic will fail with TopicExistsException and the code won't be able to handle it.", "author": "efeg", "createdAt": "2020-02-13T23:35:20Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n       }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeIncreaseTopicPartitionCount() {\n+    try {\n+      // Retrieve topic partition count to check and update.\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to increase Cruise Cruise Control metrics topic {} partition number to {}\",\n+               _cruiseControlMetricsTopic, _newTopic.replicationFactor(), e);\n     }\n   }\n \n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex d7298ec4..3407eb2d 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -146,7 +145,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3OTc0OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379179749", "bodyText": "Is it possible to make this static and move it to CruiseControlMetricsUtils with a JavaDoc?", "author": "efeg", "createdAt": "2020-02-13T23:38:29Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc0MTU4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379741587", "bodyText": "I feel the content of this method is specific to metric topic, I would like to keep it in this class.", "author": "kidkun", "createdAt": "2020-02-15T05:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3OTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex d7298ec4..3407eb2d 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -146,7 +145,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MDMxMA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379180310", "bodyText": "Nit: Can we use {} rather than string concat?", "author": "efeg", "createdAt": "2020-02-13T23:39:55Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();\n+      Set<AlterConfigOp> configsToBeSet = new HashSet<>(2);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.RetentionMsProp(),\n+                        _newTopic.configs().get(LogConfig.RetentionMsProp()),\n+                        topicConfig);\n+      maybeUpdateConfig(configsToBeSet,\n+                        LogConfig.CleanupPolicyProp(),\n+                        _newTopic.configs().get(LogConfig.CleanupPolicyProp()),\n+                        topicConfig);\n+      if (!configsToBeSet.isEmpty()) {\n+        AlterConfigsResult alterConfigsResult = _adminClient.incrementalAlterConfigs(Collections.singletonMap(topicResource, configsToBeSet));\n+        alterConfigsResult.values().get(topicResource).get();\n       }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to update config of Cruise Cruise Control metrics topic {}\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeIncreaseTopicPartitionCount() {\n+    try {\n+      // Retrieve topic partition count to check and update.\n+      TopicDescription topicDescription =\n+          _adminClient.describeTopics(Collections.singletonList(_cruiseControlMetricsTopic)).values()\n+                      .get(_cruiseControlMetricsTopic).get();\n+      if (topicDescription.partitions().size() < _newTopic.numPartitions()) {\n+        _adminClient.createPartitions(Collections.singletonMap(_cruiseControlMetricsTopic,\n+                                                               NewPartitions.increaseTo(_newTopic.numPartitions())));\n+      }\n+    } catch (InterruptedException | ExecutionException e) {\n+      LOG.warn(\"Unable to increase Cruise Cruise Control metrics topic {} partition number to {}\",\n+               _cruiseControlMetricsTopic, _newTopic.replicationFactor(), e);\n     }\n   }\n \n   @Override\n   public void run() {\n     LOG.info(\"Starting Cruise Control metrics reporter with reporting interval of {} ms.\", _reportingIntervalMs);\n-\n     if (_newTopic != null && _adminClient != null) {\n-      LOG.info(\"Try to create Cruise Control metrics topic if not exist\");\n-      createCruiseControlMetricsTopic();\n-      CruiseControlMetricsUtils.closeAdminClientWithTimeout(_adminClient, 5000);\n+      try {\n+        Collection<TopicListing> topicListings = _adminClient.listTopics().listings().get();\n+        boolean topicExists = false;\n+        for (TopicListing topicListing : topicListings) {\n+          if (topicListing.name().equals(_cruiseControlMetricsTopic)) {\n+            topicExists = true;\n+            break;\n+          }\n+        }\n+        if (topicExists) {\n+          maybeUpdateCruiseControlMetricsTopic();\n+        } else {\n+          createCruiseControlMetricsTopic();\n+        }\n+      } catch (InterruptedException | ExecutionException e) {\n+        LOG.warn(\"Skip checking Cruise Control metrics topic \" + _newTopic.name(), e);", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex d7298ec4..3407eb2d 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -146,7 +145,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4MzQxOA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379183418", "bodyText": "For describeConfigsResult and alterConfigsResult, we seem to be blocking indefinitely.\nCan we add timeouts to relevant get calls to avoid potential deadlock?", "author": "efeg", "createdAt": "2020-02-13T23:49:49Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -137,45 +153,107 @@ public void configure(Map<String, ?> configs) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n \n-    return new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n   }\n \n-  private void createCruiseControlMetricsTopic() {\n+  protected void createCruiseControlMetricsTopic() {\n     try {\n       final CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_newTopic));\n       createTopicsResult.values().get(_newTopic.name()).get();\n-      LOG.info(\"Cruise Control metrics topic created: {}\", _cruiseControlMetricsTopic);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (InterruptedException | ExecutionException e) {\n-      if (!(e.getCause() instanceof TopicExistsException)) {\n-        LOG.error(\"Unable to create Cruise Control topic\", e);\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+    }\n+  }\n+\n+  protected void maybeUpdateCruiseControlMetricsTopic() {\n+    maybeUpdateTopicConfig();\n+    maybeIncreaseTopicPartitionCount();\n+  }\n+\n+  protected void maybeUpdateTopicConfig() {\n+    try {\n+      // Retrieve topic config to check and update.\n+      ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, _cruiseControlMetricsTopic);\n+      DescribeConfigsResult describeConfigsResult = _adminClient.describeConfigs(Collections.singleton(topicResource));\n+      Config topicConfig = describeConfigsResult.values().get(topicResource).get();", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex d7298ec4..3407eb2d 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -146,7 +145,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4Mzg1NA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r379183854", "bodyText": "Would it be possible to combine configName and targetConfigValue in a Map? This allows getting response from this util function in one call.", "author": "efeg", "createdAt": "2020-02-13T23:51:16Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -106,4 +110,20 @@ private static void setStringConfigIfExists(CruiseControlMetricsReporterConfig c\n       // let it go.\n     }\n   }\n+\n+  /**\n+   * Create a config altering operation if config's current value does not equal to target value.\n+   * @param configsToAlter Set of config altering operations to be applied.\n+   * @param configName Name of config to check.\n+   * @param targetConfigValue Target value of the config.\n+   * @param currentConfig Current value of the config.\n+   */\n+  public static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n+                                       String configName,\n+                                       String targetConfigValue,", "originalCommit": "be61f23ce73d20fc5ff9e10ea9e28e5004fd423b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\nindex 9b07fbd1..8f85dbfa 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\n\n@@ -114,16 +116,18 @@ public class CruiseControlMetricsUtils {\n   /**\n    * Create a config altering operation if config's current value does not equal to target value.\n    * @param configsToAlter Set of config altering operations to be applied.\n-   * @param configName Name of config to check.\n-   * @param targetConfigValue Target value of the config.\n+   * @param configsToSet Configs to set.\n    * @param currentConfig Current value of the config.\n    */\n   public static void maybeUpdateConfig(Set<AlterConfigOp> configsToAlter,\n-                                       String configName,\n-                                       String targetConfigValue,\n+                                       Map<String, String> configsToSet,\n                                        Config currentConfig) {\n-    if (currentConfig.get(configName) == null || !currentConfig.get(configName).value().equals(targetConfigValue)) {\n-      configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n+    for (Map.Entry<String, String> entry : configsToSet.entrySet()) {\n+      String configName = entry.getKey();\n+      String targetConfigValue = entry.getValue();\n+      if (currentConfig.get(configName) == null || !currentConfig.get(configName).value().equals(targetConfigValue)) {\n+        configsToAlter.add(new AlterConfigOp(new ConfigEntry(configName, targetConfigValue), AlterConfigOp.OpType.SET));\n+      }\n     }\n   }\n }\n"}}, {"oid": "ef6ec370fbc78fc0a14057c4184897583d1790df", "url": "https://github.com/linkedin/cruise-control/commit/ef6ec370fbc78fc0a14057c4184897583d1790df", "message": "Addres the feedback.", "committedDate": "2020-02-15T05:57:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MDg4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382240889", "bodyText": "Nit: 10000 -> 10000L", "author": "efeg", "createdAt": "2020-02-20T20:30:27Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java", "diffHunk": "@@ -18,6 +19,7 @@\n public class CruiseControlMetricsUtils {\n \n   public static final long ADMIN_CLIENT_CLOSE_TIMEOUT_MS = 10000;\n+  public static final long CLIENT_REQUEST_TIMEOUT_MS = 10000;", "originalCommit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11b001fa2d95e49e508836b5c8437d5a36a902c5", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\nindex 8f85dbfa..015b3ce0 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsUtils.java\n\n@@ -18,8 +18,8 @@ import java.util.Properties;\n \n public class CruiseControlMetricsUtils {\n \n-  public static final long ADMIN_CLIENT_CLOSE_TIMEOUT_MS = 10000;\n-  public static final long CLIENT_REQUEST_TIMEOUT_MS = 10000;\n+  public static final long ADMIN_CLIENT_CLOSE_TIMEOUT_MS = 10000L;\n+  public static final long CLIENT_REQUEST_TIMEOUT_MS = 10000L;\n \n   private CruiseControlMetricsUtils() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MjM3NA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382242374", "bodyText": "Do we need to verify that the exception is a TopicExistsException and not due to another reason?", "author": "efeg", "createdAt": "2020-02-20T20:33:45Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -130,52 +145,98 @@ public void configure(Map<String, ?> configs) {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createMetricsTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n+  }\n+\n+  protected void createCruiseControlMetricsTopic() throws ExecutionException {\n+    try {\n+      CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n+      createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (InterruptedException | TimeoutException e) {\n+      LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);", "originalCommit": "ef6ec370fbc78fc0a14057c4184897583d1790df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyOTkxMA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382729910", "bodyText": "In the test I found that TopicExistsException will not be directly thrown out here, it will be wrapped by an ExecutionException. That's why we do not explicitly handle TopicExistsException.", "author": "kidkun", "createdAt": "2020-02-21T18:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MjM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MjIxNg==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382772216", "bodyText": "Isn't the ExecutionException thrown by the call to get for the future?\nTopicExistsException seems to be stored in CreateTopicsResponse  (i.e. please see CreateTopicsRequest#getErrorResponse), which is handled in KafkaAdminClient#createTopics -> handleResponse. This completes the future exceptionally.", "author": "efeg", "createdAt": "2020-02-21T19:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0MjM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6443dcfe9c971872f3d9e2d55c19abde87084ec8", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex 3407eb2d..b768b4c4 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -175,11 +176,17 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n     return newTopic;\n   }\n \n-  protected void createCruiseControlMetricsTopic() throws ExecutionException {\n+  protected void createCruiseControlMetricsTopic() throws TopicExistsException {\n     try {\n       CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n       createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n       LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (ExecutionException e) {\n+      if (e.getCause() instanceof TopicExistsException) {\n+        throw (TopicExistsException) e.getCause();\n+      } else {\n+        LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n+      }\n     } catch (InterruptedException | TimeoutException e) {\n       LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n     }\n"}}, {"oid": "11b001fa2d95e49e508836b5c8437d5a36a902c5", "url": "https://github.com/linkedin/cruise-control/commit/11b001fa2d95e49e508836b5c8437d5a36a902c5", "message": "Address the feedback.", "committedDate": "2020-02-21T18:13:52Z", "type": "commit"}, {"oid": "6443dcfe9c971872f3d9e2d55c19abde87084ec8", "url": "https://github.com/linkedin/cruise-control/commit/6443dcfe9c971872f3d9e2d55c19abde87084ec8", "message": "Address the feedback.", "committedDate": "2020-02-21T22:20:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MTAwOA==", "url": "https://github.com/linkedin/cruise-control/pull/1082#discussion_r382851008", "bodyText": "Not sure why we need a cast here.", "author": "efeg", "createdAt": "2020-02-21T23:21:18Z", "path": "cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java", "diffHunk": "@@ -130,52 +146,104 @@ public void configure(Map<String, ?> configs) {\n \n     if (reporterConfig.getBoolean(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_AUTO_CREATE_CONFIG)) {\n       try {\n-        _newTopic = createNewTopicFromReporterConfig(reporterConfig);\n+        _metricsTopic = createMetricsTopicFromReporterConfig(reporterConfig);\n         Properties adminClientConfigs = CruiseControlMetricsUtils.addSslConfigs(producerProps, reporterConfig);\n         _adminClient = CruiseControlMetricsUtils.createAdminClient(adminClientConfigs);\n       } catch (CruiseControlMetricsReporterException e) {\n         LOG.warn(\"Cruise Control metrics topic auto creation was disabled\", e);\n       }\n     }\n-\n   }\n \n-  private NewTopic createNewTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n-  throws CruiseControlMetricsReporterException {\n+  protected NewTopic createMetricsTopicFromReporterConfig(CruiseControlMetricsReporterConfig reporterConfig)\n+      throws CruiseControlMetricsReporterException {\n     String cruiseControlMetricsTopic =\n         reporterConfig.getString(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_CONFIG);\n     Integer cruiseControlMetricsTopicNumPartition =\n         reporterConfig.getInt(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_NUM_PARTITIONS_CONFIG);\n     Short cruiseControlMetricsTopicReplicaFactor =\n         reporterConfig.getShort(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_REPLICATION_FACTOR_CONFIG);\n-\n     if (cruiseControlMetricsTopicReplicaFactor <= 0 || cruiseControlMetricsTopicNumPartition <= 0) {\n       throw new CruiseControlMetricsReporterException(\"The topic configuration must explicitly set the replication factor and the num partitions\");\n     }\n+    NewTopic newTopic = new NewTopic(cruiseControlMetricsTopic, cruiseControlMetricsTopicNumPartition, cruiseControlMetricsTopicReplicaFactor);\n+\n+    Map<String, String> config = new HashMap<>(2);\n+    config.put(LogConfig.RetentionMsProp(),\n+               Long.toString(reporterConfig.getLong(CruiseControlMetricsReporterConfig.CRUISE_CONTROL_METRICS_TOPIC_RETENTION_MS_CONFIG)));\n+    config.put(LogConfig.CleanupPolicyProp(), CRUISE_CONTROL_METRICS_TOPIC_CLEAN_UP_POLICY);\n+    newTopic.configs(config);\n+    return newTopic;\n+  }\n+\n+  protected void createCruiseControlMetricsTopic() throws TopicExistsException {\n+    try {\n+      CreateTopicsResult createTopicsResult = _adminClient.createTopics(Collections.singletonList(_metricsTopic));\n+      createTopicsResult.values().get(_metricsTopic.name()).get(CLIENT_REQUEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+      LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n+    } catch (ExecutionException e) {\n+      if (e.getCause() instanceof TopicExistsException) {\n+        throw (TopicExistsException) e.getCause();", "originalCommit": "6443dcfe9c971872f3d9e2d55c19abde87084ec8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92c83da7bef041db946ee29f6011df7afe06f2d7", "chunk": "diff --git a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\nindex b768b4c4..ca1ad32f 100644\n--- a/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n+++ b/cruise-control-metrics-reporter/src/main/java/com/linkedin/kafka/cruisecontrol/metricsreporter/CruiseControlMetricsReporter.java\n\n@@ -183,7 +183,7 @@ public class CruiseControlMetricsReporter implements MetricsReporter, Runnable {\n       LOG.info(\"Cruise Control metrics topic {} is created.\", _cruiseControlMetricsTopic);\n     } catch (ExecutionException e) {\n       if (e.getCause() instanceof TopicExistsException) {\n-        throw (TopicExistsException) e.getCause();\n+        throw new TopicExistsException(e.getMessage());\n       } else {\n         LOG.warn(\"Unable to create Cruise Control metrics topic {}.\", _cruiseControlMetricsTopic, e);\n       }\n"}}, {"oid": "92c83da7bef041db946ee29f6011df7afe06f2d7", "url": "https://github.com/linkedin/cruise-control/commit/92c83da7bef041db946ee29f6011df7afe06f2d7", "message": "Address the feedback.", "committedDate": "2020-02-21T23:33:17Z", "type": "commit"}]}