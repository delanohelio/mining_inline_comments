{"pr_number": 1138, "pr_title": "Skip broker failure self-healing if abnormaly large amount of brokers die simultaneously", "pr_createdAt": "2020-03-10T00:54:29Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1138", "timeline": [{"oid": "0680b672934f9a537dec77e1d8f1e357a2471bef", "url": "https://github.com/linkedin/cruise-control/commit/0680b672934f9a537dec77e1d8f1e357a2471bef", "message": "Skip broker failure self-healing if abnomaly large amount of brokers die simultaneously.", "committedDate": "2020-03-10T00:53:46Z", "type": "commit"}, {"oid": "fee7b36c17b335b2a6131199937a175b618a3676", "url": "https://github.com/linkedin/cruise-control/commit/fee7b36c17b335b2a6131199937a175b618a3676", "message": "Fix build failure.", "committedDate": "2020-03-10T20:37:54Z", "type": "commit"}, {"oid": "2d160e8bcec768634950c0344708ae5ebda042a7", "url": "https://github.com/linkedin/cruise-control/commit/2d160e8bcec768634950c0344708ae5ebda042a7", "message": "Fix build failure 2.", "committedDate": "2020-03-10T21:27:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDE1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544158", "bodyText": "Can we make this method static?", "author": "efeg", "createdAt": "2020-03-14T01:24:56Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -181,9 +183,9 @@ public class BrokerFailureDetector {\n     }\n   }\n \n-  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n-    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n-           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  private boolean tooManyFailedBrokers(int failedBrokerCount, int aliveBrokerCount) {\n+    return failedBrokerCount > _fixableFailedBrokerCountThreshold ||\n+           (double) failedBrokerCount / (failedBrokerCount + aliveBrokerCount) > _fixableFailedBrokerPercentageThreshold;\n   }\n \n   private void reportBrokerFailures() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDQ4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544487", "bodyText": "Nit: IF -> If", "author": "efeg", "createdAt": "2020-03-14T01:28:38Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n+    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n+           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  }\n+\n   private void reportBrokerFailures() {\n     if (!_failedBrokers.isEmpty()) {\n-      Map<String, Object> parameterConfigOverrides = new HashMap<>(3);\n+      Map<String, Object> parameterConfigOverrides = new HashMap<>(4);\n       parameterConfigOverrides.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n-      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers());\n+      Map<Integer, Long> failedBrokers = failedBrokers();\n+      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers);\n       parameterConfigOverrides.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+      // IF there are too many broker fails at the same time, mark the anomaly as unfixable.", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -181,9 +183,9 @@ public class BrokerFailureDetector {\n     }\n   }\n \n-  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n-    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n-           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  private boolean tooManyFailedBrokers(int failedBrokerCount, int aliveBrokerCount) {\n+    return failedBrokerCount > _fixableFailedBrokerCountThreshold ||\n+           (double) failedBrokerCount / (failedBrokerCount + aliveBrokerCount) > _fixableFailedBrokerPercentageThreshold;\n   }\n \n   private void reportBrokerFailures() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDYzMg==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544632", "bodyText": "Since the focus of this patch is the addition of these configs, can we also make them configurable in this patch rather postponing it?", "author": "efeg", "createdAt": "2020-03-14T01:30:12Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n+  // TODO: make the threshold configurable\n+  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n+  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -44,18 +44,18 @@ import static java.util.stream.Collectors.toSet;\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  // Config to indicate whether detected broker failures are fixable or not.\n   public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n-  // TODO: make the threshold configurable\n-  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n-  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;\n   private final KafkaCruiseControl _kafkaCruiseControl;\n   private final String _failedBrokersZkPath;\n   private final ZkClient _zkClient;\n   private final KafkaZkClient _kafkaZkClient;\n   private final Map<Integer, Long> _failedBrokers;\n   private final Queue<Anomaly> _anomalies;\n+  private final int _fixableFailedBrokerCountThreshold;\n+  private final double _fixableFailedBrokerPercentageThreshold;\n \n   public BrokerFailureDetector(Queue<Anomaly> anomalies,\n                                KafkaCruiseControl kafkaCruiseControl) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDgyNA==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544824", "bodyText": "Nit: For consistency with the relevant config: deadBrokerCount -> failedBrokerCount?", "author": "efeg", "createdAt": "2020-03-14T01:32:34Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -181,9 +183,9 @@ public class BrokerFailureDetector {\n     }\n   }\n \n-  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n-    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n-           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  private boolean tooManyFailedBrokers(int failedBrokerCount, int aliveBrokerCount) {\n+    return failedBrokerCount > _fixableFailedBrokerCountThreshold ||\n+           (double) failedBrokerCount / (failedBrokerCount + aliveBrokerCount) > _fixableFailedBrokerPercentageThreshold;\n   }\n \n   private void reportBrokerFailures() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDkyNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392544925", "bodyText": "The role of this config is not clear from the name. Should we add a comment to clarify?", "author": "efeg", "createdAt": "2020-03-14T01:33:45Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -44,18 +44,18 @@ import static java.util.stream.Collectors.toSet;\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  // Config to indicate whether detected broker failures are fixable or not.\n   public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n-  // TODO: make the threshold configurable\n-  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n-  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;\n   private final KafkaCruiseControl _kafkaCruiseControl;\n   private final String _failedBrokersZkPath;\n   private final ZkClient _zkClient;\n   private final KafkaZkClient _kafkaZkClient;\n   private final Map<Integer, Long> _failedBrokers;\n   private final Queue<Anomaly> _anomalies;\n+  private final int _fixableFailedBrokerCountThreshold;\n+  private final double _fixableFailedBrokerPercentageThreshold;\n \n   public BrokerFailureDetector(Queue<Anomaly> anomalies,\n                                KafkaCruiseControl kafkaCruiseControl) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTI3NA==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392545274", "bodyText": "0.2 means that in a cluster of 9 brokers, more than 1 broker failure cannot be handled. This seems a little aggressive to me.\nCan we set the default FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY  and FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY to less aggressive values to avoid a dramatic change in the existing behavior?", "author": "efeg", "createdAt": "2020-03-14T01:38:20Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -44,8 +44,12 @@\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n+  // TODO: make the threshold configurable\n+  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n+  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -44,18 +44,18 @@ import static java.util.stream.Collectors.toSet;\n public class BrokerFailureDetector {\n   private static final Logger LOG = LoggerFactory.getLogger(BrokerFailureDetector.class);\n   public static final String FAILED_BROKERS_OBJECT_CONFIG = \"failed.brokers.object\";\n+  // Config to indicate whether detected broker failures are fixable or not.\n   public static final String BROKER_FAILURES_FIXABLE_CONFIG = \"broker.failures.fixable.object\";\n   private static final String ZK_BROKER_FAILURE_METRIC_GROUP = \"CruiseControlAnomaly\";\n   private static final String ZK_BROKER_FAILURE_METRIC_TYPE = \"BrokerFailure\";\n-  // TODO: make the threshold configurable\n-  private static final int FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY = 5;\n-  private static final double FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY = 0.2;\n   private final KafkaCruiseControl _kafkaCruiseControl;\n   private final String _failedBrokersZkPath;\n   private final ZkClient _zkClient;\n   private final KafkaZkClient _kafkaZkClient;\n   private final Map<Integer, Long> _failedBrokers;\n   private final Queue<Anomaly> _anomalies;\n+  private final int _fixableFailedBrokerCountThreshold;\n+  private final double _fixableFailedBrokerPercentageThreshold;\n \n   public BrokerFailureDetector(Queue<Anomaly> anomalies,\n                                KafkaCruiseControl kafkaCruiseControl) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392545763", "bodyText": "This comment seems inconsistent with the operation -- i.e. this piece of code just sets a config value.\nCan we move this comment to the relevant function that interprets this config?", "author": "efeg", "createdAt": "2020-03-14T01:44:47Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -177,12 +181,22 @@ private void parsePersistedFailedBrokers(String failedBrokerListString) {\n     }\n   }\n \n+  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n+    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n+           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  }\n+\n   private void reportBrokerFailures() {\n     if (!_failedBrokers.isEmpty()) {\n-      Map<String, Object> parameterConfigOverrides = new HashMap<>(3);\n+      Map<String, Object> parameterConfigOverrides = new HashMap<>(4);\n       parameterConfigOverrides.put(KAFKA_CRUISE_CONTROL_OBJECT_CONFIG, _kafkaCruiseControl);\n-      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers());\n+      Map<Integer, Long> failedBrokers = failedBrokers();\n+      parameterConfigOverrides.put(FAILED_BROKERS_OBJECT_CONFIG, failedBrokers);\n       parameterConfigOverrides.put(ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG, _kafkaCruiseControl.timeMs());\n+      // IF there are too many broker fails at the same time, mark the anomaly as unfixable.", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex 2856677e..ef82128e 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -181,9 +183,9 @@ public class BrokerFailureDetector {\n     }\n   }\n \n-  private boolean tooManyFailedBrokers(int deadBrokerCount, int aliveBrokerCount) {\n-    return deadBrokerCount > FIXABLE_BROKER_FAILURE_UPPER_BOUNDARY ||\n-           (double) deadBrokerCount / (deadBrokerCount + aliveBrokerCount) > FIXABLE_BROKER_FAILURE_PERCENTAGE_UPPER_BOUNDARY;\n+  private boolean tooManyFailedBrokers(int failedBrokerCount, int aliveBrokerCount) {\n+    return failedBrokerCount > _fixableFailedBrokerCountThreshold ||\n+           (double) failedBrokerCount / (failedBrokerCount + aliveBrokerCount) > _fixableFailedBrokerPercentageThreshold;\n   }\n \n   private void reportBrokerFailures() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjIzMw==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546233", "bodyText": "This seems to subsume / hide the detail on non-fixable broker failure state. Can we make sure that this information is exposed in (1) alerts, (2) logs, and (3) anomaly detector state?", "author": "efeg", "createdAt": "2020-03-14T01:50:56Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/notifier/SelfHealingNotifier.java", "diffHunk": "@@ -233,8 +233,8 @@ public AnomalyNotificationResult onBrokerFailure(BrokerFailures brokerFailures)\n       long delay = selfHealingTimeMs - nowMs;\n       result = AnomalyNotificationResult.check(delay);\n     } else {\n-      // Reached auto fix threshold. Alert and fix if self healing is enabled.\n-      boolean autoFixTriggered = _selfHealingEnabled.get(KafkaAnomalyType.BROKER_FAILURE);\n+      // Reached auto fix threshold. Alert and fix if self healing is enabled and anomaly is fixable.\n+      boolean autoFixTriggered = _selfHealingEnabled.get(KafkaAnomalyType.BROKER_FAILURE) && brokerFailures.fixable();", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjM1Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546352", "bodyText": "Can we clarify what it means to be fixable for broker failures?", "author": "efeg", "createdAt": "2020-03-14T01:52:23Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "diffHunk": "@@ -43,11 +44,19 @@ public BrokerFailures() {\n     return _failedBrokers;\n   }\n \n+  /**\n+   * Whether detected broker failures are fixable or not.", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\nindex 7fe9191d..04fab0d3 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\n\n@@ -46,6 +46,8 @@ public class BrokerFailures extends KafkaAnomaly {\n \n   /**\n    * Whether detected broker failures are fixable or not.\n+   * If there are too many broker fails at the same time, the anomaly is taken as unfixable and needs human intervention.\n+   *\n    * @return True is detected broker failures are fixable.\n    */\n   public boolean fixable() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjQ5Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r392546492", "bodyText": "Can we add unit tests for this new functionality?", "author": "efeg", "createdAt": "2020-03-14T01:54:15Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTest.java", "diffHunk": "@@ -48,6 +48,7 @@\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.KAFKA_CRUISE_CONTROL_OBJECT_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.ANOMALY_DETECTION_TIME_MS_OBJECT_CONFIG;\n import static com.linkedin.kafka.cruisecontrol.detector.AnomalyDetectorUtils.anomalyComparator;\n+import static com.linkedin.kafka.cruisecontrol.detector.BrokerFailureDetector.BROKER_FAILURES_FIXABLE_CONFIG;", "originalCommit": "2d160e8bcec768634950c0344708ae5ebda042a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "url": "https://github.com/linkedin/cruise-control/commit/780c086647ca2ee75bd1e58424fcdd1719da5e9f", "message": "Address the feedback.", "committedDate": "2020-03-16T00:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDg2Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393150866", "bodyText": "fails -> failures", "author": "efeg", "createdAt": "2020-03-16T16:27:14Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java", "diffHunk": "@@ -46,6 +46,8 @@ public BrokerFailures() {\n \n   /**\n    * Whether detected broker failures are fixable or not.\n+   * If there are too many broker fails at the same time, the anomaly is taken as unfixable and needs human intervention.", "originalCommit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad1bccb97a3019523cdc95e7445f58258b3ce84", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\nindex 04fab0d3..7e7bf2e5 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailures.java\n\n@@ -46,7 +46,7 @@ public class BrokerFailures extends KafkaAnomaly {\n \n   /**\n    * Whether detected broker failures are fixable or not.\n-   * If there are too many broker fails at the same time, the anomaly is taken as unfixable and needs human intervention.\n+   * If there are too many broker failures at the same time, the anomaly is taken as unfixable and needs human intervention.\n    *\n    * @return True is detected broker failures are fixable.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTcwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393151703", "bodyText": "Isn't it sufficient to make this and _fixableFailedBrokerCountThreshold  a Short?", "author": "efeg", "createdAt": "2020-03-16T16:28:36Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java", "diffHunk": "@@ -71,6 +71,8 @@ public BrokerFailureDetector(Queue<Anomaly> anomalies,\n     _failedBrokersZkPath = config.getString(AnomalyDetectorConfig.FAILED_BROKERS_ZK_PATH_CONFIG);\n     _anomalies = anomalies;\n     _kafkaCruiseControl = kafkaCruiseControl;\n+    _fixableFailedBrokerCountThreshold = config.getInt(AnomalyDetectorConfig.FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG);", "originalCommit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad1bccb97a3019523cdc95e7445f58258b3ce84", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\nindex ef82128e..f040162a 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/detector/BrokerFailureDetector.java\n\n@@ -71,7 +71,7 @@ public class BrokerFailureDetector {\n     _failedBrokersZkPath = config.getString(AnomalyDetectorConfig.FAILED_BROKERS_ZK_PATH_CONFIG);\n     _anomalies = anomalies;\n     _kafkaCruiseControl = kafkaCruiseControl;\n-    _fixableFailedBrokerCountThreshold = config.getInt(AnomalyDetectorConfig.FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG);\n+    _fixableFailedBrokerCountThreshold = config.getShort(AnomalyDetectorConfig.FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG);\n     _fixableFailedBrokerPercentageThreshold = config.getDouble(AnomalyDetectorConfig.FIXABLE_FAILED_BROKER_PERCENTAGE_THRESHOLD_CONFIG);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjA3MA==", "url": "https://github.com/linkedin/cruise-control/pull/1138#discussion_r393152070", "bodyText": "Should this be a Short?", "author": "efeg", "createdAt": "2020-03-16T16:29:08Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java", "diffHunk": "@@ -264,6 +282,16 @@ public static ConfigDef define(ConfigDef configDef) {\n                             DEFAULT_FAILED_BROKERS_ZK_PATH,\n                             ConfigDef.Importance.LOW,\n                             FAILED_BROKERS_ZK_PATH_DOC)\n+                    .define(FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG,\n+                            ConfigDef.Type.INT,", "originalCommit": "780c086647ca2ee75bd1e58424fcdd1719da5e9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aad1bccb97a3019523cdc95e7445f58258b3ce84", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java\nindex 35939b7f..ad2cc587 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/constants/AnomalyDetectorConfig.java\n\n@@ -283,7 +283,7 @@ public class AnomalyDetectorConfig {\n                             ConfigDef.Importance.LOW,\n                             FAILED_BROKERS_ZK_PATH_DOC)\n                     .define(FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_CONFIG,\n-                            ConfigDef.Type.INT,\n+                            ConfigDef.Type.SHORT,\n                             DEFAULT_FIXABLE_FAILED_BROKER_COUNT_THRESHOLD,\n                             ConfigDef.Importance.LOW,\n                             FIXABLE_FAILED_BROKER_COUNT_THRESHOLD_DOC)\n"}}, {"oid": "aad1bccb97a3019523cdc95e7445f58258b3ce84", "url": "https://github.com/linkedin/cruise-control/commit/aad1bccb97a3019523cdc95e7445f58258b3ce84", "message": "Address the feedback.", "committedDate": "2020-03-16T16:50:50Z", "type": "commit"}]}