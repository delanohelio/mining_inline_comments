{"pr_number": 1381, "pr_title": "Fix a bug that might cause invalid throttle replica list to be used", "pr_createdAt": "2020-11-06T09:30:50Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1381", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM5Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520762393", "bodyText": "Superfluous parentheses around (1) !configKey.equals(LEADER_THROTTLED_RATE) and (2) !configKey.equals(FOLLOWER_THROTTLED_RATE). Can we drop them for better readability?\n\n\nPlease see https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html\n\n\nNit: This is a private function of the class -- i.e. no public / protected / package private access. Hence, I feel that this sanity check is redundant all together, but the decision to keep or remove it is up to you.", "author": "efeg", "createdAt": "2020-11-10T18:00:52Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -151,8 +151,14 @@ private void setFollowerThrottledRateIfUnset(int brokerId) {\n   }\n \n   private void setThrottledRateIfUnset(int brokerId, String configKey) {\n-    assert (_throttleRate != null);\n-    assert (configKey.equals(LEADER_THROTTLED_RATE) || configKey.equals(FOLLOWER_THROTTLED_RATE));\n+    if (_throttleRate == null) {\n+      throw new IllegalStateException(\"Throttle rate cannot be null\");\n+    }\n+    if ((!configKey.equals(LEADER_THROTTLED_RATE)) && (!configKey.equals(FOLLOWER_THROTTLED_RATE))) {", "originalCommit": "76b9676f698d595fe070f279aa89b91cd098e26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MzQ4MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520843481", "bodyText": "I will remove the superfluous parentheses.\n\n\nI will keep this check. I don't think of it as a sanity check since it's not checking input parameters. Instead, it's basically saying \"if at this point of the execution, the _throttleRate  field is null, that means we have an illegal state\". Therefore, it has nothing to do with whether this method is public/protected/private.", "author": "Lincong", "createdAt": "2020-11-10T20:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1ODQ0Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520858443", "bodyText": "I will keep this check. I don't think of it as a sanity check since it's not checking input parameters. Instead, it's basically saying \"if at this point of the execution, the _throttleRate field is null, that means we have an illegal state\". Therefore, it has nothing to do with whether this method is public/protected/private.\n\nMy comment is about configKey, which is an input to this private function, -- i.e. not about _throttleRate.", "author": "efeg", "createdAt": "2020-11-10T20:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgwNTY1NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521805655", "bodyText": "I see. OK, I will remove this sanity check.", "author": "Lincong", "createdAt": "2020-11-12T03:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex 3ce113aa..ceee2622 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -154,7 +154,7 @@ class ReplicationThrottleHelper {\n     if (_throttleRate == null) {\n       throw new IllegalStateException(\"Throttle rate cannot be null\");\n     }\n-    if ((!configKey.equals(LEADER_THROTTLED_RATE)) && (!configKey.equals(FOLLOWER_THROTTLED_RATE))) {\n+    if (!configKey.equals(LEADER_THROTTLED_RATE) && !configKey.equals(FOLLOWER_THROTTLED_RATE)) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_RATE, FOLLOWER_THROTTLED_RATE));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzQ0MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520763441", "bodyText": "Superfluous parentheses - please see the comment above.", "author": "efeg", "createdAt": "2020-11-10T18:02:35Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {", "originalCommit": "76b9676f698d595fe070f279aa89b91cd098e26f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex 3ce113aa..ceee2622 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520773539", "bodyText": "Does this private function ever expected to get * as input for a replica in replicas? Isn't this dead code?", "author": "efeg", "createdAt": "2020-11-10T18:19:47Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed\n+      return;\n+    }\n+\n+    if (replicas.size() == 1 && replicas.iterator().next().trim().equals(\"*\")) {\n+      config.setProperty(configKey, \"*\");\n+    } else {", "originalCommit": "76b9676f698d595fe070f279aa89b91cd098e26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDMwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520850302", "bodyText": "Considering the current state of the codebase, this private function does not take * as input. But just looking at this private method itself, we do not know what is going to change on its caller side in the future. Due to my defensive style, I prefer not to make assumptions regarding what callers will or never pass to a method even if the method is private. It might be dead code. But it's safe and handles a very valid case.", "author": "Lincong", "createdAt": "2020-11-10T20:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NTk2MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520865961", "bodyText": "But it's safe and handles a very valid case.\n\nThe key issue is that this is not a valid case.\nThis code can generate inconsistent / incorrect behavior -- i.e. replication throttler shall never set this config to *.\nThis is not making the code defensive, on the contrary, it makes it more vulnerable to errors.\n\nWe also seem to be missing tests for the added fix -- can we add unit tests please?", "author": "efeg", "createdAt": "2020-11-10T20:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3OTU4OA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521579588", "bodyText": "I'm not following exactly, but given the bug happened where a * and a kv-list were joined (thus this PR), it well might be that this method gets called with a * member, isn't it?\nhttps://kafka.apache.org/documentation/#leader.replication.throttled.replicas and the Kafka validation code certainly allows for *. If CC should not allow for a * in this method, what is the codepath that still smuggled it? Or otherwise how could the bug happen?\nAgree the unit-tests would be welcome nevertheless.", "author": "robinp-tw", "createdAt": "2020-11-11T19:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyODI1Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521828253", "bodyText": "I think @efeg 's point is that this private method should never get an input arg that makes the below predicate true\nreplicas.size() == 1 && replicas.iterator().next().trim().equals(WILD_CARD_ASTERISK)\n\nIf it does, that implies some problem. So, we should not even check this case and not config.setProperty(configKey, \"*\")\nI'll remove this branch of the if-statement.", "author": "Lincong", "createdAt": "2020-11-12T04:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3MzUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex 3ce113aa..ceee2622 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520779624", "bodyText": "Don't we need a similar special treatment when removing throttled replicas from a topic? If the existing throttle is *, it should be guaranteed that it is not set by CC; hence, shouldn't we leave it as it is (i.e. untouched)?", "author": "efeg", "createdAt": "2020-11-10T18:30:33Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {", "originalCommit": "76b9676f698d595fe070f279aa89b91cd098e26f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NjQ5Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520846497", "bodyText": "As for If the existing throttle is *, it should be guaranteed that it is not set by CC, I think my change ensures that. Did I misunderstood your point or miss anything?\n    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n      // The existing setup throttles all replica. So, nothing needs to be changed\n      return;\n    }\n\nThe oldThrottledReplicas  in the above code snippet is the \"existing throttle\".", "author": "Lincong", "createdAt": "2020-11-10T20:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTMzOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r520871339", "bodyText": "Does #removeThrottledReplicasFromTopic take the right action (i.e. leave the value as *) when the relevant config was already *? I suspect that it doesn't.\n\nWe are also missing a unit test for this scenario, can we add one?", "author": "efeg", "createdAt": "2020-11-10T21:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjgxMg==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521932812", "bodyText": "That's a good point. I will modify removeThrottledReplicasFromTopic  to handle the * case and add unit test.", "author": "Lincong", "createdAt": "2020-11-12T08:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3OTYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex 3ce113aa..ceee2622 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3MzUzMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521573531", "bodyText": "optional: extract this repeated into some helper (assertConfigKeyIsThrottledReplicas(...) ?)", "author": "robinp-tw", "createdAt": "2020-11-11T18:59:54Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {", "originalCommit": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMzg0MA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521933840", "bodyText": "I will change the method to be the following so that we do not need to worry about illegal input arguments:\n  private void setThrottledReplicas(String topic, Set<String> replicas, boolean throttleLeaderReplica) {\n    String replicaThrottleConfigKey = throttleLeaderReplica ? LEADER_THROTTLED_REPLICAS : FOLLOWER_THROTTLED_REPLICAS;\n // ...", "author": "Lincong", "createdAt": "2020-11-12T08:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3MzUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex ceee2622..3ce113aa 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NDkxNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521574915", "bodyText": "nit - end-of-line dot missing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // The existing setup throttles all replica. So, nothing needs to be changed\n          \n          \n            \n                  // The existing setup throttles all replica. So, nothing needs to be changed.", "author": "robinp-tw", "createdAt": "2020-11-11T19:02:34Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed", "originalCommit": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex ceee2622..3ce113aa 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NTE4MA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521575180", "bodyText": "nit: magic value \"*\" to a constant?", "author": "robinp-tw", "createdAt": "2020-11-11T19:03:07Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -173,15 +179,28 @@ private void setFollowerThrottledReplicas(String topic, Set<String> replicas) {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    assert (configKey.equals(LEADER_THROTTLED_REPLICAS) || configKey.equals(FOLLOWER_THROTTLED_REPLICAS));\n+    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n+    }\n+\n     Properties config = _kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topic);\n-    // Merge new throttled replicas with existing configuration values.\n-    Set<String> newThrottledReplicas = new TreeSet<>(replicas);\n     String oldThrottledReplicas = config.getProperty(configKey);\n-    if (oldThrottledReplicas != null) {\n-      newThrottledReplicas.addAll(Arrays.asList(oldThrottledReplicas.split(\",\")));\n+    if (oldThrottledReplicas != null && oldThrottledReplicas.trim().equals(\"*\")) {\n+      // The existing setup throttles all replica. So, nothing needs to be changed\n+      return;\n+    }\n+\n+    if (replicas.size() == 1 && replicas.iterator().next().trim().equals(\"*\")) {", "originalCommit": "d41e0a50547258e7cf7b739c5b6decd4838b7ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyNzAwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r521827003", "bodyText": "I will use a constant named WILD_CARD_ASTERISK for \"*\"", "author": "Lincong", "createdAt": "2020-11-12T04:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex ceee2622..3ce113aa 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -179,7 +179,7 @@ class ReplicationThrottleHelper {\n   }\n \n   private void setThrottledReplicas(String topic, Set<String> replicas, String configKey) {\n-    if (!configKey.equals(LEADER_THROTTLED_REPLICAS) && !configKey.equals(FOLLOWER_THROTTLED_REPLICAS)) {\n+    if ((!configKey.equals(LEADER_THROTTLED_REPLICAS)) && (!configKey.equals(FOLLOWER_THROTTLED_REPLICAS))) {\n       throw new IllegalArgumentException(\n           String.format(\"Config key must be either %s or %s\", LEADER_THROTTLED_REPLICAS, FOLLOWER_THROTTLED_REPLICAS));\n     }\n"}}, {"oid": "56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "url": "https://github.com/linkedin/cruise-control/commit/56c9479b2ea01674865bb94f4b9aa79abfcf1f77", "message": "Fix a bug that might cause invalid throttle replica list to be used", "committedDate": "2020-11-13T08:39:04Z", "type": "commit"}, {"oid": "39cb3a3bec204bea3e330a2c8321b386bbca399a", "url": "https://github.com/linkedin/cruise-control/commit/39cb3a3bec204bea3e330a2c8321b386bbca399a", "message": "Removed superfluous parentheses", "committedDate": "2020-11-13T08:39:04Z", "type": "commit"}, {"oid": "5ff5974dd6baf6f06043355405e15147bc3fb22e", "url": "https://github.com/linkedin/cruise-control/commit/5ff5974dd6baf6f06043355405e15147bc3fb22e", "message": "Handle the removeThrottledRateFromBroker method", "committedDate": "2020-11-13T08:39:04Z", "type": "commit"}, {"oid": "6883909cf2534e690dfdf1671dd8fef2cd2a66d7", "url": "https://github.com/linkedin/cruise-control/commit/6883909cf2534e690dfdf1671dd8fef2cd2a66d7", "message": "Add a unit test", "committedDate": "2020-11-13T08:39:04Z", "type": "commit"}, {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "url": "https://github.com/linkedin/cruise-control/commit/c5b44f1de4f472ebadb94b65d835d1e55bf49103", "message": "Re-named oldFollower* and oldLeader* to currFollower* and currLeader* since it's more accurate", "committedDate": "2020-11-13T08:39:04Z", "type": "commit"}, {"oid": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "url": "https://github.com/linkedin/cruise-control/commit/c5b44f1de4f472ebadb94b65d835d1e55bf49103", "message": "Re-named oldFollower* and oldLeader* to currFollower* and currLeader* since it's more accurate", "committedDate": "2020-11-13T08:39:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMxNTU4Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523315586", "bodyText": "Nit: WILD_CARD_ASTERISK -> WILDCARD_ASTERISK", "author": "efeg", "createdAt": "2020-11-14T01:10:16Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -28,7 +28,7 @@\n  */\n class ReplicationThrottleHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationThrottleHelper.class);\n-\n+  static final String WILD_CARD_ASTERISK = \"*\";", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex b8a42cc0..859574e3 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -28,7 +28,7 @@ import java.util.stream.Stream;\n  */\n class ReplicationThrottleHelper {\n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationThrottleHelper.class);\n-  static final String WILD_CARD_ASTERISK = \"*\";\n+  static final String WILDCARD_ASTERISK = \"*\";\n   static final String LEADER_THROTTLED_RATE = \"leader.replication.throttled.rate\";\n   static final String FOLLOWER_THROTTLED_RATE = \"follower.replication.throttled.rate\";\n   static final String LEADER_THROTTLED_REPLICAS = LogConfig.LeaderReplicationThrottledReplicasProp();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMyNDM1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523324358", "bodyText": "Nit: So, not remove ... -> So, do not remove ...\n\nmultiple occurrences, please see #removeThrottledRateFromBroker", "author": "efeg", "createdAt": "2020-11-14T01:20:31Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java", "diffHunk": "@@ -191,65 +199,101 @@ static String removeReplicasFromConfig(String throttleConfig, Set<String> replic\n     return String.join(\",\", throttles);\n   }\n \n-  private void removeLeaderThrottledReplicasFromTopic(Properties config, String topic, Set<String> replicas) {\n-    String oldLeaderThrottledReplicas = config.getProperty(LEADER_THROTTLED_REPLICAS);\n-    if (oldLeaderThrottledReplicas != null) {\n+  /**\n+   * It gets whether there is any throttled leader replica specified in the configuration property. If there is and the\n+   * specified throttled leader replica does not equal to \"*\", it modifies the configuration property by removing a\n+   * given set of replicas from the a set of throttled leader replica\n+   *\n+   * @param config configuration properties\n+   * @param topic name of topic which contains <code>replicas</code>\n+   * @param replicas replicas to remove from the configuration properties\n+   * @return true if the given configuration properties are modified and false otherwise\n+   */\n+  private boolean removeLeaderThrottledReplicasFromTopic(Properties config, String topic, Set<String> replicas) {\n+    String currLeaderThrottledReplicas = config.getProperty(LEADER_THROTTLED_REPLICAS);\n+    if (currLeaderThrottledReplicas != null) {\n+      if (currLeaderThrottledReplicas.equals(WILD_CARD_ASTERISK)) {\n+        LOG.debug(\"Existing config throttles all leader replicas. So, not remove any leader replica throttle\");", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\nindex b8a42cc0..859574e3 100644\n--- a/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n+++ b/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelper.java\n\n@@ -212,8 +212,8 @@ class ReplicationThrottleHelper {\n   private boolean removeLeaderThrottledReplicasFromTopic(Properties config, String topic, Set<String> replicas) {\n     String currLeaderThrottledReplicas = config.getProperty(LEADER_THROTTLED_REPLICAS);\n     if (currLeaderThrottledReplicas != null) {\n-      if (currLeaderThrottledReplicas.equals(WILD_CARD_ASTERISK)) {\n-        LOG.debug(\"Existing config throttles all leader replicas. So, not remove any leader replica throttle\");\n+      if (currLeaderThrottledReplicas.equals(WILDCARD_ASTERISK)) {\n+        LOG.debug(\"Existing config throttles all leader replicas. So, do not remove any leader replica throttle\");\n         return false;\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzMTc5OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523331799", "bodyText": "Nit: Indentation seems off -- can we use:\n    for (String replicaThrottleProp : Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS,\n                                                    ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {", "author": "efeg", "createdAt": "2020-11-14T01:29:17Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -61,6 +61,15 @@ private void createTopics() {\n     }\n   }\n \n+  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n+    for (String replicaThrottleProp :\n+        Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -61,11 +61,11 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     }\n   }\n \n-  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n-    for (String replicaThrottleProp :\n-        Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {\n+  private static void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n+    for (String replicaThrottleProp : Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS,\n+                                                    ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {\n       Properties config = kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topicName);\n-      config.setProperty(replicaThrottleProp, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+      config.setProperty(replicaThrottleProp, ReplicationThrottleHelper.WILDCARD_ASTERISK);\n       ExecutorUtils.changeTopicConfig(new AdminZkClient(kafkaZkClient), topicName, config);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDcxMA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523334710", "bodyText": "Can we make this function static? This would make it clear that it does not modify the state of the object and just a utility function.", "author": "efeg", "createdAt": "2020-11-14T01:35:10Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -61,6 +61,15 @@ private void createTopics() {\n     }\n   }\n \n+  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MTIzOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523381239", "bodyText": "OK. Btw, I used to add static to methods that are \"stateless\" in some other projects as well. But I was told by code reviewers not to do that and their argument is that static should, in general, be avoided as much as possible. If you can refer me to some authoritative Java best practice doc that explicitly mentioned that such cases are valid/recommended cases to use the static keyword, that'd be very nice. Personally, I slightly prefer to use static for private stateless function.", "author": "Lincong", "createdAt": "2020-11-14T05:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5NDkwMA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523794900", "bodyText": "I typically choose static to improve clarity if at all possible.\nThere are some cases, where mocking a method is needed and it is either not possible or tricky to do so with static methods (e.g. due to limitations of EasyMock). For those cases, making the method non-static would be understandable.", "author": "efeg", "createdAt": "2020-11-15T18:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -61,11 +61,11 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     }\n   }\n \n-  private void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n-    for (String replicaThrottleProp :\n-        Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS, ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {\n+  private static void setWildcardThrottleReplicaForTopic(KafkaZkClient kafkaZkClient, String topicName) {\n+    for (String replicaThrottleProp : Arrays.asList(ReplicationThrottleHelper.LEADER_THROTTLED_REPLICAS,\n+                                                    ReplicationThrottleHelper.FOLLOWER_THROTTLED_REPLICAS)) {\n       Properties config = kafkaZkClient.getEntityConfigs(ConfigType.Topic(), topicName);\n-      config.setProperty(replicaThrottleProp, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+      config.setProperty(replicaThrottleProp, ReplicationThrottleHelper.WILDCARD_ASTERISK);\n       ExecutorUtils.changeTopicConfig(new AdminZkClient(kafkaZkClient), topicName, config);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNDg2Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523334867", "bodyText": "Nit: Bad indentation.", "author": "efeg", "createdAt": "2020-11-14T01:36:04Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -229,19 +229,17 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     final long throttleRate = 100L;\n \n     ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n-    ExecutionProposal proposal = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 0),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n-\n-    ExecutionProposal proposal2 = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 1),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, 0),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(new TopicPartition(TOPIC0, 1),\n+                                            100,\n+                                                        new ReplicaPlacementInfo(0),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n \n     throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNTI1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523335258", "bodyText": "Nit: Bad indentation -- please align after ( and refrain from putting the first argument to ExecutionProposal on a different line -- looks like the rest of this test (independent of this PR) also has issues with those.", "author": "efeg", "createdAt": "2020-11-14T01:39:07Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDk5Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523380997", "bodyText": "Fixed this case and other such cases as well", "author": "Lincong", "createdAt": "2020-11-14T05:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNTI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -229,19 +229,17 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     final long throttleRate = 100L;\n \n     ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n-    ExecutionProposal proposal = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 0),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n-\n-    ExecutionProposal proposal2 = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 1),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, 0),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(new TopicPartition(TOPIC0, 1),\n+                                            100,\n+                                                        new ReplicaPlacementInfo(0),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n \n     throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjQ4MA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523336480", "bodyText": "This test and testDoNotRemoveThrottlesForInProgressTasks seems to have some duplicate parts. I am curious if we can extract those common code to a function?", "author": "efeg", "createdAt": "2020-11-14T01:46:45Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MjE5Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523382196", "bodyText": "It's totally possible to extract common code to a function. However, IMO, that would decrease the readability of both test cases. I would suggest considering refactoring out the common part when we have more unit tests testing the same workflow since currently there are only 2 such unit tests (not too much redundancy) and each of them is readable and easy to follow the test workflow.", "author": "Lincong", "createdAt": "2020-11-14T06:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNjQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -229,19 +229,17 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     final long throttleRate = 100L;\n \n     ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n-    ExecutionProposal proposal = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 0),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n-\n-    ExecutionProposal proposal2 = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 1),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, 0),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(new TopicPartition(TOPIC0, 1),\n+                                            100,\n+                                                        new ReplicaPlacementInfo(0),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n \n     throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNzAzNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523337035", "bodyText": "This comment is not correct right? -- i.e. it should not clean everything as you have demonstrated below with the topic-level throttled replica config remaining as WILD_CARD_ASTERISK.", "author": "efeg", "createdAt": "2020-11-14T01:50:44Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n+\n+    ExecutionTask completedTask = completedTaskForProposal(0, proposal);\n+    ExecutionTask inProgressTask = inProgressTaskForProposal(1, proposal2);\n+\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // passing an inProgress task that is not complete should have no effect.\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // Completing the in-progress task and clearing the throttles should clean everything up.", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM3ODkxMw==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523378913", "bodyText": "Correct", "author": "Lincong", "createdAt": "2020-11-14T05:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNzAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -229,19 +229,17 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     final long throttleRate = 100L;\n \n     ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n-    ExecutionProposal proposal = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 0),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n-\n-    ExecutionProposal proposal2 = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 1),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, 0),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(new TopicPartition(TOPIC0, 1),\n+                                            100,\n+                                                        new ReplicaPlacementInfo(0),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n \n     throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMzNzIwNA==", "url": "https://github.com/linkedin/cruise-control/pull/1381#discussion_r523337204", "bodyText": "Nit: Redundant new line", "author": "efeg", "createdAt": "2020-11-14T01:51:59Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java", "diffHunk": "@@ -206,6 +215,81 @@ public void testAddingThrottlesWithPreExistingThrottles() throws InterruptedExce\n     assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, \"1:1\");\n   }\n \n+  @Test\n+  public void testDoNotModifyExistingWildcardReplicaThrottles() {\n+    createTopics();\n+\n+    KafkaZkClient kafkaZkClient = KafkaCruiseControlUtils.createKafkaZkClient(zookeeper().connectionString(),\n+        \"ReplicationThrottleHelperTestMetricGroup\", \"AddingThrottlesWithNoPreExistingThrottles\", false);\n+\n+    // Set replica throttle config values for both topics\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC0);\n+    setWildcardThrottleReplicaForTopic(kafkaZkClient, TOPIC1);\n+\n+    final long throttleRate = 100L;\n+\n+    ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n+    ExecutionProposal proposal = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 0),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(\n+        new TopicPartition(TOPIC0, 1),\n+        100,\n+        new ReplicaPlacementInfo(0),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n+\n+    ExecutionTask completedTask = completedTaskForProposal(0, proposal);\n+    ExecutionTask inProgressTask = inProgressTaskForProposal(1, proposal2);\n+\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // passing an inProgress task that is not complete should have no effect.\n+    throttleHelper.clearThrottles(Collections.singletonList(completedTask), Collections.singletonList(inProgressTask));\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 0, throttleRate);\n+    // we expect broker 1 to be null since all replica movement related to it has completed.\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 1, null);\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 2, throttleRate);\n+    // We expect broker 3 to have a throttle on it because there is an in-progress replica being moved\n+    assertExpectedThrottledRateForBroker(kafkaZkClient, 3, throttleRate);\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+\n+    // Completing the in-progress task and clearing the throttles should clean everything up.\n+    inProgressTask.completed(3);\n+    throttleHelper.clearThrottles(Arrays.asList(completedTask, inProgressTask), Collections.emptyList());\n+\n+    Arrays.asList(0, 1, 2, 3).forEach((i) -> assertExpectedThrottledRateForBroker(kafkaZkClient, i, null));\n+    // Topic-level throttled replica config value should remain as \"*\"\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC0, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+    assertExpectedThrottledReplicas(kafkaZkClient, TOPIC1, ReplicationThrottleHelper.WILD_CARD_ASTERISK);\n+  }\n+", "originalCommit": "c5b44f1de4f472ebadb94b65d835d1e55bf49103", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "chunk": "diff --git a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\nindex 72960fdf..700f0322 100644\n--- a/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n+++ b/cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/executor/ReplicationThrottleHelperTest.java\n\n@@ -229,19 +229,17 @@ public class ReplicationThrottleHelperTest extends CCKafkaIntegrationTestHarness\n     final long throttleRate = 100L;\n \n     ReplicationThrottleHelper throttleHelper = new ReplicationThrottleHelper(kafkaZkClient, throttleRate);\n-    ExecutionProposal proposal = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 0),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n-\n-    ExecutionProposal proposal2 = new ExecutionProposal(\n-        new TopicPartition(TOPIC0, 1),\n-        100,\n-        new ReplicaPlacementInfo(0),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n-        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+    ExecutionProposal proposal = new ExecutionProposal(new TopicPartition(TOPIC0, 0),\n+                                           100,\n+                                                       new ReplicaPlacementInfo(0),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(1)),\n+                                                       Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n+\n+    ExecutionProposal proposal2 = new ExecutionProposal(new TopicPartition(TOPIC0, 1),\n+                                            100,\n+                                                        new ReplicaPlacementInfo(0),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(3)),\n+                                                        Arrays.asList(new ReplicaPlacementInfo(0), new ReplicaPlacementInfo(2)));\n \n     throttleHelper.setThrottles(Arrays.asList(proposal, proposal2));\n \n"}}, {"oid": "1f7b180e1a1433570df8e4a5bd4f787b076a016d", "url": "https://github.com/linkedin/cruise-control/commit/1f7b180e1a1433570df8e4a5bd4f787b076a016d", "message": "Fix issues", "committedDate": "2020-11-14T06:05:47Z", "type": "commit"}, {"oid": "1c29c4b49034868dbf96b951e6fab2f6d5130649", "url": "https://github.com/linkedin/cruise-control/commit/1c29c4b49034868dbf96b951e6fab2f6d5130649", "message": "Fix more identation cases", "committedDate": "2020-11-14T06:11:35Z", "type": "commit"}]}