{"pr_number": 8469, "pr_title": "[BAEL-3339] - Creates @CurrentSecurityContext example", "pr_createdAt": "2020-01-03T13:04:10Z", "pr_url": "https://github.com/eugenp/tutorials/pull/8469", "timeline": [{"oid": "cd9b7f6cfc9aa6ec845fa4303ca4b3a44920f1f8", "url": "https://github.com/eugenp/tutorials/commit/cd9b7f6cfc9aa6ec845fa4303ca4b3a44920f1f8", "message": "[BAEL-3339] - Creates @CurrentSecurityContext example", "committedDate": "2020-01-03T16:26:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0NTQ2MQ==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r363045461", "bodyText": "These fields would normally be private in a unit test.", "author": "ashleyfrieze", "createdAt": "2020-01-04T17:18:59Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java", "diffHunk": "@@ -1,33 +1,68 @@\n package com.baeldung.springbootsecurity.oauth2server;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.web.client.RequestCallback;\n+import org.springframework.web.client.ResponseExtractor;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = RANDOM_PORT, classes = SpringBootAuthorizationServerApplication.class)\n @ActiveProfiles(\"authz\")\n public class CustomConfigAuthorizationServerIntegrationTest extends OAuth2IntegrationTestSupport {\n \n+    URL base;\n+\n+    @LocalServerPort\n+    int port;", "originalCommit": "03e16a23d1dec782c448a217e5936ea1cf6f5f27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a12a521d198601bab61d6f7f0a8bd852bd9135", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\nindex 686e7083ba..18dbb032c5 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n\n@@ -4,32 +4,22 @@ import org.apache.commons.io.IOUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.http.client.ClientHttpRequest;\n-import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n-import org.springframework.web.client.RequestCallback;\n-import org.springframework.web.client.ResponseExtractor;\n \n-import java.io.IOException;\n-import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0NTQ4Ng==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r363045486", "bodyText": "Generally, it's a good idea to have throws Exception rather than a more specific one in the signature of test methods.", "author": "ashleyfrieze", "createdAt": "2020-01-04T17:19:31Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java", "diffHunk": "@@ -1,33 +1,68 @@\n package com.baeldung.springbootsecurity.oauth2server;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.web.client.RequestCallback;\n+import org.springframework.web.client.ResponseExtractor;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = RANDOM_PORT, classes = SpringBootAuthorizationServerApplication.class)\n @ActiveProfiles(\"authz\")\n public class CustomConfigAuthorizationServerIntegrationTest extends OAuth2IntegrationTestSupport {\n \n+    URL base;\n+\n+    @LocalServerPort\n+    int port;\n+\n+    @Before\n+    public void setUp() throws MalformedURLException {", "originalCommit": "03e16a23d1dec782c448a217e5936ea1cf6f5f27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a12a521d198601bab61d6f7f0a8bd852bd9135", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\nindex 686e7083ba..18dbb032c5 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n\n@@ -4,32 +4,22 @@ import org.apache.commons.io.IOUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.http.client.ClientHttpRequest;\n-import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n-import org.springframework.web.client.RequestCallback;\n-import org.springframework.web.client.ResponseExtractor;\n \n-import java.io.IOException;\n-import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0NTUwMA==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r363045500", "bodyText": "Let's omit the use of final here. Let's also break out these additions as separate unit tests to illustrate them individually.", "author": "ashleyfrieze", "createdAt": "2020-01-04T17:20:03Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java", "diffHunk": "@@ -1,33 +1,68 @@\n package com.baeldung.springbootsecurity.oauth2server;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.web.client.RequestCallback;\n+import org.springframework.web.client.ResponseExtractor;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = RANDOM_PORT, classes = SpringBootAuthorizationServerApplication.class)\n @ActiveProfiles(\"authz\")\n public class CustomConfigAuthorizationServerIntegrationTest extends OAuth2IntegrationTestSupport {\n \n+    URL base;\n+\n+    @LocalServerPort\n+    int port;\n+\n+    @Before\n+    public void setUp() throws MalformedURLException {\n+        base = new URL(\"http://localhost:\" + port);\n+    }\n+\n     @Test\n     public void givenOAuth2Context_whenAccessTokenIsRequested_ThenAccessTokenValueIsNotNull() {\n         ClientCredentialsResourceDetails resourceDetails = getClientCredentialsResourceDetails(\"baeldung\", singletonList(\"read\"));\n         OAuth2RestTemplate restTemplate = getOAuth2RestTemplate(resourceDetails);\n \n         OAuth2AccessToken accessToken = restTemplate.getAccessToken();\n \n-        assertNotNull(accessToken);\n+        final String authentication  = restTemplate.execute(base.toString() + \"/authentication\", HttpMethod.GET, clientHttpRequest -> {\n+        }, clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset()));\n \n+        final String principal  = restTemplate.execute(base.toString() + \"/principal\", HttpMethod.GET, clientHttpRequest -> {", "originalCommit": "03e16a23d1dec782c448a217e5936ea1cf6f5f27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a12a521d198601bab61d6f7f0a8bd852bd9135", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\nindex 686e7083ba..18dbb032c5 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n\n@@ -4,32 +4,22 @@ import org.apache.commons.io.IOUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.http.client.ClientHttpRequest;\n-import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n-import org.springframework.web.client.RequestCallback;\n-import org.springframework.web.client.ResponseExtractor;\n \n-import java.io.IOException;\n-import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0NTUxMg==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r363045512", "bodyText": "The assertions are in the wrong order. It's assertEquals(expected, actual)", "author": "ashleyfrieze", "createdAt": "2020-01-04T17:20:21Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java", "diffHunk": "@@ -1,33 +1,68 @@\n package com.baeldung.springbootsecurity.oauth2server;\n \n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.ClientHttpRequest;\n+import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.web.client.RequestCallback;\n+import org.springframework.web.client.ResponseExtractor;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = RANDOM_PORT, classes = SpringBootAuthorizationServerApplication.class)\n @ActiveProfiles(\"authz\")\n public class CustomConfigAuthorizationServerIntegrationTest extends OAuth2IntegrationTestSupport {\n \n+    URL base;\n+\n+    @LocalServerPort\n+    int port;\n+\n+    @Before\n+    public void setUp() throws MalformedURLException {\n+        base = new URL(\"http://localhost:\" + port);\n+    }\n+\n     @Test\n     public void givenOAuth2Context_whenAccessTokenIsRequested_ThenAccessTokenValueIsNotNull() {\n         ClientCredentialsResourceDetails resourceDetails = getClientCredentialsResourceDetails(\"baeldung\", singletonList(\"read\"));\n         OAuth2RestTemplate restTemplate = getOAuth2RestTemplate(resourceDetails);\n \n         OAuth2AccessToken accessToken = restTemplate.getAccessToken();\n \n-        assertNotNull(accessToken);\n+        final String authentication  = restTemplate.execute(base.toString() + \"/authentication\", HttpMethod.GET, clientHttpRequest -> {\n+        }, clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset()));\n \n+        final String principal  = restTemplate.execute(base.toString() + \"/principal\", HttpMethod.GET, clientHttpRequest -> {\n+        }, clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset()));\n+\n+        assertNotNull(accessToken);\n+        assertEquals(authentication, \"baeldung\");\n+        assertEquals(principal, \"baeldung\");", "originalCommit": "03e16a23d1dec782c448a217e5936ea1cf6f5f27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23a12a521d198601bab61d6f7f0a8bd852bd9135", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\nindex 686e7083ba..18dbb032c5 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/CustomConfigAuthorizationServerIntegrationTest.java\n\n@@ -4,32 +4,22 @@ import org.apache.commons.io.IOUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.internal.util.io.IOUtil;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.http.HttpMethod;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.http.client.ClientHttpRequest;\n-import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.security.oauth2.client.OAuth2RestTemplate;\n import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;\n import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\n import org.springframework.security.oauth2.common.OAuth2AccessToken;\n import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n-import org.springframework.web.client.RequestCallback;\n-import org.springframework.web.client.ResponseExtractor;\n \n-import java.io.IOException;\n-import java.net.MalformedURLException;\n import java.net.URL;\n import java.nio.charset.Charset;\n \n import static java.util.Collections.singletonList;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\n \n @RunWith(SpringRunner.class)\n"}}, {"oid": "23a12a521d198601bab61d6f7f0a8bd852bd9135", "url": "https://github.com/eugenp/tutorials/commit/23a12a521d198601bab61d6f7f0a8bd852bd9135", "message": "[BAEL-3339] - Adds principal example", "committedDate": "2020-01-04T18:02:52Z", "type": "commit"}, {"oid": "876818da9b70c54a346a4018dbb97c471d481991", "url": "https://github.com/eugenp/tutorials/commit/876818da9b70c54a346a4018dbb97c471d481991", "message": "[BAEL-3339] - Code refactoring and improvements", "committedDate": "2020-01-07T08:37:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2MTU3MA==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r365961570", "bodyText": "This change should probably be reverted.", "author": "ashleyfrieze", "createdAt": "2020-01-13T18:36:43Z", "path": "spring-boot-security/src/main/java/com/baeldung/springbootsecurity/oauth2server/config/AuthorizationServerConfig.java", "diffHunk": "@@ -25,20 +25,20 @@ public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws E\n     @Override\n     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n         clients\n-          .inMemory()\n-          .withClient(\"baeldung\")\n-          .secret(passwordEncoder().encode(\"baeldung\"))\n-          .authorizedGrantTypes(\"client_credentials\", \"password\", \"authorization_code\")\n-          .scopes(\"openid\", \"read\")\n-          .autoApprove(true)\n-          .and()\n-          .withClient(\"baeldung-admin\")\n-          .secret(passwordEncoder().encode(\"baeldung\"))\n-          .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"refresh_token\")\n-          .scopes(\"read\", \"write\")\n-          .autoApprove(true);\n+                .inMemory()\n+                .withClient(\"baeldung\")\n+                .secret(passwordEncoder().encode(\"baeldung\"))\n+                .authorizedGrantTypes(\"client_credentials\", \"password\", \"authorization_code\")\n+                .scopes(\"openid\", \"read\")\n+                .autoApprove(true)\n+                .and()\n+                .withClient(\"baeldung-admin\")\n+                .secret(passwordEncoder().encode(\"baeldung\"))\n+                .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"refresh_token\")\n+                .scopes(\"read\", \"write\")\n+                .autoApprove(true);", "originalCommit": "2c6269c25baf3e8ce5b7a39522b14c119fca785b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8daaa944a9c04f3f21f7f94537e0343483d9a3f5", "chunk": "diff --git a/spring-boot-security/src/main/java/com/baeldung/springbootsecurity/oauth2server/config/AuthorizationServerConfig.java b/spring-boot-security/src/main/java/com/baeldung/springbootsecurity/oauth2server/config/AuthorizationServerConfig.java\nindex 53554a6f2d..6e21987a89 100644\n--- a/spring-boot-security/src/main/java/com/baeldung/springbootsecurity/oauth2server/config/AuthorizationServerConfig.java\n+++ b/spring-boot-security/src/main/java/com/baeldung/springbootsecurity/oauth2server/config/AuthorizationServerConfig.java\n\n@@ -25,20 +25,20 @@ public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdap\n     @Override\n     public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n         clients\n-                .inMemory()\n-                .withClient(\"baeldung\")\n-                .secret(passwordEncoder().encode(\"baeldung\"))\n-                .authorizedGrantTypes(\"client_credentials\", \"password\", \"authorization_code\")\n-                .scopes(\"openid\", \"read\")\n-                .autoApprove(true)\n-                .and()\n-                .withClient(\"baeldung-admin\")\n-                .secret(passwordEncoder().encode(\"baeldung\"))\n-                .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"refresh_token\")\n-                .scopes(\"read\", \"write\")\n-                .autoApprove(true);\n+          .inMemory()\n+          .withClient(\"baeldung\")\n+          .secret(passwordEncoder().encode(\"baeldung\"))\n+          .authorizedGrantTypes(\"client_credentials\", \"password\", \"authorization_code\")\n+          .scopes(\"openid\", \"read\")\n+          .autoApprove(true)\n+          .and()\n+          .withClient(\"baeldung-admin\")\n+          .secret(passwordEncoder().encode(\"baeldung\"))\n+          .authorizedGrantTypes(\"authorization_code\", \"client_credentials\", \"refresh_token\")\n+          .scopes(\"read\", \"write\")\n+          .autoApprove(true);\n     }\n-\n+    \n     @Bean\n     public BCryptPasswordEncoder passwordEncoder() {\n         return new BCryptPasswordEncoder();\n"}}, {"oid": "8daaa944a9c04f3f21f7f94537e0343483d9a3f5", "url": "https://github.com/eugenp/tutorials/commit/8daaa944a9c04f3f21f7f94537e0343483d9a3f5", "message": "[BAEL-3339] - Code cleanup", "committedDate": "2020-01-14T05:06:48Z", "type": "commit"}, {"oid": "eaa9d65c13dbbccd67e28094daf743b095e68c78", "url": "https://github.com/eugenp/tutorials/commit/eaa9d65c13dbbccd67e28094daf743b095e68c78", "message": "[BAEL-3339] - Authentication to return token details", "committedDate": "2020-01-14T05:07:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTI0OQ==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r369255249", "bodyText": "This is a do nothing callback... I would suggest that this way of expressing it is a bit harder to parse. If you did something like this:\nprivate static final RequestCallback DO_NOTHING_CALLBACK = request -> {};\nAnd then used it at the call site as DO_NOTHING_CALLBACK - I think it might be more self-documenting.", "author": "ashleyfrieze", "createdAt": "2020-01-21T21:35:15Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java", "diffHunk": "@@ -31,4 +39,18 @@ protected OAuth2RestTemplate getOAuth2RestTemplate(final ClientCredentialsResour\n         restTemplate.setMessageConverters(singletonList(new MappingJackson2HttpMessageConverter()));\n         return restTemplate;\n     }\n+\n+    protected String executeGetRequest(OAuth2RestTemplate restTemplate, String path) {\n+        return restTemplate.execute(base.toString() + path, GET, getRequestCallback(), getStringResponseExtractor());\n+    }\n+\n+    protected RequestCallback getRequestCallback() {\n+        return clientHttpRequest -> {\n+        };\n+    }", "originalCommit": "eaa9d65c13dbbccd67e28094daf743b095e68c78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aef673b20f52fe42dc56462eded22fa185aea7fc", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\nindex c5953ecc5a..a005965998 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\n\n@@ -41,16 +47,7 @@ public class OAuth2IntegrationTestSupport {\n     }\n \n     protected String executeGetRequest(OAuth2RestTemplate restTemplate, String path) {\n-        return restTemplate.execute(base.toString() + path, GET, getRequestCallback(), getStringResponseExtractor());\n-    }\n-\n-    protected RequestCallback getRequestCallback() {\n-        return clientHttpRequest -> {\n-        };\n-    }\n-\n-    protected ResponseExtractor<String> getStringResponseExtractor() {\n-        return clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset());\n+        return restTemplate.execute(base.toString() + path, GET, DO_NOTHING_CALLBACK, EXTRACT_BODY_AS_STRING);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTgxNA==", "url": "https://github.com/eugenp/tutorials/pull/8469#discussion_r369255814", "bodyText": "Similarly, you don't need to make a new lambda every time for this. You just want something like:\nprotected static final ResponseExtractor<String> EXTRACT_BODY_AS_STRING =  clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset());", "author": "ashleyfrieze", "createdAt": "2020-01-21T21:36:36Z", "path": "spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java", "diffHunk": "@@ -31,4 +39,18 @@ protected OAuth2RestTemplate getOAuth2RestTemplate(final ClientCredentialsResour\n         restTemplate.setMessageConverters(singletonList(new MappingJackson2HttpMessageConverter()));\n         return restTemplate;\n     }\n+\n+    protected String executeGetRequest(OAuth2RestTemplate restTemplate, String path) {\n+        return restTemplate.execute(base.toString() + path, GET, getRequestCallback(), getStringResponseExtractor());\n+    }\n+\n+    protected RequestCallback getRequestCallback() {\n+        return clientHttpRequest -> {\n+        };\n+    }\n+\n+    protected ResponseExtractor<String> getStringResponseExtractor() {\n+        return clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset());\n+    }", "originalCommit": "eaa9d65c13dbbccd67e28094daf743b095e68c78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aef673b20f52fe42dc56462eded22fa185aea7fc", "chunk": "diff --git a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\nindex c5953ecc5a..a005965998 100644\n--- a/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\n+++ b/spring-boot-security/src/test/java/com/baeldung/springbootsecurity/oauth2server/OAuth2IntegrationTestSupport.java\n\n@@ -41,16 +47,7 @@ public class OAuth2IntegrationTestSupport {\n     }\n \n     protected String executeGetRequest(OAuth2RestTemplate restTemplate, String path) {\n-        return restTemplate.execute(base.toString() + path, GET, getRequestCallback(), getStringResponseExtractor());\n-    }\n-\n-    protected RequestCallback getRequestCallback() {\n-        return clientHttpRequest -> {\n-        };\n-    }\n-\n-    protected ResponseExtractor<String> getStringResponseExtractor() {\n-        return clientHttpResponse -> IOUtils.toString(clientHttpResponse.getBody(), Charset.defaultCharset());\n+        return restTemplate.execute(base.toString() + path, GET, DO_NOTHING_CALLBACK, EXTRACT_BODY_AS_STRING);\n     }\n \n }\n"}}, {"oid": "aef673b20f52fe42dc56462eded22fa185aea7fc", "url": "https://github.com/eugenp/tutorials/commit/aef673b20f52fe42dc56462eded22fa185aea7fc", "message": "[BAEL-3339] - Code cleanup", "committedDate": "2020-01-22T10:52:55Z", "type": "commit"}]}