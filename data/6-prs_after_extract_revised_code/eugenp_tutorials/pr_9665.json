{"pr_number": 9665, "pr_title": "BAEL-4230 - Adding Introduction to Spring Data JDBC Project", "pr_createdAt": "2020-07-07T18:34:50Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9665", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMjE3MA==", "url": "https://github.com/eugenp/tutorials/pull/9665#discussion_r460412170", "bodyText": "remove", "author": "KevinGilmore", "createdAt": "2020-07-25T14:50:56Z", "path": "parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+import com.baeldung.entity.Person;\n+import com.baeldung.repository.PersonRepository;\n+\n+import ch.qos.logback.classic.Logger;\n+\n+@SpringBootApplication\n+public class Application implements CommandLineRunner {\n+\n+    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(Application.class);\n+\n+    @Autowired\n+    private PersonRepository repository;\n+    @Autowired\n+    private DatabaseSeeder dbSeeder;\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+    @Override\n+    public void run(String... arg0) throws Exception {\n+        ;", "originalCommit": "ddcc0fb07a951760809f3cf9bf5d77221f8736f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODcyMg==", "url": "https://github.com/eugenp/tutorials/pull/9665#discussion_r460808722", "bodyText": "done", "author": "rshtishi", "createdAt": "2020-07-27T10:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMjE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "chunk": "diff --git a/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java b/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java\ndeleted file mode 100644\nindex 6d0e81e3c4..0000000000\n--- a/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-package com.baeldung;\n-\n-import java.util.Optional;\n-\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.CommandLineRunner;\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-\n-import com.baeldung.entity.Person;\n-import com.baeldung.repository.PersonRepository;\n-\n-import ch.qos.logback.classic.Logger;\n-\n-@SpringBootApplication\n-public class Application implements CommandLineRunner {\n-\n-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(Application.class);\n-\n-    @Autowired\n-    private PersonRepository repository;\n-    @Autowired\n-    private DatabaseSeeder dbSeeder;\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(Application.class, args);\n-    }\n-\n-    @Override\n-    public void run(String... arg0) throws Exception {\n-        ;\n-        LOGGER.info(\"@@ Inserting Data....\");\n-        dbSeeder.insertData();\n-        LOGGER.info(\"@@ findAll() call...\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findById() call...\");\n-        Optional<Person> optionalPerson = repository.findById(1L);\n-        optionalPerson.ifPresent(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ save() call...\");\n-        Person newPerson = new Person(\"Franz\", \"Kafka\");\n-        Person result = repository.save(newPerson);\n-        LOGGER.info(result.toString());\n-        LOGGER.info(\"@@ delete\");\n-        optionalPerson.ifPresent(person -> repository.delete(person));\n-        LOGGER.info(\"@@ findAll() call...\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findByFirstName() call...\");\n-        repository.findByFirstName(\"Franz\")\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findByFirstName() call...\");\n-        repository.updateByFirstName(2L, \"Date Inferno\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMjM5NA==", "url": "https://github.com/eugenp/tutorials/pull/9665#discussion_r460412394", "bodyText": "The code for the article should be in a package specific to the article, in case we ever need to move it to a different module or in case additional articles are added to this module. How about com.baeldung.springdatajdbcintro", "author": "KevinGilmore", "createdAt": "2020-07-25T14:53:50Z", "path": "parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung;", "originalCommit": "ddcc0fb07a951760809f3cf9bf5d77221f8736f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODYzMQ==", "url": "https://github.com/eugenp/tutorials/pull/9665#discussion_r460808631", "bodyText": "done", "author": "rshtishi", "createdAt": "2020-07-27T10:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxMjM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "chunk": "diff --git a/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java b/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java\ndeleted file mode 100644\nindex 6d0e81e3c4..0000000000\n--- a/parent-boot-2/spring-data-jdbc/src/main/java/com/baeldung/Application.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-package com.baeldung;\n-\n-import java.util.Optional;\n-\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.CommandLineRunner;\n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-\n-import com.baeldung.entity.Person;\n-import com.baeldung.repository.PersonRepository;\n-\n-import ch.qos.logback.classic.Logger;\n-\n-@SpringBootApplication\n-public class Application implements CommandLineRunner {\n-\n-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(Application.class);\n-\n-    @Autowired\n-    private PersonRepository repository;\n-    @Autowired\n-    private DatabaseSeeder dbSeeder;\n-\n-    public static void main(String[] args) {\n-        SpringApplication.run(Application.class, args);\n-    }\n-\n-    @Override\n-    public void run(String... arg0) throws Exception {\n-        ;\n-        LOGGER.info(\"@@ Inserting Data....\");\n-        dbSeeder.insertData();\n-        LOGGER.info(\"@@ findAll() call...\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findById() call...\");\n-        Optional<Person> optionalPerson = repository.findById(1L);\n-        optionalPerson.ifPresent(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ save() call...\");\n-        Person newPerson = new Person(\"Franz\", \"Kafka\");\n-        Person result = repository.save(newPerson);\n-        LOGGER.info(result.toString());\n-        LOGGER.info(\"@@ delete\");\n-        optionalPerson.ifPresent(person -> repository.delete(person));\n-        LOGGER.info(\"@@ findAll() call...\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findByFirstName() call...\");\n-        repository.findByFirstName(\"Franz\")\n-            .forEach(person -> LOGGER.info(person.toString()));\n-        LOGGER.info(\"@@ findByFirstName() call...\");\n-        repository.updateByFirstName(2L, \"Date Inferno\");\n-        repository.findAll()\n-            .forEach(person -> LOGGER.info(person.toString()));\n-\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MjQyMw==", "url": "https://github.com/eugenp/tutorials/pull/9665#discussion_r462692423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Victor', 'Hygo')\");\n          \n          \n            \n                    jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Victor', 'Hugo')\");", "author": "KevinGilmore", "createdAt": "2020-07-30T02:10:03Z", "path": "persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/DatabaseSeeder.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.baeldung.springdatajdbcintro;\n+\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import ch.qos.logback.classic.Logger;\n+\n+@Component\n+public class DatabaseSeeder {\n+\n+    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(DatabaseSeeder.class);\n+\n+    @Autowired\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public void insertData() {\n+        LOGGER.info(\"> Inserting data...\");\n+        jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Victor', 'Hygo')\");", "originalCommit": "c845d5a6143768141c5d4830e086e2bfa1cc418b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "966d0f272040c2b3e373cea3b9c302e8d92fdf0c", "chunk": "diff --git a/persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/DatabaseSeeder.java b/persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/DatabaseSeeder.java\ndeleted file mode 100644\nindex 97055fd7ac..0000000000\n--- a/persistence-modules/spring-data-jdbc/src/main/java/com/baeldung/springdatajdbcintro/DatabaseSeeder.java\n+++ /dev/null\n\n@@ -1,26 +0,0 @@\n-package com.baeldung.springdatajdbcintro;\n-\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.stereotype.Component;\n-\n-import ch.qos.logback.classic.Logger;\n-\n-@Component\n-public class DatabaseSeeder {\n-\n-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(DatabaseSeeder.class);\n-\n-    @Autowired\n-    private JdbcTemplate jdbcTemplate;\n-\n-    public void insertData() {\n-        LOGGER.info(\"> Inserting data...\");\n-        jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Victor', 'Hygo')\");\n-        jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Dante', 'Alighieri')\");\n-        jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Stefan', 'Zweig')\");\n-        jdbcTemplate.execute(\"INSERT INTO Person(first_name,last_name) VALUES('Oscar', 'Wilde')\");\n-    }\n-\n-}\n"}}, {"oid": "966d0f272040c2b3e373cea3b9c302e8d92fdf0c", "url": "https://github.com/eugenp/tutorials/commit/966d0f272040c2b3e373cea3b9c302e8d92fdf0c", "message": "BAEL-4230 - Adding Introduction to Spring Data JDBC Project", "committedDate": "2020-08-02T08:26:57Z", "type": "commit"}, {"oid": "e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "url": "https://github.com/eugenp/tutorials/commit/e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "message": "BAEL-4230 refactoring project", "committedDate": "2020-08-02T08:30:43Z", "type": "commit"}, {"oid": "e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "url": "https://github.com/eugenp/tutorials/commit/e1e05ea1d2f11219c1a3d7e6ce3c2edee81e1fbf", "message": "BAEL-4230 refactoring project", "committedDate": "2020-08-02T08:30:43Z", "type": "forcePushed"}, {"oid": "9ccc9a8f04c4b863ad66c8afc642900af8151b77", "url": "https://github.com/eugenp/tutorials/commit/9ccc9a8f04c4b863ad66c8afc642900af8151b77", "message": "Update persistence-modules/spring-data-jdbc/pom.xml", "committedDate": "2020-08-08T09:19:19Z", "type": "commit"}, {"oid": "c515945d648eab3220abe77d45775f3a1106c99c", "url": "https://github.com/eugenp/tutorials/commit/c515945d648eab3220abe77d45775f3a1106c99c", "message": "removing duplicates modules from the rebase", "committedDate": "2020-08-08T16:57:03Z", "type": "commit"}, {"oid": "d952182020a439ba4e59b9af46cd75e6d2c631f5", "url": "https://github.com/eugenp/tutorials/commit/d952182020a439ba4e59b9af46cd75e6d2c631f5", "message": "Merge branch 'BAEL-4230' of https://github.com/rshtishi/tutorials into BAEL-4230", "committedDate": "2020-08-08T17:00:09Z", "type": "commit"}]}