{"pr_number": 9479, "pr_title": "KTLN-131 Kotlin Spring Security DSL Initial Commit", "pr_createdAt": "2020-06-11T12:59:51Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9479", "timeline": [{"oid": "1cf03deb57dccc03368caff4b78394460c0080da", "url": "https://github.com/eugenp/tutorials/commit/1cf03deb57dccc03368caff4b78394460c0080da", "message": "KTLN-131 Kotlin Spring Security DSL Initial Commit", "committedDate": "2020-06-11T12:57:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MzU1Mw==", "url": "https://github.com/eugenp/tutorials/pull/9479#discussion_r438773553", "bodyText": "this seems to be here by mistake", "author": "rpvilao", "createdAt": "2020-06-11T13:17:32Z", "path": "kotlin-spring-security-dsl/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*", "originalCommit": "1cf03deb57dccc03368caff4b78394460c0080da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5NDcxMw==", "url": "https://github.com/eugenp/tutorials/pull/9479#discussion_r439294713", "bodyText": "I've removed it.", "author": "musibs", "createdAt": "2020-06-12T08:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MzU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "660fb7896fca5708a02f4a9020f2e10986714dcc", "chunk": "diff --git a/kotlin-spring-security-dsl/.mvn/wrapper/MavenWrapperDownloader.java b/kotlin-spring-security-dsl/.mvn/wrapper/MavenWrapperDownloader.java\ndeleted file mode 100644\nindex a45eb6ba26..0000000000\n--- a/kotlin-spring-security-dsl/.mvn/wrapper/MavenWrapperDownloader.java\n+++ /dev/null\n\n@@ -1,118 +0,0 @@\n-/*\n- * Copyright 2007-present the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-import java.net.*;\n-import java.io.*;\n-import java.nio.channels.*;\n-import java.util.Properties;\n-\n-public class MavenWrapperDownloader {\n-\n-    private static final String WRAPPER_VERSION = \"0.5.6\";\n-    /**\n-     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n-     */\n-    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n-            + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n-\n-    /**\n-     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n-     * use instead of the default one.\n-     */\n-    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n-            \".mvn/wrapper/maven-wrapper.properties\";\n-\n-    /**\n-     * Path where the maven-wrapper.jar will be saved to.\n-     */\n-    private static final String MAVEN_WRAPPER_JAR_PATH =\n-            \".mvn/wrapper/maven-wrapper.jar\";\n-\n-    /**\n-     * Name of the property which should be used to override the default download url for the wrapper.\n-     */\n-    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n-\n-    public static void main(String args[]) {\n-        System.out.println(\"- Downloader started\");\n-        File baseDirectory = new File(args[0]);\n-        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n-\n-        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n-        // wrapperUrl parameter.\n-        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n-        String url = DEFAULT_DOWNLOAD_URL;\n-        if (mavenWrapperPropertyFile.exists()) {\n-            FileInputStream mavenWrapperPropertyFileInputStream = null;\n-            try {\n-                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n-                Properties mavenWrapperProperties = new Properties();\n-                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n-                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n-            } catch (IOException e) {\n-                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n-            } finally {\n-                try {\n-                    if (mavenWrapperPropertyFileInputStream != null) {\n-                        mavenWrapperPropertyFileInputStream.close();\n-                    }\n-                } catch (IOException e) {\n-                    // Ignore ...\n-                }\n-            }\n-        }\n-        System.out.println(\"- Downloading from: \" + url);\n-\n-        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n-        if (!outputFile.getParentFile().exists()) {\n-            if (!outputFile.getParentFile().mkdirs()) {\n-                System.out.println(\n-                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n-            }\n-        }\n-        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n-        try {\n-            downloadFileFromURL(url, outputFile);\n-            System.out.println(\"Done\");\n-            System.exit(0);\n-        } catch (Throwable e) {\n-            System.out.println(\"- Error downloading\");\n-            e.printStackTrace();\n-            System.exit(1);\n-        }\n-    }\n-\n-    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n-        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n-            String username = System.getenv(\"MVNW_USERNAME\");\n-            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n-            Authenticator.setDefault(new Authenticator() {\n-                @Override\n-                protected PasswordAuthentication getPasswordAuthentication() {\n-                    return new PasswordAuthentication(username, password);\n-                }\n-            });\n-        }\n-        URL website = new URL(urlString);\n-        ReadableByteChannel rbc;\n-        rbc = Channels.newChannel(website.openStream());\n-        FileOutputStream fos = new FileOutputStream(destination);\n-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n-        fos.close();\n-        rbc.close();\n-    }\n-\n-}\n"}}, {"oid": "660fb7896fca5708a02f4a9020f2e10986714dcc", "url": "https://github.com/eugenp/tutorials/commit/660fb7896fca5708a02f4a9020f2e10986714dcc", "message": "Removed additional files", "committedDate": "2020-06-12T05:30:49Z", "type": "commit"}, {"oid": "32a1b5f8146b31318a73e29bcdd97dd5d5bbab88", "url": "https://github.com/eugenp/tutorials/commit/32a1b5f8146b31318a73e29bcdd97dd5d5bbab88", "message": "Moved the module to spring security modules", "committedDate": "2020-06-12T08:48:49Z", "type": "commit"}, {"oid": "f6d57d939d4098729fe2b5d687ac68cb2acacfb3", "url": "https://github.com/eugenp/tutorials/commit/f6d57d939d4098729fe2b5d687ac68cb2acacfb3", "message": "Review changes", "committedDate": "2020-06-16T05:53:22Z", "type": "commit"}]}