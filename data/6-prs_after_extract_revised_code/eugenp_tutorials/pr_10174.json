{"pr_number": 10174, "pr_title": "Storing Files Indexed by a Database", "pr_createdAt": "2020-10-17T20:49:45Z", "pr_url": "https://github.com/eugenp/tutorials/pull/10174", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1OTMyMQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507059321", "bodyText": "Why are you setting the image name to itself? and why do you have both a setter and a public property on Image? I'd rather than we just used getters and setters?", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:26:03Z", "path": "persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.baeldung.db.indexing;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Date;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+interface FileSystemRepository extends JpaRepository<Image, Long> {\n+\n+    String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n+        .getPath() + \"/\";\n+\n+    default Image saveToFileSystem(Image image) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+        Files.createDirectories(newFile.getParent());\n+\n+        Files.write(newFile, image.content);\n+\n+        image.setName(image.name);", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\nindex 83d3967664..bc6bdecfed 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n\n@@ -5,32 +5,32 @@ import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Date;\n \n-import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-interface FileSystemRepository extends JpaRepository<Image, Long> {\n+class FileSystemRepository {\n \n     String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n-        .getPath() + \"/\";\n+        .getPath();\n \n-    default Image saveToFileSystem(Image image) throws Exception {\n-        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+    String save(byte[] content, String imageName) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + imageName);\n         Files.createDirectories(newFile.getParent());\n \n-        Files.write(newFile, image.content);\n+        Files.write(newFile, content);\n \n-        image.setName(image.name);\n-        image.setLocation(newFile.toAbsolutePath()\n-            .toString());\n-        image.setContent(null);\n-\n-        return save(image);\n+        return newFile.toAbsolutePath()\n+            .toString();\n     }\n \n-    default byte[] findInFileSystem(Long id) throws Exception {\n-        Path image = Paths.get(findById(id).get().location);\n-\n-        return Files.readAllBytes(image);\n+    FileSystemResource findInFileSystem(String location) {\n+        try {\n+            return new FileSystemResource(Paths.get(location));\n+        } catch (Exception e) {\n+            // Handle access or file not found problems.\n+            throw new RuntimeException();\n+        }\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA1OTg5MQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507059891", "bodyText": "On the whole, I think it would make cleaner code if the image you saved was a different object than the input. This works, which is fine, but it's kind of dirty as the caller provides you an image with its bytes and you delete them.\nBetter this should construct Image imageToSave = new Image(image.getName(), newFile.toAbsolutePath());\nAlso note - constructors are better than setters!", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:27:32Z", "path": "persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.baeldung.db.indexing;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Date;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+interface FileSystemRepository extends JpaRepository<Image, Long> {\n+\n+    String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n+        .getPath() + \"/\";\n+\n+    default Image saveToFileSystem(Image image) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+        Files.createDirectories(newFile.getParent());\n+\n+        Files.write(newFile, image.content);\n+\n+        image.setName(image.name);\n+        image.setLocation(newFile.toAbsolutePath()\n+            .toString());\n+        image.setContent(null);", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\nindex 83d3967664..bc6bdecfed 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n\n@@ -5,32 +5,32 @@ import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Date;\n \n-import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-interface FileSystemRepository extends JpaRepository<Image, Long> {\n+class FileSystemRepository {\n \n     String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n-        .getPath() + \"/\";\n+        .getPath();\n \n-    default Image saveToFileSystem(Image image) throws Exception {\n-        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+    String save(byte[] content, String imageName) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + imageName);\n         Files.createDirectories(newFile.getParent());\n \n-        Files.write(newFile, image.content);\n+        Files.write(newFile, content);\n \n-        image.setName(image.name);\n-        image.setLocation(newFile.toAbsolutePath()\n-            .toString());\n-        image.setContent(null);\n-\n-        return save(image);\n+        return newFile.toAbsolutePath()\n+            .toString();\n     }\n \n-    default byte[] findInFileSystem(Long id) throws Exception {\n-        Path image = Paths.get(findById(id).get().location);\n-\n-        return Files.readAllBytes(image);\n+    FileSystemResource findInFileSystem(String location) {\n+        try {\n+            return new FileSystemResource(Paths.get(location));\n+        } catch (Exception e) {\n+            // Handle access or file not found problems.\n+            throw new RuntimeException();\n+        }\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDM0OA==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507060348", "bodyText": "Perhaps this should return Optional<byte[]> with the code\nreturn findById(id)\n   .map(Image::getLocation) // use a getter!!\n   .map(this::readFile);\nwith a function readFile that does your readAllBytes.\nThen this code would handle what happens when the file is missing.", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:29:09Z", "path": "persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.baeldung.db.indexing;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Date;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+interface FileSystemRepository extends JpaRepository<Image, Long> {\n+\n+    String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n+        .getPath() + \"/\";\n+\n+    default Image saveToFileSystem(Image image) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+        Files.createDirectories(newFile.getParent());\n+\n+        Files.write(newFile, image.content);\n+\n+        image.setName(image.name);\n+        image.setLocation(newFile.toAbsolutePath()\n+            .toString());\n+        image.setContent(null);\n+\n+        return save(image);\n+    }\n+\n+    default byte[] findInFileSystem(Long id) throws Exception {\n+        Path image = Paths.get(findById(id).get().location);", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\nindex 83d3967664..bc6bdecfed 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/FileSystemRepository.java\n\n@@ -5,32 +5,32 @@ import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Date;\n \n-import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.stereotype.Repository;\n \n @Repository\n-interface FileSystemRepository extends JpaRepository<Image, Long> {\n+class FileSystemRepository {\n \n     String RESOURCES_DIR = FileSystemRepository.class.getResource(\"/\")\n-        .getPath() + \"/\";\n+        .getPath();\n \n-    default Image saveToFileSystem(Image image) throws Exception {\n-        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + image.name);\n+    String save(byte[] content, String imageName) throws Exception {\n+        Path newFile = Paths.get(RESOURCES_DIR + new Date().getTime() + \"-\" + imageName);\n         Files.createDirectories(newFile.getParent());\n \n-        Files.write(newFile, image.content);\n+        Files.write(newFile, content);\n \n-        image.setName(image.name);\n-        image.setLocation(newFile.toAbsolutePath()\n-            .toString());\n-        image.setContent(null);\n-\n-        return save(image);\n+        return newFile.toAbsolutePath()\n+            .toString();\n     }\n \n-    default byte[] findInFileSystem(Long id) throws Exception {\n-        Path image = Paths.get(findById(id).get().location);\n-\n-        return Files.readAllBytes(image);\n+    FileSystemResource findInFileSystem(String location) {\n+        try {\n+            return new FileSystemResource(Paths.get(location));\n+        } catch (Exception e) {\n+            // Handle access or file not found problems.\n+            throw new RuntimeException();\n+        }\n     }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDUzMA==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507060530", "bodyText": "Similar issue here with calling get when the findById may return empty.", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:29:44Z", "path": "persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/ImageController.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.baeldung.db.indexing;\n+\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+@RestController\n+class ImageController {\n+\n+    @Autowired\n+    ImageRepository imageRepository;\n+\n+    @PostMapping(\"/image\")\n+    long uploadImage(@RequestParam MultipartFile image) throws IOException {\n+        Image dbImage = new Image();\n+        dbImage.setName(image.getOriginalFilename());\n+        dbImage.setContent(image.getBytes());\n+\n+        return imageRepository.save(dbImage)\n+            .getId();\n+    }\n+\n+    @GetMapping(value = \"/image/{imageId}\", produces = MediaType.IMAGE_JPEG_VALUE)\n+    Resource downloadImage(@PathVariable Long imageId) {\n+        byte[] image = imageRepository.findById(imageId)\n+            .get()", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/ImageController.java b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/ImageController.java\nindex 387711da1c..1b2378a51f 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/ImageController.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/ImageController.java\n\n@@ -5,6 +5,7 @@ import java.io.IOException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDgwMg==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507060802", "bodyText": "Bad practice to use ordered tests - if a test case requires something from earlier, then it's probably one test case.", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:30:37Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.FixMethodOrder;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import com.baeldung.db.indexing.ImageUploaderApplication;\n+\n+@SpringBootTest(classes = ImageUploaderApplication.class)\n+@AutoConfigureMockMvc\n+@FixMethodOrder\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @Test\n+    @Order(1)", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MzQzMg==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507263432", "bodyText": "I find this topic discussable. I sure understand your point. But I see a trade-off here. If you consider that your tests should be as clean as possible, we should follow the Single Responsibility Principle. And asserting two different flows (save and find) is a clear violation of it.\nSure, if we create complex tests relying on order, it may become a mess. But the same is valid for huge test methods with many assertions.\nWith the order approach, we also have the benefit of a strict view of where is the problem, without depending on logs.\nAnyway, I removed the ordering but kept both methods. Now the download test is relying on a mock. Kind of a middle ground.\nAs an integration test, I still see more ups than downs in ordering our tests. For these specific cases.", "author": "GilvanOrnelas", "createdAt": "2020-10-18T23:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex 51cab6622e..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -1,16 +1,18 @@\n package com.baeldung.db.indexing;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.io.InputStream;\n+import java.nio.file.Paths;\n \n-import org.assertj.core.api.Assertions;\n-import org.junit.FixMethodOrder;\n-import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.http.MediaType;\n import org.springframework.mock.web.MockMultipartFile;\n import org.springframework.test.web.servlet.MockMvc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDg2Mw==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507060863", "bodyText": "static import assertThat", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:30:51Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.FixMethodOrder;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import com.baeldung.db.indexing.ImageUploaderApplication;\n+\n+@SpringBootTest(classes = ImageUploaderApplication.class)\n+@AutoConfigureMockMvc\n+@FixMethodOrder\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @Test\n+    @Order(1)\n+    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n+\n+        MockMultipartHttpServletRequestBuilder multipartRequest = MockMvcRequestBuilders.multipart(\"/file-system/image\")\n+            .file(new MockMultipartFile(\"image\", \"baeldung\", MediaType.TEXT_PLAIN_VALUE, image));\n+\n+        MvcResult result = mockMvc.perform(multipartRequest)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+        Assertions.assertThat(result.getResponse()", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex 51cab6622e..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -1,16 +1,18 @@\n package com.baeldung.db.indexing;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.io.InputStream;\n+import java.nio.file.Paths;\n \n-import org.assertj.core.api.Assertions;\n-import org.junit.FixMethodOrder;\n-import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.http.MediaType;\n import org.springframework.mock.web.MockMultipartFile;\n import org.springframework.test.web.servlet.MockMvc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDk1Mg==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507060952", "bodyText": "You can see that this test is part of the other one as its given describes something that's not in its body.", "author": "ashleyfrieze", "createdAt": "2020-10-18T09:31:12Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.FixMethodOrder;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import com.baeldung.db.indexing.ImageUploaderApplication;\n+\n+@SpringBootTest(classes = ImageUploaderApplication.class)\n+@AutoConfigureMockMvc\n+@FixMethodOrder\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @Test\n+    @Order(1)\n+    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n+\n+        MockMultipartHttpServletRequestBuilder multipartRequest = MockMvcRequestBuilders.multipart(\"/file-system/image\")\n+            .file(new MockMultipartFile(\"image\", \"baeldung\", MediaType.TEXT_PLAIN_VALUE, image));\n+\n+        MvcResult result = mockMvc.perform(multipartRequest)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+        Assertions.assertThat(result.getResponse()\n+            .getContentAsString())\n+            .isEqualTo(\"1\");\n+    }\n+\n+    @Test\n+    @Order(2)\n+    void givenBaeldungImage_whenDownloadIt_shallReturnTheImage() throws Exception {", "originalCommit": "428b2db874425c42e8b9a39b1a07a63c101d6616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2NDMyOQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507264329", "bodyText": "From my point of view, the given is something expected for the test run as expected. Usually an argument, but it may be a pre-condition too.\nAnyway, it is a little different now.", "author": "GilvanOrnelas", "createdAt": "2020-10-18T23:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDY1OQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507540659", "bodyText": "@GilvanOrnelas you're right that given means I expect this precondition for a test. However, in test code, it's usual that the given part of the test is within the body of the test method, setting up that precondition so that each test can be run independently. In your previous version, for example, it wasn't possible to only execute the second test, as it depended on the execution of the first.\nI've seen this done before, sometimes for very good reasons. I even wrote a JUnit framework once to allow tests to express their dependencies, and for the test execution order to be determined from them, rather than have to be hard-coded using Order.\nHowever, on the whole, it's well worth avoiding this pattern.", "author": "ashleyfrieze", "createdAt": "2020-10-19T07:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5NjI2Mw==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507996263", "bodyText": "Cool. I would love to see your \"dependency JUnit tests\".\nTestNG has an interesting feature - dependsOnMethods. Defining dependencies is a little better than forcing an order. I wonder if your framework looks like it.", "author": "GilvanOrnelas", "createdAt": "2020-10-19T19:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA2MDk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex 51cab6622e..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -1,16 +1,18 @@\n package com.baeldung.db.indexing;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.io.InputStream;\n+import java.nio.file.Paths;\n \n-import org.assertj.core.api.Assertions;\n-import org.junit.FixMethodOrder;\n-import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n import org.springframework.http.MediaType;\n import org.springframework.mock.web.MockMultipartFile;\n import org.springframework.test.web.servlet.MockMvc;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MTI4NQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r507541285", "bodyText": "As a bonus, you could use BDDMockito.given rather than when. This is minor and optional. As you're expressing the given part of the test, it's awkward to be doing so using functions called when. That's a question of preference, though.", "author": "ashleyfrieze", "createdAt": "2020-10-19T07:51:24Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+@SpringBootTest(classes = ImageArchiveApplication.class)\n+@AutoConfigureMockMvc\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @MockBean\n+    FileLocationService fileLocationService;\n+\n+    @Test\n+    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n+\n+        MockMultipartHttpServletRequestBuilder multipartRequest = MockMvcRequestBuilders.multipart(\"/file-system/image\")\n+            .file(new MockMultipartFile(\"image\", \"baeldung\", MediaType.TEXT_PLAIN_VALUE, image));\n+\n+        MvcResult result = mockMvc.perform(multipartRequest)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+        assertThat(result.getResponse()\n+            .getContentAsString())\n+                .isEqualTo(\"1\");\n+    }\n+\n+    @Test\n+    void givenBaeldungImage_whenDownloadIt_shallReturnTheImage() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        String imagePath = classLoader.getResource(\"baeldung.jpeg\")\n+            .getFile();\n+\n+        when(fileLocationService.find(1L))", "originalCommit": "ac4cc8d299397518ec45117ac480efca9990de94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMDcxMw==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r508020713", "bodyText": "I didn't know BDDMockito. A little more readable, same effort. Amazing! Thanks.", "author": "GilvanOrnelas", "createdAt": "2020-10-19T19:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex 0777b1983a..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -1,7 +1,7 @@\n package com.baeldung.db.indexing;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.when;\n+import static org.mockito.BDDMockito.given;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.io.InputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTQ2Mg==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r513151462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n          \n          \n            \n                void givenJpegImage_whenUploadIt_thenReturnItsId() throws Exception {", "author": "KevinGilmore", "createdAt": "2020-10-28T03:02:39Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+@SpringBootTest(classes = ImageArchiveApplication.class)\n+@AutoConfigureMockMvc\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @MockBean\n+    FileLocationService fileLocationService;\n+\n+    @Test\n+    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {", "originalCommit": "75c1ce5111844935f074d786024a887396c52211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex fca70909ac..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -31,7 +31,7 @@ class FileSystemImageIntegrationTest {\n     FileLocationService fileLocationService;\n \n     @Test\n-    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+    void givenJpegImage_whenUploadIt_thenReturnItsId() throws Exception {\n         ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n         InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTU3MQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r513151571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void givenBaeldungImage_whenDownloadIt_shallReturnTheImage() throws Exception {\n          \n          \n            \n                void givenBaeldungImage_whenDownloadIt_thenReturnTheImage() throws Exception {", "author": "KevinGilmore", "createdAt": "2020-10-28T03:03:06Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+@SpringBootTest(classes = ImageArchiveApplication.class)\n+@AutoConfigureMockMvc\n+class FileSystemImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @MockBean\n+    FileLocationService fileLocationService;\n+\n+    @Test\n+    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n+\n+        MockMultipartHttpServletRequestBuilder multipartRequest = MockMvcRequestBuilders.multipart(\"/file-system/image\")\n+            .file(new MockMultipartFile(\"image\", \"baeldung\", MediaType.TEXT_PLAIN_VALUE, image));\n+\n+        MvcResult result = mockMvc.perform(multipartRequest)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+        assertThat(result.getResponse()\n+            .getContentAsString())\n+                .isEqualTo(\"1\");\n+    }\n+\n+    @Test\n+    void givenBaeldungImage_whenDownloadIt_shallReturnTheImage() throws Exception {", "originalCommit": "75c1ce5111844935f074d786024a887396c52211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\nindex fca70909ac..3082f16a78 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/FileSystemImageIntegrationTest.java\n\n@@ -31,7 +31,7 @@ class FileSystemImageIntegrationTest {\n     FileLocationService fileLocationService;\n \n     @Test\n-    void givenJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+    void givenJpegImage_whenUploadIt_thenReturnItsId() throws Exception {\n         ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n         InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTY0MA==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r513151640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void givenBaeldungJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n          \n          \n            \n                void givenBaeldungJpegImage_whenUploadIt_thenReturnItsId() throws Exception {", "author": "KevinGilmore", "createdAt": "2020-10-28T03:03:25Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+@SpringBootTest(classes = ImageArchiveApplication.class)\n+@AutoConfigureMockMvc\n+class ImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @MockBean\n+    ImageDbRepository imageRepository;\n+\n+    @Test\n+    void givenBaeldungJpegImage_whenUploadIt_shallReturnItsId() throws Exception {", "originalCommit": "75c1ce5111844935f074d786024a887396c52211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\nindex a90832455e..f7d4ecf129 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\n\n@@ -33,7 +33,7 @@ class ImageIntegrationTest {\n     ImageDbRepository imageRepository;\n \n     @Test\n-    void givenBaeldungJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+    void givenBaeldungJpegImage_whenUploadIt_thenReturnItsId() throws Exception {\n         ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n         InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTcwMg==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r513151702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void givenExistingImage_whenDownloadIt_shallReturnHttpStatusOk() throws Exception {\n          \n          \n            \n                void givenExistingImage_whenDownloadIt_thenReturnHttpStatusOk() throws Exception {", "author": "KevinGilmore", "createdAt": "2020-10-28T03:03:36Z", "path": "persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.baeldung.db.indexing;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.BDDMockito.given;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+@SpringBootTest(classes = ImageArchiveApplication.class)\n+@AutoConfigureMockMvc\n+class ImageIntegrationTest {\n+\n+    @Autowired\n+    MockMvc mockMvc;\n+\n+    @MockBean\n+    ImageDbRepository imageRepository;\n+\n+    @Test\n+    void givenBaeldungJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+        InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n+\n+        MockMultipartHttpServletRequestBuilder multipartRequest = MockMvcRequestBuilders.multipart(\"/image\")\n+            .file(new MockMultipartFile(\"image\", \"baeldung\", MediaType.TEXT_PLAIN_VALUE, image));\n+\n+        MvcResult result = mockMvc.perform(multipartRequest)\n+            .andExpect(status().isOk())\n+            .andReturn();\n+\n+        assertThat(result.getResponse()\n+            .getContentAsString())\n+                .isEqualTo(\"1\");\n+    }\n+\n+    @Test\n+    void givenExistingImage_whenDownloadIt_shallReturnHttpStatusOk() throws Exception {", "originalCommit": "75c1ce5111844935f074d786024a887396c52211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\nindex a90832455e..f7d4ecf129 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/test/java/com/baeldung/db/indexing/ImageIntegrationTest.java\n\n@@ -33,7 +33,7 @@ class ImageIntegrationTest {\n     ImageDbRepository imageRepository;\n \n     @Test\n-    void givenBaeldungJpegImage_whenUploadIt_shallReturnItsId() throws Exception {\n+    void givenBaeldungJpegImage_whenUploadIt_thenReturnItsId() throws Exception {\n         ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n         InputStream image = classLoader.getResourceAsStream(\"baeldung.jpeg\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MzM1MQ==", "url": "https://github.com/eugenp/tutorials/pull/10174#discussion_r513153351", "bodyText": "It's generally considered better to use a wrapper type (Long) for the id instead of the primitive (long).", "author": "KevinGilmore", "createdAt": "2020-10-28T03:09:47Z", "path": "persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/Image.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.baeldung.db.indexing;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+\n+@Entity\n+class Image {\n+\n+    @Id\n+    @GeneratedValue\n+    long id;", "originalCommit": "75c1ce5111844935f074d786024a887396c52211", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed91836d4fac9b9a00f585798223eca0c45e7790", "chunk": "diff --git a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/Image.java b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/Image.java\nindex 189c81c89a..5348788c12 100644\n--- a/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/Image.java\n+++ b/persistence-modules/spring-boot-persistence-2/src/main/java/com/baeldung/db/indexing/Image.java\n\n@@ -10,7 +10,7 @@ class Image {\n \n     @Id\n     @GeneratedValue\n-    long id;\n+    Long id;\n \n     String name;\n \n"}}, {"oid": "ed91836d4fac9b9a00f585798223eca0c45e7790", "url": "https://github.com/eugenp/tutorials/commit/ed91836d4fac9b9a00f585798223eca0c45e7790", "message": "Storing files indexed by a database\n\nCreating the FileLocationService to link the FileSystemRepository to the ImageDbRepository. Removing test order\n\nChanging to BDDMockito\n\nChanging Long wrapper for @id. Changing the test names to given-when-then pattern", "committedDate": "2020-10-28T12:39:56Z", "type": "commit"}, {"oid": "ed91836d4fac9b9a00f585798223eca0c45e7790", "url": "https://github.com/eugenp/tutorials/commit/ed91836d4fac9b9a00f585798223eca0c45e7790", "message": "Storing files indexed by a database\n\nCreating the FileLocationService to link the FileSystemRepository to the ImageDbRepository. Removing test order\n\nChanging to BDDMockito\n\nChanging Long wrapper for @id. Changing the test names to given-when-then pattern", "committedDate": "2020-10-28T12:39:56Z", "type": "forcePushed"}]}