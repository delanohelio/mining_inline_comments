{"pr_number": 9802, "pr_title": "BAEL-4057: Hibernate Hi/Lo algorithm example", "pr_createdAt": "2020-07-31T19:23:51Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9802", "timeline": [{"oid": "3d77484d444f94d712bd85d5069935953f897cfa", "url": "https://github.com/eugenp/tutorials/commit/3d77484d444f94d712bd85d5069935953f897cfa", "message": "BAEL-4057: Hibernate Hi/Lo algorithm example", "committedDate": "2020-07-31T19:22:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwNzQzNQ==", "url": "https://github.com/eugenp/tutorials/pull/9802#discussion_r468307435", "bodyText": "indentation for this should follow the 2-space rule for continuation lines", "author": "KevinGilmore", "createdAt": "2020-08-11T03:37:57Z", "path": "persistence-modules/hibernate5/src/main/java/com/baeldung/hibernate/hilo/RestaurantOrder.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.baeldung.hibernate.hilo;\n+\n+import org.hibernate.annotations.GenericGenerator;\n+import org.hibernate.annotations.Parameter;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class RestaurantOrder {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"hilo_sequence_generator\")\n+    @GenericGenerator(\n+            name = \"hilo_sequence_generator\",\n+            strategy = \"sequence\",\n+            parameters = {\n+                    @Parameter(name = \"sequence_name\", value = \"hilo_seqeunce\"),\n+                    @Parameter(name = \"initial_value\", value = \"1\"),\n+                    @Parameter(name = \"increment_size\", value = \"3\"),\n+                    @Parameter(name = \"optimizer\", value = \"hilo\")\n+            }", "originalCommit": "3d77484d444f94d712bd85d5069935953f897cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54f8f8c0030aad9c8505d3e8db8ef787888ebba5", "chunk": "diff --git a/persistence-modules/hibernate5/src/main/java/com/baeldung/hibernate/hilo/RestaurantOrder.java b/persistence-modules/hibernate5/src/main/java/com/baeldung/hibernate/hilo/RestaurantOrder.java\nindex f1be16e07b..03d7edeae9 100644\n--- a/persistence-modules/hibernate5/src/main/java/com/baeldung/hibernate/hilo/RestaurantOrder.java\n+++ b/persistence-modules/hibernate5/src/main/java/com/baeldung/hibernate/hilo/RestaurantOrder.java\n\n@@ -13,14 +13,14 @@ public class RestaurantOrder {\n     @Id\n     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"hilo_sequence_generator\")\n     @GenericGenerator(\n-            name = \"hilo_sequence_generator\",\n-            strategy = \"sequence\",\n-            parameters = {\n-                    @Parameter(name = \"sequence_name\", value = \"hilo_seqeunce\"),\n-                    @Parameter(name = \"initial_value\", value = \"1\"),\n-                    @Parameter(name = \"increment_size\", value = \"3\"),\n-                    @Parameter(name = \"optimizer\", value = \"hilo\")\n-            }\n+      name = \"hilo_sequence_generator\",\n+      strategy = \"sequence\",\n+      parameters = {\n+        @Parameter(name = \"sequence_name\", value = \"hilo_seqeunce\"),\n+        @Parameter(name = \"initial_value\", value = \"1\"),\n+        @Parameter(name = \"increment_size\", value = \"3\"),\n+        @Parameter(name = \"optimizer\", value = \"hilo\")\n+      }\n     )\n     private Long id;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwNzc2MA==", "url": "https://github.com/eugenp/tutorials/pull/9802#discussion_r468307760", "bodyText": "indentation should be 2 spaces from where the statement begins", "author": "KevinGilmore", "createdAt": "2020-08-11T03:39:23Z", "path": "persistence-modules/hibernate5/src/test/java/com/baeldung/hibernate/hilo/HibernateHiloUnitTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.baeldung.hibernate.hilo;\n+\n+import org.apache.log4j.BasicConfigurator;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.LogManager;\n+import org.hibernate.HibernateException;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Transaction;\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.MetadataSources;\n+import org.hibernate.boot.SessionFactoryBuilder;\n+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n+import org.hibernate.service.ServiceRegistry;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.fail;\n+\n+public class HibernateHiloUnitTest {\n+    private Session session;\n+\n+    @Before\n+    public void init() {\n+        try {\n+            configureLogger();\n+\n+            ServiceRegistry serviceRegistry = configureServiceRegistry();\n+            SessionFactory factory = getSessionFactoryBuilder(serviceRegistry).build();\n+            session = factory.openSession();\n+        } catch (HibernateException | IOException e) {\n+            fail(\"Failed to initiate Hibernate Session [Exception:\" + e.toString() + \"]\");\n+        }\n+    }\n+\n+    private void configureLogger() {\n+        BasicConfigurator.configure();\n+        LogManager.getLogger(\"org.hibernate\").setLevel(Level.ERROR);\n+        LogManager.getLogger(\"org.hibernate.id.enhanced.SequenceStructure\").setLevel(Level.DEBUG);\n+        LogManager.getLogger(\"org.hibernate.event.internal.AbstractSaveEventListener\").setLevel(Level.DEBUG);\n+        LogManager.getLogger(\"org.hibernate.SQL\").setLevel(Level.DEBUG);\n+    }\n+\n+\n+    private static SessionFactoryBuilder getSessionFactoryBuilder(ServiceRegistry serviceRegistry) {\n+        MetadataSources metadataSources = new MetadataSources(serviceRegistry);\n+        metadataSources.addAnnotatedClass(RestaurantOrder.class);\n+        Metadata metadata = metadataSources.buildMetadata();\n+\n+        return metadata.getSessionFactoryBuilder();\n+    }\n+\n+    private static ServiceRegistry configureServiceRegistry() throws IOException {\n+        Properties properties = getProperties();\n+\n+        return new StandardServiceRegistryBuilder().applySettings(properties)\n+                .build();\n+    }\n+\n+    private static Properties getProperties() throws IOException {\n+        Properties properties = new Properties();\n+        URL propertiesURL = getPropertiesURL();\n+\n+        try (FileInputStream inputStream = new FileInputStream(propertiesURL.getFile())) {\n+            properties.load(inputStream);\n+        }\n+\n+        return properties;\n+    }\n+\n+    private static URL getPropertiesURL() {\n+        return Thread.currentThread()\n+                .getContextClassLoader()\n+                .getResource(\"hibernate-hilo.properties\");", "originalCommit": "3d77484d444f94d712bd85d5069935953f897cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54f8f8c0030aad9c8505d3e8db8ef787888ebba5", "chunk": "diff --git a/persistence-modules/hibernate5/src/test/java/com/baeldung/hibernate/hilo/HibernateHiloUnitTest.java b/persistence-modules/hibernate5/src/test/java/com/baeldung/hibernate/hilo/HibernateHiloUnitTest.java\nindex d69d7b2b81..9285c30af5 100644\n--- a/persistence-modules/hibernate5/src/test/java/com/baeldung/hibernate/hilo/HibernateHiloUnitTest.java\n+++ b/persistence-modules/hibernate5/src/test/java/com/baeldung/hibernate/hilo/HibernateHiloUnitTest.java\n\n@@ -60,7 +60,7 @@ public class HibernateHiloUnitTest {\n         Properties properties = getProperties();\n \n         return new StandardServiceRegistryBuilder().applySettings(properties)\n-                .build();\n+          .build();\n     }\n \n     private static Properties getProperties() throws IOException {\n"}}, {"oid": "54f8f8c0030aad9c8505d3e8db8ef787888ebba5", "url": "https://github.com/eugenp/tutorials/commit/54f8f8c0030aad9c8505d3e8db8ef787888ebba5", "message": "BAEL-4057: fixed code indentation", "committedDate": "2020-08-11T18:47:54Z", "type": "commit"}]}