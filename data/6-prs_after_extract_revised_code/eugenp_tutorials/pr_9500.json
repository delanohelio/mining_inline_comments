{"pr_number": 9500, "pr_title": "BAEL-4145 Circular Buffer", "pr_createdAt": "2020-06-14T19:49:18Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9500", "timeline": [{"oid": "f301922806106be68682c51016d5c3a920353fbb", "url": "https://github.com/eugenp/tutorials/commit/f301922806106be68682c51016d5c3a920353fbb", "message": "circular buffer implementation", "committedDate": "2020-06-14T19:47:30Z", "type": "commit"}, {"oid": "cefc5dddb65832bf74c40acd7ffb609e593af85f", "url": "https://github.com/eugenp/tutorials/commit/cefc5dddb65832bf74c40acd7ffb609e593af85f", "message": "circular buffer test init", "committedDate": "2020-06-14T19:48:22Z", "type": "commit"}, {"oid": "780bdd1c7114522187324c581ad1ae1a9b9343cd", "url": "https://github.com/eugenp/tutorials/commit/780bdd1c7114522187324c581ad1ae1a9b9343cd", "message": "write and read sequence volatile", "committedDate": "2020-06-15T13:14:01Z", "type": "commit"}, {"oid": "2cd88d02fbf871041b4239c413628a22c9c1d697", "url": "https://github.com/eugenp/tutorials/commit/2cd88d02fbf871041b4239c413628a22c9c1d697", "message": "simple producer consumer test", "committedDate": "2020-06-15T13:14:24Z", "type": "commit"}, {"oid": "8f3b4ae6df54253208fc4f72cbd139ab77392130", "url": "https://github.com/eugenp/tutorials/commit/8f3b4ae6df54253208fc4f72cbd139ab77392130", "message": "unit test for empty and full buffer", "committedDate": "2020-06-15T13:57:30Z", "type": "commit"}, {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "url": "https://github.com/eugenp/tutorials/commit/1331962bcf75fc9d70f18a826dabf91e70c5c83f", "message": "polishing", "committedDate": "2020-06-17T20:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDc0NA==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442320744", "bodyText": "writeSequence++? :)", "author": "rpvilao", "createdAt": "2020-06-18T15:39:13Z", "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;", "originalCommit": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxNg==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161316", "bodyText": "done", "author": "priyank-sriv", "createdAt": "2020-06-20T21:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "d63c2004f842220b16eeff17a2fd00fb08895de7", "chunk": "diff --git a/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java b/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\nindex 271fc5f376..6b315265b4 100644\n--- a/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\n+++ b/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\n\n@@ -25,7 +25,7 @@ public class CircularBuffer<E> {\n             int nextWriteSeq = writeSequence + 1;\n             data[nextWriteSeq % capacity] = element;\n \n-            writeSequence += 1;\n+            writeSequence++;\n             return true;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxNQ==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321015", "bodyText": "same", "author": "rpvilao", "createdAt": "2020-06-18T15:39:41Z", "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public E poll() {\n+\n+        if (isNotEmpty()) {\n+\n+            E nextValue = data[readSequence % capacity];\n+            readSequence += 1;", "originalCommit": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxMA==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161310", "bodyText": "done", "author": "priyank-sriv", "createdAt": "2020-06-20T21:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d63c2004f842220b16eeff17a2fd00fb08895de7", "chunk": "diff --git a/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java b/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\nindex 271fc5f376..6b315265b4 100644\n--- a/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\n+++ b/data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java\n\n@@ -25,7 +25,7 @@ public class CircularBuffer<E> {\n             int nextWriteSeq = writeSequence + 1;\n             data[nextWriteSeq % capacity] = element;\n \n-            writeSequence += 1;\n+            writeSequence++;\n             return true;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTgyOA==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321828", "bodyText": "let's use the concurrent api (Executors...)", "author": "rpvilao", "createdAt": "2020-06-18T15:40:58Z", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));", "originalCommit": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMyNg==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161326", "bodyText": "changed", "author": "priyank-sriv", "createdAt": "2020-06-20T21:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d63c2004f842220b16eeff17a2fd00fb08895de7", "chunk": "diff --git a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\nindex 06b1c5e4cf..83ce27043b 100644\n--- a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n\n@@ -2,6 +2,11 @@ package com.baeldung.circularbuffer;\n \n import static org.junit.Assert.assertArrayEquals;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.LockSupport;\n \n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzQ3NA==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323474", "bodyText": "this consumer seems to be generic, maybe we get a better var name and not bound to the example", "author": "rpvilao", "createdAt": "2020-06-18T15:43:17Z", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public void run() {\n+\n+            for (int i = 0; i < producerShapes.length;) {\n+                if (buffer.offer(producerShapes[i])) {\n+                    System.out.println(\"Produced: \" + producerShapes[i]);\n+                    i++;\n+                    LockSupport.parkNanos(5);\n+                }\n+            }\n+        }\n+    }\n+\n+    static class Consumer implements Runnable {\n+\n+        private CircularBuffer<String> buffer;\n+        private String[] consumedShapes;\n+\n+        public Consumer(String[] consumedShapes, CircularBuffer<String> buffer) {", "originalCommit": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwNA==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161504", "bodyText": "done", "author": "priyank-sriv", "createdAt": "2020-06-20T21:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "d63c2004f842220b16eeff17a2fd00fb08895de7", "chunk": "diff --git a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\nindex 06b1c5e4cf..83ce27043b 100644\n--- a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n\n@@ -2,6 +2,11 @@ package com.baeldung.circularbuffer;\n \n import static org.junit.Assert.assertArrayEquals;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.LockSupport;\n \n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5OQ==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323699", "bodyText": "same issue as \"consumer\"", "author": "rpvilao", "createdAt": "2020-06-18T15:43:38Z", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;", "originalCommit": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwNg==", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161506", "bodyText": "done", "author": "priyank-sriv", "createdAt": "2020-06-20T21:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d63c2004f842220b16eeff17a2fd00fb08895de7", "chunk": "diff --git a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\nindex 06b1c5e4cf..83ce27043b 100644\n--- a/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n+++ b/data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java\n\n@@ -2,6 +2,11 @@ package com.baeldung.circularbuffer;\n \n import static org.junit.Assert.assertArrayEquals;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.LockSupport;\n \n import org.junit.jupiter.api.Test;\n"}}, {"oid": "d63c2004f842220b16eeff17a2fd00fb08895de7", "url": "https://github.com/eugenp/tutorials/commit/d63c2004f842220b16eeff17a2fd00fb08895de7", "message": "review comments", "committedDate": "2020-06-20T21:36:32Z", "type": "commit"}]}