{"pr_number": 8592, "pr_title": "BAEL-3502 Arrays.deepEquals method examples.", "pr_createdAt": "2020-01-26T15:47:30Z", "pr_url": "https://github.com/eugenp/tutorials/pull/8592", "timeline": [{"oid": "70cd085314be2d9c4a72902b963a5e42977d7e1d", "url": "https://github.com/eugenp/tutorials/commit/70cd085314be2d9c4a72902b963a5e42977d7e1d", "message": "Merge pull request #1 from eugenp/master\n\nGet latest changes", "committedDate": "2020-01-25T22:40:24Z", "type": "commit"}, {"oid": "656d9faef9e6576a006587ff1c2fa9c999881310", "url": "https://github.com/eugenp/tutorials/commit/656d9faef9e6576a006587ff1c2fa9c999881310", "message": "BAEL-3502 Arrays.deepEquals examples.", "committedDate": "2020-01-26T15:43:33Z", "type": "commit"}, {"oid": "1f9adcf989577a46ed7d013319fa2cbcf9fec4c6", "url": "https://github.com/eugenp/tutorials/commit/1f9adcf989577a46ed7d013319fa2cbcf9fec4c6", "message": "BAEL-3502 Change destination package for ArraysDeepEqualsUnitTest.java.", "committedDate": "2020-02-07T22:20:48Z", "type": "commit"}, {"oid": "f0841886b120593b2efeabcbe1a876e948b38755", "url": "https://github.com/eugenp/tutorials/commit/f0841886b120593b2efeabcbe1a876e948b38755", "message": "BAEL-3502 Remove ArraysDeepEqualsUnitTest file from core-java-arrays-2 module.", "committedDate": "2020-02-15T22:29:50Z", "type": "commit"}, {"oid": "249361b1847420ace55973308cae5525fe1567e2", "url": "https://github.com/eugenp/tutorials/commit/249361b1847420ace55973308cae5525fe1567e2", "message": "BAEL-3502 Add ArraysDeepEqualsUnitTest.java inside new core-java-arrays-3 module.", "committedDate": "2020-02-15T22:33:19Z", "type": "commit"}, {"oid": "ae672bcc5e79a28a35c81a09642d84533ff7051c", "url": "https://github.com/eugenp/tutorials/commit/ae672bcc5e79a28a35c81a09642d84533ff7051c", "message": "BAEL-3502 Bind core-java-arrays-3 module to parent module.", "committedDate": "2020-02-15T22:33:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwMTQwMA==", "url": "https://github.com/eugenp/tutorials/pull/8592#discussion_r379901400", "bodyText": "Formatting/Indentation is off for this class.", "author": "JonCook", "createdAt": "2020-02-16T12:56:59Z", "path": "core-java-modules/core-java-arrays-3/src/test/java/com/baeldung/arrays/deepequals/ArraysDeepEqualsUnitTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.baeldung.arrays.deepequals;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;", "originalCommit": "ae672bcc5e79a28a35c81a09642d84533ff7051c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxMTk2OA==", "url": "https://github.com/eugenp/tutorials/pull/8592#discussion_r379911968", "bodyText": "Done.", "author": "AlexFlorinHriscu", "createdAt": "2020-02-16T15:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwMTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9ba4bc4a5c1f9d31dc57a6afbc5630825cb9350a", "chunk": "diff --git a/core-java-modules/core-java-arrays-3/src/test/java/com/baeldung/arrays/deepequals/ArraysDeepEqualsUnitTest.java b/core-java-modules/core-java-arrays-3/src/test/java/com/baeldung/arrays/deepequals/ArraysDeepEqualsUnitTest.java\nindex aa577ea7bd..a9b8ed7e3f 100644\n--- a/core-java-modules/core-java-arrays-3/src/test/java/com/baeldung/arrays/deepequals/ArraysDeepEqualsUnitTest.java\n+++ b/core-java-modules/core-java-arrays-3/src/test/java/com/baeldung/arrays/deepequals/ArraysDeepEqualsUnitTest.java\n\n@@ -9,92 +9,88 @@ import org.junit.jupiter.api.Test;\n \n public class ArraysDeepEqualsUnitTest {\n \n-\tclass Person {\n-\t\tprivate int id;\n-\t\tprivate String name;\n-\t\tprivate int age;\n-\n-\t\tPerson(int id, String name, int age) {\n-\t\t\tthis.id = id;\n-\t\t\tthis.name = name;\n-\t\t\tthis.age = age;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean equals(Object obj) {\n-\t\t\tif (this == obj) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\tif (obj == null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (!(obj instanceof Person))\n-\t\t\t\treturn false;\n-\t\t\tPerson person = (Person) obj;\n-\t\t\treturn id == person.id && name.equals(person.name) && age == person.age;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int hashCode() {\n-\t\t\treturn Objects.hash(id, name, age);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoUnidimensionalObjectTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnTrue() {\n-\t\tObject[] anArray = new Object[] { \"string1\", \"string2\", \"string3\" };\n-\t\tObject[] anotherArray = new Object[] { \"string1\", \"string2\", \"string3\" };\n-\n-\t\tassertTrue(Arrays.equals(anArray, anotherArray));\n-\t\tassertTrue(Arrays.deepEquals(anArray, anotherArray));\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoUnidimensionalObjectTypeArraysWithNullElements_whenUsingEqualsAndDeepEquals_thenBothShouldReturnTrue() {\n-\t\tObject[] anArray = new Object[] { \"string1\", null, \"string3\" };\n-\t\tObject[] anotherArray = new Object[] { \"string1\", null, \"string3\" };\n-\n-\t\tassertTrue(Arrays.equals(anArray, anotherArray));\n-\t\tassertTrue(Arrays.deepEquals(anArray, anotherArray));\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoUnidimensionalObjectTypeArraysWithNestedElements_whenUsingEqualsAndDeepEquals_thenShouldReturnDifferently() {\n-\t\tObject[] anArray = new Object[] { \"string1\", null, new String[] { \"nestedString1\", \"nestedString2\" } };\n-\t\tObject[] anotherArray = new Object[] { \"string1\", null, new String[] { \"nestedString1\", \"nestedString2\" } };\n-\n-\t\tassertFalse(Arrays.equals(anArray, anotherArray));\n-\t\tassertTrue(Arrays.deepEquals(anArray, anotherArray));\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoMultidimensionalPrimitiveTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnDifferently() {\n-\t\tint[][] anArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\n-\t\tint[][] anotherArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\n-\n-\t\tassertFalse(Arrays.equals(anArray, anotherArray));\n-\t\tassertTrue(Arrays.deepEquals(anArray, anotherArray));\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoMultidimensionalObjectTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnDifferently() {\n-\t\tPerson personArray1[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) },\n-\t\t\t\t{ new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n-\t\tPerson personArray2[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) },\n-\t\t\t\t{ new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n-\n-\t\tassertFalse(Arrays.equals(personArray1, personArray2));\n-\t\tassertTrue(Arrays.deepEquals(personArray1, personArray2));\n-\t}\n-\n-\t@Test\n-\tvoid givenTwoMultidimensionalObjectTypeArrays_whenUsingDeepEqualsFromObjectsAndArraysClasses_thenBothShouldReturnTrue() {\n-\t\tPerson personArray1[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) },\n-\t\t\t\t{ new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n-\t\tPerson personArray2[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) },\n-\t\t\t\t{ new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n-\n-\t\tassertTrue(Objects.deepEquals(personArray1, personArray2));\n-\t\tassertTrue(Arrays.deepEquals(personArray1, personArray2));\n-\t}\n+    class Person {\n+        private int id;\n+        private String name;\n+        private int age;\n+\n+        Person(int id, String name, int age) {\n+            this.id = id;\n+            this.name = name;\n+            this.age = age;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (!(obj instanceof Person))\n+                return false;\n+            Person person = (Person) obj;\n+            return id == person.id && name.equals(person.name) && age == person.age;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, name, age);\n+        }\n+    }\n+\n+    @Test\n+    void givenTwoUnidimensionalObjectTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnTrue() {\n+        Object[] anArray = new Object[] { \"string1\", \"string2\", \"string3\" };\n+        Object[] anotherArray = new Object[] { \"string1\", \"string2\", \"string3\" };\n+\n+        assertTrue(Arrays.equals(anArray, anotherArray));\n+        assertTrue(Arrays.deepEquals(anArray, anotherArray));\n+    }\n+\n+    @Test\n+    void givenTwoUnidimensionalObjectTypeArraysWithNullElements_whenUsingEqualsAndDeepEquals_thenBothShouldReturnTrue() {\n+        Object[] anArray = new Object[] { \"string1\", null, \"string3\" };\n+        Object[] anotherArray = new Object[] { \"string1\", null, \"string3\" };\n+\n+        assertTrue(Arrays.equals(anArray, anotherArray));\n+        assertTrue(Arrays.deepEquals(anArray, anotherArray));\n+    }\n+\n+    @Test\n+    void givenTwoUnidimensionalObjectTypeArraysWithNestedElements_whenUsingEqualsAndDeepEquals_thenShouldReturnDifferently() {\n+        Object[] anArray = new Object[] { \"string1\", null, new String[] { \"nestedString1\", \"nestedString2\" } };\n+        Object[] anotherArray = new Object[] { \"string1\", null, new String[] { \"nestedString1\", \"nestedString2\" } };\n+\n+        assertFalse(Arrays.equals(anArray, anotherArray));\n+        assertTrue(Arrays.deepEquals(anArray, anotherArray));\n+    }\n+\n+    @Test\n+    void givenTwoMultidimensionalPrimitiveTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnDifferently() {\n+        int[][] anArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\n+        int[][] anotherArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\n+\n+        assertFalse(Arrays.equals(anArray, anotherArray));\n+        assertTrue(Arrays.deepEquals(anArray, anotherArray));\n+    }\n+\n+    @Test\n+    void givenTwoMultidimensionalObjectTypeArrays_whenUsingEqualsAndDeepEquals_thenBothShouldReturnDifferently() {\n+        Person personArray1[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) }, { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n+        Person personArray2[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) }, { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n+\n+        assertFalse(Arrays.equals(personArray1, personArray2));\n+        assertTrue(Arrays.deepEquals(personArray1, personArray2));\n+    }\n+\n+    @Test\n+    void givenTwoMultidimensionalObjectTypeArrays_whenUsingDeepEqualsFromObjectsAndArraysClasses_thenBothShouldReturnTrue() {\n+        Person personArray1[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) }, { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n+        Person personArray2[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) }, { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\n+\n+        assertTrue(Objects.deepEquals(personArray1, personArray2));\n+        assertTrue(Arrays.deepEquals(personArray1, personArray2));\n+    }\n }\n"}}, {"oid": "9ba4bc4a5c1f9d31dc57a6afbc5630825cb9350a", "url": "https://github.com/eugenp/tutorials/commit/9ba4bc4a5c1f9d31dc57a6afbc5630825cb9350a", "message": "BAEL-3502 Apply correct formatter.", "committedDate": "2020-02-16T15:34:31Z", "type": "commit"}, {"oid": "4c2b5c88a790d9a7bd81791e48653c2cf4ef8375", "url": "https://github.com/eugenp/tutorials/commit/4c2b5c88a790d9a7bd81791e48653c2cf4ef8375", "message": "BAEL-3502 - Format pom.xml file.", "committedDate": "2020-02-16T15:43:28Z", "type": "commit"}, {"oid": "6581c9ca57944187f246002262daa01d9c0525d2", "url": "https://github.com/eugenp/tutorials/commit/6581c9ca57944187f246002262daa01d9c0525d2", "message": "BAEL-3502 - Format core-java-modules pom.xml file.", "committedDate": "2020-02-16T15:45:08Z", "type": "commit"}]}