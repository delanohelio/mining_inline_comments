{"pr_number": 9557, "pr_title": "BAEL-1488: JSON-LD", "pr_createdAt": "2020-06-22T17:40:58Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9557", "timeline": [{"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "url": "https://github.com/eugenp/tutorials/commit/55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "message": "Examples for the first version of the article", "committedDate": "2020-06-22T14:26:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTgyOQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448349829", "bodyText": "Let's remove this unused import", "author": "JonCook", "createdAt": "2020-07-01T13:07:26Z", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\ndeleted file mode 100644\nindex b80769b408..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n-\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.jsonldjava.core.JsonLdOptions;\n-import com.github.jsonldjava.core.JsonLdProcessor;\n-import com.github.jsonldjava.utils.JsonUtils;\n-\n-public class JacksonDeserializationExample {\n-    public static void main(String[] args) throws IOException {\n-        String exampleJsonld =\"{\" + \n-           \"  \\\"@context\\\": {\" + \n-           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n-           \"    \\\"knows\\\": {\" + \n-           \"      \\\"@type\\\": \\\"@id\\\"\" + \n-           \"    }\" + \n-           \"  },\" + \n-           \"  \\\"@type\\\": \\\"Person\\\",\" + \n-           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n-           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n-           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n-           \"}\";\n-\n-        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n-        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n-        String compactContent = JsonUtils.toString(compact);\n-\n-        System.out.println(JsonUtils.toPrettyString(compact));\n-\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n-\n-        System.out.println(person.id);\n-        System.out.println(person.name);\n-        System.out.println(person.knows.id);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448350152", "bodyText": "Let's fix the warning about raw types if possible.", "author": "JonCook", "createdAt": "2020-07-01T13:07:58Z", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjYxOQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376619", "bodyText": "I must have some settings not properly set because I see no warnings. Could you point me in the right direction?", "author": "mdhtr", "createdAt": "2020-07-12T23:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MDU3OA==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456790578", "bodyText": "The warning here is - HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized. It can be fixed like - new HashMap<>()", "author": "JonCook", "createdAt": "2020-07-18T13:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\ndeleted file mode 100644\nindex b80769b408..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n-\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.jsonldjava.core.JsonLdOptions;\n-import com.github.jsonldjava.core.JsonLdProcessor;\n-import com.github.jsonldjava.utils.JsonUtils;\n-\n-public class JacksonDeserializationExample {\n-    public static void main(String[] args) throws IOException {\n-        String exampleJsonld =\"{\" + \n-           \"  \\\"@context\\\": {\" + \n-           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n-           \"    \\\"knows\\\": {\" + \n-           \"      \\\"@type\\\": \\\"@id\\\"\" + \n-           \"    }\" + \n-           \"  },\" + \n-           \"  \\\"@type\\\": \\\"Person\\\",\" + \n-           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n-           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n-           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n-           \"}\";\n-\n-        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n-        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n-        String compactContent = JsonUtils.toString(compact);\n-\n-        System.out.println(JsonUtils.toPrettyString(compact));\n-\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n-\n-        System.out.println(person.id);\n-        System.out.println(person.name);\n-        System.out.println(person.knows.id);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448351477", "bodyText": "I'm not a big fan of these *Example type classes with the main method. Let's move this into a unit test using the test method names (givenX_whenY_thenZ) as mentioned in the author guidelines.\nIn general, we want as much coverage as possible on our new code. Putting it in a unit test is also easier for readers to run the code and also we validate that it is working as expected.", "author": "JonCook", "createdAt": "2020-07-01T13:10:18Z", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjM1Ng==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376356", "bodyText": "@JonCook I've converted everything into unit tests, but I'm not confident that I've found good names for these tests. Using assertions is definitely better than console prints, so I am happy in that regard, however, the Eclipse formatter doesn't allow multiline strings, so the inline JSON objects look terrible.", "author": "mdhtr", "createdAt": "2020-07-12T23:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MTE4MA==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456791180", "bodyText": "I think the test approach is good! Could we shorten the test names a little? I think you are on the right track. e.g\ngivenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedIntoAJacksonAnnotatedJavaObject()\nCould become for example (just an idea):\ngivenAJsonLdString_whenCompactIsUsedWithEmptyContext_thenDeserializedCorrectly()\nLet's also please move the Person class into the main src tree.\nFinally, I agree the inline JSON does not look good. I'm afraid we will have to fix that manually without using the formatter.", "author": "JonCook", "createdAt": "2020-07-18T13:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODk5Mw==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r457608993", "bodyText": "@JonCook is givenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedWithJackson() okay? Are the two other test names okay like they are?", "author": "mdhtr", "createdAt": "2020-07-20T18:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\ndeleted file mode 100644\nindex b80769b408..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n-\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.jsonldjava.core.JsonLdOptions;\n-import com.github.jsonldjava.core.JsonLdProcessor;\n-import com.github.jsonldjava.utils.JsonUtils;\n-\n-public class JacksonDeserializationExample {\n-    public static void main(String[] args) throws IOException {\n-        String exampleJsonld =\"{\" + \n-           \"  \\\"@context\\\": {\" + \n-           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n-           \"    \\\"knows\\\": {\" + \n-           \"      \\\"@type\\\": \\\"@id\\\"\" + \n-           \"    }\" + \n-           \"  },\" + \n-           \"  \\\"@type\\\": \\\"Person\\\",\" + \n-           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n-           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n-           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n-           \"}\";\n-\n-        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n-        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n-        String compactContent = JsonUtils.toString(compact);\n-\n-        System.out.println(JsonUtils.toPrettyString(compact));\n-\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n-\n-        System.out.println(person.id);\n-        System.out.println(person.name);\n-        System.out.println(person.knows.id);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTc4Nw==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448351787", "bodyText": "These system.out will likely become assert statements. But if you want to print, let's use a proper logger.", "author": "JonCook", "createdAt": "2020-07-01T13:10:49Z", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n+        String compactContent = JsonUtils.toString(compact);\n+\n+        System.out.println(JsonUtils.toPrettyString(compact));\n+\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n+\n+        System.out.println(person.id);", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\ndeleted file mode 100644\nindex b80769b408..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n-\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.github.jsonldjava.core.JsonLdOptions;\n-import com.github.jsonldjava.core.JsonLdProcessor;\n-import com.github.jsonldjava.utils.JsonUtils;\n-\n-public class JacksonDeserializationExample {\n-    public static void main(String[] args) throws IOException {\n-        String exampleJsonld =\"{\" + \n-           \"  \\\"@context\\\": {\" + \n-           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n-           \"    \\\"knows\\\": {\" + \n-           \"      \\\"@type\\\": \\\"@id\\\"\" + \n-           \"    }\" + \n-           \"  },\" + \n-           \"  \\\"@type\\\": \\\"Person\\\",\" + \n-           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n-           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n-           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n-           \"}\";\n-\n-        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n-        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n-        String compactContent = JsonUtils.toString(compact);\n-\n-        System.out.println(JsonUtils.toPrettyString(compact));\n-\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n-\n-        System.out.println(person.id);\n-        System.out.println(person.name);\n-        System.out.println(person.knows.id);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjE5Nw==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352197", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "author": "JonCook", "createdAt": "2020-07-01T13:11:30Z", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class JacksonExamplePerson {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java b/json-2/src/test/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/Person.java\nsimilarity index 88%\nrename from json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java\nrename to json-2/src/test/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/Person.java\nindex 2e9f38e665..0cb6d43336 100644\n--- a/json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java\n+++ b/json-2/src/test/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/Person.java\n\n@@ -4,7 +4,7 @@ import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n @JsonIgnoreProperties(ignoreUnknown = true)\n-public class JacksonExamplePerson {\n+public class Person {\n     @JsonProperty(\"@id\")\n     public String id;\n     @JsonProperty(\"http://schema.org/name\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjM0MA==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352340", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "author": "JonCook", "createdAt": "2020-07-01T13:11:45Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import de.escalon.hypermedia.hydra.mapping.Expose;\n+import de.escalon.hypermedia.hydra.mapping.Vocab;\n+\n+@Vocab(\"http://example.com/vocab/\")\n+@Expose(\"person\")\n+public class HydraJsonldExamplePerson {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java b/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java\ndeleted file mode 100644\nindex 16b2199a73..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java\n+++ /dev/null\n\n@@ -1,15 +0,0 @@\n-package com.baeldung.jsonld.serialization.hydrajsonld;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import de.escalon.hypermedia.hydra.mapping.Expose;\n-import de.escalon.hypermedia.hydra.mapping.Vocab;\n-\n-@Vocab(\"http://example.com/vocab/\")\n-@Expose(\"person\")\n-public class HydraJsonldExamplePerson {\n-    @JsonProperty(\"@id\")\n-    public String id;\n-    @Expose(\"fullName\")\n-    public String name;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjY3MQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352671", "bodyText": "The same comment applies about moving to a unit test.", "author": "JonCook", "createdAt": "2020-07-01T13:12:14Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java b/json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\nsimilarity index 52%\nrename from json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java\nrename to json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\nindex 3d3531b0b5..e5d1e35236 100644\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java\n+++ b/json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\n\n@@ -1,8 +1,12 @@\n package com.baeldung.jsonld.serialization.hydrajsonld;\n \n-import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ObjectMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448354175", "bodyText": "There is a warning here about serial version Ids", "author": "JonCook", "createdAt": "2020-07-01T13:14:42Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        mapper.registerModule(getJacksonHydraSerializerModule());\n+\n+        HydraJsonldExamplePerson person = new HydraJsonldExamplePerson();\n+        person.id = \"http://example.com/person/1234\";\n+        person.name = \"Example Name\";\n+\n+        System.out.println(mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(person));\n+    }\n+\n+    public static SimpleModule getJacksonHydraSerializerModule() {\n+        return new SimpleModule() {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjY1MA==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376650", "bodyText": "I must have some settings not properly set because I see no warnings. Could you point me in the right direction?", "author": "mdhtr", "createdAt": "2020-07-12T23:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MDczNQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456790735", "bodyText": "The warning here is - The serializable class does not declare a static final serialVersionUID field of type long. But I think we can leave this one. Don't worry.", "author": "JonCook", "createdAt": "2020-07-18T13:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java b/json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\nsimilarity index 52%\nrename from json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java\nrename to json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\nindex 3d3531b0b5..e5d1e35236 100644\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java\n+++ b/json-2/src/test/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationUnitTest.java\n\n@@ -1,8 +1,12 @@\n package com.baeldung.jsonld.serialization.hydrajsonld;\n \n-import java.io.IOException;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.BeanDescription;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.ObjectMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDcxNQ==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448354715", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "author": "JonCook", "createdAt": "2020-07-01T13:15:29Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldId;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldLink;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldNamespace;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldProperty;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldType;\n+\n+@JsonldNamespace(name = \"s\", uri = \"http://schema.org/\")\n+@JsonldLink(rel = \"s:knows\", name = \"knows\", href = \"http://example.com/person/2345\")\n+@JsonldType(\"s:Person\")\n+class JacksonJsonldExamplePerson {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java b/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java\ndeleted file mode 100644\nindex a3161ba1d3..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java\n+++ /dev/null\n\n@@ -1,17 +0,0 @@\n-package com.baeldung.jsonld.serialization.jacksonjsonld;\n-\n-import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldId;\n-import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldLink;\n-import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldNamespace;\n-import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldProperty;\n-import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldType;\n-\n-@JsonldNamespace(name = \"s\", uri = \"http://schema.org/\")\n-@JsonldLink(rel = \"s:knows\", name = \"knows\", href = \"http://example.com/person/2345\")\n-@JsonldType(\"s:Person\")\n-class JacksonJsonldExamplePerson {\n-    @JsonldId\n-    public String id = \"http://example.com/person/1234\";\n-    @JsonldProperty(\"s:name\")\n-    public String name = \"Example Name\";\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTAwNA==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448355004", "bodyText": "Let's clean up these unused imports.", "author": "JonCook", "createdAt": "2020-07-01T13:15:56Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import ioinformarics.oss.jackson.module.jsonld.HydraCollection;", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java\ndeleted file mode 100644\nindex 6a1acee1b8..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java\n+++ /dev/null\n\n@@ -1,25 +0,0 @@\n-package com.baeldung.jsonld.serialization.jacksonjsonld;\n-\n-import java.io.IOException;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import ioinformarics.oss.jackson.module.jsonld.HydraCollection;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldGraph;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldModule;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldResource;\n-\n-public class JacksonJsonLdSerializationExample {\n-    public static void main(String[] args) throws IOException {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        objectMapper.registerModule(new JsonldModule());\n-\n-        JacksonJsonldExamplePerson person = new JacksonJsonldExamplePerson();\n-\n-        JsonldResource jsonldResource = JsonldResource.Builder.create()\n-            .build(person);\n-\n-        System.out.println(objectMapper.writerWithDefaultPrettyPrinter()\n-            .writeValueAsString(jsonldResource));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTE3Nw==", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448355177", "bodyText": "Same comment regarding the unit tests.", "author": "JonCook", "createdAt": "2020-07-01T13:16:12Z", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import ioinformarics.oss.jackson.module.jsonld.HydraCollection;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldGraph;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldModule;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldResource;\n+\n+public class JacksonJsonLdSerializationExample {\n+    public static void main(String[] args) throws IOException {", "originalCommit": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "chunk": "diff --git a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java b/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java\ndeleted file mode 100644\nindex 6a1acee1b8..0000000000\n--- a/json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java\n+++ /dev/null\n\n@@ -1,25 +0,0 @@\n-package com.baeldung.jsonld.serialization.jacksonjsonld;\n-\n-import java.io.IOException;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import ioinformarics.oss.jackson.module.jsonld.HydraCollection;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldGraph;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldModule;\n-import ioinformarics.oss.jackson.module.jsonld.JsonldResource;\n-\n-public class JacksonJsonLdSerializationExample {\n-    public static void main(String[] args) throws IOException {\n-        ObjectMapper objectMapper = new ObjectMapper();\n-        objectMapper.registerModule(new JsonldModule());\n-\n-        JacksonJsonldExamplePerson person = new JacksonJsonldExamplePerson();\n-\n-        JsonldResource jsonldResource = JsonldResource.Builder.create()\n-            .build(person);\n-\n-        System.out.println(objectMapper.writerWithDefaultPrettyPrinter()\n-            .writeValueAsString(jsonldResource));\n-    }\n-}\n"}}, {"oid": "3611e36e8b533ae8785a2a5c8aa08399676e5228", "url": "https://github.com/eugenp/tutorials/commit/3611e36e8b533ae8785a2a5c8aa08399676e5228", "message": "Examples for the second version of the article", "committedDate": "2020-07-12T22:24:14Z", "type": "commit"}, {"oid": "f3ec17ca3f51190cd309150aebed617df5eb0f5e", "url": "https://github.com/eugenp/tutorials/commit/f3ec17ca3f51190cd309150aebed617df5eb0f5e", "message": "Changes based on editor review\n\n- extract Person classes from test classes\n- shorten test name of one test\n- fix one warning", "committedDate": "2020-07-26T07:38:00Z", "type": "commit"}, {"oid": "08d1db8df1e95fe1cbf24029079397ce02abd30f", "url": "https://github.com/eugenp/tutorials/commit/08d1db8df1e95fe1cbf24029079397ce02abd30f", "message": "Format inline JSON objects by hand", "committedDate": "2020-07-26T07:44:17Z", "type": "commit"}]}