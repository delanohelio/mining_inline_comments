{"pr_number": 10272, "pr_title": "BAEL-4721", "pr_createdAt": "2020-11-22T15:22:09Z", "pr_url": "https://github.com/eugenp/tutorials/pull/10272", "timeline": [{"oid": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "url": "https://github.com/eugenp/tutorials/commit/a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "message": "BAEL-4721 Examples", "committedDate": "2020-11-22T15:20:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMTA0MA==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528911040", "bodyText": "As the test throws IOException we don't need this catch block.. Similarly, if it just does throw ioe then it's a redundant catch anyway", "author": "ashleyfrieze", "createdAt": "2020-11-23T18:27:34Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {", "originalCommit": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex 707e870a84..9ae12b889b 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -10,15 +10,19 @@ import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n \n import org.apache.commons.io.FileUtils;\n-import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n import com.google.common.io.ByteSink;\n import com.google.common.io.MoreFiles;\n \n public class WriteByteArrayUnitTest {\n     private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n \n     @BeforeClass\n     public static void setup() throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528916727", "bodyText": "I think writing to src/test/resources is risky. This can be solved by using\n@Rule\npublic TemporaryFolder tempFolder = new TemporaryFolder();\n\n@Test\npublic void someTest() {\n    File outputFile = tempFolder.newFile(\"filename.jpg\");\n}\nThen we don't need the @AfterClass as the rule clears up the files. We probably don't need to mention the use of the rule in the snippets in the article either.", "author": "ashleyfrieze", "createdAt": "2020-11-23T18:37:59Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {\n+            throw ioe;\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        // Takes Optional OpenOptions, if not present defaults to CREATE, TRUNCATE_EXISTING (will truncate an existing file to size of 0), and WRITE\n+        // https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-\n+        Files.write(Paths.get(\"src/test/resources/example-nio-files.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-nio-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        com.google.common.io.Files.write(dataForWriting, new File(\"src/test/resources/example-guava-files.jpg\"));\n+        assertThat(new File(\"src/test/resources/example-guava-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        // Also discuss - https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/io/MoreFiles.html\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(new File(\"src/test/resources/example-guava-bs.jpg\"));\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        ByteSink byteSink = MoreFiles.asByteSink(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs-mf.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+        // http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#writeByteArrayToFile%28java.io.File,%20byte%5B%5D%29\n+        FileUtils.writeByteArrayToFile(new File(\"src/test/resources/example-file-utils.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-file-utils.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() throws IOException {\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-fos.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-nio-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-file-utils.jpg\"));", "originalCommit": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA4NzkwMQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532087901", "bodyText": "Wow - that's a really nice feature of JUnit! It definitely makes the example cleaner.", "author": "amdegregorio", "createdAt": "2020-11-28T17:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex 707e870a84..9ae12b889b 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -10,15 +10,19 @@ import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n \n import org.apache.commons.io.FileUtils;\n-import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n import com.google.common.io.ByteSink;\n import com.google.common.io.MoreFiles;\n \n public class WriteByteArrayUnitTest {\n     private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n \n     @BeforeClass\n     public static void setup() throws IOException {\n"}}, {"oid": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "url": "https://github.com/eugenp/tutorials/commit/83930cad49d1cd343aa1ced8754c76a1fa575a02", "message": "BAEL-4721 Requested edits", "committedDate": "2020-11-28T17:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjE5MQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276191", "bodyText": "Indentation is a bit odd here.", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:11:27Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex 9ae12b889b..c95a5ee306 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -20,7 +20,7 @@ import com.google.common.io.MoreFiles;\n \n public class WriteByteArrayUnitTest {\n     private static byte[] dataForWriting;\n-    \n+\n     @Rule\n     public TemporaryFolder tempFolder = new TemporaryFolder();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjIxOQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276219", "bodyText": "Indentation", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:11:39Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex 9ae12b889b..c95a5ee306 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -20,7 +20,7 @@ import com.google.common.io.MoreFiles;\n \n public class WriteByteArrayUnitTest {\n     private static byte[] dataForWriting;\n-    \n+\n     @Rule\n     public TemporaryFolder tempFolder = new TemporaryFolder();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjI3NQ==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276275", "bodyText": "Indentation too - I think you may have a mix of tabs and spaces here.", "author": "ashleyfrieze", "createdAt": "2020-11-29T22:12:03Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-file-utils.jpg\");", "originalCommit": "83930cad49d1cd343aa1ced8754c76a1fa575a02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex 9ae12b889b..c95a5ee306 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -20,7 +20,7 @@ import com.google.common.io.MoreFiles;\n \n public class WriteByteArrayUnitTest {\n     private static byte[] dataForWriting;\n-    \n+\n     @Rule\n     public TemporaryFolder tempFolder = new TemporaryFolder();\n \n"}}, {"oid": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "url": "https://github.com/eugenp/tutorials/commit/30b11918adc6ecced08877bd5fa5aca8b7b7246b", "message": "Fix formatting issues", "committedDate": "2020-12-01T00:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwODAwMw==", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r536908003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n          \n          \n            \n                public void whenUsingCommonsIo_thenByteArrayIsWritten() throws IOException {", "author": "KevinGilmore", "createdAt": "2020-12-05T22:51:00Z", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {", "originalCommit": "30b11918adc6ecced08877bd5fa5aca8b7b7246b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "892bd6d97061b417c779bc33f246dc88e6efa992", "chunk": "diff --git a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\nindex c95a5ee306..ef8c8e2470 100644\n--- a/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n+++ b/core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java\n\n@@ -69,7 +69,7 @@ public class WriteByteArrayUnitTest {\n     }\n \n     @Test\n-    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+    public void whenUsingCommonsIo_thenByteArrayIsWritten() throws IOException {\n         File outputFile = tempFolder.newFile(\"example-file-utils.jpg\");\n         FileUtils.writeByteArrayToFile(outputFile, dataForWriting);\n         assertThat(outputFile).hasBinaryContent(dataForWriting);\n"}}, {"oid": "892bd6d97061b417c779bc33f246dc88e6efa992", "url": "https://github.com/eugenp/tutorials/commit/892bd6d97061b417c779bc33f246dc88e6efa992", "message": "Correct unit test name", "committedDate": "2020-12-06T12:54:05Z", "type": "commit"}]}