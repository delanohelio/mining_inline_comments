{"pr_number": 9608, "pr_title": "BAEL-4175 - comparing version strings in java", "pr_createdAt": "2020-06-29T07:24:23Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9608", "timeline": [{"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76", "url": "https://github.com/eugenp/tutorials/commit/230c3202fb190b8af427d72f9c230b9c32c14b76", "message": "BAEL-4175 - comparing version strings in java", "committedDate": "2020-06-29T07:23:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzIwMg==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(version1_1_snapshot.isSnapshot(), true);\n          \n          \n            \n                    assertTrue(version1_1_snapshot.isSnapshot());", "author": "KevinGilmore", "createdAt": "2020-07-08T02:16:26Z", "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);", "originalCommit": "230c3202fb190b8af427d72f9c230b9c32c14b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "803c9167aeb5e934189e260e49b363e52f0fa60b", "chunk": "diff --git a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex 7221cdf6ec..a8e2e53853 100644\n--- a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -88,7 +88,7 @@ public class VersionComparisonUnitTest {\n         Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n         assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n         \n-        assertEquals(version1_1_snapshot.isSnapshot(), true);\n+        assertTrue(version1_1_snapshot.isSnapshot());\n     }\n     \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzQzNA==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243434", "bodyText": "use assertFalse", "author": "KevinGilmore", "createdAt": "2020-07-08T02:17:07Z", "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertEquals(version1_1_alpha.isStable(), false);", "originalCommit": "230c3202fb190b8af427d72f9c230b9c32c14b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "803c9167aeb5e934189e260e49b363e52f0fa60b", "chunk": "diff --git a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex 7221cdf6ec..a8e2e53853 100644\n--- a/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -88,7 +88,7 @@ public class VersionComparisonUnitTest {\n         Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n         assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n         \n-        assertEquals(version1_1_snapshot.isSnapshot(), true);\n+        assertTrue(version1_1_snapshot.isSnapshot());\n     }\n     \n     @Test\n"}}, {"oid": "803c9167aeb5e934189e260e49b363e52f0fa60b", "url": "https://github.com/eugenp/tutorials/commit/803c9167aeb5e934189e260e49b363e52f0fa60b", "message": "Update core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\nCo-authored-by: KevinGilmore <kpg102@gmail.com>", "committedDate": "2020-07-09T06:59:50Z", "type": "commit"}, {"oid": "ae4fac587aa1b09abb49a41a9cddd85a5b102cd2", "url": "https://github.com/eugenp/tutorials/commit/ae4fac587aa1b09abb49a41a9cddd85a5b102cd2", "message": "used assertFalse in place of assertEquals", "committedDate": "2020-07-09T07:01:20Z", "type": "commit"}, {"oid": "d09094c994ffa723dd9af339b53ed4aa468f9c0c", "url": "https://github.com/eugenp/tutorials/commit/d09094c994ffa723dd9af339b53ed4aa468f9c0c", "message": "correct import", "committedDate": "2020-07-09T07:02:05Z", "type": "commit"}, {"oid": "4163e5010c7636b41500843fe4b68cb9808b3bab", "url": "https://github.com/eugenp/tutorials/commit/4163e5010c7636b41500843fe4b68cb9808b3bab", "message": "BAEL-4175 - moved code to a new module - core-java-string-operations-3", "committedDate": "2020-07-09T07:13:30Z", "type": "commit"}, {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3", "url": "https://github.com/eugenp/tutorials/commit/932183fabd183c0983f66576811c8df2ae2eaac3", "message": "POM fixes", "committedDate": "2020-07-09T07:19:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDIxNQ==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320215", "bodyText": "swap order of arguments so that you get assertTrue(expected, actual)", "author": "KevinGilmore", "createdAt": "2020-07-12T14:00:06Z", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);", "originalCommit": "932183fabd183c0983f66576811c8df2ae2eaac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzU3NQ==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413575", "bodyText": "I think it is relevant for assertEquals", "author": "SmartyAnsh", "createdAt": "2020-07-13T03:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "30ff1a1a146137521a2cc3329759df02520fc91c", "chunk": "diff --git a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex be8dca0d10..145e9788e4 100644\n--- a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -25,7 +25,7 @@ public class VersionComparisonUnitTest {\n         assertTrue(version1_3.compareTo(version1_2) > 0);\n         \n         ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n-        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        assertEquals(0, version1_1.compareTo(version1_1_0));\n \n         ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n         assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDMzOA==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320338", "bodyText": "swap argument order", "author": "KevinGilmore", "createdAt": "2020-07-12T14:01:10Z", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);", "originalCommit": "932183fabd183c0983f66576811c8df2ae2eaac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY0Ng==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413646", "bodyText": "swapped", "author": "SmartyAnsh", "createdAt": "2020-07-13T03:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "30ff1a1a146137521a2cc3329759df02520fc91c", "chunk": "diff --git a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex be8dca0d10..145e9788e4 100644\n--- a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -25,7 +25,7 @@ public class VersionComparisonUnitTest {\n         assertTrue(version1_3.compareTo(version1_2) > 0);\n         \n         ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n-        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        assertEquals(0, version1_1.compareTo(version1_1_0));\n \n         ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n         assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM2MA==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320360", "bodyText": "swap argument order", "author": "KevinGilmore", "createdAt": "2020-07-12T14:01:22Z", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);", "originalCommit": "932183fabd183c0983f66576811c8df2ae2eaac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY1Mg==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413652", "bodyText": "swapped", "author": "SmartyAnsh", "createdAt": "2020-07-13T03:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "30ff1a1a146137521a2cc3329759df02520fc91c", "chunk": "diff --git a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex be8dca0d10..145e9788e4 100644\n--- a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -25,7 +25,7 @@ public class VersionComparisonUnitTest {\n         assertTrue(version1_3.compareTo(version1_2) > 0);\n         \n         ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n-        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        assertEquals(0, version1_1.compareTo(version1_1_0));\n \n         ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n         assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM5NA==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320394", "bodyText": "swap argument order", "author": "KevinGilmore", "createdAt": "2020-07-12T14:01:38Z", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);", "originalCommit": "932183fabd183c0983f66576811c8df2ae2eaac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY3NQ==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413675", "bodyText": "swapped", "author": "SmartyAnsh", "createdAt": "2020-07-13T03:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "30ff1a1a146137521a2cc3329759df02520fc91c", "chunk": "diff --git a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex be8dca0d10..145e9788e4 100644\n--- a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -25,7 +25,7 @@ public class VersionComparisonUnitTest {\n         assertTrue(version1_3.compareTo(version1_2) > 0);\n         \n         ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n-        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        assertEquals(0, version1_1.compareTo(version1_1_0));\n \n         ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n         assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDQxNA==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320414", "bodyText": "swap argument order", "author": "KevinGilmore", "createdAt": "2020-07-12T14:01:46Z", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertFalse(version1_1_alpha.isStable());\n+    }\n+\n+    @Test\n+    public void givenVersionStrings_whenUsingCustomVersionCompare_thenCompareVersions() {\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.1.2\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.10\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.0.1\") > 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.2\") < 0); \n+        assertEquals(VersionCompare.compareVersions(\"1.3.0\", \"1.3\"), 0); ", "originalCommit": "932183fabd183c0983f66576811c8df2ae2eaac3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY4Ng==", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413686", "bodyText": "swapped", "author": "SmartyAnsh", "createdAt": "2020-07-13T03:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "30ff1a1a146137521a2cc3329759df02520fc91c", "chunk": "diff --git a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\nindex be8dca0d10..145e9788e4 100644\n--- a/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n+++ b/core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\n@@ -25,7 +25,7 @@ public class VersionComparisonUnitTest {\n         assertTrue(version1_3.compareTo(version1_2) > 0);\n         \n         ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n-        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        assertEquals(0, version1_1.compareTo(version1_1_0));\n \n         ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n         assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n"}}, {"oid": "30ff1a1a146137521a2cc3329759df02520fc91c", "url": "https://github.com/eugenp/tutorials/commit/30ff1a1a146137521a2cc3329759df02520fc91c", "message": "BAEL-4175 - swapped argument order for assertEquals", "committedDate": "2020-07-13T03:11:58Z", "type": "commit"}]}