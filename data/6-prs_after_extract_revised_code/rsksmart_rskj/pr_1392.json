{"pr_number": 1392, "pr_title": "Handle precompiled contracts errors", "pr_createdAt": "2020-12-14T15:43:29Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1392", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNDk2MA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543314960", "bodyText": "Could we write the improvement proposal?", "author": "ajlopezrsk", "createdAt": "2020-12-15T12:50:54Z", "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "diffHunk": "@@ -55,7 +55,9 @@\n     RSKIP172(\"rskip172\"),\n     RSKIP174(\"rskip174\"),\n     RSKIP180(\"rskip180\"),\n-    RSKIPUMM(\"rskipUMM\");\n+    RSKIPUMM(\"rskipUMM\"),\n+    // TODO: change activation code RSKIPNEW.\n+    RSKIPNEW(\"rskipNEW\"); //Handle error in Precompile Contracts execution.", "originalCommit": "e9d458623d4d381b3650f6681bf536f3485b8336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxOTgzMA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543519830", "bodyText": "We are on it :)", "author": "patogallaiovlabs", "createdAt": "2020-12-15T16:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTc1Mw==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543565753", "bodyText": "rsksmart/RSKIPs#197", "author": "fedejinich", "createdAt": "2020-12-15T18:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUzMjcyMQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r544532721", "bodyText": "11d5f36 renamed", "author": "fedejinich", "createdAt": "2020-12-16T18:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java b/rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java\nindex 1cdc3ea56..d3e33de1b 100644\n--- a/rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java\n+++ b/rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java\n\n@@ -56,8 +56,8 @@ public enum ConsensusRule {\n     RSKIP174(\"rskip174\"),\n     RSKIP180(\"rskip180\"),\n     RSKIPUMM(\"rskipUMM\"),\n-    // TODO: change activation code RSKIPNEW.\n-    RSKIPNEW(\"rskipNEW\"); //Handle error in Precompile Contracts execution.\n+    RSKIP191(\"rskip191\"),\n+    RSKIP197(\"rskip197\"); //Handle error in Precompile Contracts execution.\n \n     private String configKey;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNzY3MQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543317671", "bodyText": "Why not to process these exceptions in TWO catch? And instead of PrecompiledContractException catch ExecutionException or something similar. So we could manage RuntimeException ONLY when the fork is NOT yet activated. Maybe you consider the case as out of scope, but it could be nice to have the RuntimeException removed from execution.", "author": "ajlopezrsk", "createdAt": "2020-12-15T12:54:55Z", "path": "rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java", "diffHunk": "@@ -340,7 +341,7 @@ private void call() {\n                 } else if (!track.isContract(targetAddress)) {\n                     track.setupContract(targetAddress);\n                 }\n-            } catch (RuntimeException e) {\n+            } catch (PrecompiledContractException | RuntimeException e) {", "originalCommit": "e9d458623d4d381b3650f6681bf536f3485b8336", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b84608179b44ede3240829e23f17e26649710566", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java b/rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java\nindex 78a40b15f..33dcb8625 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java\n\n@@ -341,7 +341,7 @@ public class TransactionExecutor {\n                 } else if (!track.isContract(targetAddress)) {\n                     track.setupContract(targetAddress);\n                 }\n-            } catch (PrecompiledContractException | RuntimeException e) {\n+            } catch (VMException | RuntimeException e) {\n                 result.setException(e);\n             }\n             result.spendGas(gasUsed);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjY2Ng==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543322666", "bodyText": "No PrecompiledContractException throws? Why?", "author": "ajlopezrsk", "createdAt": "2020-12-15T13:02:28Z", "path": "rskj-core/src/main/java/org/ethereum/vm/program/Program.java", "diffHunk": "@@ -1351,7 +1349,7 @@ public int verifyBeginSub(DataWord nextPC) {\n         return ret;\n     }\n \n-    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract, ActivationConfig.ForBlock activations) {\n+    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract) {", "originalCommit": "e9d458623d4d381b3650f6681bf536f3485b8336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MzkwOA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543563908", "bodyText": "We wanted to keep consistency with the behaviour of \"callToAddress()\", which handles all the errors internally, it doesn't bubble up the error but push a Zero into the stack.", "author": "patogallaiovlabs", "createdAt": "2020-12-15T17:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/vm/program/Program.java b/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\nindex bbc6edc07..06e827c86 100644\n--- a/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\n+++ b/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\n\n@@ -1349,7 +1349,7 @@ public class Program {\n         return ret;\n     }\n \n-    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract) {\n+    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract, ActivationConfig.ForBlock activations) {\n \n         if (getCallDeep() == getMaxDepth()) {\n             stackPushZero();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMzU4NQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543323585", "bodyText": "No treatment of PrecompiledContractException?", "author": "ajlopezrsk", "createdAt": "2020-12-15T13:03:56Z", "path": "rskj-core/src/main/java/org/ethereum/vm/VM.java", "diffHunk": "@@ -1490,9 +1490,9 @@ protected void doCALL(){\n         PrecompiledContracts.PrecompiledContract precompiledContract = precompiledContracts.getContractForAddress(activations, codeAddress);\n \n         if (precompiledContract != null) {\n-            program.callToPrecompiledAddress(msg, precompiledContract, activations);\n+            program.callToPrecompiledAddress(msg, precompiledContract);", "originalCommit": "e9d458623d4d381b3650f6681bf536f3485b8336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NDY0Ng==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543564646", "bodyText": "Idem as before. No need of handling here, it's made internally.", "author": "patogallaiovlabs", "createdAt": "2020-12-15T17:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMzU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/vm/VM.java b/rskj-core/src/main/java/org/ethereum/vm/VM.java\nindex bcfc64497..1158cf8f7 100644\n--- a/rskj-core/src/main/java/org/ethereum/vm/VM.java\n+++ b/rskj-core/src/main/java/org/ethereum/vm/VM.java\n\n@@ -1490,9 +1490,9 @@ public class VM {\n         PrecompiledContracts.PrecompiledContract precompiledContract = precompiledContracts.getContractForAddress(activations, codeAddress);\n \n         if (precompiledContract != null) {\n-            program.callToPrecompiledAddress(msg, precompiledContract);\n+            program.callToPrecompiledAddress(msg, precompiledContract, activations);\n         } else {\n-            program.callToAddress(msg);\n+            program.callToAddress(msg, activations);\n         }\n \n         program.step();\n"}}, {"oid": "89a8b7a46757319769a2485d4f2664c4dec9597e", "url": "https://github.com/rsksmart/rskj/commit/89a8b7a46757319769a2485d4f2664c4dec9597e", "message": "fix sonarcloud codesmells", "committedDate": "2020-12-15T17:42:00Z", "type": "forcePushed"}, {"oid": "b84608179b44ede3240829e23f17e26649710566", "url": "https://github.com/rsksmart/rskj/commit/b84608179b44ede3240829e23f17e26649710566", "message": "Rename PrecompiledContractException -> VMException. Remove handling of RuntimeException, only VMException handler. Replace throwing of Runtime by VMException in precompiled.", "committedDate": "2020-12-16T14:15:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM3OTk1MA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545379950", "bodyText": "?", "author": "donequis", "createdAt": "2020-12-17T20:23:05Z", "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -84,14 +87,15 @@ private void createFederation_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void addFederatorPublicKey() {\n+    public void addFederatorPublicKey() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"addFederatorPublicKey\");\n         addFederatorPublicKey_noWinner(200, stats);\n         addFederatorPublicKey_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "originalCommit": "071b8844e895152133d68a7bffa49a46e846e396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\nindex f6bc9c373..217aae5d9 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n\n@@ -91,8 +90,7 @@ public class FederationChangeTest extends BridgePerformanceTestCase {\n         ExecutionStats stats = new ExecutionStats(\"addFederatorPublicKey\");\n         addFederatorPublicKey_noWinner(200, stats);\n         addFederatorPublicKey_winner(200, stats);\n-        BridgePerformanceTest.addStats(stats);\n-        Assert.assertTrue(true);\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n     private void addFederatorPublicKey_noWinner(int times, ExecutionStats stats) throws VMException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDQ4OA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380488", "bodyText": "?", "author": "donequis", "createdAt": "2020-12-17T20:23:49Z", "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -119,14 +123,15 @@ private void addFederatorPublicKey_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void commitFederation() {\n+    public void commitFederation() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"commitFederation\");\n         commitFederation_noWinner(200, stats);\n         commitFederation_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "originalCommit": "071b8844e895152133d68a7bffa49a46e846e396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\nindex f6bc9c373..217aae5d9 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n\n@@ -127,8 +125,7 @@ public class FederationChangeTest extends BridgePerformanceTestCase {\n         ExecutionStats stats = new ExecutionStats(\"commitFederation\");\n         commitFederation_noWinner(200, stats);\n         commitFederation_winner(200, stats);\n-        BridgePerformanceTest.addStats(stats);\n-        Assert.assertTrue(true);\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n     private void commitFederation_noWinner(int times, ExecutionStats stats) throws VMException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDU1Ng==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380556", "bodyText": "?", "author": "donequis", "createdAt": "2020-12-17T20:23:56Z", "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -151,14 +156,15 @@ private void commitFederation_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void rollbackFederation() {\n+    public void rollbackFederation() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"rollbackFederation\");\n         rollbackFederation_noWinner(200, stats);\n         rollbackFederation_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "originalCommit": "071b8844e895152133d68a7bffa49a46e846e396", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\nindex f6bc9c373..217aae5d9 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java\n\n@@ -160,8 +157,7 @@ public class FederationChangeTest extends BridgePerformanceTestCase {\n         ExecutionStats stats = new ExecutionStats(\"rollbackFederation\");\n         rollbackFederation_noWinner(200, stats);\n         rollbackFederation_winner(200, stats);\n-        BridgePerformanceTest.addStats(stats);\n-        Assert.assertTrue(true);\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n     private void rollbackFederation_noWinner(int times, ExecutionStats stats) throws VMException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDkzMw==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380933", "bodyText": "?", "author": "donequis", "createdAt": "2020-12-17T20:24:35Z", "path": "rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java", "diffHunk": "@@ -45,25 +47,27 @@\n     private static final ECKey authorizedWhitelistChanger = ECKey.fromPrivate(Hex.decode(\"3890187a3071327cee08467ba1b44ed4c13adb2da0d5ffcc0563c371fa88259c\"));\n \n     @Test\n-    public void getLockWhitelistSize() throws IOException {\n+    public void getLockWhitelistSize() throws IOException, VMException {\n         ExecutionStats stats = new ExecutionStats(\"getLockWhitelistSize\");\n         executeTestCase((int executionIndex) -> Bridge.GET_LOCK_WHITELIST_SIZE.encode(), \"getLockWhitelistSize\", 200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "originalCommit": "071b8844e895152133d68a7bffa49a46e846e396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5MjkyNA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545392924", "bodyText": "Was just for sonar not complaining... but I will change them to smthg with more sense.", "author": "patogallaiovlabs", "createdAt": "2020-12-17T20:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java b/rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java\nindex 2c0423975..b2fb7cdac 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java\n\n@@ -50,8 +50,7 @@ public class LockWhitelistTest extends BridgePerformanceTestCase {\n     public void getLockWhitelistSize() throws IOException, VMException {\n         ExecutionStats stats = new ExecutionStats(\"getLockWhitelistSize\");\n         executeTestCase((int executionIndex) -> Bridge.GET_LOCK_WHITELIST_SIZE.encode(), \"getLockWhitelistSize\", 200, stats);\n-        BridgePerformanceTest.addStats(stats);\n-        Assert.assertTrue(true);\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2Mjg4OA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r546062888", "bodyText": "this if should always be true at this point, right?", "author": "fedejinich", "createdAt": "2020-12-18T20:00:21Z", "path": "rskj-core/src/main/java/org/ethereum/vm/program/Program.java", "diffHunk": "@@ -1424,28 +1425,73 @@ public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contra\n \n         long requiredGas = contract.getGasForData(data);\n         if (requiredGas > msg.getGas().longValue()) {\n-            this.refundGas(0, \"call pre-compiled\"); //matches cpp logic\n+            this.refundGas(0, CALL_PRECOMPILED_CAUSE); //matches cpp logic\n             this.stackPushZero();\n             track.rollback();\n-            this.cleanReturnDataBuffer(activations);\n+            this.cleanReturnDataBuffer();\n         } else {\n+            if (getActivations().isActive(ConsensusRule.RSKIP197)) {\n+                executePrecompiledAndHandleError(contract, msg, requiredGas, track, data);\n+            } else {\n+                executePrecompiled(contract, msg, requiredGas, track, data);\n+            }\n+        }\n+    }\n \n-            this.refundGas(msg.getGas().longValue() - requiredGas, \"call pre-compiled\");\n-\n+    /**\n+     * This is for compatibility before RSKIP197, no error handling was implemented when calling to precompiled contracts.\n+     *\n+     * This method shouldn't be modified, all new changes should go to executePrecompiledAndHandleError() method\n+     */\n+    @Deprecated\n+    private void executePrecompiled(PrecompiledContract contract, MessageCall msg, long requiredGas, Repository track, byte[] data) {\n+        try {\n+            this.refundGas(msg.getGas().longValue() - requiredGas, CALL_PRECOMPILED_CAUSE);\n             byte[] out = contract.execute(data);\n             if (getActivations().isActive(ConsensusRule.RSKIP90)) {\n                 this.returnDataBuffer = out;\n             }\n+            saveOutAfterExecution(msg, out);\n+            this.stackPushOne();\n+            track.commit();\n+        } catch (VMException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n \n-            // Avoid saving null returns to memory and limit the memory it can use.\n-            // If we're behind RSK150 activation, don't care about the null return, just save.\n-            if (getActivations().isActive(ConsensusRule.RSKIP150) && out != null) {\n-                this.memorySaveLimited(msg.getOutDataOffs().intValue(), out, msg.getOutDataSize().intValue());\n-            } else if (!getActivations().isActive(ConsensusRule.RSKIP150)) {\n-                this.memorySave(msg.getOutDataOffs().intValue(), out);\n+    /**\n+     * This is after RSKIP197, where we fix the way in which error is handled after a precompiled execution.\n+     */\n+    private void executePrecompiledAndHandleError(PrecompiledContract contract, MessageCall msg, long requiredGas, Repository track, byte[] data) {\n+        try {\n+            logger.trace(\"Executing Precompiled contract...\");\n+            byte[] out = contract.execute(data);\n+            if (getActivations().isActive(ConsensusRule.RSKIP90)) {", "originalCommit": "76d46adbbf98326158e854c7f80388c739abf4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0NjI3Ng==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r546846276", "bodyText": "Nice catch", "author": "patogallaiovlabs", "createdAt": "2020-12-21T17:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2Mjg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDU3MQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r546854571", "bodyText": "Theoretically you could have a regtest where it is false, but that doesn't make much sense really.", "author": "donequis", "createdAt": "2020-12-21T18:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2Mjg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/vm/program/Program.java b/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\nindex 8a3268be6..76ac07fc8 100644\n--- a/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\n+++ b/rskj-core/src/main/java/org/ethereum/vm/program/Program.java\n\n@@ -1465,25 +1465,26 @@ public class Program {\n     private void executePrecompiledAndHandleError(PrecompiledContract contract, MessageCall msg, long requiredGas, Repository track, byte[] data) {\n         try {\n             logger.trace(\"Executing Precompiled contract...\");\n-            byte[] out = contract.execute(data);\n-            if (getActivations().isActive(ConsensusRule.RSKIP90)) {\n-                logger.trace(\"Executing Precompiled setting output.\");\n-                this.returnDataBuffer = out;\n-            }\n-            saveOutAfterExecution(msg, out);\n+            this.returnDataBuffer = contract.execute(data);\n+            logger.trace(\"Executing Precompiled setting output.\");\n+            this.memorySaveLimited(msg.getOutDataOffs().intValue(), this.returnDataBuffer, msg.getOutDataSize().intValue());\n             this.stackPushOne();\n             track.commit();\n         } catch (VMException e) {\n             logger.trace(\"Precompiled execution error. Pushing Zero to stack and performing rollback.\", e);\n             this.stackPushZero();\n             track.rollback();\n-            this.cleanReturnDataBuffer();\n+            this.returnDataBuffer = null;\n         } finally {\n             final long refundingGas = msg.getGas().longValue() - requiredGas;\n             this.refundGas(refundingGas, CALL_PRECOMPILED_CAUSE);\n         }\n     }\n \n+    /**\n+     * This is for compatibility before RSKIP197. {@code memorySaveLimited()} should be called directly instead.\n+     */\n+    @Deprecated\n     private void saveOutAfterExecution(MessageCall msg, byte[] out) {\n         logger.trace(\"Executing Precompiled saving memory.\");\n         // Avoid saving null returns to memory and limit the memory it can use.\n"}}, {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "url": "https://github.com/rsksmart/rskj/commit/a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "message": "Small refactor. Remove old RSKIP checks from new code", "committedDate": "2020-12-21T19:00:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMzc4MA==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r549723780", "bodyText": "Why not add the try catch internally in ensureBtcBlockStore?", "author": "josedahlquist", "createdAt": "2020-12-29T14:26:21Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -1992,9 +1993,14 @@ public boolean increaseLockingCap(Transaction tx, Coin newCap) {\n         return true;\n     }\n \n-    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws IOException, BlockStoreException {\n+    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws VMException {\n         Context.propagate(btcContext);\n-        this.ensureBtcBlockStore();\n+        try{\n+            this.ensureBtcBlockStore();\n+        }catch (BlockStoreException | IOException e) {\n+            logger.warn(\"Exception in registerBtcCoinbaseTransaction\", e);\n+            throw new VMException(\"Exception in registerBtcCoinbaseTransaction\", e);\n+        }", "originalCommit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxOTk1MQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r550219951", "bodyText": "Not sure if catching inside, could break the behaviour of other methods like \"getBtcTransactionConfirmationsGetCost\". So, I thought that the safest way was this one, apart from out of scope. Let me know your thoughts.", "author": "patogallaiovlabs", "createdAt": "2020-12-30T14:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMzc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java b/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\nindex d817b965a..6ee0e7d6a 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\n@@ -1993,14 +1992,9 @@ public class BridgeSupport {\n         return true;\n     }\n \n-    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws VMException {\n+    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws IOException, BlockStoreException {\n         Context.propagate(btcContext);\n-        try{\n-            this.ensureBtcBlockStore();\n-        }catch (BlockStoreException | IOException e) {\n-            logger.warn(\"Exception in registerBtcCoinbaseTransaction\", e);\n-            throw new VMException(\"Exception in registerBtcCoinbaseTransaction\", e);\n-        }\n+        this.ensureBtcBlockStore();\n \n         Sha256Hash btcTxHash = BtcTransactionFormatUtils.calculateBtcTxHash(btcTxSerialized);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTk3OQ==", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r549725979", "bodyText": "\ud83d\udc4d", "author": "josedahlquist", "createdAt": "2020-12-29T14:32:59Z", "path": "rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java", "diffHunk": "@@ -49,51 +51,53 @@\n     private Federation federation;\n \n     @Test\n-    public void getFederationAddress() throws IOException {\n+    public void getFederationAddress() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_ADDRESS);\n     }\n \n     @Test\n-    public void getFederationSize() throws IOException {\n+    public void getFederationSize() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_SIZE);\n     }\n \n     @Test\n-    public void getFederationThreshold() throws IOException {\n+    public void getFederationThreshold() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_THRESHOLD);\n     }\n \n     @Test\n-    public void getFederationCreationTime() throws IOException {\n+    public void getFederationCreationTime() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_TIME);\n     }\n \n     @Test\n-    public void getFederationCreationBlockNumber() throws IOException {\n+    public void getFederationCreationBlockNumber() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_BLOCK_NUMBER);\n     }\n \n     @Test\n-    public void getFederatorPublicKey() throws IOException {\n+    public void getFederatorPublicKey() throws IOException, VMException {\n         ExecutionStats stats = new ExecutionStats(\"getFederatorPublicKey\");\n         ABIEncoder abiEncoder = (int executionIndex) -> Bridge.GET_FEDERATOR_PUBLIC_KEY.encode(new Object[]{Helper.randomInRange(0, federation.getBtcPublicKeys().size()-1)});\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", true,50, stats);\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", false,500, stats);\n-        BridgePerformanceTest.addStats(stats);\n+\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n-    private void executeTestCase(CallTransaction.Function fn) {\n+    private void executeTestCase(CallTransaction.Function fn) throws VMException {\n         ExecutionStats stats = new ExecutionStats(fn.name);\n         executeTestCaseSection(fn,true,50, stats);\n         executeTestCaseSection(fn,false,500, stats);\n-        BridgePerformanceTest.addStats(stats);\n+\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));", "originalCommit": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java b/rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java\nindex 682fdd3e2..23e6d3b65 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java\n\n@@ -51,53 +50,51 @@ public class ActiveFederationTest extends BridgePerformanceTestCase {\n     private Federation federation;\n \n     @Test\n-    public void getFederationAddress() throws IOException, VMException {\n+    public void getFederationAddress() throws IOException, PrecompiledContractException {\n         executeTestCase(Bridge.GET_FEDERATION_ADDRESS);\n     }\n \n     @Test\n-    public void getFederationSize() throws IOException, VMException {\n+    public void getFederationSize() throws IOException, PrecompiledContractException {\n         executeTestCase(Bridge.GET_FEDERATION_SIZE);\n     }\n \n     @Test\n-    public void getFederationThreshold() throws IOException, VMException {\n+    public void getFederationThreshold() throws IOException, PrecompiledContractException {\n         executeTestCase(Bridge.GET_FEDERATION_THRESHOLD);\n     }\n \n     @Test\n-    public void getFederationCreationTime() throws IOException, VMException {\n+    public void getFederationCreationTime() throws IOException, PrecompiledContractException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_TIME);\n     }\n \n     @Test\n-    public void getFederationCreationBlockNumber() throws IOException, VMException {\n+    public void getFederationCreationBlockNumber() throws IOException, PrecompiledContractException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_BLOCK_NUMBER);\n     }\n \n     @Test\n-    public void getFederatorPublicKey() throws IOException, VMException {\n+    public void getFederatorPublicKey() throws IOException, PrecompiledContractException {\n         ExecutionStats stats = new ExecutionStats(\"getFederatorPublicKey\");\n         ABIEncoder abiEncoder = (int executionIndex) -> Bridge.GET_FEDERATOR_PUBLIC_KEY.encode(new Object[]{Helper.randomInRange(0, federation.getBtcPublicKeys().size()-1)});\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", true,50, stats);\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", false,500, stats);\n-\n-        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n+        BridgePerformanceTest.addStats(stats);\n     }\n \n-    private void executeTestCase(CallTransaction.Function fn) throws VMException {\n+    private void executeTestCase(CallTransaction.Function fn) throws PrecompiledContractException {\n         ExecutionStats stats = new ExecutionStats(fn.name);\n         executeTestCaseSection(fn,true,50, stats);\n         executeTestCaseSection(fn,false,500, stats);\n-\n-        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n+        BridgePerformanceTest.addStats(stats);\n     }\n \n-    private void executeTestCaseSection(CallTransaction.Function fn, boolean genesis, int times, ExecutionStats stats) throws VMException {\n+    private void executeTestCaseSection(CallTransaction.Function fn, boolean genesis, int times, ExecutionStats stats) throws PrecompiledContractException {\n         executeTestCaseSection((int executionIndex) -> fn.encode(), fn.name, genesis, times, stats);\n     }\n \n-    private void executeTestCaseSection(ABIEncoder abiEncoder, String name, boolean genesis, int times, ExecutionStats stats) throws VMException {\n+    private void executeTestCaseSection(ABIEncoder abiEncoder, String name, boolean genesis, int times, ExecutionStats stats) throws PrecompiledContractException {\n         executeAndAverage(\n                 String.format(\"%s-%s\", name, genesis ? \"genesis\" : \"non-genesis\"),\n                 times, abiEncoder,\n"}}, {"oid": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "url": "https://github.com/rsksmart/rskj/commit/eef605504f0681d0e95a01b6a6c8faf0d728cd90", "message": "Handle precompiled contracts, declare new exception for declared errors.", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "d059d8440b4f6210da8c5aea6ac56ebbbf552961", "url": "https://github.com/rsksmart/rskj/commit/d059d8440b4f6210da8c5aea6ac56ebbbf552961", "message": "Add tests for nested call contracts", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "3eb320409106ae79b59522d2fb14cc1be23edbca", "url": "https://github.com/rsksmart/rskj/commit/3eb320409106ae79b59522d2fb14cc1be23edbca", "message": "Add nested contract call tests, program tests", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "bf759c2c3f429ec01902992a7f3fa2f640501a87", "url": "https://github.com/rsksmart/rskj/commit/bf759c2c3f429ec01902992a7f3fa2f640501a87", "message": "Minor changes, comments and signatures", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "ec550f3eb88e68eab83cd3757ad21f3db28e26ea", "url": "https://github.com/rsksmart/rskj/commit/ec550f3eb88e68eab83cd3757ad21f3db28e26ea", "message": "add dsl tests for error handling on precompiled contract calls", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "0132acafeda341fac3ecfd4574ce58528b766ce8", "url": "https://github.com/rsksmart/rskj/commit/0132acafeda341fac3ecfd4574ce58528b766ce8", "message": "add asserts to sonar complaint", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "07a744f73b6dfcfc6b8633c541af05ca37bf4db4", "url": "https://github.com/rsksmart/rskj/commit/07a744f73b6dfcfc6b8633c541af05ca37bf4db4", "message": "change log TRACE back to ERROR, minor sonar fixes", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "76ef22f0858b2ef2b043088b977b28d355d3ece6", "url": "https://github.com/rsksmart/rskj/commit/76ef22f0858b2ef2b043088b977b28d355d3ece6", "message": "fix sonarcloud codesmells", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "119623557232d6ae6437d3548b5848b35cd4402b", "url": "https://github.com/rsksmart/rskj/commit/119623557232d6ae6437d3548b5848b35cd4402b", "message": "add some comments and remove unused method", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "f57225773c59647de992b90618e260289d56dbac", "url": "https://github.com/rsksmart/rskj/commit/f57225773c59647de992b90618e260289d56dbac", "message": "add custom config for DSL tests", "committedDate": "2020-12-30T14:14:21Z", "type": "commit"}, {"oid": "b3ef838bfa7fc938c41792fa6f6737abc5b40acd", "url": "https://github.com/rsksmart/rskj/commit/b3ef838bfa7fc938c41792fa6f6737abc5b40acd", "message": "Rename PrecompiledContractException -> VMException. Remove handling of RuntimeException, only VMException handler. Replace throwing of Runtime by VMException in precompiled.", "committedDate": "2020-12-30T14:41:50Z", "type": "commit"}, {"oid": "6646e55931f2b72419dfabd869fc4d13fbf29caa", "url": "https://github.com/rsksmart/rskj/commit/6646e55931f2b72419dfabd869fc4d13fbf29caa", "message": "fix sonar", "committedDate": "2020-12-30T14:41:50Z", "type": "commit"}, {"oid": "0e69eb8bca630dade6fc22109135dfa925463ebd", "url": "https://github.com/rsksmart/rskj/commit/0e69eb8bca630dade6fc22109135dfa925463ebd", "message": "revert format style code changes", "committedDate": "2020-12-30T14:41:50Z", "type": "commit"}, {"oid": "c14559b2c7eb8b7f5d67245d11d941a80f3f1601", "url": "https://github.com/rsksmart/rskj/commit/c14559b2c7eb8b7f5d67245d11d941a80f3f1601", "message": "rename rskip to match rskip197", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "5b4461ccf90eaeaa0f921339800292328b236937", "url": "https://github.com/rsksmart/rskj/commit/5b4461ccf90eaeaa0f921339800292328b236937", "message": "fixed comments", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "aba666856466235822eccd61143ed4fd901447b3", "url": "https://github.com/rsksmart/rskj/commit/aba666856466235822eccd61143ed4fd901447b3", "message": "minor fixes after review", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "dbeee9301abc5e8f9e9f401fececf6df157670db", "url": "https://github.com/rsksmart/rskj/commit/dbeee9301abc5e8f9e9f401fececf6df157670db", "message": "executePrecopmiled() @Deprecated", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "76ec6217e46a6b4ff178aff99c0469b00f61bda9", "url": "https://github.com/rsksmart/rskj/commit/76ec6217e46a6b4ff178aff99c0469b00f61bda9", "message": "remove assertTrue(true)", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "url": "https://github.com/rsksmart/rskj/commit/2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "message": "Small refactor. Remove old RSKIP checks from new code", "committedDate": "2020-12-30T14:41:51Z", "type": "commit"}, {"oid": "2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "url": "https://github.com/rsksmart/rskj/commit/2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "message": "Small refactor. Remove old RSKIP checks from new code", "committedDate": "2020-12-30T14:41:51Z", "type": "forcePushed"}, {"oid": "6d4738b72ed504a6ed30e1e806854988a74c7ec4", "url": "https://github.com/rsksmart/rskj/commit/6d4738b72ed504a6ed30e1e806854988a74c7ec4", "message": "Minor fix, TRACE to INFO in test logs", "committedDate": "2021-01-04T18:28:53Z", "type": "commit"}]}