{"pr_number": 1181, "pr_title": "Introduce BlockHeaderBuilder class", "pr_createdAt": "2020-03-03T18:17:11Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1181", "timeline": [{"oid": "423e4b7e75b6d0686734ec06d4e0815d8bcab09d", "url": "https://github.com/rsksmart/rskj/commit/423e4b7e75b6d0686734ec06d4e0815d8bcab09d", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-03T19:47:59Z", "type": "forcePushed"}, {"oid": "c86416d768205712be12fbb22d62add914da0a7c", "url": "https://github.com/rsksmart/rskj/commit/c86416d768205712be12fbb22d62add914da0a7c", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-04T13:40:10Z", "type": "forcePushed"}, {"oid": "dbe3d49a0f974ea0f95ba754e5ed85c45b35f66e", "url": "https://github.com/rsksmart/rskj/commit/dbe3d49a0f974ea0f95ba754e5ed85c45b35f66e", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-04T14:06:02Z", "type": "forcePushed"}, {"oid": "a854e60cb9248c504e5b08bfe85cb8ad0cbbfe38", "url": "https://github.com/rsksmart/rskj/commit/a854e60cb9248c504e5b08bfe85cb8ad0cbbfe38", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-04T14:29:27Z", "type": "forcePushed"}, {"oid": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "url": "https://github.com/rsksmart/rskj/commit/217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-10T18:43:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5OTIxNg==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r390999216", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (C) 2018 RSK Labs Ltd.\n          \n          \n            \n             * Copyright (C) 2020 RSK Labs Ltd.", "author": "martinmedina", "createdAt": "2020-03-11T14:13:12Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2018 RSK Labs Ltd.", "originalCommit": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bce21cae39d59d65fdb831ce2c9726354abc6346", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\nindex 7a35ff112..ccf52a14e 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n\n@@ -1,6 +1,6 @@\n /*\n  * This file is part of RskJ\n- * Copyright (C) 2018 RSK Labs Ltd.\n+ * Copyright (C) 2020 RSK Labs Ltd.\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Lesser General Public License as published by\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODUyNw==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r391098527", "bodyText": "Note that with the builder, the default value for unclesHashList is HashUtil.keccak256(RLP.encodeList()) instead of new byte[0].\nI think new byte[0] was incorrect because it does not represent a hash. The new value is a hash and should be used as default for unclesHashList from now on.", "author": "martinmedina", "createdAt": "2020-03-11T16:25:40Z", "path": "rskj-core/src/main/java/org/ethereum/vm/program/Program.java", "diffHunk": "@@ -1367,13 +1365,14 @@ public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contra\n             internalTx.setLocalCallTransaction(this.transaction.isLocalCallTransaction());\n \n             Block executionBlock = blockFactory.newBlock(\n-                    blockFactory.newHeader(\n-                            getPrevHash().getData(), EMPTY_BYTE_ARRAY, getCoinbase().getLast20Bytes(),\n-                            ByteUtils.clone(EMPTY_TRIE_HASH), ByteUtils.clone(EMPTY_TRIE_HASH),\n-                            ByteUtils.clone(EMPTY_TRIE_HASH), EMPTY_BYTE_ARRAY, getDifficulty().getData(),\n-                            getNumber().longValue(), getGasLimit().getData(), 0, getTimestamp().longValue(),\n-                            EMPTY_BYTE_ARRAY, Coin.ZERO, null, null, null, new byte[0], null, 0\n-                    ),\n+                    blockFactory.getBlockHeaderBuilder()", "originalCommit": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MzY0NA==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r391153644", "bodyText": "Also, the default value for the header elements related to merged mining is now new byte[0] instead of null.\nIn all the other production parts of the code is new byte[0] and that is why we adopt it. This change does not seem to affect the behavior of this class.\nThe new value does and should be used as default for all merged mining elements from now on.", "author": "martinmedina", "createdAt": "2020-03-11T17:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5ODUyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExNDcyNQ==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r391114725", "bodyText": "Note that with the builder, the default value for the header elements stateRoot and receiptTrieRoot is EMPTY_TRIE_HASH = keccak256(RLP.encodeElement(EMPTY_BYTE_ARRAY)) instead of new byte[32].\nnew byte[32] was incorrect because it does not represent the desired hash. The new value does and should be used as default for both elements from now on.", "author": "martinmedina", "createdAt": "2020-03-11T16:49:28Z", "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "diffHunk": "@@ -422,14 +418,14 @@ private long getCurrentBestBlockNumber() {\n     private Block createFakePendingBlock(Block best) {\n         // creating fake lightweight calculated block with no hashes calculations\n         return blockFactory.newBlock(\n-                blockFactory.newHeader(\n-                        best.getHash().getBytes(), emptyUncleHashList, new byte[20],\n-                        new byte[32], EMPTY_TRIE_HASH, new byte[32],\n-                        new byte[32], best.getDifficulty().getBytes(), best.getNumber() + 1,\n-                        ByteUtil.longToBytesNoLeadZeroes(Long.MAX_VALUE), 0, best.getTimestamp() + 1,\n-                        new byte[0], Coin.ZERO, new byte[0], new byte[0], new byte[0], new byte[0],\n-                        ByteUtil.bigIntegerToBytes(BigInteger.ZERO), 0\n-                ),\n+                blockFactory.getBlockHeaderBuilder()", "originalCommit": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2Mzk3MA==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r391163970", "bodyText": "Before this builder, logsBloom used to be initialized by default with empty byte arrays of length 0 or 32 which are not valid values. That is why from now on new Bloom().getData() (aka new byte[256]) is used", "author": "martinmedina", "createdAt": "2020-03-11T18:03:49Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2018 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.ethereum.core;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.Coin;\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.util.RLP;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+\n+import static org.ethereum.crypto.HashUtil.EMPTY_TRIE_HASH;\n+\n+public class BlockHeaderBuilder {\n+\n+    private static final byte[] EMPTY_LIST_HASH = HashUtil.keccak256(RLP.encodeList());\n+\n+    private byte[] parentHash;\n+    private byte[] unclesHash;\n+    private RskAddress coinbase;\n+    private byte[] stateRoot;\n+    private byte[] txTrieRoot;\n+    private byte[] receiptTrieRoot;\n+    private byte[] logsBloom;\n+    private BlockDifficulty difficulty;\n+    private long timestamp;\n+    private long number;\n+    private byte[] gasLimit;\n+    private long gasUsed;\n+    private Coin paidFees;\n+\n+    private byte[] extraData;\n+    private byte[] bitcoinMergedMiningHeader;\n+    private byte[] bitcoinMergedMiningMerkleProof;\n+    private byte[] bitcoinMergedMiningCoinbaseTransaction;\n+    private byte[] mergedMiningForkDetectionData;\n+\n+    private Coin minimumGasPrice;\n+    private int uncleCount;\n+\n+    private boolean useRskip92Encoding;\n+    private boolean includeForkDetectionData;\n+\n+    private final ActivationConfig activationConfig;\n+\n+    private boolean createConsensusCompliantHeader;\n+\n+    public BlockHeaderBuilder(ActivationConfig activationConfig) {\n+        this.activationConfig = activationConfig;\n+        createConsensusCompliantHeader = true;\n+    }\n+\n+    public BlockHeaderBuilder setCreateConsensusCompliantHeader(boolean createConsensusCompliantHeader) {\n+        this.createConsensusCompliantHeader = createConsensusCompliantHeader;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setStateRoot(byte[] stateRoot) {\n+        this.stateRoot = copy(stateRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setDifficulty(BlockDifficulty difficulty) {\n+        this.difficulty = difficulty;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setPaidFees(Coin paidFees) {\n+        this.paidFees = paidFees;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setGasUsed(long gasUsed) {\n+        this.gasUsed = gasUsed;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setLogsBloom(byte[] logsBloom) {\n+        this.logsBloom = copy(logsBloom);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningHeader(byte[] bitcoinMergedMiningHeader) {\n+        this.bitcoinMergedMiningHeader = copy(bitcoinMergedMiningHeader);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningMerkleProof(byte[] bitcoinMergedMiningMerkleProof) {\n+        this.bitcoinMergedMiningMerkleProof = copy(bitcoinMergedMiningMerkleProof);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningCoinbaseTransaction(byte[] bitcoinMergedMiningCoinbaseTransaction) {\n+        this.bitcoinMergedMiningCoinbaseTransaction = copy(bitcoinMergedMiningCoinbaseTransaction);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setTxTrieRoot(byte[] txTrieRoot) {\n+        this.txTrieRoot = copy(txTrieRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyTxTrieRoot() {\n+        this.txTrieRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setReceiptTrieRoot(byte[] receiptTrieRoot) {\n+        this.receiptTrieRoot = copy(receiptTrieRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setTimestamp(long timestamp) {\n+        this.timestamp = timestamp;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setNumber(long number) {\n+        this.number = number;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setGasLimit(byte[] gasLimit) {\n+        this.gasLimit = copy(gasLimit);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setExtraData(byte[] extraData) {\n+        this.extraData = copy(extraData);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setMergedMiningForkDetectionData(byte[] mergedMiningForkDetectionData) {\n+        this.mergedMiningForkDetectionData = copy(mergedMiningForkDetectionData);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setMinimumGasPrice(Coin minimumGasPrice) {\n+        this.minimumGasPrice = minimumGasPrice;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUncleCount(int uncleCount) {\n+        this.uncleCount = uncleCount;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUseRskip92Encoding(boolean useRskip92Encoding) {\n+        this.useRskip92Encoding = useRskip92Encoding;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setIncludeForkDetectionData(boolean includeForkDetectionData) {\n+        this.includeForkDetectionData = includeForkDetectionData;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setParentHashFromKeccak256(Keccak256 parentHash) {\n+        this.parentHash = copy(parentHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setParentHash(byte[] parentHash) {\n+        this.parentHash = copy(parentHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyUnclesHash() {\n+        this.unclesHash = EMPTY_LIST_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUnclesHash(byte[] unclesHash) {\n+        this.unclesHash = copy(unclesHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setCoinbase(RskAddress coinbase) {\n+        this.coinbase = coinbase;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setDifficultyFromBytes(@Nullable byte[] data) {\n+        // This is to make it compatible with RLP.parseBlockDifficulty() which was previously\n+        // user (but I think it was wrongly included in the RLP class, because these arguments\n+        // do not come from any RLP parsing).\n+        if (data != null) {\n+            difficulty = new BlockDifficulty(new BigInteger(data));\n+        } else {\n+            difficulty = null;\n+        }\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyMergedMiningForkDetectionData() {\n+        mergedMiningForkDetectionData = new byte[12];\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyExtraData() {\n+        extraData = new byte[]{};\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyLogsBloom() {\n+        logsBloom = copy(new Bloom().getData());\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyStateRoot() {\n+        stateRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyReceiptTrieRoot() {\n+        receiptTrieRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    private void normalize() {\n+        extraData = normalizeValue(extraData, new byte[0]);\n+        bitcoinMergedMiningHeader = normalizeValue(bitcoinMergedMiningHeader, new byte[0]);\n+        bitcoinMergedMiningMerkleProof = normalizeValue(bitcoinMergedMiningMerkleProof, new byte[0]);\n+        bitcoinMergedMiningCoinbaseTransaction = normalizeValue(bitcoinMergedMiningCoinbaseTransaction, new byte[0]);\n+\n+        unclesHash = normalizeValue(unclesHash, EMPTY_LIST_HASH);\n+        coinbase = normalizeValue(coinbase, RskAddress.nullAddress());\n+        stateRoot = normalizeValue(stateRoot, EMPTY_TRIE_HASH);\n+        txTrieRoot = normalizeValue(txTrieRoot, EMPTY_TRIE_HASH);\n+        receiptTrieRoot = normalizeValue(receiptTrieRoot, EMPTY_TRIE_HASH);\n+        logsBloom = normalizeValue(logsBloom, new Bloom().getData());", "originalCommit": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bce21cae39d59d65fdb831ce2c9726354abc6346", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\nindex 7a35ff112..ccf52a14e 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n\n@@ -1,6 +1,6 @@\n /*\n  * This file is part of RskJ\n- * Copyright (C) 2018 RSK Labs Ltd.\n+ * Copyright (C) 2020 RSK Labs Ltd.\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Lesser General Public License as published by\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NjUyNw==", "url": "https://github.com/rsksmart/rskj/pull/1181#discussion_r391166527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    normalize();\n          \n          \n            \n                    initializeWithDefaultValues();", "author": "martinmedina", "createdAt": "2020-03-11T18:08:29Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2018 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.ethereum.core;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.Coin;\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.util.RLP;\n+\n+import javax.annotation.Nullable;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+\n+import static org.ethereum.crypto.HashUtil.EMPTY_TRIE_HASH;\n+\n+public class BlockHeaderBuilder {\n+\n+    private static final byte[] EMPTY_LIST_HASH = HashUtil.keccak256(RLP.encodeList());\n+\n+    private byte[] parentHash;\n+    private byte[] unclesHash;\n+    private RskAddress coinbase;\n+    private byte[] stateRoot;\n+    private byte[] txTrieRoot;\n+    private byte[] receiptTrieRoot;\n+    private byte[] logsBloom;\n+    private BlockDifficulty difficulty;\n+    private long timestamp;\n+    private long number;\n+    private byte[] gasLimit;\n+    private long gasUsed;\n+    private Coin paidFees;\n+\n+    private byte[] extraData;\n+    private byte[] bitcoinMergedMiningHeader;\n+    private byte[] bitcoinMergedMiningMerkleProof;\n+    private byte[] bitcoinMergedMiningCoinbaseTransaction;\n+    private byte[] mergedMiningForkDetectionData;\n+\n+    private Coin minimumGasPrice;\n+    private int uncleCount;\n+\n+    private boolean useRskip92Encoding;\n+    private boolean includeForkDetectionData;\n+\n+    private final ActivationConfig activationConfig;\n+\n+    private boolean createConsensusCompliantHeader;\n+\n+    public BlockHeaderBuilder(ActivationConfig activationConfig) {\n+        this.activationConfig = activationConfig;\n+        createConsensusCompliantHeader = true;\n+    }\n+\n+    public BlockHeaderBuilder setCreateConsensusCompliantHeader(boolean createConsensusCompliantHeader) {\n+        this.createConsensusCompliantHeader = createConsensusCompliantHeader;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setStateRoot(byte[] stateRoot) {\n+        this.stateRoot = copy(stateRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setDifficulty(BlockDifficulty difficulty) {\n+        this.difficulty = difficulty;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setPaidFees(Coin paidFees) {\n+        this.paidFees = paidFees;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setGasUsed(long gasUsed) {\n+        this.gasUsed = gasUsed;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setLogsBloom(byte[] logsBloom) {\n+        this.logsBloom = copy(logsBloom);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningHeader(byte[] bitcoinMergedMiningHeader) {\n+        this.bitcoinMergedMiningHeader = copy(bitcoinMergedMiningHeader);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningMerkleProof(byte[] bitcoinMergedMiningMerkleProof) {\n+        this.bitcoinMergedMiningMerkleProof = copy(bitcoinMergedMiningMerkleProof);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setBitcoinMergedMiningCoinbaseTransaction(byte[] bitcoinMergedMiningCoinbaseTransaction) {\n+        this.bitcoinMergedMiningCoinbaseTransaction = copy(bitcoinMergedMiningCoinbaseTransaction);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setTxTrieRoot(byte[] txTrieRoot) {\n+        this.txTrieRoot = copy(txTrieRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyTxTrieRoot() {\n+        this.txTrieRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setReceiptTrieRoot(byte[] receiptTrieRoot) {\n+        this.receiptTrieRoot = copy(receiptTrieRoot);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setTimestamp(long timestamp) {\n+        this.timestamp = timestamp;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setNumber(long number) {\n+        this.number = number;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setGasLimit(byte[] gasLimit) {\n+        this.gasLimit = copy(gasLimit);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setExtraData(byte[] extraData) {\n+        this.extraData = copy(extraData);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setMergedMiningForkDetectionData(byte[] mergedMiningForkDetectionData) {\n+        this.mergedMiningForkDetectionData = copy(mergedMiningForkDetectionData);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setMinimumGasPrice(Coin minimumGasPrice) {\n+        this.minimumGasPrice = minimumGasPrice;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUncleCount(int uncleCount) {\n+        this.uncleCount = uncleCount;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUseRskip92Encoding(boolean useRskip92Encoding) {\n+        this.useRskip92Encoding = useRskip92Encoding;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setIncludeForkDetectionData(boolean includeForkDetectionData) {\n+        this.includeForkDetectionData = includeForkDetectionData;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setParentHashFromKeccak256(Keccak256 parentHash) {\n+        this.parentHash = copy(parentHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setParentHash(byte[] parentHash) {\n+        this.parentHash = copy(parentHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyUnclesHash() {\n+        this.unclesHash = EMPTY_LIST_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setUnclesHash(byte[] unclesHash) {\n+        this.unclesHash = copy(unclesHash);\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setCoinbase(RskAddress coinbase) {\n+        this.coinbase = coinbase;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setDifficultyFromBytes(@Nullable byte[] data) {\n+        // This is to make it compatible with RLP.parseBlockDifficulty() which was previously\n+        // user (but I think it was wrongly included in the RLP class, because these arguments\n+        // do not come from any RLP parsing).\n+        if (data != null) {\n+            difficulty = new BlockDifficulty(new BigInteger(data));\n+        } else {\n+            difficulty = null;\n+        }\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyMergedMiningForkDetectionData() {\n+        mergedMiningForkDetectionData = new byte[12];\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyExtraData() {\n+        extraData = new byte[]{};\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyLogsBloom() {\n+        logsBloom = copy(new Bloom().getData());\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyStateRoot() {\n+        stateRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    public BlockHeaderBuilder setEmptyReceiptTrieRoot() {\n+        receiptTrieRoot = EMPTY_TRIE_HASH;\n+        return this;\n+    }\n+\n+    private void normalize() {\n+        extraData = normalizeValue(extraData, new byte[0]);\n+        bitcoinMergedMiningHeader = normalizeValue(bitcoinMergedMiningHeader, new byte[0]);\n+        bitcoinMergedMiningMerkleProof = normalizeValue(bitcoinMergedMiningMerkleProof, new byte[0]);\n+        bitcoinMergedMiningCoinbaseTransaction = normalizeValue(bitcoinMergedMiningCoinbaseTransaction, new byte[0]);\n+\n+        unclesHash = normalizeValue(unclesHash, EMPTY_LIST_HASH);\n+        coinbase = normalizeValue(coinbase, RskAddress.nullAddress());\n+        stateRoot = normalizeValue(stateRoot, EMPTY_TRIE_HASH);\n+        txTrieRoot = normalizeValue(txTrieRoot, EMPTY_TRIE_HASH);\n+        receiptTrieRoot = normalizeValue(receiptTrieRoot, EMPTY_TRIE_HASH);\n+        logsBloom = normalizeValue(logsBloom, new Bloom().getData());\n+        paidFees = normalizeValue(paidFees, Coin.ZERO);\n+        minimumGasPrice = normalizeValue(minimumGasPrice, Coin.ZERO);\n+\n+        mergedMiningForkDetectionData = normalizeValue(mergedMiningForkDetectionData, new byte[12]);\n+    }\n+\n+    private <T> T normalizeValue(T value, T defaultValue) {\n+        return value == null ? defaultValue : value;\n+    }\n+\n+    private byte[] copy(Keccak256 hash) {\n+        return copy(hash.getBytes());\n+    }\n+\n+    private byte[] copy(byte[] bytes) {\n+        if (bytes == null) {\n+            return new byte[0];\n+        }\n+\n+        return Arrays.copyOf(bytes, bytes.length);\n+    }\n+\n+    public BlockHeader build() {\n+        // Initial null values in some fields are replaced by empty\n+        // arrays\n+        normalize();", "originalCommit": "217ccf88376ca20d2e0a6bec84ca82e9efe19e53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bce21cae39d59d65fdb831ce2c9726354abc6346", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\nindex 7a35ff112..ccf52a14e 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeaderBuilder.java\n\n@@ -1,6 +1,6 @@\n /*\n  * This file is part of RskJ\n- * Copyright (C) 2018 RSK Labs Ltd.\n+ * Copyright (C) 2020 RSK Labs Ltd.\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Lesser General Public License as published by\n"}}, {"oid": "bce21cae39d59d65fdb831ce2c9726354abc6346", "url": "https://github.com/rsksmart/rskj/commit/bce21cae39d59d65fdb831ce2c9726354abc6346", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-11T18:25:01Z", "type": "forcePushed"}, {"oid": "5964e5e8d1d51ade54693ec581d5f2ea669a1298", "url": "https://github.com/rsksmart/rskj/commit/5964e5e8d1d51ade54693ec581d5f2ea669a1298", "message": "Introduce BlockHeaderBuilder class and remove newHeader construction methods from BlockFactory", "committedDate": "2020-03-12T13:18:20Z", "type": "commit"}, {"oid": "d1c664ce61c06c17be92b3a57d5a3a67f828876a", "url": "https://github.com/rsksmart/rskj/commit/d1c664ce61c06c17be92b3a57d5a3a67f828876a", "message": "Specify parameter index in debug logs", "committedDate": "2020-03-12T13:18:20Z", "type": "commit"}, {"oid": "d1c664ce61c06c17be92b3a57d5a3a67f828876a", "url": "https://github.com/rsksmart/rskj/commit/d1c664ce61c06c17be92b3a57d5a3a67f828876a", "message": "Specify parameter index in debug logs", "committedDate": "2020-03-12T13:18:20Z", "type": "forcePushed"}]}