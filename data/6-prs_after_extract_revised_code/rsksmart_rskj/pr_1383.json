{"pr_number": 1383, "pr_title": "#1370: Introduce TransactionBuilder", "pr_createdAt": "2020-12-03T01:49:12Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1383", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDg0Mw==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r536184843", "bodyText": "Why did you change the byte array for RLPList? whats the rationale?\nAnd why didn't you change it in subclasses?", "author": "patogallaiovlabs", "createdAt": "2020-12-04T15:34:33Z", "path": "rskj-core/src/main/java/org/ethereum/core/Transaction.java", "diffHunk": "@@ -101,20 +100,16 @@\n     private Keccak256 hash;\n     private Keccak256 rawHash;\n \n-    protected Transaction(byte[] rawData) {\n-        RLPList transaction = RLP.decodeList(rawData);\n-\n+    protected Transaction(RLPList transaction) {", "originalCommit": "2e870377bb70ed474abae720caeabae75ea39740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTMyMA==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r536229320", "bodyText": "@patogallaiovlabs I've tried to reduce amount of byte[] arrays passed around as arguments, which brings a stronger typing.\nIt might be unnecessary here, as subclasses seem to be about of scope of this task.", "author": "andreoss", "createdAt": "2020-12-04T16:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4NDg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/Transaction.java b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\nindex b43e85d07..4a24348a6 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n\n@@ -100,16 +101,20 @@ public class Transaction {\n     private Keccak256 hash;\n     private Keccak256 rawHash;\n \n-    protected Transaction(RLPList transaction) {\n+    protected Transaction(byte[] rawData) {\n+        RLPList transaction = RLP.decodeList(rawData);\n+\n         if (transaction.size() != 9) {\n             throw new IllegalArgumentException(\"A transaction must have exactly 9 elements\");\n         }\n+\n         this.nonce = transaction.get(0).getRLPData();\n         this.gasPrice = RLP.parseCoinNonNullZero(transaction.get(1).getRLPData());\n         this.gasLimit = transaction.get(2).getRLPData();\n         this.receiveAddress = RLP.parseRskAddress(transaction.get(3).getRLPData());\n         this.value = RLP.parseCoinNullZero(transaction.get(4).getRLPData());\n         this.data = transaction.get(5).getRLPData();\n+\n         // only parse signature in case tx is signed\n         byte[] vData = transaction.get(6).getRLPData();\n         if (vData != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4OTg0OA==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r540889848", "bodyText": "Could we clone these fields in the innermost constructor?", "author": "ajlopezrsk", "createdAt": "2020-12-11T11:44:56Z", "path": "rskj-core/src/main/java/org/ethereum/core/Transaction.java", "diffHunk": "@@ -137,56 +132,38 @@ protected Transaction(byte[] rawData) {\n      * or simple send tx\n      * [ nonce, gasPrice, gasLimit, receiveAddress, value, data, signature(v, r, s) ]\n      */\n-    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n-        this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n-    }\n-\n-    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data, byte[] r, byte[] s, byte v) {\n+    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n         this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n-\n-        this.signature = ECDSASignature.fromComponents(r, s, v);\n     }\n \n-    public Transaction(long nonce, long gasPrice, long gas, String to, long value, byte[] data, byte chainId) {\n-        this(BigInteger.valueOf(nonce).toByteArray(), BigInteger.valueOf(gasPrice).toByteArray(),\n-                BigInteger.valueOf(gas).toByteArray(), Hex.decode(to), BigInteger.valueOf(value).toByteArray(),\n-                data, chainId);\n-    }\n-\n-    public Transaction(BigInteger nonce, BigInteger gasPrice, BigInteger gas, String to, BigInteger value, byte[] data,\n+    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n                        byte chainId) {\n-        this(nonce.toByteArray(), gasPrice.toByteArray(), gas.toByteArray(), Hex.decode(to), value.toByteArray(), data,\n-                chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte chainId) {\n-        this(to, amount, nonce, gasPrice, gasLimit, (byte[]) null, chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String data, byte chainId) {\n-        this(to, amount, nonce, gasPrice, gasLimit, data == null ? null : Hex.decode(data), chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte[] decodedData, byte chainId) {\n-        this(BigIntegers.asUnsignedByteArray(nonce),\n-                gasPrice.toByteArray(),\n-                BigIntegers.asUnsignedByteArray(gasLimit),\n-                to != null ? Hex.decode(to) : null,\n-                BigIntegers.asUnsignedByteArray(amount),\n-                decodedData,\n-                chainId);\n+        this(\n+                ByteUtil.cloneBytes(nonce),", "originalCommit": "0d20256ae7610113845c21189930cc2438094e25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxNTgxMg==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r541315812", "bodyText": "@ajlopezrsk Done", "author": "andreoss", "createdAt": "2020-12-11T21:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4OTg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/Transaction.java b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\nindex b43e85d07..4a24348a6 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n\n@@ -132,11 +137,47 @@ public class Transaction {\n      * or simple send tx\n      * [ nonce, gasPrice, gasLimit, receiveAddress, value, data, signature(v, r, s) ]\n      */\n-    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n+        this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n+    }\n+\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data, byte[] r, byte[] s, byte v) {\n         this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n+\n+        this.signature = ECDSASignature.fromComponents(r, s, v);\n+    }\n+\n+    public Transaction(long nonce, long gasPrice, long gas, String to, long value, byte[] data, byte chainId) {\n+        this(BigInteger.valueOf(nonce).toByteArray(), BigInteger.valueOf(gasPrice).toByteArray(),\n+                BigInteger.valueOf(gas).toByteArray(), Hex.decode(to), BigInteger.valueOf(value).toByteArray(),\n+                data, chainId);\n+    }\n+\n+    public Transaction(BigInteger nonce, BigInteger gasPrice, BigInteger gas, String to, BigInteger value, byte[] data,\n+                       byte chainId) {\n+        this(nonce.toByteArray(), gasPrice.toByteArray(), gas.toByteArray(), Hex.decode(to), value.toByteArray(), data,\n+                chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte chainId) {\n+        this(to, amount, nonce, gasPrice, gasLimit, (byte[]) null, chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String data, byte chainId) {\n+        this(to, amount, nonce, gasPrice, gasLimit, data == null ? null : Hex.decode(data), chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte[] decodedData, byte chainId) {\n+        this(BigIntegers.asUnsignedByteArray(nonce),\n+                gasPrice.toByteArray(),\n+                BigIntegers.asUnsignedByteArray(gasLimit),\n+                to != null ? Hex.decode(to) : null,\n+                BigIntegers.asUnsignedByteArray(amount),\n+                decodedData,\n+                chainId);\n     }\n \n-    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n                        byte chainId) {\n         this(\n                 ByteUtil.cloneBytes(nonce),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDEwNg==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r540890106", "bodyText": "Any suggested explicit visibility?", "author": "ajlopezrsk", "createdAt": "2020-12-11T11:45:26Z", "path": "rskj-core/src/main/java/org/ethereum/core/Transaction.java", "diffHunk": "@@ -137,56 +132,38 @@ protected Transaction(byte[] rawData) {\n      * or simple send tx\n      * [ nonce, gasPrice, gasLimit, receiveAddress, value, data, signature(v, r, s) ]\n      */\n-    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n-        this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n-    }\n-\n-    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data, byte[] r, byte[] s, byte v) {\n+    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n         this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n-\n-        this.signature = ECDSASignature.fromComponents(r, s, v);\n     }\n \n-    public Transaction(long nonce, long gasPrice, long gas, String to, long value, byte[] data, byte chainId) {\n-        this(BigInteger.valueOf(nonce).toByteArray(), BigInteger.valueOf(gasPrice).toByteArray(),\n-                BigInteger.valueOf(gas).toByteArray(), Hex.decode(to), BigInteger.valueOf(value).toByteArray(),\n-                data, chainId);\n-    }\n-\n-    public Transaction(BigInteger nonce, BigInteger gasPrice, BigInteger gas, String to, BigInteger value, byte[] data,\n+    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n                        byte chainId) {\n-        this(nonce.toByteArray(), gasPrice.toByteArray(), gas.toByteArray(), Hex.decode(to), value.toByteArray(), data,\n-                chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte chainId) {\n-        this(to, amount, nonce, gasPrice, gasLimit, (byte[]) null, chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String data, byte chainId) {\n-        this(to, amount, nonce, gasPrice, gasLimit, data == null ? null : Hex.decode(data), chainId);\n-    }\n-\n-    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte[] decodedData, byte chainId) {\n-        this(BigIntegers.asUnsignedByteArray(nonce),\n-                gasPrice.toByteArray(),\n-                BigIntegers.asUnsignedByteArray(gasLimit),\n-                to != null ? Hex.decode(to) : null,\n-                BigIntegers.asUnsignedByteArray(amount),\n-                decodedData,\n-                chainId);\n+        this(\n+                ByteUtil.cloneBytes(nonce),\n+                RLP.parseCoinNonNullZero(ByteUtil.cloneBytes(gasPriceRaw)),\n+                ByteUtil.cloneBytes(gasLimit),\n+                RLP.parseRskAddress(ByteUtil.cloneBytes(receiveAddress)),\n+                RLP.parseCoinNullZero(ByteUtil.cloneBytes(valueRaw)),\n+                ByteUtil.cloneBytes(data),\n+                chainId,\n+                false\n+        );\n+    }\n+\n+    Transaction(byte[] nonce, Coin gasPriceRaw, byte[] gasLimit, RskAddress receiveAddress, Coin valueRaw, byte[] data,", "originalCommit": "0d20256ae7610113845c21189930cc2438094e25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxNDYxNg==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r541314616", "bodyText": "@ajlopezrsk Replaced implicit with protected.", "author": "andreoss", "createdAt": "2020-12-11T21:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/Transaction.java b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\nindex b43e85d07..4a24348a6 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/Transaction.java\n\n@@ -132,11 +137,47 @@ public class Transaction {\n      * or simple send tx\n      * [ nonce, gasPrice, gasLimit, receiveAddress, value, data, signature(v, r, s) ]\n      */\n-    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data) {\n+        this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n+    }\n+\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] value, byte[] data, byte[] r, byte[] s, byte v) {\n         this(nonce, gasPriceRaw, gasLimit, receiveAddress, value, data, (byte) 0);\n+\n+        this.signature = ECDSASignature.fromComponents(r, s, v);\n+    }\n+\n+    public Transaction(long nonce, long gasPrice, long gas, String to, long value, byte[] data, byte chainId) {\n+        this(BigInteger.valueOf(nonce).toByteArray(), BigInteger.valueOf(gasPrice).toByteArray(),\n+                BigInteger.valueOf(gas).toByteArray(), Hex.decode(to), BigInteger.valueOf(value).toByteArray(),\n+                data, chainId);\n+    }\n+\n+    public Transaction(BigInteger nonce, BigInteger gasPrice, BigInteger gas, String to, BigInteger value, byte[] data,\n+                       byte chainId) {\n+        this(nonce.toByteArray(), gasPrice.toByteArray(), gas.toByteArray(), Hex.decode(to), value.toByteArray(), data,\n+                chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte chainId) {\n+        this(to, amount, nonce, gasPrice, gasLimit, (byte[]) null, chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String data, byte chainId) {\n+        this(to, amount, nonce, gasPrice, gasLimit, data == null ? null : Hex.decode(data), chainId);\n+    }\n+\n+    public Transaction(String to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, byte[] decodedData, byte chainId) {\n+        this(BigIntegers.asUnsignedByteArray(nonce),\n+                gasPrice.toByteArray(),\n+                BigIntegers.asUnsignedByteArray(gasLimit),\n+                to != null ? Hex.decode(to) : null,\n+                BigIntegers.asUnsignedByteArray(amount),\n+                decodedData,\n+                chainId);\n     }\n \n-    protected Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n+    public Transaction(byte[] nonce, byte[] gasPriceRaw, byte[] gasLimit, byte[] receiveAddress, byte[] valueRaw, byte[] data,\n                        byte chainId) {\n         this(\n                 ByteUtil.cloneBytes(nonce),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDg0NA==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r540890844", "bodyText": "Maybe, out of scope, but it could be nice to have RLP logic decoupled from Transaction class, at least in this constructor", "author": "ajlopezrsk", "createdAt": "2020-12-11T11:46:47Z", "path": "rskj-core/src/main/java/co/rsk/remasc/RemascTransaction.java", "diffHunk": "@@ -53,7 +54,7 @@ public String toJsonString() {\n     };\n \n     public RemascTransaction(byte[] rawData) {\n-        super(rawData);\n+        super(RLP.decodeList(rawData));", "originalCommit": "0d20256ae7610113845c21189930cc2438094e25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMxNTUzNg==", "url": "https://github.com/rsksmart/rskj/pull/1383#discussion_r541315536", "bodyText": "@ajlopezrsk Now RLP logic is handled by the base class itself.", "author": "andreoss", "createdAt": "2020-12-11T21:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/remasc/RemascTransaction.java b/rskj-core/src/main/java/co/rsk/remasc/RemascTransaction.java\nindex 9b2719bca..b38454711 100644\n--- a/rskj-core/src/main/java/co/rsk/remasc/RemascTransaction.java\n+++ b/rskj-core/src/main/java/co/rsk/remasc/RemascTransaction.java\n\n@@ -54,7 +53,7 @@ public class RemascTransaction extends Transaction {\n     };\n \n     public RemascTransaction(byte[] rawData) {\n-        super(RLP.decodeList(rawData));\n+        super(rawData);\n     }\n \n     public RemascTransaction(long blockNumber) {\n"}}, {"oid": "9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "url": "https://github.com/rsksmart/rskj/commit/9b50bccb2dc53eca6f498104c55a9dfa3072b0c4", "message": "(#1370) Add primary constructor", "committedDate": "2020-12-22T23:10:17Z", "type": "commit"}, {"oid": "2b372b6d610e5cbaa461d08b2ddc773a6b06e697", "url": "https://github.com/rsksmart/rskj/commit/2b372b6d610e5cbaa461d08b2ddc773a6b06e697", "message": "(#1370) Make field final", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "9d2a361c772c2760372a25f2169ab77563fa73c5", "url": "https://github.com/rsksmart/rskj/commit/9d2a361c772c2760372a25f2169ab77563fa73c5", "message": "(#1370) Add TransactionBuilder", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "a0b1ebf8146772ee1534bbbf306cabc33f861389", "url": "https://github.com/rsksmart/rskj/commit/a0b1ebf8146772ee1534bbbf306cabc33f861389", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "1a97105370c0ab818b7e8c751a596f438c85ca25", "url": "https://github.com/rsksmart/rskj/commit/1a97105370c0ab818b7e8c751a596f438c85ca25", "message": "(#1370) Clone byte arrays & avoid null pointers", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "356a0d417f044ec023295b95dcabcc561fa53cf8", "url": "https://github.com/rsksmart/rskj/commit/356a0d417f044ec023295b95dcabcc561fa53cf8", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "e86bc0d7ad291fcc7babea73ccac441f8f3f8326", "url": "https://github.com/rsksmart/rskj/commit/e86bc0d7ad291fcc7babea73ccac441f8f3f8326", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "ca490da1e531f8b3a28c527a82a74bea162200da", "url": "https://github.com/rsksmart/rskj/commit/ca490da1e531f8b3a28c527a82a74bea162200da", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:20Z", "type": "commit"}, {"oid": "bd89941665959f8d793dd8491312df8920af4f6d", "url": "https://github.com/rsksmart/rskj/commit/bd89941665959f8d793dd8491312df8920af4f6d", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "b9524ea607681592c4e6ea3c495843ef87fcea67", "url": "https://github.com/rsksmart/rskj/commit/b9524ea607681592c4e6ea3c495843ef87fcea67", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "246c256c409ff76d2007b86721117a340fadcda7", "url": "https://github.com/rsksmart/rskj/commit/246c256c409ff76d2007b86721117a340fadcda7", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "6d5c49023acf8758cba0634b348ab2d692868256", "url": "https://github.com/rsksmart/rskj/commit/6d5c49023acf8758cba0634b348ab2d692868256", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "3399c76a0f4a0c23574ed4444fb9f6aafa8f2eec", "url": "https://github.com/rsksmart/rskj/commit/3399c76a0f4a0c23574ed4444fb9f6aafa8f2eec", "message": "(#1370) Use Builder in tests", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "83ae4bd976e8c89c82778475e2cde8afc7a6bb2c", "url": "https://github.com/rsksmart/rskj/commit/83ae4bd976e8c89c82778475e2cde8afc7a6bb2c", "message": "(#1370) Use Builder in tests", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "e40849d89f873019c16d51d5c1a86d2eec3542c8", "url": "https://github.com/rsksmart/rskj/commit/e40849d89f873019c16d51d5c1a86d2eec3542c8", "message": "(#1370) Use Coin as argument", "committedDate": "2020-12-22T23:10:21Z", "type": "commit"}, {"oid": "096a54342ffab38f1e4718d0957dccae164bc6ce", "url": "https://github.com/rsksmart/rskj/commit/096a54342ffab38f1e4718d0957dccae164bc6ce", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "6f6637028a3291a84ca1d78ab886fdf06e6c4832", "url": "https://github.com/rsksmart/rskj/commit/6f6637028a3291a84ca1d78ab886fdf06e6c4832", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "2d21ba71a0e1a59c2fa69bc9ac0818a128b46361", "url": "https://github.com/rsksmart/rskj/commit/2d21ba71a0e1a59c2fa69bc9ac0818a128b46361", "message": "(#1370) Fix NPE", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "595196ed4ba611aaefd5deabef3d887bd714b662", "url": "https://github.com/rsksmart/rskj/commit/595196ed4ba611aaefd5deabef3d887bd714b662", "message": "(#1370) Set default for value, gasPrice & gasLimit", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "a00d86ce3447e15a6196c3fee33996a42ebb2c63", "url": "https://github.com/rsksmart/rskj/commit/a00d86ce3447e15a6196c3fee33996a42ebb2c63", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "7d60bdc073c59edb549d64829aaf1eb1c9c84ebf", "url": "https://github.com/rsksmart/rskj/commit/7d60bdc073c59edb549d64829aaf1eb1c9c84ebf", "message": "(#1370) Remove unnecessary method call", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "c2c77ca011828cb4d4638f9759984de3909487d9", "url": "https://github.com/rsksmart/rskj/commit/c2c77ca011828cb4d4638f9759984de3909487d9", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "98c1db0af3ca21311e3e810eb774f8606d4e2a7d", "url": "https://github.com/rsksmart/rskj/commit/98c1db0af3ca21311e3e810eb774f8606d4e2a7d", "message": "(#1370) Use Builder in tests", "committedDate": "2020-12-22T23:10:22Z", "type": "commit"}, {"oid": "607bbe00292ca349560015228784daecf2239cbc", "url": "https://github.com/rsksmart/rskj/commit/607bbe00292ca349560015228784daecf2239cbc", "message": "(#1370) Remove unnecessary builder steps", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "d91ac8501661b2854f09ff7bb148e650528b6e58", "url": "https://github.com/rsksmart/rskj/commit/d91ac8501661b2854f09ff7bb148e650528b6e58", "message": "(#1370) Add static factory method for Builder", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "394a1637978134eb839b74ed41e764961d88e3d0", "url": "https://github.com/rsksmart/rskj/commit/394a1637978134eb839b74ed41e764961d88e3d0", "message": "(#1370) Use Builder where applicable", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "896e690708dedf9ee0455c5b7b9a5db317da03d3", "url": "https://github.com/rsksmart/rskj/commit/896e690708dedf9ee0455c5b7b9a5db317da03d3", "message": "(#1370) Rearrange", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "9d2fa6d8e9e767e2b76ef162bab1e43a9fd4730b", "url": "https://github.com/rsksmart/rskj/commit/9d2fa6d8e9e767e2b76ef162bab1e43a9fd4730b", "message": "(#1370) Use Builder in test", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "a5b8c2524d09ec91302b88e8c71dbb8d4608833e", "url": "https://github.com/rsksmart/rskj/commit/a5b8c2524d09ec91302b88e8c71dbb8d4608833e", "message": "(#1370) Add method", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "872f8af1915f882f6548978ad979ed273a5db0ee", "url": "https://github.com/rsksmart/rskj/commit/872f8af1915f882f6548978ad979ed273a5db0ee", "message": "(#1370) Remove redundant constructors", "committedDate": "2020-12-22T23:10:23Z", "type": "commit"}, {"oid": "39d4e6b207960d5fb2f17ca8a28e067227465fe1", "url": "https://github.com/rsksmart/rskj/commit/39d4e6b207960d5fb2f17ca8a28e067227465fe1", "message": "(#1370) Organize imports", "committedDate": "2020-12-22T23:10:24Z", "type": "commit"}, {"oid": "f5fcce2c389445c1de1a7c96a389dcf29e58e75f", "url": "https://github.com/rsksmart/rskj/commit/f5fcce2c389445c1de1a7c96a389dcf29e58e75f", "message": "(#1370) Prefer `byte[]` ctors in order to decouple from RLP", "committedDate": "2020-12-22T23:10:24Z", "type": "commit"}, {"oid": "cfd05721f782e5102d344cada0be3dc91e4aac3e", "url": "https://github.com/rsksmart/rskj/commit/cfd05721f782e5102d344cada0be3dc91e4aac3e", "message": "(#1370) Move defensive copying to the furthest ctor", "committedDate": "2020-12-22T23:10:24Z", "type": "commit"}, {"oid": "cfd05721f782e5102d344cada0be3dc91e4aac3e", "url": "https://github.com/rsksmart/rskj/commit/cfd05721f782e5102d344cada0be3dc91e4aac3e", "message": "(#1370) Move defensive copying to the furthest ctor", "committedDate": "2020-12-22T23:10:24Z", "type": "forcePushed"}]}