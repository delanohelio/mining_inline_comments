{"pr_number": 1266, "pr_title": "Resend transactions fix and refactor", "pr_createdAt": "2020-07-07T00:13:31Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1266", "timeline": [{"oid": "68e21541e332adc5b53a51bbf1f0040b244f54b7", "url": "https://github.com/rsksmart/rskj/commit/68e21541e332adc5b53a51bbf1f0040b244f54b7", "message": "transactions should only be added to txPool via txGateway", "committedDate": "2020-07-07T00:04:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTI0OQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451015249", "bodyText": "why the suffix \"From\"?", "author": "patogallaiovlabs", "createdAt": "2020-07-07T17:06:01Z", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {\n-        @Override\n-        public void onPendingTransactionsReceived(List<Transaction> txs) {\n-            for (Transaction tx : txs) {\n-                Keccak256 txHash = tx.getHash();\n-                Set<NodeID> nodesToSkip = new HashSet<>(transactionNodeInformation.getNodesByTransaction(txHash));\n-                Set<NodeID> newNodes = channelManager.broadcastTransaction(tx, nodesToSkip);\n-\n-                newNodes.forEach(nodeID -> transactionNodeInformation.addTransactionToNode(txHash, nodeID));\n-            }\n+    public TransactionPoolAddResult receiveTransactionFrom(Transaction transaction) {", "originalCommit": "56d11ba2e971752d5b43d46e594338f7f06df35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2MjAwNQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451262005", "bodyText": "removed \"from\" suffix", "author": "fedejinich", "createdAt": "2020-07-08T03:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\nindex f32b1d17c..e303f1f6c 100644\n--- a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n+++ b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n\n@@ -48,9 +48,9 @@ public class TransactionGateway {\n         }\n     }\n \n-    public TransactionPoolAddResult receiveTransactionFrom(Transaction transaction) {\n+    public TransactionPoolAddResult receiveTransaction(Transaction transaction) {\n         TransactionPoolAddResult result  = transactionPool.addTransaction(transaction);\n-        if(!result.getTransactionsAdded().isEmpty()) {\n+        if(result.transactionsWereAdded()) {\n             channelManager.broadcastTransactions(result.getTransactionsAdded(), Collections.emptySet());\n         }\n         return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTU0NA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451019544", "bodyText": "This could cause a NPE in the check \"if(!result.getTransactionsAdded().isEmpty()) {\" L53 TransactionGateway.", "author": "patogallaiovlabs", "createdAt": "2020-07-07T17:13:33Z", "path": "rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java", "diffHunk": "@@ -42,11 +48,15 @@ public void ifTransactionWasNotAdded(Consumer<String> errorConsumer) {\n         }\n     }\n \n-    public static TransactionPoolAddResult ok() {\n-        return new TransactionPoolAddResult(true, null);\n+    public static TransactionPoolAddResult ok(Transaction transaction) {\n+        return new TransactionPoolAddResult(true, null, Collections.singletonList(transaction));\n     }\n \n     public static TransactionPoolAddResult withError(String errorMessage) {\n-        return new TransactionPoolAddResult(false, errorMessage);\n+        return new TransactionPoolAddResult(false, errorMessage, null);", "originalCommit": "56d11ba2e971752d5b43d46e594338f7f06df35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODM5OQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451258399", "bodyText": "fixed", "author": "fedejinich", "createdAt": "2020-07-08T03:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java b/rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java\nindex e3ba6dc6d..5f0296352 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java\n\n@@ -18,42 +18,38 @@\n \n package org.ethereum.core;\n \n-import java.lang.reflect.Array;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.function.Consumer;\n \n public class TransactionPoolAddResult {\n-    private final boolean transactionWasAdded;\n     private final String errorMessage;\n     private final List<Transaction> transactionsAdded;\n \n-    private TransactionPoolAddResult(boolean transactionWasAdded, String errorMessage, List<Transaction> transactionsAdded) {\n-        this.transactionWasAdded = transactionWasAdded;\n+    private TransactionPoolAddResult(String errorMessage, List<Transaction> transactionsAdded) {\n         this.errorMessage = errorMessage;\n-        this.transactionsAdded = transactionsAdded;\n+        this.transactionsAdded = Collections.unmodifiableList(transactionsAdded);\n     }\n \n-    public boolean transactionWasAdded() {\n-        return transactionWasAdded;\n+    public boolean transactionsWereAdded() {\n+        return transactionsAdded != null && !transactionsAdded.isEmpty();\n     }\n \n     /**\n      * This is mainly used to throw exceptions on the RPC avoiding the use of getters\n      */\n     public void ifTransactionWasNotAdded(Consumer<String> errorConsumer) {\n-        if (!transactionWasAdded) {\n+        if (!transactionsWereAdded()) {\n             errorConsumer.accept(errorMessage);\n         }\n     }\n \n     public static TransactionPoolAddResult ok(Transaction transaction) {\n-        return new TransactionPoolAddResult(true, null, Collections.singletonList(transaction));\n+        return new TransactionPoolAddResult(null, Collections.singletonList(transaction));\n     }\n \n     public static TransactionPoolAddResult withError(String errorMessage) {\n-        return new TransactionPoolAddResult(false, errorMessage, null);\n+        return new TransactionPoolAddResult(errorMessage, Collections.emptyList());\n     }\n \n     public List<Transaction> getTransactionsAdded() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNzA2MA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451027060", "bodyText": "Be careful with the use of NodeID... most of the impl returns a copy of those. So, i wonder if it is actually cheaper to return the Node instead of NodeID.", "author": "patogallaiovlabs", "createdAt": "2020-07-07T17:26:17Z", "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java", "diffHunk": "@@ -78,4 +78,6 @@\n     Collection<Peer> getActivePeers();\n \n     boolean isAddressBlockAvailable(InetAddress address);\n+\n+    Set<NodeID> broadcastTransactions(@Nonnull List<Transaction> transactions, @Nonnull Set<NodeID> nodeID);", "originalCommit": "56d11ba2e971752d5b43d46e594338f7f06df35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTMxMg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451259312", "bodyText": "didn't get that. do you think it's worth it? this is just a reuse of broadcastTransaction which has been there before this PR", "author": "fedejinich", "createdAt": "2020-07-08T03:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNzA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java b/rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java\nindex 8a86ee72a..36ff08881 100644\n--- a/rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java\n+++ b/rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java\n\n@@ -80,4 +82,8 @@ public interface ChannelManager extends InternalService {\n     boolean isAddressBlockAvailable(InetAddress address);\n \n     Set<NodeID> broadcastTransactions(@Nonnull List<Transaction> transactions, @Nonnull Set<NodeID> nodeID);\n+\n+    @VisibleForTesting\n+    void setActivePeers(Map<NodeID, Channel> newActivePeers);\n+\n }\n"}}, {"oid": "30a132272a7d799d0b5bd2e8d6feebcbcd9e1877", "url": "https://github.com/rsksmart/rskj/commit/30a132272a7d799d0b5bd2e8d6feebcbcd9e1877", "message": "removed comments", "committedDate": "2020-07-07T18:10:01Z", "type": "forcePushed"}, {"oid": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "url": "https://github.com/rsksmart/rskj/commit/a72bb395745ad7be2c544234cb2dc933312ea9a2", "message": "transactions should only be added to TxPool from outside world via TxGateway", "committedDate": "2020-07-13T19:49:01Z", "type": "forcePushed"}, {"oid": "923fd248b5d5b8a1166f74b3a12049235120a394", "url": "https://github.com/rsksmart/rskj/commit/923fd248b5d5b8a1166f74b3a12049235120a394", "message": "removing TransactionNodeInformation", "committedDate": "2020-08-03T17:53:49Z", "type": "commit"}, {"oid": "16af7e4fd7227ab61772705bb22a253a6baa1062", "url": "https://github.com/rsksmart/rskj/commit/16af7e4fd7227ab61772705bb22a253a6baa1062", "message": "transactions should only be added to TxPool from outside world via TxGateway", "committedDate": "2020-08-03T17:58:17Z", "type": "commit"}, {"oid": "ce563769d0208ef2f1c89d64b70e2f232ddd553f", "url": "https://github.com/rsksmart/rskj/commit/ce563769d0208ef2f1c89d64b70e2f232ddd553f", "message": "TransactionGateway only broadcasts pending transactions", "committedDate": "2020-08-03T17:58:18Z", "type": "commit"}, {"oid": "68d88d1f76fd54bede542769f6acc64f0f8dc728", "url": "https://github.com/rsksmart/rskj/commit/68d88d1f76fd54bede542769f6acc64f0f8dc728", "message": "prevent transaction messages from beeing added to receivedMessage cache: allow resendTransactions", "committedDate": "2020-08-03T19:14:27Z", "type": "forcePushed"}, {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "url": "https://github.com/rsksmart/rskj/commit/83de8af9e081bbe8ad4b08db629a2662ed261af1", "message": "prevent transaction messages from beeing added to receivedMessage cache: allow resendTransactions", "committedDate": "2020-08-04T15:00:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDU2NA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284564", "bodyText": "You should remove this if, it is confusing, you already asserted it was false the line above", "author": "nicops", "createdAt": "2020-08-04T19:35:42Z", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -512,8 +514,10 @@ public void addTwiceAndGetQueuedTransaction() {\n         transactionPool.addTransaction(tx);\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"queued transaction with same hash already exists\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "originalCommit": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjE3MA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366170", "bodyText": "removed unnecesary if", "author": "fedejinich", "createdAt": "2020-08-04T22:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "12839722581405c1d3446298a32e880c172b0481", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\nindex 6e221aa49..6e4edb9d0 100644\n--- a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n+++ b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n\n@@ -515,9 +514,7 @@ public class TransactionPoolImplTest {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n         Assert.assertFalse(result.transactionsWereAdded());\n-        if(!result.transactionsWereAdded()) {\n-            Assert.assertEquals(\"queued transaction with same hash already exists\", result.getErrorMessage());\n-        }\n+        Assert.assertEquals(\"queued transaction with same hash already exists\", result.getErrorMessage());\n \n         List<Transaction> transactions = transactionPool.getQueuedTransactions();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDYzOA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284638", "bodyText": "ditto", "author": "nicops", "createdAt": "2020-08-04T19:35:49Z", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -557,8 +561,10 @@ public void checkTxWithSameNonceIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx2);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"gas price not enough to bump transaction\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "originalCommit": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjMzNQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366335", "bodyText": "removed unnecessary if", "author": "fedejinich", "createdAt": "2020-08-04T22:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "12839722581405c1d3446298a32e880c172b0481", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\nindex 6e221aa49..6e4edb9d0 100644\n--- a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n+++ b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n\n@@ -562,9 +559,7 @@ public class TransactionPoolImplTest {\n         TransactionPoolAddResult result = transactionPool.addTransaction(tx2);\n \n         Assert.assertFalse(result.transactionsWereAdded());\n-        if(!result.transactionsWereAdded()) {\n-            Assert.assertEquals(\"gas price not enough to bump transaction\", result.getErrorMessage());\n-        }\n+        Assert.assertEquals(\"gas price not enough to bump transaction\", result.getErrorMessage());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDc1Mg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284752", "bodyText": "ditto", "author": "nicops", "createdAt": "2020-08-04T19:36:02Z", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -583,8 +589,10 @@ public void checkTxWithHighGasLimitIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "originalCommit": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjQwNw==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366407", "bodyText": "removed unnecessary if", "author": "fedejinich", "createdAt": "2020-08-04T22:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "12839722581405c1d3446298a32e880c172b0481", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\nindex 6e221aa49..6e4edb9d0 100644\n--- a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n+++ b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n\n@@ -590,9 +585,7 @@ public class TransactionPoolImplTest {\n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n \n         Assert.assertFalse(result.transactionsWereAdded());\n-        if(!result.transactionsWereAdded()) {\n-            Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", result.getErrorMessage());\n-        }\n+        Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", result.getErrorMessage());\n \n         List<Transaction> pending = transactionPool.getPendingTransactions();\n         Assert.assertTrue(pending.isEmpty());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465286136", "bodyText": "I would make more assertions here about the return value of each addTransaction. Check that the first one returns ok queued with tx2,  the latter one should add ok pending with the list of the two tx in the right order (first tx1, then tx2).", "author": "nicops", "createdAt": "2020-08-04T19:38:47Z", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "originalCommit": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Njc2NQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465286765", "bodyText": "the test below (addTwoTransactionsOutOfOrderInNonceUsingAddTransactions), you didn't modify it on this PR, but should have assertions done to the return value as well", "author": "nicops", "createdAt": "2020-08-04T19:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODExNQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465348115", "bodyText": "also this addTransaction only retrieves an internal TransactionPoolAddResult instead of returning internal result+successors (successors are also in pending state now)", "author": "fedejinich", "createdAt": "2020-08-04T21:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODM3MA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465348370", "bodyText": "I'll raise another issue to refactor those two methods into one", "author": "fedejinich", "createdAt": "2020-08-04T21:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzAwNQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465373005", "bodyText": "#1286", "author": "fedejinich", "createdAt": "2020-08-04T22:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDA0Mw==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465724043", "bodyText": "\ud83d\udc4c \ud83d\udc4c \ud83d\udc4c", "author": "nicops", "createdAt": "2020-08-05T13:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "f6216e6df378c957096921d8450c505c0ef4819c", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\nindex 6e221aa49..441f3890c 100644\n--- a/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n+++ b/rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java\n\n@@ -818,39 +813,54 @@ public class TransactionPoolImplTest {\n     }\n \n     @Test\n-    public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n+    public void addTransaction_addTwoTransactionsUnsorted_ResultWithPendingTransactionsSortedByNonce() {\n         Coin balance = Coin.valueOf(1000000);\n         createTestAccounts(2, balance);\n \n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());\n+        TransactionPoolAddResult result1 = transactionPool.addTransaction(tx2);\n \n-        Assert.assertTrue(transactionPool.getPendingTransactions().stream().anyMatch(tx -> tx.getHash().equals(tx2.getHash())));\n-        Assert.assertTrue(transactionPool.getPendingTransactions().stream().anyMatch(tx -> tx.getHash().equals(tx1.getHash())));\n+        Assert.assertTrue(result1.queuedTransactionsWereAdded());\n+        Assert.assertTrue(!result1.pendingTransactionsWereAdded());\n+        Assert.assertEquals(1, result1.getQueuedTransactionsAdded().size());\n+        Assert.assertEquals(result1.getQueuedTransactionsAdded().get(0), tx2);\n+        Assert.assertEquals(1, transactionPool.getQueuedTransactions().size());\n+        Assert.assertEquals(tx2, transactionPool.getQueuedTransactions().get(0));\n+        Assert.assertEquals(0, transactionPool.getPendingTransactions().size());\n+        Assert.assertTrue(signatureCache.containsTx(tx2));\n+\n+        TransactionPoolAddResult result2 = transactionPool.addTransaction(tx1);\n+\n+        Assert.assertTrue(!result2.queuedTransactionsWereAdded());\n+        Assert.assertTrue(result2.pendingTransactionsWereAdded());\n+        Assert.assertEquals(2, result2.getPendingTransactionsAdded().size());\n+        Assert.assertEquals(result2.getPendingTransactionsAdded().get(0), tx1);\n+        Assert.assertEquals(result2.getPendingTransactionsAdded().get(1), tx2);\n+        Assert.assertEquals(0, transactionPool.getQueuedTransactions().size());\n+        Assert.assertEquals(2, transactionPool.getPendingTransactions().size());\n+        Assert.assertEquals(tx1, transactionPool.getPendingTransactions().get(0));\n+        Assert.assertEquals(tx2, transactionPool.getPendingTransactions().get(1));\n         Assert.assertTrue(signatureCache.containsTx(tx1));\n         Assert.assertTrue(signatureCache.containsTx(tx2));\n     }\n \n     @Test\n-    public void addTwoTransactionsOutOfOrderInNonceUsingAddTransactions() {\n+    public void addTransactions_addTwoTransactionsUnsorted_pendingTransactionsSortedByNonce() {\n         Coin balance = Coin.valueOf(1000000);\n         createTestAccounts(2, balance);\n \n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        List<Transaction> txs = new ArrayList<>();\n+        List<Transaction> result = transactionPool.addTransactions(Arrays.asList(tx2, tx1));\n \n-        txs.add(tx2);\n-        txs.add(tx1);\n-\n-        transactionPool.addTransactions(txs);\n-\n-        Assert.assertTrue(transactionPool.getPendingTransactions().stream().anyMatch(tx -> tx.getHash().equals(tx2.getHash())));\n-        Assert.assertTrue(transactionPool.getPendingTransactions().stream().anyMatch(tx -> tx.getHash().equals(tx1.getHash())));\n+        Assert.assertEquals(2, result.size());\n+        Assert.assertEquals(0, transactionPool.getQueuedTransactions().size());\n+        Assert.assertEquals(2, transactionPool.getPendingTransactions().size());\n+        Assert.assertEquals(tx1, transactionPool.getPendingTransactions().get(0));\n+        Assert.assertEquals(tx2, transactionPool.getPendingTransactions().get(1));\n         Assert.assertTrue(signatureCache.containsTx(tx1));\n         Assert.assertTrue(signatureCache.containsTx(tx2));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465318095", "bodyText": "I don't think this is correct. This method derives the account nonce based on the line right below this one. To do that consistently it needs to synchronized over the transactionPool because it is accessing it as you can see in the line right below this one.", "author": "nicops", "createdAt": "2020-08-04T20:42:17Z", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "diffHunk": "@@ -64,12 +67,15 @@ public synchronized String sendTransaction(Web3.CallArguments args) {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionPool) {\n+            synchronized (transactionGateway) {", "originalCommit": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMDM5Mw==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465330393", "bodyText": "got it", "author": "fedejinich", "createdAt": "2020-08-04T21:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NzAxMQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465367011", "bodyText": "now it synchronises with txPool instead of txGateway", "author": "fedejinich", "createdAt": "2020-08-04T22:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6216e6df378c957096921d8450c505c0ef4819c", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java b/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java\nindex cd526299f..950ae286a 100644\n--- a/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java\n+++ b/rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java\n\n@@ -67,7 +67,7 @@ public class EthModuleTransactionBase implements EthModuleTransaction {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionGateway) {\n+            synchronized (transactionPool) {\n                 BigInteger accountNonce = args.nonce != null ? TypeConverter.stringNumberAsBigInt(args.nonce) : transactionPool.getPendingState().getNonce(account.getAddress());\n                 Transaction tx = new Transaction(toAddress, value, accountNonce, gasPrice, gasLimit, args.data, constants.getChainId());\n                 tx.sign(account.getEcKey().getPrivKeyBytes());\n"}}, {"oid": "f6216e6df378c957096921d8450c505c0ef4819c", "url": "https://github.com/rsksmart/rskj/commit/f6216e6df378c957096921d8450c505c0ef4819c", "message": "addTransaction retrieves pending transaction with pendingSuccessors and more detailed test cases", "committedDate": "2020-08-04T22:47:46Z", "type": "forcePushed"}, {"oid": "a615c435adfce21b68a9fa05f881b9b196fbc9b8", "url": "https://github.com/rsksmart/rskj/commit/a615c435adfce21b68a9fa05f881b9b196fbc9b8", "message": "prevent transaction messages from beeing added to NodeMessageHandler.receivedMessage cache", "committedDate": "2020-08-05T04:44:38Z", "type": "commit"}, {"oid": "12839722581405c1d3446298a32e880c172b0481", "url": "https://github.com/rsksmart/rskj/commit/12839722581405c1d3446298a32e880c172b0481", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool", "committedDate": "2020-08-05T04:57:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4MTM2Ng==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466281366", "bodyText": "Minor comment: this is not a list \"to be added\". This list has the transaction actually ADDED during the execution of this method", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:30:58Z", "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "diffHunk": "@@ -159,23 +159,23 @@ private RepositorySnapshot getCurrentRepository() {\n     }\n \n     private List<Transaction> addSuccessors(Transaction tx) {\n-        List<Transaction> added = new ArrayList<>();\n+        List<Transaction> pendingTransactionsToBeAdded = new ArrayList<>();", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzgwNg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466663806", "bodyText": "yes you're right!", "author": "fedejinich", "createdAt": "2020-08-06T20:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4MTM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bd15017245dad912d1c58281d395f459af9bed0d", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java b/rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java\nindex 93b389a1a..0a24a7e55 100644\n--- a/rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java\n+++ b/rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java\n\n@@ -159,7 +159,7 @@ public class TransactionPoolImpl implements TransactionPool {\n     }\n \n     private List<Transaction> addSuccessors(Transaction tx) {\n-        List<Transaction> pendingTransactionsToBeAdded = new ArrayList<>();\n+        List<Transaction> pendingTransactionsAdded = new ArrayList<>();\n         Optional<Transaction> successor = this.getQueuedSuccessor(tx);\n \n         while (successor.isPresent()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466291048", "bodyText": "Could you elaborate this decision?\nIf the transaction be replaced by other (ie chaging the gas price), then it is a different transaction\nIf is the SAME transaction send from other node that relay the SAME transaction AFTER its expiration (in that node), we cannot be sure if the node that receives the message with the already processed transaction, will accept it (because expiration time could be different)\nI prefer to remove this receivedMessage variable and logic. But now, this logic helps a lot to discard incoming message that came many times (ie, now it's easy to see the transaction message come from many peers, even before the first transaction message could be processed)", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:39:15Z", "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NDg4OQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466654889", "bodyText": "well this was a team decision, the idea was based on the case \"when a transaction expires\". in the old way we couldn't even process that resented transaction (despite expiration time)", "author": "fedejinich", "createdAt": "2020-08-06T20:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMjcxOA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466712718", "bodyText": "But now, this logic helps a lot to discard incoming message that came many times \n(ie, now it's easy to see the transaction message come from many peers, even before \nthe first transaction message could be processed)\n\nwhat do you think about this @juli @donequis ?", "author": "fedejinich", "createdAt": "2020-08-06T22:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3MDE1Ng==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r467870156", "bodyText": "Does it still help? These are the first lines of the internalAddTransaction method\n        if (pendingTransactions.hasTransaction(tx)) {\n            return TransactionPoolAddResult.withError(\"pending transaction with same hash already exists\");\n        }\n\n        if (queuedTransactions.hasTransaction(tx)) {\n            return TransactionPoolAddResult.withError(\"queued transaction with same hash already exists\");\n        }", "author": "donequis", "createdAt": "2020-08-10T12:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java b/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\nindex d9a3f9f0e..d6d0844e6 100644\n--- a/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\n+++ b/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\n\n@@ -119,7 +117,7 @@ public class NodeMessageHandler implements MessageHandler, InternalService, Runn\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n                 if (this.receivedMessages.size() >= MAX_NUMBER_OF_MESSAGES_CACHED) {\n                     this.receivedMessages.clear();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg4MA==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466293880", "bodyText": "Really nice! It makes non-sense to have this logic as internal service", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:42:32Z", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjQyOQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466656429", "bodyText": "\ud83d\udcaf", "author": "fedejinich", "createdAt": "2020-08-06T20:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "bd15017245dad912d1c58281d395f459af9bed0d", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\nindex d0ce584a7..2d806afde 100644\n--- a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n+++ b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n\n@@ -41,6 +41,9 @@ public class TransactionGateway {\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n     }\n \n+    /**\n+     * Receives transactions from other node\n+     */\n     public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n         List<Transaction> result  = transactionPool.addTransactions(txs);\n         if(!result.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NDUxOQ==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466294519", "bodyText": "Nice! The listener logic obscure the intention of this object logic and purpose.", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:43:43Z", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd15017245dad912d1c58281d395f459af9bed0d", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\nindex d0ce584a7..2d806afde 100644\n--- a/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n+++ b/rskj-core/src/main/java/co/rsk/net/TransactionGateway.java\n\n@@ -41,6 +41,9 @@ public class TransactionGateway {\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n     }\n \n+    /**\n+     * Receives transactions from other node\n+     */\n     public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n         List<Transaction> result  = transactionPool.addTransactions(txs);\n         if(!result.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NTQ5Mg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466295492", "bodyText": "Great! Having in memory data to control which transaction was sent to which node, is something that can be easily removed. Everything we keep in memory could generate a friction with other states (in this pull request, with TransactionPoolImpl logic)", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:45:25Z", "path": "rskj-core/src/main/java/co/rsk/net/TransactionNodeInformation.java", "diffHunk": "@@ -1,86 +0,0 @@\n-/*", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NjQyMg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466296422", "bodyText": "It's good to have this helper here, using its logic", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:47:07Z", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionInstant.java", "diffHunk": "@@ -43,8 +44,9 @@ public EthModuleTransactionInstant(\n             TransactionPool transactionPool,\n             MinerServer minerServer,\n             MinerClient minerClient,\n-            Blockchain blockchain) {\n-        super(constants, wallet, transactionPool);\n+            Blockchain blockchain,\n+            TransactionGateway transactionGateway) {", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5ODI1Ng==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466298256", "bodyText": "Good to see using the message with MANY transactions", "author": "ajlopezrsk", "createdAt": "2020-08-06T09:50:31Z", "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManagerImpl.java", "diffHunk": "@@ -321,4 +297,52 @@ public boolean isAddressBlockAvailable(InetAddress inetAddress) {\n         }\n     }\n \n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transaction new Transaction to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Nonnull\n+    public Set<NodeID> broadcastTransaction(@Nonnull final Transaction transaction, @Nonnull final Set<NodeID> skip) {\n+        List<Transaction> transactions = Collections.singletonList(transaction);\n+\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transactions List of Transactions to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Override\n+    public Set<NodeID> broadcastTransactions(@Nonnull final List<Transaction> transactions, @Nonnull final Set<NodeID> skip) {\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    private Set<NodeID> internalBroadcastTransactions(Set<NodeID> skip, List<Transaction> transactions) {\n+        final Set<NodeID> nodesIdsBroadcastedTo = new HashSet<>();\n+        final Message newTransactions = new TransactionsMessage(transactions);", "originalCommit": "12839722581405c1d3446298a32e880c172b0481", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "bd15017245dad912d1c58281d395f459af9bed0d", "url": "https://github.com/rsksmart/rskj/commit/bd15017245dad912d1c58281d395f459af9bed0d", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool", "committedDate": "2020-08-06T22:18:42Z", "type": "commit"}, {"oid": "bd15017245dad912d1c58281d395f459af9bed0d", "url": "https://github.com/rsksmart/rskj/commit/bd15017245dad912d1c58281d395f459af9bed0d", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool", "committedDate": "2020-08-06T22:18:42Z", "type": "forcePushed"}, {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "url": "https://github.com/rsksmart/rskj/commit/975e3959e1f665cc4d761a5cfa4133b4970ca95c", "message": "revert, receivedMessages cache now adds Message.Transaction", "committedDate": "2020-08-10T04:35:17Z", "type": "commit"}, {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "url": "https://github.com/rsksmart/rskj/commit/975e3959e1f665cc4d761a5cfa4133b4970ca95c", "message": "revert, receivedMessages cache now adds Message.Transaction", "committedDate": "2020-08-10T04:35:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNTcwMg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r468605702", "bodyText": "Messages should be offered only on non negative scores", "author": "donequis", "createdAt": "2020-08-11T14:05:32Z", "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -127,7 +126,8 @@ private void tryAddMessage(Peer sender, Message message) {\n \n             double score = sender.score(System.currentTimeMillis(), message.getMessageType());\n \n-            if (score >= 0 && !this.queue.offer(new MessageTask(sender, message, score))) {\n+            boolean notAdded = !this.queue.offer(new MessageTask(sender, message, score));", "originalCommit": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MDc5Mg==", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r468770792", "bodyText": "extracted that part into addMessage method", "author": "fedejinich", "createdAt": "2020-08-11T18:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNTcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "85f3c674da3424eee5a8bd4350f0781df19e9e19", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java b/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\nindex d6d0844e6..768fc2259 100644\n--- a/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\n+++ b/rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java\n\n@@ -126,16 +126,19 @@ public class NodeMessageHandler implements MessageHandler, InternalService, Runn\n \n             double score = sender.score(System.currentTimeMillis(), message.getMessageType());\n \n-            boolean notAdded = !this.queue.offer(new MessageTask(sender, message, score));\n-            if (score >= 0 && notAdded) {\n-                logger.warn(\"Unexpected path. Is message queue bounded now?\");\n-            }\n+            this.addMessage(sender, message, score);\n         } else {\n             recordEvent(sender, EventType.REPEATED_MESSAGE);\n             logger.trace(\"Received message already known, not added to the queue\");\n         }\n     }\n \n+    private void addMessage(Peer sender, Message message, double score) {\n+        if (score >= 0 && !this.queue.offer(new MessageTask(sender, message, score))) {\n+            logger.warn(\"Unexpected path. Is message queue bounded now?\");\n+        }\n+    }\n+\n     private void cleanExpiredMessages() {\n         long currentTime = System.currentTimeMillis();\n         if (currentTime - cleanMsgTimestamp > RECEIVED_MESSAGES_CACHE_DURATION) {\n"}}, {"oid": "85f3c674da3424eee5a8bd4350f0781df19e9e19", "url": "https://github.com/rsksmart/rskj/commit/85f3c674da3424eee5a8bd4350f0781df19e9e19", "message": "extracted addMessage method at NodeMessageHandler", "committedDate": "2020-08-11T17:52:38Z", "type": "commit"}]}