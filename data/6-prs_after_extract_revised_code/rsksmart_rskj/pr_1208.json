{"pr_number": 1208, "pr_title": "Persistent store for logs bloom", "pr_createdAt": "2020-04-08T20:02:37Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1208", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzk5MA==", "url": "https://github.com/rsksmart/rskj/pull/1208#discussion_r405803990", "bodyText": "wouldn't you want to load everything in memory when it starts?", "author": "nicops", "createdAt": "2020-04-08T20:46:00Z", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -29,22 +32,58 @@\n     private final int noBlocks;\n     private final int noConfirmations;\n     private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n+    private final KeyValueDataSource dataSource;\n \n-    public BlocksBloomStore(int noBlocks, int noConfirmations) {\n+    public BlocksBloomStore(int noBlocks, int noConfirmations, KeyValueDataSource dataSource) {\n         this.noBlocks = noBlocks;\n         this.noConfirmations = noConfirmations;\n+        this.dataSource = dataSource;\n     }\n \n     public boolean hasBlockNumber(long blockNumber) {\n-        return this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber));\n+        if (this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber))) {\n+            return true;\n+        }\n+\n+        if (this.dataSource != null && this.dataSource.get(longToKey(blockNumber)) != null) {\n+            return true;\n+        }\n+\n+        return false;\n     }\n \n     public BlocksBloom getBlocksBloomByNumber(long number) {\n-        return this.blocksBloom.get(firstNumberInRange(number));\n+        long key = firstNumberInRange(number);\n+\n+        BlocksBloom blocksBloom = this.blocksBloom.get(key);\n+\n+        if (blocksBloom != null) {\n+            return blocksBloom;\n+        }\n+\n+        if (this.dataSource == null) {\n+            return null;\n+        }\n+\n+        byte[] data = this.dataSource.get(longToKey(key));", "originalCommit": "489e8538f2e8f096cfcc43c56c0a426a282db53c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2OTgwMw==", "url": "https://github.com/rsksmart/rskj/pull/1208#discussion_r406069803", "bodyText": "We don't have the information at start (the log blooms are built on demand). The node maybe never would be asked for that log range, etc... So the memory cache is only to working nodes that have a behavior: someone is requesting the logs, from JSON RPC. The store is the new piece in this pull request: then, when a node restart and is queried for logs, it could respond faster.", "author": "ajlopezrsk", "createdAt": "2020-04-09T09:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "374123c26a84483555f18f8450c9eea3ea6b0e80", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java b/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java\nindex e48a1ded6..b15d7fa44 100644\n--- a/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java\n+++ b/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java\n\n@@ -32,58 +29,22 @@ public class BlocksBloomStore {\n     private final int noBlocks;\n     private final int noConfirmations;\n     private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n-    private final KeyValueDataSource dataSource;\n \n-    public BlocksBloomStore(int noBlocks, int noConfirmations, KeyValueDataSource dataSource) {\n+    public BlocksBloomStore(int noBlocks, int noConfirmations) {\n         this.noBlocks = noBlocks;\n         this.noConfirmations = noConfirmations;\n-        this.dataSource = dataSource;\n     }\n \n     public boolean hasBlockNumber(long blockNumber) {\n-        if (this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber))) {\n-            return true;\n-        }\n-\n-        if (this.dataSource != null && this.dataSource.get(longToKey(blockNumber)) != null) {\n-            return true;\n-        }\n-\n-        return false;\n+        return this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber));\n     }\n \n     public BlocksBloom getBlocksBloomByNumber(long number) {\n-        long key = firstNumberInRange(number);\n-\n-        BlocksBloom blocksBloom = this.blocksBloom.get(key);\n-\n-        if (blocksBloom != null) {\n-            return blocksBloom;\n-        }\n-\n-        if (this.dataSource == null) {\n-            return null;\n-        }\n-\n-        byte[] data = this.dataSource.get(longToKey(key));\n-\n-        if (data == null) {\n-            return null;\n-        }\n-\n-        blocksBloom = BlocksBloomEncoder.decode(data);\n-\n-        this.blocksBloom.put(key, blocksBloom);\n-\n-        return blocksBloom;\n+        return this.blocksBloom.get(firstNumberInRange(number));\n     }\n \n     public void setBlocksBloom(BlocksBloom blocksBloom) {\n         this.blocksBloom.put(blocksBloom.fromBlock(), blocksBloom);\n-\n-        if (this.dataSource != null) {\n-            this.dataSource.put(longToKey(blocksBloom.fromBlock()), BlocksBloomEncoder.encode(blocksBloom));\n-        }\n     }\n \n     public long firstNumberInRange(long number) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTYwOQ==", "url": "https://github.com/rsksmart/rskj/pull/1208#discussion_r405811609", "bodyText": "should we encode something extra like noBlocks / noConfirmations or a maybe just a version number to ease a future migration if the structure of this changes?", "author": "nicops", "createdAt": "2020-04-08T20:59:39Z", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomEncoder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.bouncycastle.util.BigIntegers;\n+import org.ethereum.core.Bloom;\n+import org.ethereum.util.RLP;\n+import org.ethereum.util.RLPList;\n+\n+import java.math.BigInteger;\n+\n+/**\n+ * Created by ajlopez on 19/02/2020.\n+ */\n+public class BlocksBloomEncoder {\n+    private BlocksBloomEncoder() {\n+\n+    }\n+\n+    public static byte[] encode(BlocksBloom blocksBloom) {\n+        byte[] rlpFrom = encodeLong(blocksBloom.fromBlock());\n+        byte[] rlpTo = encodeLong(blocksBloom.toBlock());\n+        byte[] rlpData = RLP.encodeElement(blocksBloom.getBloom().getData());\n+\n+        return RLP.encodeList(rlpFrom, rlpTo, rlpData);", "originalCommit": "489e8538f2e8f096cfcc43c56c0a426a282db53c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MDU5NA==", "url": "https://github.com/rsksmart/rskj/pull/1208#discussion_r406070594", "bodyText": "Not needed. Only the confirmed blocks are processed in this logic, so each accepted block is processed only once. Check configuration, there is a number of blocks to take as confirmation blocks.", "author": "ajlopezrsk", "createdAt": "2020-04-09T09:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxNTQyMA==", "url": "https://github.com/rsksmart/rskj/pull/1208#discussion_r407615420", "bodyText": "Ok, basically if we happen to have to migrate this structure we would have to delete or rename the whole datasource. So we don't need to version this.", "author": "nicops", "createdAt": "2020-04-13T17:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxMTYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "374123c26a84483555f18f8450c9eea3ea6b0e80", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomEncoder.java b/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomEncoder.java\nindex 0ae942a2e..d9dc3b638 100644\n--- a/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomEncoder.java\n+++ b/rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomEncoder.java\n\n@@ -19,7 +19,6 @@\n \n package co.rsk.logfilter;\n \n-import org.bouncycastle.util.BigIntegers;\n import org.ethereum.core.Bloom;\n import org.ethereum.util.RLP;\n import org.ethereum.util.RLPList;\n"}}, {"oid": "e797c49a8daa75036861389fe77f212d3e51c5bd", "url": "https://github.com/rsksmart/rskj/commit/e797c49a8daa75036861389fe77f212d3e51c5bd", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-12T20:28:00Z", "type": "forcePushed"}, {"oid": "118e7af589163a4cbdc41e66e17a36283efa0968", "url": "https://github.com/rsksmart/rskj/commit/118e7af589163a4cbdc41e66e17a36283efa0968", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-13T18:15:06Z", "type": "forcePushed"}, {"oid": "e10d9d356a09dbcd0105d8d4a05c230aff884a17", "url": "https://github.com/rsksmart/rskj/commit/e10d9d356a09dbcd0105d8d4a05c230aff884a17", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-14T15:16:12Z", "type": "forcePushed"}, {"oid": "0ca59de88951c6111f8f9922cbc51b085f96fa6d", "url": "https://github.com/rsksmart/rskj/commit/0ca59de88951c6111f8f9922cbc51b085f96fa6d", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-16T19:15:06Z", "type": "forcePushed"}, {"oid": "288d20f15450510309117e392526c92afaa5518c", "url": "https://github.com/rsksmart/rskj/commit/288d20f15450510309117e392526c92afaa5518c", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-16T21:44:26Z", "type": "forcePushed"}, {"oid": "ae52d929431d6713d75ddbb3cb82e3e125f9631c", "url": "https://github.com/rsksmart/rskj/commit/ae52d929431d6713d75ddbb3cb82e3e125f9631c", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-24T17:24:17Z", "type": "forcePushed"}, {"oid": "6e4f708badf5e5d52c113ad8e2831eb1e76681ea", "url": "https://github.com/rsksmart/rskj/commit/6e4f708badf5e5d52c113ad8e2831eb1e76681ea", "message": "Using block 0 in BlocksBloom", "committedDate": "2020-04-27T19:12:45Z", "type": "forcePushed"}, {"oid": "374123c26a84483555f18f8450c9eea3ea6b0e80", "url": "https://github.com/rsksmart/rskj/commit/374123c26a84483555f18f8450c9eea3ea6b0e80", "message": "BlocksBloomEncoder first tests", "committedDate": "2020-04-28T20:24:24Z", "type": "commit"}, {"oid": "badfbc4a197a106719ce2b93ac311e6777911dba", "url": "https://github.com/rsksmart/rskj/commit/badfbc4a197a106719ce2b93ac311e6777911dba", "message": "BlocksBloomEncoder encode, decode", "committedDate": "2020-04-28T20:24:24Z", "type": "commit"}, {"oid": "db065b421ae32dab41b6ea8498060dc58951a5c5", "url": "https://github.com/rsksmart/rskj/commit/db065b421ae32dab41b6ea8498060dc58951a5c5", "message": "Data source in BlocksBloomStore", "committedDate": "2020-04-28T20:24:24Z", "type": "commit"}, {"oid": "d05372970743f36b337ee99cb4834c1663cbfdd4", "url": "https://github.com/rsksmart/rskj/commit/d05372970743f36b337ee99cb4834c1663cbfdd4", "message": "Blocks bloom data source in RskContext and RskTestContext", "committedDate": "2020-04-28T20:24:25Z", "type": "commit"}, {"oid": "a972fe60d2387c8b1feb826321ea58da75e556e8", "url": "https://github.com/rsksmart/rskj/commit/a972fe60d2387c8b1feb826321ea58da75e556e8", "message": "Put retrieve blocks bloom into cache", "committedDate": "2020-04-28T20:24:25Z", "type": "commit"}, {"oid": "bdcbcb877932720e3d68eb2150655c74a0d48574", "url": "https://github.com/rsksmart/rskj/commit/bdcbcb877932720e3d68eb2150655c74a0d48574", "message": "Using block 0 in BlocksBloom", "committedDate": "2020-04-28T20:24:25Z", "type": "commit"}, {"oid": "54e4150f4b7ad95f542a3dcc314a3f621df930ca", "url": "https://github.com/rsksmart/rskj/commit/54e4150f4b7ad95f542a3dcc314a3f621df930ca", "message": "Encode decode empty BlocksBloom", "committedDate": "2020-04-28T20:24:25Z", "type": "commit"}, {"oid": "8ad07ad19c2cada481e1984d4eb98e15328c8494", "url": "https://github.com/rsksmart/rskj/commit/8ad07ad19c2cada481e1984d4eb98e15328c8494", "message": "Using emptyBloom in BlocksBloomEncoder", "committedDate": "2020-04-28T20:24:25Z", "type": "commit"}, {"oid": "8ad07ad19c2cada481e1984d4eb98e15328c8494", "url": "https://github.com/rsksmart/rskj/commit/8ad07ad19c2cada481e1984d4eb98e15328c8494", "message": "Using emptyBloom in BlocksBloomEncoder", "committedDate": "2020-04-28T20:24:25Z", "type": "forcePushed"}]}