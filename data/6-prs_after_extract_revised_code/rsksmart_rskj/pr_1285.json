{"pr_number": 1285, "pr_title": "ForkDetectionData retrieval performance", "pr_createdAt": "2020-08-04T22:13:53Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1285", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxMTczOA==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r466311738", "bodyText": "Could we use UMM_LEAVES_LENGTH instead of magic number 20?", "author": "ajlopezrsk", "createdAt": "2020-08-06T10:16:00Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeader.java", "diffHunk": "@@ -570,6 +560,24 @@ public String getParentShortHash() {\n         return new byte[0];\n     }\n \n+    /**\n+     * Compute the base hash for merged mining, taking into account whether the block is a umm block.\n+     * This base hash is later modified to include the forkdetectiondata in its last 12 bytes\n+     *\n+     * @return The computed hash for merged mining\n+     */\n+    private byte[] getBaseHashForMergedMining() {\n+        byte[] encodedBlock = getEncoded(false, false);\n+        byte[] hashForMergedMining = HashUtil.keccak256(encodedBlock);\n+\n+        if (isUMMBlock()) {\n+            byte[] leftHash = Arrays.copyOfRange(hashForMergedMining, 0, 20);", "originalCommit": "420cb2fe41d874b6874cd96de112c261b0fab950", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ5MDk1Mw==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r466490953", "bodyText": "Done", "author": "M-Picco", "createdAt": "2020-08-06T15:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxMTczOA=="}], "type": "inlineReview", "revised_code": {"commit": "d5026b645e0f02b154ea3ea26b92068adc1ba651", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\nindex 5943fa19b..024c56679 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n\n@@ -571,7 +571,7 @@ public class BlockHeader {\n         byte[] hashForMergedMining = HashUtil.keccak256(encodedBlock);\n \n         if (isUMMBlock()) {\n-            byte[] leftHash = Arrays.copyOfRange(hashForMergedMining, 0, 20);\n+            byte[] leftHash = Arrays.copyOfRange(hashForMergedMining, 0, UMM_LEAVES_LENGTH);\n             hashForMergedMining = getHashRootForMergedMining(leftHash);\n         }\n \n"}}, {"oid": "d5026b645e0f02b154ea3ea26b92068adc1ba651", "url": "https://github.com/rsksmart/rskj/commit/d5026b645e0f02b154ea3ea26b92068adc1ba651", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-06T15:16:26Z", "type": "forcePushed"}, {"oid": "ef1cb6234ed0eeed8da50f42bb22474db1e049be", "url": "https://github.com/rsksmart/rskj/commit/ef1cb6234ed0eeed8da50f42bb22474db1e049be", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-12T16:40:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MDQ2MQ==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r470880461", "bodyText": "I think we should definitely validate that the fork detection data in the coinbase transaction is always 12 bytes and avoid these potentially consensus threatening blocks.", "author": "amendelzon", "createdAt": "2020-08-14T21:51:44Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeader.java", "diffHunk": "@@ -539,28 +533,24 @@ public String getParentShortHash() {\n     public byte[] getMiningForkDetectionData() {\n         if(includeForkDetectionData) {\n             if (hasMiningFields() && miningForkDetectionData.length == 0) {\n-                byte[] encodedBlock = getEncoded(false, false);\n-                byte[] hashForMergedMining = HashUtil.keccak256(encodedBlock);\n-\n-                byte[] hashForMergedMiningPrefix = Arrays.copyOfRange(\n-                        hashForMergedMining,\n-                        0,\n-                        HASH_FOR_MERGED_MINING_PREFIX_LENGTH\n-                );\n+                byte[] hashForMergedMining = getBaseHashForMergedMining();\n+\n                 byte[] coinbaseTransaction = getBitcoinMergedMiningCoinbaseTransaction();\n \n-                List<Byte> hashForMergedMiningPrefixAsList = Arrays.asList(ArrayUtils.toObject(hashForMergedMiningPrefix));\n-                List<Byte> coinbaseAsList = Arrays.asList(ArrayUtils.toObject(coinbaseTransaction));\n+                byte[] mergeMiningTagPrefix = Arrays.copyOf(RskMiningConstants.RSK_TAG, RskMiningConstants.RSK_TAG.length + HASH_FOR_MERGED_MINING_PREFIX_LENGTH);\n+                arraycopy(hashForMergedMining, 0, mergeMiningTagPrefix, RskMiningConstants.RSK_TAG.length, HASH_FOR_MERGED_MINING_PREFIX_LENGTH);\n \n-                int position = Collections.lastIndexOfSubList(coinbaseAsList, hashForMergedMiningPrefixAsList);\n+                int position = ListArrayUtil.lastIndexOfSubList(coinbaseTransaction, mergeMiningTagPrefix);\n                 if (position == -1) {\n                     throw new IllegalStateException(\n                             String.format(\"Mining fork detection data could not be found. Header: %s\", getShortHash())\n                     );\n                 }\n \n-                int from = position + HASH_FOR_MERGED_MINING_PREFIX_LENGTH;\n+                int from = position + RskMiningConstants.RSK_TAG.length + HASH_FOR_MERGED_MINING_PREFIX_LENGTH;\n                 int to = from + FORK_DETECTION_DATA_LENGTH;\n+\n+                // should the fork detection data in the coinbase be under 12 bytes, copyOfRange pads with zeros", "originalCommit": "ef1cb6234ed0eeed8da50f42bb22474db1e049be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkyNQ==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r472244925", "bodyText": "Done", "author": "M-Picco", "createdAt": "2020-08-18T14:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4MDQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8efa5cd6aadc4717a4b75415512f650c712ac047", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\nindex 024c56679..63c590472 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n\n@@ -550,7 +550,12 @@ public class BlockHeader {\n                 int from = position + RskMiningConstants.RSK_TAG.length + HASH_FOR_MERGED_MINING_PREFIX_LENGTH;\n                 int to = from + FORK_DETECTION_DATA_LENGTH;\n \n-                // should the fork detection data in the coinbase be under 12 bytes, copyOfRange pads with zeros\n+                if (coinbaseTransaction.length < to) {\n+                    throw new IllegalStateException(\n+                            String.format(\"Unexpected fork detection data length. Expected: %d. Got: %d. Header: %s\", FORK_DETECTION_DATA_LENGTH, FORK_DETECTION_DATA_LENGTH - (to - coinbaseTransaction.length), getShortHash())\n+                    );\n+                }\n+\n                 miningForkDetectionData = Arrays.copyOfRange(coinbaseTransaction, from, to);\n             }\n \n"}}, {"oid": "8efa5cd6aadc4717a4b75415512f650c712ac047", "url": "https://github.com/rsksmart/rskj/commit/8efa5cd6aadc4717a4b75415512f650c712ac047", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T14:30:06Z", "type": "forcePushed"}, {"oid": "d139c4fdbab911f065ab13d6a6138e56dcd3502f", "url": "https://github.com/rsksmart/rskj/commit/d139c4fdbab911f065ab13d6a6138e56dcd3502f", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T14:57:08Z", "type": "forcePushed"}, {"oid": "155a9bce7caca62d36ef6e21e25317499779a417", "url": "https://github.com/rsksmart/rskj/commit/155a9bce7caca62d36ef6e21e25317499779a417", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T17:02:41Z", "type": "forcePushed"}, {"oid": "91e6dd4e462196892727078926e7bc659f605241", "url": "https://github.com/rsksmart/rskj/commit/91e6dd4e462196892727078926e7bc659f605241", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T17:46:31Z", "type": "forcePushed"}, {"oid": "86ff1ee4f54e70d089e729b6f35087bb37f991bb", "url": "https://github.com/rsksmart/rskj/commit/86ff1ee4f54e70d089e729b6f35087bb37f991bb", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T19:16:55Z", "type": "forcePushed"}, {"oid": "35cafce5d298b54655cd51c061bf4934c023a32d", "url": "https://github.com/rsksmart/rskj/commit/35cafce5d298b54655cd51c061bf4934c023a32d", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T19:24:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2ODExMQ==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r472468111", "bodyText": "Shouldn't FORK_DETECTION_DATA_LENGTH - (to - coinbaseTransaction.length) (the Got: %d bit) be coinbaseTransaction.length - from - 1?", "author": "amendelzon", "createdAt": "2020-08-18T20:25:31Z", "path": "rskj-core/src/main/java/org/ethereum/core/BlockHeader.java", "diffHunk": "@@ -539,28 +533,29 @@ public String getParentPrintableHash() {\n     public byte[] getMiningForkDetectionData() {\n         if(includeForkDetectionData) {\n             if (hasMiningFields() && miningForkDetectionData.length == 0) {\n-                byte[] encodedBlock = getEncoded(false, false);\n-                byte[] hashForMergedMining = HashUtil.keccak256(encodedBlock);\n-\n-                byte[] hashForMergedMiningPrefix = Arrays.copyOfRange(\n-                        hashForMergedMining,\n-                        0,\n-                        HASH_FOR_MERGED_MINING_PREFIX_LENGTH\n-                );\n+                byte[] hashForMergedMining = getBaseHashForMergedMining();\n+\n                 byte[] coinbaseTransaction = getBitcoinMergedMiningCoinbaseTransaction();\n \n-                List<Byte> hashForMergedMiningPrefixAsList = Arrays.asList(ArrayUtils.toObject(hashForMergedMiningPrefix));\n-                List<Byte> coinbaseAsList = Arrays.asList(ArrayUtils.toObject(coinbaseTransaction));\n+                byte[] mergeMiningTagPrefix = Arrays.copyOf(RskMiningConstants.RSK_TAG, RskMiningConstants.RSK_TAG.length + HASH_FOR_MERGED_MINING_PREFIX_LENGTH);\n+                arraycopy(hashForMergedMining, 0, mergeMiningTagPrefix, RskMiningConstants.RSK_TAG.length, HASH_FOR_MERGED_MINING_PREFIX_LENGTH);\n \n-                int position = Collections.lastIndexOfSubList(coinbaseAsList, hashForMergedMiningPrefixAsList);\n+                int position = ListArrayUtil.lastIndexOfSubList(coinbaseTransaction, mergeMiningTagPrefix);\n                 if (position == -1) {\n                     throw new IllegalStateException(\n                             String.format(\"Mining fork detection data could not be found. Header: %s\", getPrintableHash())\n                     );\n                 }\n \n-                int from = position + HASH_FOR_MERGED_MINING_PREFIX_LENGTH;\n+                int from = position + RskMiningConstants.RSK_TAG.length + HASH_FOR_MERGED_MINING_PREFIX_LENGTH;\n                 int to = from + FORK_DETECTION_DATA_LENGTH;\n+\n+                if (coinbaseTransaction.length < to) {\n+                    throw new IllegalStateException(\n+                            String.format(\"Invalid fork detection data length. Expected: %d. Got: %d. Header: %s\", FORK_DETECTION_DATA_LENGTH, FORK_DETECTION_DATA_LENGTH - (to - coinbaseTransaction.length), getPrintableHash())", "originalCommit": "35cafce5d298b54655cd51c061bf4934c023a32d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MTUwMQ==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r472491501", "bodyText": "Results are the same. However, the other way (length - from) is clearer, so I'll change it to that.", "author": "M-Picco", "createdAt": "2020-08-18T21:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2ODExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MzMyMw==", "url": "https://github.com/rsksmart/rskj/pull/1285#discussion_r472493323", "bodyText": "Thanks", "author": "amendelzon", "createdAt": "2020-08-18T21:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2ODExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0da798faf029b90d9941bc1bcd0fc6c27a54fd0a", "chunk": "diff --git a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\nindex 523bcd227..5ccec14eb 100644\n--- a/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n+++ b/rskj-core/src/main/java/org/ethereum/core/BlockHeader.java\n\n@@ -552,7 +552,12 @@ public class BlockHeader {\n \n                 if (coinbaseTransaction.length < to) {\n                     throw new IllegalStateException(\n-                            String.format(\"Invalid fork detection data length. Expected: %d. Got: %d. Header: %s\", FORK_DETECTION_DATA_LENGTH, FORK_DETECTION_DATA_LENGTH - (to - coinbaseTransaction.length), getPrintableHash())\n+                            String.format(\n+                                    \"Invalid fork detection data length. Expected: %d. Got: %d. Header: %s\",\n+                                    FORK_DETECTION_DATA_LENGTH,\n+                                    coinbaseTransaction.length - from,\n+                                    getPrintableHash()\n+                            )\n                     );\n                 }\n \n"}}, {"oid": "0da798faf029b90d9941bc1bcd0fc6c27a54fd0a", "url": "https://github.com/rsksmart/rskj/commit/0da798faf029b90d9941bc1bcd0fc6c27a54fd0a", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T20:56:37Z", "type": "commit"}, {"oid": "0da798faf029b90d9941bc1bcd0fc6c27a54fd0a", "url": "https://github.com/rsksmart/rskj/commit/0da798faf029b90d9941bc1bcd0fc6c27a54fd0a", "message": "Improve forkDetectionData and hashForMergedMining lookup in ProofOfWork by replacing the convertion to List<Byte> and use of Collections.lastIndexOfSubList for an implementation of lastIndexOfSubList with native byte arrays", "committedDate": "2020-08-18T20:56:37Z", "type": "forcePushed"}]}