{"pr_number": 1206, "pr_title": "Light client GetAccounts and Accounts Messages", "pr_createdAt": "2020-04-08T14:27:19Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1206", "timeline": [{"oid": "5c3ee39a67a81722a5d0d7ec41d1df4099dc198e", "url": "https://github.com/rsksmart/rskj/commit/5c3ee39a67a81722a5d0d7ec41d1df4099dc198e", "message": "init", "committedDate": "2020-04-13T13:28:23Z", "type": "commit"}, {"oid": "4a453e7c571571dd77df22e014555a7b5ee43a30", "url": "https://github.com/rsksmart/rskj/commit/4a453e7c571571dd77df22e014555a7b5ee43a30", "message": "added accounts response funcionality", "committedDate": "2020-04-13T13:28:27Z", "type": "commit"}, {"oid": "fa314c4c76a95c5204eb2946077eb815a3021341", "url": "https://github.com/rsksmart/rskj/commit/fa314c4c76a95c5204eb2946077eb815a3021341", "message": "added tests and some minor fixes", "committedDate": "2020-04-13T13:28:27Z", "type": "commit"}, {"oid": "6876cfa1417b00174fa94273db314084d19621db", "url": "https://github.com/rsksmart/rskj/commit/6876cfa1417b00174fa94273db314084d19621db", "message": "accounts message tests", "committedDate": "2020-04-13T13:28:27Z", "type": "commit"}, {"oid": "55a350a74877543301fdcf25f94b733008f1e017", "url": "https://github.com/rsksmart/rskj/commit/55a350a74877543301fdcf25f94b733008f1e017", "message": "finished tests", "committedDate": "2020-04-13T13:40:13Z", "type": "commit"}, {"oid": "23b5cf603c973d7bb562b95114fcac0d56905ce2", "url": "https://github.com/rsksmart/rskj/commit/23b5cf603c973d7bb562b95114fcac0d56905ce2", "message": "added headers", "committedDate": "2020-04-13T13:40:15Z", "type": "commit"}, {"oid": "e40c3521fcb0c23f4c246188349f92bd7e673b6d", "url": "https://github.com/rsksmart/rskj/commit/e40c3521fcb0c23f4c246188349f92bd7e673b6d", "message": "more headers hehe", "committedDate": "2020-04-13T13:40:15Z", "type": "commit"}, {"oid": "e4ccc176641c054a886446342d55f63e196fc15b", "url": "https://github.com/rsksmart/rskj/commit/e4ccc176641c054a886446342d55f63e196fc15b", "message": "last test added and minor fixes", "committedDate": "2020-04-13T13:40:15Z", "type": "commit"}, {"oid": "e4ccc176641c054a886446342d55f63e196fc15b", "url": "https://github.com/rsksmart/rskj/commit/e4ccc176641c054a886446342d55f63e196fc15b", "message": "last test added and minor fixes", "committedDate": "2020-04-13T13:40:15Z", "type": "forcePushed"}, {"oid": "c4a58355c05675465b6e84b6f906ebc7497da9ce", "url": "https://github.com/rsksmart/rskj/commit/c4a58355c05675465b6e84b6f906ebc7497da9ce", "message": "changed last message code in inRange method", "committedDate": "2020-04-13T13:42:56Z", "type": "commit"}, {"oid": "486bc9f1b5b04840df7331327b9940137ff71fcb", "url": "https://github.com/rsksmart/rskj/commit/486bc9f1b5b04840df7331327b9940137ff71fcb", "message": "changed order of tests", "committedDate": "2020-04-14T14:16:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzOTYyMw==", "url": "https://github.com/rsksmart/rskj/pull/1206#discussion_r408239623", "bodyText": "In fact, it is sending \"account response\", I think it's better to log \"Read message: {} GET_ACCOUNTS.\", for ACCOUNTS too.", "author": "julianlen", "createdAt": "2020-04-14T15:43:14Z", "path": "rskj-core/src/main/java/co/rsk/net/eth/LightClientHandler.java", "diffHunk": "@@ -80,6 +80,18 @@ protected void channelRead0(ChannelHandlerContext ctx, LightClientMessage msg) t\n                 CodeMessage codeMsg = (CodeMessage) msg;\n                 lightProcessor.processCodeMessage(codeMsg.getId(), codeMsg.getCodeHash(), msgQueue);\n                 break;\n+            case GET_ACCOUNTS:\n+                logger.debug(\"Read message: {} GET_ACCOUNTS. Sending code request\", msg);", "originalCommit": "486bc9f1b5b04840df7331327b9940137ff71fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32bc339b46572a31e4891514b8950a89c58c8e10", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/net/eth/LightClientHandler.java b/rskj-core/src/main/java/co/rsk/net/eth/LightClientHandler.java\nindex 91350e544..b9630582e 100644\n--- a/rskj-core/src/main/java/co/rsk/net/eth/LightClientHandler.java\n+++ b/rskj-core/src/main/java/co/rsk/net/eth/LightClientHandler.java\n\n@@ -81,12 +81,12 @@ public class LightClientHandler extends SimpleChannelInboundHandler<LightClientM\n                 lightProcessor.processCodeMessage(codeMsg.getId(), codeMsg.getCodeHash(), msgQueue);\n                 break;\n             case GET_ACCOUNTS:\n-                logger.debug(\"Read message: {} GET_ACCOUNTS. Sending code request\", msg);\n+                logger.debug(\"Read message: {} GET_ACCOUNTS.\", msg);\n                 GetAccountsMessage getAccountsMsg = (GetAccountsMessage) msg;\n                 lightProcessor.processGetAccountsMessage(getAccountsMsg.getId(), getAccountsMsg.getBlockHash(), getAccountsMsg.getAddressHash(), msgQueue);\n                 break;\n             case ACCOUNTS:\n-                logger.debug(\"Read message: {} ACCOUNTS. Sending code response\", msg);\n+                logger.debug(\"Read message: {} ACCOUNTS.\", msg);\n                 AccountsMessage accountsMsg = (AccountsMessage) msg;\n                 lightProcessor.processAccountsMessage(accountsMsg.getId(), accountsMsg.getMerkleInclusionProof(),\n                         accountsMsg.getNonce(), accountsMsg.getBalance(), accountsMsg.getCodeHash(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1Mzg2MQ==", "url": "https://github.com/rsksmart/rskj/pull/1206#discussion_r408253861", "bodyText": "Repeat this sentence twice", "author": "julianlen", "createdAt": "2020-04-14T16:02:20Z", "path": "rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java", "diffHunk": "@@ -207,6 +206,67 @@ public void processCodeMessageAndShouldThrowAnException() {\n         }\n     }\n \n+    @Test\n+    public void processGetAccountsMessageAndShouldReturnsAccountsCorrectly() {\n+        long id = 101;\n+        Coin balance = Coin.valueOf(1010);\n+        long nonce = 100;\n+        RskAddress address = randomAddress();\n+        final Block block = mock(Block.class);\n+        final RepositorySnapshot repositorySnapshot = mock(RepositorySnapshot.class);\n+        Keccak256 codeHash = randomHash();\n+        byte[] storageRoot = randomHash().getBytes();\n+        AccountState accountState = mock(AccountState.class);\n+\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);\n+        when(block.getHash()).thenReturn(blockHash);\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);", "originalCommit": "486bc9f1b5b04840df7331327b9940137ff71fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32bc339b46572a31e4891514b8950a89c58c8e10", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java b/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\nindex 8c7a4b380..d3bf6bb64 100644\n--- a/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\n+++ b/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\n\n@@ -193,17 +183,12 @@ public class LightProcessorTest {\n         verify(msgQueue, times(0)).sendMessage(any());\n     }\n \n-    @Test\n+    @Test(expected = UnsupportedOperationException.class)\n     public void processCodeMessageAndShouldThrowAnException() {\n         long requestId = 0;\n         byte[] codeHash = randomBytes(32);\n \n-        String expected = \"Not supported Code processing\";\n-        try {\n-            lightProcessor.processCodeMessage(requestId, codeHash, msgQueue);\n-        } catch (UnsupportedOperationException e) {\n-            assertEquals(expected, e.getMessage());\n-        }\n+        lightProcessor.processCodeMessage(requestId, codeHash, msgQueue);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTA4Ng==", "url": "https://github.com/rsksmart/rskj/pull/1206#discussion_r408255086", "bodyText": "As we talked, we should change the way we test these cases", "author": "julianlen", "createdAt": "2020-04-14T16:04:00Z", "path": "rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java", "diffHunk": "@@ -207,6 +206,67 @@ public void processCodeMessageAndShouldThrowAnException() {\n         }\n     }\n \n+    @Test\n+    public void processGetAccountsMessageAndShouldReturnsAccountsCorrectly() {\n+        long id = 101;\n+        Coin balance = Coin.valueOf(1010);\n+        long nonce = 100;\n+        RskAddress address = randomAddress();\n+        final Block block = mock(Block.class);\n+        final RepositorySnapshot repositorySnapshot = mock(RepositorySnapshot.class);\n+        Keccak256 codeHash = randomHash();\n+        byte[] storageRoot = randomHash().getBytes();\n+        AccountState accountState = mock(AccountState.class);\n+\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);\n+        when(block.getHash()).thenReturn(blockHash);\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);\n+        when(repositoryLocator.snapshotAt(block.getHeader())).thenReturn(repositorySnapshot);\n+        when(repositorySnapshot.getAccountState(address)).thenReturn(accountState);\n+\n+        when(accountState.getNonce()).thenReturn(BigInteger.valueOf(nonce));\n+        when(accountState.getBalance()).thenReturn(balance);\n+        when(repositorySnapshot.getCodeHash(address)).thenReturn(codeHash);\n+        when(repositorySnapshot.getRoot()).thenReturn(storageRoot);\n+\n+        AccountsMessage expectedMessage = new AccountsMessage(id, new byte[] {0x00}, nonce,\n+                balance.asBigInteger().longValue(), codeHash.getBytes(), storageRoot);\n+\n+        ArgumentCaptor<AccountsMessage> argument = forClass(AccountsMessage.class);\n+        lightProcessor.processGetAccountsMessage(id, blockHash.getBytes(), address.getBytes(), msgQueue);\n+        verify(msgQueue).sendMessage(argument.capture());\n+\n+        assertArrayEquals(expectedMessage.getEncoded(), argument.getValue().getEncoded());\n+    }\n+\n+    @Test\n+    public void processGetAccountsMessageWithInvalidBlockHash() {\n+        long requestId = 100;\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(null);\n+        byte[] addressHash = HashUtil.randomHash();\n+\n+        lightProcessor.processGetAccountsMessage(requestId, blockHash.getBytes(), addressHash, msgQueue);\n+\n+        verify(msgQueue, times(0)).sendMessage(any());\n+    }\n+\n+    @Test\n+    public void processAccountsMessageAndShouldThrowAnException() {\n+        long id = 1;\n+        byte [] merkleInclusionProof = new byte[] {0x01};\n+        long nonce = 123;\n+        long balance = 100;\n+        byte[] codeHash = HashUtil.randomHash();\n+        byte[] storageRoot = HashUtil.randomHash();\n+\n+        String expected = \"Not supported AccountsMessage processing\";\n+        try {\n+            lightProcessor.processAccountsMessage(id, merkleInclusionProof, nonce, balance, codeHash, storageRoot, msgQueue);", "originalCommit": "486bc9f1b5b04840df7331327b9940137ff71fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32bc339b46572a31e4891514b8950a89c58c8e10", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java b/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\nindex 8c7a4b380..d3bf6bb64 100644\n--- a/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\n+++ b/rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java\n\n@@ -193,17 +183,12 @@ public class LightProcessorTest {\n         verify(msgQueue, times(0)).sendMessage(any());\n     }\n \n-    @Test\n+    @Test(expected = UnsupportedOperationException.class)\n     public void processCodeMessageAndShouldThrowAnException() {\n         long requestId = 0;\n         byte[] codeHash = randomBytes(32);\n \n-        String expected = \"Not supported Code processing\";\n-        try {\n-            lightProcessor.processCodeMessage(requestId, codeHash, msgQueue);\n-        } catch (UnsupportedOperationException e) {\n-            assertEquals(expected, e.getMessage());\n-        }\n+        lightProcessor.processCodeMessage(requestId, codeHash, msgQueue);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MTc2Ng==", "url": "https://github.com/rsksmart/rskj/pull/1206#discussion_r408281766", "bodyText": "You repeat this sentence too", "author": "julianlen", "createdAt": "2020-04-14T16:42:47Z", "path": "rskj-core/src/test/java/co/rsk/net/eth/LightClientHandlerTest.java", "diffHunk": "@@ -180,6 +184,58 @@ public void lightClientHandlerSendsCodeMsgToQueueAndShouldThrowAnException() thr\n         }\n     }\n \n+    @Test\n+    public void lightClientHandlerSendsGetAccountsToQueue() throws Exception {\n+        long id = 101;\n+        Keccak256 blockHash = randomHash();\n+        RskAddress address = randomAddress();\n+        final Block block = mock(Block.class);\n+        final RepositorySnapshot repositorySnapshot = mock(RepositorySnapshot.class);\n+        Keccak256 codeHash = randomHash();\n+        byte[] storageRoot = randomHash().getBytes();\n+        AccountState accountState = mock(AccountState.class);\n+        Coin balance = Coin.valueOf(1010);\n+        long nonce = 100;\n+\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);", "originalCommit": "486bc9f1b5b04840df7331327b9940137ff71fcb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32bc339b46572a31e4891514b8950a89c58c8e10", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/net/eth/LightClientHandlerTest.java b/rskj-core/src/test/java/co/rsk/net/eth/LightClientHandlerTest.java\nindex 7b343ab05..31aec0cda 100644\n--- a/rskj-core/src/test/java/co/rsk/net/eth/LightClientHandlerTest.java\n+++ b/rskj-core/src/test/java/co/rsk/net/eth/LightClientHandlerTest.java\n\n@@ -173,15 +164,12 @@ public class LightClientHandlerTest {\n         assertArrayEquals(response.getEncoded(), argument.getValue().getEncoded());\n     }\n \n-    @Test\n+    @Test(expected = UnsupportedOperationException.class)\n     public void lightClientHandlerSendsCodeMsgToQueueAndShouldThrowAnException() throws Exception {\n         byte[] codeHash = HashUtil.randomHash();\n         CodeMessage m = new CodeMessage(0, codeHash);\n-        try {\n-            lightClientHandler.channelRead0(ctx, m);\n-        } catch (UnsupportedOperationException e) {\n-            assertEquals(\"Not supported Code processing\", e.getMessage());\n-        }\n+\n+        lightClientHandler.channelRead0(ctx, m);\n     }\n \n     @Test\n"}}, {"oid": "32bc339b46572a31e4891514b8950a89c58c8e10", "url": "https://github.com/rsksmart/rskj/commit/32bc339b46572a31e4891514b8950a89c58c8e10", "message": "Fixed some typos and better error handling on tests", "committedDate": "2020-04-14T18:03:32Z", "type": "commit"}]}