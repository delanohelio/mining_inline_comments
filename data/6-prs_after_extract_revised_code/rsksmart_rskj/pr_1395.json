{"pr_number": 1395, "pr_title": "Added Peg-in rejection events", "pr_createdAt": "2020-12-22T15:38:19Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1395", "timeline": [{"oid": "e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "url": "https://github.com/rsksmart/rskj/commit/e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "message": "Added unit tests", "committedDate": "2020-12-30T09:39:42Z", "type": "forcePushed"}, {"oid": "9a52062f5feeec9add508bb68f2b820527829e48", "url": "https://github.com/rsksmart/rskj/commit/9a52062f5feeec9add508bb68f2b820527829e48", "message": "Added unit tests", "committedDate": "2021-01-22T14:15:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcyNTkzOA==", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r562725938", "bodyText": "Could we have an explicit test of event having the signature expected by external tools? ie, an assert equals against a calculated hash. So, we could be sure the event is consumible and queryable by external tools, using a code test. My concert is that, if we apply fuzzy testing to the event function code (and then, changing the resulting signature), all these tests could pass in green", "author": "ajlopezrsk", "createdAt": "2021-01-22T15:51:36Z", "path": "rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java", "diffHunk": "@@ -625,6 +625,76 @@ public void logReleaseBtcRequested() {\n         Assert.assertArrayEquals(event.encodeEventData(amount.getValue()), result.getData());\n     }\n \n+    @Test\n+    public void logRejectedPegin() {\n+        // Setup event logger\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+        List<LogInfo> eventLogs = new LinkedList<>();\n+\n+        BridgeEventLogger eventLogger = new BridgeEventLoggerImpl(null, activations, eventLogs);\n+\n+        BtcTransaction btcTx = new BtcTransaction(BridgeRegTestConstants.getInstance().getBtcParams());\n+\n+        eventLogger.logRejectedPegin(btcTx, RejectedPeginReason.PEGIN_CAP_SURPASSED);\n+\n+        Assert.assertEquals(1, eventLogs.size());\n+        LogInfo entry = eventLogs.get(0);\n+\n+        Assert.assertEquals(PrecompiledContracts.BRIDGE_ADDR, new RskAddress(entry.getAddress()));\n+\n+        // Assert address that made the log\n+        LogInfo result = eventLogs.get(0);\n+        Assert.assertArrayEquals(PrecompiledContracts.BRIDGE_ADDR.getBytes(), result.getAddress());\n+\n+        // Assert log topics\n+        Assert.assertEquals(2, result.getTopics().size());\n+        CallTransaction.Function event = BridgeEvents.REJECTED_PEGIN.getEvent();\n+\n+        byte[][] topics = event.encodeEventTopics(btcTx.getHash().getBytes());\n+\n+        for (int i=0; i<topics.length; i++) {\n+            Assert.assertArrayEquals(topics[i], result.getTopics().get(i).getData());\n+        }\n+\n+        // Assert log data\n+        Assert.assertArrayEquals(event.encodeEventData(RejectedPeginReason.PEGIN_CAP_SURPASSED.getValue()), result.getData());", "originalCommit": "9a52062f5feeec9add508bb68f2b820527829e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0Njc4MA==", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564046780", "bodyText": "@ajlopezrsk has a good point here. We are doing this though in the integration tests already, so we can leave this comment as tech debt to be solved by the fed team afterwards", "author": "josedahlquist", "createdAt": "2021-01-25T21:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcyNTkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ff56ccc6df30888317cb591ee640b27bbf435a95", "chunk": "diff --git a/rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java b/rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java\nindex 363824719..caac17492 100644\n--- a/rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java\n+++ b/rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java\n\n@@ -625,76 +625,6 @@ public class BridgeEventLoggerImplTest {\n         Assert.assertArrayEquals(event.encodeEventData(amount.getValue()), result.getData());\n     }\n \n-    @Test\n-    public void logRejectedPegin() {\n-        // Setup event logger\n-        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n-        List<LogInfo> eventLogs = new LinkedList<>();\n-\n-        BridgeEventLogger eventLogger = new BridgeEventLoggerImpl(null, activations, eventLogs);\n-\n-        BtcTransaction btcTx = new BtcTransaction(BridgeRegTestConstants.getInstance().getBtcParams());\n-\n-        eventLogger.logRejectedPegin(btcTx, RejectedPeginReason.PEGIN_CAP_SURPASSED);\n-\n-        Assert.assertEquals(1, eventLogs.size());\n-        LogInfo entry = eventLogs.get(0);\n-\n-        Assert.assertEquals(PrecompiledContracts.BRIDGE_ADDR, new RskAddress(entry.getAddress()));\n-\n-        // Assert address that made the log\n-        LogInfo result = eventLogs.get(0);\n-        Assert.assertArrayEquals(PrecompiledContracts.BRIDGE_ADDR.getBytes(), result.getAddress());\n-\n-        // Assert log topics\n-        Assert.assertEquals(2, result.getTopics().size());\n-        CallTransaction.Function event = BridgeEvents.REJECTED_PEGIN.getEvent();\n-\n-        byte[][] topics = event.encodeEventTopics(btcTx.getHash().getBytes());\n-\n-        for (int i=0; i<topics.length; i++) {\n-            Assert.assertArrayEquals(topics[i], result.getTopics().get(i).getData());\n-        }\n-\n-        // Assert log data\n-        Assert.assertArrayEquals(event.encodeEventData(RejectedPeginReason.PEGIN_CAP_SURPASSED.getValue()), result.getData());\n-    }\n-\n-    @Test\n-    public void logUnrefundablePegin() {\n-        // Setup event logger\n-        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n-        List<LogInfo> eventLogs = new LinkedList<>();\n-\n-        BridgeEventLogger eventLogger = new BridgeEventLoggerImpl(null, activations, eventLogs);\n-\n-        BtcTransaction btcTx = new BtcTransaction(BridgeRegTestConstants.getInstance().getBtcParams());\n-\n-        eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n-\n-        Assert.assertEquals(1, eventLogs.size());\n-        LogInfo entry = eventLogs.get(0);\n-\n-        Assert.assertEquals(PrecompiledContracts.BRIDGE_ADDR, new RskAddress(entry.getAddress()));\n-\n-        // Assert address that made the log\n-        LogInfo result = eventLogs.get(0);\n-        Assert.assertArrayEquals(PrecompiledContracts.BRIDGE_ADDR.getBytes(), result.getAddress());\n-\n-        // Assert log topics\n-        Assert.assertEquals(2, result.getTopics().size());\n-        CallTransaction.Function event = BridgeEvents.UNREFUNDABLE_PEGIN.getEvent();\n-\n-        byte[][] topics = event.encodeEventTopics(btcTx.getHash().getBytes());\n-\n-        for (int i=0; i<topics.length; i++) {\n-            Assert.assertArrayEquals(topics[i], result.getTopics().get(i).getData());\n-        }\n-\n-        // Assert log data\n-        Assert.assertArrayEquals(event.encodeEventData(UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER.getValue()), result.getData());\n-    }\n-\n     private byte[] flatKeysAsByteArray(List<BtcECKey> keys) {\n         List<byte[]> pubKeys = keys.stream()\n             .map(BtcECKey::getPubKey)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0NTM5Ng==", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564045396", "bodyText": "This is not correct.\nThe status of RSKIP170 doesn't ensure the pegin was a pegin-v1. pegin v1 and pegin legacy will co exist after Iris activation.\nYou can check the type of pegin using the peginInformation object (see https://github.com/rsksmart/rskj/blob/master/rskj-core/src/main/java/co/rsk/peg/PeginInformation.java#L44 )\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (activations.isActive(ConsensusRule.RSKIP170)) {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n          \n          \n            \n                            }\n          \n          \n            \n                            if (peginInformation.getProtocolVersion() == 1) {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n          \n          \n            \n                            }\n          \n      \n    \n    \n  \n\nThis could be improved by at least encoding the 1 in an enum. What do you think @marcos-iov ?", "author": "josedahlquist", "createdAt": "2021-01-25T21:10:34Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -475,6 +495,14 @@ private void refundTxSender(\n             generateRejectionRelease(btcTx, btcRefundAddress, rskTx, amount);\n         } else {\n             logger.debug(\"[refundTxSender] No btc refund address provided, couldn't get sender address either. Can't refund\");\n+\n+            if (activations.isActive(ConsensusRule.RSKIP181)) {\n+                if (activations.isActive(ConsensusRule.RSKIP170)) {\n+                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n+                } else {\n+                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n+                }", "originalCommit": "9a52062f5feeec9add508bb68f2b820527829e48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA3NTExMA==", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564075110", "bodyText": "Good catch! Yes, an enum with the different peg-in protocol versions (0 and 1 for the moment) should do it", "author": "marcos-iov", "createdAt": "2021-01-25T22:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0NTM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQwNDcwNQ==", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564404705", "bodyText": "thanks @josedahlquist. Applied your suggestion.", "author": "Vovchyk", "createdAt": "2021-01-26T10:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0NTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ff56ccc6df30888317cb591ee640b27bbf435a95", "chunk": "diff --git a/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java b/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\nindex 3324a1553..8a3445981 100644\n--- a/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n+++ b/rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\n@@ -496,12 +488,10 @@ public class BridgeSupport {\n         } else {\n             logger.debug(\"[refundTxSender] No btc refund address provided, couldn't get sender address either. Can't refund\");\n \n-            if (activations.isActive(ConsensusRule.RSKIP181)) {\n-                if (activations.isActive(ConsensusRule.RSKIP170)) {\n-                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n-                } else {\n-                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n-                }\n+            if (activations.isActive(ConsensusRule.RSKIP170)) {\n+                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n+            } else {\n+                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n             }\n         }\n     }\n"}}, {"oid": "ff56ccc6df30888317cb591ee640b27bbf435a95", "url": "https://github.com/rsksmart/rskj/commit/ff56ccc6df30888317cb591ee640b27bbf435a95", "message": "Added Peg-in rejection events", "committedDate": "2021-02-03T13:33:15Z", "type": "commit"}, {"oid": "f3c53bf0fd9d3219295c13af69fb5217bcb92eec", "url": "https://github.com/rsksmart/rskj/commit/f3c53bf0fd9d3219295c13af69fb5217bcb92eec", "message": "Added HF activation logic", "committedDate": "2021-02-03T13:33:15Z", "type": "commit"}, {"oid": "0e0e7e0268a7e00862a308a0c26924049a86e847", "url": "https://github.com/rsksmart/rskj/commit/0e0e7e0268a7e00862a308a0c26924049a86e847", "message": "Added unit tests", "committedDate": "2021-02-03T13:33:15Z", "type": "commit"}, {"oid": "74aebb6abbb880d53d8f185275774e3057d1ae48", "url": "https://github.com/rsksmart/rskj/commit/74aebb6abbb880d53d8f185275774e3057d1ae48", "message": "Update rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\nCo-authored-by: josedahlquist <jose.dahlquist@gmail.com>", "committedDate": "2021-02-03T13:33:15Z", "type": "commit"}, {"oid": "74aebb6abbb880d53d8f185275774e3057d1ae48", "url": "https://github.com/rsksmart/rskj/commit/74aebb6abbb880d53d8f185275774e3057d1ae48", "message": "Update rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\nCo-authored-by: josedahlquist <jose.dahlquist@gmail.com>", "committedDate": "2021-02-03T13:33:15Z", "type": "forcePushed"}]}