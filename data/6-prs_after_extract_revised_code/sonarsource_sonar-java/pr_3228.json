{"pr_number": 3228, "pr_title": "SONARJAVA-3542 RSPEC-5993 Constructors of an \"abstract\" class should not be declared \"public\"", "pr_createdAt": "2020-10-01T06:45:45Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3228", "timeline": [{"oid": "b61b483794d88b45b52912414b3c20295aef0ff1", "url": "https://github.com/SonarSource/sonar-java/commit/b61b483794d88b45b52912414b3c20295aef0ff1", "message": "Add new rule description", "committedDate": "2020-09-30T15:15:06Z", "type": "commit"}, {"oid": "1d164f2916f33b77d57280858ee0c8564beedbe2", "url": "https://github.com/SonarSource/sonar-java/commit/1d164f2916f33b77d57280858ee0c8564beedbe2", "message": "Implement rule", "committedDate": "2020-09-30T16:25:34Z", "type": "commit"}, {"oid": "28bb9c19f832651174b1ed1471f8e782964297d3", "url": "https://github.com/SonarSource/sonar-java/commit/28bb9c19f832651174b1ed1471f8e782964297d3", "message": "Update ruling tests results", "committedDate": "2020-10-01T06:53:16Z", "type": "commit"}, {"oid": "28bb9c19f832651174b1ed1471f8e782964297d3", "url": "https://github.com/SonarSource/sonar-java/commit/28bb9c19f832651174b1ed1471f8e782964297d3", "message": "Update ruling tests results", "committedDate": "2020-10-01T06:53:16Z", "type": "forcePushed"}, {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6", "url": "https://github.com/SonarSource/sonar-java/commit/c42858143bcac3d62a63e2923a7383e81243afd6", "message": "Skip private classes from this rule.", "committedDate": "2020-10-01T13:19:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NTc0NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498275744", "bodyText": "You can use MethodTree.class::cast instead of the lambda", "author": "m-g-sonar", "createdAt": "2020-10-01T14:12:08Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))", "originalCommit": "c42858143bcac3d62a63e2923a7383e81243afd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\nindex b60a36719..abec9bb67 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n\n@@ -50,19 +50,24 @@ public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionV\n     Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n \n     abstractKeyword.ifPresent(keyword -> {\n-      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      JavaFileScannerContext.Location keywordLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      List<JavaFileScannerContext.Location> secondaryLocations = Collections.singletonList(keywordLocation);\n       classTree.members().stream()\n-        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n-        .map(member -> ((MethodTree) member))\n-        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(PublicConstructorInAbstractClassCheck::isConstructor)\n+        .map(MethodTree.class::cast)\n+        .map(PublicConstructorInAbstractClassCheck::isPublic)\n         .filter(Optional::isPresent)\n         .map(Optional::get)\n         .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n-          Collections.singletonList(secondaryLocation), null));\n+          secondaryLocations, null));\n     });\n   }\n \n-  private static boolean isaConstructor(Tree member) {\n+  private static Optional<ModifierKeywordTree> isPublic(MethodTree methodTree) {\n+    return ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC);\n+  }\n+\n+  private static boolean isConstructor(Tree member) {\n     return member.is(Tree.Kind.CONSTRUCTOR);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NTkyMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498275921", "bodyText": "I would prefer isConstructor()", "author": "m-g-sonar", "createdAt": "2020-10-01T14:12:22Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n+          Collections.singletonList(secondaryLocation), null));\n+    });\n+  }\n+\n+  private static boolean isaConstructor(Tree member) {", "originalCommit": "c42858143bcac3d62a63e2923a7383e81243afd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\nindex b60a36719..abec9bb67 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n\n@@ -50,19 +50,24 @@ public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionV\n     Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n \n     abstractKeyword.ifPresent(keyword -> {\n-      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      JavaFileScannerContext.Location keywordLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      List<JavaFileScannerContext.Location> secondaryLocations = Collections.singletonList(keywordLocation);\n       classTree.members().stream()\n-        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n-        .map(member -> ((MethodTree) member))\n-        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(PublicConstructorInAbstractClassCheck::isConstructor)\n+        .map(MethodTree.class::cast)\n+        .map(PublicConstructorInAbstractClassCheck::isPublic)\n         .filter(Optional::isPresent)\n         .map(Optional::get)\n         .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n-          Collections.singletonList(secondaryLocation), null));\n+          secondaryLocations, null));\n     });\n   }\n \n-  private static boolean isaConstructor(Tree member) {\n+  private static Optional<ModifierKeywordTree> isPublic(MethodTree methodTree) {\n+    return ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC);\n+  }\n+\n+  private static boolean isConstructor(Tree member) {\n     return member.is(Tree.Kind.CONSTRUCTOR);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NjMzNg==", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498276336", "bodyText": "Let's make the list of secondaries outside this stream to not have to do it again.", "author": "m-g-sonar", "createdAt": "2020-10-01T14:12:53Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n+          Collections.singletonList(secondaryLocation), null));", "originalCommit": "c42858143bcac3d62a63e2923a7383e81243afd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\nindex b60a36719..abec9bb67 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n\n@@ -50,19 +50,24 @@ public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionV\n     Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n \n     abstractKeyword.ifPresent(keyword -> {\n-      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      JavaFileScannerContext.Location keywordLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      List<JavaFileScannerContext.Location> secondaryLocations = Collections.singletonList(keywordLocation);\n       classTree.members().stream()\n-        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n-        .map(member -> ((MethodTree) member))\n-        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(PublicConstructorInAbstractClassCheck::isConstructor)\n+        .map(MethodTree.class::cast)\n+        .map(PublicConstructorInAbstractClassCheck::isPublic)\n         .filter(Optional::isPresent)\n         .map(Optional::get)\n         .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n-          Collections.singletonList(secondaryLocation), null));\n+          secondaryLocations, null));\n     });\n   }\n \n-  private static boolean isaConstructor(Tree member) {\n+  private static Optional<ModifierKeywordTree> isPublic(MethodTree methodTree) {\n+    return ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC);\n+  }\n+\n+  private static boolean isConstructor(Tree member) {\n     return member.is(Tree.Kind.CONSTRUCTOR);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NzAwOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498277009", "bodyText": "I would inline this into a method isPublic(MethodTree) to be able to use a method reference again.", "author": "m-g-sonar", "createdAt": "2020-10-01T14:13:41Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))", "originalCommit": "c42858143bcac3d62a63e2923a7383e81243afd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\nindex b60a36719..abec9bb67 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java\n\n@@ -50,19 +50,24 @@ public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionV\n     Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n \n     abstractKeyword.ifPresent(keyword -> {\n-      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      JavaFileScannerContext.Location keywordLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      List<JavaFileScannerContext.Location> secondaryLocations = Collections.singletonList(keywordLocation);\n       classTree.members().stream()\n-        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n-        .map(member -> ((MethodTree) member))\n-        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(PublicConstructorInAbstractClassCheck::isConstructor)\n+        .map(MethodTree.class::cast)\n+        .map(PublicConstructorInAbstractClassCheck::isPublic)\n         .filter(Optional::isPresent)\n         .map(Optional::get)\n         .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n-          Collections.singletonList(secondaryLocation), null));\n+          secondaryLocations, null));\n     });\n   }\n \n-  private static boolean isaConstructor(Tree member) {\n+  private static Optional<ModifierKeywordTree> isPublic(MethodTree methodTree) {\n+    return ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC);\n+  }\n+\n+  private static boolean isConstructor(Tree member) {\n     return member.is(Tree.Kind.CONSTRUCTOR);\n   }\n }\n"}}, {"oid": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "url": "https://github.com/SonarSource/sonar-java/commit/528b7d3e24bfa429fea81fc4573b025d63d6cf11", "message": "Refactoring", "committedDate": "2020-10-01T14:31:59Z", "type": "commit"}]}