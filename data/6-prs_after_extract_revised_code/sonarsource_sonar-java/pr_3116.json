{"pr_number": 3116, "pr_title": "SONARJAVA-3418 S2275: FP when passing a Throwable as last argument", "pr_createdAt": "2020-07-15T10:02:10Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3116", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMjcwNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3116#discussion_r455002705", "bodyText": "\ud83d\udc4d", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-07-15T12:10:04Z", "path": "java-checks/src/main/java/org/sonar/java/checks/PrintfMisuseCheck.java", "diffHunk": "@@ -260,18 +260,29 @@ private boolean checkUnbalancedQuotes(MethodInvocationTree mit, String formatStr\n         }\n       }\n     }\n-    if (lastArgumentShouldBeIgnored(mit, args, transposedArgs)) {\n+    if (lastArgumentShouldBeIgnored(mit, args, transposedArgs, indexes)) {\n       transposedArgs = transposedArgs.subList(0, transposedArgs.size() - 1);\n     }\n     return transposedArgs;\n   }\n \n-  private static boolean lastArgumentShouldBeIgnored(MethodInvocationTree mit, List<ExpressionTree> args, List<ExpressionTree> transposedArgs) {\n+  private static boolean lastArgumentShouldBeIgnored(MethodInvocationTree mit, List<ExpressionTree> args, List<ExpressionTree> transposedArgs, Set<Integer> indexes) {\n+    if (!isLoggingMethod(mit)) {\n+      return false;\n+    }\n     if (mit.symbol().owner().type().is(JAVA_UTIL_LOGGING_LOGGER)) {\n+      // Remove the last argument from the count if it's a throwable, since log(Level level, String msg, Throwable thrown) will be called.\n+      // If the argument is an array, any exception in the array will be considered as Object, behaving as any others.", "originalCommit": "a228636ff079d640769be9003233c564619a58f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bf736cffebad10a04690058c56e6dcbe6c0685c", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/PrintfMisuseCheck.java b/java-checks/src/main/java/org/sonar/java/checks/PrintfMisuseCheck.java\nindex ae3517d0d..63cc643fa 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/PrintfMisuseCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/PrintfMisuseCheck.java\n\n@@ -271,8 +271,7 @@ public class PrintfMisuseCheck extends AbstractPrintfChecker {\n       return false;\n     }\n     if (mit.symbol().owner().type().is(JAVA_UTIL_LOGGING_LOGGER)) {\n-      // Remove the last argument from the count if it's a throwable, since log(Level level, String msg, Throwable thrown) will be called.\n-      // If the argument is an array, any exception in the array will be considered as Object, behaving as any others.\n+      // Java util logging will always consider a throwable in the list (transposedArgs) as an object.\n       return args.size() == 1 && isLastArgumentThrowable(args);\n     }\n     // org.apache.logging.log4j.Logger and org.slf4j.Logger\n"}}, {"oid": "8bf736cffebad10a04690058c56e6dcbe6c0685c", "url": "https://github.com/SonarSource/sonar-java/commit/8bf736cffebad10a04690058c56e6dcbe6c0685c", "message": "SONARJAVA-3418 S2275: FP when passing a Throwable as last argument", "committedDate": "2020-07-15T13:03:20Z", "type": "commit"}, {"oid": "df9a60163a867cb05487beaf60d1b370b2aec7a1", "url": "https://github.com/SonarSource/sonar-java/commit/df9a60163a867cb05487beaf60d1b370b2aec7a1", "message": "Improve comment and fix formatting", "committedDate": "2020-07-15T13:03:20Z", "type": "commit"}, {"oid": "bb678e763ae8d06a3a4065a4a7f5873aa4a135b7", "url": "https://github.com/SonarSource/sonar-java/commit/bb678e763ae8d06a3a4065a4a7f5873aa4a135b7", "message": "SONARJAVA-3464 Update rules metadata before 6.6", "committedDate": "2020-07-15T13:03:40Z", "type": "forcePushed"}, {"oid": "df9a60163a867cb05487beaf60d1b370b2aec7a1", "url": "https://github.com/SonarSource/sonar-java/commit/df9a60163a867cb05487beaf60d1b370b2aec7a1", "message": "Improve comment and fix formatting", "committedDate": "2020-07-15T13:03:20Z", "type": "forcePushed"}]}