{"pr_number": 2787, "pr_title": "SONARJAVA-3183 S3329 should consider the call to SecureRandom.generat\u2026", "pr_createdAt": "2020-02-04T16:33:19Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2787", "timeline": [{"oid": "689b12b3098115cdbfcd407bacec4695e8b3f5c2", "url": "https://github.com/SonarSource/sonar-java/commit/689b12b3098115cdbfcd407bacec4695e8b3f5c2", "message": "SONARJAVA-3183 S3329 should consider the call to SecureRandom.generateSeed() as safe", "committedDate": "2020-02-05T08:05:48Z", "type": "commit"}, {"oid": "689b12b3098115cdbfcd407bacec4695e8b3f5c2", "url": "https://github.com/SonarSource/sonar-java/commit/689b12b3098115cdbfcd407bacec4695e8b3f5c2", "message": "SONARJAVA-3183 S3329 should consider the call to SecureRandom.generateSeed() as safe", "committedDate": "2020-02-05T08:05:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTAwNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375131004", "bodyText": "you should reuse declaration instead of symbol.declaration() here.", "author": "m-g-sonar", "createdAt": "2020-02-05T09:03:56Z", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "diffHunk": "@@ -56,6 +70,24 @@ protected void onConstructorFound(NewClassTree newClassTree) {\n     }\n   }\n \n+  private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      Symbol symbol = ((IdentifierTree) tree).symbol();\n+      VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();\n+      return declaration != null &&\n+        (isSecureRandomGenerateSeed(declaration.initializer()) ||\n+          getReassignments(symbol.declaration(), symbol.usages()).stream()", "originalCommit": "689b12b3098115cdbfcd407bacec4695e8b3f5c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5de98599c3ee9ed78274d0dc2801e6627810b2e0", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\nindex 80975d190..980e78cb4 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\n\n@@ -73,10 +73,13 @@ public class CipherBlockChainingCheck extends AbstractMethodDetection {\n   private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n     if (tree.is(Tree.Kind.IDENTIFIER)) {\n       Symbol symbol = ((IdentifierTree) tree).symbol();\n+      if (!symbol.isVariableSymbol()) {\n+        return false;\n+      }\n       VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();\n       return declaration != null &&\n         (isSecureRandomGenerateSeed(declaration.initializer()) ||\n-          getReassignments(symbol.declaration(), symbol.usages()).stream()\n+          getReassignments(declaration, symbol.usages()).stream()\n             .map(AssignmentExpressionTree::expression)\n             .anyMatch(CipherBlockChainingCheck::isSecureRandomGenerateSeed));\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTYzOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375131639", "bodyText": "ECJ can be quite tricky here. In case of strange resolution/recovery from its engine, it might assign an unknown symbol rather than a VariableSymbol. Before casting, I would check that the symbol is not unknown.", "author": "m-g-sonar", "createdAt": "2020-02-05T09:05:22Z", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "diffHunk": "@@ -56,6 +70,24 @@ protected void onConstructorFound(NewClassTree newClassTree) {\n     }\n   }\n \n+  private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      Symbol symbol = ((IdentifierTree) tree).symbol();\n+      VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();", "originalCommit": "689b12b3098115cdbfcd407bacec4695e8b3f5c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2OTgzNg==", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375269836", "bodyText": "Good to know!", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-02-05T13:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTYzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5de98599c3ee9ed78274d0dc2801e6627810b2e0", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\nindex 80975d190..980e78cb4 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java\n\n@@ -73,10 +73,13 @@ public class CipherBlockChainingCheck extends AbstractMethodDetection {\n   private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n     if (tree.is(Tree.Kind.IDENTIFIER)) {\n       Symbol symbol = ((IdentifierTree) tree).symbol();\n+      if (!symbol.isVariableSymbol()) {\n+        return false;\n+      }\n       VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();\n       return declaration != null &&\n         (isSecureRandomGenerateSeed(declaration.initializer()) ||\n-          getReassignments(symbol.declaration(), symbol.usages()).stream()\n+          getReassignments(declaration, symbol.usages()).stream()\n             .map(AssignmentExpressionTree::expression)\n             .anyMatch(CipherBlockChainingCheck::isSecureRandomGenerateSeed));\n     } else {\n"}}, {"oid": "5de98599c3ee9ed78274d0dc2801e6627810b2e0", "url": "https://github.com/SonarSource/sonar-java/commit/5de98599c3ee9ed78274d0dc2801e6627810b2e0", "message": "Fix from review", "committedDate": "2020-02-05T13:22:24Z", "type": "commit"}]}