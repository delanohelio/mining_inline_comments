{"pr_number": 3287, "pr_title": "SONARJAVA-3605 FP in S3305 when field has an initializer", "pr_createdAt": "2020-11-18T15:15:02Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3287", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjMzMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3287#discussion_r526782332", "bodyText": "I'd suggest adding a case @Autowired private Bar withInitializer = new Bar(); (maybe to non-compiling examples if doesn't compile) and decide what we want to do in such case.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-19T11:16:00Z", "path": "java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package checks.spring;\n+\n+import javax.inject.Inject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+class SpringConfigurationWithAutowiredFieldsCheck {\n+  class Bar { }\n+\n+  class Foo {\n+    private final Bar bar;\n+    public Foo(Bar bar) { this.bar = bar; }\n+  }\n+\n+  @Configuration\n+  class A {\n+\n+    @Autowired private Bar singleUsage; // Noncompliant [[sc=28;ec=39]] {{Inject this field value directly into \"method\", the only method that uses it.}}\n+    @Inject private Bar jsr330; // Noncompliant [[sc=25;ec=31]] {{Inject this field value directly into \"jsr330\", the only method that uses it.}}\n+    @Autowired private Bar multipleUsage;\n+    @Autowired private Bar notUsedInBeanMethod;\n+    @Autowired private Bar notUsed;\n+    private Bar notAutowired;\n+    @Autowired(required=false) private Bar withInitializer = new Bar();", "originalCommit": "6471935bbb58ba8fe12e54bd267c4981a77f3134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27db009fafe4ec887a0f98c2d91c3d1035a1fa3a", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java b/java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\nindex 6bb833d0b..eb5a1e608 100644\n--- a/java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\n\n@@ -22,7 +22,6 @@ class SpringConfigurationWithAutowiredFieldsCheck {\n     @Autowired private Bar notUsedInBeanMethod;\n     @Autowired private Bar notUsed;\n     private Bar notAutowired;\n-    @Autowired(required=false) private Bar withInitializer = new Bar();\n \n     @Bean\n     public Foo method() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjM4Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/3287#discussion_r526782382", "bodyText": "As far as I remember Spring. @Autowired annotation by default has required = true. So the initializer won't make sense, because the project will fail if no @Bean found (or even won't compile). Maybe it will be nice to check that required=false there. On the other hand, it's an additional check, so maybe we can leave it as it is.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-19T11:16:05Z", "path": "java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "diffHunk": "@@ -78,6 +78,10 @@ private static void collectAutowiredFields(Tree tree, Map<Symbol, VariableTree>\n       return;\n     }\n     VariableTree variable = (VariableTree) tree;\n+    if (variable.initializer() != null) {", "originalCommit": "6471935bbb58ba8fe12e54bd267c4981a77f3134", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27db009fafe4ec887a0f98c2d91c3d1035a1fa3a", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\nindex b0d1b0e30..e8caa3118 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java\n\n@@ -78,10 +78,6 @@ public class SpringConfigurationWithAutowiredFieldsCheck extends IssuableSubscri\n       return;\n     }\n     VariableTree variable = (VariableTree) tree;\n-    if (variable.initializer() != null) {\n-      // Common pattern used to define a default value.\n-      return;\n-    }\n     Symbol variableSymbol = variable.symbol();\n     if (AUTOWIRED_ANNOTATIONS.stream().anyMatch(a -> variableSymbol.metadata().isAnnotatedWith(a))) {\n       autowiredFields.put(variableSymbol, variable);\n"}}, {"oid": "27db009fafe4ec887a0f98c2d91c3d1035a1fa3a", "url": "https://github.com/SonarSource/sonar-java/commit/27db009fafe4ec887a0f98c2d91c3d1035a1fa3a", "message": "Migrate test file to compiled module for S3305", "committedDate": "2020-11-19T16:24:26Z", "type": "commit"}, {"oid": "9798fc419dd652a0e409e144d2e39658ff89d79b", "url": "https://github.com/SonarSource/sonar-java/commit/9798fc419dd652a0e409e144d2e39658ff89d79b", "message": "SONARJAVA-3605 FP in S3305 when field has an initializer", "committedDate": "2020-11-19T16:24:26Z", "type": "commit"}, {"oid": "2241d958150b63f049f374ca79a5236840e020a0", "url": "https://github.com/SonarSource/sonar-java/commit/2241d958150b63f049f374ca79a5236840e020a0", "message": "Supress issue only when required is set to false", "committedDate": "2020-11-19T16:24:26Z", "type": "commit"}, {"oid": "2241d958150b63f049f374ca79a5236840e020a0", "url": "https://github.com/SonarSource/sonar-java/commit/2241d958150b63f049f374ca79a5236840e020a0", "message": "Supress issue only when required is set to false", "committedDate": "2020-11-19T16:24:26Z", "type": "forcePushed"}]}