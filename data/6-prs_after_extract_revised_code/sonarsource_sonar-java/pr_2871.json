{"pr_number": 2871, "pr_title": "SONARJAVA-3315 Unify CheckVerifiers accross the plugin", "pr_createdAt": "2020-03-10T17:21:49Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2871", "timeline": [{"oid": "9d15115b832ebfa3fef9695cba807acddd646ed4", "url": "https://github.com/SonarSource/sonar-java/commit/9d15115b832ebfa3fef9695cba807acddd646ed4", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-11T08:20:03Z", "type": "forcePushed"}, {"oid": "52dc5e1bae18a6d3e79b0a7a6538c3689c0e8b84", "url": "https://github.com/SonarSource/sonar-java/commit/52dc5e1bae18a6d3e79b0a7a6538c3689c0e8b84", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-11T11:03:19Z", "type": "forcePushed"}, {"oid": "c88a616a0dbc17001d4631e1ef575b328e8283b0", "url": "https://github.com/SonarSource/sonar-java/commit/c88a616a0dbc17001d4631e1ef575b328e8283b0", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-11T11:28:48Z", "type": "forcePushed"}, {"oid": "b95f5583c2675986df91de9582e720c394862c7b", "url": "https://github.com/SonarSource/sonar-java/commit/b95f5583c2675986df91de9582e720c394862c7b", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-11T15:22:00Z", "type": "forcePushed"}, {"oid": "a6b8f1359e80d9d74f9f95dcc67a621654b112ee", "url": "https://github.com/SonarSource/sonar-java/commit/a6b8f1359e80d9d74f9f95dcc67a621654b112ee", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-11T15:41:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3OTQwNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r391079404", "bodyText": "This one is interesting... it never worked. unifying the verifiers made that comment invalid, and I realized we were not raising issue here. I didn't investigated if it's expected or not.", "author": "m-g-sonar", "createdAt": "2020-03-11T15:58:37Z", "path": "java-checks/src/test/files/checks/LeastSpecificTypeCheck.java", "diffHunk": "@@ -153,7 +153,7 @@ public static void visibility(Visibility vis) { // Compliant - Base has package\n \n   protected static class Visibility2 extends ProtectedBase { }\n \n-  public static void visibility(Visibility2 vis) { // // Noncompliant {{Use 'A.ProtectedBase' here; it is a more general type than 'Visibility2'.}}", "originalCommit": "a6b8f1359e80d9d74f9f95dcc67a621654b112ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4c7d348e779f8d399c56b0b8c8f3f6759ae81b", "chunk": "diff --git a/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java b/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\nindex cb75d7862..394df1743 100644\n--- a/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\n+++ b/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\n\n@@ -153,7 +153,7 @@ class A {\n \n   protected static class Visibility2 extends ProtectedBase { }\n \n-  public static void visibility(Visibility2 vis) {\n+  public static void visibility(Visibility2 vis) { // // Noncompliant {{Use 'A.ProtectedBase' here; it is a more general type than 'Visibility2'.}}\n     vis.b();\n   }\n \n"}}, {"oid": "5ebcf3a44f1584f6207949fa501fe6d9807694d9", "url": "https://github.com/SonarSource/sonar-java/commit/5ebcf3a44f1584f6207949fa501fe6d9807694d9", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-12T09:57:44Z", "type": "forcePushed"}, {"oid": "ae0bdab7e4ba8fd9e9e9d3b7670285627a0cff0e", "url": "https://github.com/SonarSource/sonar-java/commit/ae0bdab7e4ba8fd9e9e9d3b7670285627a0cff0e", "message": "SONARJAVA-3307 Update test files", "committedDate": "2020-03-12T14:28:09Z", "type": "forcePushed"}, {"oid": "9e58531cdbf73a6afccf0434f0eda4e384cc2039", "url": "https://github.com/SonarSource/sonar-java/commit/9e58531cdbf73a6afccf0434f0eda4e384cc2039", "message": "SONARJAVA-3315 Update test files", "committedDate": "2020-03-12T14:37:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MTMxMw==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r391751313", "bodyText": "You should let a comment here to clearly state that this is a FN.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-12T16:44:24Z", "path": "java-checks/src/test/files/checks/LeastSpecificTypeCheck.java", "diffHunk": "@@ -153,7 +153,7 @@ public static void visibility(Visibility vis) { // Compliant - Base has package\n \n   protected static class Visibility2 extends ProtectedBase { }\n \n-  public static void visibility(Visibility2 vis) { // // Noncompliant {{Use 'A.ProtectedBase' here; it is a more general type than 'Visibility2'.}}\n+  public static void visibility(Visibility2 vis) {", "originalCommit": "9e58531cdbf73a6afccf0434f0eda4e384cc2039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyNjQxMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r392926411", "bodyText": "It's a FN. marked as such!", "author": "m-g-sonar", "createdAt": "2020-03-16T10:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MTMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "aa4c7d348e779f8d399c56b0b8c8f3f6759ae81b", "chunk": "diff --git a/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java b/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\nindex cb75d7862..394df1743 100644\n--- a/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\n+++ b/java-checks/src/test/files/checks/LeastSpecificTypeCheck.java\n\n@@ -153,7 +153,7 @@ class A {\n \n   protected static class Visibility2 extends ProtectedBase { }\n \n-  public static void visibility(Visibility2 vis) {\n+  public static void visibility(Visibility2 vis) { // // Noncompliant {{Use 'A.ProtectedBase' here; it is a more general type than 'Visibility2'.}}\n     vis.b();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTk3NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r391759975", "bodyText": "Code after this line does not appear anywhere in the two new files, this will reduce the coverage.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-12T16:57:31Z", "path": "java-checks/src/test/files/checks/AbstractClassNoFieldShouldBeInterfaceCheck.java", "diffHunk": "@@ -1,82 +0,0 @@\n-import com.google.auto.value.AutoOneOf;\n-import com.google.auto.value.AutoValue;\n-import org.immutables.value.Value;\n-\n-abstract class A {\n-  private int b;\n-\n-  abstract void method();\n-}\n-abstract class B { // Noncompliant [[sc=16;ec=17]] {{Convert the abstract class \"B\" into an interface.}}\n-  int method(){\n-    return 1;\n-  }\n-  class F {}\n-}\n-class C {\n-  int method(){\n-    return 1;\n-  }\n-}\n-\n-abstract class D {\n-  protected void method() {\n-\n-  }\n-}\n-\n-abstract class E extends A {\n-}\n-\n-public abstract class F {\n-  public abstract double v();\n-\n-  @Override\n-  public String toString() {\n-    return \":\";\n-  }\n-}\n-\n-public abstract class G {\n-  public abstract double v();\n-\n-  public String toString() {\n-    return \":\";\n-  }\n-}\n-", "originalCommit": "9e58531cdbf73a6afccf0434f0eda4e384cc2039", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa4c7d348e779f8d399c56b0b8c8f3f6759ae81b", "chunk": "diff --git a/java-checks/src/test/files/checks/AbstractClassNoFieldShouldBeInterfaceCheck.java b/java-checks/src/test/files/checks/AbstractClassNoFieldShouldBeInterfaceCheck.java\nnew file mode 100644\nindex 000000000..6195fdb48\n--- /dev/null\n+++ b/java-checks/src/test/files/checks/AbstractClassNoFieldShouldBeInterfaceCheck.java\n\n@@ -0,0 +1,82 @@\n+import com.google.auto.value.AutoOneOf;\n+import com.google.auto.value.AutoValue;\n+import org.immutables.value.Value;\n+\n+abstract class A {\n+  private int b;\n+\n+  abstract void method();\n+}\n+abstract class B { // Noncompliant [[sc=16;ec=17]] {{Convert the abstract class \"B\" into an interface.}}\n+  int method(){\n+    return 1;\n+  }\n+  class F {}\n+}\n+class C {\n+  int method(){\n+    return 1;\n+  }\n+}\n+\n+abstract class D {\n+  protected void method() {\n+\n+  }\n+}\n+\n+abstract class E extends A {\n+}\n+\n+public abstract class F {\n+  public abstract double v();\n+\n+  @Override\n+  public String toString() {\n+    return \":\";\n+  }\n+}\n+\n+public abstract class G {\n+  public abstract double v();\n+\n+  public String toString() {\n+    return \":\";\n+  }\n+}\n+\n+public abstract class Car { // Compliant - has private methods\n+  public void start() {\n+      turnOnLights();\n+      startEngine();\n+  }\n+\n+  public abstract void stop();\n+\n+  private void turnOnLights() {}\n+  private void startEngine() {}\n+}\n+\n+@AutoValue\n+abstract class Foo { // Compliant\n+  static Foo create(String name) {\n+    return new AutoValue_Foo(name);\n+  }\n+  abstract String name();\n+  @AutoValue.Builder\n+  abstract static class Builder {\n+    abstract Builder namer(String name);\n+  }\n+}\n+\n+@AutoOneOf(StringOrInteger.Kind.class)\n+abstract class StringOrInteger { // Compliant\n+  public enum Kind {\n+    STRING, INTEGER\n+  }\n+}\n+\n+@Value.Immutable\n+abstract class Bar { // Compliant\n+  abstract String name();\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4Nzg3OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r392087879", "bodyText": "No deprecation for this file?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-13T08:28:16Z", "path": "java-checks-testkit/src/main/java/org/sonar/java/checks/verifier/MultipleFilesJavaCheckVerifier.java", "diffHunk": "@@ -39,7 +29,10 @@\n  * The main difference is that this class run a check on multiple files and verifies the results at the end of analysis.\n  */\n @Beta\n-public class MultipleFilesJavaCheckVerifier extends CheckVerifier {\n+public final class MultipleFilesJavaCheckVerifier {", "originalCommit": "9e58531cdbf73a6afccf0434f0eda4e384cc2039", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDUxMw==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r392874513", "bodyText": "good point!", "author": "m-g-sonar", "createdAt": "2020-03-16T09:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4Nzg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa1b0749678147579654f10f22e0159641b9e039", "chunk": "diff --git a/java-checks-testkit/src/main/java/org/sonar/java/checks/verifier/MultipleFilesJavaCheckVerifier.java b/java-checks-testkit/src/main/java/org/sonar/java/checks/verifier/MultipleFilesJavaCheckVerifier.java\nindex c4d5dd67f..2b30f964f 100644\n--- a/java-checks-testkit/src/main/java/org/sonar/java/checks/verifier/MultipleFilesJavaCheckVerifier.java\n+++ b/java-checks-testkit/src/main/java/org/sonar/java/checks/verifier/MultipleFilesJavaCheckVerifier.java\n\n@@ -27,8 +27,11 @@ import org.sonar.plugins.java.api.JavaFileScanner;\n  * Please read the documentation of @see org.sonar.java.checks.verifier.JavaCheckVerifier\n  *\n  * The main difference is that this class run a check on multiple files and verifies the results at the end of analysis.\n+ *\n+ * @deprecated This class is deprecated, all its features can be achieved by using {@link JavaCheckVerifier#newVerifier()} instead.\n  */\n @Beta\n+@Deprecated\n public final class MultipleFilesJavaCheckVerifier {\n \n   private MultipleFilesJavaCheckVerifier() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjExMTE4Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/2871#discussion_r392111183", "bodyText": "at least sounds strange to me here, maybe reword as:\nIt is required to provide to the verifier at least the following.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-13T09:20:07Z", "path": "java-frontend/src/main/java/org/sonar/java/testing/CheckVerifier.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.testing;\n+\n+import java.io.File;\n+import java.util.Collection;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+\n+/**\n+ * This interface defines how to use checks (rules) verifiers. It's goal is to provide all the required information\n+ * to the analyzer to verify checks' expected behavior.\n+ * <p>\n+ * The starting point to define a verifier is {@link #newVerifier()}. Then, configuration can be specified.\n+ * <p>\n+ * It is required to provide at least to the verifier the following:", "originalCommit": "9e58531cdbf73a6afccf0434f0eda4e384cc2039", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa1b0749678147579654f10f22e0159641b9e039", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/testing/CheckVerifier.java b/java-frontend/src/main/java/org/sonar/java/testing/CheckVerifier.java\nindex e017268d7..d375df373 100644\n--- a/java-frontend/src/main/java/org/sonar/java/testing/CheckVerifier.java\n+++ b/java-frontend/src/main/java/org/sonar/java/testing/CheckVerifier.java\n\n@@ -29,7 +29,7 @@ import org.sonar.plugins.java.api.JavaFileScanner;\n  * <p>\n  * The starting point to define a verifier is {@link #newVerifier()}. Then, configuration can be specified.\n  * <p>\n- * It is required to provide at least to the verifier the following:\n+ * It is required to provide to the verifier at least the following:\n  * <ul>\n  *   <li>A rule, by calling {@link #withCheck(JavaFileScanner)}, or {@link #withChecks(JavaFileScanner...)}</li>\n  *   <li>A test file, by calling {@link #onFile(String)}, {@link #onFiles(String...)}, or {@link #onFiles(Collection)}</li>\n"}}, {"oid": "aa4c7d348e779f8d399c56b0b8c8f3f6759ae81b", "url": "https://github.com/SonarSource/sonar-java/commit/aa4c7d348e779f8d399c56b0b8c8f3f6759ae81b", "message": "SONARJAVA-3315 Unify CheckVerifiers", "committedDate": "2020-03-16T09:17:04Z", "type": "commit"}, {"oid": "aa1b0749678147579654f10f22e0159641b9e039", "url": "https://github.com/SonarSource/sonar-java/commit/aa1b0749678147579654f10f22e0159641b9e039", "message": "Fix from review", "committedDate": "2020-03-16T10:40:04Z", "type": "commit"}, {"oid": "aa1b0749678147579654f10f22e0159641b9e039", "url": "https://github.com/SonarSource/sonar-java/commit/aa1b0749678147579654f10f22e0159641b9e039", "message": "Fix from review", "committedDate": "2020-03-16T10:40:04Z", "type": "forcePushed"}]}