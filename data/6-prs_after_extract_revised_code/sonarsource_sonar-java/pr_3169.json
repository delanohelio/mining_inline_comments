{"pr_number": 3169, "pr_title": "SONARJAVA-3372 Rule S5803: Class members annotated with @VisibleForTesting should not be accessed from production code", "pr_createdAt": "2020-09-07T11:10:25Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3169", "timeline": [{"oid": "563dc0ced23e798ed55fa0f95aaac8e7e140051e", "url": "https://github.com/SonarSource/sonar-java/commit/563dc0ced23e798ed55fa0f95aaac8e7e140051e", "message": "Basic Implementation", "committedDate": "2020-09-07T11:16:18Z", "type": "forcePushed"}, {"oid": "76054202705491c19ff6b4e05985db1c8aa0175c", "url": "https://github.com/SonarSource/sonar-java/commit/76054202705491c19ff6b4e05985db1c8aa0175c", "message": "Add class check & refactoring\n\nFix ruling tests", "committedDate": "2020-09-07T13:00:21Z", "type": "forcePushed"}, {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de", "url": "https://github.com/SonarSource/sonar-java/commit/2624d79bad1c750ef365cbdd446f4af071acd1de", "message": "Add class check & refactoring\n\nFix ruling tests", "committedDate": "2020-09-07T13:29:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODgxOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484528819", "bodyText": "Why not be even more precise and add the folder which will contain directly the classes we are searching for?", "author": "m-g-sonar", "createdAt": "2020-09-07T17:23:09Z", "path": "java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.sonar.java.checks.verifier.JavaCheckVerifier;\n+import org.sonar.java.testing.FilesUtils;\n+\n+import static org.sonar.java.CheckTestUtils.testSourcesPath;\n+\n+class VisibleForTestingUsageCheckTest {\n+  @Test\n+  void test() {\n+    List<File> classPath = FilesUtils.getClassPath(FilesUtils.DEFAULT_TEST_JARS_DIRECTORY);\n+    classPath.add(new File(\"../java-checks-test-sources/target/classes\"));", "originalCommit": "2624d79bad1c750ef365cbdd446f4af071acd1de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "chunk": "diff --git a/java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/tests/JUnitCompatibleAnnotationsCheckTest.java\nsimilarity index 69%\nrename from java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java\nrename to java-checks/src/test/java/org/sonar/java/checks/tests/JUnitCompatibleAnnotationsCheckTest.java\nindex baebec1fd..67664357f 100644\n--- a/java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java\n+++ b/java-checks/src/test/java/org/sonar/java/checks/tests/JUnitCompatibleAnnotationsCheckTest.java\n\n@@ -17,25 +17,19 @@\n  * along with this program; if not, write to the Free Software Foundation,\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n-package org.sonar.java.checks;\n+package org.sonar.java.checks.tests;\n \n-import java.io.File;\n-import java.util.List;\n import org.junit.jupiter.api.Test;\n import org.sonar.java.checks.verifier.JavaCheckVerifier;\n-import org.sonar.java.testing.FilesUtils;\n \n import static org.sonar.java.CheckTestUtils.testSourcesPath;\n \n-class VisibleForTestingUsageCheckTest {\n+class JUnitCompatibleAnnotationsCheckTest {\n   @Test\n   void test() {\n-    List<File> classPath = FilesUtils.getClassPath(FilesUtils.DEFAULT_TEST_JARS_DIRECTORY);\n-    classPath.add(new File(\"../java-checks-test-sources/target/classes\"));\n     JavaCheckVerifier.newVerifier()\n-      .withClassPath(classPath)\n-      .onFile(testSourcesPath(\"checks/VisibleForTestingUsageCheck/Service.java\"))\n-      .withCheck(new VisibleForTestingUsageCheck())\n+      .onFile(testSourcesPath(\"checks/JUnitCompatibleAnnotationsCheck.java\"))\n+      .withCheck(new JUnitCompatibleAnnotationsCheck())\n       .verifyIssues();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjIwMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532202", "bodyText": "Here is the only missing condition in term of coverage (owner == null probably).\nI feel that we might be missing the point. For me, the only way to have a missing owner is to have a symbol not correctly resolved, and, therefore, marked as being unknown (package symbols can not occur here). I would consequently only test like this:\nreturn !symbol.isUnknown() && (symbol.isTypeSymbol() || symbol.owner().isTypeSymbol());\nNow, in order to cover it, simply create a test file under java-checks-test-sources/src/main/files/non-compiling/checks, and then add a test such as:\n  @Test\n  void test_non_compiling() {\n    JavaCheckVerifier.newVerifier()\n      .onFile(nonCompilingTestSourcesPath(\"checks/VisibleForTestingUsageCheck.java\"))\n      .withCheck(new VisibleForTestingUsageCheck())\n      .verifyIssues();\n  }\nAnd as a test code something like:\nclass VisibleForTestingUsageCheck {\n  @com.google.common.annotations.VisibleForTesting \n  void bar() { }\n\n  void foo() {\n    unknown(); // Compliant\n  }\n}\n\nclass VisibleForTestingUsageCheck2 {\n  void qix() {\n    new VisibleForTestingUsageCheck()\n      .bar(); // Noncompliant\n  }\n}", "author": "m-g-sonar", "createdAt": "2020-09-07T17:40:05Z", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n+      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n+      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n+        identifier.name()));\n+    }\n+  }\n+\n+  private static boolean isFieldMethodOrClass(Symbol symbol) {\n+    Symbol owner = symbol.owner();\n+    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();", "originalCommit": "2624d79bad1c750ef365cbdd446f4af071acd1de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java b/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\ndeleted file mode 100644\nindex c0d79c37d..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import org.sonar.check.Rule;\n-import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n-import org.sonar.plugins.java.api.tree.IdentifierTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-\n-@Rule(key = \"S5803\")\n-public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n-\n-  private static final List<String> ANNOTATIONS = Arrays.asList(\n-    \"com.google.common.annotations.VisibleForTesting\",\n-    \"org.assertj.core.util.VisibleForTesting\",\n-    \"androidx.annotation.VisibleForTesting\",\n-    \"org.apache.flink.annotation.VisibleForTesting\"\n-  );\n-\n-  @Override\n-  public List<Tree.Kind> nodesToVisit() {\n-    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n-  }\n-\n-  @Override\n-  public void visitNode(Tree tree) {\n-    IdentifierTree identifier = (IdentifierTree) tree;\n-    Symbol symbol = identifier.symbol();\n-    SymbolMetadata metadata = symbol.metadata();\n-    if (metadata.annotations().isEmpty()) {\n-      return;\n-    }\n-\n-    boolean inTheSameFile = symbol.declaration() != null;\n-    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n-      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n-      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n-        identifier.name()));\n-    }\n-  }\n-\n-  private static boolean isFieldMethodOrClass(Symbol symbol) {\n-    Symbol owner = symbol.owner();\n-    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjM0NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532345", "bodyText": "you can probably already return here if the symbol is unknown.", "author": "m-g-sonar", "createdAt": "2020-09-07T17:40:43Z", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();", "originalCommit": "2624d79bad1c750ef365cbdd446f4af071acd1de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java b/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\ndeleted file mode 100644\nindex c0d79c37d..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import org.sonar.check.Rule;\n-import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n-import org.sonar.plugins.java.api.tree.IdentifierTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-\n-@Rule(key = \"S5803\")\n-public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n-\n-  private static final List<String> ANNOTATIONS = Arrays.asList(\n-    \"com.google.common.annotations.VisibleForTesting\",\n-    \"org.assertj.core.util.VisibleForTesting\",\n-    \"androidx.annotation.VisibleForTesting\",\n-    \"org.apache.flink.annotation.VisibleForTesting\"\n-  );\n-\n-  @Override\n-  public List<Tree.Kind> nodesToVisit() {\n-    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n-  }\n-\n-  @Override\n-  public void visitNode(Tree tree) {\n-    IdentifierTree identifier = (IdentifierTree) tree;\n-    Symbol symbol = identifier.symbol();\n-    SymbolMetadata metadata = symbol.metadata();\n-    if (metadata.annotations().isEmpty()) {\n-      return;\n-    }\n-\n-    boolean inTheSameFile = symbol.declaration() != null;\n-    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n-      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n-      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n-        identifier.name()));\n-    }\n-  }\n-\n-  private static boolean isFieldMethodOrClass(Symbol symbol) {\n-    Symbol owner = symbol.owner();\n-    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjk2OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532969", "bodyText": "in fact, isFieldMethodOrClass() is probably simply !symbol.isUnknown() && !symbol.isPackageSymbol().\nBy construction, it will then only be a method, a variable or a type... As we don't have other kinds of symbol.", "author": "m-g-sonar", "createdAt": "2020-09-07T17:43:32Z", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile", "originalCommit": "2624d79bad1c750ef365cbdd446f4af071acd1de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNjY3NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484706674", "bodyText": "@m-g-sonar for methods and classes it's easy, we can test them with symbol.isMethodSymbol() for symbol.isTypeSymbol().\nBut for fields, symbol.isVariableSymbol() is not enough. We want to exclude local variables, method parameters, and lambda parameters. I think the owner of a local variable is the method declaration. What is the best way to test if a symbol is a class field?", "author": "alban-auzeill", "createdAt": "2020-09-08T07:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java b/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\ndeleted file mode 100644\nindex c0d79c37d..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import org.sonar.check.Rule;\n-import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n-import org.sonar.plugins.java.api.tree.IdentifierTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-\n-@Rule(key = \"S5803\")\n-public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n-\n-  private static final List<String> ANNOTATIONS = Arrays.asList(\n-    \"com.google.common.annotations.VisibleForTesting\",\n-    \"org.assertj.core.util.VisibleForTesting\",\n-    \"androidx.annotation.VisibleForTesting\",\n-    \"org.apache.flink.annotation.VisibleForTesting\"\n-  );\n-\n-  @Override\n-  public List<Tree.Kind> nodesToVisit() {\n-    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n-  }\n-\n-  @Override\n-  public void visitNode(Tree tree) {\n-    IdentifierTree identifier = (IdentifierTree) tree;\n-    Symbol symbol = identifier.symbol();\n-    SymbolMetadata metadata = symbol.metadata();\n-    if (metadata.annotations().isEmpty()) {\n-      return;\n-    }\n-\n-    boolean inTheSameFile = symbol.declaration() != null;\n-    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n-      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n-      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n-        identifier.name()));\n-    }\n-  }\n-\n-  private static boolean isFieldMethodOrClass(Symbol symbol) {\n-    Symbol owner = symbol.owner();\n-    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzUwNA==", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484533504", "bodyText": "I think I would move this below, after we are sure it's a valid symbol to be considered", "author": "m-g-sonar", "createdAt": "2020-09-07T17:46:07Z", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {", "originalCommit": "2624d79bad1c750ef365cbdd446f4af071acd1de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java b/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\ndeleted file mode 100644\nindex c0d79c37d..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import org.sonar.check.Rule;\n-import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n-import org.sonar.plugins.java.api.tree.IdentifierTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-\n-@Rule(key = \"S5803\")\n-public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n-\n-  private static final List<String> ANNOTATIONS = Arrays.asList(\n-    \"com.google.common.annotations.VisibleForTesting\",\n-    \"org.assertj.core.util.VisibleForTesting\",\n-    \"androidx.annotation.VisibleForTesting\",\n-    \"org.apache.flink.annotation.VisibleForTesting\"\n-  );\n-\n-  @Override\n-  public List<Tree.Kind> nodesToVisit() {\n-    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n-  }\n-\n-  @Override\n-  public void visitNode(Tree tree) {\n-    IdentifierTree identifier = (IdentifierTree) tree;\n-    Symbol symbol = identifier.symbol();\n-    SymbolMetadata metadata = symbol.metadata();\n-    if (metadata.annotations().isEmpty()) {\n-      return;\n-    }\n-\n-    boolean inTheSameFile = symbol.declaration() != null;\n-    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n-      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n-      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n-        identifier.name()));\n-    }\n-  }\n-\n-  private static boolean isFieldMethodOrClass(Symbol symbol) {\n-    Symbol owner = symbol.owner();\n-    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();\n-  }\n-}\n"}}, {"oid": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "url": "https://github.com/SonarSource/sonar-java/commit/32b6afaf11d17af6a576511b62f17a464e4c54b8", "message": "Initial commit", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "aa2793945b29b6c4f328685a0453313832531c1a", "url": "https://github.com/SonarSource/sonar-java/commit/aa2793945b29b6c4f328685a0453313832531c1a", "message": "WIP", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "fcec0331aa04b6a9625a174a3700aa7621bf0088", "url": "https://github.com/SonarSource/sonar-java/commit/fcec0331aa04b6a9625a174a3700aa7621bf0088", "message": "Basic Implementation", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "3ee829b158bf13905b37bcf2aac523b2d7ab87c2", "url": "https://github.com/SonarSource/sonar-java/commit/3ee829b158bf13905b37bcf2aac523b2d7ab87c2", "message": "Add constructor check", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "b5e075e9877b84e25851edcc704b7c21a9c14510", "url": "https://github.com/SonarSource/sonar-java/commit/b5e075e9877b84e25851edcc704b7c21a9c14510", "message": "Add class check & refactoring\n\nFix ruling tests", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "32090b4c9b8f4159d25955b65ee54fe51c15a330", "url": "https://github.com/SonarSource/sonar-java/commit/32090b4c9b8f4159d25955b65ee54fe51c15a330", "message": "WIP", "committedDate": "2020-09-08T13:30:03Z", "type": "commit"}, {"oid": "e595834f9d770dfe57dab1a6c2b6cffb888312d8", "url": "https://github.com/SonarSource/sonar-java/commit/e595834f9d770dfe57dab1a6c2b6cffb888312d8", "message": "Update Implementation to report only first issue", "committedDate": "2020-09-09T06:19:59Z", "type": "forcePushed"}, {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "url": "https://github.com/SonarSource/sonar-java/commit/56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "message": "Update Implementation to report only first issue", "committedDate": "2020-09-09T07:04:43Z", "type": "commit"}, {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "url": "https://github.com/SonarSource/sonar-java/commit/56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "message": "Update Implementation to report only first issue", "committedDate": "2020-09-09T07:04:43Z", "type": "forcePushed"}, {"oid": "c34c25805b8cf00c1bb548ccab1b7050b8a3ad91", "url": "https://github.com/SonarSource/sonar-java/commit/c34c25805b8cf00c1bb548ccab1b7050b8a3ad91", "message": "Update rule description", "committedDate": "2020-09-09T09:11:26Z", "type": "commit"}]}