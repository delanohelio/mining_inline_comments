{"pr_number": 2877, "pr_title": "SONARJAVA-3322 S2441: handle unknown types", "pr_createdAt": "2020-03-17T10:16:53Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2877", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2OTQwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/2877#discussion_r394369400", "bodyText": "So it means that an argument with unknown type is considered as not serializable?\nShould we consider making the unknown check inside isNotSerializable and provide the same behavior for all rules using it?\nI'm saying this since the other rule (S2118) using isNotSerializable is also reporting an arguable issue with a similar message if we run it against an unknown type.\n\nMake the \"!Unknown!\" class \"Serializable\" or don't write it.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-18T14:03:46Z", "path": "java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java", "diffHunk": "@@ -44,6 +44,9 @@\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n     ExpressionTree argument = mit.arguments().get(1);\n     Type type = argument.symbolType();\n+    if (type.isUnknown()) {\n+      return;\n+    }\n     if (ExpressionsHelper.isNotSerializable(argument)) {", "originalCommit": "a0fb42ff6b0451762a8f958a1474c8f8c375f962", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNzQwMg==", "url": "https://github.com/SonarSource/sonar-java/pull/2877#discussion_r394407402", "bodyText": "Argh, I didn't realized that we were calling ExpresisonHelper to detect this. Good catch, I'm going to move the fix in the Helper class.", "author": "m-g-sonar", "createdAt": "2020-03-18T14:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2OTQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "7afe19b8826e348ffd1a06930a5ab0acfe948f94", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java b/java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java\nindex 4b209d6b3..8cb587bcd 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java\n\n@@ -44,12 +44,9 @@ public class SerializableObjectInSessionCheck extends AbstractMethodDetection {\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n     ExpressionTree argument = mit.arguments().get(1);\n     Type type = argument.symbolType();\n-    if (type.isUnknown()) {\n-      return;\n-    }\n     if (ExpressionsHelper.isNotSerializable(argument)) {\n       String andParameters = JUtils.isParametrized(type) ? \" and its parameters\" : \"\";\n-      reportIssue(argument, \"Make \\\"\" + type + \"\\\"\" + andParameters + \" serializable or don't store it in the session.\");\n+      reportIssue(argument, \"Make \\\"\" + type.name() + \"\\\"\" + andParameters + \" serializable or don't store it in the session.\");\n     }\n   }\n \n"}}, {"oid": "2967ff9d500f25e93dce5a0c9d04bb3cfcc3a9a9", "url": "https://github.com/SonarSource/sonar-java/commit/2967ff9d500f25e93dce5a0c9d04bb3cfcc3a9a9", "message": "SONARJAVA-3322 handle unknown types", "committedDate": "2020-03-18T15:43:59Z", "type": "commit"}, {"oid": "7afe19b8826e348ffd1a06930a5ab0acfe948f94", "url": "https://github.com/SonarSource/sonar-java/commit/7afe19b8826e348ffd1a06930a5ab0acfe948f94", "message": "SONARJAVA-3322 Move logic regarding unknown type into helper class", "committedDate": "2020-03-18T16:00:43Z", "type": "commit"}, {"oid": "7afe19b8826e348ffd1a06930a5ab0acfe948f94", "url": "https://github.com/SonarSource/sonar-java/commit/7afe19b8826e348ffd1a06930a5ab0acfe948f94", "message": "SONARJAVA-3322 Move logic regarding unknown type into helper class", "committedDate": "2020-03-18T16:00:43Z", "type": "forcePushed"}]}