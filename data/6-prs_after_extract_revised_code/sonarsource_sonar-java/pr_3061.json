{"pr_number": 3061, "pr_title": "SONARJAVA-3419 Rule S5854: Regex containing characters subjects to normalization should use the CANON_EQ flag", "pr_createdAt": "2020-06-26T07:51:04Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3061", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzOTYxNw==", "url": "https://github.com/SonarSource/sonar-java/pull/3061#discussion_r446139617", "bodyText": "Nice catch that enabling the flag might require using a different method and to include this in the message. \ud83d\udc4d", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-26T11:58:17Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.text.Normalizer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassTree;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.java.regex.ast.SequenceTree;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5854\")\n+public class CanonEqFlagInRegexCheck extends AbstractRegexCheck {\n+\n+  protected static final MethodMatchers STRING_MATCHES = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"matches\")\n+    .addParametersMatcher(JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers STRING_REPLACE_ALL = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"replaceAll\")\n+    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers STRING_REPLACE_FIRST = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"replaceFirst\")\n+    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers PATTERN_MATCHES = MethodMatchers.create()\n+    .ofTypes(\"java.util.regex.Pattern\")\n+    .names(\"matches\")\n+    .addParametersMatcher(JAVA_LANG_STRING, \"java.lang.CharSequence\")\n+    .build();\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (regexForLiterals.getInitialFlags().contains(Pattern.CANON_EQ)) {\n+      return;\n+    }\n+    PlainCharacterVisitor visitor = new PlainCharacterVisitor();\n+    visitor.visit(regexForLiterals);\n+\n+    if (!visitor.subjectToNormalization.isEmpty()) {\n+      String endOfMessage;\n+      if (STRING_MATCHES.matches(mit) || PATTERN_MATCHES.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(regex, CANON_EQ).matcher(input).matches()\\\"\";\n+      } else if (STRING_REPLACE_ALL.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceAll(replacement)\\\"\";\n+      } else if (STRING_REPLACE_FIRST.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceFirst(replacement)\\\"\";\n+      } else {\n+        endOfMessage = \"this pattern\";\n+      }", "originalCommit": "6003e8dd63331c84913cfdb4b6a734d16b088784", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d3d72ec743df08d99758f4246ae612eeb81eb6cb", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java b/java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java\ndeleted file mode 100644\nindex a42e26eb9..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java\n+++ /dev/null\n\n@@ -1,136 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.regex;\n-\n-import java.text.Normalizer;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-import org.sonar.check.Rule;\n-import org.sonar.java.regex.RegexParseResult;\n-import org.sonar.java.regex.ast.CharacterClassTree;\n-import org.sonar.java.regex.ast.JavaCharacter;\n-import org.sonar.java.regex.ast.PlainCharacterTree;\n-import org.sonar.java.regex.ast.RegexBaseVisitor;\n-import org.sonar.java.regex.ast.RegexTree;\n-import org.sonar.java.regex.ast.SequenceTree;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-\n-@Rule(key = \"S5854\")\n-public class CanonEqFlagInRegexCheck extends AbstractRegexCheck {\n-\n-  protected static final MethodMatchers STRING_MATCHES = MethodMatchers.create()\n-    .ofTypes(JAVA_LANG_STRING)\n-    .names(\"matches\")\n-    .addParametersMatcher(JAVA_LANG_STRING)\n-    .build();\n-\n-  protected static final MethodMatchers STRING_REPLACE_ALL = MethodMatchers.create()\n-    .ofTypes(JAVA_LANG_STRING)\n-    .names(\"replaceAll\")\n-    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n-    .build();\n-\n-  protected static final MethodMatchers STRING_REPLACE_FIRST = MethodMatchers.create()\n-    .ofTypes(JAVA_LANG_STRING)\n-    .names(\"replaceFirst\")\n-    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n-    .build();\n-\n-  protected static final MethodMatchers PATTERN_MATCHES = MethodMatchers.create()\n-    .ofTypes(\"java.util.regex.Pattern\")\n-    .names(\"matches\")\n-    .addParametersMatcher(JAVA_LANG_STRING, \"java.lang.CharSequence\")\n-    .build();\n-\n-  @Override\n-  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n-    if (regexForLiterals.getInitialFlags().contains(Pattern.CANON_EQ)) {\n-      return;\n-    }\n-    PlainCharacterVisitor visitor = new PlainCharacterVisitor();\n-    visitor.visit(regexForLiterals);\n-\n-    if (!visitor.subjectToNormalization.isEmpty()) {\n-      String endOfMessage;\n-      if (STRING_MATCHES.matches(mit) || PATTERN_MATCHES.matches(mit)) {\n-        endOfMessage = \"\\\"Pattern.compile(regex, CANON_EQ).matcher(input).matches()\\\"\";\n-      } else if (STRING_REPLACE_ALL.matches(mit)) {\n-        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceAll(replacement)\\\"\";\n-      } else if (STRING_REPLACE_FIRST.matches(mit)) {\n-        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceFirst(replacement)\\\"\";\n-      } else {\n-        endOfMessage = \"this pattern\";\n-      }\n-\n-      reportIssue(regexForLiterals.getResult(), String.format(\"Use the CANON_EQ flag with %s.\", endOfMessage), null, visitor.subjectToNormalization);\n-    }\n-  }\n-\n-  private static class PlainCharacterVisitor extends RegexBaseVisitor {\n-\n-    private final List<RegexIssueLocation> subjectToNormalization = new ArrayList<>();\n-\n-    @Override\n-    public void visitSequence(SequenceTree tree) {\n-      char previousChar = 0;\n-\n-      for (RegexTree element : tree.getItems()) {\n-        if (element.is(RegexTree.Kind.PLAIN_CHARACTER)) {\n-          JavaCharacter currentCharacter = ((PlainCharacterTree) element).getContents();\n-\n-          if (!currentCharacter.isEscapedUnicode()) {\n-            if (canCanonicallyCombine(previousChar, currentCharacter.getCharacter())) {\n-              subjectToNormalization.add(new RegexIssueLocation(tree, \"\"));\n-            }\n-            previousChar = currentCharacter.getCharacter();\n-            continue;\n-          }\n-        }\n-        previousChar = 0;\n-      }\n-\n-      super.visitSequence(tree);\n-    }\n-\n-    @Override\n-    public void visitCharacterClass(CharacterClassTree tree) {\n-      // Stop visit in classes, S5868 will report an eventual issue for it.\n-    }\n-\n-    @Override\n-    public void visitPlainCharacter(PlainCharacterTree tree) {\n-      String str = String.valueOf(tree.getCharacter());\n-      if (isSubjectToNormalization(str)) {\n-        subjectToNormalization.add(new RegexIssueLocation(tree, \"\"));\n-      }\n-    }\n-\n-    private static boolean isSubjectToNormalization(String str) {\n-      return !Normalizer.isNormalized(str, Normalizer.Form.NFD);\n-    }\n-\n-    private static boolean canCanonicallyCombine(char previousChar, char currentChar) {\n-      return Normalizer.normalize(new StringBuilder().append(previousChar).append(currentChar), Normalizer.Form.NFC).length() == 1;\n-    }\n-  }\n-\n-}\n"}}, {"oid": "d3d72ec743df08d99758f4246ae612eeb81eb6cb", "url": "https://github.com/SonarSource/sonar-java/commit/d3d72ec743df08d99758f4246ae612eeb81eb6cb", "message": "[REGEX] Flag JavaCharacter created from escaped unicode", "committedDate": "2020-06-26T12:18:40Z", "type": "commit"}, {"oid": "59a31e55a0c77145eb549bc729516fc73863b072", "url": "https://github.com/SonarSource/sonar-java/commit/59a31e55a0c77145eb549bc729516fc73863b072", "message": "SONARJAVA-3419 Rule S5854: Regex containing characters subjects to normalization should use the CANON_EQ flag", "committedDate": "2020-06-26T12:18:40Z", "type": "commit"}, {"oid": "59a31e55a0c77145eb549bc729516fc73863b072", "url": "https://github.com/SonarSource/sonar-java/commit/59a31e55a0c77145eb549bc729516fc73863b072", "message": "SONARJAVA-3419 Rule S5854: Regex containing characters subjects to normalization should use the CANON_EQ flag", "committedDate": "2020-06-26T12:18:40Z", "type": "forcePushed"}]}