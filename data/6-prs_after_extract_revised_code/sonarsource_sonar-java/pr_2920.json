{"pr_number": 2920, "pr_title": "Sonarjava 3362 junit5 test class method visibility", "pr_createdAt": "2020-04-24T09:46:39Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2920", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxODcyNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414518725", "bodyText": "We should add a test to assert that we look at org.junit.jupiter.api.Test and no other annotations.\ne.g.:\n@org.junit.Test\npublic void testPublic() {} // Compliant, JUnit 4", "author": "alban-auzeill", "createdAt": "2020-04-24T11:57:04Z", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+\n+  @Test\n+  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+\n+  @Test\n+  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+\n+  @Test\n+  void testDefault() {} // compliant\n+", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MDQyMw==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414540423", "bodyText": "\u1e81e should add a test with other modifiers (e.g. final or synchronized) to show the rule only target public, private and protected", "author": "alban-auzeill", "createdAt": "2020-04-24T12:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxODcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc88edad4db597a5c6e0080f37ecbde48e592ee8", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\nindex 7ae554b34..9b35d3171 100644\n--- a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n+++ b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n\n@@ -8,15 +8,35 @@ class TestClassAndMethodVisibilityCheckTest {\n   public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n \n   @Test\n-  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+  protected void testProtected() {} // Noncompliant\n \n   @Test\n-  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+  private void testPrivate() {} // Noncompliant\n \n   @Test\n   void testDefault() {} // compliant\n \n-  public void noTestHere() {} // compliant - this rule only applies to test methods\n+  public void notATest() {} // compliant\n \n   void noTestHereEither() {} // compliant\n+\n+  @org.junit.Test\n+  public void testWithJUnit4Annotation() {} // Compliant\n+\n+  @Test\n+  static final void staticFinalTestMethod() {} // Compliant\n+\n+  public static class WithoutTest { // Compliant\n+\n+  }\n+\n+  public static class PublicWithOneTest { // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+    @Test\n+    void test() {}\n+  }\n+\n+  static class WithOneTest { // Compliant\n+    @Test\n+    void test() {}\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMjM4MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414522381", "bodyText": "The rule target properly METHOD, but for CLASS it's more complicated. A JUnit 5 test class is a class that contains at least one test method. I would probably register only on CLASS, then check all members for test methods. So I could at the same time check if one test method exists and check if each test method is compliant.", "author": "alban-auzeill", "createdAt": "2020-04-24T12:03:34Z", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0OTAyMg==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414549022", "bodyText": "Ah of course, I'm not filtering properly, my bad", "author": "johann-beleites-sonarsource", "createdAt": "2020-04-24T12:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMjM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\nindex ec54ec4b3..b6dadf789 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n\n@@ -23,7 +23,7 @@ import java.util.Arrays;\n import java.util.List;\n import org.sonar.check.Rule;\n import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n import org.sonar.plugins.java.api.tree.ClassTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNjQwOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414526409", "bodyText": "There's not only org.junit.jupiter.api.Test that indicate it's a JUnit 5 test method, you can use UnitTestUtils.hasJUnit5TestAnnotation(...)\nI recently use it in JunitNestedAnnotationCheck:\n  private static boolean hasJUnit5TestMethods(ClassTree classTree) {\n    return classTree.members().stream()\n      .filter(member -> member.is(Tree.Kind.METHOD))\n      .map(MethodTree.class::cast)\n      .anyMatch(UnitTestUtils::hasJUnit5TestAnnotation);\n  }", "author": "alban-auzeill", "createdAt": "2020-04-24T12:10:16Z", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\nindex ec54ec4b3..b6dadf789 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n\n@@ -23,7 +23,7 @@ import java.util.Arrays;\n import java.util.List;\n import org.sonar.check.Rule;\n import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n import org.sonar.plugins.java.api.tree.ClassTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMjcyMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414532721", "bodyText": "why parallelStream() and not stream()?", "author": "alban-auzeill", "createdAt": "2020-04-24T12:21:02Z", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {\n+      Tree questionableNode = modifiers.modifiers().parallelStream()", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\nindex ec54ec4b3..b6dadf789 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n\n@@ -23,7 +23,7 @@ import java.util.Arrays;\n import java.util.List;\n import org.sonar.check.Rule;\n import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n import org.sonar.plugins.java.api.tree.ClassTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNTc2OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414535769", "bodyText": "By adding the following constant:\nprivate static final List<Modifier> NON_COMPLIANT_MODIFIERS = Arrays.asList(Modifier.PUBLIC, Modifier.PRIVATE, Modifier.PROTECTED);\n\nwe could simplify the implementation like this:\n      modifiers.modifiers().stream()\n        .filter(modifierKeyword -> NON_COMPLIANT_MODIFIERS.contains(modifierKeyword.modifier()))\n        .map(Tree.class::cast)\n        .findFirst()\n        .ifPresent(modifierKeyword -> reportIssue(modifierKeyword, \"Remove this access modifier\"));", "author": "alban-auzeill", "createdAt": "2020-04-24T12:25:58Z", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {\n+      Tree questionableNode = modifiers.modifiers().parallelStream()\n+        .filter(keywordTree -> {\n+          Modifier modifier = keywordTree.modifier();\n+          return modifier.equals(Modifier.PUBLIC) || modifier.equals(Modifier.PRIVATE) || modifier.equals(Modifier.PROTECTED);\n+        })\n+        .map(modifierKeywordTree -> (Tree) modifierKeywordTree)\n+        .findFirst()\n+        .orElse(tree);\n+\n+      reportIssue(questionableNode, \"Remove this access modifier\");", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\nindex ec54ec4b3..b6dadf789 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java\n\n@@ -23,7 +23,7 @@ import java.util.Arrays;\n import java.util.List;\n import org.sonar.check.Rule;\n import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n import org.sonar.plugins.java.api.tree.ClassTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n import org.sonar.plugins.java.api.tree.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MjU5Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414542597", "bodyText": "we should add some test cases about CLASS like:\n  public static class WithoutTest { // Compliant\n\n  }\n\n  public static class PublicWithOneTest { // Noncompliant\n    @Test\n    void test() {}\n  }\n\n  static class WithOneTest { // Compliant\n    @Test\n    void test() {}\n  }", "author": "alban-auzeill", "createdAt": "2020-04-24T12:37:20Z", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+\n+  @Test\n+  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+\n+  @Test\n+  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+\n+  @Test\n+  void testDefault() {} // compliant\n+\n+  public void noTestHere() {} // compliant - this rule only applies to test methods\n+\n+  void noTestHereEither() {} // compliant", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc88edad4db597a5c6e0080f37ecbde48e592ee8", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\nindex 7ae554b34..9b35d3171 100644\n--- a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n+++ b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n\n@@ -8,15 +8,35 @@ class TestClassAndMethodVisibilityCheckTest {\n   public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n \n   @Test\n-  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+  protected void testProtected() {} // Noncompliant\n \n   @Test\n-  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+  private void testPrivate() {} // Noncompliant\n \n   @Test\n   void testDefault() {} // compliant\n \n-  public void noTestHere() {} // compliant - this rule only applies to test methods\n+  public void notATest() {} // compliant\n \n   void noTestHereEither() {} // compliant\n+\n+  @org.junit.Test\n+  public void testWithJUnit4Annotation() {} // Compliant\n+\n+  @Test\n+  static final void staticFinalTestMethod() {} // Compliant\n+\n+  public static class WithoutTest { // Compliant\n+\n+  }\n+\n+  public static class PublicWithOneTest { // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+    @Test\n+    void test() {}\n+  }\n+\n+  static class WithOneTest { // Compliant\n+    @Test\n+    void test() {}\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0NDg2Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414544867", "bodyText": "Usually, when the message is constant, we test it only once.\nSo, here it's ok, you can use // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\nAnd elsewhere it's enough to use // Noncompliant, without the location and the message", "author": "alban-auzeill", "createdAt": "2020-04-24T12:41:07Z", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}", "originalCommit": "e128e6d15536aeb7fe0955d14a5822c48627849d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc88edad4db597a5c6e0080f37ecbde48e592ee8", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\nindex 7ae554b34..9b35d3171 100644\n--- a/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n+++ b/java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java\n\n@@ -8,15 +8,35 @@ class TestClassAndMethodVisibilityCheckTest {\n   public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n \n   @Test\n-  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+  protected void testProtected() {} // Noncompliant\n \n   @Test\n-  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+  private void testPrivate() {} // Noncompliant\n \n   @Test\n   void testDefault() {} // compliant\n \n-  public void noTestHere() {} // compliant - this rule only applies to test methods\n+  public void notATest() {} // compliant\n \n   void noTestHereEither() {} // compliant\n+\n+  @org.junit.Test\n+  public void testWithJUnit4Annotation() {} // Compliant\n+\n+  @Test\n+  static final void staticFinalTestMethod() {} // Compliant\n+\n+  public static class WithoutTest { // Compliant\n+\n+  }\n+\n+  public static class PublicWithOneTest { // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+    @Test\n+    void test() {}\n+  }\n+\n+  static class WithOneTest { // Compliant\n+    @Test\n+    void test() {}\n+  }\n }\n"}}, {"oid": "6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "url": "https://github.com/SonarSource/sonar-java/commit/6df71a7d73a0f2e87cd93756028b8f2debfafe1f", "message": "SONARJAVA-3362 Added rule S5786 checking JUnit5 test classes and methods for access modifiers - they should have none.", "committedDate": "2020-04-27T07:06:18Z", "type": "commit"}, {"oid": "c8e2f904af6cae08fe85878e74e04e47843b523d", "url": "https://github.com/SonarSource/sonar-java/commit/c8e2f904af6cae08fe85878e74e04e47843b523d", "message": "SONARJAVA-3362 Reduced code redundancy, removed access modifier from test class.", "committedDate": "2020-04-27T07:06:18Z", "type": "commit"}, {"oid": "cc88edad4db597a5c6e0080f37ecbde48e592ee8", "url": "https://github.com/SonarSource/sonar-java/commit/cc88edad4db597a5c6e0080f37ecbde48e592ee8", "message": "SONARJAVA-3362 Fixed various code style and logic issues, improved testing.", "committedDate": "2020-04-27T07:06:18Z", "type": "commit"}, {"oid": "cc88edad4db597a5c6e0080f37ecbde48e592ee8", "url": "https://github.com/SonarSource/sonar-java/commit/cc88edad4db597a5c6e0080f37ecbde48e592ee8", "message": "SONARJAVA-3362 Fixed various code style and logic issues, improved testing.", "committedDate": "2020-04-27T07:06:18Z", "type": "forcePushed"}]}