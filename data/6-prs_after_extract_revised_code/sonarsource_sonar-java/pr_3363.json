{"pr_number": 3363, "pr_title": "SONARJAVA-3645 Improve debug logs", "pr_createdAt": "2020-12-18T11:56:44Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3363", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzMzMyMw==", "url": "https://github.com/SonarSource/sonar-java/pull/3363#discussion_r545833323", "bodyText": "Maybe moving .containsOnlyOnce() to the next line and removing String concatenation will make more sense", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-18T13:33:48Z", "path": "java-frontend/src/test/java/org/sonar/java/se/xproc/BehaviorCacheTest.java", "diffHunk": "@@ -99,7 +99,8 @@ void method_behavior_cache_should_be_filled_and_cleanup() {\n   void compute_behavior_only_once() throws Exception {\n     SymbolicExecutionVisitor sev = createSymbolicExecutionVisitor(\"src/test/resources/se/ComputeBehaviorOnce.java\");\n     assertThat(sev.behaviorCache.behaviors.entrySet()).hasSize(5);\n-    assertThat(logTester.logs(LoggerLevel.DEBUG)).containsOnlyOnce(\"Could not complete symbolic execution: \");\n+    assertThat(logTester.logs(LoggerLevel.DEBUG)).containsOnlyOnce(\"Could not complete symbolic execution: \"", "originalCommit": "a615839766e76f555f1273b66f82559a35e7e6bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "chunk": "diff --git a/java-frontend/src/test/java/org/sonar/java/se/xproc/BehaviorCacheTest.java b/java-frontend/src/test/java/org/sonar/java/se/xproc/BehaviorCacheTest.java\nindex 7608e3ac0..ace31123d 100644\n--- a/java-frontend/src/test/java/org/sonar/java/se/xproc/BehaviorCacheTest.java\n+++ b/java-frontend/src/test/java/org/sonar/java/se/xproc/BehaviorCacheTest.java\n\n@@ -99,9 +99,9 @@ class BehaviorCacheTest {\n   void compute_behavior_only_once() throws Exception {\n     SymbolicExecutionVisitor sev = createSymbolicExecutionVisitor(\"src/test/resources/se/ComputeBehaviorOnce.java\");\n     assertThat(sev.behaviorCache.behaviors.entrySet()).hasSize(5);\n-    assertThat(logTester.logs(LoggerLevel.DEBUG)).containsOnlyOnce(\"Could not complete symbolic execution: \"\n-      + \"reached limit of 16000 steps for method plop#24 in class ComputeBehaviorOnce\");\n     assertThat(sev.behaviorCache.behaviors.values()).allMatch(MethodBehavior::isVisited);\n+    List<String> debugLogs = logTester.logs(LoggerLevel.DEBUG);\n+    assertThat(debugLogs).containsOnlyOnce(\"Could not complete symbolic execution: reached limit of 16000 steps for method plop#24 in class ComputeBehaviorOnce\");\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MTI5MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3363#discussion_r545851291", "bodyText": "Looks like this test and the above one are pretty similar. Will be nice if you can replace it with one parametrised.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-18T14:05:51Z", "path": "java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java", "diffHunk": "@@ -444,6 +452,10 @@ void should_include_jdk_in_libraries_when_specified_classic() {\n     assertThat(elements)\n       .hasSize(1)\n       .allMatch(file -> file.getName().equals(\"rt.jar\"));\n+    assertThat(logTester.logs(LoggerLevel.DEBUG))\n+      .hasSize(2)\n+      .anyMatch(debug -> debug.startsWith(\"Property 'sonar.java.jdkHome' resolved with:\"))\n+      .anyMatch(debug -> debug.contains(\"rt.jar\"));\n   }\n \n   @Test", "originalCommit": "a615839766e76f555f1273b66f82559a35e7e6bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "chunk": "diff --git a/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java b/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\nindex 3a1c83c34..5d5390a9c 100644\n--- a/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\n+++ b/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\n\n@@ -452,10 +444,6 @@ class ClasspathForMainTest {\n     assertThat(elements)\n       .hasSize(1)\n       .allMatch(file -> file.getName().equals(\"rt.jar\"));\n-    assertThat(logTester.logs(LoggerLevel.DEBUG))\n-      .hasSize(2)\n-      .anyMatch(debug -> debug.startsWith(\"Property 'sonar.java.jdkHome' resolved with:\"))\n-      .anyMatch(debug -> debug.contains(\"rt.jar\"));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MTk1MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3363#discussion_r545851951", "bodyText": "this empty line seems to be odd", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-18T14:06:56Z", "path": "java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java", "diffHunk": "@@ -211,6 +212,7 @@ void libraries_should_accept_relative_paths_with_wildcard() throws Exception {\n       \"lib\",\n       \"lib\",\n       \"oklog-1.0.1.aar\");\n+", "originalCommit": "a615839766e76f555f1273b66f82559a35e7e6bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "chunk": "diff --git a/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java b/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\nindex 3a1c83c34..5d5390a9c 100644\n--- a/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\n+++ b/java-frontend/src/test/java/org/sonar/java/classpath/ClasspathForMainTest.java\n\n@@ -212,7 +211,6 @@ class ClasspathForMainTest {\n       \"lib\",\n       \"lib\",\n       \"oklog-1.0.1.aar\");\n-\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MzY5MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3363#discussion_r545853691", "bodyText": "I was just wondering, Maybe it will be still useful to report empty list to say that files weren't resolved. Wdyt?", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-18T14:10:00Z", "path": "java-frontend/src/main/java/org/sonar/java/classpath/AbstractClasspath.java", "diffHunk": "@@ -78,14 +79,25 @@ protected AbstractClasspath(Configuration settings, FileSystem fs, InputFile.Typ\n   }\n \n   protected List<File> getJdkJars() {\n-    return settings.get(ClasspathProperties.SONAR_JAVA_JDK_HOME)\n+    List<File> jdkClassesRoots = settings.get(ClasspathProperties.SONAR_JAVA_JDK_HOME)\n       .flatMap(AbstractClasspath::existingDirectoryOrLog)\n       .map(File::toPath)\n       .map(JavaSdkUtil::getJdkClassesRoots)\n       .orElse(Collections.emptyList());\n+    logResolvedFiles(ClasspathProperties.SONAR_JAVA_JDK_HOME, jdkClassesRoots);\n+    return jdkClassesRoots;\n+  }\n+\n+  static void logResolvedFiles(String property, Collection<File> files) {\n+    if (LOG.isDebugEnabled() && !files.isEmpty()) {", "originalCommit": "a615839766e76f555f1273b66f82559a35e7e6bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/classpath/AbstractClasspath.java b/java-frontend/src/main/java/org/sonar/java/classpath/AbstractClasspath.java\nindex 1b1ded5b1..186c83739 100644\n--- a/java-frontend/src/main/java/org/sonar/java/classpath/AbstractClasspath.java\n+++ b/java-frontend/src/main/java/org/sonar/java/classpath/AbstractClasspath.java\n\n@@ -79,25 +78,14 @@ public abstract class AbstractClasspath {\n   }\n \n   protected List<File> getJdkJars() {\n-    List<File> jdkClassesRoots = settings.get(ClasspathProperties.SONAR_JAVA_JDK_HOME)\n+    return settings.get(ClasspathProperties.SONAR_JAVA_JDK_HOME)\n       .flatMap(AbstractClasspath::existingDirectoryOrLog)\n       .map(File::toPath)\n       .map(JavaSdkUtil::getJdkClassesRoots)\n       .orElse(Collections.emptyList());\n-    logResolvedFiles(ClasspathProperties.SONAR_JAVA_JDK_HOME, jdkClassesRoots);\n-    return jdkClassesRoots;\n-  }\n-\n-  static void logResolvedFiles(String property, Collection<File> files) {\n-    if (LOG.isDebugEnabled() && !files.isEmpty()) {\n-      LOG.debug(String.format(\"Property '%s' resolved with:%n%s\", property, files.stream()\n-        .map(File::getAbsolutePath)\n-        .collect(Collectors.joining(\",\" + System.lineSeparator(), \"[\", \"]\"))));\n-    }\n   }\n \n   private static Optional<File> existingDirectoryOrLog(String path) {\n-    LOG.debug(\"Property '{}' set with: {}\", ClasspathProperties.SONAR_JAVA_JDK_HOME, path);\n     File file = new File(path);\n     if (!file.exists() || !file.isDirectory()) {\n       String warning = \"Invalid value for '%s' property, defaulting to runtime JDK.%nConfigured location does not exists: '%s'\";\n"}}, {"oid": "7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "url": "https://github.com/SonarSource/sonar-java/commit/7e64e3a8401be0b0aeb57c0c9a616c0162f3587d", "message": "SONARJAVA-3645 Log SE interruption exception message in debug logs and stack in trace logs", "committedDate": "2020-12-18T17:00:10Z", "type": "commit"}, {"oid": "8c1b9d19a9a855602ba9c74cfdfe79a0b049daf3", "url": "https://github.com/SonarSource/sonar-java/commit/8c1b9d19a9a855602ba9c74cfdfe79a0b049daf3", "message": "SONARJAVA-3645 Log resolved classpath related properties", "committedDate": "2020-12-18T17:00:10Z", "type": "commit"}, {"oid": "8c1b9d19a9a855602ba9c74cfdfe79a0b049daf3", "url": "https://github.com/SonarSource/sonar-java/commit/8c1b9d19a9a855602ba9c74cfdfe79a0b049daf3", "message": "SONARJAVA-3645 Log resolved classpath related properties", "committedDate": "2020-12-18T17:00:10Z", "type": "forcePushed"}]}