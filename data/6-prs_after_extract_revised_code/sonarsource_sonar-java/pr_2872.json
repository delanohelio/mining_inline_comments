{"pr_number": 2872, "pr_title": "SONARJAVA-2357 Provide MethodMatcher API to be used in custom rules", "pr_createdAt": "2020-03-10T17:41:08Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2872", "timeline": [{"oid": "91d2ff2be5c7677f2e1042452b8ab457f1d35917", "url": "https://github.com/SonarSource/sonar-java/commit/91d2ff2be5c7677f2e1042452b8ab457f1d35917", "message": "POC to validate that MethodMatcher \"typeDefinition\" and \"callSite\" could be simplified into one method", "committedDate": "2020-03-10T18:06:18Z", "type": "forcePushed"}, {"oid": "49fe7b0c982f3ebb30e2a1f6d09ed3c367d5827d", "url": "https://github.com/SonarSource/sonar-java/commit/49fe7b0c982f3ebb30e2a1f6d09ed3c367d5827d", "message": "POC to validate that MethodMatcher \"typeDefinition\" and \"callSite\" could be simplified into one method (fix ruling)", "committedDate": "2020-03-17T07:32:31Z", "type": "forcePushed"}, {"oid": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "url": "https://github.com/SonarSource/sonar-java/commit/1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "message": "Implement new MethodMatchers and use it in the old MethodMatcher", "committedDate": "2020-03-17T10:29:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5NDY4MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393594680", "bodyText": "Not immutable!", "author": "alban-auzeill", "createdAt": "2020-03-17T10:56:29Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.matcher;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+public class MethodMatchersBuilder implements MethodMatchers.Builder {\n+\n+  private Predicate<Type> typePredicate;\n+  private Predicate<String> namePredicate;\n+  private Predicate<List<Type>> parametersPredicate;", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex bbbcc92e8..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n\n@@ -20,6 +20,7 @@\n package org.sonar.java.matcher;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5Nzk3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393597970", "bodyText": "Add withoutParameter(), withAnyParameters()", "author": "alban-auzeill", "createdAt": "2020-03-17T11:02:50Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.matcher;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+public class MethodMatchersBuilder implements MethodMatchers.Builder {\n+\n+  private Predicate<Type> typePredicate;\n+  private Predicate<String> namePredicate;\n+  private Predicate<List<Type>> parametersPredicate;\n+\n+  @Override\n+  public Builder ofSubType(String fullyQualifiedTypeName) {\n+    return ofType(type -> type.isSubtypeOf(fullyQualifiedTypeName));\n+  }\n+\n+  @Override\n+  public Builder ofSubTypes(String... fullyQualifiedTypeNames) {\n+    Builder builder = this;\n+    for (String name : fullyQualifiedTypeNames) {\n+      builder = builder.ofSubType(name);\n+    }\n+    return builder;\n+  }\n+\n+  @Override\n+  public Builder ofAnyType() {\n+    return ofType(type -> true);\n+  }\n+\n+  @Override\n+  public Builder ofType(String fullyQualifiedTypeName) {\n+    return ofType(type -> type.is(fullyQualifiedTypeName));\n+  }\n+\n+  @Override\n+  public Builder ofType(Predicate<Type> typePredicate) {\n+    this.typePredicate = or(this.typePredicate, typePredicate);\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder name(String methodName) {\n+    return name(methodName::equals);\n+  }\n+\n+  @Override\n+  public Builder names(String... names) {\n+    Builder builder = this;\n+    for (String name : names) {\n+      builder = builder.name(name);\n+    }\n+    return builder;\n+  }\n+\n+  @Override\n+  public Builder anyName() {\n+    return name(n -> true);\n+  }\n+\n+  @Override\n+  public Builder startWithName(String name) {\n+    return name(n -> n.startsWith(name));\n+  }\n+\n+  @Override\n+  public Builder constructor() {\n+    return name(\"<inti>\");\n+  }\n+\n+  @Override\n+  public Builder name(Predicate<String> namePredicate) {\n+    this.namePredicate = or(this.namePredicate, namePredicate);\n+    return this;\n+  }\n+\n+  @Override\n+  public Builder withParameters(String... parametersType) {\n+    return withParameters(Arrays.stream(parametersType).\n+      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+      .collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public Builder withParameters(Predicate<Type>... parametersType) {\n+    return withParameters(Arrays.asList(parametersType));\n+  }\n+", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex bbbcc92e8..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n\n@@ -20,6 +20,7 @@\n package org.sonar.java.matcher;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NTYzMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393675631", "bodyText": "Since we moved it to a public interface, we should consider adding Beta annotation.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T13:24:44Z", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api.semantic;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatchersBuilder;\n+import org.sonar.java.matcher.MethodMatchersList;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+\n+/**\n+ * Helper interface to help to identify method with given Type, Name and Parameter lists.\n+ *\n+ * The starting point to define a MethodMatcher is {@link #create()}.\n+ * It is required to provide at least the following:\n+ *\n+ * - a type definition\n+ * - a method name\n+ * - a list of parameters\n+ *\n+ * If any of the three is missing, throw an Exception.\n+ * For any of the three elements above, you can specify that any name/type is accepted by using the predicate name -> true.\n+ * It is also possible to define a name/type multiple times, to match one method OR another.\n+ *\n+ * Examples:\n+ *\n+ * - match method \"a\" and \"b\" from any type, and without parameters\n+ * MethodMatcher.create().ofAnyType().names(\"a\", \"b\").withParameters();\n+ * alternatively\n+ * MethodMatcher.create().ofAnyType().name(\"a\").name(\"b\").withParameters();\n+ *\n+ * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n+ * MethodMatcher.create().ofSubType(\"A\").names(\"a\", \"b\").startWithParameters().or(\n+ * MethodMatcher.create().ofSubType(\"B\").names(\"b\", \"c\").startWithParameters());\n+ *\n+ * - match method \"f\" with any type and with:\n+ *   MethodMatcher.create().ofAnyType().name(\"f\")\n+ *  - one parameter of type either int or long\n+ *    .withParameters(\"int\").withParameters(\"long\");\n+ *  - one parameter of type int or one parameter of type long with any other number of parameters\n+ *    .withParameters(\"int\").startWithParameters(\"long\");\n+ *\n+ * - match any method with any type, with parameter int, any, int\n+ *   MethodMatcher.create().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *\n+ * TODO: add more example\n+ *\n+ */\n+public interface MethodMatchers {", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NTAyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393745027", "bodyText": "ok, I added com.google.common.annotations.Beta", "author": "alban-auzeill", "createdAt": "2020-03-17T15:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NTYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 1eef2bb9a..6bbac08d5 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n\n@@ -19,6 +19,7 @@\n  */\n package org.sonar.plugins.java.api.semantic;\n \n+import com.google.common.annotations.Beta;\n import java.util.Arrays;\n import java.util.List;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjU3NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393676575", "bodyText": "Should we add\nMethodMatchers.Builder ofType(String... fullyQualifiedTypeName);\n?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T13:26:01Z", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api.semantic;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatchersBuilder;\n+import org.sonar.java.matcher.MethodMatchersList;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+\n+/**\n+ * Helper interface to help to identify method with given Type, Name and Parameter lists.\n+ *\n+ * The starting point to define a MethodMatcher is {@link #create()}.\n+ * It is required to provide at least the following:\n+ *\n+ * - a type definition\n+ * - a method name\n+ * - a list of parameters\n+ *\n+ * If any of the three is missing, throw an Exception.\n+ * For any of the three elements above, you can specify that any name/type is accepted by using the predicate name -> true.\n+ * It is also possible to define a name/type multiple times, to match one method OR another.\n+ *\n+ * Examples:\n+ *\n+ * - match method \"a\" and \"b\" from any type, and without parameters\n+ * MethodMatcher.create().ofAnyType().names(\"a\", \"b\").withParameters();\n+ * alternatively\n+ * MethodMatcher.create().ofAnyType().name(\"a\").name(\"b\").withParameters();\n+ *\n+ * - match method \"a\" and \"b\" from (subtype) of A, and \"b\" and \"c\" from B, with any parameters:\n+ * MethodMatcher.create().ofSubType(\"A\").names(\"a\", \"b\").startWithParameters().or(\n+ * MethodMatcher.create().ofSubType(\"B\").names(\"b\", \"c\").startWithParameters());\n+ *\n+ * - match method \"f\" with any type and with:\n+ *   MethodMatcher.create().ofAnyType().name(\"f\")\n+ *  - one parameter of type either int or long\n+ *    .withParameters(\"int\").withParameters(\"long\");\n+ *  - one parameter of type int or one parameter of type long with any other number of parameters\n+ *    .withParameters(\"int\").startWithParameters(\"long\");\n+ *\n+ * - match any method with any type, with parameter int, any, int\n+ *   MethodMatcher.create().anyName().withParameters(t-> t.is(\"int\"), t -> true, t -> t.is(\"int\"));\n+ *\n+ * TODO: add more example\n+ *\n+ */\n+public interface MethodMatchers {\n+\n+  boolean matches(NewClassTree newClassTree);\n+  boolean matches(MethodInvocationTree mit);\n+  boolean matches(MethodTree methodTree);\n+  boolean matches(MethodReferenceTree methodReferenceTree);\n+  boolean matches(Symbol symbol);\n+\n+  static MethodMatchers.Builder create() {\n+    return new MethodMatchersBuilder();\n+  }\n+\n+  // Methods related to combination\n+\n+  /**\n+   * Combine multiple method matcher. The matcher will match any of the given matcher.\n+   */\n+  static MethodMatchers or(MethodMatchers... matchers) {\n+    return new MethodMatchersList(Arrays.asList(matchers));\n+  }\n+\n+  static MethodMatchers or(List<MethodMatchers> matchers) {\n+    return new MethodMatchersList(matchers);\n+  }\n+\n+  interface Builder extends MethodMatchers {\n+\n+    // Methods related to types\n+\n+    /**\n+     * Match the type and sub-type of the fully qualified name.\n+     */\n+    MethodMatchers.Builder ofSubType(String fullyQualifiedTypeName);\n+\n+    /**\n+     * Match any of the type and sub-type of the fully qualified name.\n+     */\n+    MethodMatchers.Builder ofSubTypes(String... fullyQualifiedTypeNames);\n+\n+    /**\n+     * Match any type.\n+     */\n+    MethodMatchers.Builder ofAnyType();\n+\n+    /**\n+     * Match the fully qualified name type, but not the subtype.\n+     */\n+    MethodMatchers.Builder ofType(String fullyQualifiedTypeName);", "originalCommit": "1a6c06e28dbbb2bf4520af8d55ee2b7bcd076721", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NTkxMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393745911", "bodyText": "I added ofTypes(String... fullyQualifiedTypeNames) because of one case in java-frontend", "author": "alban-auzeill", "createdAt": "2020-03-17T15:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\nindex 1eef2bb9a..6bbac08d5 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/semantic/MethodMatchers.java\n\n@@ -19,6 +19,7 @@\n  */\n package org.sonar.plugins.java.api.semantic;\n \n+import com.google.common.annotations.Beta;\n import java.util.Arrays;\n import java.util.List;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjUxOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393706518", "bodyText": "Now that we have these two methods, do we still have the need for startWithParameters?\nThe behavior could be replaced by a call to withAnyParameters after withParameters?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-03-17T14:09:54Z", "path": "java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java", "diffHunk": "@@ -104,41 +121,52 @@ public Builder constructor() {\n \n   @Override\n   public Builder name(Predicate<String> namePredicate) {\n-    this.namePredicate = or(this.namePredicate, namePredicate);\n-    return this;\n+    return new MethodMatchersBuilder(typePredicate, or(this.namePredicate, namePredicate), parametersPredicate);\n   }\n \n   @Override\n   public Builder withParameters(String... parametersType) {\n-    return withParameters(Arrays.stream(parametersType).\n-      <Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n+    return withParameters(Arrays.stream(parametersType).<Predicate<Type>>map(parameterType -> (type -> type.is(parameterType)))\n       .collect(Collectors.toList()));\n   }\n \n   @Override\n-  public Builder withParameters(Predicate<Type>... parametersType) {\n+  @SafeVarargs\n+  public final Builder withParameters(Predicate<Type>... parametersType) {\n     return withParameters(Arrays.asList(parametersType));\n   }\n \n   private Builder withParameters(List<Predicate<Type>> parametersType) {\n     return withParameters((List<Type> actualTypes) -> exactMatchesParameters(parametersType, actualTypes));\n   }\n \n+  @Override\n+  public MethodMatchers.Builder withoutParameters() {\n+    return withParameters(Collections.emptyList());\n+  }\n+\n+  @Override\n+  public MethodMatchers.Builder withAnyParameters() {", "originalCommit": "03d55ad97aacc2dd8a089a87702f4a1152e39b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODkyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r393748927", "bodyText": "No, currently all parameters pattern are defined by the call of one method, it allows to do a or.\nif you do: .withParameters(\"int\").withParameters(\"long\").withAnyParameters() it raises a new IllegalStateException(\"Incompatible 'any parameters' constraint added to existing parameters constraint.\")", "author": "alban-auzeill", "createdAt": "2020-03-17T15:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcwNjUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "d69ff080ef8e177edf394efbda5639e6ed030220", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\nindex 39689d9c9..7f4a46342 100644\n--- a/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n+++ b/java-frontend/src/main/java/org/sonar/java/matcher/MethodMatchersBuilder.java\n\n@@ -116,7 +131,7 @@ public class MethodMatchersBuilder implements MethodMatchers.Builder {\n \n   @Override\n   public Builder constructor() {\n-    return name(\"<inti>\");\n+    return name(\"<init>\");\n   }\n \n   @Override\n"}}, {"oid": "d69ff080ef8e177edf394efbda5639e6ed030220", "url": "https://github.com/SonarSource/sonar-java/commit/d69ff080ef8e177edf394efbda5639e6ed030220", "message": "Update MethodMatchers documentation and unit tests", "committedDate": "2020-03-17T19:08:06Z", "type": "forcePushed"}, {"oid": "643286abea06a41819926f6a7ab2787d693f1b9b", "url": "https://github.com/SonarSource/sonar-java/commit/643286abea06a41819926f6a7ab2787d693f1b9b", "message": "Update getMethodInvocationMatchers() to return MethodMatchers", "committedDate": "2020-03-18T05:29:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzNTEwOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2872#discussion_r394835108", "bodyText": "Duplicated line", "author": "alban-auzeill", "createdAt": "2020-03-19T07:33:59Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java", "diffHunk": "@@ -48,47 +47,28 @@\n   private static final String MATH_PACKAGE_NAME = \"java.lang.Math\";\n   private static final String ROUND = \"round\";\n \n-  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS = MethodMatchers.or(\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(\"int\"),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ABS).addParameter(\"long\")\n-  );\n+  private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ABS)\n+      .withParameters(DOUBLE)\n+      .withParameters(FLOAT)\n+      .withParameters(\"int\")\n+      .withParameters(\"long\");\n \n   private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(CEIL).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(CEIL).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).addParameter(FLOAT),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ROUND).addParameter(DOUBLE),\n-    MethodMatcher.create().ofType(MATH_PACKAGE_NAME).name(ROUND).addParameter(FLOAT)\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(CEIL).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").withParameters(DOUBLE),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT),\n+    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT)", "originalCommit": "264bd7434f6f6f13df4e2c549b06d0ddab579f86", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\nindex 38144cfdd..a541f3511 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ConstantMathCheck.java\n\n@@ -48,27 +48,27 @@ public class ConstantMathCheck extends IssuableSubscriptionVisitor {\n   private static final String ROUND = \"round\";\n \n   private static final MethodMatchers CONSTANT_WITH_LITERAL_METHODS =\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ABS)\n-      .withParameters(DOUBLE)\n-      .withParameters(FLOAT)\n-      .withParameters(\"int\")\n-      .withParameters(\"long\");\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ABS)\n+      .addParametersMatcher(DOUBLE)\n+      .addParametersMatcher(FLOAT)\n+      .addParametersMatcher(\"int\")\n+      .addParametersMatcher(\"long\");\n \n   private static final MethodMatchers TRUNCATION_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(CEIL).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(FLOOR).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"rint\").withParameters(DOUBLE),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(ROUND).withParameters(DOUBLE).withParameters(FLOAT)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(CEIL).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(FLOOR).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"rint\").addParametersMatcher(DOUBLE),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(ROUND).addParametersMatcher(DOUBLE).addParametersMatcher(FLOAT)\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_METHODS = MethodMatchers.or(\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).name(\"atan2\").withParameters(DOUBLE, DOUBLE),\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").withParameters(DOUBLE)\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"atan2\").addParametersMatcher(DOUBLE, DOUBLE),\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"cos\", \"cosh\", \"expm1\", \"sin\", \"sinh\", \"tan\", \"tanh\", \"toRadians\").addParametersMatcher(DOUBLE)\n   );\n \n   private static final MethodMatchers CONSTANT_WITH_ZERO_OR_ONE_METHODS =\n-    MethodMatchers.create().ofType(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").withParameters(DOUBLE);\n+    MethodMatchers.create().ofTypes(MATH_PACKAGE_NAME).names(\"acos\", \"asin\", \"atan\", \"cbrt\", \"exp\", \"log\", \"log10\", \"sqrt\", \"toDegrees\").addParametersMatcher(DOUBLE);\n \n   @Override\n   public List<Tree.Kind> nodesToVisit() {\n"}}, {"oid": "8e2102d3372e861d21f74c1c03a4a64ed1eb4d44", "url": "https://github.com/SonarSource/sonar-java/commit/8e2102d3372e861d21f74c1c03a4a64ed1eb4d44", "message": "Deprecate old method matcher", "committedDate": "2020-03-19T07:57:32Z", "type": "forcePushed"}, {"oid": "b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "url": "https://github.com/SonarSource/sonar-java/commit/b2e28516932ca4e7257ec872a5610d7bd0df0f3e", "message": "Fix form Michael review n\u00b01 (with missing .build())", "committedDate": "2020-03-19T16:14:36Z", "type": "forcePushed"}, {"oid": "35d4c46b761554d2703f8681d55b190ee9fce239", "url": "https://github.com/SonarSource/sonar-java/commit/35d4c46b761554d2703f8681d55b190ee9fce239", "message": "Add missing .build(), improve predicate performance when there's one element", "committedDate": "2020-03-19T17:46:13Z", "type": "forcePushed"}, {"oid": "3a52d3a1be33b534d729039d7736ec07ee194987", "url": "https://github.com/SonarSource/sonar-java/commit/3a52d3a1be33b534d729039d7736ec07ee194987", "message": "Replace MethodMatcher.create() by MethodMatchers.create() 6/703 remaining", "committedDate": "2020-03-20T16:37:50Z", "type": "forcePushed"}, {"oid": "b1a250df99c5d22a56999076a37099f4f3c2ab8a", "url": "https://github.com/SonarSource/sonar-java/commit/b1a250df99c5d22a56999076a37099f4f3c2ab8a", "message": "SONARJAVA-2357 Remove MethodMatcher, NameCriteria, TypeCriteria, ParametersCriteria", "committedDate": "2020-03-23T09:09:02Z", "type": "forcePushed"}, {"oid": "8345704e764a9855df75a107085ea61fd4e29a35", "url": "https://github.com/SonarSource/sonar-java/commit/8345704e764a9855df75a107085ea61fd4e29a35", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-23T10:05:04Z", "type": "forcePushed"}, {"oid": "a58f3963fee84b4a8f030861af8acf4baf8a1c8e", "url": "https://github.com/SonarSource/sonar-java/commit/a58f3963fee84b4a8f030861af8acf4baf8a1c8e", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-23T10:50:29Z", "type": "forcePushed"}, {"oid": "7ef09516cb06bf4ca002aab09fdf9eba6599dfd7", "url": "https://github.com/SonarSource/sonar-java/commit/7ef09516cb06bf4ca002aab09fdf9eba6599dfd7", "message": "SONARJAVA-2357 Provide MethodMatcher API to be used in custom rules", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "4a84c87434472eb2815a9a8ba6c000a7bfcfe2e7", "url": "https://github.com/SonarSource/sonar-java/commit/4a84c87434472eb2815a9a8ba6c000a7bfcfe2e7", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 1/2", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "efa5ba9772e87d8ba1278a298af30c79ae4455b6", "url": "https://github.com/SonarSource/sonar-java/commit/efa5ba9772e87d8ba1278a298af30c79ae4455b6", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-24T07:22:37Z", "type": "commit"}, {"oid": "efa5ba9772e87d8ba1278a298af30c79ae4455b6", "url": "https://github.com/SonarSource/sonar-java/commit/efa5ba9772e87d8ba1278a298af30c79ae4455b6", "message": "SONARJAVA-2357 Use new MethodMatcher API in checks 2/2", "committedDate": "2020-03-24T07:22:37Z", "type": "forcePushed"}]}