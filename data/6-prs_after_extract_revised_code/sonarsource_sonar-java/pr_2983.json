{"pr_number": 2983, "pr_title": "[REGEX] Extends cases supported by AbstractRegexCheck", "pr_createdAt": "2020-06-03T15:53:00Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2983", "timeline": [{"oid": "f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "url": "https://github.com/SonarSource/sonar-java/commit/f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser", "committedDate": "2020-06-03T15:53:34Z", "type": "forcePushed"}, {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638", "url": "https://github.com/SonarSource/sonar-java/commit/7e0a4735c803bb69ad9877b591fa62f0d6341638", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser", "committedDate": "2020-06-04T09:45:24Z", "type": "commit"}, {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638", "url": "https://github.com/SonarSource/sonar-java/commit/7e0a4735c803bb69ad9877b591fa62f0d6341638", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser", "committedDate": "2020-06-04T09:45:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDAwNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2983#discussion_r435240005", "bodyText": "Is there a way to check whether a variable is effectively final? Because I'd like this to work with locals and locals are rarely explicitly defined as final.", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-04T13:10:13Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java", "diffHunk": "@@ -53,27 +62,84 @@\n       .withAnyParameters()\n       .build());\n \n+  private RegexScannerContext regexContext;\n+\n   @Override\n-  protected MethodMatchers getMethodInvocationMatchers() {\n+  public final void setContext(JavaFileScannerContext context) {\n+    this.regexContext = (RegexScannerContext) context;\n+    super.setContext(context);\n+  }\n+\n+  @Override\n+  protected final MethodMatchers getMethodInvocationMatchers() {\n     return REGEX_METHODS;\n   }\n \n   @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+  protected final void onMethodInvocationFound(MethodInvocationTree mit) {\n     Arguments args = mit.arguments();\n     if (args.isEmpty()) {\n       return;\n     }\n-    ExpressionTree arg0 = args.get(0);\n-    if (arg0.is(Tree.Kind.STRING_LITERAL)) {\n-      checkRegex(((DefaultJavaFileScannerContext) context).regexForLiterals((LiteralTree) arg0), mit);\n+    getLiterals(args.get(0))\n+      .map(regexContext::regexForLiterals)\n+      .ifPresent(result -> checkRegex(result, mit));\n+  }\n+\n+  @VisibleForTesting\n+  protected static Optional<LiteralTree[]> getLiterals(ExpressionTree expr) {\n+    switch (expr.kind()) {\n+      case PLUS:\n+        return getLiteralsFromStringConcatenation((BinaryExpressionTree) expr);\n+      case IDENTIFIER:\n+        return getLiteralsFromFinalVariables((IdentifierTree) expr);\n+      case PARENTHESIZED_EXPRESSION:\n+        return getLiterals(ExpressionUtils.skipParentheses(expr));\n+      case STRING_LITERAL:\n+        return Optional.of(new LiteralTree[] {(LiteralTree) expr});\n+      default:\n+        return Optional.empty();\n+    }\n+  }\n+\n+  private static Optional<LiteralTree[]> getLiteralsFromStringConcatenation(BinaryExpressionTree expr) {\n+    Optional<LiteralTree[]> leftLiterals = getLiterals(expr.leftOperand());\n+    if (!leftLiterals.isPresent()) {\n+      return Optional.empty();\n+    }\n+    Optional<LiteralTree[]> rightLiterals = getLiterals(expr.rightOperand());\n+    if (!rightLiterals.isPresent()) {\n+      return Optional.empty();\n+    }\n+    LiteralTree[] combined = Streams.concat(Arrays.stream(leftLiterals.get()), Arrays.stream(rightLiterals.get())).toArray(LiteralTree[]::new);\n+    return Optional.of(combined);\n+  }\n+\n+  private static Optional<LiteralTree[]> getLiteralsFromFinalVariables(IdentifierTree identifier) {\n+    Symbol symbol = identifier.symbol();\n+    if (!symbol.isVariableSymbol()) {\n+      return Optional.empty();\n+    }\n+\n+    Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) symbol;\n+    if (!variableSymbol.isFinal()) {", "originalCommit": "7e0a4735c803bb69ad9877b591fa62f0d6341638", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwNTkxMw==", "url": "https://github.com/SonarSource/sonar-java/pull/2983#discussion_r435305913", "bodyText": "actually, thanks to ECJ, there is! I'm trying this!", "author": "m-g-sonar", "createdAt": "2020-06-04T14:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f1c0b814c0b47a34b2805bd62506162155efcfc", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java b/java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java\nindex cc30dc166..25c5ecf26 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java\n\n@@ -122,7 +123,7 @@ public abstract class AbstractRegexCheck extends AbstractMethodDetection impleme\n     }\n \n     Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) symbol;\n-    if (!variableSymbol.isFinal()) {\n+    if (!(variableSymbol.isFinal() || JUtils.isEffectivelyFinal(variableSymbol))) {\n       return Optional.empty();\n     }\n     VariableTree declaration = variableSymbol.declaration();\n"}}, {"oid": "5f1c0b814c0b47a34b2805bd62506162155efcfc", "url": "https://github.com/SonarSource/sonar-java/commit/5f1c0b814c0b47a34b2805bd62506162155efcfc", "message": "fix from review: add support of effectively final variables", "committedDate": "2020-06-04T15:05:12Z", "type": "commit"}]}