{"pr_number": 2864, "pr_title": "SONARJAVA-3309 Compile JSP pages to Java and provide AST to checks", "pr_createdAt": "2020-03-06T16:29:56Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2864", "timeline": [{"oid": "663dfe80df3f931101f8e5ab750c7282257cee51", "url": "https://github.com/SonarSource/sonar-java/commit/663dfe80df3f931101f8e5ab750c7282257cee51", "message": "its", "committedDate": "2020-03-06T21:23:17Z", "type": "forcePushed"}, {"oid": "aa00bc96f821a6a1337545eedd1e7acbdd41ac58", "url": "https://github.com/SonarSource/sonar-java/commit/aa00bc96f821a6a1337545eedd1e7acbdd41ac58", "message": "integration test", "committedDate": "2020-03-06T21:26:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxODAzOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r390818038", "bodyText": "Why not be consistent with classpath and testClasspath and initialize with empty list ?", "author": "benzonico", "createdAt": "2020-03-11T08:46:52Z", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -81,6 +83,9 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n       classpath = sonarComponents.getJavaClasspath();\n       testClasspath = sonarComponents.getJavaTestClasspath();\n       testCodeVisitors.addAll(sonarComponents.testCheckClasses());\n+      generatedCodeVisitors = sonarComponents.generatedCodeVisitors();\n+    } else {\n+      generatedCodeVisitors = Collections.emptyList();", "originalCommit": "aa00bc96f821a6a1337545eedd1e7acbdd41ac58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\nindex b90f964f2..98509e7eb 100644\n--- a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n+++ b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n\n@@ -84,8 +84,6 @@ public class JavaSquid {\n       testClasspath = sonarComponents.getJavaTestClasspath();\n       testCodeVisitors.addAll(sonarComponents.testCheckClasses());\n       generatedCodeVisitors = sonarComponents.generatedCodeVisitors();\n-    } else {\n-      generatedCodeVisitors = Collections.emptyList();\n     }\n \n     //AstScanner for main files\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxODcyOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r390818728", "bodyText": "I think this comments deserve a bit of more precise wording : I thought at first that semantic won't be triggered for this file whereas it is only about feeding semantic data to SQ api.", "author": "benzonico", "createdAt": "2020-03-11T08:48:13Z", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -126,7 +127,9 @@ public void setJavaVersion(JavaVersion javaVersion) {\n   public void visitFile(@Nullable Tree parsedTree) {\n     JavaTree.CompilationUnitTreeImpl tree = new JavaTree.CompilationUnitTreeImpl(null, new ArrayList<>(), new ArrayList<>(), null, null);\n     boolean fileParsed = parsedTree != null;\n-    if (fileParsed && parsedTree.is(Tree.Kind.COMPILATION_UNIT)) {\n+    // don't create symbol table for generated files (jsp)", "originalCommit": "aa00bc96f821a6a1337545eedd1e7acbdd41ac58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09dbb4946e517071f778893825baae307bb57cfc", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java b/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java\nindex 7d680f315..ecd3656c7 100644\n--- a/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java\n+++ b/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java\n\n@@ -127,7 +124,7 @@ public class VisitorsBridge {\n   public void visitFile(@Nullable Tree parsedTree) {\n     JavaTree.CompilationUnitTreeImpl tree = new JavaTree.CompilationUnitTreeImpl(null, new ArrayList<>(), new ArrayList<>(), null, null);\n     boolean fileParsed = parsedTree != null;\n-    // don't create symbol table for generated files (jsp)\n+    // don't provide semantic data (symbol highlighting) to SQ for generated files (jsp)\n     boolean isGeneratedFile = currentFile instanceof GeneratedFile;\n     if (fileParsed && parsedTree.is(Tree.Kind.COMPILATION_UNIT) && !isGeneratedFile) {\n       tree = (JavaTree.CompilationUnitTreeImpl) parsedTree;\n"}}, {"oid": "09dbb4946e517071f778893825baae307bb57cfc", "url": "https://github.com/SonarSource/sonar-java/commit/09dbb4946e517071f778893825baae307bb57cfc", "message": "wip", "committedDate": "2020-03-12T21:41:01Z", "type": "forcePushed"}, {"oid": "c47721ddba3f8e7fce0bc4ffc311dc413fc0c4c1", "url": "https://github.com/SonarSource/sonar-java/commit/c47721ddba3f8e7fce0bc4ffc311dc413fc0c4c1", "message": "SONARJAVA-3309 Integration test", "committedDate": "2020-03-12T22:26:37Z", "type": "forcePushed"}, {"oid": "a94b3c0b906a589aae41ce10bf348888fdf18e2d", "url": "https://github.com/SonarSource/sonar-java/commit/a94b3c0b906a589aae41ce10bf348888fdf18e2d", "message": "SONARJAVA-3309 Integration test", "committedDate": "2020-03-12T22:53:25Z", "type": "forcePushed"}, {"oid": "d7e8b4b68aab7f73488d89df915d44334100b453", "url": "https://github.com/SonarSource/sonar-java/commit/d7e8b4b68aab7f73488d89df915d44334100b453", "message": "fix unstable test", "committedDate": "2020-03-13T09:02:33Z", "type": "forcePushed"}, {"oid": "5dab54b4943ff626a9b86903000bc92b345692ed", "url": "https://github.com/SonarSource/sonar-java/commit/5dab54b4943ff626a9b86903000bc92b345692ed", "message": "SONARJAVA-3309 integration test", "committedDate": "2020-03-13T10:33:39Z", "type": "forcePushed"}, {"oid": "00b842bdba24d32299f6188e5c2305dd3a53dc7f", "url": "https://github.com/SonarSource/sonar-java/commit/00b842bdba24d32299f6188e5c2305dd3a53dc7f", "message": "SONARJAVA-3309 integration test", "committedDate": "2020-03-13T10:52:39Z", "type": "forcePushed"}, {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "url": "https://github.com/SonarSource/sonar-java/commit/c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "message": "SONARJAVA-3309 integration test", "committedDate": "2020-03-13T11:25:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MzYzMw==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393143633", "bodyText": "if this method is now supposed to be called only by tests, I would annotated it by @VisibleForTests and potentially change its visibility.", "author": "m-g-sonar", "createdAt": "2020-03-16T16:16:23Z", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,\n+                                                    JavaVersion javaVersion, @Nullable SonarComponents sonarComponents,\n+                                                    SymbolicExecutionMode symbolicExecutionMode) {\n     VisitorsBridge visitorsBridge = new VisitorsBridge(codeVisitors, classpath, sonarComponents, symbolicExecutionMode);\n     visitorsBridge.setJavaVersion(javaVersion);\n     return visitorsBridge;\n   }\n \n \n   public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles) {", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MjM5MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393582391", "bodyText": "I removed this overload, and instead added emptyList() parameter to the callers in tests.", "author": "saberduck", "createdAt": "2020-03-17T10:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MzYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\nindex 98509e7eb..011190ca1 100644\n--- a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n+++ b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n\n@@ -96,23 +96,17 @@ public class JavaSquid {\n \n     //AstScanner for generated files\n     astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n-    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(jspCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,\n-                                                    JavaVersion javaVersion, @Nullable SonarComponents sonarComponents,\n-                                                    SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(\n+    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n     VisitorsBridge visitorsBridge = new VisitorsBridge(codeVisitors, classpath, sonarComponents, symbolicExecutionMode);\n     visitorsBridge.setJavaVersion(javaVersion);\n     return visitorsBridge;\n   }\n \n-\n-  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles) {\n-    scan(sourceFiles, testFiles, Collections.emptyList());\n-  }\n-\n-  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles, List<InputFile> generatedFiles) {\n+  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles, Iterable<? extends InputFile> generatedFiles) {\n     scanSources(sourceFiles);\n     scanTests(testFiles);\n     scanGeneratedFiles(generatedFiles);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDkyMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393144921", "bodyText": "I don't understand this change, It seems to me that generatedCodeVisitors are JavaCheck, the change of method signature should not be required.", "author": "m-g-sonar", "createdAt": "2020-03-16T16:18:20Z", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MzQ3MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393583471", "bodyText": "removed, this was leftover from some refactoring", "author": "saberduck", "createdAt": "2020-03-17T10:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\nindex 98509e7eb..011190ca1 100644\n--- a/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n+++ b/java-frontend/src/main/java/org/sonar/java/JavaSquid.java\n\n@@ -96,23 +96,17 @@ public class JavaSquid {\n \n     //AstScanner for generated files\n     astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n-    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(jspCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,\n-                                                    JavaVersion javaVersion, @Nullable SonarComponents sonarComponents,\n-                                                    SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(\n+    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n     VisitorsBridge visitorsBridge = new VisitorsBridge(codeVisitors, classpath, sonarComponents, symbolicExecutionMode);\n     visitorsBridge.setJavaVersion(javaVersion);\n     return visitorsBridge;\n   }\n \n-\n-  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles) {\n-    scan(sourceFiles, testFiles, Collections.emptyList());\n-  }\n-\n-  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles, List<InputFile> generatedFiles) {\n+  public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles, Iterable<? extends InputFile> generatedFiles) {\n     scanSources(sourceFiles);\n     scanTests(testFiles);\n     scanGeneratedFiles(generatedFiles);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NjY0Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393146642", "bodyText": "How can you be sure of that? If you transpile these files, while not using directly a predefined charset such as UTF-8?", "author": "m-g-sonar", "createdAt": "2020-03-16T16:20:54Z", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.annotation.CheckForNull;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.fs.TextPointer;\n+import org.sonar.api.batch.fs.TextRange;\n+\n+public class GeneratedFile implements InputFile {\n+\n+  private final Path path;\n+\n+  private final InputFile source;\n+\n+  public GeneratedFile(Path path, InputFile source) {\n+    this.path = path;\n+    this.source = source;\n+  }\n+\n+  public InputFile getSource() {\n+    return source;\n+  }\n+\n+  @Override\n+  public String relativePath() {\n+    return path.toString();\n+  }\n+\n+  @Override\n+  public String absolutePath() {\n+    return path.toAbsolutePath().toString();\n+  }\n+\n+  @Override\n+  public File file() {\n+    return path.toFile();\n+  }\n+\n+  @Override\n+  public Path path() {\n+    return path;\n+  }\n+\n+  @Override\n+  public URI uri() {\n+    return path.toUri();\n+  }\n+\n+  @Override\n+  public String filename() {\n+    return path.getFileName().toString();\n+  }\n+\n+  @CheckForNull\n+  @Override\n+  public String language() {\n+    return \"java\";\n+  }\n+\n+  @Override\n+  public Type type() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public InputStream inputStream() throws IOException {\n+    return Files.newInputStream(path);\n+  }\n+\n+  @Override\n+  public String contents() throws IOException {\n+    return new String(Files.readAllBytes(path), charset());\n+  }\n+\n+  @Override\n+  public Status status() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int lines() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return false;\n+  }\n+\n+  @Override\n+  public TextPointer newPointer(int line, int lineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(TextPointer start, TextPointer end) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(int startLine, int startLineOffset, int endLine, int endLineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange selectLine(int line) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Charset charset() {\n+    return Charset.defaultCharset();", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NzAxOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393587019", "bodyText": "ok, I found the option how to explicitly set encoding for Jasper, so we can use UTF-8 explicitly.", "author": "saberduck", "createdAt": "2020-03-17T10:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java b/java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java\nindex a84fe45c6..f978c6c81 100644\n--- a/java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java\n+++ b/java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java\n\n@@ -24,6 +24,7 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import javax.annotation.CheckForNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDEzNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393150134", "bodyText": "I don't see why this type needs to be specified. it's seems unrelated to your change,", "author": "m-g-sonar", "createdAt": "2020-03-16T16:26:08Z", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -85,11 +86,13 @@ public VisitorsBridge(JavaFileScanner visitor) {\n   }\n \n   @VisibleForTesting\n-  public VisitorsBridge(Iterable visitors, List<File> projectClasspath, @Nullable SonarComponents sonarComponents) {\n+  public VisitorsBridge(Iterable<? extends JavaCheck> visitors, List<File> projectClasspath,", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjY5MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393602690", "bodyText": "it's not strictly related to this PR, but I wanted to remove usage of raw type to benefit from compiler checking the correctness of types.", "author": "saberduck", "createdAt": "2020-03-17T11:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDEzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTQ1OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393151459", "bodyText": "c? explicit name maybe?", "author": "m-g-sonar", "createdAt": "2020-03-16T16:28:11Z", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {\n+    return allChecks.stream()\n+      .flatMap(c -> c.all().stream())", "originalCommit": "9fa6c77058d8f83fd40fd8ace42298f7030778a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\nindex 580b32b22..fa5fc7846 100644\n--- a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n+++ b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n\n@@ -195,10 +185,10 @@ public class SonarComponents {\n     return visitors;\n   }\n \n-  public List<JavaCheck> generatedCodeVisitors() {\n+  public List<JavaCheck> jspCodeVisitors() {\n     return allChecks.stream()\n-      .flatMap(c -> c.all().stream())\n-      .filter(check -> check instanceof GeneratedCodeVisitor)\n+      .flatMap(javaChecks -> javaChecks.all().stream())\n+      .filter(check -> check instanceof JspCodeVisitor)\n       .collect(Collectors.toList());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjAwMg==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393152002", "bodyText": "c? please use a more explicit variable name. as c.all() is really not helping.", "author": "m-g-sonar", "createdAt": "2020-03-16T16:29:01Z", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {\n+    return allChecks.stream()\n+      .flatMap(c -> c.all().stream())", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\nindex 580b32b22..fa5fc7846 100644\n--- a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n+++ b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n\n@@ -195,10 +185,10 @@ public class SonarComponents {\n     return visitors;\n   }\n \n-  public List<JavaCheck> generatedCodeVisitors() {\n+  public List<JavaCheck> jspCodeVisitors() {\n     return allChecks.stream()\n-      .flatMap(c -> c.all().stream())\n-      .filter(check -> check instanceof GeneratedCodeVisitor)\n+      .flatMap(javaChecks -> javaChecks.all().stream())\n+      .filter(check -> check instanceof JspCodeVisitor)\n       .collect(Collectors.toList());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1Mzk2MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393153960", "bodyText": "I don't see any mechanism which would prevent people writing custom rules to use this as well, expecting their code to be executed on \"generated code\". (code annotated with @Generated?).\nWhile I understand that we don't necessarily want to expose everything, I would appreciate to have it a bit more explicit. note any kind of generated code is going to be analyzed by such rule.", "author": "m-g-sonar", "createdAt": "2020-03-16T16:32:06Z", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api;\n+\n+import com.google.common.annotations.Beta;\n+\n+/**\n+ * Marker interface for code visitors which are invoked on generated code\n+ */\n+@Beta\n+public interface GeneratedCodeVisitor extends JavaCheck {", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3Njk2Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393176966", "bodyText": "I am not sure I understand the comment, do you just want to improve javadoc?", "author": "saberduck", "createdAt": "2020-03-16T17:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1Mzk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/JspCodeVisitor.java\nsimilarity index 78%\nrename from java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java\nrename to java-frontend/src/main/java/org/sonar/plugins/java/api/JspCodeVisitor.java\nindex 2823ab4ee..de70b772d 100644\n--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java\n+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/JspCodeVisitor.java\n\n@@ -22,8 +22,10 @@ package org.sonar.plugins.java.api;\n import com.google.common.annotations.Beta;\n \n /**\n- * Marker interface for code visitors which are invoked on generated code\n+ * Marker interface for code visitors that are invoked on generated Java code from JSP pages.\n+ *\n+ * This is experimental unsupported feature, API can change without notice. Do not use for custom rules.\n  */\n @Beta\n-public interface GeneratedCodeVisitor extends JavaCheck {\n+public interface JspCodeVisitor extends JavaCheck {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA2MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393158061", "bodyText": "What if there is no JSP language registered? is it always the case?", "author": "m-g-sonar", "createdAt": "2020-03-16T16:38:13Z", "path": "java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.jsp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import org.apache.jasper.JspC;\n+import org.sonar.api.batch.fs.FileSystem;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.sensor.SensorContext;\n+import org.sonar.api.scanner.ScannerSide;\n+import org.sonar.api.utils.log.Logger;\n+import org.sonar.api.utils.log.Loggers;\n+import org.sonar.java.AnalysisException;\n+import org.sonar.java.model.GeneratedFile;\n+\n+import static java.util.Arrays.asList;\n+\n+@ScannerSide\n+public class Jasper {\n+\n+  private static final Logger LOG = Loggers.get(Jasper.class);\n+\n+  public List<InputFile> generateFiles(SensorContext context, List<File> javaClasspath) {\n+    try {\n+      List<Path> jspFiles = jspFiles(context.fileSystem());\n+      LOG.debug(\"Found {} JSP files.\", jspFiles.size());\n+      Path outputDir = outputDir(context);\n+      Jasper.compileJspFiles(jspFiles, javaClasspath, outputDir);\n+      try (Stream<Path> fileStream = Files.walk(outputDir)) {\n+        List<InputFile> generatedFiles = fileStream\n+          .filter(p -> p.toString().endsWith(\".java\"))\n+          .map(path -> new GeneratedFile(path, findSource(path, context.fileSystem())))\n+          .collect(Collectors.toList());\n+        LOG.debug(\"Generated {} Java files.\", generatedFiles.size());\n+        return generatedFiles;\n+      }\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to transpile JSP files.\", e);\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  private static List<Path> jspFiles(FileSystem fs) {\n+    Iterable<InputFile> inputFiles = fs.inputFiles(fs.predicates().hasLanguage(\"jsp\"));", "originalCommit": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNzYyMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393607621", "bodyText": "html plugin is part of default distribution, so I believe it is safe to assume that it is available. If it's not available we will not find any files and nothing is executed.", "author": "saberduck", "createdAt": "2020-03-17T11:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java b/java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java\nindex 2bb3d388e..abe039774 100644\n--- a/java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java\n+++ b/java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java\n\n@@ -20,6 +20,7 @@\n package org.sonar.java.jsp;\n \n import java.io.File;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NzM3OA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r394377378", "bodyText": "should be called jspCodeVisitors()", "author": "m-g-sonar", "createdAt": "2020-03-18T14:14:35Z", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {", "originalCommit": "50d4d57dc4389ae58e3a71822d06e2c76a8918f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "846e96c4a64de02128e0366e6a120dbe53828d80", "chunk": "diff --git a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\nindex f2c214f08..fa5fc7846 100644\n--- a/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n+++ b/java-frontend/src/main/java/org/sonar/java/SonarComponents.java\n\n@@ -195,9 +185,9 @@ public class SonarComponents {\n     return visitors;\n   }\n \n-  public List<JavaCheck> generatedCodeVisitors() {\n+  public List<JavaCheck> jspCodeVisitors() {\n     return allChecks.stream()\n-      .flatMap(checks -> checks.all().stream())\n+      .flatMap(javaChecks -> javaChecks.all().stream())\n       .filter(check -> check instanceof JspCodeVisitor)\n       .collect(Collectors.toList());\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3Nzg1OA==", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r394377858", "bodyText": "Should be called JspFile", "author": "m-g-sonar", "createdAt": "2020-03-18T14:15:16Z", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.annotation.CheckForNull;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.fs.TextPointer;\n+import org.sonar.api.batch.fs.TextRange;\n+\n+public class GeneratedFile implements InputFile {", "originalCommit": "50d4d57dc4389ae58e3a71822d06e2c76a8918f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "846e96c4a64de02128e0366e6a120dbe53828d80", "url": "https://github.com/SonarSource/sonar-java/commit/846e96c4a64de02128e0366e6a120dbe53828d80", "message": "SONARJAVA-3309 fix licensing for tomcat-servlet-api", "committedDate": "2020-03-18T15:18:05Z", "type": "forcePushed"}, {"oid": "846ca6060ffb878e9af72e666cf311a4b0a099d2", "url": "https://github.com/SonarSource/sonar-java/commit/846ca6060ffb878e9af72e666cf311a4b0a099d2", "message": "SONARJAVA-3309 Transpile JSP pages to Java and parse the generated files", "committedDate": "2020-03-18T16:09:11Z", "type": "commit"}, {"oid": "985bb9916555fa0df17d7fb202e12aee1ee92eeb", "url": "https://github.com/SonarSource/sonar-java/commit/985bb9916555fa0df17d7fb202e12aee1ee92eeb", "message": "SONARJAVA-3309 fix licensing for tomcat-servlet-api", "committedDate": "2020-03-18T16:09:11Z", "type": "commit"}, {"oid": "985bb9916555fa0df17d7fb202e12aee1ee92eeb", "url": "https://github.com/SonarSource/sonar-java/commit/985bb9916555fa0df17d7fb202e12aee1ee92eeb", "message": "SONARJAVA-3309 fix licensing for tomcat-servlet-api", "committedDate": "2020-03-18T16:09:11Z", "type": "forcePushed"}]}