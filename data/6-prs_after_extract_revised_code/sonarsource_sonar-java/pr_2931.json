{"pr_number": 2931, "pr_title": "SONARJAVA-2549 Improve S2293 to handle cases where constructor is used in argument", "pr_createdAt": "2020-05-01T11:42:14Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2931", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODQ4Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/2931#discussion_r418528486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static boolean usedAsArgumentShouldUseDiamon(NewClassTree newClassTree) {\n          \n          \n            \n              private static boolean usedAsArgumentShouldUseDiamond(NewClassTree newClassTree) {", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-05-01T12:52:47Z", "path": "java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java", "diffHunk": "@@ -79,15 +82,63 @@ public boolean isCompatibleWithJavaVersion(JavaVersion version) {\n   public void visitNode(Tree tree) {\n     NewClassTree newClassTree = (NewClassTree) tree;\n     TypeTree newTypeTree = newClassTree.identifier();\n-    if (newClassTree.classBody() == null && isParameterizedType(newTypeTree)) {\n-      TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n-      if (type != null && isParameterizedType(type)) {\n-        reportIssue(\n-          ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n-          \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n-            context.getJavaVersion().java7CompatibilityMessage());\n-      }\n+    if (!isParameterizedType(newTypeTree) || newClassTree.classBody() != null) {\n+      return;\n+    }\n+    TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n+    if ((type != null && isParameterizedType(type))\n+      || usedAsArgumentShouldUseDiamon(newClassTree)) {\n+      reportIssue(\n+        ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n+        \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n+          context.getJavaVersion().java7CompatibilityMessage());\n+    }\n+  }\n+\n+  private static boolean usedAsArgumentShouldUseDiamon(NewClassTree newClassTree) {", "originalCommit": "72e814ba7533bb5e318a51dd3fe7537ac08ed8ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b206c71b83a858701afaab637e9e47eddbb40267", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java b/java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java\nindex 8049fecb0..0af53e5ab 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java\n\n@@ -82,63 +79,15 @@ public class DiamondOperatorCheck extends IssuableSubscriptionVisitor implements\n   public void visitNode(Tree tree) {\n     NewClassTree newClassTree = (NewClassTree) tree;\n     TypeTree newTypeTree = newClassTree.identifier();\n-    if (!isParameterizedType(newTypeTree) || newClassTree.classBody() != null) {\n-      return;\n-    }\n-    TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n-    if ((type != null && isParameterizedType(type))\n-      || usedAsArgumentShouldUseDiamon(newClassTree)) {\n-      reportIssue(\n-        ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n-        \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n-          context.getJavaVersion().java7CompatibilityMessage());\n-    }\n-  }\n-\n-  private static boolean usedAsArgumentShouldUseDiamon(NewClassTree newClassTree) {\n-    Tree parent = newClassTree.parent();\n-    if (!parent.is(Tree.Kind.ARGUMENTS)) {\n-      // not part of an invocation\n-      return false;\n-    }\n-\n-    Tree invocation = parent.parent();\n-    Symbol symbol = null;\n-    // arguments are only used in METHOD_INVOCATION, NEW_CLASS_TREE and ANNOTATION\n-    // however annotations values can not store parameterized types\n-    if (invocation.is(Tree.Kind.METHOD_INVOCATION)) {\n-      symbol = ((MethodInvocationTree) invocation).symbol();\n-    } else {\n-      symbol = ((NewClassTree) invocation).constructorSymbol();\n-    }\n-\n-    if (!symbol.isMethodSymbol()) {\n-      // unresolved invocation\n-      return false;\n-    }\n-\n-    Symbol.MethodSymbol methodSymbol = (Symbol.MethodSymbol) symbol;\n-    int index = getArgIndex(newClassTree, (Arguments) parent);\n-    if (index >= methodSymbol.parameterTypes().size()) {\n-      // killing the noise - varargs\n-      return false;\n-    }\n-\n-    if (JUtils.isParametrizedMethod(methodSymbol)) {\n-      // killing the noise - might be required for inference on nested method calls\n-      return false;\n-    }\n-\n-    Type parameterType = methodSymbol.parameterTypes().get(index);\n-    return parameterType.isParameterized();\n-  }\n-\n-  private static int getArgIndex(Tree tree, Arguments arguments) {\n-    int i = 0;\n-    while (!tree.equals(arguments.get(i))) {\n-      i++;\n+    if (newClassTree.classBody() == null && isParameterizedType(newTypeTree)) {\n+      TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n+      if (type != null && isParameterizedType(type)) {\n+        reportIssue(\n+          ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n+          \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n+            context.getJavaVersion().java7CompatibilityMessage());\n+      }\n     }\n-    return i;\n   }\n \n   @CheckForNull\n"}}, {"oid": "b206c71b83a858701afaab637e9e47eddbb40267", "url": "https://github.com/SonarSource/sonar-java/commit/b206c71b83a858701afaab637e9e47eddbb40267", "message": "SONARJAVA-2549 Move S2293 test files", "committedDate": "2020-05-04T07:47:13Z", "type": "commit"}, {"oid": "30f8f8b1ad9e67b893f63e314267c5a5f2c84bd0", "url": "https://github.com/SonarSource/sonar-java/commit/30f8f8b1ad9e67b893f63e314267c5a5f2c84bd0", "message": "SONARJAVA-2549 Improve S2293 to handle cases where constructor is used in argument", "committedDate": "2020-05-04T07:49:58Z", "type": "commit"}, {"oid": "30f8f8b1ad9e67b893f63e314267c5a5f2c84bd0", "url": "https://github.com/SonarSource/sonar-java/commit/30f8f8b1ad9e67b893f63e314267c5a5f2c84bd0", "message": "SONARJAVA-2549 Improve S2293 to handle cases where constructor is used in argument", "committedDate": "2020-05-04T07:49:58Z", "type": "forcePushed"}]}