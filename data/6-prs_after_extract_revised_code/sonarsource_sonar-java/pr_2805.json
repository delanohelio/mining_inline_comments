{"pr_number": 2805, "pr_title": "SONARJAVA-3223 S5122 should support CorsRegistry from Spring", "pr_createdAt": "2020-02-11T14:30:20Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2805", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MTcwOA==", "url": "https://github.com/SonarSource/sonar-java/pull/2805#discussion_r378081708", "bodyText": "You can use ExpressionUtils.methodName(mit) for that.", "author": "m-g-sonar", "createdAt": "2020-02-12T07:40:15Z", "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "diffHunk": "@@ -106,6 +110,15 @@ private static boolean setSpecificOrigins(Tree tree) {\n     return !isStar((LiteralTree) tree);\n   }\n \n+  private void reportTree(MethodInvocationTree mit) {", "originalCommit": "ea1dfbdf5d4773c14bb3692d98161c90fc74443f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f300248b7308b10e6623ff28f0edadec66d5596", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java b/java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java\nindex 61b3720e5..7c7727a3e 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java\n\n@@ -111,12 +111,7 @@ public class CORSCheck extends IssuableSubscriptionVisitor {\n   }\n \n   private void reportTree(MethodInvocationTree mit) {\n-    ExpressionTree methodSelect = mit.methodSelect();\n-    if (methodSelect.is(Tree.Kind.MEMBER_SELECT)) {\n-      reportTree(((MemberSelectExpressionTree) methodSelect).identifier());\n-    } else {\n-      reportTree(methodSelect);\n-    }\n+    reportTree(ExpressionUtils.methodName(mit));\n   }\n \n   private void reportTree(Tree tree) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4Mjg2Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/2805#discussion_r378082866", "bodyText": "I don't see the interest of such complicated methods to tests this. Keep the test case minimal to what we really tests.  For instance, invocations of allowedMethods, allowCredentials, etc. are not related to the behavior of the rule.", "author": "m-g-sonar", "createdAt": "2020-02-12T07:43:42Z", "path": "java-checks/src/test/files/checks/CORSCheck.java", "diffHunk": "@@ -133,20 +136,40 @@ public CorsFilter corsFilter4() {\n       public CorsFilter corsFilter4() {\n         UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n         CorsConfiguration config = new CorsConfiguration();\n-        config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=137,138]]\n+        config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=140,141]]\n         config.applyPermitDefaultValues();\n         config.applyPermitDefaultValues();\n-        config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=137,138]]\n+        config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=140,141]]\n         return new CorsFilter(source);\n       }\n     }\n     UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n     CorsConfiguration config = new CorsConfiguration();\n-    config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=146,147]]\n+    config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=149,150]]\n     config.applyPermitDefaultValues();\n     config.applyPermitDefaultValues();\n-    config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=146,147]]\n+    config.addAllowedOrigin(\"*\"); // Noncompliant [[secondary=149,150]]\n     return new CorsFilter(source);\n   }\n \n+  class S5122_Insecure implements WebMvcConfigurer {", "originalCommit": "ea1dfbdf5d4773c14bb3692d98161c90fc74443f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2f300248b7308b10e6623ff28f0edadec66d5596", "chunk": "diff --git a/java-checks/src/test/files/checks/CORSCheck.java b/java-checks/src/test/files/checks/CORSCheck.java\nindex 1764543df..21f934254 100644\n--- a/java-checks/src/test/files/checks/CORSCheck.java\n+++ b/java-checks/src/test/files/checks/CORSCheck.java\n\n@@ -156,9 +156,7 @@ class A {\n     @Override\n     public void addCorsMappings(CorsRegistry registry) {\n       registry.addMapping(\"/**\")\n-        .allowedOrigins(\"*\") // Noncompliant [[sc=10;ec=24]]\n-        .allowedMethods(\"GET\",\"POST\",\"PUT\",\"DELETE\")\n-        .allowCredentials(true).maxAge(3600);\n+        .allowedOrigins(\"*\"); // Noncompliant [[sc=10;ec=24]]\n     }\n   }\n \n"}}, {"oid": "43b752d792a514e389e030b98ca356e648cfe270", "url": "https://github.com/SonarSource/sonar-java/commit/43b752d792a514e389e030b98ca356e648cfe270", "message": "SONARJAVA-3223 S5122 should support CorsRegistry from Spring", "committedDate": "2020-02-12T08:25:35Z", "type": "commit"}, {"oid": "2f300248b7308b10e6623ff28f0edadec66d5596", "url": "https://github.com/SonarSource/sonar-java/commit/2f300248b7308b10e6623ff28f0edadec66d5596", "message": "Fix from review", "committedDate": "2020-02-12T09:17:13Z", "type": "commit"}, {"oid": "2f300248b7308b10e6623ff28f0edadec66d5596", "url": "https://github.com/SonarSource/sonar-java/commit/2f300248b7308b10e6623ff28f0edadec66d5596", "message": "Fix from review", "committedDate": "2020-02-12T09:17:13Z", "type": "forcePushed"}]}