{"pr_number": 3017, "pr_title": "SONARJAVA-3417 Rule S5850: Alternatives in regular expressions ...", "pr_createdAt": "2020-06-15T17:58:16Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3017", "timeline": [{"oid": "fff2929bdf7f1131b3f9827a6b0dbb564d008ca5", "url": "https://github.com/SonarSource/sonar-java/commit/fff2929bdf7f1131b3f9827a6b0dbb564d008ca5", "message": "Fix exception on empty sequences\n\nAlso add the ability to still find anchors preceded by a flag-setting\ngroup (e.g. `(?i)^a|b|c$`).", "committedDate": "2020-06-16T13:24:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MjUyOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3017#discussion_r441352528", "bodyText": "I feel that we should also check here that the boundary type is the one expected, and I would add:\nBoundaryTree boundary = items.get(index).is(RegexTree.Kind.BOUNDARY)\nreturn (position == Position.BEGINNING && boundary.type() == BoundaryTree.Type.LINE_START) \n  || (position == Position.END && boundary.type() == BoundaryTree.Type.LINE_END);\n\nOtherwise, I fear that we might report FPs on regex such as:\n\"\\bTest|assert\\b\"\n\nWhich I believe are valid cases.", "author": "m-g-sonar", "createdAt": "2020-06-17T07:54:35Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.DisjunctionTree;\n+import org.sonar.java.regex.ast.NonCapturingGroupTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.java.regex.ast.SequenceTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5850\")\n+public class AnchorPrecedenceCheck extends AbstractRegexCheck {\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      new Visitor().visit(regexForLiterals.getResult());\n+    }\n+  }\n+\n+  private enum Position {\n+    BEGINNING, END\n+  }\n+\n+  private class Visitor extends RegexBaseVisitor {\n+    @Override\n+    public void visitDisjunction(DisjunctionTree tree) {\n+      RegexTree first = tree.getAlternatives().get(0);\n+      RegexTree last = tree.getAlternatives().get(tree.getAlternatives().size() - 1);\n+      if (isAnchored(first, Position.BEGINNING) || isAnchored(last, Position.END)) {\n+        reportIssue(tree, \"Group the alternatives together to get the intended precedence.\", null, Collections.emptyList());\n+      }\n+      super.visitDisjunction(tree);\n+    }\n+\n+    private boolean isAnchored(RegexTree tree, Position position) {\n+      if (!tree.is(RegexTree.Kind.SEQUENCE)) {\n+        return false;\n+      }\n+      SequenceTree sequence = (SequenceTree) tree;\n+      List<RegexTree> items = sequence.getItems().stream()\n+        .filter(item -> !isFlagSetter(item))\n+        .collect(Collectors.toList());\n+      if (items.isEmpty()) {\n+        return false;\n+      }\n+      int index = position == Position.BEGINNING ? 0 : (items.size() - 1);\n+      return items.get(index).is(RegexTree.Kind.BOUNDARY);", "originalCommit": "fff2929bdf7f1131b3f9827a6b0dbb564d008ca5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7df06235291d388aa8b0d4c9a284a5a8c8138ee", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java b/java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java\nindex 5820dbff4..95b586108 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/regex/AnchorPrecedenceCheck.java\n\n@@ -21,11 +21,9 @@ package org.sonar.java.checks.regex;\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n import org.sonar.check.Rule;\n import org.sonar.java.regex.RegexParseResult;\n import org.sonar.java.regex.ast.DisjunctionTree;\n-import org.sonar.java.regex.ast.NonCapturingGroupTree;\n import org.sonar.java.regex.ast.RegexBaseVisitor;\n import org.sonar.java.regex.ast.RegexTree;\n import org.sonar.java.regex.ast.SequenceTree;\n"}}, {"oid": "a7df06235291d388aa8b0d4c9a284a5a8c8138ee", "url": "https://github.com/SonarSource/sonar-java/commit/a7df06235291d388aa8b0d4c9a284a5a8c8138ee", "message": "SONARJAVA-3417 Rule S5850: Alternatives in regular expressions ...\n\n... should be grouped when used with anchors", "committedDate": "2020-06-17T10:55:44Z", "type": "commit"}, {"oid": "f959f95000bfb173e97ba327e073a73db69b4f40", "url": "https://github.com/SonarSource/sonar-java/commit/f959f95000bfb173e97ba327e073a73db69b4f40", "message": "Fix exception on empty sequences\n\nAlso add the ability to still find anchors preceded by a flag-setting\ngroup (e.g. `(?i)^a|b|c$`).", "committedDate": "2020-06-17T10:55:44Z", "type": "commit"}, {"oid": "f925c0dc68b1360db93f91341a584266972d9f18", "url": "https://github.com/SonarSource/sonar-java/commit/f925c0dc68b1360db93f91341a584266972d9f18", "message": "Make all compliant examples from the description pass without issues", "committedDate": "2020-06-17T10:55:44Z", "type": "commit"}, {"oid": "f925c0dc68b1360db93f91341a584266972d9f18", "url": "https://github.com/SonarSource/sonar-java/commit/f925c0dc68b1360db93f91341a584266972d9f18", "message": "Make all compliant examples from the description pass without issues", "committedDate": "2020-06-17T10:55:44Z", "type": "forcePushed"}]}