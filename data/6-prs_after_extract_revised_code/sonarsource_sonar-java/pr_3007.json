{"pr_number": 3007, "pr_title": "SONARJAVA-3405 Rule S5863: Assertions should not compare an object to itself", "pr_createdAt": "2020-06-12T06:20:21Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3007", "timeline": [{"oid": "8dbdf204ce54491b3b1b4ddf67d06c8e5b239458", "url": "https://github.com/SonarSource/sonar-java/commit/8dbdf204ce54491b3b1b4ddf67d06c8e5b239458", "message": "SONARJAVA-3405 Rule S5863: Assertions should not compare an object to itself", "committedDate": "2020-06-12T06:44:25Z", "type": "forcePushed"}, {"oid": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "url": "https://github.com/SonarSource/sonar-java/commit/cceb1e432244172d66fa8d67eddbfd492fbd4479", "message": "SONARJAVA-3405 Rule S5863: Assertions should not compare an object to itself", "committedDate": "2020-06-12T07:21:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5MDk1Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439390952", "bodyText": "You should add a second consecutive assertThat, to be sure to test that there is no issue.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T12:34:33Z", "path": "java-checks-test-sources/src/main/java/checks/AssertJConsecutiveAssertionCheck.java", "diffHunk": "@@ -193,6 +193,11 @@ void assert_on_member_select_7() {\n     assertThat(fof.field.list.length).isNotEqualTo(1);\n   }\n \n+  @Test\n+  void assert_on_constructor() {\n+    assertThat(new java.util.Random()).isNotEqualTo(new java.util.Random()); // Compliant", "originalCommit": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NTIyNw==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439995227", "bodyText": "\ud83d\ude16 I just repeat 10 times in my head MAKE YOUR TEST FAIL FIRST!", "author": "alban-auzeill", "createdAt": "2020-06-15T07:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5MDk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4035e7b49905159725bbaad2471219e5c606c9dc", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/AssertJConsecutiveAssertionCheck.java b/java-checks-test-sources/src/main/java/checks/AssertJConsecutiveAssertionCheck.java\nindex dfd0a15a1..88fe195d0 100644\n--- a/java-checks-test-sources/src/main/java/checks/AssertJConsecutiveAssertionCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/AssertJConsecutiveAssertionCheck.java\n\n@@ -195,7 +195,8 @@ public class AssertJConsecutiveAssertionCheck {\n \n   @Test\n   void assert_on_constructor() {\n-    assertThat(new java.util.Random()).isNotEqualTo(new java.util.Random()); // Compliant\n+    assertThat(new java.util.Random()).isNotNull(); // Compliant\n+    assertThat(new java.util.Random()).isNotEqualTo(new java.util.Random());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5NjUzNA==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439396534", "bodyText": "You are never testing secondary locations in any tests.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T12:45:51Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.ExpressionsHelper;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.Tree.Kind;\n+\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5863\")\n+public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n+\n+  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String IS_EQUAL_TO = \"isEqualTo\";\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(\"org.assertj.core.api.Assertions\",\n+        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+        \"org.assertj.core.api.AssertionsForClassTypes\")\n+      .names(\"assertThat\", \"assertThatObject\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(\"org.fest.assertions.Assertions\")\n+      .names(\"assertThat\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n+    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n+    .addParametersMatcher(parameters -> parameters.size() >= 2)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n+        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n+        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n+        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n+        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n+        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n+        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n+\n+  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n+\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return MethodMatchers.or(\n+      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n+      JUNIT5_ASSERTIONS,\n+      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n+      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n+    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n+    } else {\n+      // AssertJ or FestAssert\n+      ExpressionTree actualExpression = mit.arguments().get(0);\n+      consecutiveMethodIgnoringMessageDescription(mit)\n+        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n+        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n+    }\n+  }\n+\n+  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n+    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n+      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n+      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n+      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));", "originalCommit": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71f7656160e228574002529771d896e78551b5f9", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\ndeleted file mode 100644\nindex 71e64cba5..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\n+++ /dev/null\n\n@@ -1,189 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.tests;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.annotation.CheckForNull;\n-import javax.annotation.Nullable;\n-import org.sonar.check.Rule;\n-import org.sonar.java.checks.helpers.ExpressionsHelper;\n-import org.sonar.java.checks.helpers.MethodTreeUtils;\n-import org.sonar.java.checks.methods.AbstractMethodDetection;\n-import org.sonar.java.model.JUtils;\n-import org.sonar.java.model.SyntacticEquivalence;\n-import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.Type;\n-import org.sonar.plugins.java.api.tree.ClassTree;\n-import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-import org.sonar.plugins.java.api.tree.Tree.Kind;\n-\n-import static org.sonar.java.model.ExpressionUtils.methodName;\n-\n-@Rule(key = \"S5863\")\n-public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n-\n-  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n-  private static final String ASSERT_EQUALS = \"assertEquals\";\n-  private static final String IS_EQUAL_TO = \"isEqualTo\";\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofTypes(\"org.assertj.core.api.Assertions\",\n-        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n-        \"org.assertj.core.api.AssertionsForClassTypes\")\n-      .names(\"assertThat\", \"assertThatObject\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofTypes(\"org.fest.assertions.Assertions\")\n-      .names(\"assertThat\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n-    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n-    .addParametersMatcher(parameters -> parameters.size() >= 2)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n-        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n-        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n-        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n-        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n-        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n-        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n-\n-  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n-\n-  protected MethodMatchers getMethodInvocationMatchers() {\n-    return MethodMatchers.or(\n-      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n-      JUNIT5_ASSERTIONS,\n-      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n-      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n-  }\n-\n-  @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n-    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n-    } else {\n-      // AssertJ or FestAssert\n-      ExpressionTree actualExpression = mit.arguments().get(0);\n-      consecutiveMethodIgnoringMessageDescription(mit)\n-        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n-        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n-    }\n-  }\n-\n-  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n-    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n-      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n-      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n-      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n-      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n-    }\n-  }\n-\n-  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n-    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n-    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n-    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n-    // package is related to the tested object package.\n-    Type actualExpressionType = actualExpression.symbolType();\n-    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n-      !isPrimitiveOrNull(actualExpressionType) &&\n-      arePackageRelated(\n-        packageOf(actualExpressionType.symbol()),\n-        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n-  }\n-\n-  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n-    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n-  }\n-\n-  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {\n-    return unitTestPackage.startsWith(actualTypePackage) || actualTypePackage.startsWith(unitTestPackage);\n-  }\n-\n-  @CheckForNull\n-  static Symbol classSymbolOfTheUnitTest(@Nullable ExpressionTree actualExpression) {\n-    Tree ancestor = actualExpression;\n-    while (ancestor != null && !ancestor.is(Kind.CLASS, Kind.ENUM, Kind.INTERFACE)) {\n-      ancestor = ancestor.parent();\n-    }\n-    return ancestor == null ? null : ((ClassTree) ancestor).symbol();\n-  }\n-\n-  static String packageOf(@Nullable Symbol symbol) {\n-    return symbol == null ? \"\" : JUtils.getPackage(symbol).name();\n-  }\n-\n-  private static Optional<MethodInvocationTree> consecutiveMethodIgnoringMessageDescription(MethodInvocationTree mit) {\n-    Optional<MethodInvocationTree> consecutiveMethod = MethodTreeUtils.consecutiveMethodInvocation(mit);\n-    if (consecutiveMethod.isPresent() && ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS.matches(consecutiveMethod.get())) {\n-      return consecutiveMethodIgnoringMessageDescription(consecutiveMethod.get());\n-    }\n-    return consecutiveMethod;\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwMjA1Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439402053", "bodyText": "I don't think this is a wise use of AbstractMethodDetection, you end up calling many matchers twice. I would prefer to directly go for an IssuableSubscriptionVisitor.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T12:57:17Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.ExpressionsHelper;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.Tree.Kind;\n+\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5863\")\n+public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n+\n+  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String IS_EQUAL_TO = \"isEqualTo\";\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(\"org.assertj.core.api.Assertions\",\n+        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+        \"org.assertj.core.api.AssertionsForClassTypes\")\n+      .names(\"assertThat\", \"assertThatObject\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(\"org.fest.assertions.Assertions\")\n+      .names(\"assertThat\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n+    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n+    .addParametersMatcher(parameters -> parameters.size() >= 2)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n+        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n+        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n+        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n+        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n+        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n+        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n+\n+  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n+\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return MethodMatchers.or(\n+      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n+      JUNIT5_ASSERTIONS,\n+      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n+      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {", "originalCommit": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTQyNg==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439999426", "bodyText": "Good advice, I don't need to visit NEW_CLASS and METHOD_REFERENCE, and it's easier.", "author": "alban-auzeill", "createdAt": "2020-06-15T08:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwMjA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "71f7656160e228574002529771d896e78551b5f9", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\ndeleted file mode 100644\nindex 71e64cba5..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\n+++ /dev/null\n\n@@ -1,189 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.tests;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.annotation.CheckForNull;\n-import javax.annotation.Nullable;\n-import org.sonar.check.Rule;\n-import org.sonar.java.checks.helpers.ExpressionsHelper;\n-import org.sonar.java.checks.helpers.MethodTreeUtils;\n-import org.sonar.java.checks.methods.AbstractMethodDetection;\n-import org.sonar.java.model.JUtils;\n-import org.sonar.java.model.SyntacticEquivalence;\n-import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.Type;\n-import org.sonar.plugins.java.api.tree.ClassTree;\n-import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-import org.sonar.plugins.java.api.tree.Tree.Kind;\n-\n-import static org.sonar.java.model.ExpressionUtils.methodName;\n-\n-@Rule(key = \"S5863\")\n-public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n-\n-  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n-  private static final String ASSERT_EQUALS = \"assertEquals\";\n-  private static final String IS_EQUAL_TO = \"isEqualTo\";\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofTypes(\"org.assertj.core.api.Assertions\",\n-        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n-        \"org.assertj.core.api.AssertionsForClassTypes\")\n-      .names(\"assertThat\", \"assertThatObject\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofTypes(\"org.fest.assertions.Assertions\")\n-      .names(\"assertThat\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n-    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n-    .addParametersMatcher(parameters -> parameters.size() >= 2)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n-        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n-        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n-        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n-        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n-        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n-        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n-\n-  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n-\n-  protected MethodMatchers getMethodInvocationMatchers() {\n-    return MethodMatchers.or(\n-      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n-      JUNIT5_ASSERTIONS,\n-      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n-      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n-  }\n-\n-  @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n-    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n-    } else {\n-      // AssertJ or FestAssert\n-      ExpressionTree actualExpression = mit.arguments().get(0);\n-      consecutiveMethodIgnoringMessageDescription(mit)\n-        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n-        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n-    }\n-  }\n-\n-  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n-    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n-      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n-      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n-      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n-      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n-    }\n-  }\n-\n-  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n-    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n-    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n-    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n-    // package is related to the tested object package.\n-    Type actualExpressionType = actualExpression.symbolType();\n-    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n-      !isPrimitiveOrNull(actualExpressionType) &&\n-      arePackageRelated(\n-        packageOf(actualExpressionType.symbol()),\n-        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n-  }\n-\n-  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n-    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n-  }\n-\n-  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {\n-    return unitTestPackage.startsWith(actualTypePackage) || actualTypePackage.startsWith(unitTestPackage);\n-  }\n-\n-  @CheckForNull\n-  static Symbol classSymbolOfTheUnitTest(@Nullable ExpressionTree actualExpression) {\n-    Tree ancestor = actualExpression;\n-    while (ancestor != null && !ancestor.is(Kind.CLASS, Kind.ENUM, Kind.INTERFACE)) {\n-      ancestor = ancestor.parent();\n-    }\n-    return ancestor == null ? null : ((ClassTree) ancestor).symbol();\n-  }\n-\n-  static String packageOf(@Nullable Symbol symbol) {\n-    return symbol == null ? \"\" : JUtils.getPackage(symbol).name();\n-  }\n-\n-  private static Optional<MethodInvocationTree> consecutiveMethodIgnoringMessageDescription(MethodInvocationTree mit) {\n-    Optional<MethodInvocationTree> consecutiveMethod = MethodTreeUtils.consecutiveMethodInvocation(mit);\n-    if (consecutiveMethod.isPresent() && ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS.matches(consecutiveMethod.get())) {\n-      return consecutiveMethodIgnoringMessageDescription(consecutiveMethod.get());\n-    }\n-    return consecutiveMethod;\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwNzQzNg==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439407436", "bodyText": "We should use @VisibleForTesting here.\nSame for classSymbolOfTheUnitTest.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T13:08:05Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.ExpressionsHelper;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.Tree.Kind;\n+\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5863\")\n+public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n+\n+  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String IS_EQUAL_TO = \"isEqualTo\";\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(\"org.assertj.core.api.Assertions\",\n+        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+        \"org.assertj.core.api.AssertionsForClassTypes\")\n+      .names(\"assertThat\", \"assertThatObject\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(\"org.fest.assertions.Assertions\")\n+      .names(\"assertThat\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n+    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n+    .addParametersMatcher(parameters -> parameters.size() >= 2)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n+        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n+        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n+        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n+        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n+        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n+        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n+\n+  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n+\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return MethodMatchers.or(\n+      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n+      JUNIT5_ASSERTIONS,\n+      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n+      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n+    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n+    } else {\n+      // AssertJ or FestAssert\n+      ExpressionTree actualExpression = mit.arguments().get(0);\n+      consecutiveMethodIgnoringMessageDescription(mit)\n+        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n+        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n+    }\n+  }\n+\n+  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n+    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n+      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n+      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n+      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n+      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n+    }\n+  }\n+\n+  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n+    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n+    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n+    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n+    // package is related to the tested object package.\n+    Type actualExpressionType = actualExpression.symbolType();\n+    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n+      !isPrimitiveOrNull(actualExpressionType) &&\n+      arePackageRelated(\n+        packageOf(actualExpressionType.symbol()),\n+        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n+  }\n+\n+  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n+    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n+  }\n+\n+  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {", "originalCommit": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71f7656160e228574002529771d896e78551b5f9", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\ndeleted file mode 100644\nindex 71e64cba5..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\n+++ /dev/null\n\n@@ -1,189 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.tests;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.annotation.CheckForNull;\n-import javax.annotation.Nullable;\n-import org.sonar.check.Rule;\n-import org.sonar.java.checks.helpers.ExpressionsHelper;\n-import org.sonar.java.checks.helpers.MethodTreeUtils;\n-import org.sonar.java.checks.methods.AbstractMethodDetection;\n-import org.sonar.java.model.JUtils;\n-import org.sonar.java.model.SyntacticEquivalence;\n-import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.Type;\n-import org.sonar.plugins.java.api.tree.ClassTree;\n-import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-import org.sonar.plugins.java.api.tree.Tree.Kind;\n-\n-import static org.sonar.java.model.ExpressionUtils.methodName;\n-\n-@Rule(key = \"S5863\")\n-public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n-\n-  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n-  private static final String ASSERT_EQUALS = \"assertEquals\";\n-  private static final String IS_EQUAL_TO = \"isEqualTo\";\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofTypes(\"org.assertj.core.api.Assertions\",\n-        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n-        \"org.assertj.core.api.AssertionsForClassTypes\")\n-      .names(\"assertThat\", \"assertThatObject\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofTypes(\"org.fest.assertions.Assertions\")\n-      .names(\"assertThat\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n-    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n-    .addParametersMatcher(parameters -> parameters.size() >= 2)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n-        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n-        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n-        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n-        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n-        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n-        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n-\n-  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n-\n-  protected MethodMatchers getMethodInvocationMatchers() {\n-    return MethodMatchers.or(\n-      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n-      JUNIT5_ASSERTIONS,\n-      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n-      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n-  }\n-\n-  @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n-    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n-    } else {\n-      // AssertJ or FestAssert\n-      ExpressionTree actualExpression = mit.arguments().get(0);\n-      consecutiveMethodIgnoringMessageDescription(mit)\n-        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n-        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n-    }\n-  }\n-\n-  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n-    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n-      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n-      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n-      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n-      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n-    }\n-  }\n-\n-  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n-    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n-    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n-    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n-    // package is related to the tested object package.\n-    Type actualExpressionType = actualExpression.symbolType();\n-    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n-      !isPrimitiveOrNull(actualExpressionType) &&\n-      arePackageRelated(\n-        packageOf(actualExpressionType.symbol()),\n-        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n-  }\n-\n-  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n-    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n-  }\n-\n-  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {\n-    return unitTestPackage.startsWith(actualTypePackage) || actualTypePackage.startsWith(unitTestPackage);\n-  }\n-\n-  @CheckForNull\n-  static Symbol classSymbolOfTheUnitTest(@Nullable ExpressionTree actualExpression) {\n-    Tree ancestor = actualExpression;\n-    while (ancestor != null && !ancestor.is(Kind.CLASS, Kind.ENUM, Kind.INTERFACE)) {\n-      ancestor = ancestor.parent();\n-    }\n-    return ancestor == null ? null : ((ClassTree) ancestor).symbol();\n-  }\n-\n-  static String packageOf(@Nullable Symbol symbol) {\n-    return symbol == null ? \"\" : JUtils.getPackage(symbol).name();\n-  }\n-\n-  private static Optional<MethodInvocationTree> consecutiveMethodIgnoringMessageDescription(MethodInvocationTree mit) {\n-    Optional<MethodInvocationTree> consecutiveMethod = MethodTreeUtils.consecutiveMethodInvocation(mit);\n-    if (consecutiveMethod.isPresent() && ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS.matches(consecutiveMethod.get())) {\n-      return consecutiveMethodIgnoringMessageDescription(consecutiveMethod.get());\n-    }\n-    return consecutiveMethod;\n-  }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQxODE4Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r439418183", "bodyText": "Can't we use JUtils.enclosingClass here?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T13:28:41Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.CheckForNull;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.ExpressionsHelper;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.Tree.Kind;\n+\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5863\")\n+public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n+\n+  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String IS_EQUAL_TO = \"isEqualTo\";\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(\"org.assertj.core.api.Assertions\",\n+        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+        \"org.assertj.core.api.AssertionsForClassTypes\")\n+      .names(\"assertThat\", \"assertThatObject\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(\"org.fest.assertions.Assertions\")\n+      .names(\"assertThat\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n+    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n+    .addParametersMatcher(parameters -> parameters.size() >= 2)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n+    .ofTypes(\"org.junit.Assert\")\n+    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n+    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n+\n+  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n+        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n+        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n+        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n+        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n+        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n+      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n+        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build());\n+\n+  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n+\n+  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n+\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return MethodMatchers.or(\n+      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n+      JUNIT5_ASSERTIONS,\n+      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n+      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n+    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n+      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n+    } else {\n+      // AssertJ or FestAssert\n+      ExpressionTree actualExpression = mit.arguments().get(0);\n+      consecutiveMethodIgnoringMessageDescription(mit)\n+        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n+        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n+    }\n+  }\n+\n+  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n+    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n+      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n+      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n+      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n+      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n+    }\n+  }\n+\n+  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n+    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n+    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n+    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n+    // package is related to the tested object package.\n+    Type actualExpressionType = actualExpression.symbolType();\n+    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n+      !isPrimitiveOrNull(actualExpressionType) &&\n+      arePackageRelated(\n+        packageOf(actualExpressionType.symbol()),\n+        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n+  }\n+\n+  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n+    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n+  }\n+\n+  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {\n+    return unitTestPackage.startsWith(actualTypePackage) || actualTypePackage.startsWith(unitTestPackage);\n+  }\n+\n+  @CheckForNull\n+  static Symbol classSymbolOfTheUnitTest(@Nullable ExpressionTree actualExpression) {", "originalCommit": "cceb1e432244172d66fa8d67eddbfd492fbd4479", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA2MDM4MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3007#discussion_r440060381", "bodyText": "\ud83e\udd18", "author": "alban-auzeill", "createdAt": "2020-06-15T09:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQxODE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "71f7656160e228574002529771d896e78551b5f9", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\ndeleted file mode 100644\nindex 71e64cba5..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertionCompareToSelfCheck.java\n+++ /dev/null\n\n@@ -1,189 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.tests;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Optional;\n-import javax.annotation.CheckForNull;\n-import javax.annotation.Nullable;\n-import org.sonar.check.Rule;\n-import org.sonar.java.checks.helpers.ExpressionsHelper;\n-import org.sonar.java.checks.helpers.MethodTreeUtils;\n-import org.sonar.java.checks.methods.AbstractMethodDetection;\n-import org.sonar.java.model.JUtils;\n-import org.sonar.java.model.SyntacticEquivalence;\n-import org.sonar.plugins.java.api.JavaFileScannerContext.Location;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.semantic.Symbol;\n-import org.sonar.plugins.java.api.semantic.Type;\n-import org.sonar.plugins.java.api.tree.ClassTree;\n-import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-import org.sonar.plugins.java.api.tree.Tree.Kind;\n-\n-import static org.sonar.java.model.ExpressionUtils.methodName;\n-\n-@Rule(key = \"S5863\")\n-public class AssertionCompareToSelfCheck extends AbstractMethodDetection {\n-\n-  private static final String ASSERT_ARRAY_EQUALS = \"assertArrayEquals\";\n-  private static final String ASSERT_EQUALS = \"assertEquals\";\n-  private static final String IS_EQUAL_TO = \"isEqualTo\";\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofTypes(\"org.assertj.core.api.Assertions\",\n-        \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n-        \"org.assertj.core.api.AssertionsForClassTypes\")\n-      .names(\"assertThat\", \"assertThatObject\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofTypes(\"org.fest.assertions.Assertions\")\n-      .names(\"assertThat\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final MethodMatchers JUNIT5_ASSERTIONS = MethodMatchers.create()\n-    .ofTypes(\"org.junit.jupiter.api.Assertions\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\")\n-    .addParametersMatcher(parameters -> parameters.size() >= 2)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITHOUT_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers JUNIT4_ASSERTIONS_WITH_MESSAGE = MethodMatchers.create()\n-    .ofTypes(\"org.junit.Assert\")\n-    .names(ASSERT_ARRAY_EQUALS, ASSERT_EQUALS)\n-    .addParametersMatcher(\"java.lang.String\", MethodMatchers.ANY, MethodMatchers.ANY)\n-    .build();\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\").withAnyParameters().build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"as\", \"describedAs\", \"overridingErrorMessage\").withAnyParameters().build());\n-\n-  private static final MethodMatchers ASSERTJ_AND_FEST_ASSERT_PREDICATES = MethodMatchers.or(\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n-      .names(\"contains\", \"containsAll\", \"containsAllEntriesOf\", \"containsAnyElementOf\", \"containsAnyOf\",\n-        \"containsExactly\", \"containsExactlyElementsOf\", \"containsExactlyEntriesOf\", \"containsExactlyInAnyOrder\",\n-        \"containsExactlyInAnyOrderEntriesOf\", \"containsIgnoringCase\", \"containsOnly\", \"containsOnlyElementsOf\",\n-        \"containsSequence\", \"containsSubsequence\", \"doesNotContain\", \"endsWith\",\n-        \"hasSameClassAs\", \"hasSameElementsAs\", \"hasSameHashCodeAs\", \"hasSameSizeAs\", IS_EQUAL_TO,\n-        \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build(),\n-    MethodMatchers.create()\n-      .ofSubTypes(\"org.fest.assertions.GenericAssert\")\n-      .names(\"contains\", \"containsExactly\", \"containsIgnoringCase\", \"containsOnly\", \"doesNotContain\", \"endsWith\",\n-        IS_EQUAL_TO, \"isEqualToIgnoringCase\", \"isSameAs\", \"startsWith\")\n-      .addParametersMatcher(MethodMatchers.ANY)\n-      .build());\n-\n-  private static final List<String> EQUALS_HASH_CODE_METHODS = Arrays.asList(ASSERT_EQUALS, IS_EQUAL_TO, \"hasSameHashCodeAs\");\n-\n-  public static final String MESSAGE = \"Replace this assertion to not have the same actual and expected expression.\";\n-\n-  protected MethodMatchers getMethodInvocationMatchers() {\n-    return MethodMatchers.or(\n-      ASSERTJ_AND_FEST_ASSERT_SUBJECT_METHODS,\n-      JUNIT5_ASSERTIONS,\n-      JUNIT4_ASSERTIONS_WITH_MESSAGE,\n-      JUNIT4_ASSERTIONS_WITHOUT_MESSAGE);\n-  }\n-\n-  @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (JUNIT4_ASSERTIONS_WITH_MESSAGE.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(2), mit.arguments().get(1));\n-    } else if (JUNIT4_ASSERTIONS_WITHOUT_MESSAGE.matches(mit) || JUNIT5_ASSERTIONS.matches(mit)) {\n-      checkActualAndExpectedExpression(methodName(mit).name(), mit.arguments().get(1), mit.arguments().get(0));\n-    } else {\n-      // AssertJ or FestAssert\n-      ExpressionTree actualExpression = mit.arguments().get(0);\n-      consecutiveMethodIgnoringMessageDescription(mit)\n-        .filter(ASSERTJ_AND_FEST_ASSERT_PREDICATES::matches)\n-        .ifPresent(predicate -> checkActualAndExpectedExpression(methodName(predicate).name(), actualExpression, predicate.arguments().get(0)));\n-    }\n-  }\n-\n-  private void checkActualAndExpectedExpression(String predicateMethodName, ExpressionTree actualExpression, ExpressionTree expectedExpression) {\n-    if (ExpressionsHelper.alwaysReturnSameValue(actualExpression) &&\n-      SyntacticEquivalence.areEquivalent(actualExpression, expectedExpression) &&\n-      !isLegitimateSelfComparison(predicateMethodName, actualExpression)) {\n-      List<Location> secondaryLocations = Collections.singletonList(new Location(\"actual\", actualExpression));\n-      reportIssue(expectedExpression, MESSAGE, secondaryLocations, null);\n-    }\n-  }\n-\n-  private static boolean isLegitimateSelfComparison(String comparisonMethodName, ExpressionTree actualExpression) {\n-    // In a unit test validating \"equals\" and \"hashCode\" methods, it's legitimate to compare an object to itself.\n-    // In other kinds of tests, it's a bug. But it's complicated to know if a unit test is about validating the\n-    // \"equals\" method or not. The following trade-off allows the self-comparison of an object if the unit test\n-    // package is related to the tested object package.\n-    Type actualExpressionType = actualExpression.symbolType();\n-    return EQUALS_HASH_CODE_METHODS.contains(comparisonMethodName) &&\n-      !isPrimitiveOrNull(actualExpressionType) &&\n-      arePackageRelated(\n-        packageOf(actualExpressionType.symbol()),\n-        packageOf(classSymbolOfTheUnitTest(actualExpression)));\n-  }\n-\n-  private static boolean isPrimitiveOrNull(Type actualExpressionType) {\n-    return actualExpressionType.isPrimitive() || \"null\".equals(actualExpressionType.symbol().name());\n-  }\n-\n-  static boolean arePackageRelated(String actualTypePackage, String unitTestPackage) {\n-    return unitTestPackage.startsWith(actualTypePackage) || actualTypePackage.startsWith(unitTestPackage);\n-  }\n-\n-  @CheckForNull\n-  static Symbol classSymbolOfTheUnitTest(@Nullable ExpressionTree actualExpression) {\n-    Tree ancestor = actualExpression;\n-    while (ancestor != null && !ancestor.is(Kind.CLASS, Kind.ENUM, Kind.INTERFACE)) {\n-      ancestor = ancestor.parent();\n-    }\n-    return ancestor == null ? null : ((ClassTree) ancestor).symbol();\n-  }\n-\n-  static String packageOf(@Nullable Symbol symbol) {\n-    return symbol == null ? \"\" : JUtils.getPackage(symbol).name();\n-  }\n-\n-  private static Optional<MethodInvocationTree> consecutiveMethodIgnoringMessageDescription(MethodInvocationTree mit) {\n-    Optional<MethodInvocationTree> consecutiveMethod = MethodTreeUtils.consecutiveMethodInvocation(mit);\n-    if (consecutiveMethod.isPresent() && ASSERTJ_AND_FEST_ASSERT_MESSAGE_METHODS.matches(consecutiveMethod.get())) {\n-      return consecutiveMethodIgnoringMessageDescription(consecutiveMethod.get());\n-    }\n-    return consecutiveMethod;\n-  }\n-\n-}\n"}}, {"oid": "71f7656160e228574002529771d896e78551b5f9", "url": "https://github.com/SonarSource/sonar-java/commit/71f7656160e228574002529771d896e78551b5f9", "message": "SONARJAVA-3402 share \"alwaysReturnSameValue\" in \"ExpressionsHelper\" and support constructors", "committedDate": "2020-06-15T12:28:15Z", "type": "commit"}, {"oid": "4035e7b49905159725bbaad2471219e5c606c9dc", "url": "https://github.com/SonarSource/sonar-java/commit/4035e7b49905159725bbaad2471219e5c606c9dc", "message": "Fix from review, remove false-positives based on unit test names instead of package names", "committedDate": "2020-06-15T12:28:15Z", "type": "forcePushed"}, {"oid": "a1579243ba574ad01c94b742b9803b7950348d80", "url": "https://github.com/SonarSource/sonar-java/commit/a1579243ba574ad01c94b742b9803b7950348d80", "message": "SONARJAVA-3405 Rule S5863: Assertions should not compare an object to itself", "committedDate": "2020-06-15T13:37:23Z", "type": "commit"}, {"oid": "a1579243ba574ad01c94b742b9803b7950348d80", "url": "https://github.com/SonarSource/sonar-java/commit/a1579243ba574ad01c94b742b9803b7950348d80", "message": "SONARJAVA-3405 Rule S5863: Assertions should not compare an object to itself", "committedDate": "2020-06-15T13:37:23Z", "type": "forcePushed"}]}