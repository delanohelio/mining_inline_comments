{"pr_number": 3131, "pr_title": "SONARJAVA-3345 S3518 (division by zero) should handle BigDecimal and BigInteger", "pr_createdAt": "2020-08-06T14:50:55Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3131", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r467703174", "bodyText": "I addition to the above use cases, we should probably also support:\n\nThe BigInteger.ZERO and BigDecimal.ZERO identifiers\n\n  void zeroConstantBigInt(BigInteger r) {\n    BigInteger z1 = BigInteger.ZERO;\n    r = r.divide(z1); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"valueOf\" from long, double to BigInteger, BigDecimal\n\n  void valueOfBigInt(BigInteger r) {\n    long z1 = 0;\n    BigInteger z2 = BigInteger.valueOf(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through BigDecimal constructor from BigInteger, double, int, long\n\n  void constructorBigDecimal(BigDecimal r) {\n    double z1 = 0;\n    BigDecimal z2 = new BigDecimal(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"toBigInteger\", \"toBigIntegerExact\", \"shortValueExact\", \"round\", \"\tremainder\", \"pow\", \"longValueExact\", \"longValue\" , \"\tintValueExact\", \"intValue\", \"floatValue\", \"doubleValue\", \"byteValueExact\", \"abs\", \tshiftLeft, shiftRight\nSupport \tBigDecimal.divideToIntegralValue like BigDecimal.divide", "author": "alban-auzeill", "createdAt": "2020-08-10T06:11:01Z", "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "diffHunk": "@@ -495,3 +498,67 @@ private int g(int x, int y) {\n     }\n   }\n }\n+\n+class BigIntegerAndDecimal {\n+  void simpleBigInt(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0); // flow@simpleBigInt {{'valueOf()' can return zero.}} flow@simpleBigInt {{Implies 'z1' can be zero.}}\n+    BigInteger z2 = z1; // flow@simpleBigInt {{Implies 'z2' has the same value as 'z1'.}}\n+    r = r.divide(z2); // Noncompliant [[flows=simpleBigInt]] {{Make sure \"z2\" can't be zero before doing this division.}} flow@simpleBigInt {{Division by zero.}}\n+  }\n+\n+  void simpleBigDec(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);;\n+    BigDecimal z2 = z1;\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void bigMultiply(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult1 = z1.multiply(b1);\n+\n+    r = r.divide(mult1); // Noncompliant\n+  }\n+\n+  void bigMultiply2(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult2 = b1.multiply(z1);\n+\n+    r = r.divide(mult2); // Noncompliant\n+  }\n+\n+  void bigMultiplyChained(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    r = r.divide(z1.multiply(b1)); // Noncompliant\n+  }\n+\n+  void bigPlus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.add(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigMinus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.subtract(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger v1 = BigInteger.valueOf(42);\n+    BigInteger z2 = z1.multiply(v1);\n+    r = r.remainder(z2); // Noncompliant\n+  }\n+\n+  void simpleBigInt(BigInteger r, int value) {\n+    BigInteger z1 = BigInteger.valueOf(value);\n+    r = r.divide(z1); // Compliant\n+  }\n+}", "originalCommit": "9288cf9e8b36cbb90391bef5e2be28600b221787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3NTI1Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r467875256", "bodyText": "Good point! I added one commit for each case that you stated.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-08-10T12:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxNjYzOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r469816638", "bodyText": "Nice job!\nUnfortunately, now we raise a FP on the following code:\n    BigDecimal x = new BigDecimal(0);\n    BigDecimal y = new BigDecimal(0);\n    if (x == y) { // false-positive \"always true\"\n      System.out.println(\"1\");\n    } else {\n      System.out.println(\"2\"); // <==\n    }", "author": "alban-auzeill", "createdAt": "2020-08-13T09:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "61b81a35f2ea22e719e976b229ca4c42755a024b", "chunk": "diff --git a/java-frontend/src/test/files/se/DivisionByZeroCheck.java b/java-frontend/src/test/files/se/DivisionByZeroCheck.java\nindex 917ff2319..9d1a70122 100644\n--- a/java-frontend/src/test/files/se/DivisionByZeroCheck.java\n+++ b/java-frontend/src/test/files/se/DivisionByZeroCheck.java\n\n@@ -557,8 +557,193 @@ class BigIntegerAndDecimal {\n     r = r.remainder(z2); // Noncompliant\n   }\n \n+  void simpleDivideAndRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    r.divideAndRemainder(z1); // Noncompliant\n+  }\n+\n   void simpleBigInt(BigInteger r, int value) {\n     BigInteger z1 = BigInteger.valueOf(value);\n     r = r.divide(z1); // Compliant\n   }\n+\n+  // From Constant\n+  void simpleBigIntFromZeroConstant(BigInteger r) {\n+    BigInteger z1 = BigInteger.ZERO;\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void simpleBigDecFromZeroConstant(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.ZERO;\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void simpleBigIntFromOneConstant(BigInteger r) {\n+    BigInteger z1 = BigInteger.ONE;\n+    r = r.divide(z1); // Compliant\n+  }\n+\n+  void simpleBigDecFromTenConstant(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.TEN;\n+    r = r.divide(z1); // Compliant\n+  }\n+\n+  // Keeping zero constraints\n+  void keepZeroConstraint(BigInteger r) {\n+    int i = 0;\n+    BigInteger z1 = BigInteger.valueOf(i);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void keepZeroConstraint(BigDecimal r) {\n+    double i = 0.0;\n+    BigDecimal z1 = BigDecimal.valueOf(i);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void keepZeroConstraint2(BigInteger r) {\n+    int i = 0;\n+    long j = i;\n+    BigInteger z1 = BigInteger.valueOf(j);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  // Operations keeping constraints\n+  void keepToBigInteger(BigInteger r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);\n+    BigInteger z2 = z1.toBigInteger();\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void keepToBigIntegerExact(BigInteger r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);\n+    BigInteger z2 = z1.toBigIntegerExact();\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void keepRound(BigDecimal r) {\n+    MathContext mc = new MathContext(5);\n+    BigDecimal z1 = BigDecimal.valueOf(0);\n+    z1 = z1.round(mc);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void keepRemainder(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);\n+    z1 = z1.remainder(r);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void keepPow(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);\n+    z1 = z1.pow(42);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  void keepLongValueExact(long r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    long l1 = z1.longValueExact();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepLongValue(long r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    long l1 = z1.longValue();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepIntValueExact(int r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    int l1 = z1.intValueExact();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepIntValue(int r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    int l1 = z1.intValue();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepFloatValue(float r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    float l1 = z1.floatValue();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepDoubleValue(double r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    double l1 = z1.doubleValue();\n+    r = r / l1; // Noncompliant\n+  }\n+\n+  void keepShortValueExact(short r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    short s1 = z1.shortValueExact();\n+    int res = r / s1; // Noncompliant\n+  }\n+\n+  void keepShortValue(short r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    short s1 = z1.shortValue();\n+    int res = r / s1; // Noncompliant\n+  }\n+\n+  void keepByteValue(byte r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    byte s1 = z1.byteValue();\n+    int res = r / s1; // Noncompliant\n+  }\n+\n+  void keepByteValueExact(byte r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    byte s1 = z1.byteValueExact();\n+    int res = r / s1; // Noncompliant\n+  }\n+\n+  void keepAbs(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger abs = z1.abs();\n+    r = r.divide(abs); // Noncompliant\n+  }\n+\n+  void keepShift(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    z1 = z1.shiftLeft(42);\n+    z1 = z1.shiftRight(42);\n+    r = r.divide(z1); // Noncompliant\n+  }\n+\n+  // BigDecimal constructor\n+  void fromBigDecimalConstructorInt(BigDecimal r) {\n+    BigDecimal z2 = new BigDecimal(0);\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void fromBigDecimalConstructorString(BigDecimal r) {\n+    BigDecimal z2 = new BigDecimal(\"0\");\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void fromBigDecimalConstructorStringCompliant(BigDecimal r) {\n+    BigDecimal z2 = new BigDecimal(\"42\");\n+    r = r.divide(z2); // Compliant\n+  }\n+\n+  void fromBigDecimalConstructorId(BigDecimal r) {\n+    double z1 = 0.0;\n+    BigDecimal z2 = new BigDecimal(z1);\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void fromBigDecimalConstructorBigInt(BigDecimal r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigDecimal z2 = new BigDecimal(z1);\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void fromBigDecimalConstructorBigIntCompliant(BigDecimal r) {\n+    BigInteger z1 = BigInteger.valueOf(12);\n+    BigDecimal z2 = new BigDecimal(z1);\n+    r = r.divide(z2); // Compliant\n+  }\n }\n"}}, {"oid": "61b81a35f2ea22e719e976b229ca4c42755a024b", "url": "https://github.com/SonarSource/sonar-java/commit/61b81a35f2ea22e719e976b229ca4c42755a024b", "message": "Fix code smells", "committedDate": "2020-08-10T13:31:09Z", "type": "forcePushed"}, {"oid": "721b3c4ff4e32f45ceb6ddec5060d2991fa4b5a9", "url": "https://github.com/SonarSource/sonar-java/commit/721b3c4ff4e32f45ceb6ddec5060d2991fa4b5a9", "message": "SONARJAVA-3345 Simple handling of BigDecimal and BigInteger", "committedDate": "2020-08-14T08:37:47Z", "type": "commit"}, {"oid": "e2f999a0f9b940958374caced2b32d07aab1eb2d", "url": "https://github.com/SonarSource/sonar-java/commit/e2f999a0f9b940958374caced2b32d07aab1eb2d", "message": "SONARJAVA-3345 support additional operations", "committedDate": "2020-08-14T08:37:47Z", "type": "commit"}, {"oid": "6c17d150620765d552d803b0be00389bb3be9f96", "url": "https://github.com/SonarSource/sonar-java/commit/6c17d150620765d552d803b0be00389bb3be9f96", "message": "SONARJAVA-3345 Update rule description", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "562561ed21d4f891998ba4da8c57741c23ba9614", "url": "https://github.com/SonarSource/sonar-java/commit/562561ed21d4f891998ba4da8c57741c23ba9614", "message": "Add support for divideAndRemainder", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "a9bc7e8d6890681753276bfaba2f27a3cd75b79b", "url": "https://github.com/SonarSource/sonar-java/commit/a9bc7e8d6890681753276bfaba2f27a3cd75b79b", "message": "Add support for \"ZERO\" constant", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "31fae75cbd7eaa5839e54db8160fa97e0d77b2b5", "url": "https://github.com/SonarSource/sonar-java/commit/31fae75cbd7eaa5839e54db8160fa97e0d77b2b5", "message": "Keep constraints from primitive types", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "6b443b0ebb2d3f9e576f13f52a1906659c6406ce", "url": "https://github.com/SonarSource/sonar-java/commit/6b443b0ebb2d3f9e576f13f52a1906659c6406ce", "message": "Keep constraints though operations", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "ed31a615e0a0103f1038512057eaa14ef71db24d", "url": "https://github.com/SonarSource/sonar-java/commit/ed31a615e0a0103f1038512057eaa14ef71db24d", "message": "Add support to BigDecimal constructor", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "b2dce0aade9e9aef0d5a71e216959dc6c649d6d4", "url": "https://github.com/SonarSource/sonar-java/commit/b2dce0aade9e9aef0d5a71e216959dc6c649d6d4", "message": "Fix code smells", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "1ad350c6f187911cefdb0435676c8c9200a9099d", "url": "https://github.com/SonarSource/sonar-java/commit/1ad350c6f187911cefdb0435676c8c9200a9099d", "message": "Revert \"Add support to BigDecimal constructor\"\n\nThis reverts commit 442c3f3a09dd8bf253764b02961e30d5f55a4d76.", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "0f70961b64d4db723e45049beeff8d87a83f8ba2", "url": "https://github.com/SonarSource/sonar-java/commit/0f70961b64d4db723e45049beeff8d87a83f8ba2", "message": "Add test in Condition always true or false and fix formatting", "committedDate": "2020-08-14T08:38:48Z", "type": "commit"}, {"oid": "0f70961b64d4db723e45049beeff8d87a83f8ba2", "url": "https://github.com/SonarSource/sonar-java/commit/0f70961b64d4db723e45049beeff8d87a83f8ba2", "message": "Add test in Condition always true or false and fix formatting", "committedDate": "2020-08-14T08:38:48Z", "type": "forcePushed"}]}