{"pr_number": 3291, "pr_title": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "pr_createdAt": "2020-11-20T09:48:59Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3291", "timeline": [{"oid": "1f2885adca0be947e261b5b2fbb544edc4cd302c", "url": "https://github.com/SonarSource/sonar-java/commit/1f2885adca0be947e261b5b2fbb544edc4cd302c", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T10:50:12Z", "type": "forcePushed"}, {"oid": "2080118475ada9f5a7e786eaf3964d5436acab47", "url": "https://github.com/SonarSource/sonar-java/commit/2080118475ada9f5a7e786eaf3964d5436acab47", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T10:58:03Z", "type": "forcePushed"}, {"oid": "83a7db4097cfdc752ce6c903533fd1d0f4eab57d", "url": "https://github.com/SonarSource/sonar-java/commit/83a7db4097cfdc752ce6c903533fd1d0f4eab57d", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T12:25:48Z", "type": "forcePushed"}, {"oid": "8d407f508fb86c8170c79718885ac2cf5da131a0", "url": "https://github.com/SonarSource/sonar-java/commit/8d407f508fb86c8170c79718885ac2cf5da131a0", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T12:59:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMjE1MA==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527722150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return i -> (R) i; // Compliant, 'R.class::cast' wont compile.\n          \n          \n            \n                return i -> (R) i; // Compliant, 'R.class::cast' won't compile.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T14:19:25Z", "path": "java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java", "diffHunk": "@@ -143,6 +165,10 @@ void test2(Object param) {\n     });\n   }\n \n+  private static <I, R> Function<I, R> castingIdentity() {\n+    return i -> (R) i; // Compliant, 'R.class::cast' wont compile.", "originalCommit": "8d407f508fb86c8170c79718885ac2cf5da131a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fa7d2560ca23d1f7116491f6450f78a27768796", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java b/java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java\nindex b61ffc568..ece4bd5d6 100644\n--- a/java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java\n\n@@ -166,7 +166,7 @@ class CastCheck {\n   }\n \n   private static <I, R> Function<I, R> castingIdentity() {\n-    return i -> (R) i; // Compliant, 'R.class::cast' wont compile.\n+    return i -> (R) i; // Compliant, 'R.class::cast' won't compile.\n   }\n \n   void test3(Object param) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527743589", "bodyText": "There is no such thing as an IdentifierTree not being an IdentifierTreeImpl, so the first test is useless.\nNow, I'm afraid I don't understand what you try to achieve here.\nTesting if we are in the presence of a raw type of a generic type? For instance (List) obj ?\nWhatever it is, we have a way to express this through our own API rather than relying on the toString() of the eclipse binding.", "author": "m-g-sonar", "createdAt": "2020-11-20T14:51:46Z", "path": "java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java", "diffHunk": "@@ -130,12 +135,32 @@ private static boolean nullAgainstParam(ExpressionTree o1, ExpressionTree o2, Sy\n     if (expr.is(Tree.Kind.TYPE_CAST)) {\n       TypeCastTree typeCastTree = (TypeCastTree) expr;\n       if (isSingleParamCast(typeCastTree.expression(), symbol)) {\n-        return Optional.of(typeCastTree.type().symbolType().name());\n+        return getTypeName(typeCastTree.type());\n       }\n     }\n     return Optional.empty();\n   }\n+  \n+  private static Optional<String> getTypeName(TypeTree type) {\n+    if (type.is(Tree.Kind.PARAMETERIZED_TYPE)) {\n+      type = ((ParameterizedTypeTree) type).type();\n+    }\n+    if (type.is(Tree.Kind.IDENTIFIER) && !isGeneric((IdentifierTree) type)) {\n+      return Optional.of(((IdentifierTree) type).name());\n+    }\n+    if (type.is(Tree.Kind.ARRAY_TYPE)) {\n+      return getTypeName(((ArrayTypeTree) type).type()).map(x -> x + \"[]\");\n+    }\n+    if (type.is(Tree.Kind.PRIMITIVE_TYPE)) {\n+      return Optional.of(((PrimitiveTypeTree) type).keyword().text());\n+    }\n+    return Optional.empty();\n+  }\n \n+  private static boolean isGeneric(IdentifierTree identifierTree) {\n+    return (identifierTree instanceof IdentifierTreeImpl) && ((IdentifierTreeImpl) identifierTree).binding.toString().matches(\"<[A-Z]>\");", "originalCommit": "395d42ce77e3243e8481cdd06702c9051121ebc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0NjYwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527746600", "bodyText": "That's a case when we're inside a parametrized method\n  private static <I, R> Function<I, R> castingIdentity() {\n    return i -> (R) i; // Compliant, 'R.class::cast' wont compile.\n  }\n\n'R.class' doesn't compile, but it's still catched as identifier.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T14:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1MTk2Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527751966", "bodyText": "So I think this method should help:\nhttps://github.com/SonarSource/sonar-java/blob/master/java-frontend/src/main/java/org/sonar/java/model/JUtils.java#L94\nWhich would make:\nreturn JUtils.isTypeVar(identiferTree.symbolType());", "author": "m-g-sonar", "createdAt": "2020-11-20T15:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2MzIwMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3291#discussion_r527763202", "bodyText": "Thanks, That helped :)", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-11-20T15:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf226f67435570105b7822221e8dab329f98426e", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java\nindex b146fccaf..f2e27918d 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/ReplaceLambdaByMethodRefCheck.java\n\n@@ -158,7 +158,7 @@ public class ReplaceLambdaByMethodRefCheck extends IssuableSubscriptionVisitor {\n   }\n \n   private static boolean isGeneric(IdentifierTree identifierTree) {\n-    return (identifierTree instanceof IdentifierTreeImpl) && ((IdentifierTreeImpl) identifierTree).binding.toString().matches(\"<[A-Z]>\");\n+    return JUtils.isTypeVar(identifierTree.symbolType());\n   }\n   \n   private static boolean isSingleParamCast(ExpressionTree expression, Symbol symbol) {\n"}}, {"oid": "7cd57dfb2a1e470b8472cb66ac6dbea253e4ffa8", "url": "https://github.com/SonarSource/sonar-java/commit/7cd57dfb2a1e470b8472cb66ac6dbea253e4ffa8", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "1fa7d2560ca23d1f7116491f6450f78a27768796", "url": "https://github.com/SonarSource/sonar-java/commit/1fa7d2560ca23d1f7116491f6450f78a27768796", "message": "Update java-checks-test-sources/src/main/java/checks/ReplaceLambdaByMethodRefCheck.java", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "cf226f67435570105b7822221e8dab329f98426e", "url": "https://github.com/SonarSource/sonar-java/commit/cf226f67435570105b7822221e8dab329f98426e", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "commit"}, {"oid": "cf226f67435570105b7822221e8dab329f98426e", "url": "https://github.com/SonarSource/sonar-java/commit/cf226f67435570105b7822221e8dab329f98426e", "message": "SONARJAVA-3547 Fix cast recommendation with !Unknown! type", "committedDate": "2020-11-20T15:19:11Z", "type": "forcePushed"}]}