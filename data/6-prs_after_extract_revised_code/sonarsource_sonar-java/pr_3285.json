{"pr_number": 3285, "pr_title": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified", "pr_createdAt": "2020-11-18T13:27:40Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3285", "timeline": [{"oid": "8aafe591a8e7e62e93f209d5524afe5ba4951c84", "url": "https://github.com/SonarSource/sonar-java/commit/8aafe591a8e7e62e93f209d5524afe5ba4951c84", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified", "committedDate": "2020-11-18T14:50:41Z", "type": "forcePushed"}, {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736", "url": "https://github.com/SonarSource/sonar-java/commit/03b133de1408817cf7e7c759546ee7440fbe3736", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified", "committedDate": "2020-11-19T16:18:59Z", "type": "commit"}, {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736", "url": "https://github.com/SonarSource/sonar-java/commit/03b133de1408817cf7e7c759546ee7440fbe3736", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified", "committedDate": "2020-11-19T16:18:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjY4Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527562682", "bodyText": "remove secondary= here", "author": "m-g-sonar", "createdAt": "2020-11-20T09:31:02Z", "path": "java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package checks.tests;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.endsWith;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class MockitoEqSimplificationCheck {\n+\n+  @Captor\n+  ArgumentCaptor<Object> captor;\n+\n+  @Test\n+  public void myTest() {\n+    Foo foo = mock(Foo.class);\n+    Object v1 = new Object();\n+    Object v2 = new Object();\n+    Object v3 = new Object();\n+    Object v4 = new Object();\n+    Object v5 = new Object();\n+\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\nindex a8aac4e07..5b8636257 100644\n--- a/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -31,9 +31,9 @@ public class MockitoEqSimplificationCheck {\n     Object v4 = new Object();\n     Object v5 = new Object();\n \n-    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n-    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n-    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove this and every subsequent useless \"eq(...)\" invocation; pass the values directly.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove this and every subsequent useless \"eq(...)\" invocation; pass the values directly.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54]] {{Remove this useless \"eq(...)\" invocation; pass the values directly.}}\n     doCallRealMethod().when(foo).baz(eq(v4), eq(v5)); // Noncompliant\n     verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n     verify(foo, never()).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTA4Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565087", "bodyText": "METHODS_USING_EQ_IN_ARGUMENTS", "author": "m-g-sonar", "createdAt": "2020-11-20T09:35:11Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTMzOQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565339", "bodyText": "METHODS_USING_EQ_IN_CONSECUTIVE_CALL", "author": "m-g-sonar", "createdAt": "2020-11-20T09:35:37Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTYwOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565608", "bodyText": "MOCKITO_EQ", "author": "m-g-sonar", "createdAt": "2020-11-20T09:36:06Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NjU3OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527566579", "bodyText": "be careful with nested parenthesis here", "author": "m-g-sonar", "createdAt": "2020-11-20T09:37:46Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NjkwNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527566905", "bodyText": "skip parenthesis", "author": "m-g-sonar", "createdAt": "2020-11-20T09:38:16Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzM3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527567370", "bodyText": "worth a comment", "author": "m-g-sonar", "createdAt": "2020-11-20T09:39:08Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2Nzk3Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527567977", "bodyText": "I realize I forgot to add them in the rule description, but I tend to prefer adding parenthesis when discussing methods, to make it clear \"eq(...)\"", "author": "m-g-sonar", "createdAt": "2020-11-20T09:40:11Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;\n+      }\n+    }\n+\n+    if (!eqs.isEmpty()) {\n+      reportIssue(ExpressionUtils.methodName(eqs.get(0)), String.format(\n+        \"Remove %s useless \\\"eq\\\" invocation and directly use the value.\", eqs.size() == 1 ? \"this\" : \"these\"),", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyMTQwMw==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527621403", "bodyText": "Secondary locations are not highlighted for now in SonarLint for VSCode. Only a message is visible in the \"Problems\" bar. Thus I would change the primary message just a bit to replace \"these\". What do you think of:\n\"Remove this and every subsequent useless \"eq(...)\" invocation; pass the values directly.\"\nThat way we make more explicit what other \"eq()\" calls we refer to.", "author": "nicolas-harraudeau-sonarsource", "createdAt": "2020-11-20T11:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2Nzk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyNjcyMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527626720", "bodyText": "Sounds good.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-11-20T11:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2Nzk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODgwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527568800", "bodyText": "I feel this will violate @nicolas-harraudeau-sonarsource 's rule about never having text in secondaries. Can you check?", "author": "m-g-sonar", "createdAt": "2020-11-20T09:41:36Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;\n+      }\n+    }\n+\n+    if (!eqs.isEmpty()) {\n+      reportIssue(ExpressionUtils.methodName(eqs.get(0)), String.format(\n+        \"Remove %s useless \\\"eq\\\" invocation and directly use the value.\", eqs.size() == 1 ? \"this\" : \"these\"),\n+        eqs.stream()\n+          .skip(1)\n+          .map(eq -> new JavaFileScannerContext.Location(\"\", ExpressionUtils.methodName(eq)))", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxMjI2NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527612265", "bodyText": "@m-g-sonar thanks for pinging me.\nIf I understand correctly we want to have secondary locations on every subsequent call to eq(). It seems to me that the calls to given, when and verify will rarely be split on many lines. If it is the case developers won't expect to navigate to eq() calls. They will all be visible right away.\nAs there is no need for navigation to these secondary locations, nor to to explain them (the primary message is clear enough), I would say that we don't need a secondary location message. Secondary locations are only there to improve issues' readability.\nDoes it make sense?", "author": "nicolas-harraudeau-sonarsource", "createdAt": "2020-11-20T10:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyODExMg==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527628112", "bodyText": "Make sense. And to be clear:\nnew JavaFileScannerContext.Location(\"\", ExpressionUtils.methodName(eq))\n\nis already a message-less secondary, as methodName() returns a tree and is used for the location.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-11-20T11:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODgwMA=="}], "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\nindex 5ae21a355..f3461b1d9 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -38,20 +38,20 @@ import org.sonar.plugins.java.api.tree.Tree;\n public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n   private static final String MOCKITO = \"org.mockito.Mockito\";\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_ARGUMENTS = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n       .addParametersMatcher(MethodMatchers.ANY).build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n       .addParametersMatcher(MethodMatchers.ANY).build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+  private static final MethodMatchers METHODS_USING_EQ_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n     MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n     MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n   );\n \n-  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+  private static final MethodMatchers MOCKITO_EQ = MethodMatchers.create()\n     .ofTypes(\"org.mockito.Matchers\")\n     .names(\"eq\").withAnyParameters().build();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2OTA1Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527569053", "bodyText": "\ud83d\udc4d\ud83c\udffb", "author": "m-g-sonar", "createdAt": "2020-11-20T09:42:03Z", "path": "java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package checks.tests;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.endsWith;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class MockitoEqSimplificationCheck {\n+\n+  @Captor\n+  ArgumentCaptor<Object> captor;\n+\n+  @Test\n+  public void myTest() {\n+    Foo foo = mock(Foo.class);\n+    Object v1 = new Object();\n+    Object v2 = new Object();\n+    Object v3 = new Object();\n+    Object v4 = new Object();\n+    Object v5 = new Object();\n+\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}\n+    doCallRealMethod().when(foo).baz(eq(v4), eq(v5)); // Noncompliant\n+    verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n+    verify(foo, never()).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n+\n+    InOrder inOrder = Mockito.inOrder(foo);\n+    inOrder.verify(foo).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n+    inOrder.verify(foo).baz(eq(v1), eq(v2)); // Noncompliant\n+\n+    given(foo.bar(v1, v2, v3)).willReturn(null);\n+    when(foo.baz(v4, v5)).thenReturn(\"foo\");\n+    doThrow(new RuntimeException()).when(foo).quux(42);\n+    doCallRealMethod().when(foo).baz(v4, v5);\n+    verify(foo).bar(v1, v2, v3);\n+    verify(foo, never()).bar(v1, v2, v3);\n+\n+    given(foo.noArg()).willReturn(null);\n+    verify(foo).noArg();\n+\n+    InOrder inOrder2 = Mockito.inOrder(foo);\n+    inOrder2.verify(foo).bar(v1, v2, v3);\n+    inOrder2.verify(foo).baz(v1, v2);\n+\n+    // No issue when mixed:\n+\n+    given(foo.bar(eq(v1), endsWith(\"\"), v3)).willReturn(null);\n+    given(foo.bar(eq(v1), any(), eq(v3))).willReturn(null);\n+    given(foo.baz(eq(v1), captor.capture())).willReturn(null);\n+\n+    // When raw values are mixed with matchers, Mockito will throw InvalidUseOfMatchersException.\n+    // S6073 should cover this case.", "originalCommit": "03b133de1408817cf7e7c759546ee7440fbe3736", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "784ad8132a53548a35ed9b5243de095f13e4d019", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java b/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\nindex a8aac4e07..5b8636257 100644\n--- a/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java\n\n@@ -31,9 +31,9 @@ public class MockitoEqSimplificationCheck {\n     Object v4 = new Object();\n     Object v5 = new Object();\n \n-    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n-    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n-    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove this and every subsequent useless \"eq(...)\" invocation; pass the values directly.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove this and every subsequent useless \"eq(...)\" invocation; pass the values directly.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54]] {{Remove this useless \"eq(...)\" invocation; pass the values directly.}}\n     doCallRealMethod().when(foo).baz(eq(v4), eq(v5)); // Noncompliant\n     verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n     verify(foo, never()).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n"}}, {"oid": "784ad8132a53548a35ed9b5243de095f13e4d019", "url": "https://github.com/SonarSource/sonar-java/commit/784ad8132a53548a35ed9b5243de095f13e4d019", "message": "Fix from review", "committedDate": "2020-11-20T13:00:17Z", "type": "commit"}]}