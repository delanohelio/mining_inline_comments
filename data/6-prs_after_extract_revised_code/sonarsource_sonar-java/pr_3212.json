{"pr_number": 3212, "pr_title": "SONARJAVA-3414 Rule S4790: its content should be replaced by S2070", "pr_createdAt": "2020-09-24T11:19:52Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3212", "timeline": [{"oid": "3ae584d41762c75052f7370f7523b65ee83de31a", "url": "https://github.com/SonarSource/sonar-java/commit/3ae584d41762c75052f7370f7523b65ee83de31a", "message": "SONARJAVA-3414 Rule S4790: its content should be replaced by S2070", "committedDate": "2020-09-24T11:21:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0MzEwMw==", "url": "https://github.com/SonarSource/sonar-java/pull/3212#discussion_r494843103", "bodyText": "As discussed this morning, we can not drop this rule directly, issues currently raised should not disappear, we should go through a deprecation period.\nAt the end:\n\nS4790 implementation will change (and it happens to be matching closely S2070), to report fewer issues. And it's perfectly fine, it's like any improvement of a rule.\nS2070 will be deprecated. The implementation will be closely related to the new S4790, and it's not a problem either.\n\n@m-g-sonar Does this solution looks good to you? You mention the possibility to use @DeprecatedRuleKey, but I'm unsure to see what it can improve.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-25T08:50:08Z", "path": "java-checks/src/main/java/org/sonar/java/checks/CheckList.java", "diffHunk": "@@ -345,7 +344,6 @@ private CheckList() {\n       CustomUnclosedResourcesCheck.class,\n       DanglingElseStatementsCheck.class,\n       DataEncryptionCheck.class,\n-      DataHashingCheck.class,", "originalCommit": "b07b1fe6f8caaa325dcb6cd37c22708c7cccd69c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51eb74cc098815a96a6286b950c6c8ba8289e49f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java\nindex 44a9dedb7..f9155789a 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java\n\n@@ -344,6 +345,7 @@ public final class CheckList {\n       CustomUnclosedResourcesCheck.class,\n       DanglingElseStatementsCheck.class,\n       DataEncryptionCheck.class,\n+      DataHashingCheck.class,\n       DateAndTimesCheck.class,\n       DateFormatWeekYearCheck.class,\n       DateUtilsTruncateCheck.class,\n"}}, {"oid": "51eb74cc098815a96a6286b950c6c8ba8289e49f", "url": "https://github.com/SonarSource/sonar-java/commit/51eb74cc098815a96a6286b950c6c8ba8289e49f", "message": "SONARJAVA-3388 Rule S2070 should support \"org.springframework.util.DigestUtils\"", "committedDate": "2020-09-25T10:35:18Z", "type": "forcePushed"}, {"oid": "99b3107e838ac0621d92520609a00c640447cdb3", "url": "https://github.com/SonarSource/sonar-java/commit/99b3107e838ac0621d92520609a00c640447cdb3", "message": "Refactoring similar rules to avoid code duplication.", "committedDate": "2020-09-25T12:18:01Z", "type": "forcePushed"}, {"oid": "c0692f8fb7fbdca83f60c22eec42718387e87f97", "url": "https://github.com/SonarSource/sonar-java/commit/c0692f8fb7fbdca83f60c22eec42718387e87f97", "message": "Refactoring similar rules to avoid code duplication.", "committedDate": "2020-09-25T12:38:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNzAxNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3212#discussion_r495737015", "bodyText": "Importing statically in one file and using a qualified name in another feels like cheating the duplication. In my opinion, we should either accept it or organize the code to really avoid duplication.\nIn this case, isn't it possible to create an abstract class instead of a helper, and having two rules inheriting from it?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-09-28T07:23:34Z", "path": "java-checks/src/main/java/org/sonar/java/checks/DeprecatedHashAlgorithmCheck.java", "diffHunk": "@@ -39,168 +35,26 @@\n import org.sonar.plugins.java.api.tree.NewClassTree;\n import org.sonar.plugins.java.api.tree.Tree;\n \n-import static org.sonar.java.checks.DeprecatedHashAlgorithmCheck.InsecureAlgorithm.MD2;\n-import static org.sonar.java.checks.DeprecatedHashAlgorithmCheck.InsecureAlgorithm.MD5;\n-import static org.sonar.java.checks.DeprecatedHashAlgorithmCheck.InsecureAlgorithm.SHA1;\n-import static org.sonar.plugins.java.api.semantic.MethodMatchers.ANY;", "originalCommit": "c0692f8fb7fbdca83f60c22eec42718387e87f97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0ODg2OA==", "url": "https://github.com/SonarSource/sonar-java/pull/3212#discussion_r495748868", "bodyText": "I thought about it, but in the future we'll remove one of the rule, so we'll have only one class. Actually I can refactor it, so we won't have duplications without this trick", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-09-28T07:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNzAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a3871968b594994f4a46f1ba378e42e9d39c460", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/DeprecatedHashAlgorithmCheck.java b/java-checks/src/main/java/org/sonar/java/checks/DeprecatedHashAlgorithmCheck.java\nindex 089f024dd..f7ce2dbb8 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/DeprecatedHashAlgorithmCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/DeprecatedHashAlgorithmCheck.java\n\n@@ -19,69 +19,8 @@\n  */\n package org.sonar.java.checks;\n \n-import java.util.Arrays;\n-import java.util.Optional;\n import org.sonar.check.Rule;\n-import org.sonar.java.checks.helpers.JavaPropertiesHelper;\n-import org.sonar.java.checks.helpers.SecurityHelper;\n-import org.sonar.java.checks.methods.AbstractMethodDetection;\n-import org.sonar.java.model.ExpressionUtils;\n-import org.sonar.java.model.LiteralUtils;\n-import org.sonar.plugins.java.api.semantic.MethodMatchers;\n-import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.IdentifierTree;\n-import org.sonar.plugins.java.api.tree.LiteralTree;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-import org.sonar.plugins.java.api.tree.NewClassTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n-\n-import static org.sonar.java.checks.helpers.SecurityHelper.ALGORITHM_BY_METHOD_NAME;\n-import static org.sonar.java.checks.helpers.SecurityHelper.getWeakHashMethodInvocationMatchers;\n \n @Rule(key = \"S2070\")\n-public class DeprecatedHashAlgorithmCheck extends AbstractMethodDetection {\n-\n-  @Override\n-  protected MethodMatchers getMethodInvocationMatchers() {\n-    return getWeakHashMethodInvocationMatchers();\n-  }\n-\n-  @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    IdentifierTree methodName = ExpressionUtils.methodName(mit);\n-    String message = SecurityHelper.MESSAGE_PER_CLASS.get(methodName.symbol().owner().type().fullyQualifiedName());\n-    if (message != null) {\n-      reportIssue(methodName, message);\n-      return;\n-    }\n-    SecurityHelper.InsecureAlgorithm algorithm = ALGORITHM_BY_METHOD_NAME.get(methodName.name());\n-    if (algorithm == null) {\n-      algorithm = algorithm(mit.arguments().get(0)).orElse(null);\n-    }\n-    if (algorithm != null) {\n-      reportIssue(methodName, \"Use a stronger hashing algorithm than \" + algorithm.toString() + \".\");\n-    }\n-  }\n-\n-  @Override\n-  protected void onConstructorFound(NewClassTree newClassTree) {\n-    String message = SecurityHelper.MESSAGE_PER_CLASS.get(newClassTree.identifier().symbolType().fullyQualifiedName());\n-    reportIssue(newClassTree.identifier(), message);\n-  }\n-\n-  private static Optional<SecurityHelper.InsecureAlgorithm> algorithm(ExpressionTree invocationArgument) {\n-    ExpressionTree expectedAlgorithm = invocationArgument;\n-    ExpressionTree defaultPropertyValue = JavaPropertiesHelper.retrievedPropertyDefaultValue(invocationArgument);\n-    if (defaultPropertyValue != null) {\n-      expectedAlgorithm = defaultPropertyValue;\n-    }\n-    if (expectedAlgorithm.is(Tree.Kind.STRING_LITERAL)) {\n-      String algorithmName = LiteralUtils.trimQuotes(((LiteralTree) expectedAlgorithm).value());\n-      return Arrays.stream(SecurityHelper.InsecureAlgorithm.values())\n-        .filter(alg -> alg.match(algorithmName))\n-        .findFirst();\n-    }\n-    return Optional.empty();\n-  }\n-\n+public class DeprecatedHashAlgorithmCheck extends AbstractHashAlgorithmChecker {\n }\n"}}, {"oid": "2a3871968b594994f4a46f1ba378e42e9d39c460", "url": "https://github.com/SonarSource/sonar-java/commit/2a3871968b594994f4a46f1ba378e42e9d39c460", "message": "Refactoring similar rules to avoid code duplication.", "committedDate": "2020-09-28T08:12:14Z", "type": "forcePushed"}, {"oid": "6bda4518992e9c0b742b4eaac4331b93ef924429", "url": "https://github.com/SonarSource/sonar-java/commit/6bda4518992e9c0b742b4eaac4331b93ef924429", "message": "Refactoring similar rules to avoid code duplication.", "committedDate": "2020-09-28T08:35:06Z", "type": "forcePushed"}, {"oid": "dd15ec4cb5b82376facffd47f86e916ac34be47d", "url": "https://github.com/SonarSource/sonar-java/commit/dd15ec4cb5b82376facffd47f86e916ac34be47d", "message": "Move test files to the proper directory.", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "a00dfe5ae410161946b4b8fb5d4d345e4a6680e8", "url": "https://github.com/SonarSource/sonar-java/commit/a00dfe5ae410161946b4b8fb5d4d345e4a6680e8", "message": "Remove unused test file.", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "c99fee84932c8d36c802247e3b59722cc5ff1635", "url": "https://github.com/SonarSource/sonar-java/commit/c99fee84932c8d36c802247e3b59722cc5ff1635", "message": "SONARJAVA-3414 Rule S4790: its content should be replaced by S2070.", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "d71331814ff627939bed1182d33c741f82924fba", "url": "https://github.com/SonarSource/sonar-java/commit/d71331814ff627939bed1182d33c741f82924fba", "message": "Update ruling tests according to the new implementation.", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "25ee7b296a6c425df56eca9e2f8af18a750ce28e", "url": "https://github.com/SonarSource/sonar-java/commit/25ee7b296a6c425df56eca9e2f8af18a750ce28e", "message": "SONARJAVA-3388 Rule S2070 should support \"org.springframework.util.DigestUtils\"", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "79b78f9b3c56380320ff97f50c7be092646ebf2e", "url": "https://github.com/SonarSource/sonar-java/commit/79b78f9b3c56380320ff97f50c7be092646ebf2e", "message": "Refactoring similar rules to avoid code duplication.", "committedDate": "2020-09-28T09:07:59Z", "type": "commit"}, {"oid": "18fe58b3efa3c7c16c05bb1e93a0ccda272a77a1", "url": "https://github.com/SonarSource/sonar-java/commit/18fe58b3efa3c7c16c05bb1e93a0ccda272a77a1", "message": "Update rule metadata.", "committedDate": "2020-09-28T09:36:47Z", "type": "commit"}, {"oid": "18fe58b3efa3c7c16c05bb1e93a0ccda272a77a1", "url": "https://github.com/SonarSource/sonar-java/commit/18fe58b3efa3c7c16c05bb1e93a0ccda272a77a1", "message": "Update rule metadata.", "committedDate": "2020-09-28T09:36:47Z", "type": "forcePushed"}]}