{"pr_number": 3351, "pr_title": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "pr_createdAt": "2020-12-14T15:11:24Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3351", "timeline": [{"oid": "ee42f436b58ce3196bf72f3ae03aadd33b79e716", "url": "https://github.com/SonarSource/sonar-java/commit/ee42f436b58ce3196bf72f3ae03aadd33b79e716", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "committedDate": "2020-12-14T15:31:30Z", "type": "forcePushed"}, {"oid": "8b51cb43804841a7fd32aa713ff69b41926266af", "url": "https://github.com/SonarSource/sonar-java/commit/8b51cb43804841a7fd32aa713ff69b41926266af", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules", "committedDate": "2020-12-14T17:52:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4ODg0Ng==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543188846", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (usages.size() > 1) {\n          \n          \n            \n                  if (!usages.isEmpty()) {", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T09:38:20Z", "path": "java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -110,12 +113,31 @@ public void visitConditionalExpression(ConditionalExpressionTree tree) {\n   private boolean isSafeBooleanExpression(ExpressionTree tree) {\n     ExpressionTree boxedBoolean = findBoxedBoolean(tree);\n     if (boxedBoolean != null) {\n+      // The rule is relaxed if the first usage of the variable is a test against nullness.\n+      // A more thorough approach would require tracing all possible paths to lookup the test using symbolic execution.\n+      if (isFirstUsageANullCheck(boxedBoolean)) {\n+        return true;\n+      }\n       context.reportIssue(this, boxedBoolean, \"Use the primitive boolean expression here.\");\n       return false;\n     }\n     return true;\n   }\n \n+  private static boolean isFirstUsageANullCheck(ExpressionTree boxedBoolean) {\n+    if (boxedBoolean.is(Kind.IDENTIFIER)) {\n+      IdentifierTree identifier = (IdentifierTree) boxedBoolean;\n+      List<IdentifierTree> usages = identifier.symbol().usages();\n+      if (usages.size() > 1) {", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java b/java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java\nindex 9b1d2bcdd..838fca8ee 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/BoxedBooleanExpressionsCheck.java\n\n@@ -128,7 +128,7 @@ public class BoxedBooleanExpressionsCheck extends BaseTreeVisitor implements Jav\n     if (boxedBoolean.is(Kind.IDENTIFIER)) {\n       IdentifierTree identifier = (IdentifierTree) boxedBoolean;\n       List<IdentifierTree> usages = identifier.symbol().usages();\n-      if (usages.size() > 1) {\n+      if (!usages.isEmpty()) {\n         Tree parent = usages.get(0).parent();\n         if (parent.is(Kind.NOT_EQUAL_TO, Kind.EQUAL_TO) && isNullCheck((ExpressionTree) parent)) {\n           return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218165", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:18:59Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NTkwMA==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543245900", "bodyText": "The problem with this specific case and the one that follows, at lines 363-364, stems from the fact that the example is not very realistic:  this code is written to crash.\nHowever, if the test against null was followed by an early return, the code would be valid.\nWithout changing the logic of the check, I can rewrite the example to be more realistic.\nOtherwise, we would have to change the logic of the check and look into symbolic execution to distinguish a good test from a bad one.\nWDYT?", "author": "dorian-burihabwa-sonarsource", "createdAt": "2020-12-15T10:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3OTM4OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543279389", "bodyText": "Yep, I see you wanted to cover early returns, but this is actually a SE job, and as we discussed we can return to it later. The thing I'm afraid of is when we're relaxing check for early returns we might introduce some FNs, which is tricky.\nSo, the simple solution could be:\njust add additional test cases with TP, and these ones mark as known FN, which we're going to remove in the future.\nOr:\nOne more possible solution is to check early returns, that the last statement inside null check is actually return. So we will cover early returns and won't introduce these new FN", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T11:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5MzExMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543393111", "bodyText": "I will go with you first suggestion then and add tests with TP and mark those with FN.", "author": "dorian-burihabwa-sonarsource", "createdAt": "2020-12-15T14:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\nindex 7625700b4..0eb83a1b5 100644\n--- a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n\n@@ -342,71 +342,95 @@ class BoxedBooleanExpressionsCheck {\n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n \n+  Boolean getSurprizeBoxedBoolean() {\n+    double random = Math.random();\n+    if (random < 0.34) {\n+      return Boolean.FALSE;\n+    }\n+    if (random < 0.67) {\n+      return Boolean.TRUE;\n+    }\n+    return null;\n+  }\n+\n   void forStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n     }\n \n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+      return;\n     }\n-  }\n+    for (; checkedBeforeUse2; ) {} // Compliant because the variable is checked before use\n+}\n \n   void whileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n+      return;\n     }\n+    while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n   }\n \n   void doWhileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       do {}\n       while (checkedBeforeUse); // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      do {}\n-      while (checkedBeforeUse2); // Compliant because the variable is checked before use\n+      return;\n     }\n+    do {} while (checkedBeforeUse2); // Compliant because the variable is checked before use\n   }\n \n   void ifStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       if (checkedBeforeUse) { // Compliant because the variable is checked before use\n       } else {}\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n-      } else {}\n+      return;\n     }\n-  }\n+    if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n+    } else {}\n \n-  void conditionalCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n-    if (checkedBeforeUse != null) {\n-      String ignored = (checkedBeforeUse ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n-    }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n-    if (checkedBeforeUse2 == null) {\n-      String ignored = (checkedBeforeUse2 ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n+    Boolean checkedBeforeUse3 = getSurprizeBoxedBoolean();\n+    if (checkedBeforeUse3 == null) {\n+      return;\n     }\n+    if (false) {\n+    } else if (checkedBeforeUse3) {} // Compliant because the variable is checked before use\n   }\n \n-  void conditionalCheckAgainstSelf() {\n-    Boolean checkedAgainstSelf = getCustomNonNull();\n+  void conditionalCheckedBeforeUse() {\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n+    Boolean checkedAgainstOther = getSurprizeBoxedBoolean();\n     Boolean alwaysTrue = true;\n-    if (checkedAgainstSelf == alwaysTrue) {\n-      String ignored = (checkedAgainstSelf ? \"a\" : \"b\" ); // Noncompliant because comparing to something else than null\n+\n+    if (checkedBeforeUse != null) {\n+      String ignored = (checkedBeforeUse ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+    } else if (checkedBeforeUse2 == null) {\n+      return;\n+    } else {\n+      if (checkedAgainstOther == alwaysTrue) {\n+        String ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n+      }\n+    }\n+    String ignored = (checkedBeforeUse2 ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+\n+    if (checkedAgainstOther == alwaysTrue) {\n+      ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxODQzNw==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543218437", "bodyText": "I think this code should not be compliant, cause it's producing NPE", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:19:20Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n+    }\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\nindex 7625700b4..0eb83a1b5 100644\n--- a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n\n@@ -342,71 +342,95 @@ class BoxedBooleanExpressionsCheck {\n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n \n+  Boolean getSurprizeBoxedBoolean() {\n+    double random = Math.random();\n+    if (random < 0.34) {\n+      return Boolean.FALSE;\n+    }\n+    if (random < 0.67) {\n+      return Boolean.TRUE;\n+    }\n+    return null;\n+  }\n+\n   void forStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n     }\n \n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+      return;\n     }\n-  }\n+    for (; checkedBeforeUse2; ) {} // Compliant because the variable is checked before use\n+}\n \n   void whileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n+      return;\n     }\n+    while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n   }\n \n   void doWhileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       do {}\n       while (checkedBeforeUse); // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      do {}\n-      while (checkedBeforeUse2); // Compliant because the variable is checked before use\n+      return;\n     }\n+    do {} while (checkedBeforeUse2); // Compliant because the variable is checked before use\n   }\n \n   void ifStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       if (checkedBeforeUse) { // Compliant because the variable is checked before use\n       } else {}\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n-      } else {}\n+      return;\n     }\n-  }\n+    if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n+    } else {}\n \n-  void conditionalCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n-    if (checkedBeforeUse != null) {\n-      String ignored = (checkedBeforeUse ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n-    }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n-    if (checkedBeforeUse2 == null) {\n-      String ignored = (checkedBeforeUse2 ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n+    Boolean checkedBeforeUse3 = getSurprizeBoxedBoolean();\n+    if (checkedBeforeUse3 == null) {\n+      return;\n     }\n+    if (false) {\n+    } else if (checkedBeforeUse3) {} // Compliant because the variable is checked before use\n   }\n \n-  void conditionalCheckAgainstSelf() {\n-    Boolean checkedAgainstSelf = getCustomNonNull();\n+  void conditionalCheckedBeforeUse() {\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n+    Boolean checkedAgainstOther = getSurprizeBoxedBoolean();\n     Boolean alwaysTrue = true;\n-    if (checkedAgainstSelf == alwaysTrue) {\n-      String ignored = (checkedAgainstSelf ? \"a\" : \"b\" ); // Noncompliant because comparing to something else than null\n+\n+    if (checkedBeforeUse != null) {\n+      String ignored = (checkedBeforeUse ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+    } else if (checkedBeforeUse2 == null) {\n+      return;\n+    } else {\n+      if (checkedAgainstOther == alwaysTrue) {\n+        String ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n+      }\n+    }\n+    String ignored = (checkedBeforeUse2 ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+\n+    if (checkedAgainstOther == alwaysTrue) {\n+      ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMDkxMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543220911", "bodyText": "I think you don't need to use getCustomNonNull(), but sth like customNullable because the main reason to use @nonnull annotations is to get rid of null checks. And I think the cases with annotation are already covered.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:22:45Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+\n+  void forStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();\n+    if (checkedBeforeUse != null) {\n+      for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n+    }\n+\n+    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    if (checkedBeforeUse2 == null) {\n+      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+    }\n+  }\n+\n+  void whileStatementCheckedBeforeUseIsCompliant() {\n+    Boolean checkedBeforeUse = getCustomNonNull();", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\nindex 7625700b4..0eb83a1b5 100644\n--- a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n\n@@ -342,71 +342,95 @@ class BoxedBooleanExpressionsCheck {\n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n \n+  Boolean getSurprizeBoxedBoolean() {\n+    double random = Math.random();\n+    if (random < 0.34) {\n+      return Boolean.FALSE;\n+    }\n+    if (random < 0.67) {\n+      return Boolean.TRUE;\n+    }\n+    return null;\n+  }\n+\n   void forStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n     }\n \n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+      return;\n     }\n-  }\n+    for (; checkedBeforeUse2; ) {} // Compliant because the variable is checked before use\n+}\n \n   void whileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n+      return;\n     }\n+    while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n   }\n \n   void doWhileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       do {}\n       while (checkedBeforeUse); // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      do {}\n-      while (checkedBeforeUse2); // Compliant because the variable is checked before use\n+      return;\n     }\n+    do {} while (checkedBeforeUse2); // Compliant because the variable is checked before use\n   }\n \n   void ifStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       if (checkedBeforeUse) { // Compliant because the variable is checked before use\n       } else {}\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n-      } else {}\n+      return;\n     }\n-  }\n+    if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n+    } else {}\n \n-  void conditionalCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n-    if (checkedBeforeUse != null) {\n-      String ignored = (checkedBeforeUse ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n-    }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n-    if (checkedBeforeUse2 == null) {\n-      String ignored = (checkedBeforeUse2 ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n+    Boolean checkedBeforeUse3 = getSurprizeBoxedBoolean();\n+    if (checkedBeforeUse3 == null) {\n+      return;\n     }\n+    if (false) {\n+    } else if (checkedBeforeUse3) {} // Compliant because the variable is checked before use\n   }\n \n-  void conditionalCheckAgainstSelf() {\n-    Boolean checkedAgainstSelf = getCustomNonNull();\n+  void conditionalCheckedBeforeUse() {\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n+    Boolean checkedAgainstOther = getSurprizeBoxedBoolean();\n     Boolean alwaysTrue = true;\n-    if (checkedAgainstSelf == alwaysTrue) {\n-      String ignored = (checkedAgainstSelf ? \"a\" : \"b\" ); // Noncompliant because comparing to something else than null\n+\n+    if (checkedBeforeUse != null) {\n+      String ignored = (checkedBeforeUse ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+    } else if (checkedBeforeUse2 == null) {\n+      return;\n+    } else {\n+      if (checkedAgainstOther == alwaysTrue) {\n+        String ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n+      }\n+    }\n+    String ignored = (checkedBeforeUse2 ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+\n+    if (checkedAgainstOther == alwaysTrue) {\n+      ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyMzAyNA==", "url": "https://github.com/SonarSource/sonar-java/pull/3351#discussion_r543223024", "bodyText": "I will also suggest adding more test cases:\n\n\nwhere condition is in else branch\n\n\nwhere there are other usages of checked variable\n\n\nwhen the tested variable is actually null\n\n\netc.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-15T10:25:36Z", "path": "java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java", "diffHunk": "@@ -341,4 +341,72 @@ Boolean False() {\n \n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n+", "originalCommit": "8b51cb43804841a7fd32aa713ff69b41926266af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\nindex 7625700b4..0eb83a1b5 100644\n--- a/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n+++ b/java-checks-test-sources/src/main/java/checks/BoxedBooleanExpressionsCheck.java\n\n@@ -342,71 +342,95 @@ class BoxedBooleanExpressionsCheck {\n   Object foo() { return new Object(); }\n   Object bar() { return new Object(); }\n \n+  Boolean getSurprizeBoxedBoolean() {\n+    double random = Math.random();\n+    if (random < 0.34) {\n+      return Boolean.FALSE;\n+    }\n+    if (random < 0.67) {\n+      return Boolean.TRUE;\n+    }\n+    return null;\n+  }\n+\n   void forStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       for (; checkedBeforeUse; )  {} // Compliant because the variable is checked before use\n     }\n \n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      for (; checkedBeforeUse2; )  {} // Compliant because the variable is checked before use\n+      return;\n     }\n-  }\n+    for (; checkedBeforeUse2; ) {} // Compliant because the variable is checked before use\n+}\n \n   void whileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       while (checkedBeforeUse)  {} // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n+      return;\n     }\n+    while (checkedBeforeUse2)  {} // Compliant because the variable is checked before use\n   }\n \n   void doWhileStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       do {}\n       while (checkedBeforeUse); // Compliant because the variable is checked before use\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      do {}\n-      while (checkedBeforeUse2); // Compliant because the variable is checked before use\n+      return;\n     }\n+    do {} while (checkedBeforeUse2); // Compliant because the variable is checked before use\n   }\n \n   void ifStatementCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse != null) {\n       if (checkedBeforeUse) { // Compliant because the variable is checked before use\n       } else {}\n     }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n     if (checkedBeforeUse2 == null) {\n-      if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n-      } else {}\n+      return;\n     }\n-  }\n+    if (checkedBeforeUse2) { // Compliant because the variable is checked before use\n+    } else {}\n \n-  void conditionalCheckedBeforeUseIsCompliant() {\n-    Boolean checkedBeforeUse = getCustomNonNull();\n-    if (checkedBeforeUse != null) {\n-      String ignored = (checkedBeforeUse ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n-    }\n-    Boolean checkedBeforeUse2 = getCustomNonNull();\n-    if (checkedBeforeUse2 == null) {\n-      String ignored = (checkedBeforeUse2 ? \"a\" : \"b\" ); // Compliant because the variable is checked before use\n+    Boolean checkedBeforeUse3 = getSurprizeBoxedBoolean();\n+    if (checkedBeforeUse3 == null) {\n+      return;\n     }\n+    if (false) {\n+    } else if (checkedBeforeUse3) {} // Compliant because the variable is checked before use\n   }\n \n-  void conditionalCheckAgainstSelf() {\n-    Boolean checkedAgainstSelf = getCustomNonNull();\n+  void conditionalCheckedBeforeUse() {\n+    Boolean checkedBeforeUse = getSurprizeBoxedBoolean();\n+    Boolean checkedBeforeUse2 = getSurprizeBoxedBoolean();\n+    Boolean checkedAgainstOther = getSurprizeBoxedBoolean();\n     Boolean alwaysTrue = true;\n-    if (checkedAgainstSelf == alwaysTrue) {\n-      String ignored = (checkedAgainstSelf ? \"a\" : \"b\" ); // Noncompliant because comparing to something else than null\n+\n+    if (checkedBeforeUse != null) {\n+      String ignored = (checkedBeforeUse ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+    } else if (checkedBeforeUse2 == null) {\n+      return;\n+    } else {\n+      if (checkedAgainstOther == alwaysTrue) {\n+        String ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n+      }\n+    }\n+    String ignored = (checkedBeforeUse2 ? \"a\" : \"b\"); // Compliant because the variable is checked before use\n+\n+    if (checkedAgainstOther == alwaysTrue) {\n+      ignored = (checkedAgainstOther ? \"a\" : \"b\"); // Noncompliant because comparing to something else than null\n     }\n   }\n }\n"}}, {"oid": "d31efc3f5be969324c242d81d54685448efa2d89", "url": "https://github.com/SonarSource/sonar-java/commit/d31efc3f5be969324c242d81d54685448efa2d89", "message": "SONARJAVA-3570 S5411: Relax rule against boxed booleans whose first usage is a null check", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "08e140bca87ada7a105c43b2c8d1901310ad18bc", "url": "https://github.com/SonarSource/sonar-java/commit/08e140bca87ada7a105c43b2c8d1901310ad18bc", "message": "SONARJAVA-3570 S5411: Update ruling tests with relaxed rules", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "url": "https://github.com/SonarSource/sonar-java/commit/a5a629cd482bfbd5fd45f2a45ff5b2313c5e538a", "message": "SONARJAVA-3570 Pull request fixes", "committedDate": "2020-12-15T14:53:05Z", "type": "commit"}, {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives", "committedDate": "2020-12-16T11:46:34Z", "type": "commit"}, {"oid": "a9d2cec921c83adc07fde576da70036cf3d611f8", "url": "https://github.com/SonarSource/sonar-java/commit/a9d2cec921c83adc07fde576da70036cf3d611f8", "message": "SONARJAVA-3570 S5411: Add more test cases and document false negatives", "committedDate": "2020-12-16T11:46:34Z", "type": "forcePushed"}]}