{"pr_number": 2794, "pr_title": "SONARJAVA-3249 S2140 should consider methods from ThreadLocalRandom, JVMRandom, RandomUtils", "pr_createdAt": "2020-02-05T16:12:02Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2794", "timeline": [{"oid": "2ed4c9189815c68dce3725c2cbee5ad69ccb0f7c", "url": "https://github.com/SonarSource/sonar-java/commit/2ed4c9189815c68dce3725c2cbee5ad69ccb0f7c", "message": "SONARJAVA-3249 S2140 should consider methods from ThreadLocalRandom, JVMRandom, RandomUtils", "committedDate": "2020-02-05T15:54:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgzMzkzNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2794#discussion_r375833935", "bodyText": "RandomUtils has only static methods, the rule should test RandomUtils.nextDouble() (same problem from line 42 to 46)", "author": "alban-auzeill", "createdAt": "2020-02-06T13:32:21Z", "path": "java-checks/src/test/files/checks/RandomFloatToIntCheck.java", "diffHunk": "@@ -1,17 +1,58 @@\n import java.util.Random;\n import java.lang.Math;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.commons.lang.math.JVMRandom;\n+import org.apache.commons.lang.math.RandomUtils;\n \n class A {\n-\n+  //java.util.Random\n   Random r = new Random();\n-  int rand = (int) r.nextDouble() * 50;  // Noncompliant {{Use \"java.util.Random.nextInt()\" instead.}}\n-  int rand2 = (int) r.nextDouble() * 50;  // Noncompliant\n-  int rand3 = (int) Math.random() * 50;  // Noncompliant\n-  float rand4 = (float)r.nextFloat();\n-  int rand5 = (int) new Foo() {\n-    void foo() {\n+  int rand = (int) r.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand2 = (int) r.nextFloat() * 50;  // Noncompliant\n+  float rand3 = (float)r.nextFloat();\n+  int rand4 = (int) r.nextInt() * 50;\n+  int rand5 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n+\n+  // java.lang.Math\n+  int rand6 = (int) Math.random() * 50;  // Noncompliant {{Use \"java.util.Random.nextInt()\" instead.}}\n+  int rand7 = (int) new Foo() {\n+    int foo() {\n       int a = (int) Math.random() * 50;   // Noncompliant\n+      return a;\n     }\n-  };\n-  int rand6 = (int) r.nextInt() * 50;\n-}\n\\ No newline at end of file\n+  }.foo();\n+\n+  // java.util.concurrent.ThreadLocalRandom\n+  int rand8 = (int) ThreadLocalRandom.current().nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand9 = (int) ThreadLocalRandom.current().nextDouble(1.0) * 50;  // Noncompliant\n+  int rand10 = (int) ThreadLocalRandom.current().nextDouble(1.0, 2.0) * 50;  // Noncompliant\n+\n+  // org.apache.commons.lang.math.JVMRandom\n+\n+  JVMRandom jvmRandom = new JVMRandom();\n+  int rand11 = (int) jvmRandom.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand12 = (int) jvmRandom.nextFloat() * 50;  // Noncompliant\n+  float rand13 = (float)jvmRandom.nextFloat();\n+  int rand14 = (int) jvmRandom.nextInt() * 50;\n+  int rand15 = (int)jvmRandom.nextFloat(); // Noncompliant; will always be 0;\n+\n+  // org.apache.commons.lang.math.RandomUtils\n+\n+  RandomUtils randomUtils = new RandomUtils();\n+  int rand16 = (int) randomUtils.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}", "originalCommit": "2ed4c9189815c68dce3725c2cbee5ad69ccb0f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7042b151415996e02e676d13d37b0d5faf762085", "chunk": "diff --git a/java-checks/src/test/files/checks/RandomFloatToIntCheck.java b/java-checks/src/test/files/checks/RandomFloatToIntCheck.java\nindex 6ae825452..c4f1648aa 100644\n--- a/java-checks/src/test/files/checks/RandomFloatToIntCheck.java\n+++ b/java-checks/src/test/files/checks/RandomFloatToIntCheck.java\n\n@@ -38,20 +38,18 @@ class A {\n \n   // org.apache.commons.lang.math.RandomUtils\n \n-  RandomUtils randomUtils = new RandomUtils();\n-  int rand16 = (int) randomUtils.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n-  int rand17 = (int) randomUtils.nextFloat() * 50;  // Noncompliant\n-  float rand18 = (float)randomUtils.nextFloat();\n-  int rand19 = (int) randomUtils.nextInt() * 50;\n-  int rand20 = (int)randomUtils.nextFloat(); // Noncompliant; will always be 0;\n+  int rand16 = (int) RandomUtils.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand17 = (int) RandomUtils.nextFloat() * 50;  // Noncompliant\n+  float rand18 = (float) RandomUtils.nextFloat();\n+  int rand19 = (int) RandomUtils.nextInt() * 50;\n+  int rand20 = (int) RandomUtils.nextFloat(); // Noncompliant; will always be 0;\n \n   // org.apache.commons.lang3.RandomUtils\n-  org.apache.commons.lang3.RandomUtils randomUtils2 = new org.apache.commons.lang3.RandomUtils();\n-  int rand21 = (int) randomUtils2.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n-  int rand22 = (int) randomUtils2.nextFloat() * 50;  // Noncompliant\n-  float rand23 = (float)randomUtils2.nextFloat();\n-  int rand24 = (int) randomUtils2.nextInt() * 50;\n-  int rand25 = (int)randomUtils2.nextFloat(); // Noncompliant; will always be 0;\n+  int rand21 = (int) org.apache.commons.lang3.RandomUtils.nextDouble() * 50;  // Noncompliant {{Use \"nextInt()\" instead.}}\n+  int rand22 = (int) org.apache.commons.lang3.RandomUtils.nextFloat() * 50;  // Noncompliant\n+  float rand23 = (float) org.apache.commons.lang3.RandomUtils.nextFloat();\n+  int rand24 = (int) org.apache.commons.lang3.RandomUtils.nextInt() * 50;\n+  int rand25 = (int)org.apache.commons.lang3.RandomUtils.nextFloat(); // Noncompliant; will always be 0;\n }\n \n class Foo {\n"}}, {"oid": "7042b151415996e02e676d13d37b0d5faf762085", "url": "https://github.com/SonarSource/sonar-java/commit/7042b151415996e02e676d13d37b0d5faf762085", "message": "Use static method of RandomUtils", "committedDate": "2020-02-06T14:42:35Z", "type": "commit"}]}