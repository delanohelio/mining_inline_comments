{"pr_number": 2780, "pr_title": "SONARJAVA-3211 Improve rule S4426: Cryptographic keys should be robust", "pr_createdAt": "2020-01-31T16:16:32Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2780", "timeline": [{"oid": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "url": "https://github.com/SonarSource/sonar-java/commit/ebbd80decf372b05cbd6ad9f36c911823e97b226", "message": "SONARJAVA-3211 Rule S4426: Cryptographic keys should be robust", "committedDate": "2020-01-31T15:28:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5MzI3Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r373993277", "bodyText": "Lower case algorithm seems to be valid, the rule should not be sensible to the case.\ne.g.: KeyPairGenerator.getInstance(\"rsa\");\nLet's only have upper case names in algorithmKeySizeMap and look for upper case names.", "author": "alban-auzeill", "createdAt": "2020-02-03T09:22:08Z", "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -0,0 +1,181 @@\n+import java.security.KeyPairGenerator;\n+import javax.crypto.KeyGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.ECGenParameterSpec;\n+import java.security.SecureRandom;\n+\n+class RSA {\n+  public void key_variable() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");", "originalCommit": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "chunk": "diff --git a/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java b/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\nindex bc6513ebd..089e2a4cc 100644\n--- a/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\n+++ b/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\n\n@@ -11,6 +11,11 @@ class RSA {\n     keyGen.initialize(1024); // Noncompliant [[sc=5;ec=28]]  {{Use a key length of at least 2048 bits for RSA cipher algorithm.}}\n   }\n \n+  public void key_variable_lowercase() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"rsa\");\n+    keyGen.initialize(1024); // Noncompliant\n+  }\n+\n   public void key_variable_compliant() throws NoSuchAlgorithmException {\n     KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n     keyGen.initialize(2048); // Compliant\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwMDAwMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374000001", "bodyText": "ERROR CryptographicKeySizeCheck.java:28: Unhandled exception type NoSuchAlgorithmException", "author": "alban-auzeill", "createdAt": "2020-02-03T09:36:38Z", "path": "java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -0,0 +1,181 @@\n+import java.security.KeyPairGenerator;\n+import javax.crypto.KeyGenerator;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.spec.ECGenParameterSpec;\n+import java.security.SecureRandom;\n+\n+class RSA {\n+  public void key_variable() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(1024); // Noncompliant [[sc=5;ec=28]]  {{Use a key length of at least 2048 bits for RSA cipher algorithm.}}\n+  }\n+\n+  public void key_variable_compliant() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(2048); // Compliant\n+  }\n+\n+  public void report_twice() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n+    keyGen.initialize(1024); // Noncompliant\n+    keyGen.initialize(1023); // Noncompliant\n+  }\n+}\n+\n+interface I {\n+  Runnable r = () -> {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");", "originalCommit": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "chunk": "diff --git a/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java b/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\nindex bc6513ebd..089e2a4cc 100644\n--- a/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\n+++ b/java-checks/src/test/files/checks/security/CryptographicKeySizeCheck.java\n\n@@ -11,6 +11,11 @@ class RSA {\n     keyGen.initialize(1024); // Noncompliant [[sc=5;ec=28]]  {{Use a key length of at least 2048 bits for RSA cipher algorithm.}}\n   }\n \n+  public void key_variable_lowercase() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"rsa\");\n+    keyGen.initialize(1024); // Noncompliant\n+  }\n+\n   public void key_variable_compliant() throws NoSuchAlgorithmException {\n     KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n     keyGen.initialize(2048); // Compliant\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwNDY0OA==", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374004648", "bodyText": "I would add ^ at the beginning of the pattern to find something that starts with. (and LiteralUtils.trimQuotes(literalTree.value()) below)", "author": "alban-auzeill", "createdAt": "2020-02-03T09:46:09Z", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -23,29 +23,38 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import org.sonar.check.Rule;\n import org.sonar.java.checks.helpers.ExpressionsHelper;\n import org.sonar.java.checks.methods.AbstractMethodDetection;\n import org.sonar.java.matcher.MethodMatcher;\n import org.sonar.java.model.ExpressionUtils;\n import org.sonar.java.model.LiteralUtils;\n import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n \n @Rule(key = \"S4426\")\n public class CryptographicKeySizeCheck extends AbstractMethodDetection {\n \n   private static final String KEY_PAIR_GENERATOR = \"java.security.KeyPairGenerator\";\n   private static final String KEY_GENERATOR = \"javax.crypto.KeyGenerator\";\n+  private static final String EC_GEN_PARAMETER_SPEC = \"java.security.spec.ECGenParameterSpec\";\n   private static final String GET_INSTANCE_METHOD = \"getInstance\";\n   private static final String STRING = \"java.lang.String\";\n \n+  private static final int EC_MIN_KEY = 224;\n+  private static final Pattern EC_KEY_PATTERN = Pattern.compile(\"(secp|prime|sect|c2tnb)(\\\\d+)\");", "originalCommit": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\nindex 1b0c326be..48e22b8e6 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n\n@@ -22,6 +22,7 @@ package org.sonar.java.checks.security;\n import com.google.common.collect.ImmutableMap;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODAxNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374008014", "bodyText": "The 3 MethodMatchers above should be static", "author": "alban-auzeill", "createdAt": "2020-02-03T09:52:35Z", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -66,19 +83,25 @@ public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\"Blowfish\", 128, \"RSA\", 2048);\n+    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n+      \"RSA\", 2048,\n+      \"DH\", 2048,\n+      \"DiffieHellman\", 2048,\n+      \"DSA\", 2048,\n+      \"AES\", 128);\n \n     private final MethodMatcher keyGenInit = MethodMatcher.create().typeDefinition(KEY_GENERATOR).name(\"init\").addParameter(\"int\");\n     private final MethodMatcher keyPairGenInitialize = MethodMatcher.create().typeDefinition(KEY_PAIR_GENERATOR).name(\"initialize\").addParameter(\"int\");\n+    private final MethodMatcher keyPairGenInitializeWithSource = keyPairGenInitialize.copy().addParameter(\"java.security.SecureRandom\");", "originalCommit": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\nindex 1b0c326be..48e22b8e6 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n\n@@ -69,40 +80,31 @@ public class CryptographicKeySizeCheck extends AbstractMethodDetection {\n \n   @Override\n   protected void onConstructorFound(NewClassTree newClassTree) {\n-    Matcher matcher = EC_KEY_PATTERN.matcher(((LiteralTree) newClassTree.arguments().get(0)).value());\n-    if (matcher.find() && Integer.valueOf(matcher.group(2)) < EC_MIN_KEY) {\n-      reportIssue(newClassTree, \"Use a key length of at least \" + EC_MIN_KEY + \" bits for EC cipher algorithm.\");\n+    String firstArgument = ExpressionsHelper.getConstantValueAsString(newClassTree.arguments().get(0)).value();\n+    if (firstArgument != null) {\n+      Matcher matcher = EC_KEY_PATTERN.matcher(firstArgument);\n+      if (matcher.find() && Integer.valueOf(matcher.group(2)) < EC_MIN_KEY) {\n+        reportIssue(newClassTree, \"Use a key length of at least \" + EC_MIN_KEY + \" bits for EC cipher algorithm.\");\n+      }\n     }\n   }\n \n   private class MethodVisitor extends BaseTreeVisitor {\n \n     private final String algorithm;\n+    private final Integer minKeySize;\n \n     public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n+      this.minKeySize = algorithmKeySizeMap.get(this.algorithm.toUpperCase(Locale.ENGLISH));\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n-      \"RSA\", 2048,\n-      \"DH\", 2048,\n-      \"DiffieHellman\", 2048,\n-      \"DSA\", 2048,\n-      \"AES\", 128);\n-\n-    private final MethodMatcher keyGenInit = MethodMatcher.create().typeDefinition(KEY_GENERATOR).name(\"init\").addParameter(\"int\");\n-    private final MethodMatcher keyPairGenInitialize = MethodMatcher.create().typeDefinition(KEY_PAIR_GENERATOR).name(\"initialize\").addParameter(\"int\");\n-    private final MethodMatcher keyPairGenInitializeWithSource = keyPairGenInitialize.copy().addParameter(\"java.security.SecureRandom\");\n-\n     @Override\n     public void visitMethodInvocation(MethodInvocationTree mit) {\n-      if (keyGenInit.matches(mit) || keyPairGenInitialize.matches(mit) || keyPairGenInitializeWithSource.matches(mit)) {\n-        Integer minKeySize = algorithmKeySizeMap.get(this.algorithm);\n-        if (minKeySize != null) {\n-          Integer keySize = LiteralUtils.intLiteralValue(mit.arguments().get(0));\n-          if (keySize != null && keySize < minKeySize) {\n-            reportIssue(mit, \"Use a key length of at least \" + minKeySize + \" bits for \" + algorithm + \" cipher algorithm.\");\n-          }\n+      if (minKeySize != null && (keyGenInit.matches(mit) || keyPairGenInitialize.matches(mit) || keyPairGenInitializeWithSource.matches(mit))) {\n+        Integer keySize = LiteralUtils.intLiteralValue(mit.arguments().get(0));\n+        if (keySize != null && keySize < minKeySize) {\n+          reportIssue(mit, \"Use a key length of at least \" + minKeySize + \" bits for \" + algorithm + \" cipher algorithm.\");\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODM4Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/2780#discussion_r374008383", "bodyText": "This map should be static and declared above the constructor.", "author": "alban-auzeill", "createdAt": "2020-02-03T09:53:17Z", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -66,19 +83,25 @@ public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\"Blowfish\", 128, \"RSA\", 2048);\n+    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n+      \"RSA\", 2048,\n+      \"DH\", 2048,\n+      \"DiffieHellman\", 2048,\n+      \"DSA\", 2048,\n+      \"AES\", 128);", "originalCommit": "ebbd80decf372b05cbd6ad9f36c911823e97b226", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\nindex 1b0c326be..48e22b8e6 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java\n\n@@ -69,40 +80,31 @@ public class CryptographicKeySizeCheck extends AbstractMethodDetection {\n \n   @Override\n   protected void onConstructorFound(NewClassTree newClassTree) {\n-    Matcher matcher = EC_KEY_PATTERN.matcher(((LiteralTree) newClassTree.arguments().get(0)).value());\n-    if (matcher.find() && Integer.valueOf(matcher.group(2)) < EC_MIN_KEY) {\n-      reportIssue(newClassTree, \"Use a key length of at least \" + EC_MIN_KEY + \" bits for EC cipher algorithm.\");\n+    String firstArgument = ExpressionsHelper.getConstantValueAsString(newClassTree.arguments().get(0)).value();\n+    if (firstArgument != null) {\n+      Matcher matcher = EC_KEY_PATTERN.matcher(firstArgument);\n+      if (matcher.find() && Integer.valueOf(matcher.group(2)) < EC_MIN_KEY) {\n+        reportIssue(newClassTree, \"Use a key length of at least \" + EC_MIN_KEY + \" bits for EC cipher algorithm.\");\n+      }\n     }\n   }\n \n   private class MethodVisitor extends BaseTreeVisitor {\n \n     private final String algorithm;\n+    private final Integer minKeySize;\n \n     public MethodVisitor(String getInstanceArg) {\n       this.algorithm = getInstanceArg;\n+      this.minKeySize = algorithmKeySizeMap.get(this.algorithm.toUpperCase(Locale.ENGLISH));\n     }\n \n-    private final Map<String, Integer> algorithmKeySizeMap = ImmutableMap.of(\n-      \"RSA\", 2048,\n-      \"DH\", 2048,\n-      \"DiffieHellman\", 2048,\n-      \"DSA\", 2048,\n-      \"AES\", 128);\n-\n-    private final MethodMatcher keyGenInit = MethodMatcher.create().typeDefinition(KEY_GENERATOR).name(\"init\").addParameter(\"int\");\n-    private final MethodMatcher keyPairGenInitialize = MethodMatcher.create().typeDefinition(KEY_PAIR_GENERATOR).name(\"initialize\").addParameter(\"int\");\n-    private final MethodMatcher keyPairGenInitializeWithSource = keyPairGenInitialize.copy().addParameter(\"java.security.SecureRandom\");\n-\n     @Override\n     public void visitMethodInvocation(MethodInvocationTree mit) {\n-      if (keyGenInit.matches(mit) || keyPairGenInitialize.matches(mit) || keyPairGenInitializeWithSource.matches(mit)) {\n-        Integer minKeySize = algorithmKeySizeMap.get(this.algorithm);\n-        if (minKeySize != null) {\n-          Integer keySize = LiteralUtils.intLiteralValue(mit.arguments().get(0));\n-          if (keySize != null && keySize < minKeySize) {\n-            reportIssue(mit, \"Use a key length of at least \" + minKeySize + \" bits for \" + algorithm + \" cipher algorithm.\");\n-          }\n+      if (minKeySize != null && (keyGenInit.matches(mit) || keyPairGenInitialize.matches(mit) || keyPairGenInitializeWithSource.matches(mit))) {\n+        Integer keySize = LiteralUtils.intLiteralValue(mit.arguments().get(0));\n+        if (keySize != null && keySize < minKeySize) {\n+          reportIssue(mit, \"Use a key length of at least \" + minKeySize + \" bits for \" + algorithm + \" cipher algorithm.\");\n         }\n       }\n     }\n"}}, {"oid": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "url": "https://github.com/SonarSource/sonar-java/commit/8305a1249ae5b9f90f50313e5b65ed2704971c66", "message": "Fix from review", "committedDate": "2020-02-03T10:44:16Z", "type": "commit"}, {"oid": "8305a1249ae5b9f90f50313e5b65ed2704971c66", "url": "https://github.com/SonarSource/sonar-java/commit/8305a1249ae5b9f90f50313e5b65ed2704971c66", "message": "Fix from review", "committedDate": "2020-02-03T10:44:16Z", "type": "forcePushed"}, {"oid": "a5fe4e4c36e377ec87e714c3f74010839e099c44", "url": "https://github.com/SonarSource/sonar-java/commit/a5fe4e4c36e377ec87e714c3f74010839e099c44", "message": "Fix constant names", "committedDate": "2020-02-03T14:24:35Z", "type": "commit"}]}