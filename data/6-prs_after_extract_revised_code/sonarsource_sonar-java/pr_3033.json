{"pr_number": 3033, "pr_title": "SONARJAVA-3423 Rule S5866: Case insensitive Unicode regular expressions should enable the \u201cUNICODE_CASE\u201d flag", "pr_createdAt": "2020-06-17T14:46:41Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3033", "timeline": [{"oid": "9b8854434a00e333e3551b8319b0fb27b546ea53", "url": "https://github.com/SonarSource/sonar-java/commit/9b8854434a00e333e3551b8319b0fb27b546ea53", "message": "Improve test coverage", "committedDate": "2020-06-17T16:04:54Z", "type": "forcePushed"}, {"oid": "e232b2cdc884c7e1eb4a9976640202520e00525b", "url": "https://github.com/SonarSource/sonar-java/commit/e232b2cdc884c7e1eb4a9976640202520e00525b", "message": "Improve test coverage", "committedDate": "2020-06-17T16:49:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDk1OQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r441724959", "bodyText": "be careful, in order to test the location of the issues, you need 2 opening/closing brackets! For instance:  [[sc=37,ec=61]].\nI didn't check the other rule but I might have missed it, and with this PR, the precise location is not tested because of this error.", "author": "m-g-sonar", "createdAt": "2020-06-17T17:53:51Z", "path": "java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package checks.regex;\n+\n+import java.util.regex.Pattern;\n+\n+public class UnicodeCaseCheck {\n+\n+  void noncompliant(String str) {\n+    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE); // Noncompliant [sc=37;ec=61] {{Also use \"Pattern.UNICODE_CASE\" to correctly handle non-ASCII letters.}}", "originalCommit": "e232b2cdc884c7e1eb4a9976640202520e00525b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODg3NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r442088874", "bodyText": "I fixed this and also grepped through the other tests to see whether I made the same mistake elsewhere (I didn't).", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-18T09:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7af44ba61dbd842f0e68e9687281f695597a495f", "chunk": "diff --git a/java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java b/java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java\ndeleted file mode 100644\nindex b9eb7de0c..000000000\n--- a/java-checks-test-sources/src/main/java/checks/regex/UnicodeCaseCheck.java\n+++ /dev/null\n\n@@ -1,28 +0,0 @@\n-package checks.regex;\n-\n-import java.util.regex.Pattern;\n-\n-public class UnicodeCaseCheck {\n-\n-  void noncompliant(String str) {\n-    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE); // Noncompliant [sc=37;ec=61] {{Also use \"Pattern.UNICODE_CASE\" to correctly handle non-ASCII letters.}}\n-    str.matches(\"(?i)s\u00f6me p\u00e4ttern\"); // Noncompliant [sc=20;ec=21] {{Also use the \"u\" flag to correctly handle non-ASCII letters.}}\n-    str.matches(\"(?i:s\u00f6me) p\u00e4ttern\"); // Noncompliant [sc=20;ec=21] {{Also use the \"u\" flag to correctly handle non-ASCII letters.}}\n-    // In these cases the location of the issue is a bit confusing, but code like this will probably not occur in the wild\n-    str.matches(\"(?iu)s\u00f6me (?-u)p\u00e4ttern\"); // Noncompliant [sc=20;ec=21] {{Also use the \"u\" flag to correctly handle non-ASCII letters.}}\n-    str.matches(\"(?iu)s\u00f6me (?-U)p\u00e4ttern\"); // Noncompliant [sc=20;ec=21] {{Also use the \"u\" flag to correctly handle non-ASCII letters.}}\n-  }\n-\n-  void complaint(String str) {\n-    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n-    str.matches(\"(?iu)s\u00f6me p\u00e4ttern\");\n-    str.matches(\"(?iu:s\u00f6me) p\u00e4ttern\");\n-    str.matches(\"(?i)\\uD83D\\uDCA9\"); // compliant because the string doesn't contain any letters\n-    str.matches(\"(?i:\u00f6\u00e4\u00fc\"); // rule is not applied to syntactically invalid regexen\n-\n-    // UNICODE_CHARACTER_CLASS implies UNICODE_CASE\n-    Pattern.compile(\"s\u00f6me p\u00e4ttern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);\n-    str.matches(\"(?iU)s\u00f6me p\u00e4ttern\");\n-    str.matches(\"(?iU:s\u00f6me) p\u00e4ttern\");\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjA0Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r441726047", "bodyText": "I'm not sure that I saw any test case which would benefit from having a loop here and report multiple issues for a given regex. would it be possible to add a test for it?", "author": "m-g-sonar", "createdAt": "2020-06-17T17:55:38Z", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5866\")\n+public class UnicodeCaseCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Also use %s to correctly handle non-ASCII letters.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      Visitor visitor = new Visitor();\n+      visitor.setActiveFlags(getFlags(mit));\n+      visitor.visit(regexForLiterals.getResult());\n+      if (visitor.problematicFlagSetOutsideOfRegex) {\n+        getFlagsTree(mit).ifPresent( flagsTree ->\n+          reportIssue(flagsTree, String.format(MESSAGE, \"\\\"Pattern.UNICODE_CASE\\\"\"))\n+        );\n+      }\n+      for (JavaCharacter flag : visitor.problematicFlags) {\n+        reportIssue(flag, String.format(MESSAGE, \"the \\\"u\\\" flag\"), null, Collections.emptyList());", "originalCommit": "e232b2cdc884c7e1eb4a9976640202520e00525b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4OTU1MQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3033#discussion_r442089551", "bodyText": "Test case added.", "author": "sebastian-hungerecker-sonarsource", "createdAt": "2020-06-18T09:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7af44ba61dbd842f0e68e9687281f695597a495f", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java b/java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java\ndeleted file mode 100644\nindex 21d10c571..000000000\n--- a/java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeCaseCheck.java\n+++ /dev/null\n\n@@ -1,81 +0,0 @@\n-/*\n- * SonarQube Java\n- * Copyright (C) 2012-2020 SonarSource SA\n- * mailto:info AT sonarsource DOT com\n- *\n- * This program is free software; you can redistribute it and/or\n- * modify it under the terms of the GNU Lesser General Public\n- * License as published by the Free Software Foundation; either\n- * version 3 of the License, or (at your option) any later version.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * Lesser General Public License for more details.\n- *\n- * You should have received a copy of the GNU Lesser General Public License\n- * along with this program; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n- */\n-package org.sonar.java.checks.regex;\n-\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n-import org.sonar.check.Rule;\n-import org.sonar.java.regex.RegexParseResult;\n-import org.sonar.java.regex.ast.JavaCharacter;\n-import org.sonar.java.regex.ast.PlainCharacterTree;\n-import org.sonar.java.regex.ast.RegexBaseVisitor;\n-import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n-\n-@Rule(key = \"S5866\")\n-public class UnicodeCaseCheck extends AbstractRegexCheck {\n-\n-  private static final String MESSAGE = \"Also use %s to correctly handle non-ASCII letters.\";\n-\n-  @Override\n-  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n-    if (!regexForLiterals.hasSyntaxErrors()) {\n-      Visitor visitor = new Visitor();\n-      visitor.setActiveFlags(getFlags(mit));\n-      visitor.visit(regexForLiterals.getResult());\n-      if (visitor.problematicFlagSetOutsideOfRegex) {\n-        getFlagsTree(mit).ifPresent( flagsTree ->\n-          reportIssue(flagsTree, String.format(MESSAGE, \"\\\"Pattern.UNICODE_CASE\\\"\"))\n-        );\n-      }\n-      for (JavaCharacter flag : visitor.problematicFlags) {\n-        reportIssue(flag, String.format(MESSAGE, \"the \\\"u\\\" flag\"), null, Collections.emptyList());\n-      }\n-    }\n-  }\n-\n-  private static class Visitor extends RegexBaseVisitor {\n-    final Set<JavaCharacter> problematicFlags = new HashSet<>();\n-\n-    boolean problematicFlagSetOutsideOfRegex = false;\n-\n-    @Override\n-    public void visitPlainCharacter(PlainCharacterTree tree) {\n-      if (isProblematic(tree.getCharacter())) {\n-        JavaCharacter character = getJavaCharacterForFlag(Pattern.CASE_INSENSITIVE);\n-        if (character == null) {\n-          problematicFlagSetOutsideOfRegex = true;\n-        } else {\n-          problematicFlags.add(character);\n-        }\n-      }\n-    }\n-\n-    static boolean isNonAsciiLetter(char ch) {\n-      return ch > 127 && Character.isLetter(ch);\n-    }\n-\n-    boolean isProblematic(char ch) {\n-      return flagActive(Pattern.CASE_INSENSITIVE) && !flagActive(Pattern.UNICODE_CASE) && isNonAsciiLetter(ch);\n-    }\n-  }\n-\n-}\n"}}, {"oid": "7af44ba61dbd842f0e68e9687281f695597a495f", "url": "https://github.com/SonarSource/sonar-java/commit/7af44ba61dbd842f0e68e9687281f695597a495f", "message": "Allow the tracking of locations of flags in regular expressions", "committedDate": "2020-06-18T09:17:43Z", "type": "commit"}, {"oid": "3f94b3cbafb2a191ca00a9865ae1745d061aec90", "url": "https://github.com/SonarSource/sonar-java/commit/3f94b3cbafb2a191ca00a9865ae1745d061aec90", "message": "SONARJAVA-3423 Rule S5866: Case insensitive Unicode regular ...\n\n... expressions should enable the \u201cUNICODE_CASE\u201d flag", "committedDate": "2020-06-18T09:17:43Z", "type": "commit"}, {"oid": "59019ab551176b324f0f40f5e3265dbc28179b2a", "url": "https://github.com/SonarSource/sonar-java/commit/59019ab551176b324f0f40f5e3265dbc28179b2a", "message": "Improve test coverage", "committedDate": "2020-06-18T09:17:43Z", "type": "commit"}, {"oid": "4b3ebf7f670003c3650e1b8cbb947d44477750ac", "url": "https://github.com/SonarSource/sonar-java/commit/4b3ebf7f670003c3650e1b8cbb947d44477750ac", "message": "Fixes from review", "committedDate": "2020-06-18T09:17:43Z", "type": "commit"}, {"oid": "4b3ebf7f670003c3650e1b8cbb947d44477750ac", "url": "https://github.com/SonarSource/sonar-java/commit/4b3ebf7f670003c3650e1b8cbb947d44477750ac", "message": "Fixes from review", "committedDate": "2020-06-18T09:17:43Z", "type": "forcePushed"}]}