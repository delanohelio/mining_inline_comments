{"pr_number": 2979, "pr_title": "SONARJAVA-3402 Rule S5853: Consecutive AssertJ \"assertThat\" statement should be chained", "pr_createdAt": "2020-06-02T12:07:56Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2979", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1Njg0Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/2979#discussion_r435256842", "bodyText": "Checking METHOD_INVOCATION only at the root of an ExpressionTree is not enough, we can still have false-positives like:\n    assertThat(getRandomArray().length).isNotEqualTo(3); // false-positive\n    assertThat(getRandomArray().length).isNotEqualTo(4); \n\nI would start from e1\nfor all MEMBER_SELECT replace by MemberSelectExpressionTree#expression()\nAnd finally, check METHOD_INVOCATION", "author": "alban-auzeill", "createdAt": "2020-06-04T13:34:13Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.hasTestAnnotation;\n+\n+@Rule(key = \"S5853\")\n+public class AssertJConsecutiveAssertionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers ASSERT_THAT_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.Assertions\").names(\"assertThat\").addParametersMatcher(MethodMatchers.ANY).build();\n+\n+  public static final MethodMatchers ASSERTJ_SET_CONTEXT_METHODS = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+    .name(name ->\n+      name.startsWith(\"extracting\") || name.startsWith(\"using\") || name.startsWith(\"filtered\")\n+    ).withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodTree methodTree = (MethodTree) tree;\n+    if (hasTestAnnotation(methodTree)) {\n+      BlockTree block = methodTree.block();\n+      if (block != null) {\n+        reportConsecutiveAssertions(block.body());\n+      }\n+    }\n+  }\n+\n+  private void reportConsecutiveAssertions(List<StatementTree> statements) {\n+    ExpressionTree currentArgument = null;\n+    MethodInvocationTree currentMit = null;\n+    List<MethodInvocationTree> equivalentInvocations = new ArrayList<>();\n+\n+    for (StatementTree statement : statements) {\n+      Optional<MethodInvocationTree> assertThatInvocation = getSimpleAssertSubjectInvocation(statement);\n+\n+      if (assertThatInvocation.isPresent()) {\n+        MethodInvocationTree mit = assertThatInvocation.get();\n+        ExpressionTree arg = mit.arguments().get(0);\n+        if (currentArgument == null) {\n+          currentMit = mit;\n+          currentArgument = arg;\n+        } else if (areEquivalent(currentArgument, arg)) {\n+          equivalentInvocations.add(mit);\n+        }\n+      } else {\n+        // We have something else than an assertion subject between two calls\n+        reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n+\n+        currentArgument = null;\n+        currentMit = null;\n+        equivalentInvocations.clear();\n+      }\n+    }\n+\n+    reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n+  }\n+\n+  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(StatementTree statement) {\n+    if (statement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n+      ExpressionTree expression = ((ExpressionStatementTree) statement).expression();\n+      if (expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        // First method invocation should be an assertion predicate, if not (incomplete assertion), we will not find anything\n+        return getSimpleAssertSubjectInvocation(((MethodInvocationTree) expression).methodSelect());\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(ExpressionTree expressionTree) {\n+    if (expressionTree.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree memberSelectExpression = ((MemberSelectExpressionTree) expressionTree).expression();\n+      if (memberSelectExpression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        MethodInvocationTree mit = (MethodInvocationTree) memberSelectExpression;\n+        if (ASSERT_THAT_MATCHER.matches(mit)) {\n+          return Optional.of(mit);\n+        } else if (ASSERTJ_SET_CONTEXT_METHODS.matches(mit)) {\n+          return Optional.empty();\n+        } else {\n+          return getSimpleAssertSubjectInvocation(mit.methodSelect());\n+        }\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean areEquivalent(ExpressionTree e1, ExpressionTree e2) {\n+    if (e1.is(Tree.Kind.METHOD_INVOCATION)) {\n+      // Two method invocation can return different values.\n+      return false;\n+    }", "originalCommit": "1c0fb58d66cbd150da80c98aece51dbddf805341", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99562f8b885bb18042245c7f54644938d27385e8", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java\nindex 988f99fd9..9940e87ab 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java\n\n@@ -72,79 +72,100 @@ public class AssertJConsecutiveAssertionCheck extends IssuableSubscriptionVisito\n   }\n \n   private void reportConsecutiveAssertions(List<StatementTree> statements) {\n-    ExpressionTree currentArgument = null;\n-    MethodInvocationTree currentMit = null;\n+    AssertSubject currentSubject = null;\n     List<MethodInvocationTree> equivalentInvocations = new ArrayList<>();\n \n     for (StatementTree statement : statements) {\n-      Optional<MethodInvocationTree> assertThatInvocation = getSimpleAssertSubjectInvocation(statement);\n+      Optional<AssertSubject> assertThatInvocation = getSimpleAssertSubject(statement);\n \n       if (assertThatInvocation.isPresent()) {\n-        MethodInvocationTree mit = assertThatInvocation.get();\n-        ExpressionTree arg = mit.arguments().get(0);\n-        if (currentArgument == null) {\n-          currentMit = mit;\n-          currentArgument = arg;\n-        } else if (areEquivalent(currentArgument, arg)) {\n-          equivalentInvocations.add(mit);\n+        AssertSubject assertSubject = assertThatInvocation.get();\n+        if (currentSubject == null) {\n+          currentSubject = assertSubject;\n+        } else if (areEquivalent(currentSubject.arg, assertSubject.arg)) {\n+          equivalentInvocations.add(assertSubject.mit);\n+        } else {\n+          reportIssueIfMultipleCalls(currentSubject, equivalentInvocations);\n+          currentSubject = assertSubject;\n+          equivalentInvocations.clear();\n         }\n       } else {\n-        // We have something else than an assertion subject between two calls\n-        reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n-\n-        currentArgument = null;\n-        currentMit = null;\n+        // We have something else than an assertion subject or a subject returning different values between two calls\n+        reportIssueIfMultipleCalls(currentSubject, equivalentInvocations);\n+        currentSubject = null;\n         equivalentInvocations.clear();\n       }\n     }\n \n-    reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n+    reportIssueIfMultipleCalls(currentSubject, equivalentInvocations);\n+  }\n+\n+  private static boolean alwaysReturnSameValue(ExpressionTree expression) {\n+    if (expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+      // Two method invocation can return different values.\n+      return false;\n+    } else if (expression.is(Tree.Kind.MEMBER_SELECT)) {\n+      return alwaysReturnSameValue(((MemberSelectExpressionTree) expression).expression());\n+    }\n+    return true;\n   }\n \n-  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(StatementTree statement) {\n+  /**\n+   * A \"simple\" assertion subject is coming from an assertion chain containing only one assertion predicate\n+   * and the assertion subject argument always returning the same value when called multiple times.\n+   */\n+  private static Optional<AssertSubject> getSimpleAssertSubject(StatementTree statement) {\n     if (statement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n       ExpressionTree expression = ((ExpressionStatementTree) statement).expression();\n       if (expression.is(Tree.Kind.METHOD_INVOCATION)) {\n         // First method invocation should be an assertion predicate, if not (incomplete assertion), we will not find anything\n-        return getSimpleAssertSubjectInvocation(((MethodInvocationTree) expression).methodSelect());\n+        return getSimpleAssertSubject(((MethodInvocationTree) expression).methodSelect());\n       }\n     }\n     return Optional.empty();\n   }\n \n-  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(ExpressionTree expressionTree) {\n+  private static Optional<AssertSubject> getSimpleAssertSubject(ExpressionTree expressionTree) {\n     if (expressionTree.is(Tree.Kind.MEMBER_SELECT)) {\n       ExpressionTree memberSelectExpression = ((MemberSelectExpressionTree) expressionTree).expression();\n       if (memberSelectExpression.is(Tree.Kind.METHOD_INVOCATION)) {\n         MethodInvocationTree mit = (MethodInvocationTree) memberSelectExpression;\n         if (ASSERT_THAT_MATCHER.matches(mit)) {\n-          return Optional.of(mit);\n+          ExpressionTree arg = mit.arguments().get(0);\n+          if (alwaysReturnSameValue(arg)) {\n+            return Optional.of(new AssertSubject(mit, arg));\n+          }\n         } else if (ASSERTJ_SET_CONTEXT_METHODS.matches(mit)) {\n           return Optional.empty();\n         } else {\n-          return getSimpleAssertSubjectInvocation(mit.methodSelect());\n+          return getSimpleAssertSubject(mit.methodSelect());\n         }\n       }\n     }\n     return Optional.empty();\n   }\n \n-  private static boolean areEquivalent(ExpressionTree e1, ExpressionTree e2) {\n-    if (e1.is(Tree.Kind.METHOD_INVOCATION)) {\n-      // Two method invocation can return different values.\n-      return false;\n-    }\n-\n+  private static boolean areEquivalent(@Nullable ExpressionTree e1, ExpressionTree e2) {\n     return SyntacticEquivalence.areEquivalent(e1, e2);\n   }\n \n-  private void reportIssueIfMultipleCalls(@Nullable MethodInvocationTree mainLocation, List<MethodInvocationTree> equivalentAssertions) {\n-    if (mainLocation != null && !equivalentAssertions.isEmpty()) {\n-      reportIssue(ExpressionUtils.methodName(mainLocation),\n+  private void reportIssueIfMultipleCalls(@Nullable AssertSubject assertSubject, List<MethodInvocationTree> equivalentAssertions) {\n+    if (assertSubject != null && !equivalentAssertions.isEmpty()) {\n+      reportIssue(ExpressionUtils.methodName(assertSubject.mit),\n         \"Join these multiple assertions subject to one assertion chain.\",\n         equivalentAssertions.stream().map(mit -> new JavaFileScannerContext.Location(\"Other assertThat\", ExpressionUtils.methodName(mit))).collect(Collectors.toList()),\n         null);\n     }\n   }\n \n+  private static class AssertSubject {\n+    final MethodInvocationTree mit;\n+    final ExpressionTree arg;\n+\n+    AssertSubject(MethodInvocationTree mit, ExpressionTree arg) {\n+      this.mit = mit;\n+      this.arg = arg;\n+    }\n+  }\n+\n }\n"}}, {"oid": "99562f8b885bb18042245c7f54644938d27385e8", "url": "https://github.com/SonarSource/sonar-java/commit/99562f8b885bb18042245c7f54644938d27385e8", "message": "Correctly support consecutive assertions and returning differents values", "committedDate": "2020-06-05T14:22:19Z", "type": "forcePushed"}, {"oid": "ac260bc672f86de782a25b9e61472fddc4d5e090", "url": "https://github.com/SonarSource/sonar-java/commit/ac260bc672f86de782a25b9e61472fddc4d5e090", "message": "SONARJAVA-3402 Rule S5853: Consecutive AssertJ \"assertThat\" statement should be chained", "committedDate": "2020-06-09T08:12:25Z", "type": "commit"}, {"oid": "34f68e0395239648d8dd5aca7cb6736b60c47b0e", "url": "https://github.com/SonarSource/sonar-java/commit/34f68e0395239648d8dd5aca7cb6736b60c47b0e", "message": "Correctly support consecutive assertions and returning differents values", "committedDate": "2020-06-09T08:12:25Z", "type": "commit"}, {"oid": "8af71561a7a70c9e685052a76a8e11383b5f6922", "url": "https://github.com/SonarSource/sonar-java/commit/8af71561a7a70c9e685052a76a8e11383b5f6922", "message": "Update ruling", "committedDate": "2020-06-09T08:12:25Z", "type": "commit"}, {"oid": "8af71561a7a70c9e685052a76a8e11383b5f6922", "url": "https://github.com/SonarSource/sonar-java/commit/8af71561a7a70c9e685052a76a8e11383b5f6922", "message": "Update ruling", "committedDate": "2020-06-09T08:12:25Z", "type": "forcePushed"}]}