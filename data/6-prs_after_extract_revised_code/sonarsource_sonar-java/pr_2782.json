{"pr_number": 2782, "pr_title": "SONARJAVA-3207 Rule S5547: Cipher algorithms should be robust", "pr_createdAt": "2020-02-03T14:24:38Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2782", "timeline": [{"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "url": "https://github.com/SonarSource/sonar-java/commit/0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547", "committedDate": "2020-02-03T15:22:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTY1Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374561652", "bodyText": "In this check, we did something similar and we used ExpressionsHelper.getConstantValueAsString.  We may want to use it to be consistent.\nIt would also avoid to trim the quotes at line 74.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-02-04T09:35:26Z", "path": "java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.JavaPropertiesHelper;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5547\")\n+public class StrongCipherAlgorithmCheck extends AbstractMethodDetection {\n+\n+  private static final String MESSAGE = \"Use a strong cipher algorithm.\";\n+\n+  private static final Set<String> VULNERABLE_ALGORITHMS = Stream.of(\"DES\", \"DESede\", \"RC2\", \"RC4\", \"Blowfish\")\n+    .map(name -> name.toUpperCase(Locale.ROOT)).collect(Collectors.toSet());\n+\n+  @Override\n+  protected List<MethodMatcher> getMethodInvocationMatchers() {\n+    return Arrays.asList(\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.Cipher\").name(\"getInstance\").withAnyParameters(),\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.NullCipher\").name(\"<init>\").withAnyParameters());\n+  }\n+\n+  @Override\n+  protected void onConstructorFound(NewClassTree newClassTree) {\n+    reportIssue(newClassTree.identifier(), MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    ExpressionTree firstArg = mit.arguments().get(0);\n+    ExpressionTree value = getValueOrPropertyDefaultValue(firstArg);\n+    if (value.is(Tree.Kind.STRING_LITERAL)) {", "originalCommit": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "chunk": "diff --git a/java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java b/java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java\nindex 831a239fd..a08b6a819 100644\n--- a/java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java\n+++ b/java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java\n\n@@ -26,15 +26,13 @@ import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.ExpressionsHelper;\n import org.sonar.java.checks.helpers.JavaPropertiesHelper;\n import org.sonar.java.checks.methods.AbstractMethodDetection;\n import org.sonar.java.matcher.MethodMatcher;\n-import org.sonar.java.model.LiteralUtils;\n import org.sonar.plugins.java.api.tree.ExpressionTree;\n-import org.sonar.plugins.java.api.tree.LiteralTree;\n import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n import org.sonar.plugins.java.api.tree.NewClassTree;\n-import org.sonar.plugins.java.api.tree.Tree;\n \n @Rule(key = \"S5547\")\n public class StrongCipherAlgorithmCheck extends AbstractMethodDetection {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NjI0OA==", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374566248", "bodyText": "I think it's better to remove the assignments for clarity.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-02-04T09:44:35Z", "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;", "originalCommit": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "chunk": "diff --git a/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java b/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\nindex a46c5d63b..5092a26ee 100644\n--- a/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\n+++ b/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\n\n@@ -10,87 +10,85 @@ class MyCipher extends Cipher {\n }\n \n class A {\n+  private final static String DES = \"DES\";\n+\n   void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n-    Cipher c;\n-    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n-    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n-    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n-    c = new javax.crypto.NullCipher(); // Noncompliant\n-    c = new MyCipher();\n+    Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=24;ec=49]] {{Use a strong cipher algorithm.}}\n+    Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    new NullCipher(); // Noncompliant [[sc=9;ec=19]] {{Use a strong cipher algorithm.}}\n+    new javax.crypto.NullCipher(); // Noncompliant\n+    new MyCipher();\n \n     // DES\n-    c = Cipher.getInstance(\"DES\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DES\"); // Noncompliant\n+    Cipher.getInstance(DES); // Noncompliant\n+    Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n \n     // 3DES\n-    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n \n     // RC2\n-    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n \n     // RC4\n-    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n \n     // Blowfish\n-    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n-\n-    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n-\n-    c.getBlockSize();\n+    Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n   }\n \n   void usingJavaUtilProperties(java.util.Properties props, String otherAlgo) throws NoSuchAlgorithmException, NoSuchPaddingException {\n     String algo = props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\");\n-    Cipher c;\n-    c = Cipher.getInstance(algo); // Noncompliant\n-    c = Cipher.getInstance(props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\")); // Noncompliant\n-    c = Cipher.getInstance(getAlgo()); // Compliant\n-    c = Cipher.getInstance(\"/\"); // Compliant\n+    Cipher.getInstance(algo); // Noncompliant\n+    Cipher.getInstance(props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\")); // Noncompliant\n+    Cipher.getInstance(getAlgo()); // Compliant\n+    Cipher.getInstance(\"/\"); // Compliant\n \n     String algo2 = props.getProperty(\"myAlgo\");\n-    c = Cipher.getInstance(algo2); // Compliant\n+    Cipher.getInstance(algo2); // Compliant\n \n     String algo3 = props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\");\n     algo3 = \"myOtherAlgo\";\n-    c = Cipher.getInstance(algo3); // Compliant\n+    Cipher.getInstance(algo3); // Compliant\n \n     String algo4 = getAlgo();\n-    c = Cipher.getInstance(algo4); // Compliant\n+    Cipher.getInstance(algo4); // Compliant\n \n-    c = Cipher.getInstance(otherAlgo); // Compliant\n+    Cipher.getInstance(otherAlgo); // Compliant\n \n     String algo5 = \"myAlgo\";\n-    c = Cipher.getInstance(algo5); // Compliant\n+    Cipher.getInstance(algo5); // Compliant\n \n     String algo6 = props.getProperty(\"myAlgo\", getAlgo());\n-    c = Cipher.getInstance(algo6); // Compliant\n-    c.getBlockSize();\n+    Cipher.getInstance(algo6); // Compliant\n   }\n \n   private String getAlgo() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NzQ2Mg==", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374567462", "bodyText": "What is this call?", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-02-04T09:46:47Z", "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n+    c = new javax.crypto.NullCipher(); // Noncompliant\n+    c = new MyCipher();\n+\n+    // DES\n+    c = Cipher.getInstance(\"DES\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // 3DES\n+    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC2\n+    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC4\n+    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // Blowfish\n+    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n+\n+    c.getBlockSize();", "originalCommit": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwODc4MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374608780", "bodyText": "it was to remove:\nWARNING StrongCipherAlgorithmCheck.java:70: The value of the local variable c is not used\nBut I will apply your above proposal, remove Cipher c;", "author": "alban-auzeill", "createdAt": "2020-02-04T11:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NzQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "chunk": "diff --git a/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java b/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\nindex a46c5d63b..5092a26ee 100644\n--- a/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\n+++ b/java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java\n\n@@ -10,87 +10,85 @@ class MyCipher extends Cipher {\n }\n \n class A {\n+  private final static String DES = \"DES\";\n+\n   void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n-    Cipher c;\n-    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n-    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n-    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n-    c = new javax.crypto.NullCipher(); // Noncompliant\n-    c = new MyCipher();\n+    Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=24;ec=49]] {{Use a strong cipher algorithm.}}\n+    Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    new NullCipher(); // Noncompliant [[sc=9;ec=19]] {{Use a strong cipher algorithm.}}\n+    new javax.crypto.NullCipher(); // Noncompliant\n+    new MyCipher();\n \n     // DES\n-    c = Cipher.getInstance(\"DES\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DES\"); // Noncompliant\n+    Cipher.getInstance(DES); // Noncompliant\n+    Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n \n     // 3DES\n-    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n \n     // RC2\n-    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n \n     // RC4\n-    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n \n     // Blowfish\n-    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n-    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n-\n-    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n-\n-    c.getBlockSize();\n+    Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n   }\n \n   void usingJavaUtilProperties(java.util.Properties props, String otherAlgo) throws NoSuchAlgorithmException, NoSuchPaddingException {\n     String algo = props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\");\n-    Cipher c;\n-    c = Cipher.getInstance(algo); // Noncompliant\n-    c = Cipher.getInstance(props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\")); // Noncompliant\n-    c = Cipher.getInstance(getAlgo()); // Compliant\n-    c = Cipher.getInstance(\"/\"); // Compliant\n+    Cipher.getInstance(algo); // Noncompliant\n+    Cipher.getInstance(props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\")); // Noncompliant\n+    Cipher.getInstance(getAlgo()); // Compliant\n+    Cipher.getInstance(\"/\"); // Compliant\n \n     String algo2 = props.getProperty(\"myAlgo\");\n-    c = Cipher.getInstance(algo2); // Compliant\n+    Cipher.getInstance(algo2); // Compliant\n \n     String algo3 = props.getProperty(\"myAlgo\", \"DES/ECB/PKCS5Padding\");\n     algo3 = \"myOtherAlgo\";\n-    c = Cipher.getInstance(algo3); // Compliant\n+    Cipher.getInstance(algo3); // Compliant\n \n     String algo4 = getAlgo();\n-    c = Cipher.getInstance(algo4); // Compliant\n+    Cipher.getInstance(algo4); // Compliant\n \n-    c = Cipher.getInstance(otherAlgo); // Compliant\n+    Cipher.getInstance(otherAlgo); // Compliant\n \n     String algo5 = \"myAlgo\";\n-    c = Cipher.getInstance(algo5); // Compliant\n+    Cipher.getInstance(algo5); // Compliant\n \n     String algo6 = props.getProperty(\"myAlgo\", getAlgo());\n-    c = Cipher.getInstance(algo6); // Compliant\n-    c.getBlockSize();\n+    Cipher.getInstance(algo6); // Compliant\n   }\n \n   private String getAlgo() {\n"}}, {"oid": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "url": "https://github.com/SonarSource/sonar-java/commit/98eeb3245e614e67d72fe0ab190373cb924dc5e7", "message": "Fix from review", "committedDate": "2020-02-04T14:01:40Z", "type": "forcePushed"}, {"oid": "1a81eec9379d1bfd7041d229608a02438faa77d5", "url": "https://github.com/SonarSource/sonar-java/commit/1a81eec9379d1bfd7041d229608a02438faa77d5", "message": "Fix from review", "committedDate": "2020-02-04T17:03:42Z", "type": "forcePushed"}, {"oid": "829721bbe02202d5fb163cf899f632696f0f73d4", "url": "https://github.com/SonarSource/sonar-java/commit/829721bbe02202d5fb163cf899f632696f0f73d4", "message": "SONARJAVA-3207 Rule S5547: Cipher algorithms should be robust", "committedDate": "2020-02-05T05:13:27Z", "type": "commit"}, {"oid": "bab65334d2639bc55c622f87f5901677fe695de3", "url": "https://github.com/SonarSource/sonar-java/commit/bab65334d2639bc55c622f87f5901677fe695de3", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547", "committedDate": "2020-02-05T05:13:27Z", "type": "commit"}, {"oid": "bab65334d2639bc55c622f87f5901677fe695de3", "url": "https://github.com/SonarSource/sonar-java/commit/bab65334d2639bc55c622f87f5901677fe695de3", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547", "committedDate": "2020-02-05T05:13:27Z", "type": "forcePushed"}]}