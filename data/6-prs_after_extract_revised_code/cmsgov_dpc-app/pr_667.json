{"pr_number": 667, "pr_title": "DPC-1119: Stuck jobs fixes: change exceptions in ResourceFetcher; remove RetryTransformer", "pr_createdAt": "2020-03-06T21:35:51Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/667", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1ODY3OA==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r389158678", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "codeclimate", "createdAt": "2020-03-06T21:42:44Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -137,7 +137,7 @@ private Resource fetchFirst(String mbi) {\n                 beneId = getBeneIdFromPatient(patient);\n                 return blueButtonClient.requestCoverageFromServer(beneId);\n             default:\n-                throw new JobQueueFailure(jobID, batchID, \"Unexpected resource type: \" + resourceType.toString());\n+                throw new RuntimeException(String.format(\"Job %s, batch %s: Unexpected resource type: %s\", jobID, batchID, resourceType.toString()));", "originalCommit": "f761ddc888391cf8c7983405ef5cea3396ca5dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93832b10eaf177d90432039e10b99491e9bbbac", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\nindex 4e36f458..4fe60753 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n\n@@ -137,7 +137,7 @@ class ResourceFetcher {\n                 beneId = getBeneIdFromPatient(patient);\n                 return blueButtonClient.requestCoverageFromServer(beneId);\n             default:\n-                throw new RuntimeException(String.format(\"Job %s, batch %s: Unexpected resource type: %s\", jobID, batchID, resourceType.toString()));\n+                throw new ResourceNotFoundException(String.format(\"Job %s, batch %s: Unexpected resource type: %s\", jobID, batchID, resourceType.toString()));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1ODY4MA==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r389158680", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "codeclimate", "createdAt": "2020-03-06T21:42:44Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -146,22 +146,22 @@ private Patient fetchPatient(String mbi) {\n         try {\n             patients = blueButtonClient.requestPatientFromServerByMbi(mbi);\n         } catch (GeneralSecurityException e) {\n-            throw new JobQueueFailure(jobID, batchID, \"Failed to retrieve Patient\");\n+            throw new RuntimeException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));", "originalCommit": "f761ddc888391cf8c7983405ef5cea3396ca5dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93832b10eaf177d90432039e10b99491e9bbbac", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\nindex 4e36f458..4fe60753 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n\n@@ -146,14 +146,14 @@ class ResourceFetcher {\n         try {\n             patients = blueButtonClient.requestPatientFromServerByMbi(mbi);\n         } catch (GeneralSecurityException e) {\n-            throw new RuntimeException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));\n+            throw new ResourceNotFoundException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));\n         }\n \n         if (patients.getTotal() == 1) {\n             return (Patient) patients.getEntryFirstRep().getResource();\n         }\n \n-        throw new RuntimeException(String.format(\"Job %s, batch %s: Expected 1 Patient to match MBI but found %d\", jobID, batchID, patients.getTotal()));\n+        throw new ResourceNotFoundException(String.format(\"Job %s, batch %s: Expected 1 Patient to match MBI but found %d\", jobID, batchID, patients.getTotal()));\n     }\n \n     private String getBeneIdFromPatient(Patient patient) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1ODY4Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r389158682", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "codeclimate", "createdAt": "2020-03-06T21:42:45Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -146,22 +146,22 @@ private Patient fetchPatient(String mbi) {\n         try {\n             patients = blueButtonClient.requestPatientFromServerByMbi(mbi);\n         } catch (GeneralSecurityException e) {\n-            throw new JobQueueFailure(jobID, batchID, \"Failed to retrieve Patient\");\n+            throw new RuntimeException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));\n         }\n \n         if (patients.getTotal() == 1) {\n             return (Patient) patients.getEntryFirstRep().getResource();\n         }\n \n-        throw new JobQueueFailure(jobID, batchID, String.format(\"Expected 1 Patient to match MBI but found %d\", patients.getTotal()));\n+        throw new RuntimeException(String.format(\"Job %s, batch %s: Expected 1 Patient to match MBI but found %d\", jobID, batchID, patients.getTotal()));", "originalCommit": "f761ddc888391cf8c7983405ef5cea3396ca5dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e93832b10eaf177d90432039e10b99491e9bbbac", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\nindex 4e36f458..4fe60753 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java\n\n@@ -146,14 +146,14 @@ class ResourceFetcher {\n         try {\n             patients = blueButtonClient.requestPatientFromServerByMbi(mbi);\n         } catch (GeneralSecurityException e) {\n-            throw new RuntimeException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));\n+            throw new ResourceNotFoundException(String.format(\"Job %s, batch %s: Failed to retrieve Patient\", jobID, batchID));\n         }\n \n         if (patients.getTotal() == 1) {\n             return (Patient) patients.getEntryFirstRep().getResource();\n         }\n \n-        throw new RuntimeException(String.format(\"Job %s, batch %s: Expected 1 Patient to match MBI but found %d\", jobID, batchID, patients.getTotal()));\n+        throw new ResourceNotFoundException(String.format(\"Job %s, batch %s: Expected 1 Patient to match MBI but found %d\", jobID, batchID, patients.getTotal()));\n     }\n \n     private String getBeneIdFromPatient(Patient patient) {\n"}}, {"oid": "e93832b10eaf177d90432039e10b99491e9bbbac", "url": "https://github.com/CMSgov/dpc-app/commit/e93832b10eaf177d90432039e10b99491e9bbbac", "message": "Replace job queue failures with runtime exceptions to cause jobs to complete with operation outcomes", "committedDate": "2020-03-12T13:45:17Z", "type": "commit"}, {"oid": "d08a8ef17218908d384be668c2f04ca039a4777f", "url": "https://github.com/CMSgov/dpc-app/commit/d08a8ef17218908d384be668c2f04ca039a4777f", "message": "Exception and logging adjustments", "committedDate": "2020-03-12T13:45:17Z", "type": "commit"}, {"oid": "e6ff9fbd5f23eb3f4b61611d1d24c74c91df4077", "url": "https://github.com/CMSgov/dpc-app/commit/e6ff9fbd5f23eb3f4b61611d1d24c74c91df4077", "message": "Add test to confirm job completes with OperationOutcome when two Patients match provided MBI", "committedDate": "2020-03-12T13:45:17Z", "type": "commit"}, {"oid": "4b803476030b212fc4c25ecf367e56f97abe5212", "url": "https://github.com/CMSgov/dpc-app/commit/4b803476030b212fc4c25ecf367e56f97abe5212", "message": "Add new Patient not in BFD to Postman test", "committedDate": "2020-03-12T13:45:18Z", "type": "commit"}, {"oid": "8a64e89f56190c529838b087e692e5418b3bdd56", "url": "https://github.com/CMSgov/dpc-app/commit/8a64e89f56190c529838b087e692e5418b3bdd56", "message": "Error message tweaks, continuing to work on Postman improvements", "committedDate": "2020-03-12T13:45:18Z", "type": "commit"}, {"oid": "8e4da37f444b222d3c5a8a2d2705ca3306ad0c93", "url": "https://github.com/CMSgov/dpc-app/commit/8e4da37f444b222d3c5a8a2d2705ca3306ad0c93", "message": "Remove env vars from docker-compose.yml that are pulled from local.env file", "committedDate": "2020-03-12T13:45:18Z", "type": "commit"}, {"oid": "42f352b3b30a9eaad9c53f04a96daed5bf030b14", "url": "https://github.com/CMSgov/dpc-app/commit/42f352b3b30a9eaad9c53f04a96daed5bf030b14", "message": "MockBlueButtonClient getPatient fix; logging and comments fixes in ResourceFetcher", "committedDate": "2020-03-12T13:45:18Z", "type": "commit"}, {"oid": "77561a0d59d013fdd4f3b7f93c9dffbc56a3d906", "url": "https://github.com/CMSgov/dpc-app/commit/77561a0d59d013fdd4f3b7f93c9dffbc56a3d906", "message": "Remove RetryTransformer", "committedDate": "2020-03-12T13:45:18Z", "type": "commit"}, {"oid": "77561a0d59d013fdd4f3b7f93c9dffbc56a3d906", "url": "https://github.com/CMSgov/dpc-app/commit/77561a0d59d013fdd4f3b7f93c9dffbc56a3d906", "message": "Remove RetryTransformer", "committedDate": "2020-03-12T13:45:18Z", "type": "forcePushed"}, {"oid": "1d266be16e583d5b0266c06114516a99f16c87f9", "url": "https://github.com/CMSgov/dpc-app/commit/1d266be16e583d5b0266c06114516a99f16c87f9", "message": "Update Postman test to expect error file", "committedDate": "2020-03-12T13:49:47Z", "type": "commit"}, {"oid": "a4a9c2967cfc4c34a7cb4423c34d818b937b37ea", "url": "https://github.com/CMSgov/dpc-app/commit/a4a9c2967cfc4c34a7cb4423c34d818b937b37ea", "message": "One more Postman adjustment for number of Patients", "committedDate": "2020-03-12T13:58:59Z", "type": "commit"}, {"oid": "ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "url": "https://github.com/CMSgov/dpc-app/commit/ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "message": "Test adjustments for retry removal", "committedDate": "2020-03-12T15:07:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyMTE1OA==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r391721158", "bodyText": "The fix! Looks great!", "author": "ronaldheft-usds", "createdAt": "2020-03-12T15:58:09Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -73,7 +65,6 @@\n                 return List.of(firstFetched);\n             }\n         })\n-                .compose(RetryTransformer.of(retry))", "originalCommit": "ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyMTYzNw==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r391721637", "bodyText": "Great job on the logging here and elsewhere. We're now returning the correct exception. \ud83d\udcaf", "author": "ronaldheft-usds", "createdAt": "2020-03-12T15:58:50Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/ResourceFetcher.java", "diffHunk": "@@ -146,22 +137,27 @@ private Patient fetchPatient(String mbi) {\n         try {\n             patients = blueButtonClient.requestPatientFromServerByMbi(mbi);\n         } catch (GeneralSecurityException e) {\n-            throw new JobQueueFailure(jobID, batchID, \"Failed to retrieve Patient\");\n+            logger.error(\"Job {}, batch {}: Failed to retrieve Patient\", jobID, batchID, e);", "originalCommit": "ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyMTkyMw==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r391721923", "bodyText": "Great job updating the tests without retrying.", "author": "ronaldheft-usds", "createdAt": "2020-03-12T15:59:17Z", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "diffHunk": "@@ -364,9 +364,9 @@ void badPatientIDTest() throws GeneralSecurityException {\n         Mockito.verify(bbclient, atLeastOnce()).requestPatientFromServerByMbi(idCaptor.capture());\n         Mockito.verify(bbclient, atLeastOnce()).requestEOBFromServer(idCaptor.capture());\n         var values = idCaptor.getAllValues();\n-        assertEquals(6,\n+        assertEquals(2,\n                 values.stream().filter(value -> value.equals(\"-1\")).count(),\n-                \"Should be 6 invalid ids, 3 retries per method x 2 method calls x 1 bad-id\");\n+                \"Should be 2 invalid ids, 2 method calls x 1 bad-id\");", "originalCommit": "ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyMjM2NQ==", "url": "https://github.com/CMSgov/dpc-app/pull/667#discussion_r391722365", "bodyText": "New test looks great, and is asserting a COMPLETED state.", "author": "ronaldheft-usds", "createdAt": "2020-03-12T15:59:56Z", "path": "dpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java", "diffHunk": "@@ -378,6 +378,34 @@ void badPatientIDTest() throws GeneralSecurityException {\n                 () -> assertTrue(Files.exists(Path.of(expectedErrorPath)), \"expected an error file\"));\n     }\n \n+    @Test\n+    void multiplePatientsMatchTest() throws GeneralSecurityException {", "originalCommit": "ddbd09ef6869cd9a61f464e4b51cfca7e9632040", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}