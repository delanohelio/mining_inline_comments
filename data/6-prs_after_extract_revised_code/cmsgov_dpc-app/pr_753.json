{"pr_number": 753, "pr_title": "DPC-25 Lookback in Aggregation Engine", "pr_createdAt": "2020-04-16T06:20:26Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/753", "timeline": [{"oid": "9e3ceeeb20514406c179f623a28bc97ac461d9bf", "url": "https://github.com/CMSgov/dpc-app/commit/9e3ceeeb20514406c179f623a28bc97ac461d9bf", "message": "lookback in aggregation engine", "committedDate": "2020-04-16T06:17:38Z", "type": "commit"}, {"oid": "20a0e1d1b917bbfe98840c8329d653a6bbad9a76", "url": "https://github.com/CMSgov/dpc-app/commit/20a0e1d1b917bbfe98840c8329d653a6bbad9a76", "message": "make existing tests pass", "committedDate": "2020-04-16T06:17:58Z", "type": "commit"}, {"oid": "a264beba5ea2d919ce04402af0f80250826491ab", "url": "https://github.com/CMSgov/dpc-app/commit/a264beba5ea2d919ce04402af0f80250826491ab", "message": "clean up some variable names and commented out code", "committedDate": "2020-04-16T06:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0ODAyMQ==", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r409648021", "bodyText": "Would it be more flexible to pass in the Patient and Practitioner UUIDs so they don't have to be parsed out of the reference strings?", "author": "em1", "createdAt": "2020-04-16T15:28:12Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package gov.cms.dpc.aggregation.dao;\n+\n+import gov.cms.dpc.common.entities.*;\n+import gov.cms.dpc.common.hibernate.attribution.DPCManagedSessionFactory;\n+import gov.cms.dpc.fhir.FHIRExtractors;\n+import io.dropwizard.hibernate.AbstractDAO;\n+import org.hibernate.query.Query;\n+\n+import javax.inject.Inject;\n+import javax.persistence.criteria.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class RosterDAO extends AbstractDAO<RosterEntity> {\n+\n+    @Inject\n+    public RosterDAO(DPCManagedSessionFactory factory) {\n+        super(factory.getSessionFactory());\n+    }\n+\n+    public boolean withinRoster(UUID organizationID, String providerID, String patientReference) {", "originalCommit": "a264beba5ea2d919ce04402af0f80250826491ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "542b778efa90b9dc816623f8614f5d0583d90015", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\nindex dc315be7..f682e551 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\n\n@@ -2,7 +2,6 @@ package gov.cms.dpc.aggregation.dao;\n \n import gov.cms.dpc.common.entities.*;\n import gov.cms.dpc.common.hibernate.attribution.DPCManagedSessionFactory;\n-import gov.cms.dpc.fhir.FHIRExtractors;\n import io.dropwizard.hibernate.AbstractDAO;\n import org.hibernate.query.Query;\n \n"}}, {"oid": "542b778efa90b9dc816623f8614f5d0583d90015", "url": "https://github.com/CMSgov/dpc-app/commit/542b778efa90b9dc816623f8614f5d0583d90015", "message": "renamed patientReference to patientMBIHash to reflect the actual thing being passed in, lookback no longer ignores operation outcome", "committedDate": "2020-04-16T21:05:51Z", "type": "commit"}, {"oid": "816edae61d9a280a423d9816b83aa44adfd13275", "url": "https://github.com/CMSgov/dpc-app/commit/816edae61d9a280a423d9816b83aa44adfd13275", "message": "retrieve providerID from roster, because job provides rosterID not providerID and update tests", "committedDate": "2020-04-18T00:40:17Z", "type": "commit"}, {"oid": "73c4ccfa42f3835ef68f98ddb0ed3cc049e12ff9", "url": "https://github.com/CMSgov/dpc-app/commit/73c4ccfa42f3835ef68f98ddb0ed3cc049e12ff9", "message": "update lookback service and tests", "committedDate": "2020-04-18T00:42:31Z", "type": "commit"}, {"oid": "f83f7f6669b36b547f110d61452b2c31f31c17cd", "url": "https://github.com/CMSgov/dpc-app/commit/f83f7f6669b36b547f110d61452b2c31f31c17cd", "message": "handle when the group resource passes in a rosterID and when the data service passes in a providerID to be able to find the roster when processing a job", "committedDate": "2020-04-18T01:21:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU0Mjg5Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r410542892", "bodyText": "Method ambiguousIDPredicates has 5 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-04-18T01:39:06Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package gov.cms.dpc.aggregation.dao;\n+\n+import gov.cms.dpc.common.entities.*;\n+import gov.cms.dpc.common.hibernate.attribution.DPCManagedSessionFactory;\n+import io.dropwizard.hibernate.AbstractDAO;\n+import org.hibernate.query.Query;\n+\n+import javax.inject.Inject;\n+import javax.persistence.criteria.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class RosterDAO extends AbstractDAO<RosterEntity> {\n+\n+    @Inject\n+    public RosterDAO(DPCManagedSessionFactory factory) {\n+        super(factory.getSessionFactory());\n+    }\n+\n+    public UUID retrieveProviderIDFromRoster(UUID organizationID, UUID ambiguousID, String patientMBI) {\n+        // Build a selection query to get records from the database\n+        final CriteriaBuilder builder = currentSession().getCriteriaBuilder();\n+        final CriteriaQuery<UUID> query = builder.createQuery(UUID.class);\n+        final Root<RosterEntity> root = query.from(RosterEntity.class);\n+\n+        query.select(root.get(RosterEntity_.ATTRIBUTED_PROVIDER).get(ProviderEntity_.ID));\n+        query.where(ambiguousIDPredicates(builder, root, organizationID, ambiguousID, patientMBI).toArray(new Predicate[0]));\n+\n+\n+        Query<UUID> q = currentSession().createQuery(query);\n+        return q.getSingleResult();\n+    }\n+\n+    private List<Predicate> ambiguousIDPredicates(CriteriaBuilder builder, Root<RosterEntity> root, UUID organizationID, UUID ambiguousID, String patientMBI) {", "originalCommit": "f83f7f6669b36b547f110d61452b2c31f31c17cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b067d106d534305eed89f45bb525ad8e5613cf", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\nindex d414b717..87566aa7 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/dao/RosterDAO.java\n\n@@ -25,32 +25,39 @@ public class RosterDAO extends AbstractDAO<RosterEntity> {\n         final Root<RosterEntity> root = query.from(RosterEntity.class);\n \n         query.select(root.get(RosterEntity_.ATTRIBUTED_PROVIDER).get(ProviderEntity_.ID));\n-        query.where(ambiguousIDPredicates(builder, root, organizationID, ambiguousID, patientMBI).toArray(new Predicate[0]));\n+        List<Predicate> predicates = new ArrayList<>();\n+        // Restrict by Organization via ID\n+        predicates.add(organizationPredicate(builder, root, organizationID));\n+        // Restrict by Provider or Roster via ID\n+        predicates.add(ambiguousIDPredicate(builder, root, ambiguousID));\n+        // Restrict by Patient via MBI\n+        predicates.add(mbiPredicate(builder, root, patientMBI));\n+\n+        query.where(predicates.toArray(new Predicate[0]));\n \n \n         Query<UUID> q = currentSession().createQuery(query);\n         return q.getSingleResult();\n     }\n \n-    private List<Predicate> ambiguousIDPredicates(CriteriaBuilder builder, Root<RosterEntity> root, UUID organizationID, UUID ambiguousID, String patientMBI) {\n-        List<Predicate> predicates = new ArrayList<>();\n+    private Predicate organizationPredicate(CriteriaBuilder builder, Root<RosterEntity> root, UUID organizationID) {\n         // Always restrict by Organization\n-        predicates.add(builder\n-                .equal(root.join(RosterEntity_.MANAGING_ORGANIZATION)\n-                                .get(OrganizationEntity_.ID),\n-                        organizationID));\n+        return builder.equal(root.join(RosterEntity_.MANAGING_ORGANIZATION).get(OrganizationEntity_.ID), organizationID);\n+    }\n \n+    private Predicate ambiguousIDPredicate(CriteriaBuilder builder, Root<RosterEntity> root, UUID ambiguousID) {\n         //Group Export passes in the rosterID as the jobBatch providerID\n-        Predicate rosterIDPredicate = builder.equal(root.get(RosterEntity_.ID), ambiguousID);\n+        final Predicate rosterIDPredicate = builder.equal(root.get(RosterEntity_.ID), ambiguousID);\n         //DataService passes in the providerID as the jobBatch providerID\n-        Predicate providerIDPredicate = builder.equal(root.get(RosterEntity_.ATTRIBUTED_PROVIDER).get(ProviderEntity_.ID), ambiguousID);\n-        predicates.add(builder.or(rosterIDPredicate, providerIDPredicate));\n+        final Predicate providerIDPredicate = builder.equal(root.get(RosterEntity_.ATTRIBUTED_PROVIDER).get(ProviderEntity_.ID), ambiguousID);\n+        return builder.or(rosterIDPredicate, providerIDPredicate);\n+    }\n \n+    private Predicate mbiPredicate(CriteriaBuilder builder, Root<RosterEntity> root, String patientMBI) {\n         final Join<RosterEntity, AttributionRelationship> attrJoin = root.join(RosterEntity_.ATTRIBUTIONS);\n         final Join<AttributionRelationship, PatientEntity> patientJoin = attrJoin.join(AttributionRelationship_.PATIENT);\n         //The database labels the column beneficiaryId but it's actually storing the MBI\n-        predicates.add(builder.equal(patientJoin.get(PatientEntity_.BENEFICIARY_ID), patientMBI));\n-        return predicates;\n+        return builder.equal(patientJoin.get(PatientEntity_.BENEFICIARY_ID), patientMBI);\n     }\n \n \n"}}, {"oid": "a1b067d106d534305eed89f45bb525ad8e5613cf", "url": "https://github.com/CMSgov/dpc-app/commit/a1b067d106d534305eed89f45bb525ad8e5613cf", "message": "trying to make code climate happy", "committedDate": "2020-04-19T21:41:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAwMTA1OA==", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r411001058", "bodyText": "Method bufferAndWrite has 5 arguments (exceeds 4 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-04-19T21:59:45Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package gov.cms.dpc.aggregation.engine;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricRegistry;\n+import gov.cms.dpc.bluebutton.client.BlueButtonClient;\n+import gov.cms.dpc.common.utils.MetricMaker;\n+import gov.cms.dpc.queue.IJobQueue;\n+import gov.cms.dpc.queue.models.JobQueueBatch;\n+import gov.cms.dpc.queue.models.JobQueueBatchFile;\n+import io.reactivex.Flowable;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.hl7.fhir.dstu3.model.Resource;\n+import org.hl7.fhir.dstu3.model.ResourceType;\n+import org.reactivestreams.Publisher;\n+\n+import javax.inject.Inject;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class JobBatchProcessor {\n+\n+    private final BlueButtonClient bbclient;\n+    private final OperationsConfig operationsConfig;\n+    private final FhirContext fhirContext;\n+    private final Meter resourceMeter;\n+    private final Meter operationalOutcomeMeter;\n+\n+    @Inject\n+    public JobBatchProcessor(BlueButtonClient bbclient, FhirContext fhirContext, MetricRegistry metricRegistry, OperationsConfig operationsConfig) {\n+        this.bbclient = bbclient;\n+        this.fhirContext = fhirContext;\n+        this.operationsConfig = operationsConfig;\n+\n+        // Metrics\n+        final var metricFactory = new MetricMaker(metricRegistry, JobBatchProcessor.class);\n+        resourceMeter = metricFactory.registerMeter(\"resourceFetched\");\n+        operationalOutcomeMeter = metricFactory.registerMeter(\"operationalOutcomes\");\n+    }\n+\n+    /**\n+     * Processes a partial of a job batch. Marks the partial as completed upon processing\n+     *\n+     * @param job       - the job to process\n+     * @param patientID - The current patient id processing\n+     */\n+    public List<JobQueueBatchFile> processJobBatchPartial(UUID aggregatorID, IJobQueue queue, JobQueueBatch job, String patientID) {\n+        final var results = Flowable.fromIterable(job.getResourceTypes())\n+                .map(resourceType -> fetchResource(job, patientID, resourceType))\n+                .flatMap(result -> writeResource(job, result.getRight(), result.getLeft().flatMap(Flowable::fromIterable)))\n+                .toList()\n+                .blockingGet(); // Wait on the main thread until completion\n+        queue.completePartialBatch(job, aggregatorID);\n+        return results;\n+    }\n+\n+    /**\n+     * Fetch and write a specific resource type\n+     *\n+     * @param job          context\n+     * @param resourceType to process\n+     */\n+    public Pair<Flowable<List<Resource>>, ResourceType> fetchResource(JobQueueBatch job, String patientID, ResourceType resourceType) {\n+        // Make this flow hot (ie. only called once) when multiple subscribers attach\n+        final var fetcher = new ResourceFetcher(bbclient, job.getJobID(), job.getBatchID(), resourceType, operationsConfig);\n+        return Pair.of(fetcher.fetchResources(patientID), resourceType);\n+    }\n+\n+    private Flowable<JobQueueBatchFile> writeResource(JobQueueBatch job, ResourceType resourceType, Flowable<Resource> flow) {\n+        var connectableMixedFlow = flow.publish().autoConnect(2);\n+        // Batch the non-error resources into files\n+        final var resourceCount = new AtomicInteger();\n+        final var sequenceCount = new AtomicInteger();\n+        job.getJobQueueFileLatest(resourceType).ifPresent(file -> {\n+            resourceCount.set(file.getCount());\n+            sequenceCount.set(file.getSequence());\n+        });\n+        final var writer = new ResourceWriter(fhirContext, job, resourceType, operationsConfig);\n+        final Flowable<JobQueueBatchFile> resourceFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, writer, resourceCount, sequenceCount, resourceMeter));\n+\n+        // Batch the error resources into files\n+        final var errorResourceCount = new AtomicInteger();\n+        final var errorSequenceCount = new AtomicInteger();\n+        job.getJobQueueFileLatest(ResourceType.OperationOutcome).ifPresent(file -> {\n+            errorResourceCount.set(file.getCount());\n+            errorSequenceCount.set(file.getSequence());\n+        });\n+        final var errorWriter = new ResourceWriter(fhirContext, job, ResourceType.OperationOutcome, operationsConfig);\n+        final Flowable<JobQueueBatchFile> outcomeFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, errorWriter, errorResourceCount, errorSequenceCount, operationalOutcomeMeter));\n+\n+        // Merge the resultant flows\n+        return resourceFlow.mergeWith(outcomeFlow);\n+    }\n+\n+    /**\n+     * This part of the flow chain buffers resources and writes them in batches to a file\n+     *\n+     * @param writer        - the writer to use\n+     * @param resourceCount - the number of resources in the current file\n+     * @param sequenceCount - the sequence counter\n+     * @param meter         - a meter on the number of resources\n+     * @return a transformed flow\n+     */\n+    private Publisher<JobQueueBatchFile> bufferAndWrite(Flowable<Resource> upstream, ResourceWriter writer, AtomicInteger resourceCount, AtomicInteger sequenceCount, Meter meter) {", "originalCommit": "a1b067d106d534305eed89f45bb525ad8e5613cf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9bd1e4e2f2065017ed7e07deeca106c003b1ebd6", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java\nindex 43201fcb..f71f904e 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/JobBatchProcessor.java\n\n@@ -77,7 +77,7 @@ public class JobBatchProcessor {\n             sequenceCount.set(file.getSequence());\n         });\n         final var writer = new ResourceWriter(fhirContext, job, resourceType, operationsConfig);\n-        final Flowable<JobQueueBatchFile> resourceFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, writer, resourceCount, sequenceCount, resourceMeter));\n+        final Flowable<JobQueueBatchFile> resourceFlow = connectableMixedFlow.compose((upstream) -> bufferAndWrite(upstream, writer, resourceCount, sequenceCount));\n \n         // Batch the error resources into files\n         final var errorResourceCount = new AtomicInteger();\n"}}, {"oid": "9bd1e4e2f2065017ed7e07deeca106c003b1ebd6", "url": "https://github.com/CMSgov/dpc-app/commit/9bd1e4e2f2065017ed7e07deeca106c003b1ebd6", "message": "code climate please be happy", "committedDate": "2020-04-19T22:10:20Z", "type": "commit"}, {"oid": "f15e65023d8ac628d5d8b8dad76beb125f9f6ede", "url": "https://github.com/CMSgov/dpc-app/commit/f15e65023d8ac628d5d8b8dad76beb125f9f6ede", "message": "Merge branch 'master' into DPC-25-Lookback-alternative", "committedDate": "2020-04-20T06:18:27Z", "type": "commit"}, {"oid": "7613f359e03d237ff61d0857e53271fcd776bf88", "url": "https://github.com/CMSgov/dpc-app/commit/7613f359e03d237ff61d0857e53271fcd776bf88", "message": "add java docs", "committedDate": "2020-04-20T15:32:51Z", "type": "commit"}, {"oid": "c28dc2abfd3edba29bd829d7c2cde3b5eabb1969", "url": "https://github.com/CMSgov/dpc-app/commit/c28dc2abfd3edba29bd829d7c2cde3b5eabb1969", "message": "Merge remote-tracking branch 'origin/DPC-25-Lookback-alternative' into DPC-25-Lookback-alternative", "committedDate": "2020-04-20T15:33:01Z", "type": "commit"}, {"oid": "62680c53cdb8c4d60269b1daaff90d36ce6e874e", "url": "https://github.com/CMSgov/dpc-app/commit/62680c53cdb8c4d60269b1daaff90d36ce6e874e", "message": "Merge branch 'master' into DPC-25-Lookback-alternative\n\n# Conflicts:\n#\tdpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java\n#\tdpc-aggregation/src/test/java/gov/cms/dpc/aggregation/engine/AggregationEngineTest.java\n#\tdpc-aggregation/src/test/java/gov/cms/dpc/aggregation/health/AggregationEngineHealthCheckTest.java\n#\tsrc/test/EndToEndRequestTest.postman_collection.json", "committedDate": "2020-04-24T01:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4NzkyNw==", "url": "https://github.com/CMSgov/dpc-app/pull/753#discussion_r414287927", "bodyText": "If we know for sure the ID is a rosterID, do we need to go to the trouble of using an ambiguousID parameter to getProviderIDFromRoster()?  Why not call it rosterID?", "author": "dhgreene", "createdAt": "2020-04-24T04:41:54Z", "path": "dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java", "diffHunk": "@@ -195,12 +177,38 @@ protected void processJobBatch(JobQueueBatch job) {\n         }\n     }\n \n+    private Optional<String> processPatient(JobQueueBatch job, String patientId) {\n+        if (isValidLookBack(job, patientId)) {\n+            jobBatchProcessor.processJobBatchPartial(aggregatorID, queue, job, patientId);\n+        }\n+        // Stop processing when no patients or early shutdown\n+        return this.isRunning() ? job.fetchNextPatient(aggregatorID) : Optional.empty();\n+    }\n+\n+    private boolean isValidLookBack(JobQueueBatch job, String patientId) {\n+        boolean result = false;\n+        //job.getProviderID is really not providerID, it is the rosterID, see createJob in GroupResource export for confirmation", "originalCommit": "62680c53cdb8c4d60269b1daaff90d36ce6e874e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47ee4e99dd2d55f357663ca670a4acc560cd1c9f", "chunk": "diff --git a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java\nindex 16800674..ec1b1ce6 100644\n--- a/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java\n+++ b/dpc-aggregation/src/main/java/gov/cms/dpc/aggregation/engine/AggregationEngine.java\n\n@@ -191,7 +191,7 @@ public class AggregationEngine implements Runnable {\n         //patientId here is the patient MBI\n         final UUID providerID = lookBackService.getProviderIDFromRoster(job.getOrgID(), job.getProviderID(), patientId);\n         if (providerID != null) {\n-            Pair<Flowable<List<Resource>>, ResourceType> pair = jobBatchProcessor.fetchResource(job, patientId, ResourceType.ExplanationOfBenefit);\n+            Pair<Flowable<List<Resource>>, ResourceType> pair = jobBatchProcessor.fetchResource(job, patientId, ResourceType.ExplanationOfBenefit, null);\n             Boolean hasClaims = pair.getLeft()\n                     .flatMap(Flowable::fromIterable)\n                     .filter(resource -> pair.getRight() == resource.getResourceType())\n"}}, {"oid": "55f7661f6299b6614e885cb2c14aa02a66d417c6", "url": "https://github.com/CMSgov/dpc-app/commit/55f7661f6299b6614e885cb2c14aa02a66d417c6", "message": "rename variable and method to be clearer on what IDs it's operating on", "committedDate": "2020-04-24T17:36:38Z", "type": "commit"}, {"oid": "e6ae8149a93c555a2b5504538c016d4cbdf9ee3e", "url": "https://github.com/CMSgov/dpc-app/commit/e6ae8149a93c555a2b5504538c016d4cbdf9ee3e", "message": "add mechanism to skip look back", "committedDate": "2020-04-24T17:36:53Z", "type": "commit"}, {"oid": "47ee4e99dd2d55f357663ca670a4acc560cd1c9f", "url": "https://github.com/CMSgov/dpc-app/commit/47ee4e99dd2d55f357663ca670a4acc560cd1c9f", "message": "look back should not be limited by since date", "committedDate": "2020-04-27T01:03:20Z", "type": "commit"}, {"oid": "12ec1aed424a3caeaced182835e73bdc0f617f7c", "url": "https://github.com/CMSgov/dpc-app/commit/12ec1aed424a3caeaced182835e73bdc0f617f7c", "message": "disable lookback for prod-sbx, test, dev", "committedDate": "2020-04-29T04:40:00Z", "type": "commit"}, {"oid": "dba1f9dfac6c8c22b4cf76d202520564be993fed", "url": "https://github.com/CMSgov/dpc-app/commit/dba1f9dfac6c8c22b4cf76d202520564be993fed", "message": "Merge branch 'master' into DPC-25-Lookback-alternative", "committedDate": "2020-04-30T06:48:03Z", "type": "commit"}, {"oid": "68506c3b1ee1c35f4be1128281c1474218da4de2", "url": "https://github.com/CMSgov/dpc-app/commit/68506c3b1ee1c35f4be1128281c1474218da4de2", "message": "Merge branch 'master' into DPC-25-Lookback-alternative", "committedDate": "2020-04-30T15:35:31Z", "type": "commit"}, {"oid": "cb4d0d0f95bf9a1fd36424b22742e207f558a124", "url": "https://github.com/CMSgov/dpc-app/commit/cb4d0d0f95bf9a1fd36424b22742e207f558a124", "message": "move test to appropriate package and rename test", "committedDate": "2020-04-30T15:51:27Z", "type": "commit"}, {"oid": "abc50d4d327f5ae836239ab69767f5037ddd9e49", "url": "https://github.com/CMSgov/dpc-app/commit/abc50d4d327f5ae836239ab69767f5037ddd9e49", "message": "Create test for EveryoneGetsDataLookBackServiceImpl", "committedDate": "2020-04-30T15:51:41Z", "type": "commit"}, {"oid": "33ef342447029b3f538e535a6cb3949c854653fc", "url": "https://github.com/CMSgov/dpc-app/commit/33ef342447029b3f538e535a6cb3949c854653fc", "message": "Merge branch 'DPC-25-Lookback-alternative' of https://github.com/CMSgov/dpc-app into DPC-25-Lookback-alternative", "committedDate": "2020-04-30T15:56:13Z", "type": "commit"}, {"oid": "fcb38b1d51b79b705e23f3228f97e83646ad8daa", "url": "https://github.com/CMSgov/dpc-app/commit/fcb38b1d51b79b705e23f3228f97e83646ad8daa", "message": "Merge branch 'master' into DPC-25-Lookback-alternative", "committedDate": "2020-04-30T19:55:29Z", "type": "commit"}]}