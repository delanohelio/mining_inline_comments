{"pr_number": 453, "pr_title": "Improve unit test coverage of tenant/provider-related code", "pr_createdAt": "2020-07-14T18:48:38Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/453", "timeline": [{"oid": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "url": "https://github.com/firebase/firebase-admin-java/commit/8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "message": "Improve unit test coverage.", "committedDate": "2020-07-14T18:43:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzQ1MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454657451", "bodyText": "It might be easier to build this structure with Maps and Lists and then serialize that into JSON.\nImmutableMap.of(\"tenants\", ImmutableList.of(\n  ImmutableMap.of(\"name\", \"projects/project-id/resource/TENANT_1\"),\n  // other entries\n));", "author": "hiranya911", "createdAt": "2020-07-14T21:30:53Z", "path": "src/test/java/com/google/firebase/auth/internal/ListTenantsResponseTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.multitenancy.Tenant;\n+\n+import org.junit.Test;\n+\n+public class ListTenantsResponseTest {\n+\n+  @Test\n+  public void testDefaultValues() throws Exception {\n+    ListTenantsResponse response = new ListTenantsResponse();\n+\n+    assertEquals(0, response.getTenants().size());\n+    assertFalse(response.hasTenants());\n+    assertEquals(\"\", response.getPageToken());\n+  }\n+\n+  @Test\n+  public void testEmptyTenantList() throws Exception {\n+    ListTenantsResponse response =\n+        new ListTenantsResponse(ImmutableList.<Tenant>of(), \"PAGE_TOKEN\");\n+\n+    assertEquals(0, response.getTenants().size());\n+    assertFalse(response.hasTenants());\n+  }\n+\n+  @Test\n+  public void testDeserialization() throws Exception {\n+    String singleQuotedJson = \"{\"", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDY3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360675", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-07-15T21:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "db503375032530f50ab7e10d00f50a467e131659", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/internal/ListTenantsResponseTest.java b/src/test/java/com/google/firebase/auth/internal/ListTenantsResponseTest.java\nindex cd6a9e5..7d65966 100644\n--- a/src/test/java/com/google/firebase/auth/internal/ListTenantsResponseTest.java\n+++ b/src/test/java/com/google/firebase/auth/internal/ListTenantsResponseTest.java\n\n@@ -21,13 +21,17 @@ import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.firebase.auth.multitenancy.Tenant;\n \n import org.junit.Test;\n \n public class ListTenantsResponseTest {\n \n+  private static final JsonFactory JSON_FACTORY = Utils.getDefaultJsonFactory();\n+\n   @Test\n   public void testDefaultValues() throws Exception {\n     ListTenantsResponse response = new ListTenantsResponse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODI0OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454658248", "bodyText": "Same here. Build Map/List structure and serialize using Utils.getDefaultJsonFactory().", "author": "hiranya911", "createdAt": "2020-07-14T21:32:42Z", "path": "src/test/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponseTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.SamlProviderConfig;\n+\n+import org.junit.Test;\n+\n+public class ListSamlProviderConfigsResponseTest {\n+\n+  @Test\n+  public void testDefaultValues() throws Exception {\n+    ListSamlProviderConfigsResponse response = new ListSamlProviderConfigsResponse();\n+\n+    assertEquals(0, response.getProviderConfigs().size());\n+    assertFalse(response.hasProviderConfigs());\n+    assertEquals(\"\", response.getPageToken());\n+  }\n+\n+  @Test\n+  public void testEmptyTenantList() throws Exception {\n+    ListSamlProviderConfigsResponse response =\n+        new ListSamlProviderConfigsResponse(ImmutableList.<SamlProviderConfig>of(), \"PAGE_TOKEN\");\n+\n+    assertEquals(0, response.getProviderConfigs().size());\n+    assertFalse(response.hasProviderConfigs());\n+  }\n+\n+  @Test\n+  public void testDeserialization() throws Exception {\n+    String singleQuotedJson = \"{\"", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDc3MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360770", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-07-15T21:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "db503375032530f50ab7e10d00f50a467e131659", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponseTest.java b/src/test/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponseTest.java\nindex cfedb16..6950fe3 100644\n--- a/src/test/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponseTest.java\n+++ b/src/test/java/com/google/firebase/auth/internal/ListSamlProviderConfigsResponseTest.java\n\n@@ -21,13 +21,17 @@ import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.firebase.auth.SamlProviderConfig;\n \n import org.junit.Test;\n \n public class ListSamlProviderConfigsResponseTest {\n \n+  private static final JsonFactory JSON_FACTORY = Utils.getDefaultJsonFactory();\n+\n   @Test\n   public void testDefaultValues() throws Exception {\n     ListSamlProviderConfigsResponse response = new ListSamlProviderConfigsResponse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODMyNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454658326", "bodyText": "Here too.", "author": "hiranya911", "createdAt": "2020-07-14T21:32:50Z", "path": "src/test/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponseTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.OidcProviderConfig;\n+\n+import org.junit.Test;\n+\n+public class ListOidcProviderConfigsResponseTest {\n+\n+  @Test\n+  public void testDefaultValues() throws Exception {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse();\n+\n+    assertEquals(0, response.getProviderConfigs().size());\n+    assertFalse(response.hasProviderConfigs());\n+    assertEquals(\"\", response.getPageToken());\n+  }\n+\n+  @Test\n+  public void testEmptyTenantList() throws Exception {\n+    ListOidcProviderConfigsResponse response =\n+        new ListOidcProviderConfigsResponse(ImmutableList.<OidcProviderConfig>of(), \"PAGE_TOKEN\");\n+\n+    assertEquals(0, response.getProviderConfigs().size());\n+    assertFalse(response.hasProviderConfigs());\n+  }\n+\n+  @Test\n+  public void testDeserialization() throws Exception {\n+    String singleQuotedJson = \"{\"", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDczMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360732", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-07-15T21:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "db503375032530f50ab7e10d00f50a467e131659", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponseTest.java b/src/test/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponseTest.java\nindex b0c3089..fbe587e 100644\n--- a/src/test/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponseTest.java\n+++ b/src/test/java/com/google/firebase/auth/internal/ListOidcProviderConfigsResponseTest.java\n\n@@ -21,13 +21,17 @@ import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import com.google.firebase.auth.OidcProviderConfig;\n \n import org.junit.Test;\n \n public class ListOidcProviderConfigsResponseTest {\n \n+  private static final JsonFactory JSON_FACTORY = Utils.getDefaultJsonFactory();\n+\n   @Test\n   public void testDefaultValues() throws Exception {\n     ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODcyOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454658728", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-07-14T21:33:39Z", "path": "src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.ListOidcProviderConfigsResponse;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.junit.Test;\n+\n+public class ListProviderConfigsPageTest {\n+\n+  @Test\n+  public void testSinglePage() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+\n+    ImmutableList<OidcProviderConfig> providerConfigs = ImmutableList.copyOf(page.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i).getProviderId());\n+    }\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testMultiplePages() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page1 =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertTrue(page1.hasNextPage());\n+    assertEquals(\"token\", page1.getNextPageToken());\n+    ImmutableList<OidcProviderConfig> providerConfigs = ImmutableList.copyOf(page1.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i).getProviderId());\n+    }\n+\n+    response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-3\"),\n+          newOidcProviderConfig(\"oidc.provider-id-4\"),\n+          newOidcProviderConfig(\"oidc.provider-id-5\")),\n+        ListProviderConfigsPage.END_OF_LIST);\n+    source.response = response;\n+    ListProviderConfigsPage<OidcProviderConfig> page2 = page1.getNextPage();\n+    assertFalse(page2.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page2.getNextPageToken());\n+    providerConfigs = ImmutableList.copyOf(page2.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 3; i < 6; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i - 3).getProviderId());\n+    }\n+\n+    assertEquals(2, source.calls.size());\n+    assertNull(source.calls.get(0));\n+    assertEquals(\"token\", source.calls.get(1));\n+\n+    // Should iterate all provider configs from both pages\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : page1.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(6, iterations);\n+    assertEquals(3, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(2));\n+\n+    // Should only iterate provider configs in the last page\n+    iterations = 0;\n+    for (OidcProviderConfig providerConfig : page2.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(3, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsIterable() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterable<OidcProviderConfig> providerConfigs = page.iterateAll();\n+\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : providerConfigs) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    // Should result in a new iterator\n+    iterations = 0;\n+    for (OidcProviderConfig providerConfig : providerConfigs) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsIterator() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterable<OidcProviderConfig> providerConfigs = page.iterateAll();\n+    Iterator<OidcProviderConfig> iterator = providerConfigs.iterator();\n+    int iterations = 0;\n+    while (iterator.hasNext()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, iterator.next().getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    while (iterator.hasNext()) {\n+      fail(\"Should not be able to to iterate any more\");\n+    }\n+    try {\n+      iterator.next();\n+      fail(\"Should not be able to iterate any more\");\n+    } catch (NoSuchElementException expected) {\n+      // expected\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsPagedIterable() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        response = new ListOidcProviderConfigsResponse(\n+            ImmutableList.of(\n+              newOidcProviderConfig(\"oidc.provider-id-3\"),\n+              newOidcProviderConfig(\"oidc.provider-id-4\"),\n+              newOidcProviderConfig(\"oidc.provider-id-5\")),\n+            ListProviderConfigsPage.END_OF_LIST);\n+        source.response = response;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1));\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsPagedIterator() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> providerConfigs = page.iterateAll().iterator();\n+    int iterations = 0;\n+    while (providerConfigs.hasNext()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfigs.next().getProviderId());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        response = new ListOidcProviderConfigsResponse(\n+            ImmutableList.of(\n+              newOidcProviderConfig(\"oidc.provider-id-3\"),\n+              newOidcProviderConfig(\"oidc.provider-id-4\"),\n+              newOidcProviderConfig(\"oidc.provider-id-5\")),\n+            ListProviderConfigsPage.END_OF_LIST);\n+        source.response = response;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1));\n+    assertFalse(providerConfigs.hasNext());\n+    try {\n+      providerConfigs.next();\n+    } catch (NoSuchElementException e) {\n+      // expected\n+    }\n+  }\n+\n+  @Test\n+  public void testPageWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+    assertEquals(0, ImmutableList.copyOf(page.getValues()).size());\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIterableWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+      fail(\"Should not be able to iterate, but got: \" + providerConfig);\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIteratorWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> iterator = page.iterateAll().iterator();\n+    while (iterator.hasNext()) {\n+      fail(\"Should not be able to iterate\");\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testRemove() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(newOidcProviderConfig(\"oidc.provider-id-1\")),\n+        ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> iterator = page.iterateAll().iterator();\n+    while (iterator.hasNext()) {\n+      assertNotNull(iterator.next());\n+      try {\n+        iterator.remove();\n+      } catch (UnsupportedOperationException expected) {\n+        // expected\n+      }\n+    }\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testNullSource() {\n+    new ListProviderConfigsPage.Factory<OidcProviderConfig>(null);\n+  }\n+\n+  @Test\n+  public void testInvalidPageToken() throws IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(1);\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 1000, \"\");\n+      fail(\"No error thrown for empty page token\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+  }\n+\n+  @Test\n+  public void testInvalidMaxResults() throws IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(1);\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 1001, \"\");\n+      fail(\"No error thrown for maxResult > 1000\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 0, \"next\");\n+      fail(\"No error thrown for maxResult = 0\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, -1, \"next\");\n+      fail(\"No error thrown for maxResult < 0\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+  }\n+\n+  private static OidcProviderConfig newOidcProviderConfig(String providerConfigId)\n+      throws IOException {\n+    return Utils.getDefaultJsonFactory().fromString(\n+        String.format(\"{\\\"name\\\":\\\"%s\\\"}\", providerConfigId), OidcProviderConfig.class);\n+  }\n+\n+  private static class TestProviderConfigSource\n+      implements ListProviderConfigsPage.ProviderConfigSource<OidcProviderConfig> {\n+\n+    private ListOidcProviderConfigsResponse response;\n+    private List<String> calls = new ArrayList<>();", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDg5Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360897", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-07-15T21:24:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODcyOA=="}], "type": "inlineReview", "revised_code": {"commit": "db503375032530f50ab7e10d00f50a467e131659", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java b/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\nindex 7031249..ba08f9c 100644\n--- a/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\n+++ b/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\n\n@@ -352,7 +352,7 @@ public class ListProviderConfigsPageTest {\n       implements ListProviderConfigsPage.ProviderConfigSource<OidcProviderConfig> {\n \n     private ListOidcProviderConfigsResponse response;\n-    private List<String> calls = new ArrayList<>();\n+    private final List<String> calls = new ArrayList<>();\n \n     TestProviderConfigSource(int providerConfigCount) throws IOException {\n       ImmutableList.Builder<OidcProviderConfig> providerConfigs = ImmutableList.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODkwNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454658907", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-07-14T21:34:01Z", "path": "src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.ListOidcProviderConfigsResponse;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.junit.Test;\n+\n+public class ListProviderConfigsPageTest {\n+\n+  @Test\n+  public void testSinglePage() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+\n+    ImmutableList<OidcProviderConfig> providerConfigs = ImmutableList.copyOf(page.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i).getProviderId());\n+    }\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testMultiplePages() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page1 =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertTrue(page1.hasNextPage());\n+    assertEquals(\"token\", page1.getNextPageToken());\n+    ImmutableList<OidcProviderConfig> providerConfigs = ImmutableList.copyOf(page1.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i).getProviderId());\n+    }\n+\n+    response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-3\"),\n+          newOidcProviderConfig(\"oidc.provider-id-4\"),\n+          newOidcProviderConfig(\"oidc.provider-id-5\")),\n+        ListProviderConfigsPage.END_OF_LIST);\n+    source.response = response;\n+    ListProviderConfigsPage<OidcProviderConfig> page2 = page1.getNextPage();\n+    assertFalse(page2.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page2.getNextPageToken());\n+    providerConfigs = ImmutableList.copyOf(page2.getValues());\n+    assertEquals(3, providerConfigs.size());\n+    for (int i = 3; i < 6; i++) {\n+      assertEquals(\"oidc.provider-id-\" + i, providerConfigs.get(i - 3).getProviderId());\n+    }\n+\n+    assertEquals(2, source.calls.size());\n+    assertNull(source.calls.get(0));\n+    assertEquals(\"token\", source.calls.get(1));\n+\n+    // Should iterate all provider configs from both pages\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : page1.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(6, iterations);\n+    assertEquals(3, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(2));\n+\n+    // Should only iterate provider configs in the last page\n+    iterations = 0;\n+    for (OidcProviderConfig providerConfig : page2.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(3, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsIterable() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterable<OidcProviderConfig> providerConfigs = page.iterateAll();\n+\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : providerConfigs) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    // Should result in a new iterator\n+    iterations = 0;\n+    for (OidcProviderConfig providerConfig : providerConfigs) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsIterator() throws FirebaseAuthException, IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(3);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterable<OidcProviderConfig> providerConfigs = page.iterateAll();\n+    Iterator<OidcProviderConfig> iterator = providerConfigs.iterator();\n+    int iterations = 0;\n+    while (iterator.hasNext()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, iterator.next().getProviderId());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    while (iterator.hasNext()) {\n+      fail(\"Should not be able to to iterate any more\");\n+    }\n+    try {\n+      iterator.next();\n+      fail(\"Should not be able to iterate any more\");\n+    } catch (NoSuchElementException expected) {\n+      // expected\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsPagedIterable() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    int iterations = 0;\n+    for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfig.getProviderId());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        response = new ListOidcProviderConfigsResponse(\n+            ImmutableList.of(\n+              newOidcProviderConfig(\"oidc.provider-id-3\"),\n+              newOidcProviderConfig(\"oidc.provider-id-4\"),\n+              newOidcProviderConfig(\"oidc.provider-id-5\")),\n+            ListProviderConfigsPage.END_OF_LIST);\n+        source.response = response;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1));\n+  }\n+\n+  @Test\n+  public void testListProviderConfigsPagedIterator() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(\n+          newOidcProviderConfig(\"oidc.provider-id-0\"),\n+          newOidcProviderConfig(\"oidc.provider-id-1\"),\n+          newOidcProviderConfig(\"oidc.provider-id-2\")),\n+        \"token\");\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> providerConfigs = page.iterateAll().iterator();\n+    int iterations = 0;\n+    while (providerConfigs.hasNext()) {\n+      assertEquals(\"oidc.provider-id-\" + iterations, providerConfigs.next().getProviderId());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        response = new ListOidcProviderConfigsResponse(\n+            ImmutableList.of(\n+              newOidcProviderConfig(\"oidc.provider-id-3\"),\n+              newOidcProviderConfig(\"oidc.provider-id-4\"),\n+              newOidcProviderConfig(\"oidc.provider-id-5\")),\n+            ListProviderConfigsPage.END_OF_LIST);\n+        source.response = response;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1));\n+    assertFalse(providerConfigs.hasNext());\n+    try {\n+      providerConfigs.next();\n+    } catch (NoSuchElementException e) {\n+      // expected\n+    }\n+  }\n+\n+  @Test\n+  public void testPageWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListProviderConfigsPage.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+    assertEquals(0, ImmutableList.copyOf(page.getValues()).size());\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIterableWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    for (OidcProviderConfig providerConfig : page.iterateAll()) {\n+      fail(\"Should not be able to iterate, but got: \" + providerConfig);\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIteratorWithNoproviderConfigs() throws FirebaseAuthException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.<OidcProviderConfig>of(), ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> iterator = page.iterateAll().iterator();\n+    while (iterator.hasNext()) {\n+      fail(\"Should not be able to iterate\");\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testRemove() throws FirebaseAuthException, IOException {\n+    ListOidcProviderConfigsResponse response = new ListOidcProviderConfigsResponse(\n+        ImmutableList.of(newOidcProviderConfig(\"oidc.provider-id-1\")),\n+        ListProviderConfigsPage.END_OF_LIST);\n+    TestProviderConfigSource source = new TestProviderConfigSource(response);\n+\n+    ListProviderConfigsPage<OidcProviderConfig> page =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source).create();\n+    Iterator<OidcProviderConfig> iterator = page.iterateAll().iterator();\n+    while (iterator.hasNext()) {\n+      assertNotNull(iterator.next());\n+      try {\n+        iterator.remove();\n+      } catch (UnsupportedOperationException expected) {\n+        // expected\n+      }\n+    }\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testNullSource() {\n+    new ListProviderConfigsPage.Factory<OidcProviderConfig>(null);\n+  }\n+\n+  @Test\n+  public void testInvalidPageToken() throws IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(1);\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 1000, \"\");\n+      fail(\"No error thrown for empty page token\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+  }\n+\n+  @Test\n+  public void testInvalidMaxResults() throws IOException {\n+    TestProviderConfigSource source = new TestProviderConfigSource(1);\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 1001, \"\");\n+      fail(\"No error thrown for maxResult > 1000\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, 0, \"next\");\n+      fail(\"No error thrown for maxResult = 0\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+\n+    try {\n+      new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, -1, \"next\");\n+      fail(\"No error thrown for maxResult < 0\");\n+    } catch (IllegalArgumentException expected) {\n+      // expected\n+    }\n+  }\n+\n+  private static OidcProviderConfig newOidcProviderConfig(String providerConfigId)\n+      throws IOException {\n+    return Utils.getDefaultJsonFactory().fromString(\n+        String.format(\"{\\\"name\\\":\\\"%s\\\"}\", providerConfigId), OidcProviderConfig.class);\n+  }\n+\n+  private static class TestProviderConfigSource\n+      implements ListProviderConfigsPage.ProviderConfigSource<OidcProviderConfig> {\n+\n+    private ListOidcProviderConfigsResponse response;", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDgyMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360820", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-07-15T21:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1ODkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "db503375032530f50ab7e10d00f50a467e131659", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java b/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\nindex 7031249..ba08f9c 100644\n--- a/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\n+++ b/src/test/java/com/google/firebase/auth/ListProviderConfigsPageTest.java\n\n@@ -352,7 +352,7 @@ public class ListProviderConfigsPageTest {\n       implements ListProviderConfigsPage.ProviderConfigSource<OidcProviderConfig> {\n \n     private ListOidcProviderConfigsResponse response;\n-    private List<String> calls = new ArrayList<>();\n+    private final List<String> calls = new ArrayList<>();\n \n     TestProviderConfigSource(int providerConfigCount) throws IOException {\n       ImmutableList.Builder<OidcProviderConfig> providerConfigs = ImmutableList.builder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDg0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r454660843", "bodyText": "Can you use GenericJson here instead of Map<String, Object>? If possible, that might clean up lot of the generic warnings that result from these casts.", "author": "hiranya911", "createdAt": "2020-07-14T21:38:02Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1846,6 +1956,53 @@ public void testCreateSamlProvider() throws Exception {\n     assertEquals(\"https://projectId.firebaseapp.com/__/auth/handler\", spConfig.get(\"callbackUri\"));\n   }\n \n+  @Test\n+  public void testCreateSamlProviderAsync() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config =\n+        FirebaseAuth.getInstance().createSamlProviderConfigAsync(createRequest).get();\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "originalCommit": "8d05bcf3178b337f4e1c234fbccfe48dc00cd52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDIzNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/453#discussion_r455360235", "bodyText": "I think you've suggested the same thing before, but when I try to cast to GenericJson I get compile errors:\n\tat com.google.firebase.auth.FirebaseUserManagerTest.testCreateSamlProviderAsync(FirebaseUserManagerTest.java:1988)```", "author": "micahstairs", "createdAt": "2020-07-15T21:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2MDg0Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "db503375032530f50ab7e10d00f50a467e131659", "url": "https://github.com/firebase/firebase-admin-java/commit/db503375032530f50ab7e10d00f50a467e131659", "message": "Address pull request feedback", "committedDate": "2020-07-15T21:23:55Z", "type": "commit"}]}