{"pr_number": 490, "pr_title": "Add Remote Config Parameter Group type", "pr_createdAt": "2020-10-28T19:35:35Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/490", "timeline": [{"oid": "19c63949172a485e7492cea0bf0965a5977956af", "url": "https://github.com/firebase/firebase-admin-java/commit/19c63949172a485e7492cea0bf0965a5977956af", "message": "Introduce Parameter Groups", "committedDate": "2020-10-27T22:32:53Z", "type": "commit"}, {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918", "url": "https://github.com/firebase/firebase-admin-java/commit/acafdf890b46bd30eb324f001a6a3f0645409918", "message": "Refactor unit tests", "committedDate": "2020-10-28T19:40:37Z", "type": "commit"}, {"oid": "acafdf890b46bd30eb324f001a6a3f0645409918", "url": "https://github.com/firebase/firebase-admin-java/commit/acafdf890b46bd30eb324f001a6a3f0645409918", "message": "Refactor unit tests", "committedDate": "2020-10-28T19:40:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDM1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513730358", "bodyText": "Does this work on collections like maps?", "author": "hiranya911", "createdAt": "2020-10-28T20:11:43Z", "path": "src/main/java/com/google/firebase/remoteconfig/ParameterGroup.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterGroupResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a Remote Config parameter group that can be included in a {@link Template}.\n+ * Grouping parameters is only for management purposes and does not affect client-side\n+ * fetching of parameter values.\n+ */\n+public final class ParameterGroup {\n+\n+  private String description;\n+  private Map<String, Parameter> parameters;\n+\n+  /**\n+   * Creates a new {@link ParameterGroup}.\n+   */\n+  public ParameterGroup() {\n+    parameters = new HashMap<>();\n+  }\n+\n+  ParameterGroup(@NonNull ParameterGroupResponse parameterGroupResponse) {\n+    checkNotNull(parameterGroupResponse);\n+    this.parameters = new HashMap<>();\n+    if (parameterGroupResponse.getParameters() != null) {\n+      for (Map.Entry<String, TemplateResponse.ParameterResponse> entry\n+              : parameterGroupResponse.getParameters().entrySet()) {\n+        this.parameters.put(entry.getKey(), new Parameter(entry.getValue()));\n+      }\n+    }\n+    this.description = parameterGroupResponse.getDescription();\n+  }\n+\n+  /**\n+   * Gets the description of the parameter group.\n+   *\n+   * @return The description of the parameter or null.\n+   */\n+  @Nullable\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the map of parameters that belong to this group.\n+   *\n+   * @return A non-null map of parameter keys to their optional default values and optional\n+   *     conditional values.\n+   */\n+  @NonNull\n+  public Map<String, Parameter> getParameters() {\n+    return parameters;\n+  }\n+\n+  /**\n+   * Sets the description of the parameter group.\n+   * Should not be over 256 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter group.\n+   * @return This {@link ParameterGroup}.\n+   */\n+  public ParameterGroup setDescription(@Nullable String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the map of parameters that belong to this group.\n+   *\n+   * <p>A parameter only appears once per Remote Config template.\n+   * An ungrouped parameter appears at the top level, whereas a\n+   * parameter organized within a group appears within its group's map of parameters.\n+   *\n+   * @param parameters A non-null map of parameter keys to their optional default values and\n+   *                   optional conditional values.\n+   * @return This {@link ParameterGroup} instance.\n+   */\n+  public ParameterGroup setParameters(\n+          @NonNull Map<String, Parameter> parameters) {\n+    checkNotNull(parameters, \"parameters must not be null.\");\n+    this.parameters = parameters;\n+    return this;\n+  }\n+\n+  ParameterGroupResponse toParameterGroupResponse() {\n+    Map<String, ParameterResponse> parameterResponses = new HashMap<>();\n+    for (Map.Entry<String, Parameter> entry : this.parameters.entrySet()) {\n+      parameterResponses.put(entry.getKey(), entry.getValue().toParameterResponse());\n+    }\n+    return new ParameterGroupResponse()\n+            .setDescription(this.description)\n+            .setParameters(parameterResponses);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    ParameterGroup that = (ParameterGroup) o;\n+    return Objects.equals(description, that.description)\n+            && Objects.equals(parameters, that.parameters);", "originalCommit": "acafdf890b46bd30eb324f001a6a3f0645409918", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMTY2Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514421666", "bodyText": "Yes, it seems to be working fine on maps. Objects.equals(o1, o2) will end up calling o1.equals(o2) and that should work fine since we have implemented equals in the custom types Parameter etc.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Map.html#equals(java.lang.Object)\nI have added test cases for equality in ParameterGroupTest.java. I can change that test to use two separate collections to make it more explicit if that helps...", "author": "lahirumaramba", "createdAt": "2020-10-29T17:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMDM1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMTk5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513731994", "bodyText": "Implement hashCode too.", "author": "hiranya911", "createdAt": "2020-10-28T20:14:42Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -132,8 +166,28 @@ TemplateResponse toTemplateResponse() {\n     for (Condition condition : this.conditions) {\n       conditionResponses.add(condition.toConditionResponse());\n     }\n+    Map<String, TemplateResponse.ParameterGroupResponse> parameterGroupResponse = new HashMap<>();\n+    for (Map.Entry<String, ParameterGroup> entry : this.parameterGroups.entrySet()) {\n+      parameterGroupResponse.put(entry.getKey(), entry.getValue().toParameterGroupResponse());\n+    }\n     return new TemplateResponse()\n             .setParameters(parameterResponses)\n-            .setConditions(conditionResponses);\n+            .setConditions(conditionResponses)\n+            .setParameterGroups(parameterGroupResponse);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "acafdf890b46bd30eb324f001a6a3f0645409918", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "635fd8484d3b1c122b31c814ea3c916d9daff8b2", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Template.java b/src/main/java/com/google/firebase/remoteconfig/Template.java\nindex 30b94a2..f54cc80 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Template.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Template.java\n\n@@ -190,4 +190,9 @@ public final class Template {\n             && Objects.equals(conditions, template.conditions)\n             && Objects.equals(parameterGroups, template.parameterGroups);\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(etag, parameters, conditions, parameterGroups);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczMjYzMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513732631", "bodyText": "Move into a separate test case: testConstructorWithColor", "author": "hiranya911", "createdAt": "2020-10-28T20:15:53Z", "path": "src/test/java/com/google/firebase/remoteconfig/ConditionTest.java", "diffHunk": "@@ -18,11 +18,61 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNull;\n \n import org.junit.Test;\n \n public class ConditionTest {\n \n+  @Test\n+  public void testConstructor() {\n+    Condition c1 = new Condition(\"ios_en_1\", \"expression1\");\n+\n+    assertEquals(\"ios_en_1\", c1.getName());\n+    assertEquals(\"expression1\", c1.getExpression());\n+    assertNull(c1.getTagColor());\n+\n+    Condition c2 = new Condition(\"ios_en_2\", \"expression2\", TagColor.BLUE);", "originalCommit": "acafdf890b46bd30eb324f001a6a3f0645409918", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "635fd8484d3b1c122b31c814ea3c916d9daff8b2", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/ConditionTest.java b/src/test/java/com/google/firebase/remoteconfig/ConditionTest.java\nindex 6b668cf..29e7aa7 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/ConditionTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/ConditionTest.java\n\n@@ -26,27 +26,30 @@ public class ConditionTest {\n \n   @Test\n   public void testConstructor() {\n-    Condition c1 = new Condition(\"ios_en_1\", \"expression1\");\n+    Condition c = new Condition(\"ios_en_1\", \"expression1\");\n \n-    assertEquals(\"ios_en_1\", c1.getName());\n-    assertEquals(\"expression1\", c1.getExpression());\n-    assertNull(c1.getTagColor());\n+    assertEquals(\"ios_en_1\", c.getName());\n+    assertEquals(\"expression1\", c.getExpression());\n+    assertNull(c.getTagColor());\n+  }\n \n-    Condition c2 = new Condition(\"ios_en_2\", \"expression2\", TagColor.BLUE);\n+  @Test\n+  public void testConstructorWithColor() {\n+    Condition c = new Condition(\"ios_en_2\", \"expression2\", TagColor.BLUE);\n \n-    assertEquals(\"ios_en_2\", c2.getName());\n-    assertEquals(\"expression2\", c2.getExpression());\n-    assertEquals(TagColor.BLUE, c2.getTagColor());\n+    assertEquals(\"ios_en_2\", c.getName());\n+    assertEquals(\"expression2\", c.getExpression());\n+    assertEquals(TagColor.BLUE, c.getTagColor());\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n   public void testIllegalConstructor() {\n-    Condition c = new Condition(null, null);\n+    new Condition(null, null);\n   }\n \n   @Test(expected = NullPointerException.class)\n   public void testConstructorWithNullConditionResponse() {\n-    Condition c = new Condition(null);\n+    new Condition(null);\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNDA4Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513734083", "bodyText": "Just new Parameter(null) without the assignment", "author": "hiranya911", "createdAt": "2020-10-28T20:18:37Z", "path": "src/test/java/com/google/firebase/remoteconfig/ParameterTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class ParameterTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    final Parameter p = new Parameter();\n+    assertNotNull(p.getConditionalValues());\n+    assertEquals(0, p.getConditionalValues().size());\n+    assertNull(p.getDefaultValue());\n+    assertNull(p.getDescription());\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void testConstructorWithNullParameterResponse() {\n+    Parameter p = new Parameter(null);", "originalCommit": "acafdf890b46bd30eb324f001a6a3f0645409918", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNTUwMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514425500", "bodyText": "Good catch! Thanks!\nUpdated.", "author": "lahirumaramba", "createdAt": "2020-10-29T17:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNDA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "635fd8484d3b1c122b31c814ea3c916d9daff8b2", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/ParameterTest.java b/src/test/java/com/google/firebase/remoteconfig/ParameterTest.java\nindex 2761dd6..4142762 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/ParameterTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/ParameterTest.java\n\n@@ -20,6 +20,7 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import com.google.common.collect.ImmutableMap;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTE3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r513735175", "bodyText": "assertTrue(t.getParameters().isEmpty())", "author": "hiranya911", "createdAt": "2020-10-28T20:20:39Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class TemplateTest {\n+\n+  @Test\n+  public void testConstructor() {\n+    Template t = new Template();\n+\n+    assertNotNull(t.getParameters());\n+    assertNotNull(t.getConditions());\n+    assertNotNull(t.getParameterGroups());\n+    assertEquals(0, t.getParameters().size());", "originalCommit": "acafdf890b46bd30eb324f001a6a3f0645409918", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyODA4Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/490#discussion_r514428082", "bodyText": "Good one! Updated. Thanks!", "author": "lahirumaramba", "createdAt": "2020-10-29T17:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "635fd8484d3b1c122b31c814ea3c916d9daff8b2", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\nindex 8419761..be2961e 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n\n@@ -20,11 +20,11 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"oid": "635fd8484d3b1c122b31c814ea3c916d9daff8b2", "url": "https://github.com/firebase/firebase-admin-java/commit/635fd8484d3b1c122b31c814ea3c916d9daff8b2", "message": "PR fixes", "committedDate": "2020-10-29T17:12:06Z", "type": "commit"}, {"oid": "44aa0c94dbb53cd27b50e66d1153e4a33ab1bb2b", "url": "https://github.com/firebase/firebase-admin-java/commit/44aa0c94dbb53cd27b50e66d1153e4a33ab1bb2b", "message": "Fix variable names in unit tests", "committedDate": "2020-10-29T19:07:17Z", "type": "commit"}]}