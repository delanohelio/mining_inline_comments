{"pr_number": 387, "pr_title": "Make user operations tenant-aware.", "pr_createdAt": "2020-04-07T19:27:48Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/387", "timeline": [{"oid": "000041292c28f62e67371025b3cf350006d502f8", "url": "https://github.com/firebase/firebase-admin-java/commit/000041292c28f62e67371025b3cf350006d502f8", "message": "Add tenantId() getters.", "committedDate": "2020-04-01T18:53:03Z", "type": "commit"}, {"oid": "91a051ca072320c9bc0ddde5e023144af1c80110", "url": "https://github.com/firebase/firebase-admin-java/commit/91a051ca072320c9bc0ddde5e023144af1c80110", "message": "Add skeleton of TenantAwareFirebaseAuth.", "committedDate": "2020-04-01T18:53:03Z", "type": "commit"}, {"oid": "a42ed8ea852d64eeb5b68afe124ff6fa49df8d2a", "url": "https://github.com/firebase/firebase-admin-java/commit/a42ed8ea852d64eeb5b68afe124ff6fa49df8d2a", "message": "Add (failing) integration tests for tenant-aware user operations.", "committedDate": "2020-04-01T19:48:26Z", "type": "commit"}, {"oid": "3fe54c26daf8c29fb0505912c8a460bfcaa8778e", "url": "https://github.com/firebase/firebase-admin-java/commit/3fe54c26daf8c29fb0505912c8a460bfcaa8778e", "message": "Use tenant-aware URLs when applicable.", "committedDate": "2020-04-07T15:19:38Z", "type": "commit"}, {"oid": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "url": "https://github.com/firebase/firebase-admin-java/commit/6feaa2b4b1f5198ec3f2d682325d4a558441975c", "message": "Fix integration test and add a TODO.", "committedDate": "2020-04-07T19:24:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzE1NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405063155", "bodyText": "For readability, I'd suggest defining another constructor for this class:\nFirebaseUserManager(@NonNull FirebaseApp app) {\n  this(app, null);\n}\n\nYou can call it from FirebaseAuth.", "author": "hiranya911", "createdAt": "2020-04-07T19:36:47Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,15 +115,18 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NjE5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406396194", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T18:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzE1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 8de5550..2ae4fb6 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -125,14 +125,29 @@ class FirebaseUserManager {\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl =\n-        String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+    if (tenantId == null) {\n+      this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    } else {\n+      this.userMgtBaseUrl =\n+          String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+    }\n     this.tenantMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v2\", projectId);\n     this.jsonFactory = app.getOptions().getJsonFactory();\n     HttpTransport transport = app.getOptions().getHttpTransport();\n     this.requestFactory = transport.createRequestFactory(new FirebaseRequestInitializer(app));\n   }\n \n+  /**\n+   * Creates a new FirebaseUserManager instance.\n+   *\n+   * <p>This convenience constructor is for when user operations should not be tenant-aware.\n+   *\n+   * @param app A non-null {@link FirebaseApp}.\n+   */\n+  FirebaseUserManager(@NonNull FirebaseApp app) {\n+    this(app, null);\n+  }\n+\n   @VisibleForTesting\n   void setInterceptor(HttpResponseInterceptor interceptor) {\n     this.interceptor = interceptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDAwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405064001", "bodyText": "I feel like a simple if-else will explain the logic here a bit better:\nif (Strings.isNullOrEmpty(tenantId) {\n  this.userMgtBaseUrl = ...\n} else {\n  this.userMgtBaseUrl = ...\n}\n\nThen in getTenantUrlSuffix() make tenantId non-null.", "author": "hiranya911", "createdAt": "2020-04-07T19:38:31Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,15 +115,18 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {\n     checkNotNull(app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    this.userMgtBaseUrl =", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNjMyNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406426324", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T19:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 8de5550..2ae4fb6 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -125,14 +125,29 @@ class FirebaseUserManager {\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl =\n-        String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+    if (tenantId == null) {\n+      this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    } else {\n+      this.userMgtBaseUrl =\n+          String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n+    }\n     this.tenantMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v2\", projectId);\n     this.jsonFactory = app.getOptions().getJsonFactory();\n     HttpTransport transport = app.getOptions().getHttpTransport();\n     this.requestFactory = transport.createRequestFactory(new FirebaseRequestInitializer(app));\n   }\n \n+  /**\n+   * Creates a new FirebaseUserManager instance.\n+   *\n+   * <p>This convenience constructor is for when user operations should not be tenant-aware.\n+   *\n+   * @param app A non-null {@link FirebaseApp}.\n+   */\n+  FirebaseUserManager(@NonNull FirebaseApp app) {\n+    this(app, null);\n+  }\n+\n   @VisibleForTesting\n   void setInterceptor(HttpResponseInterceptor interceptor) {\n     this.interceptor = interceptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDMxMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405064313", "bodyText": "checkArgument(!Strings.isNullOrEmpty(tenantId));", "author": "hiranya911", "createdAt": "2020-04-07T19:39:01Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -312,6 +315,10 @@ String getEmailActionLink(EmailLinkType type, String email,\n     throw new FirebaseAuthException(INTERNAL_ERROR, \"Failed to create email action link\");\n   }\n \n+  private static String getTenantUrlSuffix(@Nullable String tenantId) {\n+    return tenantId == null ? \"\" : \"/tenants/\" + tenantId;", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NjI5MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406396291", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T18:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 8de5550..2ae4fb6 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -315,8 +330,9 @@ class FirebaseUserManager {\n     throw new FirebaseAuthException(INTERNAL_ERROR, \"Failed to create email action link\");\n   }\n \n-  private static String getTenantUrlSuffix(@Nullable String tenantId) {\n-    return tenantId == null ? \"\" : \"/tenants/\" + tenantId;\n+  private static String getTenantUrlSuffix(String tenantId) {\n+    checkArgument(!Strings.isNullOrEmpty(tenantId));\n+    return \"/tenants/\" + tenantId;\n   }\n \n   private <T> T post(String path, Object content, Class<T> clazz) throws FirebaseAuthException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTQzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405065438", "bodyText": "Can we shift the FirebaseAuth.Builder into this class, and reuse it in both child classes? A constructor with this many args is a little strange.", "author": "hiranya911", "createdAt": "2020-04-07T19:41:02Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -63,17 +63,13 @@\n       final FirebaseApp firebaseApp,\n       Supplier<FirebaseTokenFactory> tokenFactory,\n       Supplier<? extends FirebaseTokenVerifier> idTokenVerifier,\n-      Supplier<? extends FirebaseTokenVerifier> cookieVerifier) {\n+      Supplier<? extends FirebaseTokenVerifier> cookieVerifier,\n+      Supplier<FirebaseUserManager> userManager) {", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NzEzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406397133", "bodyText": "I've made this change, but I have to admit, I find this design a little strange.\nFortunately, this design is not exposed to any users, so I suppose it can always be iterated upon in the future.", "author": "micahstairs", "createdAt": "2020-04-09T18:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\nindex 2f31fdd..29bb8c7 100644\n--- a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n\n@@ -59,18 +59,13 @@ public abstract class AbstractFirebaseAuth {\n   private final Supplier<? extends FirebaseUserManager> userManager;\n   private final JsonFactory jsonFactory;\n \n-  AbstractFirebaseAuth(\n-      final FirebaseApp firebaseApp,\n-      Supplier<FirebaseTokenFactory> tokenFactory,\n-      Supplier<? extends FirebaseTokenVerifier> idTokenVerifier,\n-      Supplier<? extends FirebaseTokenVerifier> cookieVerifier,\n-      Supplier<FirebaseUserManager> userManager) {\n-    this.firebaseApp = checkNotNull(firebaseApp);\n-    this.tokenFactory = threadSafeMemoize(tokenFactory);\n-    this.idTokenVerifier = threadSafeMemoize(idTokenVerifier);\n-    this.cookieVerifier = threadSafeMemoize(cookieVerifier);\n-    this.userManager = threadSafeMemoize(userManager);\n-    this.jsonFactory = firebaseApp.getOptions().getJsonFactory();\n+  AbstractFirebaseAuth(Builder builder) {\n+    this.firebaseApp = checkNotNull(builder.firebaseApp);\n+    this.tokenFactory = threadSafeMemoize(builder.tokenFactory);\n+    this.idTokenVerifier = threadSafeMemoize(builder.idTokenVerifier);\n+    this.cookieVerifier = threadSafeMemoize(builder.cookieVerifier);\n+    this.userManager = threadSafeMemoize(builder.userManager);\n+    this.jsonFactory = builder.firebaseApp.getOptions().getJsonFactory();\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTg0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405065844", "bodyText": "check not null or empty", "author": "hiranya911", "createdAt": "2020-04-07T19:41:51Z", "path": "src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.api.client.util.Clock;\n+import com.google.common.base.Supplier;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.auth.internal.FirebaseTokenFactory;\n+\n+/**\n+ * The tenant-aware Firebase client.\n+ *\n+ * <p>This can be used to perform a variety of authentication-related operations, scoped to a\n+ * particular tenant.\n+ */\n+public class TenantAwareFirebaseAuth extends AbstractFirebaseAuth {\n+\n+  private final String tenantId;\n+\n+  TenantAwareFirebaseAuth(final FirebaseApp firebaseApp, final String tenantId) {\n+    // TODO(micahstairs): Incorporate tenant ID into token generation as well as ID token and\n+    // session cookie verification.\n+    super(\n+        firebaseApp,\n+        new Supplier<FirebaseTokenFactory>() {\n+          @Override\n+          public FirebaseTokenFactory get() {\n+            return FirebaseTokenUtils.createTokenFactory(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseTokenVerifier>() {\n+          @Override\n+          public FirebaseTokenVerifier get() {\n+            return FirebaseTokenUtils.createIdTokenVerifier(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseTokenVerifier>() {\n+          @Override\n+          public FirebaseTokenVerifier get() {\n+            return FirebaseTokenUtils.createSessionCookieVerifier(firebaseApp, Clock.SYSTEM);\n+          }\n+        },\n+        new Supplier<FirebaseUserManager>() {\n+          @Override\n+          public FirebaseUserManager get() {\n+            return new FirebaseUserManager(firebaseApp, tenantId);\n+          }\n+        });\n+    this.tenantId = tenantId;", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NjM3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406396375", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T18:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java b/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\nindex f2636fa..83afb74 100644\n--- a/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\n\n@@ -16,7 +16,10 @@\n \n package com.google.firebase.auth;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+\n import com.google.api.client.util.Clock;\n+import com.google.common.base.Strings;\n import com.google.common.base.Supplier;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.auth.internal.FirebaseTokenFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NjYxNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405066616", "bodyText": "Also delete the tenant at the end of the test", "author": "hiranya911", "createdAt": "2020-04-07T19:43:23Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,203 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NjYyNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406396625", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T18:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NjYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\nindex 355b2c5..0fe2ffc 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n\n@@ -478,6 +478,7 @@ public class FirebaseAuthIT {\n       for (String uid : uids) {\n         tenantAwareAuth.deleteUserAsync(uid).get();\n       }\n+      tenantManager.deleteTenant(tenantId);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2Njc3MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405066771", "bodyText": "And delete the tenant", "author": "hiranya911", "createdAt": "2020-04-07T19:43:39Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,203 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());\n+  }\n+\n+  @Test\n+  public void testTenantAwareListUsers() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = tenantManager.getAuthForTenant(tenantId);\n+    final List<String> uids = new ArrayList<>();\n+\n+    try {\n+      for (int i = 0; i < 3; i++) {\n+        UserRecord.CreateRequest createRequest =\n+            new UserRecord.CreateRequest().setPassword(\"password\");\n+        uids.add(tenantAwareAuth.createUserAsync(createRequest).get().getUid());\n+      }\n+\n+      // Test list by batches\n+      final AtomicInteger collected = new AtomicInteger(0);\n+      ListUsersPage page = tenantAwareAuth.listUsersAsync(null).get();\n+      while (page != null) {\n+        for (ExportedUserRecord user : page.getValues()) {\n+          if (uids.contains(user.getUid())) {\n+            collected.incrementAndGet();\n+            assertNotNull(\"Missing passwordHash field. A common cause would be \"\n+                + \"forgetting to add the \\\"Firebase Authentication Admin\\\" permission. See \"\n+                + \"instructions in CONTRIBUTING.md\", user.getPasswordHash());\n+            assertNotNull(user.getPasswordSalt());\n+            assertEquals(tenantId, user.getTenantId());\n+          }\n+        }\n+        page = page.getNextPage();\n+      }\n+      assertEquals(uids.size(), collected.get());\n+\n+      // Test iterate all\n+      collected.set(0);\n+      page = tenantAwareAuth.listUsersAsync(null).get();\n+      for (ExportedUserRecord user : page.iterateAll()) {\n+        if (uids.contains(user.getUid())) {\n+          collected.incrementAndGet();\n+          assertNotNull(user.getPasswordHash());\n+          assertNotNull(user.getPasswordSalt());\n+          assertEquals(tenantId, user.getTenantId());\n+        }\n+      }\n+      assertEquals(uids.size(), collected.get());\n+\n+      // Test iterate async\n+      collected.set(0);\n+      final Semaphore semaphore = new Semaphore(0);\n+      final AtomicReference<Throwable> error = new AtomicReference<>();\n+      ApiFuture<ListUsersPage> pageFuture = tenantAwareAuth.listUsersAsync(null);\n+      ApiFutures.addCallback(pageFuture, new ApiFutureCallback<ListUsersPage>() {\n+        @Override\n+        public void onFailure(Throwable t) {\n+          error.set(t);\n+          semaphore.release();\n+        }\n+\n+        @Override\n+        public void onSuccess(ListUsersPage result) {\n+          for (ExportedUserRecord user : result.iterateAll()) {\n+            if (uids.contains(user.getUid())) {\n+              collected.incrementAndGet();\n+              assertNotNull(user.getPasswordHash());\n+              assertNotNull(user.getPasswordSalt());\n+              assertEquals(tenantId, user.getTenantId());\n+            }\n+          }\n+          semaphore.release();\n+        }\n+      }, MoreExecutors.directExecutor());\n+      semaphore.acquire();\n+      assertEquals(uids.size(), collected.get());\n+      assertNull(error.get());\n+    } finally {\n+      for (String uid : uids) {", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NjQ2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406396463", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-04-09T18:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2Njc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\nindex 355b2c5..0fe2ffc 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n\n@@ -478,6 +478,7 @@ public class FirebaseAuthIT {\n       for (String uid : uids) {\n         tenantAwareAuth.deleteUserAsync(uid).get();\n       }\n+      tenantManager.deleteTenant(tenantId);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2ODQ4OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405068489", "bodyText": "I believe this class also needs to override verifyIdToken(). But feel free to do that in a separate PR.", "author": "hiranya911", "createdAt": "2020-04-07T19:46:53Z", "path": "src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.api.client.util.Clock;\n+import com.google.common.base.Supplier;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.auth.internal.FirebaseTokenFactory;\n+\n+/**\n+ * The tenant-aware Firebase client.\n+ *\n+ * <p>This can be used to perform a variety of authentication-related operations, scoped to a\n+ * particular tenant.\n+ */\n+public class TenantAwareFirebaseAuth extends AbstractFirebaseAuth {", "originalCommit": "6feaa2b4b1f5198ec3f2d682325d4a558441975c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3OTE0MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r405079141", "bodyText": "The TODO I left there was intended to cover this work.", "author": "micahstairs", "createdAt": "2020-04-07T20:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2ODQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java b/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\nindex f2636fa..83afb74 100644\n--- a/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/TenantAwareFirebaseAuth.java\n\n@@ -16,7 +16,10 @@\n \n package com.google.firebase.auth;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+\n import com.google.api.client.util.Clock;\n+import com.google.common.base.Strings;\n import com.google.common.base.Supplier;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.auth.internal.FirebaseTokenFactory;\n"}}, {"oid": "0cf56995afd47f768fbeaf79c966869dc26b68eb", "url": "https://github.com/firebase/firebase-admin-java/commit/0cf56995afd47f768fbeaf79c966869dc26b68eb", "message": "Address pull request feedback.", "committedDate": "2020-04-09T18:19:09Z", "type": "commit"}, {"oid": "373df42a7bad4a91bf61f015671ef2be9daa17a9", "url": "https://github.com/firebase/firebase-admin-java/commit/373df42a7bad4a91bf61f015671ef2be9daa17a9", "message": "Merge branch 'tenant-mgt' into micahstairs-tenant-aware", "committedDate": "2020-04-09T19:28:53Z", "type": "commit"}, {"oid": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "url": "https://github.com/firebase/firebase-admin-java/commit/442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "message": "Make TenantAwareFirebaseAuth implement doDestroy().", "committedDate": "2020-04-09T19:50:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406455153", "bodyText": "Strings.isNullOrEmpty for good measure", "author": "hiranya911", "createdAt": "2020-04-09T20:22:01Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -115,21 +115,39 @@\n    * Creates a new FirebaseUserManager instance.\n    *\n    * @param app A non-null {@link FirebaseApp}.\n+   * @param tenantId The associated tenant ID if the user operations should be tenant-aware,\n+   *     otherwise {@code null}\n    */\n-  FirebaseUserManager(@NonNull FirebaseApp app) {\n+  FirebaseUserManager(@NonNull FirebaseApp app, @Nullable String tenantId) {\n     checkNotNull(app, \"FirebaseApp must not be null\");\n     String projectId = ImplFirebaseTrampolines.getProjectId(app);\n     checkArgument(!Strings.isNullOrEmpty(projectId),\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    if (tenantId == null) {", "originalCommit": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyOTc5MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406729790", "bodyText": "Hmm I don't think we want to check Strings.isNullOrEmpty in this case, since a null value for the tenant ID is acceptable.\nHowever, if the value is non-null, I've added a check to ensure that it is not an empty string.", "author": "micahstairs", "createdAt": "2020-04-10T12:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODkzNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406888935", "bodyText": "What I meant was if (String.isNullOrEmpty(tenantId)). But this is ok too.", "author": "hiranya911", "createdAt": "2020-04-10T18:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTU5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r407005594", "bodyText": "Ah okay, that makes more sense!", "author": "micahstairs", "createdAt": "2020-04-11T02:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5349201137c2eb5c7abf089206b985bd79574a9b", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 2ae4fb6..c364242 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -128,6 +128,7 @@ class FirebaseUserManager {\n     if (tenantId == null) {\n       this.userMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n     } else {\n+      checkArgument(!tenantId.isEmpty(), \"tenant ID must not be empty\");\n       this.userMgtBaseUrl =\n           String.format(ID_TOOLKIT_URL, \"v1\", projectId) + getTenantUrlSuffix(tenantId);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDgyNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406460826", "bodyText": "Looks like this is still missing a delete call.", "author": "hiranya911", "createdAt": "2020-04-09T20:33:25Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -320,6 +319,208 @@ public void onSuccess(ListUsersPage result) {\n     }\n   }\n \n+  @Test\n+  public void testTenantAwareUserLifecycle() throws Exception {\n+    // Create tenant to use.\n+    TenantManager tenantManager = auth.getTenantManager();\n+    Tenant.CreateRequest tenantCreateRequest =\n+        new Tenant.CreateRequest().setDisplayName(\"DisplayName\");\n+    final String tenantId = tenantManager.createTenant(tenantCreateRequest).getTenantId();\n+\n+    TenantAwareFirebaseAuth tenantAwareAuth = auth.getTenantManager().getAuthForTenant(tenantId);\n+\n+    // Create user\n+    UserRecord userRecord = tenantAwareAuth.createUserAsync(new UserRecord.CreateRequest()).get();\n+    String uid = userRecord.getUid();\n+\n+    // Get user\n+    userRecord = tenantAwareAuth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = RandomUser.create();\n+    String phone = randomPhoneNumber();\n+    UserRecord.UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.email)\n+        .setPhoneNumber(phone)\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertEquals(phone, userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = tenantAwareAuth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = tenantAwareAuth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(tenantId, userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.email, userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n+    assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());", "originalCommit": "442c7191bb2f37ccd8ecee986cb1cbac70e2ec2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyOTM1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/387#discussion_r406729358", "bodyText": "Sorry, I think I might have added it to another test the first time around.\nDone.", "author": "micahstairs", "createdAt": "2020-04-10T12:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5349201137c2eb5c7abf089206b985bd79574a9b", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\nindex 0fe2ffc..c45c228 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n\n@@ -392,9 +392,10 @@ public class FirebaseAuthIT {\n     assertEquals(1, userRecord.getProviderData().length);\n     assertTrue(userRecord.getCustomClaims().isEmpty());\n \n-    // Delete user\n+    // Delete user and tenant\n     tenantAwareAuth.deleteUserAsync(userRecord.getUid()).get();\n     assertUserDoesNotExist(tenantAwareAuth, userRecord.getUid());\n+    tenantManager.deleteTenant(tenantId);\n   }\n \n   @Test\n"}}, {"oid": "5349201137c2eb5c7abf089206b985bd79574a9b", "url": "https://github.com/firebase/firebase-admin-java/commit/5349201137c2eb5c7abf089206b985bd79574a9b", "message": "Address nits", "committedDate": "2020-04-10T12:06:57Z", "type": "commit"}]}