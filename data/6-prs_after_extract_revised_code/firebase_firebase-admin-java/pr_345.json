{"pr_number": 345, "pr_title": "feat(auth): Link federatedid", "pr_createdAt": "2020-01-09T19:35:51Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/345", "timeline": [{"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "url": "https://github.com/firebase/firebase-admin-java/commit/52608d5664e611c76a6552e7cb9f871bdc8538cb", "message": "Add API to link/unlink provider info to/from user record.", "committedDate": "2020-01-09T19:42:30Z", "type": "commit"}, {"oid": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "url": "https://github.com/firebase/firebase-admin-java/commit/52608d5664e611c76a6552e7cb9f871bdc8538cb", "message": "Add API to link/unlink provider info to/from user record.", "committedDate": "2020-01-09T19:42:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNTA0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364935043", "bodyText": "This would overwrite previous values such that:\nUpdateRequest ur = ...;\nur.deleteProvider(\"google.com\").deleteProvider(\"facebook.com\")\n\nwould result in only the facebook.com provider being deleted.\nBetter might be: UpdateRequest setDeleteProviders(Iterable<String> providerIds). You could optionally add UpdateRequest addDeleteProvider(String) and/or UpdateRequest addDeleteProviders(Iterable<String>).\nSee further discussion here: http://go/java-practices/builders#special. (Second bullet point).", "author": "rsgowman", "createdAt": "2020-01-09T20:02:58Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    UpdateRequest deleteProvider(String providerId) {\n+      checkProviderId(providerId);\n+      properties.put(\"deleteProvider\", ImmutableList.of(providerId));", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 8bd236c..1077bab 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -526,20 +522,30 @@ public class UserRecord implements UserInfo {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n \n-    UpdateRequest deleteProvider(String providerId) {\n-      checkProviderId(providerId);\n-      properties.put(\"deleteProvider\", ImmutableList.of(providerId));\n+    UpdateRequest setValidSince(long epochSeconds) {\n+      checkValidSince(epochSeconds);\n+      properties.put(\"validSince\", epochSeconds);\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNjI1Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364936257", "bodyText": "For our builders (which UpdateRequest effectively is), use setProperty() rather than property(). (So setLinkProvider() here.) Both for consistency with the existing type, (eg setValidSince) and also for consistency with our 'best practices' guide. (http://go/java-practices/builders#api, last bullet point.) Note that this directly conflicts with EJ (as pointed out by the practices doc.)", "author": "rsgowman", "createdAt": "2020-01-09T20:06:02Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 8bd236c..1077bab 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -526,20 +522,30 @@ public class UserRecord implements UserInfo {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n \n-    UpdateRequest deleteProvider(String providerId) {\n-      checkProviderId(providerId);\n-      properties.put(\"deleteProvider\", ImmutableList.of(providerId));\n+    UpdateRequest setValidSince(long epochSeconds) {\n+      checkValidSince(epochSeconds);\n+      properties.put(\"validSince\", epochSeconds);\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzNzEyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364937122", "bodyText": "Note that this part of the api design is currently in flux, so it may change a bit yet. Sorry! :(\nNo action required (yet).", "author": "rsgowman", "createdAt": "2020-01-09T20:08:02Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 8bd236c..1077bab 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -526,20 +522,30 @@ public class UserRecord implements UserInfo {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n \n-    UpdateRequest deleteProvider(String providerId) {\n-      checkProviderId(providerId);\n-      properties.put(\"deleteProvider\", ImmutableList.of(providerId));\n+    UpdateRequest setValidSince(long epochSeconds) {\n+      checkValidSince(epochSeconds);\n+      properties.put(\"validSince\", epochSeconds);\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODEyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364938122", "bodyText": "Should be public (and probably have some javadoc).", "author": "rsgowman", "createdAt": "2020-01-09T20:10:40Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 8bd236c..1077bab 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -526,20 +522,30 @@ public class UserRecord implements UserInfo {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n \n-    UpdateRequest deleteProvider(String providerId) {\n-      checkProviderId(providerId);\n-      properties.put(\"deleteProvider\", ImmutableList.of(providerId));\n+    UpdateRequest setValidSince(long epochSeconds) {\n+      checkValidSince(epochSeconds);\n+      properties.put(\"validSince\", epochSeconds);\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODI0Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364938242", "bodyText": "public/javadoc", "author": "rsgowman", "createdAt": "2020-01-09T20:10:54Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -528,6 +532,17 @@ UpdateRequest setValidSince(long epochSeconds) {\n       return this;\n     }\n \n+    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    UpdateRequest deleteProvider(String providerId) {", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 8bd236c..1077bab 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -526,20 +522,30 @@ public class UserRecord implements UserInfo {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n \n-    UpdateRequest deleteProvider(String providerId) {\n-      checkProviderId(providerId);\n-      properties.put(\"deleteProvider\", ImmutableList.of(providerId));\n+    UpdateRequest setValidSince(long epochSeconds) {\n+      checkValidSince(epochSeconds);\n+      properties.put(\"validSince\", epochSeconds);\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MDc3OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364940778", "bodyText": "Good catch.", "author": "rsgowman", "createdAt": "2020-01-09T20:17:16Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -178,73 +179,134 @@ public void testCreateUserWithParams() throws Exception {\n   public void testUserLifecycle() throws Exception {\n     // Create user\n     UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n-    String uid = userRecord.getUid();\n-\n-    // Get user\n-    userRecord = auth.getUserAsync(userRecord.getUid()).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertNull(userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertFalse(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n-    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n-    assertEquals(0, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Update user\n-    RandomUser randomUser = RandomUser.create();\n-    String phone = randomPhoneNumber();\n-    UpdateRequest request = userRecord.updateRequest()\n-        .setDisplayName(\"Updated Name\")\n-        .setEmail(randomUser.email)\n-        .setPhoneNumber(phone)\n-        .setPhotoUrl(\"https://example.com/photo.png\")\n-        .setEmailVerified(true)\n-        .setPassword(\"secret\");\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertEquals(phone, userRecord.getPhoneNumber());\n-    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertEquals(2, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Get user by email\n-    userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n-    assertEquals(uid, userRecord.getUid());\n-\n-    // Disable user and remove properties\n-    request = userRecord.updateRequest()\n-        .setPhotoUrl(null)\n-        .setDisplayName(null)\n-        .setPhoneNumber(null)\n-        .setDisabled(true);\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertTrue(userRecord.isDisabled());\n-    assertEquals(1, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Delete user\n-    auth.deleteUserAsync(userRecord.getUid()).get();\n     try {\n-      auth.getUserAsync(userRecord.getUid()).get();\n-      fail(\"No error thrown for deleted user\");\n-    } catch (ExecutionException e) {\n-      assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+      String uid = userRecord.getUid();\n+\n+      // Get user\n+      userRecord = auth.getUserAsync(userRecord.getUid()).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertNull(userRecord.getDisplayName());\n+      assertNull(userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertNull(userRecord.getPhotoUrl());\n+      assertFalse(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+      assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+      assertEquals(0, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Update user\n+      RandomUser randomUser = RandomUser.create();\n+      UpdateRequest request = userRecord.updateRequest()\n+          .setDisplayName(\"Updated Name\")\n+          .setEmail(randomUser.email)\n+          .setPhoneNumber(randomUser.phone)\n+          .setPhotoUrl(\"https://example.com/photo.png\")\n+          .setEmailVerified(true)\n+          .setPassword(\"secret\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(randomUser.phone, userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertEquals(2, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Link user to IDP providers\n+      request = userRecord.updateRequest()\n+          .linkProvider(\n+              UserProvider\n+                  .builder()\n+                  .setUid(\"testuid\")\n+                  .setProviderId(\"google.com\")\n+                  .setEmail(\"test@example.com\")\n+                  .setDisplayName(\"Test User\")\n+                  .setPhotoUrl(\"https://test.com/user.png\")\n+                  .build());\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(randomUser.phone, userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertEquals(3, userRecord.getProviderData().length);\n+      List<String> providers = new ArrayList<>();\n+      for (UserInfo provider : userRecord.getProviderData()) {\n+        providers.add(provider.getProviderId());\n+      }\n+      assertTrue(providers.contains(\"google.com\"));\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Unlink phone provider\n+      request = userRecord.updateRequest().deleteProvider(\"phone\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertNull(userRecord.getPhoneNumber());\n+      assertEquals(2, userRecord.getProviderData().length);\n+      providers.clear();\n+      for (UserInfo provider : userRecord.getProviderData()) {\n+        providers.add(provider.getProviderId());\n+      }\n+      assertFalse(providers.contains(\"phone\"));\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Unlink IDP provider\n+      request = userRecord.updateRequest().deleteProvider(\"google.com\");\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(1, userRecord.getProviderData().length);\n+      assertNotEquals(\"google.com\", userRecord.getProviderData()[0].getProviderId());\n+      assertEquals(uid, userRecord.getUid());\n+      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertFalse(userRecord.isDisabled());\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+      // Get user by email\n+      userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n+      assertEquals(uid, userRecord.getUid());\n+\n+      // Disable user and remove properties\n+      request = userRecord.updateRequest()\n+          .setPhotoUrl(null)\n+          .setDisplayName(null)\n+          .setPhoneNumber(null)\n+          .setDisabled(true);\n+      userRecord = auth.updateUserAsync(request).get();\n+      assertEquals(uid, userRecord.getUid());\n+      assertNull(userRecord.getDisplayName());\n+      assertEquals(randomUser.email, userRecord.getEmail());\n+      assertNull(userRecord.getPhoneNumber());\n+      assertNull(userRecord.getPhotoUrl());\n+      assertTrue(userRecord.isEmailVerified());\n+      assertTrue(userRecord.isDisabled());\n+      assertEquals(1, userRecord.getProviderData().length);\n+      assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    } finally {", "originalCommit": "52608d5664e611c76a6552e7cb9f871bdc8538cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\nindex 5e09d12..3291477 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n\n@@ -198,10 +198,11 @@ public class FirebaseAuthIT {\n \n       // Update user\n       RandomUser randomUser = RandomUser.create();\n+      String phone = randomPhoneNumber();\n       UpdateRequest request = userRecord.updateRequest()\n           .setDisplayName(\"Updated Name\")\n           .setEmail(randomUser.email)\n-          .setPhoneNumber(randomUser.phone)\n+          .setPhoneNumber(phone)\n           .setPhotoUrl(\"https://example.com/photo.png\")\n           .setEmailVerified(true)\n           .setPassword(\"secret\");\n"}}, {"oid": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "url": "https://github.com/firebase/firebase-admin-java/commit/dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "message": "Make changes in respond to first round of feedback.", "committedDate": "2020-01-09T21:55:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5NjA2Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364996062", "bodyText": "It might still be worth checking each providerId to ensure it's not null/empty?", "author": "rsgowman", "createdAt": "2020-01-09T22:42:43Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5ODA5OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364998099", "bodyText": "Can Iterable be used here (instead of List)?", "author": "rsgowman", "createdAt": "2020-01-09T22:48:48Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5OTQyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364999422", "bodyText": "Check out line 567. (Github doesn't allow you to comment on lines that haven't been changed.) The deleteProvider property will be overwritten if the phone property is null. I think you'll need to change that to append if it already exists (or set if it does not.)", "author": "rsgowman", "createdAt": "2020-01-09T22:52:51Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -526,20 +522,30 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n-    UpdateRequest setValidSince(long epochSeconds) {\n-      checkValidSince(epochSeconds);\n-      properties.put(\"validSince\", epochSeconds);\n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n       return this;\n     }\n \n-    UpdateRequest linkProvider(@NonNull UserProvider userProvider) {\n-      properties.put(\"linkProviderUserInfo\", userProvider);\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+      checkNotNull(providerIds);\n+      properties.put(\"deleteProvider\", providerIds);", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"oid": "a9e09c293d91407dc86c9370872948aa9b205cd9", "url": "https://github.com/firebase/firebase-admin-java/commit/a9e09c293d91407dc86c9370872948aa9b205cd9", "message": "review feedback", "committedDate": "2021-03-17T21:00:43Z", "type": "commit"}, {"oid": "e5847c203f91ec425e05c1d877bc92b624b66f82", "url": "https://github.com/firebase/firebase-admin-java/commit/e5847c203f91ec425e05c1d877bc92b624b66f82", "message": "Merge remote-tracking branch 'origin/master' into link-federatedid", "committedDate": "2021-03-17T21:14:27Z", "type": "commit"}, {"oid": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25", "url": "https://github.com/firebase/firebase-admin-java/commit/0bcaf694339d0e209291cb77a5c2ed61a6edcd25", "message": "Update API to reflect changes made during api review", "committedDate": "2021-03-17T21:27:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5ODU5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r364998594", "bodyText": "Don't think you need to escape the apostrophe", "author": "hiranya911", "createdAt": "2020-01-09T22:50:17Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTA2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365001063", "bodyText": "This is a bit weird name. Was this the name decided in the API review? setLinkedProvider sounds better. Or just linkProvider.", "author": "hiranya911", "createdAt": "2020-01-09T22:57:40Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMzQ0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365003440", "bodyText": "deleteProvider or unlinkProvider. Also provide versions that take a single string and a collection", "author": "hiranya911", "createdAt": "2020-01-09T23:05:27Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -522,6 +522,27 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Updates the provider to be linked to this user\\'s account.\n+     *\n+     * @param userProvider provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setLinkProvider(@NonNull UserProvider userProvider) {\n+      properties.put(\"linkProviderUserInfo\", userProvider);\n+      return this;\n+    }\n+\n+    /**\n+     * Updates the identity providers to unlink from this user\\'s account.\n+     *\n+     * @param providerIds list of identifiers for the identity providers.\n+     */\n+    public UpdateRequest setDeleteProviders(List<String> providerIds) {", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9e09c293d91407dc86c9370872948aa9b205cd9", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 1077bab..fedc4a3 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -537,8 +537,12 @@ public class UserRecord implements UserInfo {\n      *\n      * @param providerIds list of identifiers for the identity providers.\n      */\n-    public UpdateRequest setDeleteProviders(List<String> providerIds) {\n+    public UpdateRequest setDeleteProviders(Iterable<String> providerIds) {\n       checkNotNull(providerIds);\n+      for (String id : providerIds) {\n+        checkArgument(!Strings.isNullOrEmpty(id), \"providerIds must not be null or empty\");\n+      }\n+\n       properties.put(\"deleteProvider\", providerIds);\n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwNDEzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r365004138", "bodyText": "Move this entire block into a helper method for clarity", "author": "hiranya911", "createdAt": "2020-01-09T23:07:56Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -178,73 +179,135 @@ public void testCreateUserWithParams() throws Exception {\n   public void testUserLifecycle() throws Exception {\n     // Create user\n     UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n-    String uid = userRecord.getUid();\n-\n-    // Get user\n-    userRecord = auth.getUserAsync(userRecord.getUid()).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertNull(userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertFalse(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n-    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n-    assertEquals(0, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Update user\n-    RandomUser randomUser = RandomUser.create();\n-    String phone = randomPhoneNumber();\n-    UpdateRequest request = userRecord.updateRequest()\n-        .setDisplayName(\"Updated Name\")\n-        .setEmail(randomUser.email)\n-        .setPhoneNumber(phone)\n-        .setPhotoUrl(\"https://example.com/photo.png\")\n-        .setEmailVerified(true)\n-        .setPassword(\"secret\");\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertEquals(phone, userRecord.getPhoneNumber());\n-    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertFalse(userRecord.isDisabled());\n-    assertEquals(2, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Get user by email\n-    userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n-    assertEquals(uid, userRecord.getUid());\n-\n-    // Disable user and remove properties\n-    request = userRecord.updateRequest()\n-        .setPhotoUrl(null)\n-        .setDisplayName(null)\n-        .setPhoneNumber(null)\n-        .setDisabled(true);\n-    userRecord = auth.updateUserAsync(request).get();\n-    assertEquals(uid, userRecord.getUid());\n-    assertNull(userRecord.getDisplayName());\n-    assertEquals(randomUser.email, userRecord.getEmail());\n-    assertNull(userRecord.getPhoneNumber());\n-    assertNull(userRecord.getPhotoUrl());\n-    assertTrue(userRecord.isEmailVerified());\n-    assertTrue(userRecord.isDisabled());\n-    assertEquals(1, userRecord.getProviderData().length);\n-    assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-    // Delete user\n-    auth.deleteUserAsync(userRecord.getUid()).get();\n     try {\n-      auth.getUserAsync(userRecord.getUid()).get();\n-      fail(\"No error thrown for deleted user\");\n-    } catch (ExecutionException e) {\n-      assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+      String uid = userRecord.getUid();", "originalCommit": "dface3afbb1bfac907b3a0c01d74a6a4c2d094e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5847c203f91ec425e05c1d877bc92b624b66f82", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\nindex 3291477..1943fed 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseAuthIT.java\n\n@@ -133,290 +151,390 @@ public class FirebaseAuthIT {\n       fail(\"No error thrown for non existing uid\");\n     } catch (ExecutionException e) {\n       assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-          ((FirebaseAuthException) e.getCause()).getErrorCode());\n+      FirebaseAuthException authException = (FirebaseAuthException) e.getCause();\n+      assertEquals(\n+          \"No user record found for the given identifier (USER_NOT_FOUND).\",\n+          authException.getMessage());\n+      assertEquals(ErrorCode.NOT_FOUND, authException.getErrorCode());\n+      assertNotNull(authException.getCause());\n+      assertNotNull(authException.getHttpResponse());\n+      assertEquals(AuthErrorCode.USER_NOT_FOUND, authException.getAuthErrorCode());\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid()))\n+            .get();\n+\n+    assertEquals(3, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(\n+                ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                    new UidIdentifier(user2.getUid()), new UidIdentifier(user3.getUid())))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(3, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteExistingAndNonExistingUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), \"uid-that-doesnt-exist\")).get();\n+\n+    assertEquals(2, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                               new UidIdentifier(\"uid-that-doesnt-exist\")))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(2, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteUsersIsIdempotent() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult result = slowDeleteUsersAsync(ImmutableList.of(user1.getUid())).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+\n+    // Delete the user again to ensure that everything still counts as a success.\n+    result = slowDeleteUsersAsync(ImmutableList.of(user1.getUid())).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+  }\n+\n+  /**\n+   * The {@code batchDelete} endpoint has a rate limit of 1 QPS. Use this test\n+   * helper to ensure you don't exceed the quota.\n+   */\n+  // TODO(rsgowman): When/if the rate limit is relaxed, eliminate this helper.\n+  private ApiFuture<DeleteUsersResult> slowDeleteUsersAsync(List<String> uids) throws Exception {\n+    TimeUnit.SECONDS.sleep(1);\n+    return auth.deleteUsersAsync(uids);\n+  }\n+\n   @Test\n   public void testCreateUserWithParams() throws Exception {\n-    RandomUser randomUser = RandomUser.create();\n-    String phone = randomPhoneNumber();\n-    CreateRequest user = new CreateRequest()\n-        .setUid(randomUser.uid)\n-        .setEmail(randomUser.email)\n-        .setPhoneNumber(phone)\n+    RandomUser randomUser = UserTestUtils.generateRandomUserInfo();\n+    UserRecord.CreateRequest user = new UserRecord.CreateRequest()\n+        .setUid(randomUser.getUid())\n+        .setEmail(randomUser.getEmail())\n+        .setPhoneNumber(randomUser.getPhoneNumber())\n         .setDisplayName(\"Random User\")\n         .setPhotoUrl(\"https://example.com/photo.png\")\n         .setEmailVerified(true)\n         .setPassword(\"password\");\n \n-    UserRecord userRecord = auth.createUserAsync(user).get();\n-    try {\n-      assertEquals(randomUser.uid, userRecord.getUid());\n-      assertEquals(\"Random User\", userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertEquals(phone, userRecord.getPhoneNumber());\n-      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-\n-      assertEquals(2, userRecord.getProviderData().length);\n-      List<String> providers = new ArrayList<>();\n-      for (UserInfo provider : userRecord.getProviderData()) {\n-        providers.add(provider.getProviderId());\n-      }\n-      assertTrue(providers.contains(\"password\"));\n-      assertTrue(providers.contains(\"phone\"));\n-\n-      checkRecreate(randomUser.uid);\n-    } finally {\n-      auth.deleteUserAsync(userRecord.getUid()).get();\n+    UserRecord userRecord = temporaryUser.create(user);\n+    assertEquals(randomUser.getUid(), userRecord.getUid());\n+    assertEquals(\"Random User\", userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertEquals(randomUser.getPhoneNumber(), userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+\n+    assertEquals(2, userRecord.getProviderData().length);\n+    List<String> providers = new ArrayList<>();\n+    for (UserInfo provider : userRecord.getProviderData()) {\n+      providers.add(provider.getProviderId());\n     }\n+    assertTrue(providers.contains(\"password\"));\n+    assertTrue(providers.contains(\"phone\"));\n+\n+    checkRecreateUser(randomUser.getUid());\n   }\n \n   @Test\n   public void testUserLifecycle() throws Exception {\n     // Create user\n     UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n-    try {\n-      String uid = userRecord.getUid();\n-\n-      // Get user\n-      userRecord = auth.getUserAsync(userRecord.getUid()).get();\n-      assertEquals(uid, userRecord.getUid());\n-      assertNull(userRecord.getDisplayName());\n-      assertNull(userRecord.getEmail());\n-      assertNull(userRecord.getPhoneNumber());\n-      assertNull(userRecord.getPhotoUrl());\n-      assertFalse(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-      assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n-      assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n-      assertEquals(0, userRecord.getProviderData().length);\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      // Update user\n-      RandomUser randomUser = RandomUser.create();\n-      String phone = randomPhoneNumber();\n-      UpdateRequest request = userRecord.updateRequest()\n-          .setDisplayName(\"Updated Name\")\n-          .setEmail(randomUser.email)\n-          .setPhoneNumber(phone)\n-          .setPhotoUrl(\"https://example.com/photo.png\")\n-          .setEmailVerified(true)\n-          .setPassword(\"secret\");\n-      userRecord = auth.updateUserAsync(request).get();\n-      assertEquals(uid, userRecord.getUid());\n-      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertEquals(phone, userRecord.getPhoneNumber());\n-      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-      assertEquals(2, userRecord.getProviderData().length);\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      // Link user to IDP providers\n-      request = userRecord.updateRequest()\n-          .setLinkProvider(\n-              UserProvider\n-                  .builder()\n-                  .setUid(\"testuid\")\n-                  .setProviderId(\"google.com\")\n-                  .setEmail(\"test@example.com\")\n-                  .setDisplayName(\"Test User\")\n-                  .setPhotoUrl(\"https://test.com/user.png\")\n-                  .build());\n-      userRecord = auth.updateUserAsync(request).get();\n-      assertEquals(uid, userRecord.getUid());\n-      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertEquals(phone, userRecord.getPhoneNumber());\n-      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-      assertEquals(3, userRecord.getProviderData().length);\n-      List<String> providers = new ArrayList<>();\n-      for (UserInfo provider : userRecord.getProviderData()) {\n-        providers.add(provider.getProviderId());\n-      }\n-      assertTrue(providers.contains(\"google.com\"));\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      // Unlink phone provider\n-      request = userRecord.updateRequest().setDeleteProviders(ImmutableList.of(\"phone\"));\n-      userRecord = auth.updateUserAsync(request).get();\n-      assertNull(userRecord.getPhoneNumber());\n-      assertEquals(2, userRecord.getProviderData().length);\n-      providers.clear();\n-      for (UserInfo provider : userRecord.getProviderData()) {\n-        providers.add(provider.getProviderId());\n-      }\n-      assertFalse(providers.contains(\"phone\"));\n-      assertEquals(uid, userRecord.getUid());\n-      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      // Unlink IDP provider\n-      request = userRecord.updateRequest().setDeleteProviders(ImmutableList.of(\"google.com\"));\n-      userRecord = auth.updateUserAsync(request).get();\n-      assertEquals(1, userRecord.getProviderData().length);\n-      assertNotEquals(\"google.com\", userRecord.getProviderData()[0].getProviderId());\n-      assertEquals(uid, userRecord.getUid());\n-      assertEquals(\"Updated Name\", userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertNull(userRecord.getPhoneNumber());\n-      assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertFalse(userRecord.isDisabled());\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      // Get user by email\n-      userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n-      assertEquals(uid, userRecord.getUid());\n-\n-      // Disable user and remove properties\n-      request = userRecord.updateRequest()\n-          .setPhotoUrl(null)\n-          .setDisplayName(null)\n-          .setPhoneNumber(null)\n-          .setDisabled(true);\n-      userRecord = auth.updateUserAsync(request).get();\n-      assertEquals(uid, userRecord.getUid());\n-      assertNull(userRecord.getDisplayName());\n-      assertEquals(randomUser.email, userRecord.getEmail());\n-      assertNull(userRecord.getPhoneNumber());\n-      assertNull(userRecord.getPhotoUrl());\n-      assertTrue(userRecord.isEmailVerified());\n-      assertTrue(userRecord.isDisabled());\n-      assertEquals(1, userRecord.getProviderData().length);\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n+    String uid = userRecord.getUid();\n \n-    } finally {\n-      // Delete user\n-      auth.deleteUserAsync(userRecord.getUid()).get();\n-      try {\n-        auth.getUserAsync(userRecord.getUid()).get();\n-        fail(\"No error thrown for deleted user\");\n-      } catch (ExecutionException e) {\n-        assertTrue(e.getCause() instanceof FirebaseAuthException);\n-        assertEquals(FirebaseUserManager.USER_NOT_FOUND_ERROR,\n-            ((FirebaseAuthException) e.getCause()).getErrorCode());\n+    // Get user\n+    userRecord = auth.getUserAsync(userRecord.getUid()).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertNull(userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertNull(userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertFalse(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getUserMetadata().getCreationTimestamp() > 0);\n+    assertEquals(0, userRecord.getUserMetadata().getLastSignInTimestamp());\n+    assertEquals(0, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Update user\n+    RandomUser randomUser = UserTestUtils.generateRandomUserInfo();\n+    UpdateRequest request = userRecord.updateRequest()\n+        .setDisplayName(\"Updated Name\")\n+        .setEmail(randomUser.getEmail())\n+        .setPhoneNumber(randomUser.getPhoneNumber())\n+        .setPhotoUrl(\"https://example.com/photo.png\")\n+        .setEmailVerified(true)\n+        .setPassword(\"secret\");\n+    userRecord = auth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertNull(userRecord.getTenantId());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertEquals(randomUser.getPhoneNumber(), userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Link user to IDP providers\n+    request = userRecord.updateRequest()\n+        .setLinkProvider(\n+            UserProvider\n+                .builder()\n+                .setUid(\"testuid\")\n+                .setProviderId(\"google.com\")\n+                .setEmail(\"test@example.com\")\n+                .setDisplayName(\"Test User\")\n+                .setPhotoUrl(\"https://test.com/user.png\")\n+                .build());\n+    userRecord = auth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertEquals(randomUser.getPhoneNumber(), userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertEquals(3, userRecord.getProviderData().length);\n+    List<String> providers = new ArrayList<>();\n+    for (UserInfo provider : userRecord.getProviderData()) {\n+      providers.add(provider.getProviderId());\n+    }\n+    assertTrue(providers.contains(\"google.com\"));\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Unlink phone provider\n+    request = userRecord.updateRequest().setDeleteProviders(ImmutableList.of(\"phone\"));\n+    userRecord = auth.updateUserAsync(request).get();\n+    assertNull(userRecord.getPhoneNumber());\n+    assertEquals(2, userRecord.getProviderData().length);\n+    providers.clear();\n+    for (UserInfo provider : userRecord.getProviderData()) {\n+      providers.add(provider.getProviderId());\n+    }\n+    assertFalse(providers.contains(\"phone\"));\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Unlink IDP provider\n+    request = userRecord.updateRequest().setDeleteProviders(ImmutableList.of(\"google.com\"));\n+    userRecord = auth.updateUserAsync(request).get();\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertNotEquals(\"google.com\", userRecord.getProviderData()[0].getProviderId());\n+    assertEquals(uid, userRecord.getUid());\n+    assertEquals(\"Updated Name\", userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertEquals(\"https://example.com/photo.png\", userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertFalse(userRecord.isDisabled());\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Get user by email\n+    userRecord = auth.getUserByEmailAsync(userRecord.getEmail()).get();\n+    assertEquals(uid, userRecord.getUid());\n+\n+    // Disable user and remove properties\n+    request = userRecord.updateRequest()\n+        .setPhotoUrl(null)\n+        .setDisplayName(null)\n+        .setPhoneNumber(null)\n+        .setDisabled(true);\n+    userRecord = auth.updateUserAsync(request).get();\n+    assertEquals(uid, userRecord.getUid());\n+    assertNull(userRecord.getTenantId());\n+    assertNull(userRecord.getDisplayName());\n+    assertEquals(randomUser.getEmail(), userRecord.getEmail());\n+    assertNull(userRecord.getPhoneNumber());\n+    assertNull(userRecord.getPhotoUrl());\n+    assertTrue(userRecord.isEmailVerified());\n+    assertTrue(userRecord.isDisabled());\n+    assertEquals(1, userRecord.getProviderData().length);\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n+\n+    // Delete user\n+    auth.deleteUserAsync(userRecord.getUid()).get();\n+    UserTestUtils.assertUserDoesNotExist(auth, userRecord.getUid());\n+  }\n+\n+  @Test\n+  public void testLastRefreshTime() throws Exception {\n+    RandomUser user = UserTestUtils.generateRandomUserInfo();\n+    UserRecord newUserRecord = temporaryUser.create(new UserRecord.CreateRequest()\n+        .setUid(user.getUid())\n+        .setEmail(user.getEmail())\n+        .setEmailVerified(false)\n+        .setPassword(\"password\"));\n+\n+    // New users should not have a lastRefreshTimestamp set.\n+    assertEquals(0, newUserRecord.getUserMetadata().getLastRefreshTimestamp());\n+\n+    // Login to cause the lastRefreshTimestamp to be set.\n+    signInWithPassword(newUserRecord.getEmail(), \"password\");\n+\n+    // Attempt to retrieve the user 3 times (with a small delay between each\n+    // attempt). Occasionally, this call retrieves the user data without the\n+    // lastLoginTime/lastRefreshTime set; possibly because it's hitting a\n+    // different server than the login request uses.\n+    UserRecord userRecord = null;\n+    for (int i = 0; i < 3; i++) {\n+      userRecord = auth.getUser(newUserRecord.getUid());\n+\n+      if (userRecord.getUserMetadata().getLastRefreshTimestamp() != 0) {\n+        break;\n       }\n+\n+      TimeUnit.SECONDS.sleep((long)Math.pow(2, i));\n     }\n+\n+    // Ensure the lastRefreshTimestamp is approximately \"now\" (with a tolerance of 10 minutes).\n+    long now = System.currentTimeMillis();\n+    long tolerance = TimeUnit.MINUTES.toMillis(10);\n+    long lastRefreshTimestamp = userRecord.getUserMetadata().getLastRefreshTimestamp();\n+    assertTrue(now - tolerance <= lastRefreshTimestamp);\n+    assertTrue(lastRefreshTimestamp <= now + tolerance);\n   }\n \n   @Test\n   public void testListUsers() throws Exception {\n     final List<String> uids = new ArrayList<>();\n \n-    try {\n-      uids.add(auth.createUserAsync(new CreateRequest().setPassword(\"password\")).get().getUid());\n-      uids.add(auth.createUserAsync(new CreateRequest().setPassword(\"password\")).get().getUid());\n-      uids.add(auth.createUserAsync(new CreateRequest().setPassword(\"password\")).get().getUid());\n-\n-      // Test list by batches\n-      final AtomicInteger collected = new AtomicInteger(0);\n-      ListUsersPage page = auth.listUsersAsync(null).get();\n-      while (page != null) {\n-        for (ExportedUserRecord user : page.getValues()) {\n-          if (uids.contains(user.getUid())) {\n-            collected.incrementAndGet();\n-            assertNotNull(user.getPasswordHash());\n-            assertNotNull(user.getPasswordSalt());\n-          }\n-        }\n-        page = page.getNextPage();\n-      }\n-      assertEquals(uids.size(), collected.get());\n+    for (int i = 0; i < 3; i++) {\n+      UserRecord.CreateRequest createRequest =\n+          new UserRecord.CreateRequest().setPassword(\"password\");\n+      uids.add(temporaryUser.create(createRequest).getUid());\n+    }\n \n-      // Test iterate all\n-      collected.set(0);\n-      page = auth.listUsersAsync(null).get();\n-      for (ExportedUserRecord user : page.iterateAll()) {\n+    // Test list by batches\n+    final AtomicInteger collected = new AtomicInteger(0);\n+    ListUsersPage page = auth.listUsersAsync(null).get();\n+    while (page != null) {\n+      for (ExportedUserRecord user : page.getValues()) {\n         if (uids.contains(user.getUid())) {\n           collected.incrementAndGet();\n-          assertNotNull(user.getPasswordHash());\n+          assertNotNull(\"Missing passwordHash field. A common cause would be \"\n+              + \"forgetting to add the \\\"Firebase Authentication Admin\\\" permission. See \"\n+              + \"instructions in CONTRIBUTING.md\", user.getPasswordHash());\n           assertNotNull(user.getPasswordSalt());\n+          assertNull(user.getTenantId());\n         }\n       }\n-      assertEquals(uids.size(), collected.get());\n-\n-      // Test iterate async\n-      collected.set(0);\n-      final Semaphore semaphore = new Semaphore(0);\n-      final AtomicReference<Throwable> error = new AtomicReference<>();\n-      ApiFuture<ListUsersPage> pageFuture = auth.listUsersAsync(null);\n-      ApiFutures.addCallback(pageFuture, new ApiFutureCallback<ListUsersPage>() {\n-        @Override\n-        public void onFailure(Throwable t) {\n-          error.set(t);\n-          semaphore.release();\n-        }\n+      page = page.getNextPage();\n+    }\n+    assertEquals(uids.size(), collected.get());\n+\n+    // Test iterate all\n+    collected.set(0);\n+    page = auth.listUsersAsync(null).get();\n+    for (ExportedUserRecord user : page.iterateAll()) {\n+      if (uids.contains(user.getUid())) {\n+        collected.incrementAndGet();\n+        assertNotNull(user.getPasswordHash());\n+        assertNotNull(user.getPasswordSalt());\n+        assertNull(user.getTenantId());\n+      }\n+    }\n+    assertEquals(uids.size(), collected.get());\n+\n+    // Test iterate async\n+    collected.set(0);\n+    final Semaphore semaphore = new Semaphore(0);\n+    final AtomicReference<Throwable> error = new AtomicReference<>();\n+    ApiFuture<ListUsersPage> pageFuture = auth.listUsersAsync(null);\n+    ApiFutures.addCallback(pageFuture, new ApiFutureCallback<ListUsersPage>() {\n+      @Override\n+      public void onFailure(Throwable t) {\n+        error.set(t);\n+        semaphore.release();\n+      }\n \n-        @Override\n-        public void onSuccess(ListUsersPage result) {\n-          for (ExportedUserRecord user : result.iterateAll()) {\n-            if (uids.contains(user.getUid())) {\n-              collected.incrementAndGet();\n-              assertNotNull(user.getPasswordHash());\n-              assertNotNull(user.getPasswordSalt());\n-            }\n+      @Override\n+      public void onSuccess(ListUsersPage result) {\n+        for (ExportedUserRecord user : result.iterateAll()) {\n+          if (uids.contains(user.getUid())) {\n+            collected.incrementAndGet();\n+            assertNotNull(user.getPasswordHash());\n+            assertNotNull(user.getPasswordSalt());\n+            assertNull(user.getTenantId());\n           }\n-          semaphore.release();\n         }\n-      }, MoreExecutors.directExecutor());\n-      semaphore.acquire();\n-      assertEquals(uids.size(), collected.get());\n-      assertNull(error.get());\n-    } finally {\n-      for (String uid : uids) {\n-        auth.deleteUserAsync(uid).get();\n+        semaphore.release();\n       }\n-    }\n+    }, MoreExecutors.directExecutor());\n+    semaphore.acquire();\n+    assertEquals(uids.size(), collected.get());\n+    assertNull(error.get());\n   }\n \n   @Test\n   public void testCustomClaims() throws Exception {\n-    UserRecord userRecord = auth.createUserAsync(new CreateRequest()).get();\n+    UserRecord userRecord = temporaryUser.create(new UserRecord.CreateRequest());\n     String uid = userRecord.getUid();\n \n-    try {\n-      // New user should not have any claims\n-      assertTrue(userRecord.getCustomClaims().isEmpty());\n-\n-      Map<String, Object> expected = ImmutableMap.<String, Object>of(\n-          \"admin\", true, \"package\", \"gold\");\n-      auth.setCustomUserClaimsAsync(uid, expected).get();\n-\n-      // Should have 2 claims\n-      UserRecord updatedUser = auth.getUserAsync(uid).get();\n-      assertEquals(2, updatedUser.getCustomClaims().size());\n-      for (Map.Entry<String, Object> entry : expected.entrySet()) {\n-        assertEquals(entry.getValue(), updatedUser.getCustomClaims().get(entry.getKey()));\n-      }\n+    // New user should not have any claims\n+    assertTrue(userRecord.getCustomClaims().isEmpty());\n \n-      // User's ID token should have the custom claims\n-      String customToken = auth.createCustomTokenAsync(uid).get();\n-      String idToken = signInWithCustomToken(customToken);\n-      FirebaseToken decoded = auth.verifyIdTokenAsync(idToken).get();\n-      Map<String, Object> result = decoded.getClaims();\n-      for (Map.Entry<String, Object> entry : expected.entrySet()) {\n-        assertEquals(entry.getValue(), result.get(entry.getKey()));\n-      }\n+    Map<String, Object> expected = ImmutableMap.<String, Object>of(\n+        \"admin\", true, \"package\", \"gold\");\n+    auth.setCustomUserClaimsAsync(uid, expected).get();\n \n-      // Should be able to remove custom claims\n-      auth.setCustomUserClaimsAsync(uid, null).get();\n-      updatedUser = auth.getUserAsync(uid).get();\n-      assertTrue(updatedUser.getCustomClaims().isEmpty());\n-    } finally {\n-      auth.deleteUserAsync(uid).get();\n+    // Should have 2 claims\n+    UserRecord updatedUser = auth.getUserAsync(uid).get();\n+    assertEquals(2, updatedUser.getCustomClaims().size());\n+    for (Map.Entry<String, Object> entry : expected.entrySet()) {\n+      assertEquals(entry.getValue(), updatedUser.getCustomClaims().get(entry.getKey()));\n     }\n+\n+    // User's ID token should have the custom claims\n+    String customToken = auth.createCustomTokenAsync(uid).get();\n+    String idToken = signInWithCustomToken(customToken);\n+    FirebaseToken decoded = auth.verifyIdTokenAsync(idToken).get();\n+    Map<String, Object> result = decoded.getClaims();\n+    for (Map.Entry<String, Object> entry : expected.entrySet()) {\n+      assertEquals(entry.getValue(), result.get(entry.getKey()));\n+    }\n+\n+    // Should be able to remove custom claims\n+    auth.setCustomUserClaimsAsync(uid, null).get();\n+    updatedUser = auth.getUserAsync(uid).get();\n+    assertTrue(updatedUser.getCustomClaims().isEmpty());\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyNzU1OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597327559", "bodyText": "Do we need a non-null check for the argument?", "author": "hiranya911", "createdAt": "2021-03-19T00:23:18Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -548,6 +548,41 @@ public UpdateRequest setCustomClaims(Map<String,Object> customClaims) {\n       return this;\n     }\n \n+    /**\n+     * Links this user to the specified provider.\n+     *\n+     * <p>Linking a provider to an existing user account does not invalidate the\n+     * refresh token of that account. In other words, the existing account\n+     * would continue to be able to access resources, despite not having used\n+     * the newly linked provider to log in. If you wish to force the user to\n+     * authenticate with this new provider, you need to (a) revoke their\n+     * refresh token (see\n+     * https://firebase.google.com/docs/auth/admin/manage-sessions#revoke_refresh_tokens),\n+     * and (b) ensure no other authentication methods are present on this\n+     * account.\n+     *\n+     * @param providerToLink provider info to be linked to this user\\'s account.\n+     */\n+    public UpdateRequest setProviderToLink(@NonNull UserProvider providerToLink) {\n+      properties.put(\"linkProviderUserInfo\", providerToLink);", "originalCommit": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTEzMDI1Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605130257", "bodyText": "Yes; done.", "author": "rsgowman", "createdAt": "2021-03-31T18:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyNzU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf34cf1e71d71355e8c26a07e79dedda2ced9b3c", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 75e73c9..67c8ed6 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -564,7 +564,7 @@ public class UserRecord implements UserInfo {\n      * @param providerToLink provider info to be linked to this user\\'s account.\n      */\n     public UpdateRequest setProviderToLink(@NonNull UserProvider providerToLink) {\n-      properties.put(\"linkProviderUserInfo\", providerToLink);\n+      properties.put(\"linkProviderUserInfo\", checkNotNull(providerToLink));\n       return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODA1Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597328056", "bodyText": "I'd just forego the explicit check and let the cast error pop up. This case should never occur since the writes to the properties map is managed by our code.", "author": "hiranya911", "createdAt": "2021-03-19T00:25:00Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");", "originalCommit": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTEzMTc3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605131775", "bodyText": "Done. (And yes, this should never occur.)", "author": "rsgowman", "createdAt": "2021-03-31T18:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cf34cf1e71d71355e8c26a07e79dedda2ced9b3c", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 75e73c9..67c8ed6 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -606,14 +606,25 @@ public class UserRecord implements UserInfo {\n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n         Object deleteProvider = copy.get(\"deleteProvider\");\n         if (deleteProvider != null) {\n-          if (!(deleteProvider instanceof Iterable<?>)) {\n-            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n-          }\n-\n           // Due to java's type erasure, we can't fully check the type. :(\n           @SuppressWarnings(\"unchecked\")\n           Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n \n+          // If we've been told to unlink the phone provider both via setting\n+          // phoneNumber to null *and* by setting providersToUnlink to include\n+          // 'phone', then we'll reject that. Though it might also be reasonable\n+          // to relax this restriction and just unlink it.\n+          for (String dp : deleteProviderIterable) {\n+            if (dp == \"phone\") {\n+              throw new IllegalArgumentException(\n+                  \"Both UpdateRequest.setPhoneNumber(null) and \"\n+                  + \"UpdateRequest.setProvidersToUnlink(['phone']) were set. To \"\n+                  + \"unlink from a phone provider, only specify \"\n+                  + \"UpdateRequest.setPhoneNumber(null).\");\n+\n+            }\n+          }\n+\n           copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()\n               .addAll(deleteProviderIterable)\n               .add(\"phone\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r597328645", "bodyText": "Should we handle the double specification case?\nuser.updateRequest()\n  .setPhoneNumber(null)\n  .setProvidersToUnlink(ImmutableList.of(\"phone\"))\n\nI remember handling this case is other languages.", "author": "hiranya911", "createdAt": "2021-03-19T00:26:37Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -569,7 +604,24 @@ UpdateRequest setValidSince(long epochSeconds) {\n       }\n \n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n-        copy.put(\"deleteProvider\", ImmutableList.of(\"phone\"));\n+        Object deleteProvider = copy.get(\"deleteProvider\");\n+        if (deleteProvider != null) {\n+          if (!(deleteProvider instanceof Iterable<?>)) {\n+            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n+          }\n+\n+          // Due to java's type erasure, we can't fully check the type. :(\n+          @SuppressWarnings(\"unchecked\")\n+          Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n+\n+          copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()", "originalCommit": "0bcaf694339d0e209291cb77a5c2ed61a6edcd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTE0MTQ3Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605141472", "bodyText": "Done. Note that this results in the IllegalArgumentException being wrapped in an ExecutionException, which is a little awkward. (Option 1)\nOption 2:\nWe can resolve that by pulling the property calculation out of the async portion. It's a bit more disruptive, and diverges from how get/posts are handled throughout the rest of the code base. Roughly:\nFirebaseUserManager.java:\n...\n- void updateUser(UserRecord.UpdateRequest request JsonFactory jsonFactory) {\n+ void updateUser(Map<String, Object> payload) {\n...\n\n(NB: This is not a public interface.)\nOption 3:\nAlternatively, we could just call request.getProperties() before the async portion and ignore the results. (i.e. call it twice.)\nI've left it as option 1 for now. lmk if you'd prefer 2 or 3.", "author": "rsgowman", "createdAt": "2021-03-31T18:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTkwNTc0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r605905744", "bodyText": "Would it make sense to enforce this constraint in the setters? We'd have to do so in both setPhoneNumber() and setProvidersToUnlink(), but I think we can reduce the duplication via some sort of a helper function. That would make argument validation consistent with the pattern currently used in this class.", "author": "hiranya911", "createdAt": "2021-04-01T19:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDg0NTA2MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/345#discussion_r610845060", "bodyText": "Yeah, that's better; done. I've removed the logic here, i.e. if we somehow get into a bad state, we won't notice it. (But now we shouldn't get into that state.)\nI didn't create a helper; there wasn't much duplication (though the exception itself is duplicated). If we set the value first and then checked, it would work out better... but that risks leaving the object in a bad state (eg if user catches and ignores the exception and then proceeds to use the object anyways.)", "author": "rsgowman", "createdAt": "2021-04-09T18:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMyODY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf34cf1e71d71355e8c26a07e79dedda2ced9b3c", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/UserRecord.java b/src/main/java/com/google/firebase/auth/UserRecord.java\nindex 75e73c9..67c8ed6 100644\n--- a/src/main/java/com/google/firebase/auth/UserRecord.java\n+++ b/src/main/java/com/google/firebase/auth/UserRecord.java\n\n@@ -606,14 +606,25 @@ public class UserRecord implements UserInfo {\n       if (copy.containsKey(\"phoneNumber\") && copy.get(\"phoneNumber\") == null) {\n         Object deleteProvider = copy.get(\"deleteProvider\");\n         if (deleteProvider != null) {\n-          if (!(deleteProvider instanceof Iterable<?>)) {\n-            throw new IllegalStateException(\"Contents of deleteProvider was not iterable\");\n-          }\n-\n           // Due to java's type erasure, we can't fully check the type. :(\n           @SuppressWarnings(\"unchecked\")\n           Iterable<String> deleteProviderIterable = (Iterable<String>)deleteProvider;\n \n+          // If we've been told to unlink the phone provider both via setting\n+          // phoneNumber to null *and* by setting providersToUnlink to include\n+          // 'phone', then we'll reject that. Though it might also be reasonable\n+          // to relax this restriction and just unlink it.\n+          for (String dp : deleteProviderIterable) {\n+            if (dp == \"phone\") {\n+              throw new IllegalArgumentException(\n+                  \"Both UpdateRequest.setPhoneNumber(null) and \"\n+                  + \"UpdateRequest.setProvidersToUnlink(['phone']) were set. To \"\n+                  + \"unlink from a phone provider, only specify \"\n+                  + \"UpdateRequest.setPhoneNumber(null).\");\n+\n+            }\n+          }\n+\n           copy.put(\"deleteProvider\", new ImmutableList.Builder<String>()\n               .addAll(deleteProviderIterable)\n               .add(\"phone\")\n"}}, {"oid": "cf34cf1e71d71355e8c26a07e79dedda2ced9b3c", "url": "https://github.com/firebase/firebase-admin-java/commit/cf34cf1e71d71355e8c26a07e79dedda2ced9b3c", "message": "review feedback", "committedDate": "2021-03-31T19:19:30Z", "type": "commit"}, {"oid": "e18af152e49548b4a54668210288d935b7577a0d", "url": "https://github.com/firebase/firebase-admin-java/commit/e18af152e49548b4a54668210288d935b7577a0d", "message": "review feedback", "committedDate": "2021-04-09T18:55:31Z", "type": "commit"}]}