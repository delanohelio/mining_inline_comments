{"pr_number": 449, "pr_title": "Moved tenant management code into a new package", "pr_createdAt": "2020-07-07T21:51:28Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/449", "timeline": [{"oid": "99d078e1529f3e62ac94a9d13b42152b27124e3b", "url": "https://github.com/firebase/firebase-admin-java/commit/99d078e1529f3e62ac94a9d13b42152b27124e3b", "message": "Multi-tenancy refactor experiment", "committedDate": "2020-07-02T18:43:40Z", "type": "commit"}, {"oid": "df7d86ae61015c0682a24de181715f26eb9b0225", "url": "https://github.com/firebase/firebase-admin-java/commit/df7d86ae61015c0682a24de181715f26eb9b0225", "message": "fix(auth): Completed tenant mgt refactor", "committedDate": "2020-07-07T21:38:13Z", "type": "commit"}, {"oid": "3d52e1789edccffbe488f2acfdc1499a2572567c", "url": "https://github.com/firebase/firebase-admin-java/commit/3d52e1789edccffbe488f2acfdc1499a2572567c", "message": "Added license header to new class", "committedDate": "2020-07-07T21:51:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzODIxMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452138213", "bodyText": "Why don't we need to need to check if the app has been destroyed in the tenant manager?", "author": "micahstairs", "createdAt": "2020-07-09T11:04:50Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -213,12 +214,7 @@ FirebaseTokenVerifier getSessionCookieVerifier(boolean checkRevoked) {\n   }\n \n   @Override\n-  protected void doDestroy() {\n-    // Only destroy the tenant manager if it has been created.\n-    if (tenantManagerCreated.get()) {\n-      getTenantManager().destroy();\n-    }\n-  }\n+  protected void doDestroy() { }", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3MjE5OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452372199", "bodyText": "I think this is something we ought to get rid of from the entire codebase. FirebaseAuth is the only class that does this today. I think it's fair to not do it in any new classes.", "author": "hiranya911", "createdAt": "2020-07-09T17:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzODIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NDk0Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452394946", "bodyText": "Ack.", "author": "micahstairs", "createdAt": "2020-07-09T18:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzODIxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzODg4Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452138882", "bodyText": "This variable is no longer needed now that doDestroy is a no-op.", "author": "micahstairs", "createdAt": "2020-07-09T11:06:05Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -53,7 +54,7 @@\n       @Override\n       public TenantManager get() {\n         tenantManagerCreated.set(true);", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDE5Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452390197", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEzODg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseAuth.java b/src/main/java/com/google/firebase/auth/FirebaseAuth.java\nindex 9192054..f44bd23 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseAuth.java\n\n@@ -46,14 +45,12 @@ public final class FirebaseAuth extends AbstractFirebaseAuth {\n   private static final String SERVICE_ID = FirebaseAuth.class.getName();\n \n   private final Supplier<TenantManager> tenantManager;\n-  private final AtomicBoolean tenantManagerCreated = new AtomicBoolean(false);\n \n   FirebaseAuth(final Builder builder) {\n     super(builder);\n     tenantManager = threadSafeMemoize(new Supplier<TenantManager>() {\n       @Override\n       public TenantManager get() {\n-        tenantManagerCreated.set(true);\n         return new TenantManager(builder.firebaseApp);\n       }\n     });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NjE3NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452146174", "bodyText": "Did you purposefully omit some error codes from this map? e.g. TENANT_ID_MISMATCH", "author": "micahstairs", "createdAt": "2020-07-09T11:21:21Z", "path": "src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSortedSet;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.internal.SdkUtils;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Provides a convenient API for making REST calls to the Firebase Auth backend servers.\n+ */\n+public final class AuthHttpClient {\n+\n+  private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n+\n+  private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n+\n+  private static final String INTERNAL_ERROR = \"internal-error\";\n+\n+  // Map of server-side error codes to SDK error codes.\n+  // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n+  private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n+      .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n+      .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n+      .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n+      .put(\"EMAIL_EXISTS\", \"email-already-exists\")\n+      .put(\"INVALID_CLAIMS\", \"invalid-claims\")\n+      .put(\"INVALID_EMAIL\", \"invalid-email\")\n+      .put(\"INVALID_PAGE_SELECTION\", \"invalid-page-token\")\n+      .put(\"INVALID_PHONE_NUMBER\", \"invalid-phone-number\")", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3NTQyMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452375420", "bodyText": "Yes. That's not a real error code sent by the Auth backend.", "author": "hiranya911", "createdAt": "2020-07-09T17:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NjE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NTE1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452395158", "bodyText": "Ack.", "author": "micahstairs", "createdAt": "2020-07-09T18:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NjE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\nindex a0fd5d5..ad77236 100644\n--- a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n+++ b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n\n@@ -44,17 +44,20 @@ import java.util.Set;\n  */\n public final class AuthHttpClient {\n \n+  public static final String CONFIGURATION_NOT_FOUND_ERROR = \"configuration-not-found\";\n+  public static final String INTERNAL_ERROR = \"internal-error\";\n+  public static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n+  public static final String USER_NOT_FOUND_ERROR = \"user-not-found\";\n+\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n   private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n \n-  private static final String INTERNAL_ERROR = \"internal-error\";\n-\n   // Map of server-side error codes to SDK error codes.\n   // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n   private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n       .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n-      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", CONFIGURATION_NOT_FOUND_ERROR)\n       .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n       .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n       .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0Njc4MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452146780", "bodyText": "Should we use a broader term than \"user management backend service\" if this is being used for tenant/provider-related requests too?", "author": "micahstairs", "createdAt": "2020-07-09T11:22:42Z", "path": "src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSortedSet;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.internal.SdkUtils;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Provides a convenient API for making REST calls to the Firebase Auth backend servers.\n+ */\n+public final class AuthHttpClient {\n+\n+  private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n+\n+  private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n+\n+  private static final String INTERNAL_ERROR = \"internal-error\";\n+\n+  // Map of server-side error codes to SDK error codes.\n+  // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n+  private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n+      .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n+      .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n+      .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n+      .put(\"EMAIL_EXISTS\", \"email-already-exists\")\n+      .put(\"INVALID_CLAIMS\", \"invalid-claims\")\n+      .put(\"INVALID_EMAIL\", \"invalid-email\")\n+      .put(\"INVALID_PAGE_SELECTION\", \"invalid-page-token\")\n+      .put(\"INVALID_PHONE_NUMBER\", \"invalid-phone-number\")\n+      .put(\"PHONE_NUMBER_EXISTS\", \"phone-number-already-exists\")\n+      .put(\"PROJECT_NOT_FOUND\", \"project-not-found\")\n+      .put(\"USER_NOT_FOUND\", \"user-not-found\")\n+      .put(\"WEAK_PASSWORD\", \"invalid-password\")\n+      .put(\"UNAUTHORIZED_DOMAIN\", \"unauthorized-continue-uri\")\n+      .put(\"INVALID_DYNAMIC_LINK_DOMAIN\", \"invalid-dynamic-link-domain\")\n+      .put(\"TENANT_NOT_FOUND\", \"tenant-not-found\")\n+      .build();\n+\n+  private final JsonFactory jsonFactory;\n+  private final HttpRequestFactory requestFactory;\n+\n+  private HttpResponseInterceptor interceptor;\n+\n+  public AuthHttpClient(JsonFactory jsonFactory, HttpRequestFactory requestFactory) {\n+    this.jsonFactory = jsonFactory;\n+    this.requestFactory = requestFactory;\n+  }\n+\n+  public static Set<String> generateMask(Map<String, Object> properties) {\n+    ImmutableSortedSet.Builder<String> maskBuilder = ImmutableSortedSet.naturalOrder();\n+    for (Map.Entry<String, Object> entry : properties.entrySet()) {\n+      if (entry.getValue() instanceof Map) {\n+        Set<String> childMask = generateMask((Map<String, Object>) entry.getValue());\n+        for (String childProperty : childMask) {\n+          maskBuilder.add(entry.getKey() + \".\" + childProperty);\n+        }\n+      } else {\n+        maskBuilder.add(entry.getKey());\n+      }\n+    }\n+    return maskBuilder.build();\n+  }\n+\n+  public void setInterceptor(HttpResponseInterceptor interceptor) {\n+    this.interceptor = interceptor;\n+  }\n+\n+  public <T> T sendRequest(\n+      String method, GenericUrl url,\n+      @Nullable Object content, Class<T> clazz) throws FirebaseAuthException {\n+\n+    checkArgument(!Strings.isNullOrEmpty(method), \"method must not be null or empty\");\n+    checkNotNull(url, \"url must not be null\");\n+    checkNotNull(clazz, \"response class must not be null\");\n+    HttpResponse response = null;\n+    try {\n+      HttpContent httpContent = content != null ? new JsonHttpContent(jsonFactory, content) : null;\n+      HttpRequest request =\n+          requestFactory.buildRequest(method.equals(\"PATCH\") ? \"POST\" : method, url, httpContent);\n+      request.setParser(new JsonObjectParser(jsonFactory));\n+      request.getHeaders().set(CLIENT_VERSION_HEADER, CLIENT_VERSION);\n+      if (method.equals(\"PATCH\")) {\n+        request.getHeaders().set(\"X-HTTP-Method-Override\", \"PATCH\");\n+      }\n+      request.setResponseInterceptor(interceptor);\n+      response = request.execute();\n+      return response.parseAs(clazz);\n+    } catch (HttpResponseException e) {\n+      // Server responded with an HTTP error\n+      handleHttpError(e);\n+      return null;\n+    } catch (IOException e) {\n+      // All other IO errors (Connection refused, reset, parse error etc.)\n+      throw new FirebaseAuthException(\n+          INTERNAL_ERROR, \"Error while calling user management backend service\", e);", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDE1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452390158", "bodyText": "Good point. Done.", "author": "hiranya911", "createdAt": "2020-07-09T17:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0Njc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\nindex a0fd5d5..ad77236 100644\n--- a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n+++ b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n\n@@ -44,17 +44,20 @@ import java.util.Set;\n  */\n public final class AuthHttpClient {\n \n+  public static final String CONFIGURATION_NOT_FOUND_ERROR = \"configuration-not-found\";\n+  public static final String INTERNAL_ERROR = \"internal-error\";\n+  public static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n+  public static final String USER_NOT_FOUND_ERROR = \"user-not-found\";\n+\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n   private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n \n-  private static final String INTERNAL_ERROR = \"internal-error\";\n-\n   // Map of server-side error codes to SDK error codes.\n   // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n   private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n       .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n-      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", CONFIGURATION_NOT_FOUND_ERROR)\n       .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n       .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n       .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NzExNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452147114", "bodyText": "Should we use a broader term than \"User management service\" if this is being used for tenant/provider-related requests too?", "author": "micahstairs", "createdAt": "2020-07-09T11:23:25Z", "path": "src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpResponseException;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSortedSet;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.internal.SdkUtils;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Provides a convenient API for making REST calls to the Firebase Auth backend servers.\n+ */\n+public final class AuthHttpClient {\n+\n+  private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n+\n+  private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n+\n+  private static final String INTERNAL_ERROR = \"internal-error\";\n+\n+  // Map of server-side error codes to SDK error codes.\n+  // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n+  private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n+      .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n+      .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n+      .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n+      .put(\"EMAIL_EXISTS\", \"email-already-exists\")\n+      .put(\"INVALID_CLAIMS\", \"invalid-claims\")\n+      .put(\"INVALID_EMAIL\", \"invalid-email\")\n+      .put(\"INVALID_PAGE_SELECTION\", \"invalid-page-token\")\n+      .put(\"INVALID_PHONE_NUMBER\", \"invalid-phone-number\")\n+      .put(\"PHONE_NUMBER_EXISTS\", \"phone-number-already-exists\")\n+      .put(\"PROJECT_NOT_FOUND\", \"project-not-found\")\n+      .put(\"USER_NOT_FOUND\", \"user-not-found\")\n+      .put(\"WEAK_PASSWORD\", \"invalid-password\")\n+      .put(\"UNAUTHORIZED_DOMAIN\", \"unauthorized-continue-uri\")\n+      .put(\"INVALID_DYNAMIC_LINK_DOMAIN\", \"invalid-dynamic-link-domain\")\n+      .put(\"TENANT_NOT_FOUND\", \"tenant-not-found\")\n+      .build();\n+\n+  private final JsonFactory jsonFactory;\n+  private final HttpRequestFactory requestFactory;\n+\n+  private HttpResponseInterceptor interceptor;\n+\n+  public AuthHttpClient(JsonFactory jsonFactory, HttpRequestFactory requestFactory) {\n+    this.jsonFactory = jsonFactory;\n+    this.requestFactory = requestFactory;\n+  }\n+\n+  public static Set<String> generateMask(Map<String, Object> properties) {\n+    ImmutableSortedSet.Builder<String> maskBuilder = ImmutableSortedSet.naturalOrder();\n+    for (Map.Entry<String, Object> entry : properties.entrySet()) {\n+      if (entry.getValue() instanceof Map) {\n+        Set<String> childMask = generateMask((Map<String, Object>) entry.getValue());\n+        for (String childProperty : childMask) {\n+          maskBuilder.add(entry.getKey() + \".\" + childProperty);\n+        }\n+      } else {\n+        maskBuilder.add(entry.getKey());\n+      }\n+    }\n+    return maskBuilder.build();\n+  }\n+\n+  public void setInterceptor(HttpResponseInterceptor interceptor) {\n+    this.interceptor = interceptor;\n+  }\n+\n+  public <T> T sendRequest(\n+      String method, GenericUrl url,\n+      @Nullable Object content, Class<T> clazz) throws FirebaseAuthException {\n+\n+    checkArgument(!Strings.isNullOrEmpty(method), \"method must not be null or empty\");\n+    checkNotNull(url, \"url must not be null\");\n+    checkNotNull(clazz, \"response class must not be null\");\n+    HttpResponse response = null;\n+    try {\n+      HttpContent httpContent = content != null ? new JsonHttpContent(jsonFactory, content) : null;\n+      HttpRequest request =\n+          requestFactory.buildRequest(method.equals(\"PATCH\") ? \"POST\" : method, url, httpContent);\n+      request.setParser(new JsonObjectParser(jsonFactory));\n+      request.getHeaders().set(CLIENT_VERSION_HEADER, CLIENT_VERSION);\n+      if (method.equals(\"PATCH\")) {\n+        request.getHeaders().set(\"X-HTTP-Method-Override\", \"PATCH\");\n+      }\n+      request.setResponseInterceptor(interceptor);\n+      response = request.execute();\n+      return response.parseAs(clazz);\n+    } catch (HttpResponseException e) {\n+      // Server responded with an HTTP error\n+      handleHttpError(e);\n+      return null;\n+    } catch (IOException e) {\n+      // All other IO errors (Connection refused, reset, parse error etc.)\n+      throw new FirebaseAuthException(\n+          INTERNAL_ERROR, \"Error while calling user management backend service\", e);\n+    } finally {\n+      if (response != null) {\n+        try {\n+          response.disconnect();\n+        } catch (IOException ignored) {\n+          // Ignored\n+        }\n+      }\n+    }\n+  }\n+\n+  private void handleHttpError(HttpResponseException e) throws FirebaseAuthException {\n+    try {\n+      HttpErrorResponse response = jsonFactory.fromString(e.getContent(), HttpErrorResponse.class);\n+      String code = ERROR_CODES.get(response.getErrorCode());\n+      if (code != null) {\n+        throw new FirebaseAuthException(code, \"User management service responded with an error\", e);", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDExOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452390119", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0NzExNA=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\nindex a0fd5d5..ad77236 100644\n--- a/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n+++ b/src/main/java/com/google/firebase/auth/internal/AuthHttpClient.java\n\n@@ -44,17 +44,20 @@ import java.util.Set;\n  */\n public final class AuthHttpClient {\n \n+  public static final String CONFIGURATION_NOT_FOUND_ERROR = \"configuration-not-found\";\n+  public static final String INTERNAL_ERROR = \"internal-error\";\n+  public static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n+  public static final String USER_NOT_FOUND_ERROR = \"user-not-found\";\n+\n   private static final String CLIENT_VERSION_HEADER = \"X-Client-Version\";\n \n   private static final String CLIENT_VERSION = \"Java/Admin/\" + SdkUtils.getVersion();\n \n-  private static final String INTERNAL_ERROR = \"internal-error\";\n-\n   // Map of server-side error codes to SDK error codes.\n   // SDK error codes defined at: https://firebase.google.com/docs/auth/admin/errors\n   private static final Map<String, String> ERROR_CODES = ImmutableMap.<String, String>builder()\n       .put(\"CLAIMS_TOO_LARGE\", \"claims-too-large\")\n-      .put(\"CONFIGURATION_NOT_FOUND\", \"configuration-not-found\")\n+      .put(\"CONFIGURATION_NOT_FOUND\", CONFIGURATION_NOT_FOUND_ERROR)\n       .put(\"INSUFFICIENT_PERMISSION\", \"insufficient-permission\")\n       .put(\"DUPLICATE_EMAIL\", \"email-already-exists\")\n       .put(\"DUPLICATE_LOCAL_ID\", \"uid-already-exists\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTU0Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452149546", "bodyText": "Wouldn't it be nice to keep all of these constants in one place? AuthHttpClient is a good spot to keep them. And it appears INTERNAL_ERROR is currently being duplicated both here and AuthHttpClient.", "author": "micahstairs", "createdAt": "2020-07-09T11:28:13Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -71,37 +61,10 @@\n  */\n class FirebaseUserManager {\n \n-  static final String CONFIGURATION_NOT_FOUND_ERROR = \"configuration-not-found\";\n-  static final String TENANT_ID_MISMATCH_ERROR = \"tenant-id-mismatch\";\n-  static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n   static final String USER_NOT_FOUND_ERROR = \"user-not-found\";\n   static final String INTERNAL_ERROR = \"internal-error\";", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3ODg0OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452378848", "bodyText": "Moved the remaining 2 error codes to AuthHttpClient", "author": "hiranya911", "createdAt": "2020-07-09T17:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 04976a4..a2c17aa 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -61,9 +61,6 @@ import java.util.Set;\n  */\n class FirebaseUserManager {\n \n-  static final String USER_NOT_FOUND_ERROR = \"user-not-found\";\n-  static final String INTERNAL_ERROR = \"internal-error\";\n-\n   static final int MAX_LIST_PROVIDER_CONFIGS_RESULTS = 100;\n   static final int MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n   static final int MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDQ3Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452150476", "bodyText": "Can getTenantUrlSuffix be removed now that the tenant-related methods have been removed?", "author": "micahstairs", "createdAt": "2020-07-09T11:30:13Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -449,27 +367,12 @@ ListSamlProviderConfigsResponse listSamlProviderConfigs(int maxResults, String p\n \n   void deleteOidcProviderConfig(String providerId) throws FirebaseAuthException {\n     GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n-    sendRequest(\"DELETE\", url, null, GenericJson.class);\n+    httpClient.sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n   void deleteSamlProviderConfig(String providerId) throws FirebaseAuthException {\n     GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getSamlUrlSuffix(providerId));\n-    sendRequest(\"DELETE\", url, null, GenericJson.class);\n-  }\n-\n-  private static Set<String> generateMask(Map<String, Object> properties) {\n-    ImmutableSortedSet.Builder<String> maskBuilder = ImmutableSortedSet.naturalOrder();\n-    for (Map.Entry<String, Object> entry : properties.entrySet()) {\n-      if (entry.getValue() instanceof Map) {\n-        Set<String> childMask = generateMask((Map<String, Object>) entry.getValue());\n-        for (String childProperty : childMask) {\n-          maskBuilder.add(entry.getKey() + \".\" + childProperty);\n-        }\n-      } else {\n-        maskBuilder.add(entry.getKey());\n-      }\n-    }\n-    return maskBuilder.build();\n+    httpClient.sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n   private static String getTenantUrlSuffix(String tenantId) {", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDA0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452390044", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 04976a4..a2c17aa 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -360,7 +366,8 @@ class FirebaseUserManager {\n     ListSamlProviderConfigsResponse response =\n         httpClient.sendRequest(\"GET\", url, null, ListSamlProviderConfigsResponse.class);\n     if (response == null) {\n-      throw new FirebaseAuthException(INTERNAL_ERROR, \"Failed to retrieve provider configs.\");\n+      throw new FirebaseAuthException(\n+          AuthHttpClient.INTERNAL_ERROR, \"Failed to retrieve provider configs.\");\n     }\n     return response;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTI4OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452151288", "bodyText": "Consolidate these errors in AuthHttpClient? INTERNAL_ERROR is currently being duplicated across both.", "author": "micahstairs", "createdAt": "2020-07-09T11:31:55Z", "path": "src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.multitenancy;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.auth.internal.AuthHttpClient;\n+import com.google.firebase.auth.internal.ListTenantsResponse;\n+import com.google.firebase.internal.ApiClientUtils;\n+import java.util.Map;\n+\n+final class FirebaseTenantClient {\n+\n+  static final int MAX_LIST_TENANTS_RESULTS = 100;\n+\n+  static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n+\n+  static final String INTERNAL_ERROR = \"internal-error\";", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDAxMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452390011", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java b/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\nindex 98dd695..1278e63 100644\n--- a/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\n+++ b/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\n\n@@ -39,10 +39,6 @@ final class FirebaseTenantClient {\n \n   static final int MAX_LIST_TENANTS_RESULTS = 100;\n \n-  static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n-\n-  static final String INTERNAL_ERROR = \"internal-error\";\n-\n   private static final String ID_TOOLKIT_URL =\n       \"https://identitytoolkit.googleapis.com/%s/projects/%s\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTkwOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452151908", "bodyText": "Add period after \"token\".", "author": "micahstairs", "createdAt": "2020-07-09T11:33:17Z", "path": "src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.multitenancy;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n+import com.google.api.client.json.GenericJson;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.auth.internal.AuthHttpClient;\n+import com.google.firebase.auth.internal.ListTenantsResponse;\n+import com.google.firebase.internal.ApiClientUtils;\n+import java.util.Map;\n+\n+final class FirebaseTenantClient {\n+\n+  static final int MAX_LIST_TENANTS_RESULTS = 100;\n+\n+  static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n+\n+  static final String INTERNAL_ERROR = \"internal-error\";\n+\n+  private static final String ID_TOOLKIT_URL =\n+      \"https://identitytoolkit.googleapis.com/%s/projects/%s\";\n+\n+  private final String tenantMgtBaseUrl;\n+  private final AuthHttpClient httpClient;\n+\n+  FirebaseTenantClient(FirebaseApp app) {\n+    checkNotNull(app, \"FirebaseApp must not be null\");\n+    String projectId = ImplFirebaseTrampolines.getProjectId(app);\n+    checkArgument(!Strings.isNullOrEmpty(projectId),\n+        \"Project ID is required to access the auth service. Use a service account credential or \"\n+            + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n+            + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n+    this.tenantMgtBaseUrl = String.format(ID_TOOLKIT_URL, \"v2\", projectId);\n+    JsonFactory jsonFactory = app.getOptions().getJsonFactory();\n+    HttpRequestFactory requestFactory = ApiClientUtils.newAuthorizedRequestFactory(app);\n+    this.httpClient = new AuthHttpClient(jsonFactory, requestFactory);\n+  }\n+\n+  void setInterceptor(HttpResponseInterceptor interceptor) {\n+    httpClient.setInterceptor(interceptor);\n+  }\n+\n+  Tenant getTenant(String tenantId) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(tenantId));\n+    return httpClient.sendRequest(\"GET\", url, null, Tenant.class);\n+  }\n+\n+  Tenant createTenant(Tenant.CreateRequest request) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + \"/tenants\");\n+    return httpClient.sendRequest(\"POST\", url, request.getProperties(), Tenant.class);\n+  }\n+\n+  Tenant updateTenant(Tenant.UpdateRequest request) throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(request.getTenantId()));\n+    url.put(\"updateMask\", Joiner.on(\",\").join(AuthHttpClient.generateMask(properties)));\n+    return httpClient.sendRequest(\"PATCH\", url, properties, Tenant.class);\n+  }\n+\n+  void deleteTenant(String tenantId) throws FirebaseAuthException {\n+    GenericUrl url = new GenericUrl(tenantMgtBaseUrl + getTenantUrlSuffix(tenantId));\n+    httpClient.sendRequest(\"DELETE\", url, null, GenericJson.class);\n+  }\n+\n+  ListTenantsResponse listTenants(int maxResults, String pageToken)\n+      throws FirebaseAuthException {\n+    ImmutableMap.Builder<String, Object> builder =\n+        ImmutableMap.<String, Object>builder().put(\"pageSize\", maxResults);\n+    if (pageToken != null) {\n+      checkArgument(!pageToken.equals(\n+          ListTenantsPage.END_OF_LIST), \"Invalid end of list page token\");", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTk5OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389998", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java b/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\nindex 98dd695..1278e63 100644\n--- a/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\n+++ b/src/main/java/com/google/firebase/auth/multitenancy/FirebaseTenantClient.java\n\n@@ -39,10 +39,6 @@ final class FirebaseTenantClient {\n \n   static final int MAX_LIST_TENANTS_RESULTS = 100;\n \n-  static final String TENANT_NOT_FOUND_ERROR = \"tenant-not-found\";\n-\n-  static final String INTERNAL_ERROR = \"internal-error\";\n-\n   private static final String ID_TOOLKIT_URL =\n       \"https://identitytoolkit.googleapis.com/%s/projects/%s\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MjQwOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452152409", "bodyText": "Rename this variable to tenantClient. It's not a FirebaseUserManager anywmore!", "author": "micahstairs", "createdAt": "2020-07-09T11:34:21Z", "path": "src/main/java/com/google/firebase/auth/multitenancy/ListTenantsPage.java", "diffHunk": "@@ -198,9 +197,9 @@ ListTenantsResponse fetch(int maxResults, String pageToken)\n \n   static class DefaultTenantSource implements TenantSource {\n \n-    private final FirebaseUserManager userManager;\n+    private final FirebaseTenantClient userManager;", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTk2Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389962", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/multitenancy/ListTenantsPage.java b/src/main/java/com/google/firebase/auth/multitenancy/ListTenantsPage.java\nindex 244508a..c1f393d 100644\n--- a/src/main/java/com/google/firebase/auth/multitenancy/ListTenantsPage.java\n+++ b/src/main/java/com/google/firebase/auth/multitenancy/ListTenantsPage.java\n\n@@ -197,16 +197,16 @@ public class ListTenantsPage implements Page<Tenant> {\n \n   static class DefaultTenantSource implements TenantSource {\n \n-    private final FirebaseTenantClient userManager;\n+    private final FirebaseTenantClient tenantClient;\n \n-    DefaultTenantSource(FirebaseTenantClient userManager) {\n-      this.userManager = checkNotNull(userManager, \"User manager must not be null.\");\n+    DefaultTenantSource(FirebaseTenantClient tenantClient) {\n+      this.tenantClient = checkNotNull(tenantClient, \"Tenant client must not be null.\");\n     }\n \n     @Override\n     public ListTenantsResponse fetch(int maxResults, String pageToken)\n         throws FirebaseAuthException {\n-      return userManager.listTenants(maxResults, pageToken);\n+      return tenantClient.listTenants(maxResults, pageToken);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MzMzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452153333", "bodyText": "This should be {@link TenantManager}.", "author": "micahstairs", "createdAt": "2020-07-09T11:36:21Z", "path": "src/main/java/com/google/firebase/auth/multitenancy/TenantManager.java", "diffHunk": "@@ -14,45 +14,54 @@\n  * limitations under the License.\n  */\n \n-package com.google.firebase.auth;\n+package com.google.firebase.auth.multitenancy;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n \n-import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.http.HttpResponseInterceptor;\n import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n import com.google.firebase.FirebaseApp;\n-import com.google.firebase.auth.ListTenantsPage.DefaultTenantSource;\n-import com.google.firebase.auth.ListTenantsPage.PageFactory;\n-import com.google.firebase.auth.ListTenantsPage.TenantSource;\n-import com.google.firebase.auth.Tenant.CreateRequest;\n-import com.google.firebase.auth.Tenant.UpdateRequest;\n+import com.google.firebase.auth.FirebaseAuth;\n+import com.google.firebase.auth.FirebaseAuthException;\n+import com.google.firebase.auth.multitenancy.ListTenantsPage.DefaultTenantSource;\n+import com.google.firebase.auth.multitenancy.ListTenantsPage.PageFactory;\n+import com.google.firebase.auth.multitenancy.ListTenantsPage.TenantSource;\n+import com.google.firebase.auth.multitenancy.Tenant.CreateRequest;\n+import com.google.firebase.auth.multitenancy.Tenant.UpdateRequest;\n import com.google.firebase.internal.CallableOperation;\n import com.google.firebase.internal.NonNull;\n import com.google.firebase.internal.Nullable;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n  * This class can be used to perform a variety of tenant-related operations, including creating,\n  * updating, and listing tenants.\n  */\n public final class TenantManager {\n \n-  private final Object lock = new Object();\n-  private final AtomicBoolean destroyed = new AtomicBoolean(false);\n-\n   private final FirebaseApp firebaseApp;\n-  private final FirebaseUserManager userManager;\n+  private final FirebaseTenantClient tenantClient;\n   private final Map<String, TenantAwareFirebaseAuth> tenantAwareAuths;\n \n-  TenantManager(FirebaseApp firebaseApp, FirebaseUserManager userManager) {\n+  /**", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTkzOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389939", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MzMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/multitenancy/TenantManager.java b/src/main/java/com/google/firebase/auth/multitenancy/TenantManager.java\nindex e0b43c1..11f26b0 100644\n--- a/src/main/java/com/google/firebase/auth/multitenancy/TenantManager.java\n+++ b/src/main/java/com/google/firebase/auth/multitenancy/TenantManager.java\n\n@@ -48,7 +48,7 @@ public final class TenantManager {\n   private final Map<String, TenantAwareFirebaseAuth> tenantAwareAuths;\n \n   /**\n-   * Creates a new <code>TenantManager</code> instance. For internal use only. Use\n+   * Creates a new {@link TenantManager} instance. For internal use only. Use\n    * {@link FirebaseAuth#getTenantManager()} to obtain an instance for regular use.\n    *\n    * @hide\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1Mzg3Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452153876", "bodyText": "Is TENANTS_BASE_URL still needed?", "author": "micahstairs", "createdAt": "2020-07-09T11:37:27Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -78,11 +82,13 @@\n           .setAndroidInstallApp(true)\n           .setAndroidMinimumVersion(\"6\")\n           .build();\n+\n   private static final Map<String, Object> ACTION_CODE_SETTINGS_MAP =\n           ACTION_CODE_SETTINGS.getProperties();\n \n   private static final String PROJECT_BASE_URL =\n       \"https://identitytoolkit.googleapis.com/v2/projects/test-project-id\";\n+\n   private static final String TENANTS_BASE_URL = PROJECT_BASE_URL + \"/tenants\";", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzQ4Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452383483", "bodyText": "There are tests in this file that makes tenant-aware user management calls.", "author": "hiranya911", "createdAt": "2020-07-09T17:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1Mzg3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NDI4Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452154283", "bodyText": "Consolidate in AuthHttpClient?", "author": "micahstairs", "createdAt": "2020-07-09T11:38:21Z", "path": "src/test/java/com/google/firebase/auth/ProviderConfigTestUtils.java", "diffHunk": "@@ -26,68 +26,72 @@\n import java.util.concurrent.ExecutionException;\n import org.junit.rules.ExternalResource;\n \n-class ProviderConfigTestUtils {\n+public class ProviderConfigTestUtils {\n \n-  static void assertOidcProviderConfigDoesNotExist(\n+  static final String CONFIGURATION_NOT_FOUND_ERROR = \"configuration-not-found\";", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTg3Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389873", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NDI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/ProviderConfigTestUtils.java b/src/test/java/com/google/firebase/auth/ProviderConfigTestUtils.java\nindex 2b98e0c..c01ac65 100644\n--- a/src/test/java/com/google/firebase/auth/ProviderConfigTestUtils.java\n+++ b/src/test/java/com/google/firebase/auth/ProviderConfigTestUtils.java\n\n@@ -21,6 +21,7 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import com.google.firebase.auth.internal.AuthHttpClient;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.ExecutionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NDcwNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452154705", "bodyText": "LLC", "author": "micahstairs", "createdAt": "2020-07-09T11:39:18Z", "path": "src/test/java/com/google/firebase/auth/multitenancy/FirebaseTenantClientTest.java", "diffHunk": "@@ -0,0 +1,362 @@\n+/*\n+ * Copyright 2020 Google Inc.", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTg0OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389848", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NDcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/multitenancy/FirebaseTenantClientTest.java b/src/test/java/com/google/firebase/auth/multitenancy/FirebaseTenantClientTest.java\nindex 70949b1..36660dc 100644\n--- a/src/test/java/com/google/firebase/auth/multitenancy/FirebaseTenantClientTest.java\n+++ b/src/test/java/com/google/firebase/auth/multitenancy/FirebaseTenantClientTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Google Inc.\n+ * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NTMxMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452155313", "bodyText": "Use a static import for Assert.assertEquals?", "author": "micahstairs", "createdAt": "2020-07-09T11:40:33Z", "path": "src/test/java/com/google/firebase/auth/multitenancy/TenantAwareFirebaseAuthIT.java", "diffHunk": "@@ -247,7 +258,7 @@ public void testVerifyTokenWithWrongTenantAwareClient() throws Exception {\n       fail(\"No error thrown for verifying a token with the wrong tenant-aware client\");\n     } catch (ExecutionException e) {\n       assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      assertEquals(FirebaseUserManager.TENANT_ID_MISMATCH_ERROR,\n+      Assert.assertEquals(\"tenant-id-mismatch\",", "originalCommit": "3d52e1789edccffbe488f2acfdc1499a2572567c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTgxMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/449#discussion_r452389811", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-09T17:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NTMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/multitenancy/TenantAwareFirebaseAuthIT.java b/src/test/java/com/google/firebase/auth/multitenancy/TenantAwareFirebaseAuthIT.java\nindex e899287..61a8419 100644\n--- a/src/test/java/com/google/firebase/auth/multitenancy/TenantAwareFirebaseAuthIT.java\n+++ b/src/test/java/com/google/firebase/auth/multitenancy/TenantAwareFirebaseAuthIT.java\n\n@@ -258,7 +257,7 @@ public class TenantAwareFirebaseAuthIT {\n       fail(\"No error thrown for verifying a token with the wrong tenant-aware client\");\n     } catch (ExecutionException e) {\n       assertTrue(e.getCause() instanceof FirebaseAuthException);\n-      Assert.assertEquals(\"tenant-id-mismatch\",\n+      assertEquals(\"tenant-id-mismatch\",\n           ((FirebaseAuthException) e.getCause()).getErrorCode());\n     }\n   }\n"}}, {"oid": "eb329c58e5debf4ff12774c43e7a592c7a516c13", "url": "https://github.com/firebase/firebase-admin-java/commit/eb329c58e5debf4ff12774c43e7a592c7a516c13", "message": "Responding to code review comments: Consolidated error codes in AuthHttpClient", "committedDate": "2020-07-09T17:50:34Z", "type": "commit"}]}