{"pr_number": 479, "pr_title": "Add parameters to Remote Config template", "pr_createdAt": "2020-09-25T21:37:03Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/479", "timeline": [{"oid": "d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "url": "https://github.com/firebase/firebase-admin-java/commit/d6a9b6b31f47cbb9cb3a56b05978c68ebdfba05d", "message": "Add parameters to template", "committedDate": "2020-09-28T19:01:07Z", "type": "forcePushed"}, {"oid": "5e0dc254a6b02c55be520412ad9e695e710a9dc0", "url": "https://github.com/firebase/firebase-admin-java/commit/5e0dc254a6b02c55be520412ad9e695e710a9dc0", "message": "Add parameters to template", "committedDate": "2020-09-28T19:03:55Z", "type": "forcePushed"}, {"oid": "b5878b32e4e23a415cbed2e16b853f80103d7f67", "url": "https://github.com/firebase/firebase-admin-java/commit/b5878b32e4e23a415cbed2e16b853f80103d7f67", "message": "Add parameters to template", "committedDate": "2020-09-28T19:06:10Z", "type": "forcePushed"}, {"oid": "fa23a4dd9eb52da53d08301dca42f7e2124f083d", "url": "https://github.com/firebase/firebase-admin-java/commit/fa23a4dd9eb52da53d08301dca42f7e2124f083d", "message": "Add parameters to template", "committedDate": "2020-09-28T19:08:20Z", "type": "commit"}, {"oid": "fa23a4dd9eb52da53d08301dca42f7e2124f083d", "url": "https://github.com/firebase/firebase-admin-java/commit/fa23a4dd9eb52da53d08301dca42f7e2124f083d", "message": "Add parameters to template", "committedDate": "2020-09-28T19:08:20Z", "type": "forcePushed"}, {"oid": "83c69db20943d3a9a121b10121de8aded3d1c06f", "url": "https://github.com/firebase/firebase-admin-java/commit/83c69db20943d3a9a121b10121de8aded3d1c06f", "message": "Fix no op in conditional values", "committedDate": "2020-09-28T20:42:46Z", "type": "commit"}, {"oid": "83c69db20943d3a9a121b10121de8aded3d1c06f", "url": "https://github.com/firebase/firebase-admin-java/commit/83c69db20943d3a9a121b10121de8aded3d1c06f", "message": "Fix no op in conditional values", "committedDate": "2020-09-28T20:42:46Z", "type": "forcePushed"}, {"oid": "c001c94d0f451d8e0e7e02517689ec1e225fe206", "url": "https://github.com/firebase/firebase-admin-java/commit/c001c94d0f451d8e0e7e02517689ec1e225fe206", "message": "Fix empty conditional values", "committedDate": "2020-09-28T21:31:34Z", "type": "commit"}, {"oid": "625f514beb0d09b6a6d333ab1484726204a8f7cd", "url": "https://github.com/firebase/firebase-admin-java/commit/625f514beb0d09b6a6d333ab1484726204a8f7cd", "message": "Introduce public and response types", "committedDate": "2020-09-29T17:48:27Z", "type": "commit"}, {"oid": "6ce6806ba11a2e9a46af600efa438639217355e6", "url": "https://github.com/firebase/firebase-admin-java/commit/6ce6806ba11a2e9a46af600efa438639217355e6", "message": "Cleanup unused imports", "committedDate": "2020-09-29T17:52:03Z", "type": "commit"}, {"oid": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "url": "https://github.com/firebase/firebase-admin-java/commit/dcb38566a8384a30fb509049b4ec92ee19b1920c", "message": "Init defaultValue in RemoteConfigParameter", "committedDate": "2020-09-29T18:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0ODkxNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496948916", "bodyText": "Add javadocs to all public APIs.", "author": "hiranya911", "createdAt": "2020-09-29T18:24:49Z", "path": "src/main/java/com/google/firebase/remoteconfig/ExplicitParameterValue.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+public final class ExplicitParameterValue extends RemoteConfigParameterValue {", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/ExplicitParameterValue.java b/src/main/java/com/google/firebase/remoteconfig/ExplicitParameterValue.java\ndeleted file mode 100644\nindex 7803999..0000000\n--- a/src/main/java/com/google/firebase/remoteconfig/ExplicitParameterValue.java\n+++ /dev/null\n\n@@ -1,41 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.firebase.remoteconfig;\n-\n-import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n-\n-public final class ExplicitParameterValue extends RemoteConfigParameterValue {\n-\n-  private final String value;\n-\n-  private ExplicitParameterValue(String value) {\n-    this.value = value;\n-  }\n-\n-  public static ExplicitParameterValue of(String value) {\n-    return new ExplicitParameterValue(value);\n-  }\n-\n-  public String getValue() {\n-    return this.value;\n-  }\n-\n-  @Override\n-  ParameterValueResponse toResponseType() {\n-    return ParameterValueResponse.ofValue(this.value);\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDE0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950143", "bodyText": "toRemoteConfigTemplate()\nIn our chats I used toPublicType() and toResponseType() as placeholders. Use the typical Java conventions to name these methodds.", "author": "hiranya911", "createdAt": "2020-09-29T18:26:47Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java", "diffHunk": "@@ -94,8 +95,9 @@ public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n     HttpRequestInfo request = HttpRequestInfo.buildGetRequest(remoteConfigUrl)\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n-    RemoteConfigTemplate parsed = httpClient.parse(response, RemoteConfigTemplate.class);\n-    return parsed.setETag(getETag(response));\n+    TemplateResponse templateResponse = httpClient.parse(response, TemplateResponse.class);\n+    RemoteConfigTemplate template = templateResponse.toPublicType();", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java\nindex 2531eb8..038a700 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImpl.java\n\n@@ -96,7 +96,7 @@ final class FirebaseRemoteConfigClientImpl implements FirebaseRemoteConfigClient\n             .addAllHeaders(COMMON_HEADERS);\n     IncomingHttpResponse response = httpClient.send(request);\n     TemplateResponse templateResponse = httpClient.parse(response, TemplateResponse.class);\n-    RemoteConfigTemplate template = templateResponse.toPublicType();\n+    RemoteConfigTemplate template = templateResponse.toRemoteConfigTemplate();\n     return template.setETag(getETag(response));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDM1Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950353", "bodyText": "No need for this. It's always true.", "author": "hiranya911", "createdAt": "2020-09-29T18:27:12Z", "path": "src/main/java/com/google/firebase/remoteconfig/InAppDefaultValue.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+public final class InAppDefaultValue extends RemoteConfigParameterValue {\n+\n+  private final boolean inAppDefaultValue;", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/InAppDefaultValue.java b/src/main/java/com/google/firebase/remoteconfig/InAppDefaultValue.java\ndeleted file mode 100644\nindex d2fa8be..0000000\n--- a/src/main/java/com/google/firebase/remoteconfig/InAppDefaultValue.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-/*\n- * Copyright 2020 Google LLC\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.firebase.remoteconfig;\n-\n-import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n-\n-public final class InAppDefaultValue extends RemoteConfigParameterValue {\n-\n-  private final boolean inAppDefaultValue;\n-\n-  private InAppDefaultValue(boolean inAppDefaultValue) {\n-    this.inAppDefaultValue = inAppDefaultValue;\n-  }\n-\n-  public static InAppDefaultValue getInstance() {\n-    return new InAppDefaultValue(true);\n-  }\n-\n-  @Override\n-  ParameterValueResponse toResponseType() {\n-    return ParameterValueResponse.ofInAppDefaultValue();\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDkzNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496950935", "bodyText": "Why this default value?", "author": "hiranya911", "createdAt": "2020-09-29T18:28:11Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = ExplicitParameterValue.of(\"\");", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY5OTkwNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497699907", "bodyText": "If no default value is set (if defaultValue is null), the REST API sets the default value to an empty string. We can allow null here and add a null check in the conversion or just set it to an empty value in the ctor.", "author": "lahirumaramba", "createdAt": "2020-09-30T17:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MDkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex f165224..57df7ce 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -22,51 +22,101 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValue\n import java.util.HashMap;\n import java.util.Map;\n \n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a {@code defaultValue} or a {@code conditionalValues} entry must be present for the\n+ * parameter to have any effect.\n+ */\n public final class RemoteConfigParameter {\n \n   private RemoteConfigParameterValue defaultValue;\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter() {\n     conditionalValues = new HashMap<>();\n-    defaultValue = ExplicitParameterValue.of(\"\");\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n   }\n \n+  /**\n+   * Gets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n   public RemoteConfigParameterValue getDefaultValue() {\n     return defaultValue;\n   }\n \n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n   public String getDescription() {\n     return description;\n   }\n \n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n   public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n     return conditionalValues;\n   }\n \n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @param value An {@link RemoteConfigParameterValue} instance.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n     defaultValue = value;\n     return this;\n   }\n \n+  /**\n+   * Sets the description of the parameter.\n+   * Should not be over 100 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setDescription(String description) {\n     this.description = description;\n     return this;\n   }\n \n+  /**\n+   * Sets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @param conditionalValues A map of conditional values.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setConditionalValues(\n           Map<String, RemoteConfigParameterValue> conditionalValues) {\n     this.conditionalValues = conditionalValues;\n     return this;\n   }\n \n-  ParameterResponse toResponseType() {\n+  ParameterResponse toParameterResponse() {\n     Map<String, ParameterValueResponse> conditionalResponseValues = new HashMap<>();\n     for (Map.Entry<String, RemoteConfigParameterValue> entry : conditionalValues.entrySet()) {\n-      conditionalResponseValues.put(entry.getKey(), entry.getValue().toResponseType());\n+      conditionalResponseValues.put(entry.getKey(), entry.getValue().toParameterValueResponse());\n     }\n-    return new ParameterResponse(defaultValue.toResponseType(), description,\n+    return new ParameterResponse(defaultValue.toParameterValueResponse(), description,\n             conditionalResponseValues);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTEyMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496951120", "bodyText": "toParameterResponse()", "author": "hiranya911", "createdAt": "2020-09-29T18:28:31Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = ExplicitParameterValue.of(\"\");\n+  }\n+\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n+    defaultValue = value;\n+    return this;\n+  }\n+\n+  public RemoteConfigParameter setDescription(String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  public RemoteConfigParameter setConditionalValues(\n+          Map<String, RemoteConfigParameterValue> conditionalValues) {\n+    this.conditionalValues = conditionalValues;\n+    return this;\n+  }\n+\n+  ParameterResponse toResponseType() {", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex f165224..57df7ce 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -22,51 +22,101 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValue\n import java.util.HashMap;\n import java.util.Map;\n \n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a {@code defaultValue} or a {@code conditionalValues} entry must be present for the\n+ * parameter to have any effect.\n+ */\n public final class RemoteConfigParameter {\n \n   private RemoteConfigParameterValue defaultValue;\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter() {\n     conditionalValues = new HashMap<>();\n-    defaultValue = ExplicitParameterValue.of(\"\");\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n   }\n \n+  /**\n+   * Gets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n   public RemoteConfigParameterValue getDefaultValue() {\n     return defaultValue;\n   }\n \n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n   public String getDescription() {\n     return description;\n   }\n \n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n   public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n     return conditionalValues;\n   }\n \n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @param value An {@link RemoteConfigParameterValue} instance.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n     defaultValue = value;\n     return this;\n   }\n \n+  /**\n+   * Sets the description of the parameter.\n+   * Should not be over 100 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setDescription(String description) {\n     this.description = description;\n     return this;\n   }\n \n+  /**\n+   * Sets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @param conditionalValues A map of conditional values.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter setConditionalValues(\n           Map<String, RemoteConfigParameterValue> conditionalValues) {\n     this.conditionalValues = conditionalValues;\n     return this;\n   }\n \n-  ParameterResponse toResponseType() {\n+  ParameterResponse toParameterResponse() {\n     Map<String, ParameterValueResponse> conditionalResponseValues = new HashMap<>();\n     for (Map.Entry<String, RemoteConfigParameterValue> entry : conditionalValues.entrySet()) {\n-      conditionalResponseValues.put(entry.getKey(), entry.getValue().toResponseType());\n+      conditionalResponseValues.put(entry.getKey(), entry.getValue().toParameterValueResponse());\n     }\n-    return new ParameterResponse(defaultValue.toResponseType(), description,\n+    return new ParameterResponse(defaultValue.toParameterValueResponse(), description,\n             conditionalResponseValues);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Mjk0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496952943", "bodyText": "toRemoteConfigTemplate", "author": "hiranya911", "createdAt": "2020-09-29T18:31:46Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 2c422b8..390505b 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -17,8 +17,6 @@\n package com.google.firebase.remoteconfig.internal;\n \n import com.google.api.client.util.Key;\n-import com.google.firebase.remoteconfig.ExplicitParameterValue;\n-import com.google.firebase.remoteconfig.InAppDefaultValue;\n import com.google.firebase.remoteconfig.RemoteConfigParameter;\n import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzMxMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496953310", "bodyText": "toRemoteConfigParameter", "author": "hiranya911", "createdAt": "2020-09-29T18:32:27Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toPublicType());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toPublicType() {", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 2c422b8..390505b 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -17,8 +17,6 @@\n package com.google.firebase.remoteconfig.internal;\n \n import com.google.api.client.util.Key;\n-import com.google.firebase.remoteconfig.ExplicitParameterValue;\n-import com.google.firebase.remoteconfig.InAppDefaultValue;\n import com.google.firebase.remoteconfig.RemoteConfigParameter;\n import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzY1Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496953653", "bodyText": "toRemoteConfigParameterValue", "author": "hiranya911", "createdAt": "2020-09-29T18:33:06Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.ExplicitParameterValue;\n+import com.google.firebase.remoteconfig.InAppDefaultValue;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toPublicType() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toPublicType());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toPublicType() {\n+      Map<String, RemoteConfigParameterValue> conditionalPublicValues = new HashMap<>();\n+      for (Map.Entry<String, ParameterValueResponse> entry : conditionalValues.entrySet()) {\n+        conditionalPublicValues.put(entry.getKey(), entry.getValue().toPublicType());\n+      }\n+      return new RemoteConfigParameter().setDefaultValue(defaultValue.toPublicType())\n+              .setDescription(description).setConditionalValues(conditionalPublicValues);\n+    }\n+  }\n+\n+  public static final class ParameterValueResponse {\n+\n+    @Key(\"value\")\n+    private String value;\n+\n+    @Key(\"useInAppDefault\")\n+    private Boolean inAppDefaultValue;\n+\n+    public ParameterValueResponse() {\n+    }\n+\n+    private ParameterValueResponse(String value, Boolean inAppDefaultValue) {\n+      this.value = value;\n+      this.inAppDefaultValue = inAppDefaultValue;\n+    }\n+\n+    public static ParameterValueResponse ofValue(String value) {\n+      return new ParameterValueResponse(value, null);\n+    }\n+\n+    public static ParameterValueResponse ofInAppDefaultValue() {\n+      return new ParameterValueResponse(null, true);\n+    }\n+\n+    public RemoteConfigParameterValue toPublicType() {", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 2c422b8..390505b 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -17,8 +17,6 @@\n package com.google.firebase.remoteconfig.internal;\n \n import com.google.api.client.util.Key;\n-import com.google.firebase.remoteconfig.ExplicitParameterValue;\n-import com.google.firebase.remoteconfig.InAppDefaultValue;\n import com.google.firebase.remoteconfig.RemoteConfigParameter;\n import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NjMwMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496956302", "bodyText": "Probably best to load this from a resource file.", "author": "hiranya911", "createdAt": "2020-09-29T18:38:06Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -63,7 +63,33 @@\n           404, ErrorCode.NOT_FOUND,\n           500, ErrorCode.INTERNAL);\n \n-  private static final String MOCK_TEMPLATE_RESPONSE = \"{\\\"conditions\\\": [], \\\"parameters\\\": {}}\";\n+  private static final String MOCK_TEMPLATE_RESPONSE = \"{\"", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczODcyMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497738723", "bodyText": "Good call!", "author": "lahirumaramba", "createdAt": "2020-09-30T19:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NjMwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 5c88810..941b9f2 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n\n@@ -63,33 +63,8 @@ public class FirebaseRemoteConfigClientImplTest {\n           404, ErrorCode.NOT_FOUND,\n           500, ErrorCode.INTERNAL);\n \n-  private static final String MOCK_TEMPLATE_RESPONSE = \"{\"\n-          + \"  \\\"conditions\\\": [\\n\"\n-          + \"    {\\n\"\n-          + \"      \\\"name\\\": \\\"ios_en\\\",\\n\"\n-          + \"      \\\"expression\\\": \\\"device.os == 'ios' && device.country in ['us', 'uk']\\\",\\n\"\n-          + \"      \\\"tagColor\\\": \\\"INDIGO\\\"\\n\"\n-          + \"    }\\n\"\n-          + \"  ],\\n\"\n-          + \"  \\\"parameters\\\": {\\n\"\n-          + \"    \\\"welcome_message_text\\\": {\\n\"\n-          + \"      \\\"defaultValue\\\": {\\n\"\n-          + \"        \\\"value\\\": \\\"welcome to app\\\"\\n\"\n-          + \"      },\\n\"\n-          + \"      \\\"conditionalValues\\\": {\\n\"\n-          + \"        \\\"ios_en\\\": {\\n\"\n-          + \"          \\\"value\\\": \\\"welcome to app en\\\"\\n\"\n-          + \"        }\\n\"\n-          + \"      },\\n\"\n-          + \"      \\\"description\\\": \\\"Text for welcome message!\\\"\\n\"\n-          + \"    },\\n\"\n-          + \"    \\\"header_text\\\": {\\n\"\n-          + \"      \\\"defaultValue\\\": {\\n\"\n-          + \"        \\\"useInAppDefault\\\": true\\n\"\n-          + \"      }\\n\"\n-          + \"    }\\n\"\n-          + \"  }\\n\"\n-          + \"}\";\n+  private static final String MOCK_TEMPLATE_RESPONSE = TestUtils\n+          .loadResource(\"getRemoteConfig.json\");\n \n   private static final String TEST_ETAG = \"etag-123456789012-1\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Njk0MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496956941", "bodyText": "This should probably be a separate test case.", "author": "hiranya911", "createdAt": "2020-09-29T18:39:18Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -86,6 +112,26 @@ public void testGetTemplate() throws Exception {\n     RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n+    Map<String, RemoteConfigParameter> parameters = template.getParameters();\n+    assertEquals(2, parameters.size());\n+    assertTrue(parameters.containsKey(\"welcome_message_text\"));\n+    assertTrue(parameters.containsKey(\"header_text\"));\n+    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n+            .get(\"welcome_message_text\").getConditionalValues();\n+    assertEquals(1, conditionalValues.size());\n+    assertTrue(conditionalValues.containsKey(\"ios_en\"));\n+    ExplicitParameterValue value = (ExplicitParameterValue) conditionalValues.get(\"ios_en\");\n+    assertEquals(\"welcome to app en\", value.getValue());\n+    checkGetRequestHeader(interceptor.getLastRequest());\n+\n+    // Check empty template", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 5c88810..941b9f2 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n\n@@ -116,19 +91,26 @@ public class FirebaseRemoteConfigClientImplTest {\n     assertEquals(2, parameters.size());\n     assertTrue(parameters.containsKey(\"welcome_message_text\"));\n     assertTrue(parameters.containsKey(\"header_text\"));\n-    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n-            .get(\"welcome_message_text\").getConditionalValues();\n+    RemoteConfigParameter parameter = parameters.get(\"welcome_message_text\");\n+    assertEquals(\"text for welcome message!\", parameter.getDescription());\n+    RemoteConfigParameterValue.Explicit defaultValue =\n+            (RemoteConfigParameterValue.Explicit) parameter.getDefaultValue();\n+    assertEquals(\"welcome to app\", defaultValue.getValue());\n+    Map<String, RemoteConfigParameterValue> conditionalValues = parameter.getConditionalValues();\n     assertEquals(1, conditionalValues.size());\n     assertTrue(conditionalValues.containsKey(\"ios_en\"));\n-    ExplicitParameterValue value = (ExplicitParameterValue) conditionalValues.get(\"ios_en\");\n+    RemoteConfigParameterValue.Explicit value =\n+            (RemoteConfigParameterValue.Explicit) conditionalValues.get(\"ios_en\");\n     assertEquals(\"welcome to app en\", value.getValue());\n     checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n \n-    // Check empty template\n+  @Test\n+  public void testGetTemplateWithEmptyTemplateResponse() throws Exception {\n     response.addHeader(\"etag\", TEST_ETAG);\n     response.setContent(\"{}\");\n \n-    template = client.getTemplate();\n+    RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n     assertEquals(0, template.getParameters().size());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1ODA2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r496958063", "bodyText": "Also assert for defaultValues and descriptions", "author": "hiranya911", "createdAt": "2020-09-29T18:41:07Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -86,6 +112,26 @@ public void testGetTemplate() throws Exception {\n     RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n+    Map<String, RemoteConfigParameter> parameters = template.getParameters();", "originalCommit": "dcb38566a8384a30fb509049b4ec92ee19b1920c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dcf08e8300bec53236c6c1c196fb269b248737e", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 5c88810..941b9f2 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n\n@@ -116,19 +91,26 @@ public class FirebaseRemoteConfigClientImplTest {\n     assertEquals(2, parameters.size());\n     assertTrue(parameters.containsKey(\"welcome_message_text\"));\n     assertTrue(parameters.containsKey(\"header_text\"));\n-    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n-            .get(\"welcome_message_text\").getConditionalValues();\n+    RemoteConfigParameter parameter = parameters.get(\"welcome_message_text\");\n+    assertEquals(\"text for welcome message!\", parameter.getDescription());\n+    RemoteConfigParameterValue.Explicit defaultValue =\n+            (RemoteConfigParameterValue.Explicit) parameter.getDefaultValue();\n+    assertEquals(\"welcome to app\", defaultValue.getValue());\n+    Map<String, RemoteConfigParameterValue> conditionalValues = parameter.getConditionalValues();\n     assertEquals(1, conditionalValues.size());\n     assertTrue(conditionalValues.containsKey(\"ios_en\"));\n-    ExplicitParameterValue value = (ExplicitParameterValue) conditionalValues.get(\"ios_en\");\n+    RemoteConfigParameterValue.Explicit value =\n+            (RemoteConfigParameterValue.Explicit) conditionalValues.get(\"ios_en\");\n     assertEquals(\"welcome to app en\", value.getValue());\n     checkGetRequestHeader(interceptor.getLastRequest());\n+  }\n \n-    // Check empty template\n+  @Test\n+  public void testGetTemplateWithEmptyTemplateResponse() throws Exception {\n     response.addHeader(\"etag\", TEST_ETAG);\n     response.setContent(\"{}\");\n \n-    template = client.getTemplate();\n+    RemoteConfigTemplate template = client.getTemplate();\n \n     assertEquals(TEST_ETAG, template.getETag());\n     assertEquals(0, template.getParameters().size());\n"}}, {"oid": "0dcf08e8300bec53236c6c1c196fb269b248737e", "url": "https://github.com/firebase/firebase-admin-java/commit/0dcf08e8300bec53236c6c1c196fb269b248737e", "message": "Add javadocs and other PR fixes", "committedDate": "2020-09-30T19:19:42Z", "type": "forcePushed"}, {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "url": "https://github.com/firebase/firebase-admin-java/commit/0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "message": "Add javadocs and other PR fixes", "committedDate": "2020-09-30T19:23:49Z", "type": "commit"}, {"oid": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "url": "https://github.com/firebase/firebase-admin-java/commit/0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "message": "Add javadocs and other PR fixes", "committedDate": "2020-09-30T19:23:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODkyOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497748929", "bodyText": "I feel like both these should remain null until explicitly set. It's ok to let the backend choose default values for these as necessary.", "author": "hiranya911", "createdAt": "2020-09-30T19:27:55Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -22,51 +22,99 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n public final class RemoteConfigParameter {\n \n   private RemoteConfigParameterValue defaultValue;\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n   public RemoteConfigParameter() {\n     conditionalValues = new HashMap<>();\n-    defaultValue = ExplicitParameterValue.of(\"\");\n+    defaultValue = RemoteConfigParameterValue.of(\"\");", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxNTgxNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498415815", "bodyText": "I see your point. Updated the code and added null checks in conversions.\nI have a few concerns with setting these to null though. Isn't it recommended not to return null collections in Java? If we don't set to conditionalValues to an empty map at init, the following will throw an exception on the client side.\nRemoteConfigParameter p = new RemoteConfigParameter().getConditionalValues().put(\"ios_en\", ParameterValue.of(\"text\")\n\nThis can be prevented with a simple null check on the client side, though.", "author": "lahirumaramba", "createdAt": "2020-10-01T17:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "66ec860113d9ef70b234d344400278a3de9d32ca", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex d626225..155d60f 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -33,14 +33,6 @@ public final class RemoteConfigParameter {\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n-  /**\n-   * Creates a new {@link RemoteConfigParameter}.\n-   */\n-  public RemoteConfigParameter() {\n-    conditionalValues = new HashMap<>();\n-    defaultValue = RemoteConfigParameterValue.of(\"\");\n-  }\n-\n   /**\n    * Gets the default value of the parameter.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MzExNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497753117", "bodyText": "Also assert on header_text which has an in app default value param.", "author": "hiranya911", "createdAt": "2020-09-30T19:35:43Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -116,19 +91,26 @@ public void testGetTemplate() throws Exception {\n     assertEquals(2, parameters.size());\n     assertTrue(parameters.containsKey(\"welcome_message_text\"));\n     assertTrue(parameters.containsKey(\"header_text\"));\n-    Map<String, RemoteConfigParameterValue> conditionalValues = parameters\n-            .get(\"welcome_message_text\").getConditionalValues();\n+    RemoteConfigParameter parameter = parameters.get(\"welcome_message_text\");", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66ec860113d9ef70b234d344400278a3de9d32ca", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 941b9f2..8ee5fb5 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n\n@@ -90,18 +90,22 @@ public class FirebaseRemoteConfigClientImplTest {\n     Map<String, RemoteConfigParameter> parameters = template.getParameters();\n     assertEquals(2, parameters.size());\n     assertTrue(parameters.containsKey(\"welcome_message_text\"));\n-    assertTrue(parameters.containsKey(\"header_text\"));\n-    RemoteConfigParameter parameter = parameters.get(\"welcome_message_text\");\n-    assertEquals(\"text for welcome message!\", parameter.getDescription());\n-    RemoteConfigParameterValue.Explicit defaultValue =\n-            (RemoteConfigParameterValue.Explicit) parameter.getDefaultValue();\n-    assertEquals(\"welcome to app\", defaultValue.getValue());\n-    Map<String, RemoteConfigParameterValue> conditionalValues = parameter.getConditionalValues();\n+    RemoteConfigParameter welcomeMessageParameter = parameters.get(\"welcome_message_text\");\n+    assertEquals(\"text for welcome message!\", welcomeMessageParameter.getDescription());\n+    RemoteConfigParameterValue.Explicit explicitDefaultValue =\n+            (RemoteConfigParameterValue.Explicit) welcomeMessageParameter.getDefaultValue();\n+    assertEquals(\"welcome to app\", explicitDefaultValue.getValue());\n+    Map<String, RemoteConfigParameterValue> conditionalValues = welcomeMessageParameter\n+            .getConditionalValues();\n     assertEquals(1, conditionalValues.size());\n     assertTrue(conditionalValues.containsKey(\"ios_en\"));\n     RemoteConfigParameterValue.Explicit value =\n             (RemoteConfigParameterValue.Explicit) conditionalValues.get(\"ios_en\");\n     assertEquals(\"welcome to app en\", value.getValue());\n+    assertTrue(parameters.containsKey(\"header_text\"));\n+    RemoteConfigParameter headerParameter = parameters.get(\"header_text\");\n+    assertTrue(\n+            headerParameter.getDefaultValue() instanceof RemoteConfigParameterValue.InAppDefault);\n     checkGetRequestHeader(interceptor.getLastRequest());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjI5Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497772297", "bodyText": "This is interesting . . . you mean this gets all the possible values, including the one actually assigned -- for a particular client instance? -- in the top position in the map?", "author": "egilmorez", "createdAt": "2020-09-30T20:12:20Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODk4OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498398989", "bodyText": "This gets all the conditional values assigned for that specific parameter. You can set a default value in a parameter to be used when all the conditional values are evaluated to false. Otherwise, the parameter will use the conditional value with the highest priority. The priority is determined by the order of the conditions are stored in the top-level conditions array of the RemoteConfigTemplate. The top-level conditions array is not part of this PR and will be added in a future PR.\nhttps://firebase.google.com/docs/reference/remote-config/rest/v1/RemoteConfigParameter", "author": "lahirumaramba", "createdAt": "2020-10-01T17:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjUwNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498412507", "bodyText": "OK, thanks for the explanation.  Parameter evaluation is pretty complex . . . when everything is done, I might try to start a review of our \"parameters and conditions\" concepts page, just to make sure it's all still accurate.", "author": "egilmorez", "createdAt": "2020-10-01T17:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "66ec860113d9ef70b234d344400278a3de9d32ca", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex d626225..155d60f 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -33,14 +33,6 @@ public final class RemoteConfigParameter {\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n-  /**\n-   * Creates a new {@link RemoteConfigParameter}.\n-   */\n-  public RemoteConfigParameter() {\n-    conditionalValues = new HashMap<>();\n-    defaultValue = RemoteConfigParameterValue.of(\"\");\n-  }\n-\n   /**\n    * Gets the default value of the parameter.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjkwMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497772900", "bodyText": "Does the developer actually set the value?  Or does our backend logic?", "author": "egilmorez", "createdAt": "2020-09-30T20:13:31Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5OTg1NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498399855", "bodyText": "When getting an existing template the backend will set the values for existing Parameters. If the developer wants to create and add new parameters then they can set a default value to set the parameter to, when none of the named conditions evaluate to true.", "author": "lahirumaramba", "createdAt": "2020-10-01T17:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MjkwMA=="}], "type": "inlineReview", "revised_code": {"commit": "66ec860113d9ef70b234d344400278a3de9d32ca", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex d626225..155d60f 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -33,14 +33,6 @@ public final class RemoteConfigParameter {\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n-  /**\n-   * Creates a new {@link RemoteConfigParameter}.\n-   */\n-  public RemoteConfigParameter() {\n-    conditionalValues = new HashMap<>();\n-    defaultValue = RemoteConfigParameterValue.of(\"\");\n-  }\n-\n   /**\n    * Gets the default value of the parameter.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MzkyOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497773929", "bodyText": "Again this is maybe just my own confusion, but -- I can see how a developer might want to automate the setting of a list of conditional values.  But isn't the actual value sort of set at runtime, after evaluating the conditions?", "author": "egilmorez", "createdAt": "2020-09-30T20:15:32Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Represents a Remote Config parameter that can be included in a {@link RemoteConfigTemplate}.\n+ * At minimum, a default value or a conditional value must be present for the\n+ * parameter to have any effect.\n+ */\n+public final class RemoteConfigParameter {\n+\n+  private RemoteConfigParameterValue defaultValue;\n+  private String description;\n+  private Map<String, RemoteConfigParameterValue> conditionalValues;\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter() {\n+    conditionalValues = new HashMap<>();\n+    defaultValue = RemoteConfigParameterValue.of(\"\");\n+  }\n+\n+  /**\n+   * Gets the default value of the parameter.\n+   *\n+   * @return A {@link RemoteConfigParameterValue} instance.\n+   */\n+  public RemoteConfigParameterValue getDefaultValue() {\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * Gets the description of the parameter.\n+   *\n+   * @return The {@link String} description of the parameter.\n+   */\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  /**\n+   * Gets the conditional values of the parameter.\n+   * The condition name of the highest priority (the one listed first in the\n+   * {@link RemoteConfigTemplate}'s conditions list) determines the value of this parameter.\n+   *\n+   * @return A map of conditional values.\n+   */\n+  public Map<String, RemoteConfigParameterValue> getConditionalValues() {\n+    return conditionalValues;\n+  }\n+\n+  /**\n+   * Sets the default value of the parameter.\n+   * This is the value to set the parameter to, when none of the named conditions\n+   * evaluate to true.\n+   *\n+   * @param value An {@link RemoteConfigParameterValue} instance.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter setDefaultValue(RemoteConfigParameterValue value) {\n+    defaultValue = value;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the description of the parameter.\n+   * Should not be over 100 characters and may contain any Unicode characters.\n+   *\n+   * @param description The description of the parameter.\n+   * @return This {@link RemoteConfigParameter}.\n+   */\n+  public RemoteConfigParameter setDescription(String description) {\n+    this.description = description;\n+    return this;\n+  }\n+\n+  /**\n+   * Sets the conditional values of the parameter.", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMTQyNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498401424", "bodyText": "When creating new parameters the developer needs to add conditional values manually. The condition names in conditionalValues map must match the names in the top-level conditions array in RemoteConfigTemplate. Otherwise, the API will throw a condition does not exist error.", "author": "lahirumaramba", "createdAt": "2020-10-01T17:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3MzkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "66ec860113d9ef70b234d344400278a3de9d32ca", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\nindex d626225..155d60f 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameter.java\n\n@@ -33,14 +33,6 @@ public final class RemoteConfigParameter {\n   private String description;\n   private Map<String, RemoteConfigParameterValue> conditionalValues;\n \n-  /**\n-   * Creates a new {@link RemoteConfigParameter}.\n-   */\n-  public RemoteConfigParameter() {\n-    conditionalValues = new HashMap<>();\n-    defaultValue = RemoteConfigParameterValue.of(\"\");\n-  }\n-\n   /**\n    * Gets the default value of the parameter.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc3NjYyNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497776625", "bodyText": "Suggest removing the hyphen between app and default.", "author": "egilmorez", "createdAt": "2020-09-30T20:20:40Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.ParameterValueResponse;\n+\n+/**\n+ * Represents a Remote Config parameter value that can be used in a {@link RemoteConfigTemplate}.\n+ */\n+public abstract class RemoteConfigParameterValue {\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameterValue.Explicit} instance with the given value.\n+   *\n+   * @param value The value of the {@link RemoteConfigParameterValue.Explicit}.\n+   * @return A {@link RemoteConfigParameterValue.Explicit} instance.\n+   */\n+  public static Explicit of(String value) {\n+    return new Explicit(value);\n+  }\n+\n+  /**\n+   * Creates a new {@link RemoteConfigParameterValue.InAppDefault} instance.\n+   *\n+   * @return A {@link RemoteConfigParameterValue.InAppDefault} instance.\n+   */\n+  public static InAppDefault inAppDefault() {\n+    return new InAppDefault();\n+  }\n+\n+  abstract ParameterValueResponse toParameterValueResponse();\n+\n+  /**\n+   * Represents an explicit Remote Config parameter value with a {@link String} value that the\n+   * parameter is set to.\n+   */\n+  public static final class Explicit extends RemoteConfigParameterValue {\n+\n+    private final String value;\n+\n+    private Explicit(String value) {\n+      this.value = value;\n+    }\n+\n+    /**\n+     * Gets the value of {@link RemoteConfigParameterValue.Explicit}.\n+     *\n+     * @return The {@link String} value.\n+     */\n+    public String getValue() {\n+      return this.value;\n+    }\n+\n+    @Override\n+    ParameterValueResponse toParameterValueResponse() {\n+      return ParameterValueResponse.ofValue(this.value);\n+    }\n+  }\n+\n+  /**\n+   * Represents an in-app-default parameter value.", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a8062901aac3bd84604c84b6f7513d251473764", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java\nindex 6023b2d..6a51ffd 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/RemoteConfigParameterValue.java\n\n@@ -72,7 +72,7 @@ public abstract class RemoteConfigParameterValue {\n   }\n \n   /**\n-   * Represents an in-app-default parameter value.\n+   * Represents an in app default parameter value.\n    */\n   public static final class InAppDefault extends RemoteConfigParameterValue {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4MjEyMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r497782121", "bodyText": "I wonder if we should spell out \"Data Transfer Object\" -- that's what this is, right?  :)\nI searched and couldn't immediately find a single other instance of \"DTO\" in docs/reference/", "author": "egilmorez", "createdAt": "2020-09-30T20:31:07Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.remoteconfig.RemoteConfigParameter;\n+import com.google.firebase.remoteconfig.RemoteConfigParameterValue;\n+import com.google.firebase.remoteconfig.RemoteConfigTemplate;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * The DTO for parsing Remote Config template responses from the Remote Config service.\n+ **/\n+public final class TemplateResponse {\n+\n+  @Key(\"parameters\")\n+  private Map<String, ParameterResponse> parameters;\n+\n+  public TemplateResponse() {\n+    parameters = Collections.emptyMap();\n+  }\n+\n+  public TemplateResponse(Map<String, ParameterResponse> parameters) {\n+    this.parameters = parameters;\n+  }\n+\n+  public RemoteConfigTemplate toRemoteConfigTemplate() {\n+    Map<String, RemoteConfigParameter> parameterPublicTypes = new HashMap<>();\n+    for (Map.Entry<String, ParameterResponse> entry : parameters.entrySet()) {\n+      parameterPublicTypes.put(entry.getKey(), entry.getValue().toRemoteConfigParameter());\n+    }\n+    return new RemoteConfigTemplate().setParameters(parameterPublicTypes);\n+  }\n+\n+  /**\n+   * The DTO for parsing Remote Config parameter responses from the Remote Config service.\n+   **/\n+  public static final class ParameterResponse {\n+\n+    @Key(\"defaultValue\")\n+    private ParameterValueResponse defaultValue;\n+\n+    @Key(\"description\")\n+    private String description;\n+\n+    @Key(\"conditionalValues\")\n+    private Map<String, ParameterValueResponse> conditionalValues;\n+\n+    public ParameterResponse() {\n+      conditionalValues = Collections.emptyMap();\n+    }\n+\n+    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n+                             Map<String, ParameterValueResponse> conditionalValues) {\n+      this.defaultValue = defaultValue;\n+      this.description = description;\n+      this.conditionalValues = conditionalValues;\n+    }\n+\n+    public RemoteConfigParameter toRemoteConfigParameter() {\n+      Map<String, RemoteConfigParameterValue> conditionalPublicValues = new HashMap<>();\n+      for (Map.Entry<String, ParameterValueResponse> entry : conditionalValues.entrySet()) {\n+        conditionalPublicValues\n+                .put(entry.getKey(), entry.getValue().toRemoteConfigParameterValue());\n+      }\n+      return new RemoteConfigParameter()\n+              .setDefaultValue(defaultValue.toRemoteConfigParameterValue())\n+              .setDescription(description).setConditionalValues(conditionalPublicValues);\n+    }\n+  }\n+\n+  /**\n+   * The DTO for parsing Remote Config parameter value responses from the Remote Config service.", "originalCommit": "0f5d2c791c3a9645a40b32fcfe04aab74aaf1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMjE3Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498402172", "bodyText": "I think the classes in internal packages do not show up in the docs. I agree though Data Transfer Object makes more sense. I will update the comment here. Thanks!!", "author": "lahirumaramba", "createdAt": "2020-10-01T17:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4MjEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a8062901aac3bd84604c84b6f7513d251473764", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 390505b..753c762 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -26,7 +26,7 @@ import java.util.HashMap;\n import java.util.Map;\n \n /**\n- * The DTO for parsing Remote Config template responses from the Remote Config service.\n+ * The Data Transfer Object for parsing Remote Config template responses from the Remote Config service.\n  **/\n public final class TemplateResponse {\n \n"}}, {"oid": "9a8062901aac3bd84604c84b6f7513d251473764", "url": "https://github.com/firebase/firebase-admin-java/commit/9a8062901aac3bd84604c84b6f7513d251473764", "message": "Fix javadocs", "committedDate": "2020-10-01T17:22:51Z", "type": "commit"}, {"oid": "66ec860113d9ef70b234d344400278a3de9d32ca", "url": "https://github.com/firebase/firebase-admin-java/commit/66ec860113d9ef70b234d344400278a3de9d32ca", "message": "PR fixes", "committedDate": "2020-10-01T17:40:26Z", "type": "commit"}, {"oid": "8aaebef4c8575492027c8441da6301dbd14560ca", "url": "https://github.com/firebase/firebase-admin-java/commit/8aaebef4c8575492027c8441da6301dbd14560ca", "message": "Made all collections non-null", "committedDate": "2020-10-01T22:07:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTY1OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498541659", "bodyText": "Nit: One setter per line", "author": "hiranya911", "createdAt": "2020-10-01T22:23:39Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -80,14 +90,17 @@ public RemoteConfigParameter toRemoteConfigParameter() {\n         conditionalPublicValues\n                 .put(entry.getKey(), entry.getValue().toRemoteConfigParameterValue());\n       }\n+      RemoteConfigParameterValue remoteConfigParameterValue =\n+              (defaultValue == null) ? null : defaultValue.toRemoteConfigParameterValue();\n       return new RemoteConfigParameter()\n-              .setDefaultValue(defaultValue.toRemoteConfigParameterValue())\n+              .setDefaultValue(remoteConfigParameterValue)\n               .setDescription(description).setConditionalValues(conditionalPublicValues);", "originalCommit": "8aaebef4c8575492027c8441da6301dbd14560ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4e8a4288a2a560daac5165e09b4a816ad1cb585", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 9dbd93b..c1ae433 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -94,7 +93,8 @@ public final class TemplateResponse {\n               (defaultValue == null) ? null : defaultValue.toRemoteConfigParameterValue();\n       return new RemoteConfigParameter()\n               .setDefaultValue(remoteConfigParameterValue)\n-              .setDescription(description).setConditionalValues(conditionalPublicValues);\n+              .setDescription(description)\n+              .setConditionalValues(conditionalPublicValues);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjIwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/479#discussion_r498542201", "bodyText": "Probably redundant at this level.", "author": "hiranya911", "createdAt": "2020-10-01T22:25:29Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -67,8 +75,10 @@ public ParameterResponse() {\n       conditionalValues = Collections.emptyMap();\n     }\n \n-    public ParameterResponse(ParameterValueResponse defaultValue, String description,\n-                             Map<String, ParameterValueResponse> conditionalValues) {\n+    public ParameterResponse(@Nullable ParameterValueResponse defaultValue,\n+                             @Nullable String description,\n+                             @NonNull Map<String, ParameterValueResponse> conditionalValues) {\n+      checkNotNull(conditionalValues, \"conditional values must not be null.\");", "originalCommit": "8aaebef4c8575492027c8441da6301dbd14560ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4e8a4288a2a560daac5165e09b4a816ad1cb585", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\nindex 9dbd93b..c1ae433 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java\n\n@@ -78,10 +78,9 @@ public final class TemplateResponse {\n     public ParameterResponse(@Nullable ParameterValueResponse defaultValue,\n                              @Nullable String description,\n                              @NonNull Map<String, ParameterValueResponse> conditionalValues) {\n-      checkNotNull(conditionalValues, \"conditional values must not be null.\");\n       this.defaultValue = defaultValue;\n       this.description = description;\n-      this.conditionalValues = conditionalValues;\n+      this.conditionalValues = checkNotNull(conditionalValues);\n     }\n \n     public RemoteConfigParameter toRemoteConfigParameter() {\n"}}, {"oid": "a4e8a4288a2a560daac5165e09b4a816ad1cb585", "url": "https://github.com/firebase/firebase-admin-java/commit/a4e8a4288a2a560daac5165e09b4a816ad1cb585", "message": "One setter per line", "committedDate": "2020-10-01T22:33:18Z", "type": "commit"}]}