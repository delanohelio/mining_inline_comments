{"pr_number": 478, "pr_title": "Add the entry point for Remote Config", "pr_createdAt": "2020-09-21T20:38:23Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/478", "timeline": [{"oid": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e", "url": "https://github.com/firebase/firebase-admin-java/commit/be1d9a498f2f39cb546fbe89bb87ffcca47fa11e", "message": "Add the entry point for Remote Config", "committedDate": "2020-09-21T20:35:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDY4NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492344685", "bodyText": "A builder is overkill for just 2 arguments. I'd recommend something simpler and direct:\n@VisibleForTesting\nFirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n  this.app = checkNotNull(app);\n  this.client = checkNotNull(client);\n}\n\nprivate FirebaseRemoteConfig(FirebaseApp app) {\n  this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n}\nNote that I'm also not using a Supplier here. Since the client is needed for all operations in this API, there's no reason to lazy initialize it.", "author": "hiranya911", "createdAt": "2020-09-21T21:03:26Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final Supplier<? extends FirebaseRemoteConfigClient> remoteConfigClient;\n+\n+  private FirebaseRemoteConfig(Builder builder) {", "originalCommit": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzEzNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492363137", "bodyText": "Good point! Updated the code.\nI had to update the unit test for testRemoteConfigClientWithoutProjectId(). As the client is now initialized at construction it throws at FirebaseRemoteConfig.getInstance().", "author": "lahirumaramba", "createdAt": "2020-09-21T21:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\nindex 6e8337b..4ddc354 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n\n@@ -20,8 +20,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.api.core.ApiFuture;\n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Supplier;\n-import com.google.common.base.Suppliers;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.ImplFirebaseTrampolines;\n import com.google.firebase.internal.CallableOperation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NjA2MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492346060", "bodyText": "Add space before", "author": "hiranya911", "createdAt": "2020-09-21T21:06:04Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.firebase.ErrorCode;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.TestOnlyImplFirebaseTrampolines;\n+import com.google.firebase.auth.MockGoogleCredentials;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+public class FirebaseRemoteConfigTest {\n+  private static final FirebaseOptions TEST_OPTIONS = FirebaseOptions.builder()", "originalCommit": "be1d9a498f2f39cb546fbe89bb87ffcca47fa11e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java\nindex 60e7708..9e5bd97 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java\n\n@@ -17,12 +17,11 @@\n package com.google.firebase.remoteconfig;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import com.google.common.base.Supplier;\n-import com.google.common.base.Suppliers;\n import com.google.firebase.ErrorCode;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.FirebaseOptions;\n"}}, {"oid": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6", "url": "https://github.com/firebase/firebase-admin-java/commit/cc5108a9237dd5fcd5e2d96f8b91f889f88965d6", "message": "Remove the builder in RemoteConfig.java", "committedDate": "2020-09-21T21:41:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMTUwOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492411508", "bodyText": "Remove fromApp. Call constructor directly where it's needed.", "author": "hiranya911", "createdAt": "2020-09-22T00:02:55Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -99,23 +102,11 @@ protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n \n   @VisibleForTesting\n   FirebaseRemoteConfigClient getRemoteConfigClient() {\n-    return remoteConfigClient.get();\n+    return remoteConfigClient;\n   }\n \n   private static FirebaseRemoteConfig fromApp(final FirebaseApp app) {\n-    return FirebaseRemoteConfig.builder()\n-            .setFirebaseApp(app)\n-            .setRemoteConfigClient(new Supplier<FirebaseRemoteConfigClient>() {\n-              @Override\n-              public FirebaseRemoteConfigClient get() {\n-                return FirebaseRemoteConfigClientImpl.fromApp(app);\n-              }\n-            })\n-            .build();\n-  }\n-\n-  static Builder builder() {\n-    return new Builder();\n+    return new FirebaseRemoteConfig(app);", "originalCommit": "cc5108a9237dd5fcd5e2d96f8b91f889f88965d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzc5Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r492747793", "bodyText": "Thanks! Updated!", "author": "lahirumaramba", "createdAt": "2020-09-22T13:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3016467b16123f0d08819e0fa34543ed3375342f", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\nindex 4ddc354..c98d2f0 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n\n@@ -105,14 +105,10 @@ public final class FirebaseRemoteConfig {\n     return remoteConfigClient;\n   }\n \n-  private static FirebaseRemoteConfig fromApp(final FirebaseApp app) {\n-    return new FirebaseRemoteConfig(app);\n-  }\n-\n   private static class FirebaseRemoteConfigService extends FirebaseService<FirebaseRemoteConfig> {\n \n     FirebaseRemoteConfigService(FirebaseApp app) {\n-      super(SERVICE_ID, FirebaseRemoteConfig.fromApp(app));\n+      super(SERVICE_ID, new FirebaseRemoteConfig(app));\n     }\n \n     @Override\n"}}, {"oid": "3016467b16123f0d08819e0fa34543ed3375342f", "url": "https://github.com/firebase/firebase-admin-java/commit/3016467b16123f0d08819e0fa34543ed3375342f", "message": "Remove fromApp and use the constructor directly", "committedDate": "2020-09-22T13:46:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTQxNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493871416", "bodyText": "Literal?", "author": "egilmorez", "createdAt": "2020-09-23T20:21:11Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and", "originalCommit": "3016467b16123f0d08819e0fa34543ed3375342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDY3Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454676", "bodyText": "Updated!", "author": "lahirumaramba", "createdAt": "2020-09-24T16:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "04906aab7f27821a88743eee6fbab7e14549428d", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\nindex c98d2f0..d5e6d0d 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n\n@@ -28,8 +28,8 @@ import com.google.firebase.internal.FirebaseService;\n /**\n  * This class is the entry point for all server-side Firebase Remote Config actions.\n  *\n- * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n- * then use it to manage Remote Config templates.\n+ * <p>You can get an instance of {@link FirebaseRemoteConfig} via {@link #getInstance(FirebaseApp)},\n+ * and then use it to manage Remote Config templates.\n  */\n public final class FirebaseRemoteConfig {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MjAzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493872033", "bodyText": "Suggest present tense, just \"completes\"", "author": "egilmorez", "createdAt": "2020-09-23T20:22:21Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when", "originalCommit": "3016467b16123f0d08819e0fa34543ed3375342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDc4Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454786", "bodyText": "Thanks! Updated!", "author": "lahirumaramba", "createdAt": "2020-09-24T16:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "04906aab7f27821a88743eee6fbab7e14549428d", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\nindex c98d2f0..d5e6d0d 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n\n@@ -28,8 +28,8 @@ import com.google.firebase.internal.FirebaseService;\n /**\n  * This class is the entry point for all server-side Firebase Remote Config actions.\n  *\n- * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n- * then use it to manage Remote Config templates.\n+ * <p>You can get an instance of {@link FirebaseRemoteConfig} via {@link #getInstance(FirebaseApp)},\n+ * and then use it to manage Remote Config templates.\n  */\n public final class FirebaseRemoteConfig {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mjg5MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r493872891", "bodyText": "What does \"now\" suggest -- the state if destroy() is called?\nI'm trying to figure out if we need all the \"will\" future tense formations :)", "author": "egilmorez", "createdAt": "2020-09-23T20:23:59Z", "path": "src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ImplFirebaseTrampolines;\n+import com.google.firebase.internal.CallableOperation;\n+import com.google.firebase.internal.FirebaseService;\n+\n+/**\n+ * This class is the entry point for all server-side Firebase Remote Config actions.\n+ *\n+ * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n+ * then use it to manage Remote Config templates.\n+ */\n+public final class FirebaseRemoteConfig {\n+\n+  private static final String SERVICE_ID = FirebaseRemoteConfig.class.getName();\n+  private final FirebaseApp app;\n+  private final FirebaseRemoteConfigClient remoteConfigClient;\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfig(FirebaseApp app, FirebaseRemoteConfigClient client) {\n+    this.app = checkNotNull(app);\n+    this.remoteConfigClient = checkNotNull(client);\n+  }\n+\n+  private FirebaseRemoteConfig(FirebaseApp app) {\n+    this(app, FirebaseRemoteConfigClientImpl.fromApp(app));\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the default {@link FirebaseApp}.\n+   */\n+  public static FirebaseRemoteConfig getInstance() {\n+    return getInstance(FirebaseApp.getInstance());\n+  }\n+\n+  /**\n+   * Gets the {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   *\n+   * @return The {@link FirebaseRemoteConfig} instance for the specified {@link FirebaseApp}.\n+   */\n+  public static synchronized FirebaseRemoteConfig getInstance(FirebaseApp app) {\n+    FirebaseRemoteConfigService service = ImplFirebaseTrampolines.getService(app, SERVICE_ID,\n+            FirebaseRemoteConfigService.class);\n+    if (service == null) {\n+      service = ImplFirebaseTrampolines.addService(app, new FirebaseRemoteConfigService(app));\n+    }\n+    return service.getInstance();\n+  }\n+\n+  /**\n+   * Gets the current active version of the Remote Config template.\n+   *\n+   * @return A {@link RemoteConfigTemplate}.\n+   * @throws FirebaseRemoteConfigException If an error occurs while getting the template.\n+   */\n+  public RemoteConfigTemplate getTemplate() throws FirebaseRemoteConfigException {\n+    return getTemplateOp().call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getTemplate()} but performs the operation asynchronously.\n+   *\n+   * @return An {@code ApiFuture} that will complete with a {@link RemoteConfigTemplate} when\n+   *      the template is available.\n+   */\n+  public ApiFuture<RemoteConfigTemplate> getTemplateAsync() {\n+    return getTemplateOp().callAsync(app);\n+  }\n+\n+  private CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException> getTemplateOp() {\n+    final FirebaseRemoteConfigClient remoteConfigClient = getRemoteConfigClient();\n+    return new CallableOperation<RemoteConfigTemplate, FirebaseRemoteConfigException>() {\n+      @Override\n+      protected RemoteConfigTemplate execute() throws FirebaseRemoteConfigException {\n+        return remoteConfigClient.getTemplate();\n+      }\n+    };\n+  }\n+\n+  @VisibleForTesting\n+  FirebaseRemoteConfigClient getRemoteConfigClient() {\n+    return remoteConfigClient;\n+  }\n+\n+  private static class FirebaseRemoteConfigService extends FirebaseService<FirebaseRemoteConfig> {\n+\n+    FirebaseRemoteConfigService(FirebaseApp app) {\n+      super(SERVICE_ID, new FirebaseRemoteConfig(app));\n+    }\n+\n+    @Override\n+    public void destroy() {\n+      // NOTE: We don't explicitly tear down anything here, but public methods of\n+      // FirebaseRemoteConfig will now fail because calls to getOptions() and getToken()", "originalCommit": "3016467b16123f0d08819e0fa34543ed3375342f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1NDM5MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/478#discussion_r494454390", "bodyText": "I don't think this is publicly visible in docs. It is a comment in code. So we should be good here :)", "author": "lahirumaramba", "createdAt": "2020-09-24T16:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3Mjg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "04906aab7f27821a88743eee6fbab7e14549428d", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\nindex c98d2f0..d5e6d0d 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java\n\n@@ -28,8 +28,8 @@ import com.google.firebase.internal.FirebaseService;\n /**\n  * This class is the entry point for all server-side Firebase Remote Config actions.\n  *\n- * <p>You can get an instance of FirebaseRemoteConfig via {@link #getInstance(FirebaseApp)}, and\n- * then use it to manage Remote Config templates.\n+ * <p>You can get an instance of {@link FirebaseRemoteConfig} via {@link #getInstance(FirebaseApp)},\n+ * and then use it to manage Remote Config templates.\n  */\n public final class FirebaseRemoteConfig {\n \n"}}, {"oid": "04906aab7f27821a88743eee6fbab7e14549428d", "url": "https://github.com/firebase/firebase-admin-java/commit/04906aab7f27821a88743eee6fbab7e14549428d", "message": "Fix doc strings", "committedDate": "2020-09-24T16:33:58Z", "type": "commit"}, {"oid": "04906aab7f27821a88743eee6fbab7e14549428d", "url": "https://github.com/firebase/firebase-admin-java/commit/04906aab7f27821a88743eee6fbab7e14549428d", "message": "Fix doc strings", "committedDate": "2020-09-24T16:33:58Z", "type": "forcePushed"}]}