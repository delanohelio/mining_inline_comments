{"pr_number": 491, "pr_title": "Add Version information to RC template", "pr_createdAt": "2020-11-03T19:45:14Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/491", "timeline": [{"oid": "af11c4a00807ed70cc9d2c55274bfb33dadcf021", "url": "https://github.com/firebase/firebase-admin-java/commit/af11c4a00807ed70cc9d2c55274bfb33dadcf021", "message": "Add Version information to RC template", "committedDate": "2020-11-03T19:47:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNjk5Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516916992", "bodyText": "I did not want to throw here as the backend ideally should not provide invalid date time strings... Open to suggestions :)", "author": "lahirumaramba", "createdAt": "2020-11-03T19:49:45Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {\n+    return new Version().setDescription(description);\n+  }\n+\n+  Version() {\n+  }\n+\n+  Version(@NonNull VersionResponse versionResponse) {\n+    checkNotNull(versionResponse);\n+    this.versionNumber = versionResponse.getVersionNumber();\n+    if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      try {\n+        this.updateTime = dateFormat.parse(versionResponse.getUpdateTime()).getTime();\n+      } catch (ParseException e) {\n+        this.updateTime = 0;", "originalCommit": "af11c4a00807ed70cc9d2c55274bfb33dadcf021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTk4MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969981", "bodyText": "I think it's reasonable to throw IllegalStateException or something and fail fast.", "author": "hiranya911", "createdAt": "2020-11-03T21:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex b750090..76220bb 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -26,7 +26,10 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionRespons\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Objects;\n import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Represents a Remote Config template version.\n"}}, {"oid": "2f4ab8f59935154753aa5e92fbcba505bf9593c9", "url": "https://github.com/firebase/firebase-admin-java/commit/2f4ab8f59935154753aa5e92fbcba505bf9593c9", "message": "Add Version information to RC template", "committedDate": "2020-11-03T19:50:36Z", "type": "forcePushed"}, {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "url": "https://github.com/firebase/firebase-admin-java/commit/5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "message": "Add Version information to RC template", "committedDate": "2020-11-03T19:54:22Z", "type": "commit"}, {"oid": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "url": "https://github.com/firebase/firebase-admin-java/commit/5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "message": "Add Version information to RC template", "committedDate": "2020-11-03T19:54:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2ODY1Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516968653", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-11-03T21:34:32Z", "path": "src/main/java/com/google/firebase/remoteconfig/User.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.UserResponse;\n+\n+/**\n+ * Represents a Remote Config user. Output only.\n+ */\n+public final class User {\n+\n+  private String email;", "originalCommit": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/User.java b/src/main/java/com/google/firebase/remoteconfig/User.java\nindex a026f09..ae21328 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/User.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/User.java\n\n@@ -22,14 +22,16 @@ import com.google.firebase.internal.NonNull;\n import com.google.firebase.internal.Nullable;\n import com.google.firebase.remoteconfig.internal.TemplateResponse.UserResponse;\n \n+import java.util.Objects;\n+\n /**\n  * Represents a Remote Config user. Output only.\n  */\n-public final class User {\n+public class User {\n \n-  private String email;\n-  private String name;\n-  private String imageUrl;\n+  private final String email;\n+  private final String name;\n+  private final String imageUrl;\n \n   User(@NonNull UserResponse userResponse) {\n     checkNotNull(userResponse);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTA1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969058", "bodyText": "Everything except description can be made final.", "author": "hiranya911", "createdAt": "2020-11-03T21:35:25Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;", "originalCommit": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex b750090..76220bb 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -26,7 +26,10 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionRespons\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Objects;\n import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Represents a Remote Config template version.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTIzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969238", "bodyText": "private?", "author": "hiranya911", "createdAt": "2020-11-03T21:35:50Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {\n+    return new Version().setDescription(description);\n+  }\n+\n+  Version() {", "originalCommit": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex b750090..76220bb 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -26,7 +26,10 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionRespons\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Objects;\n import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Represents a Remote Config template version.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2OTMyNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516969324", "bodyText": "List factory methods after the constructors.", "author": "hiranya911", "createdAt": "2020-11-03T21:36:02Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.TimeZone;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private String versionNumber;\n+  private long updateTime;\n+  private String updateOrigin;\n+  private String updateType;\n+  private User updateUser;\n+  private String description;\n+  private String rollbackSource;\n+  private boolean legacy;\n+\n+  /**\n+   * Creates a new {@link Version} with a description.\n+   */\n+  public static Version withDescription(String description) {", "originalCommit": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex b750090..76220bb 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -26,7 +26,10 @@ import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionRespons\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.Objects;\n import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Represents a Remote Config template version.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MTQ0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r516971440", "bodyText": "May be just compare the long values.", "author": "hiranya911", "createdAt": "2020-11-03T21:40:46Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -105,21 +108,32 @@ public void testGetTemplate() throws Exception {\n                             )\n                     )\n     );\n-    List<Condition> expectedConditions = ImmutableList.of(\n+    final List<Condition> expectedConditions = ImmutableList.of(\n             new Condition(\"ios_en\", \"device.os == 'ios' && device.country in ['us', 'uk']\")\n                     .setTagColor(TagColor.INDIGO),\n             new Condition(\"android_en\",\n                     \"device.os == 'android' && device.country in ['us', 'uk']\")\n                     .setTagColor(TagColor.UNSPECIFIED)\n     );\n-    Template expectedTemplate = new Template()\n-            .setParameters(expectedParameters)\n-            .setParameterGroups(expectedParameterGroups)\n-            .setConditions(expectedConditions)\n-            .setETag(TEST_ETAG);\n \n     assertEquals(TEST_ETAG, receivedTemplate.getETag());\n-    assertEquals(expectedTemplate, receivedTemplate);\n+    assertEquals(expectedParameters, receivedTemplate.getParameters());\n+    assertEquals(expectedParameterGroups, receivedTemplate.getParameterGroups());\n+    assertEquals(expectedConditions, receivedTemplate.getConditions());\n+\n+    final Version receivedVersion = receivedTemplate.getVersion();\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+    dateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+    final String updateTime = dateFormat.format(new Date(receivedVersion.getUpdateTime()));\n+\n+    assertEquals(\"17\", receivedVersion.getVersionNumber());\n+    assertEquals(\"ADMIN_SDK_NODE\", receivedVersion.getUpdateOrigin());\n+    assertEquals(\"INCREMENTAL_UPDATE\", receivedVersion.getUpdateType());\n+    assertEquals(\"firebase-user@account.com\", receivedVersion.getUpdateUser().getEmail());\n+    assertEquals(\"dev-admin\", receivedVersion.getUpdateUser().getName());\n+    assertEquals(\"http://image.jpg\", receivedVersion.getUpdateUser().getImageUrl());\n+    assertEquals(\"Wed, 30 Sep 2020 17:56:07 GMT\", updateTime);", "originalCommit": "5123e8f44e7a1d869dd37a9f86bc8249c76a7dc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\nindex 1e307a3..abf3865 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java\n\n@@ -115,25 +116,28 @@ public class FirebaseRemoteConfigClientImplTest {\n                     \"device.os == 'android' && device.country in ['us', 'uk']\")\n                     .setTagColor(TagColor.UNSPECIFIED)\n     );\n+    final Version expectedVersion = new Version(new TemplateResponse.VersionResponse()\n+            .setVersionNumber(\"17\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setUpdateUser(new TemplateResponse.UserResponse()\n+                    .setEmail(\"firebase-user@account.com\")\n+                    .setName(\"dev-admin\")\n+                    .setImageUrl(\"http://image.jpg\"))\n+            .setUpdateTime(\"2020-11-03T20:24:15.203Z\")\n+            .setDescription(\"promo config\")\n+    );\n+\n+    Template expectedTemplate = new Template()\n+            .setETag(TEST_ETAG)\n+            .setParameters(expectedParameters)\n+            .setConditions(expectedConditions)\n+            .setParameterGroups(expectedParameterGroups)\n+            .setVersion(expectedVersion);\n \n     assertEquals(TEST_ETAG, receivedTemplate.getETag());\n-    assertEquals(expectedParameters, receivedTemplate.getParameters());\n-    assertEquals(expectedParameterGroups, receivedTemplate.getParameterGroups());\n-    assertEquals(expectedConditions, receivedTemplate.getConditions());\n-\n-    final Version receivedVersion = receivedTemplate.getVersion();\n-    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n-    dateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n-    final String updateTime = dateFormat.format(new Date(receivedVersion.getUpdateTime()));\n-\n-    assertEquals(\"17\", receivedVersion.getVersionNumber());\n-    assertEquals(\"ADMIN_SDK_NODE\", receivedVersion.getUpdateOrigin());\n-    assertEquals(\"INCREMENTAL_UPDATE\", receivedVersion.getUpdateType());\n-    assertEquals(\"firebase-user@account.com\", receivedVersion.getUpdateUser().getEmail());\n-    assertEquals(\"dev-admin\", receivedVersion.getUpdateUser().getName());\n-    assertEquals(\"http://image.jpg\", receivedVersion.getUpdateUser().getImageUrl());\n-    assertEquals(\"Wed, 30 Sep 2020 17:56:07 GMT\", updateTime);\n-    assertEquals(\"promo config\", receivedVersion.getDescription());\n+    assertEquals(expectedTemplate, receivedTemplate);\n+    assertEquals(1604435055000L, receivedTemplate.getVersion().getUpdateTime());\n     checkGetRequestHeader(interceptor.getLastRequest());\n   }\n \n"}}, {"oid": "0de7c09c643e498b050da378276a0c20b38fe8d8", "url": "https://github.com/firebase/firebase-admin-java/commit/0de7c09c643e498b050da378276a0c20b38fe8d8", "message": "PR fixes", "committedDate": "2020-11-04T20:20:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxMTA1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517611058", "bodyText": "I noticed that the update time is represented in FC3339 UTC \"Zulu\" format, accurate to nanoseconds. Added new code here to convert the timestamp to milliseconds properly.\nDateTime does not handle nanoseconds so I had to drop them from the timestamp string before parsing. Otherwise SimpleDateFormat considers nanoseconds as milliseconds and add it back to the time making the parsed date/time incorrect.\nApparently, there are better ways to handle nanoseconds in Java8 (LocalDateTime and Instant) :)", "author": "lahirumaramba", "createdAt": "2020-11-04T20:26:13Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.Strings;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse.VersionResponse;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Objects;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Represents a Remote Config template version.\n+ * Output only, except for the version description. Contains metadata about a particular\n+ * version of the Remote Config template. All fields are set at the time the specified Remote\n+ * Config template is published. A version's description field may be specified when\n+ * publishing a template.\n+ */\n+public final class Version {\n+\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n+\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n+\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n+  }\n+\n+  Version(@NonNull VersionResponse versionResponse) {\n+    checkNotNull(versionResponse);\n+    this.versionNumber = versionResponse.getVersionNumber();\n+\n+    if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.", "originalCommit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex 76220bb..2fcfcf9 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -40,9 +40,6 @@ import java.util.regex.Pattern;\n  */\n public final class Version {\n \n-  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n-          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n-\n   private final String versionNumber;\n   private final long updateTime;\n   private final String updateOrigin;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxOTY0Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517619646", "bodyText": "Include a detailed error message.", "author": "hiranya911", "createdAt": "2020-11-04T20:43:07Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -37,37 +40,53 @@\n  */\n public final class Version {\n \n-  private String versionNumber;\n-  private long updateTime;\n-  private String updateOrigin;\n-  private String updateType;\n-  private User updateUser;\n-  private String description;\n-  private String rollbackSource;\n-  private boolean legacy;\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n \n-  /**\n-   * Creates a new {@link Version} with a description.\n-   */\n-  public static Version withDescription(String description) {\n-    return new Version().setDescription(description);\n-  }\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n \n-  Version() {\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n   }\n \n   Version(@NonNull VersionResponse versionResponse) {\n     checkNotNull(versionResponse);\n     this.versionNumber = versionResponse.getVersionNumber();\n+\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n-      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n+      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN\n+              .matcher(versionResponse.getUpdateTime());\n+      String updateTimeWithoutNanoseconds = \"\";\n+      if (errorMatcher.find()) {\n+        updateTimeWithoutNanoseconds = errorMatcher.group(1);\n+      }\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n       dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n       try {\n-        this.updateTime = dateFormat.parse(versionResponse.getUpdateTime()).getTime();\n+        this.updateTime = dateFormat.parse(updateTimeWithoutNanoseconds).getTime();\n       } catch (ParseException e) {\n-        this.updateTime = 0;\n+        throw new IllegalStateException();", "originalCommit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex 76220bb..2fcfcf9 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -40,9 +40,6 @@ import java.util.regex.Pattern;\n  */\n public final class Version {\n \n-  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n-          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n-\n   private final String versionNumber;\n   private final long updateTime;\n   private final String updateOrigin;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTExMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517621111", "bodyText": "Instead of a complex regex, why not just strip away everything (and including) the period? That seems easier and more readable.", "author": "hiranya911", "createdAt": "2020-11-04T20:45:57Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -37,37 +40,53 @@\n  */\n public final class Version {\n \n-  private String versionNumber;\n-  private long updateTime;\n-  private String updateOrigin;\n-  private String updateType;\n-  private User updateUser;\n-  private String description;\n-  private String rollbackSource;\n-  private boolean legacy;\n+  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n+          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n \n-  /**\n-   * Creates a new {@link Version} with a description.\n-   */\n-  public static Version withDescription(String description) {\n-    return new Version().setDescription(description);\n-  }\n+  private final String versionNumber;\n+  private final long updateTime;\n+  private final String updateOrigin;\n+  private final String updateType;\n+  private final User updateUser;\n+  private final String rollbackSource;\n+  private final boolean legacy;\n+  private String description;\n \n-  Version() {\n+  private Version() {\n+    this.versionNumber = null;\n+    this.updateTime = 0L;\n+    this.updateOrigin = null;\n+    this.updateType = null;\n+    this.updateUser = null;\n+    this.rollbackSource = null;\n+    this.legacy = false;\n   }\n \n   Version(@NonNull VersionResponse versionResponse) {\n     checkNotNull(versionResponse);\n     this.versionNumber = versionResponse.getVersionNumber();\n+\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n-      SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+      // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n+      // example: \"2014-10-02T15:01:23.045123456Z\"\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n+      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN", "originalCommit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NTQ4Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518375482", "bodyText": "Makes sense! Updated the code to use substring()", "author": "lahirumaramba", "createdAt": "2020-11-05T21:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex 76220bb..2fcfcf9 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -40,9 +40,6 @@ import java.util.regex.Pattern;\n  */\n public final class Version {\n \n-  private static final Pattern ZULU_TIME_NO_NANOSECONDS_PATTERN = Pattern\n-          .compile(\"^(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2})\");\n-\n   private final String versionNumber;\n   private final long updateTime;\n   private final String updateOrigin;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQyNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r517624425", "bodyText": "I'd advise splitting this into multiple smaller test cases. You can define some class-level constants for values that should be shared across test cases.", "author": "hiranya911", "createdAt": "2020-11-04T20:52:33Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -59,4 +67,77 @@ public void testSetNullParameterGroups() {\n     Template template = new Template();\n     template.setParameterGroups(null);\n   }\n+\n+  @Test\n+  public void testEquality() {", "originalCommit": "0de7c09c643e498b050da378276a0c20b38fe8d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NzM3MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518377371", "bodyText": "I use all the template instances created here in a series of assertNotEquals() at the end of the test... would it be fine to move all those instances to class level?", "author": "lahirumaramba", "createdAt": "2020-11-05T21:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNDQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\nindex e002706..57f5a21 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n\n@@ -71,73 +117,40 @@ public class TemplateTest {\n   @Test\n   public void testEquality() {\n     final Template templateOne = new Template();\n-    final Template templateTwo = new Template();\n-\n-    assertEquals(templateOne, templateTwo);\n-\n-    final List<Condition> conditions = ImmutableList.<Condition>of(\n-            new Condition(\"ios_en\", \"exp ios\")\n-                    .setTagColor(TagColor.INDIGO),\n-            new Condition(\"android_en\", \"exp android\")\n-    );\n-    final Map<String, ParameterValue> conditionalValues = ImmutableMap.of(\n-            \"ios\", ParameterValue.of(\"hello ios\"),\n-            \"android\", ParameterValue.of(\"hello android\"),\n-            \"promo\", ParameterValue.inAppDefault()\n-    );\n-    final Map<String, Parameter> parameters = ImmutableMap.of(\n-            \"greeting_header\", new Parameter()\n-                    .setDefaultValue(ParameterValue.inAppDefault())\n-                    .setDescription(\"greeting header text\")\n-                    .setConditionalValues(conditionalValues),\n-            \"greeting_text\", new Parameter()\n-                    .setDefaultValue(ParameterValue.inAppDefault())\n-                    .setDescription(\"greeting text\")\n-                    .setConditionalValues(conditionalValues)\n-    );\n-    final Template templateThree = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters);\n-    final Template templateFour = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters);\n \n-    assertEquals(templateThree, templateFour);\n+    assertEquals(EMPTY_TEMPLATE, templateOne);\n \n-    final Map<String, ParameterGroup> parameterGroups = ImmutableMap.of(\n-            \"greetings_group\", new ParameterGroup()\n-                    .setDescription(\"description\")\n-                    .setParameters(parameters)\n-    );\n-    final Template templateFive = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters)\n-            .setParameterGroups(parameterGroups);\n-    final Template templateSix = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters)\n-            .setParameterGroups(parameterGroups);\n+    final Template templateTwo = new Template()\n+            .setConditions(CONDITIONS)\n+            .setParameters(PARAMETERS);\n \n-    assertEquals(templateFive, templateSix);\n+    assertEquals(TEMPLATE_WITH_CONDITIONS_PARAMETERS, templateTwo);\n \n-    final Template templateSeven = new Template()\n-            .setETag(\"etag-123456789097-20\");\n-    final Template templateEight = new Template()\n+    final Template templateThree = new Template()\n+            .setConditions(CONDITIONS)\n+            .setParameters(PARAMETERS)\n+            .setParameterGroups(PARAMETER_GROUPS);\n+\n+    assertEquals(TEMPLATE_WITH_CONDITIONS_PARAMETERS_GROUPS, templateThree);\n+\n+    final Template templateFour = new Template()\n             .setETag(\"etag-123456789097-20\");\n \n-    assertEquals(templateSeven, templateEight);\n+    assertEquals(TEMPLATE_WITH_ETAG, templateFour);\n+\n+    final Template templateFive = new Template()\n+            .setVersion(Version.withDescription(\"promo version\"));\n+\n+    assertEquals(TEMPLATE_WITH_VERSION, templateFive);\n+    assertNotEquals(templateOne, templateTwo);\n     assertNotEquals(templateOne, templateThree);\n+    assertNotEquals(templateOne, templateFour);\n     assertNotEquals(templateOne, templateFive);\n-    assertNotEquals(templateOne, templateSeven);\n+    assertNotEquals(templateTwo, templateThree);\n+    assertNotEquals(templateTwo, templateFour);\n+    assertNotEquals(templateTwo, templateFive);\n+    assertNotEquals(templateThree, templateFour);\n     assertNotEquals(templateThree, templateFive);\n-    assertNotEquals(templateThree, templateSeven);\n-    assertNotEquals(templateFive, templateSeven);\n-\n-    final Template templateNine = new Template()\n-            .setVersion(Version.withDescription(\"promo version\"));\n-    final Template templateTen = new Template()\n-            .setVersion(Version.withDescription(\"promo version\"));\n-    assertEquals(templateNine, templateTen);\n-    assertNotEquals(templateOne, templateNine);\n+    assertNotEquals(templateFour, templateFive);\n   }\n }\n"}}, {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "url": "https://github.com/firebase/firebase-admin-java/commit/a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "message": "PR fixes", "committedDate": "2020-11-05T21:39:12Z", "type": "commit"}, {"oid": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "url": "https://github.com/firebase/firebase-admin-java/commit/a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "message": "PR fixes", "committedDate": "2020-11-05T21:39:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NTc1Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518395757", "bodyText": "indexOfPeriod can be possibly 0, in which case this will do substring(0, 0).  I think following makes more sense to me:\nString updateTime = versionResponse.getUpdateTime();\nint indexOfPeriod = updateTime.indexOf('.');\nif (indexOfPeriod != -1) {\n  updateTime = updateTime.substring(0, indexOfPeriod);\n}", "author": "hiranya911", "createdAt": "2020-11-05T22:00:35Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -69,19 +66,16 @@ private Version() {\n     if (!Strings.isNullOrEmpty(versionResponse.getUpdateTime())) {\n       // Update Time is a timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds.\n       // example: \"2014-10-02T15:01:23.045123456Z\"\n-      // SimpleDateFormat cannot handle nanoseconds, therefore we drop nanoseconds from the string.\n-      Matcher errorMatcher = ZULU_TIME_NO_NANOSECONDS_PATTERN\n-              .matcher(versionResponse.getUpdateTime());\n-      String updateTimeWithoutNanoseconds = \"\";\n-      if (errorMatcher.find()) {\n-        updateTimeWithoutNanoseconds = errorMatcher.group(1);\n-      }\n+      // SimpleDateFormat cannot handle nanoseconds, therefore we strip nanoseconds from the string.\n+      String updateTime = versionResponse.getUpdateTime();\n+      int indexOfPeriod = !updateTime.contains(\".\") ? 0 : updateTime.indexOf(\".\");\n+      String updateTimeWithoutNanoseconds = updateTime.substring(0, indexOfPeriod);", "originalCommit": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NjM5OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r520186399", "bodyText": "I agree! This is better. Update the code. Thanks!", "author": "lahirumaramba", "createdAt": "2020-11-09T23:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5NTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "chunk": "diff --git a/src/main/java/com/google/firebase/remoteconfig/Version.java b/src/main/java/com/google/firebase/remoteconfig/Version.java\nindex 2fcfcf9..e3c1824 100644\n--- a/src/main/java/com/google/firebase/remoteconfig/Version.java\n+++ b/src/main/java/com/google/firebase/remoteconfig/Version.java\n\n@@ -68,12 +68,14 @@ public final class Version {\n       // example: \"2014-10-02T15:01:23.045123456Z\"\n       // SimpleDateFormat cannot handle nanoseconds, therefore we strip nanoseconds from the string.\n       String updateTime = versionResponse.getUpdateTime();\n-      int indexOfPeriod = !updateTime.contains(\".\") ? 0 : updateTime.indexOf(\".\");\n-      String updateTimeWithoutNanoseconds = updateTime.substring(0, indexOfPeriod);\n+      int indexOfPeriod = updateTime.indexOf(\".\");\n+      if (indexOfPeriod != -1) {\n+        updateTime = updateTime.substring(0, indexOfPeriod);\n+      }\n       SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n       dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n       try {\n-        this.updateTime = dateFormat.parse(updateTimeWithoutNanoseconds).getTime();\n+        this.updateTime = dateFormat.parse(updateTime).getTime();\n       } catch (ParseException e) {\n         throw new IllegalStateException(\"Unable to parse update time.\", e);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODM5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r518398394", "bodyText": "It's ok to define some of these as class level constants. For example templateNine can be a class-level constant, and templateTen can be initialized in the corresponding test case as a local var. Same goes for others.", "author": "hiranya911", "createdAt": "2020-11-05T22:06:08Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -132,5 +132,12 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateThree, templateSeven);\n     assertNotEquals(templateFive, templateSeven);\n+\n+    final Template templateNine = new Template()", "originalCommit": "a71dcd231bc4bb3f5d9ed0892017c2bd46ce192e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NjcwMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/491#discussion_r520186700", "bodyText": "I see what you mean now! Moved to class level constants. Thanks!", "author": "lahirumaramba", "createdAt": "2020-11-09T23:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5ODM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "chunk": "diff --git a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\nindex e002706..57f5a21 100644\n--- a/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n+++ b/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java\n\n@@ -71,73 +117,40 @@ public class TemplateTest {\n   @Test\n   public void testEquality() {\n     final Template templateOne = new Template();\n-    final Template templateTwo = new Template();\n-\n-    assertEquals(templateOne, templateTwo);\n-\n-    final List<Condition> conditions = ImmutableList.<Condition>of(\n-            new Condition(\"ios_en\", \"exp ios\")\n-                    .setTagColor(TagColor.INDIGO),\n-            new Condition(\"android_en\", \"exp android\")\n-    );\n-    final Map<String, ParameterValue> conditionalValues = ImmutableMap.of(\n-            \"ios\", ParameterValue.of(\"hello ios\"),\n-            \"android\", ParameterValue.of(\"hello android\"),\n-            \"promo\", ParameterValue.inAppDefault()\n-    );\n-    final Map<String, Parameter> parameters = ImmutableMap.of(\n-            \"greeting_header\", new Parameter()\n-                    .setDefaultValue(ParameterValue.inAppDefault())\n-                    .setDescription(\"greeting header text\")\n-                    .setConditionalValues(conditionalValues),\n-            \"greeting_text\", new Parameter()\n-                    .setDefaultValue(ParameterValue.inAppDefault())\n-                    .setDescription(\"greeting text\")\n-                    .setConditionalValues(conditionalValues)\n-    );\n-    final Template templateThree = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters);\n-    final Template templateFour = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters);\n \n-    assertEquals(templateThree, templateFour);\n+    assertEquals(EMPTY_TEMPLATE, templateOne);\n \n-    final Map<String, ParameterGroup> parameterGroups = ImmutableMap.of(\n-            \"greetings_group\", new ParameterGroup()\n-                    .setDescription(\"description\")\n-                    .setParameters(parameters)\n-    );\n-    final Template templateFive = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters)\n-            .setParameterGroups(parameterGroups);\n-    final Template templateSix = new Template()\n-            .setConditions(conditions)\n-            .setParameters(parameters)\n-            .setParameterGroups(parameterGroups);\n+    final Template templateTwo = new Template()\n+            .setConditions(CONDITIONS)\n+            .setParameters(PARAMETERS);\n \n-    assertEquals(templateFive, templateSix);\n+    assertEquals(TEMPLATE_WITH_CONDITIONS_PARAMETERS, templateTwo);\n \n-    final Template templateSeven = new Template()\n-            .setETag(\"etag-123456789097-20\");\n-    final Template templateEight = new Template()\n+    final Template templateThree = new Template()\n+            .setConditions(CONDITIONS)\n+            .setParameters(PARAMETERS)\n+            .setParameterGroups(PARAMETER_GROUPS);\n+\n+    assertEquals(TEMPLATE_WITH_CONDITIONS_PARAMETERS_GROUPS, templateThree);\n+\n+    final Template templateFour = new Template()\n             .setETag(\"etag-123456789097-20\");\n \n-    assertEquals(templateSeven, templateEight);\n+    assertEquals(TEMPLATE_WITH_ETAG, templateFour);\n+\n+    final Template templateFive = new Template()\n+            .setVersion(Version.withDescription(\"promo version\"));\n+\n+    assertEquals(TEMPLATE_WITH_VERSION, templateFive);\n+    assertNotEquals(templateOne, templateTwo);\n     assertNotEquals(templateOne, templateThree);\n+    assertNotEquals(templateOne, templateFour);\n     assertNotEquals(templateOne, templateFive);\n-    assertNotEquals(templateOne, templateSeven);\n+    assertNotEquals(templateTwo, templateThree);\n+    assertNotEquals(templateTwo, templateFour);\n+    assertNotEquals(templateTwo, templateFive);\n+    assertNotEquals(templateThree, templateFour);\n     assertNotEquals(templateThree, templateFive);\n-    assertNotEquals(templateThree, templateSeven);\n-    assertNotEquals(templateFive, templateSeven);\n-\n-    final Template templateNine = new Template()\n-            .setVersion(Version.withDescription(\"promo version\"));\n-    final Template templateTen = new Template()\n-            .setVersion(Version.withDescription(\"promo version\"));\n-    assertEquals(templateNine, templateTen);\n-    assertNotEquals(templateOne, templateNine);\n+    assertNotEquals(templateFour, templateFive);\n   }\n }\n"}}, {"oid": "a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "url": "https://github.com/firebase/firebase-admin-java/commit/a95ba9a9fb6d8d44d106f11393fe7296eca52d8e", "message": "Clean up template unit tests", "committedDate": "2020-11-09T23:26:57Z", "type": "commit"}]}