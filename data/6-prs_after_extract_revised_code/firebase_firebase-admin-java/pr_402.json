{"pr_number": 402, "pr_title": "Add operation to update OIDC provider configs.", "pr_createdAt": "2020-04-30T20:34:30Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/402", "timeline": [{"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e", "url": "https://github.com/firebase/firebase-admin-java/commit/2d6503d1fc2c696287273ca512d018c34cf5548e", "message": "Add operation to update OIDC provider configs.", "committedDate": "2020-04-30T21:27:47Z", "type": "commit"}, {"oid": "2d6503d1fc2c696287273ca512d018c34cf5548e", "url": "https://github.com/firebase/firebase-admin-java/commit/2d6503d1fc2c696287273ca512d018c34cf5548e", "message": "Add operation to update OIDC provider configs.", "committedDate": "2020-04-30T21:27:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTE0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418301144", "bodyText": "You will need to address this when implementing SAML config support.", "author": "hiranya911", "createdAt": "2020-04-30T21:31:48Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -330,21 +322,45 @@ OidcProviderConfig createOidcProviderConfig(\n     return sendRequest(\"POST\", url, request.getProperties(), OidcProviderConfig.class);\n   }\n \n+  OidcProviderConfig updateOidcProviderConfig(OidcProviderConfig.UpdateRequest request)\n+      throws FirebaseAuthException {\n+    Map<String, Object> properties = request.getProperties();\n+    checkArgument(!properties.isEmpty(),\n+        \"provider config update must have at least one property set\");\n+    GenericUrl url =\n+        new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(request.getProviderId()));\n+    url.put(\"updateMask\", generateMask(properties));\n+    return sendRequest(\"PATCH\", url, properties, OidcProviderConfig.class);\n+  }\n+\n   OidcProviderConfig getOidcProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     return sendRequest(\"GET\", url, null, OidcProviderConfig.class);\n   }\n \n   void deleteProviderConfig(String providerId) throws FirebaseAuthException {\n-    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + \"/oauthIdpConfigs/\" + providerId);\n+    GenericUrl url = new GenericUrl(idpConfigMgtBaseUrl + getOidcUrlSuffix(providerId));\n     sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n+  private static String generateMask(Map<String, Object> properties) {\n+    // This implementation does not currently handle the case of nested properties. This is fine", "originalCommit": "2d6503d1fc2c696287273ca512d018c34cf5548e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2ODcwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418368701", "bodyText": "Yeah I'll defer it until then.", "author": "micahstairs", "createdAt": "2020-05-01T00:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTE0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418303044", "bodyText": "Also test for empty/null client ID?", "author": "hiranya911", "createdAt": "2020-04-30T21:36:00Z", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -71,7 +71,41 @@ public void testCreateRequest() throws IOException {\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testInvalidIssuerUrl() {\n+  public void testCreateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.CreateRequest().setIssuer(\"not a valid url\");\n   }\n+\n+  @Test\n+  public void testUpdateRequestFromOidcProviderConfig() throws IOException {\n+    OidcProviderConfig config = jsonFactory.fromString(OIDC_JSON_STRING, OidcProviderConfig.class);\n+\n+    OidcProviderConfig.UpdateRequest updateRequest = config.updateRequest();\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    assertTrue(updateRequest.getProperties().isEmpty());\n+  }\n+\n+  @Test\n+  public void testUpdateRequest() throws IOException {\n+    OidcProviderConfig.UpdateRequest updateRequest =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\");\n+    updateRequest\n+      .setDisplayName(\"DISPLAY_NAME\")\n+      .setEnabled(false)\n+      .setClientId(\"CLIENT_ID\")\n+      .setIssuer(\"https://oidc.com/issuer\");\n+\n+    assertEquals(\"oidc.provider-id\", updateRequest.getProviderId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 4);\n+    assertEquals(\"DISPLAY_NAME\", (String) properties.get(\"displayName\"));\n+    assertFalse((boolean) properties.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", (String) properties.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestInvalidIssuerUrl() {", "originalCommit": "2d6503d1fc2c696287273ca512d018c34cf5548e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDgxOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384819", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-01T02:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Njk3NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418676974", "bodyText": "I was particularly referring to empty/null client ID: .setClientId(null). Not sure if the current tests cover that case. But feel free to address it in a future PR.", "author": "hiranya911", "createdAt": "2020-05-01T18:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczNjc1Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418736752", "bodyText": "Ah, that's easy enough to add here. Done.", "author": "micahstairs", "createdAt": "2020-05-01T21:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "952e3c96881cbd42469bce13f593df4ff535db45", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\nindex 8ce6509..b3073c3 100644\n--- a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n+++ b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n\n@@ -104,6 +104,11 @@ public class OidcProviderConfigTest {\n     assertEquals(\"https://oidc.com/issuer\", (String) properties.get(\"issuer\"));\n   }\n \n+  @Test(expected = IllegalArgumentException.class)\n+  public void testUpdateRequestMissingProviderId() {\n+    new OidcProviderConfig.UpdateRequest(null);\n+  }\n+\n   @Test(expected = IllegalArgumentException.class)\n   public void testUpdateRequestInvalidIssuerUrl() {\n     new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\").setIssuer(\"not a valid url\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ0Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418303447", "bodyText": "assertEquals(1, parsed.size());", "author": "hiranya911", "createdAt": "2020-04-30T21:36:56Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1491,6 +1491,110 @@ public void testTenantAwareCreateOidcProvider() throws Exception {\n     checkUrl(interceptor, \"POST\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs\");\n   }\n \n+  @Test\n+  public void testUpdateOidcProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\")\n+            .setDisplayName(\"DISPLAY_NAME\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com/issuer\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"clientId,displayName,enabled,issuer\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    assertEquals(\"CLIENT_ID\", parsed.get(\"clientId\"));\n+    assertEquals(\"https://oidc.com/issuer\", parsed.get(\"issuer\"));\n+  }\n+\n+  @Test\n+  public void testUpdateOidcProviderMinimal() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.provider-id\").setDisplayName(\"DISPLAY_NAME\");\n+\n+    OidcProviderConfig config = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+\n+    checkOidcProviderConfig(config);\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"displayName\", url.getFirst(\"updateMask\"));\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertNull(parsed.get(\"enabled\"));", "originalCommit": "2d6503d1fc2c696287273ca512d018c34cf5548e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDgwOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384808", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-01T02:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "952e3c96881cbd42469bce13f593df4ff535db45", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\nindex 2bc4cea..ed6ea15 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n\n@@ -1531,10 +1531,8 @@ public class FirebaseUserManagerTest {\n     GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n     assertEquals(\"displayName\", url.getFirst(\"updateMask\"));\n     GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(1, parsed.size());\n     assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n-    assertNull(parsed.get(\"enabled\"));\n-    assertNull(parsed.get(\"clientId\"));\n-    assertNull(parsed.get(\"issuer\"));\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNDIxNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418304217", "bodyText": "check not null or empty", "author": "hiranya911", "createdAt": "2020-04-30T21:38:44Z", "path": "src/main/java/com/google/firebase/auth/ProviderConfig.java", "diffHunk": "@@ -104,4 +104,48 @@ public T setEnabled(boolean enabled) {\n \n     abstract T getThis();\n   }\n+\n+  /**\n+   * A base class for updating the attributes of an existing provider.\n+   */\n+  public abstract static class AbstractUpdateRequest<T extends AbstractUpdateRequest<T>> {\n+\n+    final String providerId;\n+    final Map<String,Object> properties = new HashMap<>();\n+\n+    AbstractUpdateRequest(String providerId) {\n+      this.providerId = providerId;", "originalCommit": "2d6503d1fc2c696287273ca512d018c34cf5548e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NDc3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/402#discussion_r418384775", "bodyText": "I already had the check in OidcProviderConfig (so that it could be closer to the Javadoc comment which mentions that it throws an IllegalArgumentException if it's null or empty. But I moved it up here.", "author": "micahstairs", "createdAt": "2020-05-01T02:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNDIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "952e3c96881cbd42469bce13f593df4ff535db45", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/ProviderConfig.java b/src/main/java/com/google/firebase/auth/ProviderConfig.java\nindex 740b29e..434daab 100644\n--- a/src/main/java/com/google/firebase/auth/ProviderConfig.java\n+++ b/src/main/java/com/google/firebase/auth/ProviderConfig.java\n\n@@ -114,6 +114,7 @@ public abstract class ProviderConfig {\n     final Map<String,Object> properties = new HashMap<>();\n \n     AbstractUpdateRequest(String providerId) {\n+      checkArgument(!Strings.isNullOrEmpty(providerId), \"provider ID must not be null or empty\");\n       this.providerId = providerId;\n     }\n \n"}}, {"oid": "952e3c96881cbd42469bce13f593df4ff535db45", "url": "https://github.com/firebase/firebase-admin-java/commit/952e3c96881cbd42469bce13f593df4ff535db45", "message": "Address pull request feedback.", "committedDate": "2020-05-01T02:06:43Z", "type": "commit"}, {"oid": "934a44575372e28cfd85e4255d552faf4b2ba447", "url": "https://github.com/firebase/firebase-admin-java/commit/934a44575372e28cfd85e4255d552faf4b2ba447", "message": "Add units test to make sure an exception is thrown when the client ID is missing.", "committedDate": "2020-05-01T21:00:10Z", "type": "commit"}]}