{"pr_number": 420, "pr_title": "Add operations to create and delete SAML provider configs.", "pr_createdAt": "2020-05-17T20:43:27Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/420", "timeline": [{"oid": "72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "url": "https://github.com/firebase/firebase-admin-java/commit/72170c4f6abfad3cfc0dd57a19c994c0149dcaf1", "message": "Add create and delete operations for SAML provider configs.", "committedDate": "2020-05-18T23:10:37Z", "type": "forcePushed"}, {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "url": "https://github.com/firebase/firebase-admin-java/commit/28db8336e0010958b39af6c654b9e0cc5df5c2c8", "message": "Add create and delete operations for SAML provider configs.", "committedDate": "2020-05-18T23:13:09Z", "type": "commit"}, {"oid": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "url": "https://github.com/firebase/firebase-admin-java/commit/28db8336e0010958b39af6c654b9e0cc5df5c2c8", "message": "Add create and delete operations for SAML provider configs.", "committedDate": "2020-05-18T23:13:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDcyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384722", "bodyText": "SAML auth provider config", "author": "hiranya911", "createdAt": "2020-05-21T00:41:17Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link", "originalCommit": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjAzNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428416037", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-21T02:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\nindex 2cf4e15..bbb74c0 100644\n--- a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n\n@@ -1187,8 +1189,8 @@ public abstract class AbstractFirebaseAuth {\n   }\n \n   /**\n-   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n-   * SamlProviderConfig.CreateRequest}.\n+   * Creates a new provider SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n    *\n    * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n    * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDg1NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428384854", "bodyText": "Also check for prefix and throw?", "author": "hiranya911", "createdAt": "2020-05-21T00:41:55Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the SAML Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteSamlProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteSamlProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty.\n+   */\n+  public ApiFuture<Void> deleteSamlProviderConfigAsync(String providerId) {\n+    return deleteSamlProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteSamlProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");", "originalCommit": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxNjcxOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428416719", "bodyText": "Sure! I've decided to add a static SamlProviderConfig.checkSamlProviderId method so that we don't duplicate the logic in too many places.\nAlso made the relevant changes for OIDC provider config checks too.", "author": "micahstairs", "createdAt": "2020-05-21T02:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\nindex 2cf4e15..bbb74c0 100644\n--- a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n\n@@ -1187,8 +1189,8 @@ public abstract class AbstractFirebaseAuth {\n   }\n \n   /**\n-   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n-   * SamlProviderConfig.CreateRequest}.\n+   * Creates a new provider SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n    *\n    * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n    * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTE2MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428385160", "bodyText": "Ideally all argument validation should happen outside the CallableOperation. This looks like it would validate the request parameters within the CallableOperation.", "author": "hiranya911", "createdAt": "2020-05-21T00:43:09Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -1186,6 +1186,86 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n+   * SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    final FirebaseUserManager userManager = getUserManager();", "originalCommit": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyMzIxMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428423212", "bodyText": "Okay, I've moved it for both createSamlProviderConfigOp and createOidcProviderConfigOp. I've added TODOs for a couple other operations that were starting to get out of scope for this PR.", "author": "micahstairs", "createdAt": "2020-05-21T03:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\nindex 2cf4e15..bbb74c0 100644\n--- a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n\n@@ -1187,8 +1189,8 @@ public abstract class AbstractFirebaseAuth {\n   }\n \n   /**\n-   * Creates a new provider SAML Auth config with the attributes contained in the specified {@link\n-   * SamlProviderConfig.CreateRequest}.\n+   * Creates a new provider SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n    *\n    * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n    * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428387240", "bodyText": "Just a hunch. See if you can use GenericJson in place of Map<String, Object>. If it works, it would clean things up a bit.", "author": "hiranya911", "createdAt": "2020-05-21T00:50:56Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1730,17 +1730,207 @@ public void testDeleteProviderConfigWithNotFoundError() throws Exception {\n   }\n \n   @Test\n-  public void testTenantAwareDeleteProviderConfig() throws Exception {\n+  public void testTenantAwareDeleteOidcProviderConfig() throws Exception {\n     TestResponseInterceptor interceptor = initializeAppForTenantAwareUserManagement(\n         \"TENANT_ID\",\n         \"{}\");\n     TenantAwareFirebaseAuth tenantAwareAuth =\n         FirebaseAuth.getInstance().getTenantManager().getAuthForTenant(\"TENANT_ID\");\n \n-    tenantAwareAuth.deleteOidcProviderConfig(\"PROVIDER_ID\");\n+    tenantAwareAuth.deleteOidcProviderConfig(\"oidc.provider-id\");\n \n     checkRequestHeaders(interceptor);\n-    checkUrl(interceptor, \"DELETE\", TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/PROVIDER_ID\");\n+    String expectedUrl = TENANTS_BASE_URL + \"/TENANT_ID/oauthIdpConfigs/oidc.provider-id\";\n+    checkUrl(interceptor, \"DELETE\", expectedUrl);\n+  }\n+\n+  @Test\n+  public void testCreateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.CreateRequest createRequest =\n+        new SamlProviderConfig.CreateRequest()\n+          .setProviderId(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().createSamlProviderConfig(createRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"POST\", PROJECT_BASE_URL + \"/inboundSamlConfigs\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\"saml.provider-id\", url.getFirst(\"inboundSamlConfigId\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "originalCommit": "28db8336e0010958b39af6c654b9e0cc5df5c2c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwMzM1Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428403353", "bodyText": "If I try to cast it to GenericJson I get the following error:\njava.lang.ClassCastException: com.google.api.client.util.ArrayMap cannot be cast to com.google.api.client.json.GenericJson", "author": "micahstairs", "createdAt": "2020-05-21T01:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTEwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428835101", "bodyText": "Thanks for checking.", "author": "hiranya911", "createdAt": "2020-05-21T18:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NzI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\nindex 807956d..79eeaca 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n\n@@ -1721,12 +1721,12 @@ public class FirebaseUserManagerTest {\n         initializeAppForUserManagementWithStatusCode(404,\n             \"{\\\"error\\\": {\\\"message\\\": \\\"CONFIGURATION_NOT_FOUND\\\"}}\");\n     try {\n-      FirebaseAuth.getInstance().deleteOidcProviderConfig(\"UNKNOWN\");\n+      FirebaseAuth.getInstance().deleteOidcProviderConfig(\"oidc.UNKNOWN\");\n       fail(\"No error thrown for invalid response\");\n     } catch (FirebaseAuthException e) {\n       assertEquals(FirebaseUserManager.CONFIGURATION_NOT_FOUND_ERROR, e.getErrorCode());\n     }\n-    checkUrl(interceptor, \"DELETE\", PROJECT_BASE_URL + \"/oauthIdpConfigs/UNKNOWN\");\n+    checkUrl(interceptor, \"DELETE\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.UNKNOWN\");\n   }\n \n   @Test\n"}}, {"oid": "6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "url": "https://github.com/firebase/firebase-admin-java/commit/6efa9e7970b589a32e04b2dcc9bf707d44aa1c37", "message": "Clean up provider config ID prefix assertions.", "committedDate": "2020-05-21T02:47:36Z", "type": "commit"}, {"oid": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "url": "https://github.com/firebase/firebase-admin-java/commit/06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "message": "Move argument validation of create provider config methods outside CallableOperation.", "committedDate": "2020-05-21T03:15:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTYwNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428835605", "bodyText": "This still reads a bit weird. Shouldn't it be a new OIDC auth provider config...?", "author": "hiranya911", "createdAt": "2020-05-21T18:29:54Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -939,13 +939,15 @@ protected String execute() throws FirebaseAuthException {\n   }\n \n   /**\n-   * Creates a new provider OIDC Auth config with the attributes contained in the specified {@link\n-   * OidcProviderConfig.CreateRequest}.\n+   * Creates a new provider OIDC Auth provider config with the attributes contained in the specified", "originalCommit": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MTQ0OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428881449", "bodyText": "Sorry, thanks for catching that typo.", "author": "micahstairs", "createdAt": "2020-05-21T19:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "810eb4ba73a37c10144bebf81db9f63526ec201b", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\nindex 3cef046..97d8ec3 100644\n--- a/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n+++ b/src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java\n\n@@ -939,7 +939,7 @@ public abstract class AbstractFirebaseAuth {\n   }\n \n   /**\n-   * Creates a new provider OIDC Auth provider config with the attributes contained in the specified\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n    * {@link OidcProviderConfig.CreateRequest}.\n    *\n    * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNjk3MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428836971", "bodyText": "Seems we can remove this helper method now and just call checkOidcProviderId() in its place.", "author": "hiranya911", "createdAt": "2020-05-21T18:32:34Z", "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -102,7 +108,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"oidc.\"), \"Invalid OIDC provider ID: \" + providerId);\n+      checkOidcProviderId(providerId);", "originalCommit": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDMyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924322", "bodyText": "Restructured to make this possible.", "author": "micahstairs", "createdAt": "2020-05-21T21:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzNjk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "907c4953f80379c689948c2f8abcf5916940a130", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/OidcProviderConfig.java b/src/main/java/com/google/firebase/auth/OidcProviderConfig.java\nindex 6ea6fbe..c8c29dc 100644\n--- a/src/main/java/com/google/firebase/auth/OidcProviderConfig.java\n+++ b/src/main/java/com/google/firebase/auth/OidcProviderConfig.java\n\n@@ -106,10 +119,6 @@ public final class OidcProviderConfig extends ProviderConfig {\n     CreateRequest getThis() {\n       return this;\n     }\n-\n-    void assertValidProviderIdFormat(String providerId) {\n-      checkOidcProviderId(providerId);\n-    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODg5Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428838896", "bodyText": "OidcProviderConfig", "author": "hiranya911", "createdAt": "2020-05-21T18:36:22Z", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {\n+    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");", "originalCommit": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4MTUxNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428881517", "bodyText": "Fixed.", "author": "micahstairs", "createdAt": "2020-05-21T19:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzODg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "810eb4ba73a37c10144bebf81db9f63526ec201b", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\nindex 1e14c4e..db9d5c5 100644\n--- a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n+++ b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n\n@@ -52,23 +52,23 @@ public class OidcProviderConfigTest {\n   }\n \n   @Test\n-  public void testCheckSamlProviderId() {\n-    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");\n+  public void testCheckOidcProviderId() {\n+    OidcProviderConfig.checkOidcProviderId(\"oidc.valid-id\");\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdNull() {\n-    SamlProviderConfig.checkSamlProviderId(null);\n+  public void testCreateOidcProviderIdNull() {\n+    OidcProviderConfig.checkOidcProviderId(null);\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdEmpty() {\n-    SamlProviderConfig.checkSamlProviderId(\"\");\n+  public void testCreateOidcProviderIdEmpty() {\n+    OidcProviderConfig.checkOidcProviderId(\"\");\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdInvalidPrefix() {\n-    SamlProviderConfig.checkSamlProviderId(\"not prefixed with saml.\");\n+  public void testCreateOidcProviderIdInvalidPrefix() {\n+    OidcProviderConfig.checkOidcProviderId(\"not prefixed with oidc.\");\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTU1NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428839555", "bodyText": "Is there a better way capture these tests without directly testing on internal methods? May be run tests on public methods getProviderConfig() and deleteProviderConfig() with invalid arguments to verify this behavior.", "author": "hiranya911", "createdAt": "2020-05-21T18:37:28Z", "path": "src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java", "diffHunk": "@@ -51,6 +51,26 @@ public void testJsonDeserialization() throws IOException {\n     assertEquals(\"https://oidc.com/issuer\", config.getIssuer());\n   }\n \n+  @Test\n+  public void testCheckSamlProviderId() {", "originalCommit": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDE2Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924166", "bodyText": "I've moved the testing to the API level!", "author": "micahstairs", "createdAt": "2020-05-21T21:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzOTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "810eb4ba73a37c10144bebf81db9f63526ec201b", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\nindex 1e14c4e..db9d5c5 100644\n--- a/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n+++ b/src/test/java/com/google/firebase/auth/OidcProviderConfigTest.java\n\n@@ -52,23 +52,23 @@ public class OidcProviderConfigTest {\n   }\n \n   @Test\n-  public void testCheckSamlProviderId() {\n-    SamlProviderConfig.checkSamlProviderId(\"saml.valid-id\");\n+  public void testCheckOidcProviderId() {\n+    OidcProviderConfig.checkOidcProviderId(\"oidc.valid-id\");\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdNull() {\n-    SamlProviderConfig.checkSamlProviderId(null);\n+  public void testCreateOidcProviderIdNull() {\n+    OidcProviderConfig.checkOidcProviderId(null);\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdEmpty() {\n-    SamlProviderConfig.checkSamlProviderId(\"\");\n+  public void testCreateOidcProviderIdEmpty() {\n+    OidcProviderConfig.checkOidcProviderId(\"\");\n   }\n \n   @Test(expected = IllegalArgumentException.class)\n-  public void testCreateSamlProviderIdInvalidPrefix() {\n-    SamlProviderConfig.checkSamlProviderId(\"not prefixed with saml.\");\n+  public void testCreateOidcProviderIdInvalidPrefix() {\n+    OidcProviderConfig.checkOidcProviderId(\"not prefixed with oidc.\");\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTY0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428841644", "bodyText": "Remove this helper as well.", "author": "hiranya911", "createdAt": "2020-05-21T18:41:39Z", "path": "src/main/java/com/google/firebase/auth/SamlProviderConfig.java", "diffHunk": "@@ -183,7 +189,7 @@ CreateRequest getThis() {\n     }\n \n     void assertValidProviderIdFormat(String providerId) {\n-      checkArgument(providerId.startsWith(\"saml.\"), \"Invalid SAML provider ID: \" + providerId);\n+      checkSamlProviderId(providerId);", "originalCommit": "06d1db98d27963373cc71fe00f8fe6d8995d5b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNDIzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428924233", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-21T21:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "907c4953f80379c689948c2f8abcf5916940a130", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/SamlProviderConfig.java b/src/main/java/com/google/firebase/auth/SamlProviderConfig.java\nindex fe67c16..e73781f 100644\n--- a/src/main/java/com/google/firebase/auth/SamlProviderConfig.java\n+++ b/src/main/java/com/google/firebase/auth/SamlProviderConfig.java\n\n@@ -187,9 +200,5 @@ public final class SamlProviderConfig extends ProviderConfig {\n     CreateRequest getThis() {\n       return this;\n     }\n-\n-    void assertValidProviderIdFormat(String providerId) {\n-      checkSamlProviderId(providerId);\n-    }\n   }\n }\n"}}, {"oid": "810eb4ba73a37c10144bebf81db9f63526ec201b", "url": "https://github.com/firebase/firebase-admin-java/commit/810eb4ba73a37c10144bebf81db9f63526ec201b", "message": "Address two suggestions.", "committedDate": "2020-05-21T19:58:43Z", "type": "commit"}, {"oid": "907c4953f80379c689948c2f8abcf5916940a130", "url": "https://github.com/firebase/firebase-admin-java/commit/907c4953f80379c689948c2f8abcf5916940a130", "message": "Clean up prefix checks and move testing to API level.", "committedDate": "2020-05-21T21:23:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1OTM0MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428959341", "bodyText": "Nit: You can also pass a value like saml.InvallidProviderId here so the invalid prefix will get tested more explicitly.", "author": "hiranya911", "createdAt": "2020-05-21T22:59:14Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1606,6 +1606,32 @@ public void testGetOidcProviderConfig() throws Exception {\n     checkUrl(interceptor, \"GET\", PROJECT_BASE_URL + \"/oauthIdpConfigs/oidc.provider-id\");\n   }\n \n+  @Test\n+  public void testGetOidcProviderConfigMissingId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(null);\n+      fail(\"No error thrown for missing provider ID.\");\n+    } catch (IllegalArgumentException e) {\n+      // Expected.\n+    }\n+  }\n+\n+  @Test\n+  public void testGetOidcProviderConfigInvalidId() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"oidc.json\"));\n+\n+    try {\n+      FirebaseAuth.getInstance().getOidcProviderConfig(\"not a valid provider ID\");", "originalCommit": "907c4953f80379c689948c2f8abcf5916940a130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NTAyMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/420#discussion_r428965022", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-21T23:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1OTM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa2bf8908b9f2e4150c7496e7a139a85f6795882", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\nindex 4180317..84307d3 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n\n@@ -1625,7 +1625,7 @@ public class FirebaseUserManagerTest {\n         TestUtils.loadResource(\"oidc.json\"));\n \n     try {\n-      FirebaseAuth.getInstance().getOidcProviderConfig(\"not a valid provider ID\");\n+      FirebaseAuth.getInstance().getOidcProviderConfig(\"saml.invalid-oidc-provider-id\");\n       fail(\"No error thrown for invalid provider ID.\");\n     } catch (IllegalArgumentException e) {\n       // Expected.\n"}}, {"oid": "aa2bf8908b9f2e4150c7496e7a139a85f6795882", "url": "https://github.com/firebase/firebase-admin-java/commit/aa2bf8908b9f2e4150c7496e7a139a85f6795882", "message": "Rename invalid provider config IDs used in unit tests.", "committedDate": "2020-05-21T23:18:51Z", "type": "commit"}]}