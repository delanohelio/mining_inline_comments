{"pr_number": 424, "pr_title": "Add operation to update SAML provider configs.", "pr_createdAt": "2020-05-26T18:42:14Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/424", "timeline": [{"oid": "d83bb878806fadfc6f915476cf473a993bfbb521", "url": "https://github.com/firebase/firebase-admin-java/commit/d83bb878806fadfc6f915476cf473a993bfbb521", "message": "Add operation to update SAML provider configs.", "committedDate": "2020-05-26T18:40:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MDE3NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r430750174", "bodyText": "Declare return type to be Set<String> for extra flexibility.", "author": "hiranya911", "createdAt": "2020-05-26T22:51:49Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -384,12 +389,19 @@ void deleteSamlProviderConfig(String providerId) throws FirebaseAuthException {\n     sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n-  private static String generateMask(Map<String, Object> properties) {\n-    // This implementation does not currently handle the case of nested properties. This is fine\n-    // since we do not currently generate masks for any properties with nested values. When it\n-    // comes time to implement this, we can check if a property has nested properties by checking\n-    // if it is an instance of the Map class.\n-    return Joiner.on(\",\").join(ImmutableSortedSet.copyOf(properties.keySet()));\n+  private static ImmutableSortedSet<String> generateMask(Map<String, Object> properties) {", "originalCommit": "d83bb878806fadfc6f915476cf473a993bfbb521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0OTA1MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r431349051", "bodyText": "Making the return type Set<String> does not give any extra flexibility (since this is not an interface). If this were an input parameter, we would certainly want to accept Set or even Collection instead of ImmutableSortedSet.\nIn Java, it's best to make the return type as specific as possible. In this case, indicating that the return value is both immutable and sorted is important. See go/java-practices/methods#type_generality.", "author": "micahstairs", "createdAt": "2020-05-27T18:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MDAzMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r431360031", "bodyText": "We spoke and decided to change it to Set in order to avoid Guava from leaking into the method signatures.", "author": "micahstairs", "createdAt": "2020-05-27T18:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MDE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "bed8221a2d8ca89a79e74069cddd18068032e4e3", "chunk": "diff --git a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\nindex 02ab113..a6dfb09 100644\n--- a/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n+++ b/src/main/java/com/google/firebase/auth/FirebaseUserManager.java\n\n@@ -389,11 +390,11 @@ class FirebaseUserManager {\n     sendRequest(\"DELETE\", url, null, GenericJson.class);\n   }\n \n-  private static ImmutableSortedSet<String> generateMask(Map<String, Object> properties) {\n+  private static Set<String> generateMask(Map<String, Object> properties) {\n     ImmutableSortedSet.Builder<String> maskBuilder = ImmutableSortedSet.naturalOrder();\n     for (Map.Entry<String, Object> entry : properties.entrySet()) {\n       if (entry.getValue() instanceof Map) {\n-        ImmutableSortedSet<String> childMask = generateMask((Map<String, Object>) entry.getValue());\n+        Set<String> childMask = generateMask((Map<String, Object>) entry.getValue());\n         for (String childProperty : childMask) {\n           maskBuilder.add(entry.getKey() + \".\" + childProperty);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MjIyOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r430752229", "bodyText": "Some empty lines would make this a bit more pleasing to the eye. How about a newline just before this line?", "author": "hiranya911", "createdAt": "2020-05-26T22:57:38Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1944,6 +1944,136 @@ public void testTenantAwareCreateSamlProvider() throws Exception {\n     checkUrl(interceptor, \"POST\", TENANTS_BASE_URL + \"/TENANT_ID/inboundSamlConfigs\");\n   }\n \n+  @Test\n+  public void testUpdateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.UpdateRequest updateRequest =\n+        new SamlProviderConfig.UpdateRequest(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().updateSamlProviderConfig(updateRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/inboundSamlConfigs/saml.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\n+        \"displayName,enabled,idpConfig.idpCertificates,idpConfig.idpEntityId,idpConfig.ssoUrl,\"\n+          + \"spConfig.callbackUri,spConfig.spEntityId\",\n+        url.getFirst(\"updateMask\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");", "originalCommit": "d83bb878806fadfc6f915476cf473a993bfbb521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MjczMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r431352730", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-27T18:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f29ebc31b2b1219fda7f615602fa1321512559cc", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\nindex 6a859dc..1b27d79 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n\n@@ -1975,6 +1975,7 @@ public class FirebaseUserManagerTest {\n     GenericJson parsed = parseRequestContent(interceptor);\n     assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n     assertTrue((boolean) parsed.get(\"enabled\"));\n+\n     Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");\n     assertNotNull(idpConfig);\n     assertEquals(3, idpConfig.size());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MjMzOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r430752339", "bodyText": "Here too.", "author": "hiranya911", "createdAt": "2020-05-26T22:57:54Z", "path": "src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java", "diffHunk": "@@ -1944,6 +1944,136 @@ public void testTenantAwareCreateSamlProvider() throws Exception {\n     checkUrl(interceptor, \"POST\", TENANTS_BASE_URL + \"/TENANT_ID/inboundSamlConfigs\");\n   }\n \n+  @Test\n+  public void testUpdateSamlProvider() throws Exception {\n+    TestResponseInterceptor interceptor = initializeAppForUserManagement(\n+        TestUtils.loadResource(\"saml.json\"));\n+    // TODO(micahstairs): Add 'signRequest' to the create request once that field is added to\n+    // SamlProviderConfig.\n+    SamlProviderConfig.UpdateRequest updateRequest =\n+        new SamlProviderConfig.UpdateRequest(\"saml.provider-id\")\n+          .setDisplayName(\"DISPLAY_NAME\")\n+          .setEnabled(true)\n+          .setIdpEntityId(\"IDP_ENTITY_ID\")\n+          .setSsoUrl(\"https://example.com/login\")\n+          .addX509Certificate(\"certificate1\")\n+          .addX509Certificate(\"certificate2\")\n+          .setRpEntityId(\"RP_ENTITY_ID\")\n+          .setCallbackUrl(\"https://projectId.firebaseapp.com/__/auth/handler\");\n+\n+    SamlProviderConfig config = FirebaseAuth.getInstance().updateSamlProviderConfig(updateRequest);\n+\n+    checkSamlProviderConfig(config, \"saml.provider-id\");\n+    checkRequestHeaders(interceptor);\n+    checkUrl(interceptor, \"PATCH\", PROJECT_BASE_URL + \"/inboundSamlConfigs/saml.provider-id\");\n+    GenericUrl url = interceptor.getResponse().getRequest().getUrl();\n+    assertEquals(\n+        \"displayName,enabled,idpConfig.idpCertificates,idpConfig.idpEntityId,idpConfig.ssoUrl,\"\n+          + \"spConfig.callbackUri,spConfig.spEntityId\",\n+        url.getFirst(\"updateMask\"));\n+\n+    GenericJson parsed = parseRequestContent(interceptor);\n+    assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n+    assertTrue((boolean) parsed.get(\"enabled\"));\n+    Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");\n+    assertNotNull(idpConfig);\n+    assertEquals(3, idpConfig.size());\n+    assertEquals(\"IDP_ENTITY_ID\", idpConfig.get(\"idpEntityId\"));\n+    assertEquals(\"https://example.com/login\", idpConfig.get(\"ssoUrl\"));\n+    List<Object> idpCertificates = (List<Object>) idpConfig.get(\"idpCertificates\");\n+    assertNotNull(idpCertificates);\n+    assertEquals(2, idpCertificates.size());\n+    assertEquals(ImmutableMap.of(\"x509Certificate\", \"certificate1\"), idpCertificates.get(0));\n+    assertEquals(ImmutableMap.of(\"x509Certificate\", \"certificate2\"), idpCertificates.get(1));\n+    Map<String, Object> spConfig = (Map<String, Object>) parsed.get(\"spConfig\");", "originalCommit": "d83bb878806fadfc6f915476cf473a993bfbb521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MjY3Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/424#discussion_r431352673", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-05-27T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MjMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f29ebc31b2b1219fda7f615602fa1321512559cc", "chunk": "diff --git a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\nindex 6a859dc..1b27d79 100644\n--- a/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n+++ b/src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java\n\n@@ -1975,6 +1975,7 @@ public class FirebaseUserManagerTest {\n     GenericJson parsed = parseRequestContent(interceptor);\n     assertEquals(\"DISPLAY_NAME\", parsed.get(\"displayName\"));\n     assertTrue((boolean) parsed.get(\"enabled\"));\n+\n     Map<String, Object> idpConfig = (Map<String, Object>) parsed.get(\"idpConfig\");\n     assertNotNull(idpConfig);\n     assertEquals(3, idpConfig.size());\n"}}, {"oid": "f29ebc31b2b1219fda7f615602fa1321512559cc", "url": "https://github.com/firebase/firebase-admin-java/commit/f29ebc31b2b1219fda7f615602fa1321512559cc", "message": "Add blank lines to make code less dense.", "committedDate": "2020-05-27T18:19:16Z", "type": "commit"}, {"oid": "bed8221a2d8ca89a79e74069cddd18068032e4e3", "url": "https://github.com/firebase/firebase-admin-java/commit/bed8221a2d8ca89a79e74069cddd18068032e4e3", "message": "Relax method signature to Set<String>.", "committedDate": "2020-05-27T18:34:30Z", "type": "commit"}]}