{"pr_number": 461, "pr_title": "chore(auth): Added snippets for multitenancy and IdP management", "pr_createdAt": "2020-07-28T17:12:57Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/461", "timeline": [{"oid": "588e2dd0f5d3d0207c7b441e7afb40c34f005def", "url": "https://github.com/firebase/firebase-admin-java/commit/588e2dd0f5d3d0207c7b441e7afb40c34f005def", "message": "chore(auth): Added snippets for multitenancy and IdP management", "committedDate": "2020-07-28T04:56:07Z", "type": "commit"}, {"oid": "ae9da0912018ad7fb74ae5cadf24ff50f135fcaf", "url": "https://github.com/firebase/firebase-admin-java/commit/ae9da0912018ad7fb74ae5cadf24ff50f135fcaf", "message": "fix: Fixed some broken snippet tags", "committedDate": "2020-07-28T17:15:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMTQxNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/461#discussion_r461821417", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .setDisplayName(\"SAML provider name\")\n          \n          \n            \n                    .setDisplayName(\"OIDC provider name\")", "author": "lahirumaramba", "createdAt": "2020-07-28T19:30:26Z", "path": "src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java", "diffHunk": "@@ -657,14 +665,475 @@ public void generateSignInWithEmailLink() {\n           email, actionCodeSettings);\n       // Construct email verification template, embed the link and send\n       // using custom SMTP server.\n-      sendCustomPasswordResetEmail(email, displayName, link);\n+      sendCustomEmail(email, displayName, link);\n     } catch (FirebaseAuthException e) {\n       System.out.println(\"Error generating email link: \" + e.getMessage());\n     }\n     // [END sign_in_with_email_link]\n   }\n \n+  // =====================================================================================\n+  // https://cloud.google.com/identity-platform/docs/managing-providers-programmatically\n+  // =====================================================================================\n+\n+  public void createSamlProviderConfig() throws FirebaseAuthException {\n+    // [START create_saml_provider]\n+    SamlProviderConfig.CreateRequest request = new SamlProviderConfig.CreateRequest()\n+        .setDisplayName(\"SAML provider name\")\n+        .setEnabled(true)\n+        .setProviderId(\"saml.myProvider\")\n+        .setIdpEntityId(\"IDP_ENTITY_ID\")\n+        .setSsoUrl(\"https://example.com/saml/sso/1234/\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT1...\\n-----END CERTIFICATE-----\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+        .setRpEntityId(\"RP_ENTITY_ID\")\n+        .setCallbackUrl(\"https://project-id.firebaseapp.com/__/auth/handler\");\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().createSamlProviderConfig(request);\n+    System.out.println(\"Created new SAML provider: \" + saml.getProviderId());\n+    // [END create_saml_provider]\n+  }\n+\n+  public void updateSamlProviderConfig() throws FirebaseAuthException {\n+    // [START update_saml_provider]\n+    SamlProviderConfig.UpdateRequest request =\n+        new SamlProviderConfig.UpdateRequest(\"saml.myProvider\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT3...\\n-----END CERTIFICATE-----\");\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().updateSamlProviderConfig(request);\n+    System.out.println(\"Updated SAML provider: \" + saml.getProviderId());\n+    // [END update_saml_provider]\n+  }\n+\n+  public void getSamlProviderConfig() throws FirebaseAuthException {\n+    // [START get_saml_provider]\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().getSamlProviderConfig(\"saml.myProvider\");\n+    System.out.println(saml.getDisplayName() + \": \" + saml.isEnabled());\n+    // [END get_saml_provider]\n+  }\n+\n+  public void deleteSamlProviderConfig() throws FirebaseAuthException {\n+    // [START delete_saml_provider]\n+    FirebaseAuth.getInstance().deleteSamlProviderConfig(\"saml.myProvider\");\n+    // [END delete_saml_provider]\n+  }\n+\n+  public void listSamlProviderConfigs() throws FirebaseAuthException {\n+    // [START list_saml_providers]\n+    ListProviderConfigsPage<SamlProviderConfig> page = FirebaseAuth.getInstance()\n+        .listSamlProviderConfigs(\"nextPageToken\");\n+    for (SamlProviderConfig config : page.iterateAll()) {\n+      System.out.println(config.getProviderId());\n+    }\n+    // [END list_saml_providers]\n+  }\n+\n+  public void createOidcProviderConfig() throws FirebaseAuthException {\n+    // [START create_oidc_provider]\n+    OidcProviderConfig.CreateRequest request = new OidcProviderConfig.CreateRequest()\n+        .setDisplayName(\"SAML provider name\")", "originalCommit": "ae9da0912018ad7fb74ae5cadf24ff50f135fcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzNDk3Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/461#discussion_r461834972", "bodyText": "Good catch! Done.", "author": "hiranya911", "createdAt": "2020-07-28T19:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMTQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "62b482ac6e328d09c8fba1c23a5fba70771d5f2d", "chunk": "diff --git a/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java b/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\nindex e3abbb0..b6103b4 100644\n--- a/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\n+++ b/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\n\n@@ -730,7 +730,7 @@ public class FirebaseAuthSnippets {\n   public void createOidcProviderConfig() throws FirebaseAuthException {\n     // [START create_oidc_provider]\n     OidcProviderConfig.CreateRequest request = new OidcProviderConfig.CreateRequest()\n-        .setDisplayName(\"SAML provider name\")\n+        .setDisplayName(\"OIDC provider name\")\n         .setEnabled(true)\n         .setProviderId(\"oidc.myProvider\")\n         .setClientId(\"CLIENT_ID2\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNzE0NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/461#discussion_r461827144", "bodyText": "Should we clarify what we mean by this here?", "author": "lahirumaramba", "createdAt": "2020-07-28T19:39:35Z", "path": "src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java", "diffHunk": "@@ -657,14 +665,475 @@ public void generateSignInWithEmailLink() {\n           email, actionCodeSettings);\n       // Construct email verification template, embed the link and send\n       // using custom SMTP server.\n-      sendCustomPasswordResetEmail(email, displayName, link);\n+      sendCustomEmail(email, displayName, link);\n     } catch (FirebaseAuthException e) {\n       System.out.println(\"Error generating email link: \" + e.getMessage());\n     }\n     // [END sign_in_with_email_link]\n   }\n \n+  // =====================================================================================\n+  // https://cloud.google.com/identity-platform/docs/managing-providers-programmatically\n+  // =====================================================================================\n+\n+  public void createSamlProviderConfig() throws FirebaseAuthException {\n+    // [START create_saml_provider]\n+    SamlProviderConfig.CreateRequest request = new SamlProviderConfig.CreateRequest()\n+        .setDisplayName(\"SAML provider name\")\n+        .setEnabled(true)\n+        .setProviderId(\"saml.myProvider\")\n+        .setIdpEntityId(\"IDP_ENTITY_ID\")\n+        .setSsoUrl(\"https://example.com/saml/sso/1234/\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT1...\\n-----END CERTIFICATE-----\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+        .setRpEntityId(\"RP_ENTITY_ID\")\n+        .setCallbackUrl(\"https://project-id.firebaseapp.com/__/auth/handler\");\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().createSamlProviderConfig(request);\n+    System.out.println(\"Created new SAML provider: \" + saml.getProviderId());\n+    // [END create_saml_provider]\n+  }\n+\n+  public void updateSamlProviderConfig() throws FirebaseAuthException {\n+    // [START update_saml_provider]\n+    SamlProviderConfig.UpdateRequest request =\n+        new SamlProviderConfig.UpdateRequest(\"saml.myProvider\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT3...\\n-----END CERTIFICATE-----\");\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().updateSamlProviderConfig(request);\n+    System.out.println(\"Updated SAML provider: \" + saml.getProviderId());\n+    // [END update_saml_provider]\n+  }\n+\n+  public void getSamlProviderConfig() throws FirebaseAuthException {\n+    // [START get_saml_provider]\n+    SamlProviderConfig saml = FirebaseAuth.getInstance().getSamlProviderConfig(\"saml.myProvider\");\n+    System.out.println(saml.getDisplayName() + \": \" + saml.isEnabled());\n+    // [END get_saml_provider]\n+  }\n+\n+  public void deleteSamlProviderConfig() throws FirebaseAuthException {\n+    // [START delete_saml_provider]\n+    FirebaseAuth.getInstance().deleteSamlProviderConfig(\"saml.myProvider\");\n+    // [END delete_saml_provider]\n+  }\n+\n+  public void listSamlProviderConfigs() throws FirebaseAuthException {\n+    // [START list_saml_providers]\n+    ListProviderConfigsPage<SamlProviderConfig> page = FirebaseAuth.getInstance()\n+        .listSamlProviderConfigs(\"nextPageToken\");\n+    for (SamlProviderConfig config : page.iterateAll()) {\n+      System.out.println(config.getProviderId());\n+    }\n+    // [END list_saml_providers]\n+  }\n+\n+  public void createOidcProviderConfig() throws FirebaseAuthException {\n+    // [START create_oidc_provider]\n+    OidcProviderConfig.CreateRequest request = new OidcProviderConfig.CreateRequest()\n+        .setDisplayName(\"SAML provider name\")\n+        .setEnabled(true)\n+        .setProviderId(\"oidc.myProvider\")\n+        .setClientId(\"CLIENT_ID2\")\n+        .setIssuer(\"https://oidc.com/CLIENT_ID2\");\n+    OidcProviderConfig oidc = FirebaseAuth.getInstance().createOidcProviderConfig(request);\n+    System.out.println(\"Created new OIDC provider: \" + oidc.getProviderId());\n+    // [END create_oidc_provider]\n+  }\n+\n+  public void updateOidcProviderConfig() throws FirebaseAuthException {\n+    // [START update_oidc_provider]\n+    OidcProviderConfig.UpdateRequest request =\n+        new OidcProviderConfig.UpdateRequest(\"oidc.myProvider\")\n+            .setDisplayName(\"OIDC provider name\")\n+            .setEnabled(true)\n+            .setClientId(\"CLIENT_ID\")\n+            .setIssuer(\"https://oidc.com\");\n+    OidcProviderConfig oidc = FirebaseAuth.getInstance().updateOidcProviderConfig(request);\n+    System.out.println(\"Updated OIDC provider: \" + oidc.getProviderId());\n+    // [END update_oidc_provider]\n+  }\n+\n+  public void getOidcProviderConfig() throws FirebaseAuthException {\n+    // [START get_oidc_provider]\n+    OidcProviderConfig oidc = FirebaseAuth.getInstance().getOidcProviderConfig(\"oidc.myProvider\");\n+    System.out.println(oidc.getDisplayName() + \": \" + oidc.isEnabled());\n+    // [END get_oidc_provider]\n+  }\n+\n+  public void deleteOidcProviderConfig() throws FirebaseAuthException {\n+    // [START delete_oidc_provider]\n+    FirebaseAuth.getInstance().deleteOidcProviderConfig(\"oidc.myProvider\");\n+    // [END delete_oidc_provider]\n+  }\n+\n+  public void listOidcProviderConfigs() throws FirebaseAuthException {\n+    // [START list_oidc_providers]\n+    ListProviderConfigsPage<OidcProviderConfig> page = FirebaseAuth.getInstance()\n+        .listOidcProviderConfigs(\"nextPageToken\");\n+    for (OidcProviderConfig oidc : page.iterateAll()) {\n+      System.out.println(oidc.getProviderId());\n+    }\n+    // [END list_oidc_providers]\n+  }\n+\n+  // ================================================================================\n+  // https://cloud.google.com/identity-platform/docs/multi-tenancy-managing-tenants\n+  // =================================================================================\n+\n+  public TenantAwareFirebaseAuth getTenantAwareFirebaseAuth(String tenantId) {\n+    // [START get_tenant_client]\n+    FirebaseAuth auth = FirebaseAuth.getInstance();\n+    TenantManager tenantManager = auth.getTenantManager();\n+    TenantAwareFirebaseAuth tenantAuth = tenantManager.getAuthForTenant(tenantId);\n+    // [END get_tenant_client]\n+\n+    return tenantAuth;\n+  }\n+\n+  public void getTenant(String tenantId) throws FirebaseAuthException {\n+    // [START get_tenant]\n+    Tenant tenant = FirebaseAuth.getInstance().getTenantManager().getTenant(tenantId);\n+    System.out.println(\"Retrieved tenant: \" + tenant.getTenantId());\n+    // [END get_tenant]\n+  }\n+\n+  public void createTenant() throws FirebaseAuthException {\n+    // [START create_tenant]\n+    Tenant.CreateRequest request = new Tenant.CreateRequest()\n+        .setDisplayName(\"myTenant1\")\n+        .setEmailLinkSignInEnabled(true)\n+        .setPasswordSignInAllowed(true);\n+    Tenant tenant = FirebaseAuth.getInstance().getTenantManager().createTenant(request);\n+    System.out.println(\"Created tenant: \" + tenant.getTenantId());\n+    // [END create_tenant]\n+  }\n+\n+  public void updateTenant(String tenantId) throws FirebaseAuthException {\n+    // [START update_tenant]\n+    Tenant.UpdateRequest request = new Tenant.UpdateRequest(tenantId)\n+        .setDisplayName(\"updatedName\")\n+        .setPasswordSignInAllowed(false);\n+    Tenant tenant = FirebaseAuth.getInstance().getTenantManager().updateTenant(request);\n+    System.out.println(\"Updated tenant: \" + tenant.getTenantId());\n+    // [END update_tenant]\n+  }\n+\n+  public void deleteTenant(String tenantId) throws FirebaseAuthException {\n+    // [START delete_tenant]\n+    FirebaseAuth.getInstance().getTenantManager().deleteTenant(tenantId);\n+    // [END delete_tenant]\n+  }\n+\n+  public void listTenants() throws FirebaseAuthException {\n+    // [START list_tenants]\n+    ListTenantsPage page = FirebaseAuth.getInstance().getTenantManager().listTenants(null);\n+    for (Tenant tenant : page.iterateAll()) {\n+      System.out.println(\"Retrieved tenant: \" + tenant.getTenantId());\n+    }\n+    // [END list_tenants]\n+  }\n+\n+  public void createProviderTenant() throws FirebaseAuthException {\n+    // [START get_tenant_client_short]\n+    TenantAwareFirebaseAuth tenantAuth = FirebaseAuth.getInstance().getTenantManager()\n+        .getAuthForTenant(\"TENANT-ID\");\n+    // [END get_tenant_client_short]\n+\n+    // [START create_saml_provider_tenant]\n+    SamlProviderConfig.CreateRequest request = new SamlProviderConfig.CreateRequest()\n+        .setDisplayName(\"SAML provider name\")\n+        .setEnabled(true)\n+        .setProviderId(\"saml.myProvider\")\n+        .setIdpEntityId(\"IDP_ENTITY_ID\")\n+        .setSsoUrl(\"https://example.com/saml/sso/1234/\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT1...\\n-----END CERTIFICATE-----\")\n+        .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+        .setRpEntityId(\"RP_ENTITY_ID\")\n+        .setCallbackUrl(\"https://project-id.firebaseapp.com/__/auth/handler\");\n+    SamlProviderConfig saml = tenantAuth.createSamlProviderConfig(request);\n+    System.out.println(\"Created new SAML provider: \" + saml.getProviderId());\n+    // [END create_saml_provider_tenant]\n+  }\n+\n+  public void updateProviderTenant(\n+      TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START update_saml_provider_tenant]\n+    SamlProviderConfig.UpdateRequest request =\n+        new SamlProviderConfig.UpdateRequest(\"saml.myProvider\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT2...\\n-----END CERTIFICATE-----\")\n+          .addX509Certificate(\"-----BEGIN CERTIFICATE-----\\nCERT3...\\n-----END CERTIFICATE-----\");\n+    SamlProviderConfig saml = tenantAuth.updateSamlProviderConfig(request);\n+    System.out.println(\"Updated SAML provider: \" + saml.getProviderId());\n+    // [END update_saml_provider_tenant]\n+  }\n+\n+  public void getProviderTenant(TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START get_saml_provider_tenant]\n+    SamlProviderConfig saml = tenantAuth.getSamlProviderConfig(\"saml.myProvider\");\n+\n+    // Get display name and whether it is enabled.\n+    System.out.println(saml.getDisplayName() + \" \" + saml.isEnabled());\n+    // [END get_saml_provider_tenant]\n+  }\n+\n+  public void listProvidersTenant(TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START list_saml_providers_tenant]\n+    ListProviderConfigsPage<SamlProviderConfig> page = tenantAuth.listSamlProviderConfigs(\n+        \"nextPageToken\");\n+    for (SamlProviderConfig saml : page.iterateAll()) {\n+      System.out.println(saml.getProviderId());\n+    }\n+    // [END list_saml_providers_tenant]\n+  }\n+\n+  public void deleteProviderTenant(\n+      TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START delete_saml_provider_tenant]\n+    tenantAuth.deleteSamlProviderConfig(\"saml.myProvider\");\n+    // [END delete_saml_provider_tenant]\n+  }\n+\n+  public void getUserTenant(\n+      TenantAwareFirebaseAuth tenantAuth, String uid) throws FirebaseAuthException {\n+    // [START get_user_tenant]\n+    // Get an auth client from the firebase.App\n+    UserRecord user = tenantAuth.getUser(uid);\n+    System.out.println(\"Successfully fetched user data: \" + user.getDisplayName());\n+    // [END get_user_tenant]\n+  }\n+\n+  public void getUserByEmailTenant(\n+      TenantAwareFirebaseAuth tenantAuth, String email) throws FirebaseAuthException {\n+    // [START get_user_by_email_tenant]\n+    // Get an auth client from the firebase.App\n+    UserRecord user = tenantAuth.getUserByEmail(email);\n+    System.out.println(\"Successfully fetched user data: \" + user.getDisplayName());\n+    // [END get_user_by_email_tenant]\n+  }\n+\n+  public void createUserTenant(TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START create_user_tenant]\n+    UserRecord.CreateRequest request = new UserRecord.CreateRequest()\n+        .setEmail(\"user@example.com\")\n+        .setEmailVerified(false)\n+        .setPhoneNumber(\"+15555550100\")\n+        .setPassword(\"secretPassword\")\n+        .setDisplayName(\"John Doe\")\n+        .setPhotoUrl(\"http://www.example.com/12345678/photo.png\")\n+        .setDisabled(false);\n+    UserRecord user = tenantAuth.createUser(request);\n+    System.out.println(\"Successfully created user: \" + user.getDisplayName());\n+    // [END create_user_tenant]\n+  }\n+\n+  public void updateUserTenant(\n+      TenantAwareFirebaseAuth tenantAuth, String uid) throws FirebaseAuthException {\n+    // [START update_user_tenant]\n+    UserRecord.UpdateRequest request = new UserRecord.UpdateRequest(uid)\n+        .setEmail(\"user@example.com\")\n+        .setEmailVerified(true)\n+        .setPhoneNumber(\"+15555550100\")\n+        .setPassword(\"newPassword\")\n+        .setDisplayName(\"John Doe\")\n+        .setPhotoUrl(\"http://www.example.com/12345678/photo.png\")\n+        .setDisabled(true);\n+    UserRecord user = tenantAuth.updateUser(request);\n+    System.out.println(\"Successfully updated user: \" + user.getDisplayName());\n+    // [END update_user_tenant]\n+  }\n+\n+  public void deleteUserTenant(\n+      TenantAwareFirebaseAuth tenantAuth, String uid) throws FirebaseAuthException {\n+    // [START delete_user_tenant]\n+    tenantAuth.deleteUser(uid);\n+\n+    System.out.println(\"Successfully deleted user: \" + uid);\n+    // [END delete_user_tenant]\n+  }\n+\n+  public void listUsersTenant(TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START list_all_users_tenant]\n+    // Note, behind the scenes, the ListUsersPage retrieves 1000 Users at a time\n+    // through the API\n+    ListUsersPage  page = tenantAuth.listUsers(null);\n+    for (ExportedUserRecord user : page.iterateAll()) {\n+      System.out.println(\"User: \" + user.getUid());\n+    }\n+\n+    // Iterating by pages 100 users at a time.\n+    page = tenantAuth.listUsers(null, 100);\n+    while (page != null) {\n+      for (ExportedUserRecord user : page.getValues()) {\n+        System.out.println(\"User: \" + user.getUid());\n+      }\n+\n+      page = page.getNextPage();\n+    }\n+    // [END list_all_users_tenant]\n+  }\n+\n+  public void importWithHmacTenant(\n+      TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START import_with_hmac_tenant]\n+    List<ImportUserRecord> users = new ArrayList<>();\n+    users.add(ImportUserRecord.builder()\n+        .setUid(\"uid1\")\n+        .setEmail(\"user1@example.com\")\n+        .setPasswordHash(\"password-hash-1\".getBytes())\n+        .setPasswordSalt(\"salt1\".getBytes())\n+        .build());\n+    users.add(ImportUserRecord.builder()\n+        .setUid(\"uid2\")\n+        .setEmail(\"user2@example.com\")\n+        .setPasswordHash(\"password-hash-2\".getBytes())\n+        .setPasswordSalt(\"salt2\".getBytes())\n+        .build());\n+    UserImportHash hmacSha256 = HmacSha256.builder()\n+        .setKey(\"secret\".getBytes())\n+        .build();\n+    UserImportResult result = tenantAuth.importUsers(users, UserImportOptions.withHash(hmacSha256));\n+\n+    for (ErrorInfo error : result.getErrors()) {\n+      System.out.println(\"Failed to import user: \" + error.getReason());\n+    }\n+    // [END import_with_hmac_tenant]\n+  }\n+\n+  public void importWithoutPasswordTenant(\n+      TenantAwareFirebaseAuth tenantAuth) throws FirebaseAuthException {\n+    // [START import_without_password_tenant]\n+    List<ImportUserRecord> users = new ArrayList<>();\n+    users.add(ImportUserRecord.builder()\n+        .setUid(\"some-uid\")\n+        .setDisplayName(\"John Doe\")\n+        .setEmail(\"johndoe@acme.com\")\n+        .setPhotoUrl(\"https://www.example.com/12345678/photo.png\")\n+        .setEmailVerified(true)\n+        .setPhoneNumber(\"+11234567890\")\n+        // Set this user as admin.\n+        .putCustomClaim(\"admin\", true)\n+        // User with SAML provider.\n+        .addUserProvider(UserProvider.builder()\n+            .setUid(\"saml-uid\")\n+            .setEmail(\"johndoe@acme.com\")\n+            .setDisplayName(\"John Doe\")\n+            .setPhotoUrl(\"https://www.example.com/12345678/photo.png\")\n+            .setProviderId(\"saml.acme\")\n+            .build())\n+        .build());\n+\n+    UserImportResult result = tenantAuth.importUsers(users);\n+\n+    for (ErrorInfo error : result.getErrors()) {\n+      System.out.println(\"Failed to import user: \" + error.getReason());\n+    }\n+    // [END import_without_password_tenant]\n+  }\n+\n+  public void verifyIdTokenTenant(TenantAwareFirebaseAuth tenantAuth, String idToken) {\n+    // [START verify_id_token_tenant]\n+    try {\n+      // idToken comes from the client app\n+      FirebaseToken token = tenantAuth.verifyIdToken(idToken);\n+      // This should be set to TENANT-ID. Otherwise TenantIdMismatch error thrown.", "originalCommit": "ae9da0912018ad7fb74ae5cadf24ff50f135fcaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzNTAxOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/461#discussion_r461835018", "bodyText": "Done", "author": "hiranya911", "createdAt": "2020-07-28T19:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNzE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "62b482ac6e328d09c8fba1c23a5fba70771d5f2d", "chunk": "diff --git a/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java b/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\nindex e3abbb0..b6103b4 100644\n--- a/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\n+++ b/src/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java\n\n@@ -730,7 +730,7 @@ public class FirebaseAuthSnippets {\n   public void createOidcProviderConfig() throws FirebaseAuthException {\n     // [START create_oidc_provider]\n     OidcProviderConfig.CreateRequest request = new OidcProviderConfig.CreateRequest()\n-        .setDisplayName(\"SAML provider name\")\n+        .setDisplayName(\"OIDC provider name\")\n         .setEnabled(true)\n         .setProviderId(\"oidc.myProvider\")\n         .setClientId(\"CLIENT_ID2\")\n"}}, {"oid": "62b482ac6e328d09c8fba1c23a5fba70771d5f2d", "url": "https://github.com/firebase/firebase-admin-java/commit/62b482ac6e328d09c8fba1c23a5fba70771d5f2d", "message": "fix(auth): Fixed a typo and clarified a comment", "committedDate": "2020-07-28T19:49:11Z", "type": "commit"}]}