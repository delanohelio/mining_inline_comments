{"pr_number": 3218, "pr_title": "[KOGITO-3771] Drools -Support accumulate with native image", "pr_createdAt": "2020-11-05T15:18:38Z", "pr_url": "https://github.com/kiegroup/drools/pull/3218", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzE1MA==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518153150", "bodyText": "oh nice, I like this much better now", "author": "evacchi", "createdAt": "2020-11-05T15:45:28Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -30,7 +30,9 @@ public final Object get() {\n \n     @Override\n     public String toString() {\n-        if(lambdaFingerprint == null) {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();", "originalCommit": "0a0699c132e0ab01e6ab526f43badcc0b99d049a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex d82776d6c7..211db0226d 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -30,11 +33,17 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n \n     @Override\n     public String toString() {\n-        if(this.getLambda() instanceof HashedExpression) {\n-            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n-        } else if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+        if(lambdaFingerprint == null) {\n+            // Lambdas generate by the model-compiler have fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) { // LambdaIntrospector is not supported on native image\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            } else { // Non-native image, lambda without fingerprint, sharing is disabled\n+                lambdaFingerprint = UUID.randomUUID().toString();\n+            }\n         }\n+\n         return lambdaFingerprint;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNTM2Nw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518705367", "bodyText": "Shouldn't we reintroduce the check for native compilation here.", "author": "mariofusco", "createdAt": "2020-11-06T11:56:16Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -30,7 +30,9 @@ public final Object get() {\n \n     @Override\n     public String toString() {\n-        if(lambdaFingerprint == null) {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(lambdaFingerprint == null) {\n             lambdaFingerprint = LambdaPrinter.print(getLambda());", "originalCommit": "0a0699c132e0ab01e6ab526f43badcc0b99d049a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNzQ1Nw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r518707457", "bodyText": "No as the purpose of this is to enable native compilation with the accumulate", "author": "lucamolteni", "createdAt": "2020-11-06T12:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwNTM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex d82776d6c7..211db0226d 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -30,11 +33,17 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n \n     @Override\n     public String toString() {\n-        if(this.getLambda() instanceof HashedExpression) {\n-            lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n-        } else if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+        if(lambdaFingerprint == null) {\n+            // Lambdas generate by the model-compiler have fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) { // LambdaIntrospector is not supported on native image\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            } else { // Non-native image, lambda without fingerprint, sharing is disabled\n+                lambdaFingerprint = UUID.randomUUID().toString();\n+            }\n         }\n+\n         return lambdaFingerprint;\n     }\n \n"}}, {"oid": "aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81", "url": "https://github.com/kiegroup/drools/commit/aa5b4e3f7618a48d27b89cb0ba73c7ccfeb4cc81", "message": "Correct testing", "committedDate": "2020-11-09T19:08:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTU4OA==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520205588", "bodyText": "@lucamolteni Probably you want to call clearProperty() ? Btw, setting \"false\" wouldn't work because it's evaluated with null or not.\nhttps://github.com/kiegroup/drools/blob/master/drools-core/src/main/java/org/drools/core/base/CoreComponentsBuilder.java#L26", "author": "tkobayas", "createdAt": "2020-11-10T00:22:07Z", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void unsetNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }", "originalCommit": "baed4c5f2a0b0b3be697752423961879174092a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NjY4Mw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520376683", "bodyText": "whooops sorry :D", "author": "lucamolteni", "createdAt": "2020-11-10T08:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/util/Drools.java b/drools-core/src/main/java/org/drools/core/util/Drools.java\nindex 90b9e84dee..7136d241fb 100644\n--- a/drools-core/src/main/java/org/drools/core/util/Drools.java\n+++ b/drools-core/src/main/java/org/drools/core/util/Drools.java\n\n@@ -114,14 +114,4 @@ public class Drools {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void setNativeImage() {\n-        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n-    }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void unsetNativeImage() {\n-        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4Mjg1NQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520382855", "bodyText": "I wonder if it would make sense to keep it as part of the test / support library for tests (but I get this is probably here to make it available to the wider code/test-base)", "author": "evacchi", "createdAt": "2020-11-10T08:41:42Z", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");", "originalCommit": "43707b0c7f198abb1f73da9d919492cf60b1c8a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/util/Drools.java b/drools-core/src/main/java/org/drools/core/util/Drools.java\nindex cdbb8bfe39..7136d241fb 100644\n--- a/drools-core/src/main/java/org/drools/core/util/Drools.java\n+++ b/drools-core/src/main/java/org/drools/core/util/Drools.java\n\n@@ -114,14 +114,4 @@ public class Drools {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void setNativeImage() {\n-        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n-    }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void unsetNativeImage() {\n-        System.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3NTY0OQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520375649", "bodyText": "What about promote/document this interface? As far as I can see, implement this interface is the only way to write a\n\"programmatic\" lambda with a stable fingerprint.", "author": "danielezonca", "createdAt": "2020-11-10T08:29:56Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+public interface HashedExpression {", "originalCommit": "baed4c5f2a0b0b3be697752423961879174092a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java\nindex 6d203fb749..490c32ff1e 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/HashedExpression.java\n\n@@ -16,6 +16,13 @@\n \n package org.drools.model.functions;\n \n+/**\n+ * Represents a lambda expression with a stable fingerprint.\n+ * This field is used by org.drools.model.functions.IntrospectableLambda to leverage some features\n+ * such as FromNode sharing.\n+ * See org.drools.compiler.integrationtests.operators.FromTest#testFromSharing\n+ * and org.drools.compiler.integrationtests.operators.FromOnlyExecModelTest#testFromSharingWithNativeImage\n+ */\n public interface HashedExpression {\n \n     String getExpressionHash();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3ODQyNw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520378427", "bodyText": "Considering that are not instance methods and are used only for testing I would prefer to move them to a NativeImageTestUtils or similar directly inside drools-test-coverage module. Wdyt?", "author": "danielezonca", "createdAt": "2020-11-10T08:34:30Z", "path": "drools-core/src/main/java/org/drools/core/util/Drools.java", "diffHunk": "@@ -114,4 +114,14 @@ public static boolean hasMvel() {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void setNativeImage() {\n+        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n+    }\n+\n+    // Used only for test purposed, do not call this as it simulates the code path for native image\n+    public static void unsetNativeImage() {\n+        System.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n+    }", "originalCommit": "43707b0c7f198abb1f73da9d919492cf60b1c8a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/util/Drools.java b/drools-core/src/main/java/org/drools/core/util/Drools.java\nindex cdbb8bfe39..7136d241fb 100644\n--- a/drools-core/src/main/java/org/drools/core/util/Drools.java\n+++ b/drools-core/src/main/java/org/drools/core/util/Drools.java\n\n@@ -114,14 +114,4 @@ public class Drools {\n     public static boolean isNativeImage() {\n         return CoreComponentsBuilder.isNativeImage();\n     }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void setNativeImage() {\n-        System.setProperty(\"org.graalvm.nativeimage.imagecode\", \"true\");\n-    }\n-\n-    // Used only for test purposed, do not call this as it simulates the code path for native image\n-    public static void unsetNativeImage() {\n-        System.clearProperty(\"org.graalvm.nativeimage.imagecode\");\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3OTY2NQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520379665", "bodyText": "What about rename print() method to highlight this introspection behavior? Something like getIntrospectedFingerprint", "author": "danielezonca", "createdAt": "2020-11-10T08:36:37Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,8 +34,18 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            // Lambdas generated by the model-compiler have the fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) {\n+                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());", "originalCommit": "43707b0c7f198abb1f73da9d919492cf60b1c8a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5NzY5NQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520397695", "bodyText": "TBH I find print clearer than  getIntrospectedFingerprint as this effectively prints a string representation of a lambda such as\nALOAD 0\nINVOKEVIRTUAL org/drools/modelcompiler/domain/Person.getAge()I\nINVOKESTATIC java/lang/Integer.valueOf(I)Ljava/lang/Integer;", "author": "lucamolteni", "createdAt": "2020-11-10T09:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM3OTY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex 79e937c2bf..82e05f4841 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -34,21 +40,26 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            // Lambdas generated by the model-compiler have the fingerprint calculated\n-            if(this.getLambda() instanceof HashedExpression) {\n-                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n-            } else if(!Drools.isNativeImage()) {\n-                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n-                lambdaFingerprint = LambdaPrinter.print(getLambda());\n-            } else {\n-                // Non-native image, lambda without fingerprint (manually written) node sharing is disabled\n-                lambdaFingerprint = UUID.randomUUID().toString();\n-            }\n+            lambdaFingerprint = generateFingerprint();\n         }\n \n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();\n+        }\n+    }\n+\n     @Override\n     public boolean equals( Object o ) {\n         if ( this == o ) return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTYwMg==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520381602", "bodyText": "Is this stable? Any EntryPointNode can be used?", "author": "danielezonca", "createdAt": "2020-11-10T08:39:42Z", "path": "drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java", "diffHunk": "@@ -233,6 +169,47 @@ public void testFromSharingWithPropertyReactive() {\n         }\n     }\n \n+    public static String fromSharingRule() {\n+        return \"import \" + ListsContainer.class.getCanonicalName() + \"\\n\" +\n+                \"global java.util.List output1;\\n\" +\n+                \"global java.util.List output2;\\n\" +\n+                \"rule R1 when\\n\" +\n+                \"    ListsContainer( $list : list1 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output1.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R2 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\" +\n+                \"rule R3 when\\n\" +\n+                \"    ListsContainer( $list : list2 )\\n\" +\n+                \"    $s : String( length == 2 ) from $list\\n\" +\n+                \"then\\n\" +\n+                \"    output2.add($s);\\n\" +\n+                \"end\\n\";\n+    }\n+\n+    private static ObjectTypeNode insertObjectFireRules(InternalKnowledgeBase kbase, KieSession ksession) {\n+        final List<String> output1 = new ArrayList<>();\n+        ksession.setGlobal(\"output1\", output1);\n+        final List<String> output2 = new ArrayList<>();\n+        ksession.setGlobal(\"output2\", output2);\n+\n+        ksession.insert(new ListsContainer());\n+        ksession.fireAllRules();\n+\n+        assertEquals(\"bb\", output1.get(0));\n+        assertEquals(\"22\", output2.get(0));\n+        assertEquals(\"22\", output2.get(1));\n+\n+        final EntryPointNode epn = kbase.getRete().getEntryPointNodes().values().iterator().next();", "originalCommit": "43707b0c7f198abb1f73da9d919492cf60b1c8a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4OTUyNw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520389527", "bodyText": "yes, this test never failed us", "author": "lucamolteni", "createdAt": "2020-11-10T08:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4MTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "f0a134f401e20593c9ae3366f5eaa94910498ddc", "chunk": "diff --git a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java\nindex 68bc6750e1..052b490d91 100644\n--- a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java\n+++ b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/operators/FromTest.java\n\n@@ -169,47 +233,6 @@ public class FromTest {\n         }\n     }\n \n-    public static String fromSharingRule() {\n-        return \"import \" + ListsContainer.class.getCanonicalName() + \"\\n\" +\n-                \"global java.util.List output1;\\n\" +\n-                \"global java.util.List output2;\\n\" +\n-                \"rule R1 when\\n\" +\n-                \"    ListsContainer( $list : list1 )\\n\" +\n-                \"    $s : String( length == 2 ) from $list\\n\" +\n-                \"then\\n\" +\n-                \"    output1.add($s);\\n\" +\n-                \"end\\n\" +\n-                \"rule R2 when\\n\" +\n-                \"    ListsContainer( $list : list2 )\\n\" +\n-                \"    $s : String( length == 2 ) from $list\\n\" +\n-                \"then\\n\" +\n-                \"    output2.add($s);\\n\" +\n-                \"end\\n\" +\n-                \"rule R3 when\\n\" +\n-                \"    ListsContainer( $list : list2 )\\n\" +\n-                \"    $s : String( length == 2 ) from $list\\n\" +\n-                \"then\\n\" +\n-                \"    output2.add($s);\\n\" +\n-                \"end\\n\";\n-    }\n-\n-    private static ObjectTypeNode insertObjectFireRules(InternalKnowledgeBase kbase, KieSession ksession) {\n-        final List<String> output1 = new ArrayList<>();\n-        ksession.setGlobal(\"output1\", output1);\n-        final List<String> output2 = new ArrayList<>();\n-        ksession.setGlobal(\"output2\", output2);\n-\n-        ksession.insert(new ListsContainer());\n-        ksession.fireAllRules();\n-\n-        assertEquals(\"bb\", output1.get(0));\n-        assertEquals(\"22\", output2.get(0));\n-        assertEquals(\"22\", output2.get(1));\n-\n-        final EntryPointNode epn = kbase.getRete().getEntryPointNodes().values().iterator().next();\n-        return epn.getObjectTypeNodes().get(new ClassObjectType(ListsContainer.class));\n-    }\n-\n     @Test\n     public void testFromSharingWithAccumulate() {\n         final String drl =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4NDQ1MQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520384451", "bodyText": "What about a log (trace) message for each branch? I don't know how often this method is invoked but the value is already cached so I expect almost no overhead.\nThe main reason for this comment is that based on this simple toString value node sharing could be disabled so it could have a global perf impact", "author": "danielezonca", "createdAt": "2020-11-10T08:44:22Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,8 +34,18 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            // Lambdas generated by the model-compiler have the fingerprint calculated\n+            if(this.getLambda() instanceof HashedExpression) {\n+                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n+            } else if(!Drools.isNativeImage()) {\n+                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+                lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            } else {\n+                // Non-native image, lambda without fingerprint (manually written) node sharing is disabled\n+                lambdaFingerprint = UUID.randomUUID().toString();\n+            }", "originalCommit": "43707b0c7f198abb1f73da9d919492cf60b1c8a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex 79e937c2bf..82e05f4841 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -34,21 +40,26 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            // Lambdas generated by the model-compiler have the fingerprint calculated\n-            if(this.getLambda() instanceof HashedExpression) {\n-                lambdaFingerprint = ((HashedExpression) this.getLambda()).getExpressionHash();\n-            } else if(!Drools.isNativeImage()) {\n-                // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n-                lambdaFingerprint = LambdaPrinter.print(getLambda());\n-            } else {\n-                // Non-native image, lambda without fingerprint (manually written) node sharing is disabled\n-                lambdaFingerprint = UUID.randomUUID().toString();\n-            }\n+            lambdaFingerprint = generateFingerprint();\n         }\n \n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();\n+        }\n+    }\n+\n     @Override\n     public boolean equals( Object o ) {\n         if ( this == o ) return true;\n"}}, {"oid": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "url": "https://github.com/kiegroup/drools/commit/cf3a1af701ce2e4de3219f9bb888f6069a873857", "message": "Added logging", "committedDate": "2020-11-10T12:22:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzYxOA==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520603618", "bodyText": "@lucamolteni I'm curious.\nCan you perhaps explain what do I need to do with my lambdas to end up in this branch? Obviously, if possible, I'd love node sharing even in native mode.", "author": "triceo", "createdAt": "2020-11-10T14:28:10Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();", "originalCommit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMjI0MQ==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520622241", "bodyText": "@triceo sure\nYour lambdas need to implement this interface HashedExpression take a look at this example\nhttps://github.com/kiegroup/drools/pull/3218/files#diff-6f42e31ecf903f12bd95ae1d71869e6a7a1f10f742bf5e07299effe83d8e31d8R62", "author": "lucamolteni", "createdAt": "2020-11-10T14:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "f0a134f401e20593c9ae3366f5eaa94910498ddc", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex 82e05f4841..150b46445c 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -40,26 +31,11 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = generateFingerprint();\n+            lambdaFingerprint = LambdaPrinter.print(getLambda());\n         }\n-\n         return lambdaFingerprint;\n     }\n \n-    private String generateFingerprint() {\n-        if(this.getLambda() instanceof HashedExpression) {\n-            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n-            return ((HashedExpression) this.getLambda()).getExpressionHash();\n-        } else if(!IS_NATIVE_IMAGE) {\n-            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n-            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n-            return LambdaPrinter.print(getLambda());\n-        } else {\n-            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n-            return UUID.randomUUID().toString();\n-        }\n-    }\n-\n     @Override\n     public boolean equals( Object o ) {\n         if ( this == o ) return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520623177", "bodyText": "Minor improvement: instead of generating a random UUID maybe in this case we could simply return super.toString(). In this way it should return something like org.drools.model.functions.IntrospectableLambda@b268bb07, i.e. the name of the class followed by the memory address, and in this way we will keep the node sharing in case of 2 constraints using the same lambda instance (not sure if this could happen in reality though).", "author": "mariofusco", "createdAt": "2020-11-10T14:52:54Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java", "diffHunk": "@@ -31,11 +40,26 @@ public final Object get() {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = LambdaPrinter.print(getLambda());\n+            lambdaFingerprint = generateFingerprint();\n         }\n+\n         return lambdaFingerprint;\n     }\n \n+    private String generateFingerprint() {\n+        if(this.getLambda() instanceof HashedExpression) {\n+            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n+            return ((HashedExpression) this.getLambda()).getExpressionHash();\n+        } else if(!IS_NATIVE_IMAGE) {\n+            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n+            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n+            return LambdaPrinter.print(getLambda());\n+        } else {\n+            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n+            return UUID.randomUUID().toString();", "originalCommit": "cf3a1af701ce2e4de3219f9bb888f6069a873857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyODAxMg==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520628012", "bodyText": "It can certainly happen in Constraint Streams, which may use the same predicate in multiple rules w/ the executable model.", "author": "triceo", "createdAt": "2020-11-10T14:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyOTc5Mg==", "url": "https://github.com/kiegroup/drools/pull/3218#discussion_r520629792", "bodyText": "done @mariofusco", "author": "lucamolteni", "createdAt": "2020-11-10T15:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyMzE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f0a134f401e20593c9ae3366f5eaa94910498ddc", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\nindex 82e05f4841..150b46445c 100644\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n+++ b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/IntrospectableLambda.java\n\n@@ -40,26 +31,11 @@ public abstract class IntrospectableLambda implements Supplier<Object> {\n     @Override\n     public String toString() {\n         if(lambdaFingerprint == null) {\n-            lambdaFingerprint = generateFingerprint();\n+            lambdaFingerprint = LambdaPrinter.print(getLambda());\n         }\n-\n         return lambdaFingerprint;\n     }\n \n-    private String generateFingerprint() {\n-        if(this.getLambda() instanceof HashedExpression) {\n-            logger.debug(\"The constraint supports org.drools.model.functions.HashedExpression, node sharing is enabled and compile-time fingerprint is used\");\n-            return ((HashedExpression) this.getLambda()).getExpressionHash();\n-        } else if(!IS_NATIVE_IMAGE) {\n-            // LambdaIntrospector is not supported on native image (it uses MVEL and reflection)\n-            logger.debug(\"No HashedExpression provided, generating fingerprint using reflection via org.drools.mvel.asm.LambdaIntrospector, node sharing enabled\");\n-            return LambdaPrinter.print(getLambda());\n-        } else {\n-            logger.debug(\"No HashedExpression provided, generating unique random identifier for lambdam, node sharing disabled\");\n-            return UUID.randomUUID().toString();\n-        }\n-    }\n-\n     @Override\n     public boolean equals( Object o ) {\n         if ( this == o ) return true;\n"}}, {"oid": "f0a134f401e20593c9ae3366f5eaa94910498ddc", "url": "https://github.com/kiegroup/drools/commit/f0a134f401e20593c9ae3366f5eaa94910498ddc", "message": "Disable LambdaPrinter", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "4618c2fa254baaed125edc5542f05ee4b52ccedd", "url": "https://github.com/kiegroup/drools/commit/4618c2fa254baaed125edc5542f05ee4b52ccedd", "message": "Use hashedExpression field as fingeprint", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "3841ac78750303d7909912e9133d1fc86a9d299a", "url": "https://github.com/kiegroup/drools/commit/3841ac78750303d7909912e9133d1fc86a9d299a", "message": "Reenable lambda printer", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "8208117f619f3489345f9ad9c3911fb81958dd52", "url": "https://github.com/kiegroup/drools/commit/8208117f619f3489345f9ad9c3911fb81958dd52", "message": "Update materialized lambda tests", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "b4e33862292988185a530d5e70cd12d0cb67cab1", "url": "https://github.com/kiegroup/drools/commit/b4e33862292988185a530d5e70cd12d0cb67cab1", "message": "Test for fingerprint", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "f88dff8f8da31d080f4abd6b80ddcc6ce5924ef7", "url": "https://github.com/kiegroup/drools/commit/f88dff8f8da31d080f4abd6b80ddcc6ce5924ef7", "message": "Correct logic", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "ea5f91ab6f7c5b1704f27869b98ea24a50c9a0b8", "url": "https://github.com/kiegroup/drools/commit/ea5f91ab6f7c5b1704f27869b98ea24a50c9a0b8", "message": "Enable lambda externalisation on Kogito", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "423bf841c6f11fc9687bd8dcb5ea7e3fb78d3bc8", "url": "https://github.com/kiegroup/drools/commit/423bf841c6f11fc9687bd8dcb5ea7e3fb78d3bc8", "message": "method to set the native image property", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "8acbcc03f363fabdd39750913db32a51d6d27abf", "url": "https://github.com/kiegroup/drools/commit/8acbcc03f363fabdd39750913db32a51d6d27abf", "message": "added dependency of drools-core to drools-canonical-model", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "beba3787b2eeb149d03bb1e0c9f383fdfb9c9e1e", "url": "https://github.com/kiegroup/drools/commit/beba3787b2eeb149d03bb1e0c9f383fdfb9c9e1e", "message": "Correct logic 2", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "a6b5af706e5d34dc31e65a660fb145dd2878edca", "url": "https://github.com/kiegroup/drools/commit/a6b5af706e5d34dc31e65a660fb145dd2878edca", "message": "Refactor testFromSharing", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "4c0e29dad47d732c1a64a1c44652deb1514ef6f4", "url": "https://github.com/kiegroup/drools/commit/4c0e29dad47d732c1a64a1c44652deb1514ef6f4", "message": "testFromSharing with native image (DRL Failing)", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "d973517272e3731f141ffdf890e348da31a957c1", "url": "https://github.com/kiegroup/drools/commit/d973517272e3731f141ffdf890e348da31a957c1", "message": "testFromSharing with native image (DRL Failing)", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "9c3da6e9e411ef86e88c1f1a5bff133de28441c1", "url": "https://github.com/kiegroup/drools/commit/9c3da6e9e411ef86e88c1f1a5bff133de28441c1", "message": "parametrized test", "committedDate": "2020-11-10T14:59:33Z", "type": "commit"}, {"oid": "6f97dd008a0ff1e93878380501476b8e98e4a397", "url": "https://github.com/kiegroup/drools/commit/6f97dd008a0ff1e93878380501476b8e98e4a397", "message": "Correct testing", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "9527e1c8823d18ef7953383e0e668d691c36b077", "url": "https://github.com/kiegroup/drools/commit/9527e1c8823d18ef7953383e0e668d691c36b077", "message": "Review", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "2fe724e52697dfc460113125d9a4276d81459557", "url": "https://github.com/kiegroup/drools/commit/2fe724e52697dfc460113125d9a4276d81459557", "message": "Review", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "c9002c6905eb93216977635bce57937be17f6266", "url": "https://github.com/kiegroup/drools/commit/c9002c6905eb93216977635bce57937be17f6266", "message": "Unset native image property", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "87d4b430c4e0ea5c4cc087a2c4d19247b0ba1e8a", "url": "https://github.com/kiegroup/drools/commit/87d4b430c4e0ea5c4cc087a2c4d19247b0ba1e8a", "message": "Moved setNativeImage/unsetNativeImage to testUtil", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "5a0c6a56218631ec16e0671b4d35dd46bebdf63d", "url": "https://github.com/kiegroup/drools/commit/5a0c6a56218631ec16e0671b4d35dd46bebdf63d", "message": "Review", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "10915540ca543d648447d04f44655a33d7dddbb7", "url": "https://github.com/kiegroup/drools/commit/10915540ca543d648447d04f44655a33d7dddbb7", "message": "Added logging", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "f0bf4359e9c05b7292b09bd09e0818c4ea9cc911", "url": "https://github.com/kiegroup/drools/commit/f0bf4359e9c05b7292b09bd09e0818c4ea9cc911", "message": "Use toString instead of random UUID", "committedDate": "2020-11-10T14:59:34Z", "type": "commit"}, {"oid": "f0bf4359e9c05b7292b09bd09e0818c4ea9cc911", "url": "https://github.com/kiegroup/drools/commit/f0bf4359e9c05b7292b09bd09e0818c4ea9cc911", "message": "Use toString instead of random UUID", "committedDate": "2020-11-10T14:59:34Z", "type": "forcePushed"}]}