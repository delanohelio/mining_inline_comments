{"pr_number": 3041, "pr_title": "[DROOLS-5143] Implementing Mining Model", "pr_createdAt": "2020-08-13T08:45:59Z", "pr_url": "https://github.com/kiegroup/drools/pull/3041", "timeline": [{"oid": "4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "url": "https://github.com/kiegroup/drools/commit/4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "message": "[DROOLS-3339] Refactored RegressionModelEvaluator; add tests", "committedDate": "2020-02-21T15:10:38Z", "type": "commit"}, {"oid": "37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "url": "https://github.com/kiegroup/drools/commit/37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339", "committedDate": "2020-02-21T15:10:58Z", "type": "commit"}, {"oid": "00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "url": "https://github.com/kiegroup/drools/commit/00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "message": "[DROOLS-3339] Implemented PMMLRegressionModelUtilsTest", "committedDate": "2020-02-21T15:57:32Z", "type": "commit"}, {"oid": "14ac8f587abd3a4ebafdeac88b062bd683c009cc", "url": "https://github.com/kiegroup/drools/commit/14ac8f587abd3a4ebafdeac88b062bd683c009cc", "message": "[DROOLS-3339] Implemented PMMLRegressionModelExecutorTest", "committedDate": "2020-02-21T16:25:20Z", "type": "commit"}, {"oid": "f47b01f07d59c736a888a15ccb4658b87c449b74", "url": "https://github.com/kiegroup/drools/commit/f47b01f07d59c736a888a15ccb4658b87c449b74", "message": "[DROOLS-3339] Implemented Predictors tests", "committedDate": "2020-02-21T17:06:02Z", "type": "commit"}, {"oid": "37c74e4d74010729e0f0f251297fdbea32b4b72d", "url": "https://github.com/kiegroup/drools/commit/37c74e4d74010729e0f0f251297fdbea32b4b72d", "message": "[DROOLS-3339] Implement PMMLRegressionModelExecutorTest", "committedDate": "2020-02-24T07:34:09Z", "type": "commit"}, {"oid": "a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "url": "https://github.com/kiegroup/drools/commit/a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-24T09:07:37Z", "type": "commit"}, {"oid": "854804b8b30b95811ec21b83e1dac088abe8ff69", "url": "https://github.com/kiegroup/drools/commit/854804b8b30b95811ec21b83e1dac088abe8ff69", "message": "[DROOLS-3339] Fixing Sonar remarks", "committedDate": "2020-02-24T09:36:37Z", "type": "commit"}, {"oid": "b307015ec9f007b90bed3156b0e2db163da5b9bd", "url": "https://github.com/kiegroup/drools/commit/b307015ec9f007b90bed3156b0e2db163da5b9bd", "message": "[DROOLS-3339] Fixing Sonar remarks", "committedDate": "2020-02-24T09:56:01Z", "type": "commit"}, {"oid": "d091b2956da21419b7163c689700d657a1275a20", "url": "https://github.com/kiegroup/drools/commit/d091b2956da21419b7163c689700d657a1275a20", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-25T09:19:48Z", "type": "commit"}, {"oid": "eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "url": "https://github.com/kiegroup/drools/commit/eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "message": "[DROOLS-3339] Removed \"Optional\" properties from model", "committedDate": "2020-02-25T09:35:43Z", "type": "commit"}, {"oid": "79580cb2f0f338739877d84819a59f7bf0c83e60", "url": "https://github.com/kiegroup/drools/commit/79580cb2f0f338739877d84819a59f7bf0c83e60", "message": "[DROOLS-5099] Tests for logistic regression", "committedDate": "2020-02-25T13:46:48Z", "type": "commit"}, {"oid": "0dd335e9461490fd383426b56f686a47b1621cb0", "url": "https://github.com/kiegroup/drools/commit/0dd335e9461490fd383426b56f686a47b1621cb0", "message": "[DROOLS-5099] Test also probabilities in logistic regression", "committedDate": "2020-02-26T08:33:50Z", "type": "commit"}, {"oid": "ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "url": "https://github.com/kiegroup/drools/commit/ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces", "committedDate": "2020-02-26T10:55:22Z", "type": "commit"}, {"oid": "54b118f3684e399e5f7ae88415acd5017320010c", "url": "https://github.com/kiegroup/drools/commit/54b118f3684e399e5f7ae88415acd5017320010c", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/resources/logisticRegressionIrisData.pmml", "committedDate": "2020-02-26T11:00:58Z", "type": "commit"}, {"oid": "93bb545160635776edbb2a6ba351baf8c0e9faed", "url": "https://github.com/kiegroup/drools/commit/93bb545160635776edbb2a6ba351baf8c0e9faed", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces", "committedDate": "2020-02-26T11:02:37Z", "type": "commit"}, {"oid": "d52dac54b5ed45e882205af2c9bdfbc16e251118", "url": "https://github.com/kiegroup/drools/commit/d52dac54b5ed45e882205af2c9bdfbc16e251118", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-26T11:42:46Z", "type": "commit"}, {"oid": "948a5663dee77d9388d8d06e62d00c30e75c7fae", "url": "https://github.com/kiegroup/drools/commit/948a5663dee77d9388d8d06e62d00c30e75c7fae", "message": "[DROOLS-3339] Fixed as per PR suggestions", "committedDate": "2020-02-26T11:43:38Z", "type": "commit"}, {"oid": "70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "url": "https://github.com/kiegroup/drools/commit/70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "message": "[DROOLS-5099] Test for normalization methods in regression", "committedDate": "2020-02-26T14:24:09Z", "type": "commit"}, {"oid": "7a5d93f55eb90d0785fe639115121f1215833e60", "url": "https://github.com/kiegroup/drools/commit/7a5d93f55eb90d0785fe639115121f1215833e60", "message": "[DROOLS-5099] WIP: Test logistic regression normalization methods", "committedDate": "2020-02-27T09:41:58Z", "type": "commit"}, {"oid": "2478197c0f7507b33b967a2ceaec11b1c6276b74", "url": "https://github.com/kiegroup/drools/commit/2478197c0f7507b33b967a2ceaec11b1c6276b74", "message": "[DROOLS-5099] Finish test for logistic regression normalization methods", "committedDate": "2020-02-27T13:20:24Z", "type": "commit"}, {"oid": "a29b4f9bb617b7b94872adb48e79931eca628f4f", "url": "https://github.com/kiegroup/drools/commit/a29b4f9bb617b7b94872adb48e79931eca628f4f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen", "committedDate": "2020-02-27T13:29:22Z", "type": "commit"}, {"oid": "6c0ac56e578b99255d8a2331ec59b229fbee09ee", "url": "https://github.com/kiegroup/drools/commit/6c0ac56e578b99255d8a2331ec59b229fbee09ee", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen", "committedDate": "2020-02-27T13:29:43Z", "type": "commit"}, {"oid": "9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "url": "https://github.com/kiegroup/drools/commit/9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "message": "[DROOLS-5099] Improve PMML loading", "committedDate": "2020-02-27T14:23:56Z", "type": "commit"}, {"oid": "9d0520bcca8f79bba1e5c63d0d3e476e32509774", "url": "https://github.com/kiegroup/drools/commit/9d0520bcca8f79bba1e5c63d0d3e476e32509774", "message": "[DROOLS-3339] Generating RegressionTable source", "committedDate": "2020-03-02T08:15:40Z", "type": "commit"}, {"oid": "4f0989d33321cbc62d6eaa4e134b63294c004abd", "url": "https://github.com/kiegroup/drools/commit/4f0989d33321cbc62d6eaa4e134b63294c004abd", "message": "[DROOLS-3339] Compiling generated classes. Returned new instance of generated model", "committedDate": "2020-03-04T10:25:48Z", "type": "commit"}, {"oid": "cf30eb7c0f698b780547c7ed27f58f40bb94b739", "url": "https://github.com/kiegroup/drools/commit/cf30eb7c0f698b780547c7ed27f58f40bb94b739", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml", "committedDate": "2020-03-04T10:27:26Z", "type": "commit"}, {"oid": "530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "url": "https://github.com/kiegroup/drools/commit/530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen", "committedDate": "2020-03-04T10:28:47Z", "type": "commit"}, {"oid": "a20c6672ca819280483c940657836605cc153260", "url": "https://github.com/kiegroup/drools/commit/a20c6672ca819280483c940657836605cc153260", "message": "[DROOLS-3339] Test working", "committedDate": "2020-03-04T16:51:22Z", "type": "commit"}, {"oid": "c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "url": "https://github.com/kiegroup/drools/commit/c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "message": "[DROOLS-3339] Fixing ClassificationTableTemplate - add missing import", "committedDate": "2020-03-05T11:40:06Z", "type": "commit"}, {"oid": "d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "url": "https://github.com/kiegroup/drools/commit/d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "message": "[DROOLS-3339] Begin benchmark implementation", "committedDate": "2020-03-05T14:00:34Z", "type": "commit"}, {"oid": "bcd571e4e478a331b554c97482adc11d94d44069", "url": "https://github.com/kiegroup/drools/commit/bcd571e4e478a331b554c97482adc11d94d44069", "message": "[DROOLS-3339] Updated codegen benchmark", "committedDate": "2020-03-05T16:37:42Z", "type": "commit"}, {"oid": "708945f540249a2b148252ea576f43e419185700", "url": "https://github.com/kiegroup/drools/commit/708945f540249a2b148252ea576f43e419185700", "message": "[DROOLS-3339] Refactoring inner compiler", "committedDate": "2020-03-06T08:31:33Z", "type": "commit"}, {"oid": "a92ab3198a846858bfac3d003099f0525cb8d262", "url": "https://github.com/kiegroup/drools/commit/a92ab3198a846858bfac3d003099f0525cb8d262", "message": "[DROOLS-3339] Refactoring inner compiler", "committedDate": "2020-03-06T13:19:58Z", "type": "commit"}, {"oid": "5d310e15270f28e31a8bcdce78805f1460dd51b5", "url": "https://github.com/kiegroup/drools/commit/5d310e15270f28e31a8bcdce78805f1460dd51b5", "message": "[DROOLS-3339] Keep working on Benchmarks", "committedDate": "2020-03-09T08:26:54Z", "type": "commit"}, {"oid": "ee5b1f2f9c539b5514264ae365f8891da5c2e217", "url": "https://github.com/kiegroup/drools/commit/ee5b1f2f9c539b5514264ae365f8891da5c2e217", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen", "committedDate": "2020-03-09T09:10:50Z", "type": "commit"}, {"oid": "6c0cc347a28c948783ef233b9f218e0343315d54", "url": "https://github.com/kiegroup/drools/commit/6c0cc347a28c948783ef233b9f218e0343315d54", "message": "[DROOLS-3339] Fix broken tests", "committedDate": "2020-03-09T09:32:56Z", "type": "commit"}, {"oid": "061fd36e8bc6da2bccbcd72435e492d20a0ead51", "url": "https://github.com/kiegroup/drools/commit/061fd36e8bc6da2bccbcd72435e492d20a0ead51", "message": "[DROOLS-3339] Fix benchmarks", "committedDate": "2020-03-09T12:14:24Z", "type": "commit"}, {"oid": "b8ec487c4445c6bd0f52a071dc56819132fd20ba", "url": "https://github.com/kiegroup/drools/commit/b8ec487c4445c6bd0f52a071dc56819132fd20ba", "message": "[DROOLS-3339] Fix import", "committedDate": "2020-03-09T15:56:57Z", "type": "commit"}, {"oid": "5a68e7e68b439401a4d7a232b0f86700998e459a", "url": "https://github.com/kiegroup/drools/commit/5a68e7e68b439401a4d7a232b0f86700998e459a", "message": "[DROOLS-3339] Fix benchmark", "committedDate": "2020-03-09T16:52:43Z", "type": "commit"}, {"oid": "7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "url": "https://github.com/kiegroup/drools/commit/7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "message": "[DROOLS-3339] Rename test classes. Minor fix inside Classification table generation. Remove stream from templates", "committedDate": "2020-03-09T18:22:13Z", "type": "commit"}, {"oid": "48ee92684b75c0a175f07df04fb9054c6f6d162d", "url": "https://github.com/kiegroup/drools/commit/48ee92684b75c0a175f07df04fb9054c6f6d162d", "message": "[DROOLS-5143] Created mining model scheleton module", "committedDate": "2020-03-10T09:54:05Z", "type": "commit"}, {"oid": "a3af112bd60f2ae4d1fc769a0b9cde5578018c5c", "url": "https://github.com/kiegroup/drools/commit/a3af112bd60f2ae4d1fc769a0b9cde5578018c5c", "message": "Fixing merge", "committedDate": "2020-07-24T08:56:55Z", "type": "commit"}, {"oid": "9826671c4845189d0aa9afa29f7e038a5049599f", "url": "https://github.com/kiegroup/drools/commit/9826671c4845189d0aa9afa29f7e038a5049599f", "message": "[DROOLS-5143] Begin implementation. Broken", "committedDate": "2020-07-24T08:58:02Z", "type": "commit"}, {"oid": "1880a0122900c604b342a2175f99897c6e85dd82", "url": "https://github.com/kiegroup/drools/commit/1880a0122900c604b342a2175f99897c6e85dd82", "message": "[DROOLS-5143] Working Compiler. Implemented MiningModelImplementationProviderTest with four mining models", "committedDate": "2020-07-24T14:30:39Z", "type": "commit"}, {"oid": "58a3018512a33d4328f3213f52a0454de056a967", "url": "https://github.com/kiegroup/drools/commit/58a3018512a33d4328f3213f52a0454de056a967", "message": "[DROOLS-5529] Implement tests for mean and median in segmentation", "committedDate": "2020-07-30T14:59:01Z", "type": "commit"}, {"oid": "7feb7ca6d7920758c01240a449d0461bfa84d360", "url": "https://github.com/kiegroup/drools/commit/7feb7ca6d7920758c01240a449d0461bfa84d360", "message": "[DROOLS-5143] Implemented tests on MiningModel model", "committedDate": "2020-07-30T16:09:12Z", "type": "commit"}, {"oid": "6b01f6101ed624ae5ad6084a3c814e4496c43879", "url": "https://github.com/kiegroup/drools/commit/6b01f6101ed624ae5ad6084a3c814e4496c43879", "message": "[DROOLS-5143] Implemented tests on MiningModel compilation", "committedDate": "2020-07-31T13:37:26Z", "type": "commit"}, {"oid": "ec2d1f6cee75e304002ada98560fc03e8387331b", "url": "https://github.com/kiegroup/drools/commit/ec2d1f6cee75e304002ada98560fc03e8387331b", "message": "[DROOLS-5143] Fixing tests on MiningModel", "committedDate": "2020-07-31T13:45:02Z", "type": "commit"}, {"oid": "d4540bcd602b42757d9774ee1f28cfcc20a5c5dd", "url": "https://github.com/kiegroup/drools/commit/d4540bcd602b42757d9774ee1f28cfcc20a5c5dd", "message": "[DROOLS-5529] Implement tests for median, sum and max in segmentation", "committedDate": "2020-08-03T15:28:07Z", "type": "commit"}, {"oid": "ed4ae8a521d0c6496a29b5ad74140389688ea5f6", "url": "https://github.com/kiegroup/drools/commit/ed4ae8a521d0c6496a29b5ad74140389688ea5f6", "message": "[DROOLS-5529] Implement tests for selectFirst in segmentation", "committedDate": "2020-08-04T13:50:20Z", "type": "commit"}, {"oid": "1abad863e0dfdf4c53529f3530039a4304a28f5c", "url": "https://github.com/kiegroup/drools/commit/1abad863e0dfdf4c53529f3530039a4304a28f5c", "message": "[DROOLS-5529] Implement tests for selectFirst in segmentation classification", "committedDate": "2020-08-06T13:08:45Z", "type": "commit"}, {"oid": "3ce2ab720a2e28d3aeaffa8ceb77f2dfaadec64a", "url": "https://github.com/kiegroup/drools/commit/3ce2ab720a2e28d3aeaffa8ceb77f2dfaadec64a", "message": "[DROOLS-5143] Add Mining tests. Not working", "committedDate": "2020-08-10T08:07:17Z", "type": "commit"}, {"oid": "9609b0edb6f0a910191d9f0e4745b4b5b80bffbd", "url": "https://github.com/kiegroup/drools/commit/9609b0edb6f0a910191d9f0e4745b4b5b80bffbd", "message": "[DROOLS-5143] Fixed remote pull/merge", "committedDate": "2020-08-10T08:11:28Z", "type": "commit"}, {"oid": "0c32de7d0171633ed69516aec000f065204087e7", "url": "https://github.com/kiegroup/drools/commit/0c32de7d0171633ed69516aec000f065204087e7", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-10T08:12:02Z", "type": "commit"}, {"oid": "f8b2577b8c5665066d2938fc5b1f89d649dc496f", "url": "https://github.com/kiegroup/drools/commit/f8b2577b8c5665066d2938fc5b1f89d649dc496f", "message": "[DROOLS-5143] Updated version after merge with master", "committedDate": "2020-08-10T08:18:42Z", "type": "commit"}, {"oid": "a48c55fa7a28ef51c3db9b9a9689d696e3f652a2", "url": "https://github.com/kiegroup/drools/commit/a48c55fa7a28ef51c3db9b9a9689d696e3f652a2", "message": "[DROOLS-5143] Fixed wrong package renaming. Fixed kmodule merge", "committedDate": "2020-08-10T08:39:34Z", "type": "commit"}, {"oid": "8d27dbeb2fbfb534a1a052bed4495aa2239a9c73", "url": "https://github.com/kiegroup/drools/commit/8d27dbeb2fbfb534a1a052bed4495aa2239a9c73", "message": "[DROOLS-5143] Fixed first MiningModel integration test", "committedDate": "2020-08-11T09:14:41Z", "type": "commit"}, {"oid": "b278c961929b15558f0817ead5e7437e1a9f2a61", "url": "https://github.com/kiegroup/drools/commit/b278c961929b15558f0817ead5e7437e1a9f2a61", "message": "[DROOLS-5143] Fixing result transformation. Add ScoreCard/Regression models to integration tests", "committedDate": "2020-08-11T09:36:15Z", "type": "commit"}, {"oid": "2bef0ae29bc94980006a14ee69bfc989c7490e9a", "url": "https://github.com/kiegroup/drools/commit/2bef0ae29bc94980006a14ee69bfc989c7490e9a", "message": "[DROOLS-5143] Fixed MixedMiningTest", "committedDate": "2020-08-11T09:48:13Z", "type": "commit"}, {"oid": "24bb1ef468e09aa07bdc0b8d3f27716813fcf9c5", "url": "https://github.com/kiegroup/drools/commit/24bb1ef468e09aa07bdc0b8d3f27716813fcf9c5", "message": "[DROOLS-5143] Fixed some tests", "committedDate": "2020-08-11T10:13:41Z", "type": "commit"}, {"oid": "bba509a23f5141d3167d98b1e8741caf8f765eb1", "url": "https://github.com/kiegroup/drools/commit/bba509a23f5141d3167d98b1e8741caf8f765eb1", "message": "[DROOLS-5143] Fixed SegmentationMedian2Mining test", "committedDate": "2020-08-11T10:54:25Z", "type": "commit"}, {"oid": "47a59169d9ea25369ecf890a7f58006f59c5bf2d", "url": "https://github.com/kiegroup/drools/commit/47a59169d9ea25369ecf890a7f58006f59c5bf2d", "message": "[DROOLS-5143] Fixed SegmentationSumMining test", "committedDate": "2020-08-11T10:56:02Z", "type": "commit"}, {"oid": "8d365a7314c80f5b53d1453655e12db9871a7b4a", "url": "https://github.com/kiegroup/drools/commit/8d365a7314c80f5b53d1453655e12db9871a7b4a", "message": "[DROOLS-5143] Fixed SegmentationSelectFirstMining test", "committedDate": "2020-08-11T12:03:28Z", "type": "commit"}, {"oid": "96fc4bcc86e716c0ab0e088e1f7ea8b3f23f229f", "url": "https://github.com/kiegroup/drools/commit/96fc4bcc86e716c0ab0e088e1f7ea8b3f23f229f", "message": "[DROOLS-5143] Fixed concurrent executions", "committedDate": "2020-08-11T12:20:32Z", "type": "commit"}, {"oid": "86911ef6cd0898588b90ccdc33be8824dbf440dd", "url": "https://github.com/kiegroup/drools/commit/86911ef6cd0898588b90ccdc33be8824dbf440dd", "message": "[DROOLS-5143] Implementing plugin invocation of Mining model", "committedDate": "2020-08-12T07:11:24Z", "type": "commit"}, {"oid": "3b37492cc6e8335c6691aea6de34a97cf4c788a1", "url": "https://github.com/kiegroup/drools/commit/3b37492cc6e8335c6691aea6de34a97cf4c788a1", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-12T07:13:32Z", "type": "commit"}, {"oid": "3fc4d87c4393c6e6f1ca40ee2eee0443fe260026", "url": "https://github.com/kiegroup/drools/commit/3fc4d87c4393c6e6f1ca40ee2eee0443fe260026", "message": "[DROOLS-5143] MiningModel working in integration tests (also kjar). Broken/missing unittests", "committedDate": "2020-08-13T08:13:34Z", "type": "commit"}, {"oid": "8df7227e3be94497ef6326a4118647a59fb3dcff", "url": "https://github.com/kiegroup/drools/commit/8df7227e3be94497ef6326a4118647a59fb3dcff", "message": "[DROOLS-5143] Fixed unittests.", "committedDate": "2020-08-13T08:38:32Z", "type": "commit"}, {"oid": "7156fd4086c74609bdf25f73eefa5069064ce44f", "url": "https://github.com/kiegroup/drools/commit/7156fd4086c74609bdf25f73eefa5069064ce44f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-13T08:40:03Z", "type": "commit"}, {"oid": "efa60009ba0b63ce630df36b0203f24a1b49a909", "url": "https://github.com/kiegroup/drools/commit/efa60009ba0b63ce630df36b0203f24a1b49a909", "message": "[DROOLS-5143] Fixed Sonarcloud \"bugs\"", "committedDate": "2020-08-13T12:56:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNDc5MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469804790", "bodyText": "To be removed", "author": "danielezonca", "createdAt": "2020-08-13T09:01:49Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java", "diffHunk": "@@ -71,31 +74,29 @@ private KiePMMLRegressionTableClassificationFactory() {\n \n     public static Map<String, KiePMMLTableSourceCategory> getRegressionTables(final List<RegressionTable> regressionTables, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName) throws IOException {\n         logger.trace(\"getRegressionTables {}\", regressionTables);\n-        CompilationUnit templateCU = getFromFileName(KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA);\n         Map<String, KiePMMLTableSourceCategory> toReturn = KiePMMLRegressionTableRegressionFactory.getRegressionTables(regressionTables, RegressionModel.NormalizationMethod.NONE, targetField, packageName);\n-        Map.Entry<String, String> regressionTableEntry = getRegressionTable(templateCU, toReturn, normalizationMethod, opType, outputFields, targetField, packageName);\n+        Map.Entry<String, String> regressionTableEntry = getRegressionTable(toReturn, normalizationMethod, opType, outputFields, targetField, packageName);\n         toReturn.put(regressionTableEntry.getKey(), new KiePMMLTableSourceCategory(regressionTableEntry.getValue(), \"\"));\n         return toReturn;\n     }\n \n-    public static Map.Entry<String, String> getRegressionTable(final CompilationUnit templateCU, final Map<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName) throws IOException {\n+    public static Map.Entry<String, String> getRegressionTable(final Map<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName) throws IOException {\n         logger.trace(\"getRegressionTable {}\", regressionTablesMap);\n-        CompilationUnit cloneCU = templateCU.clone();\n-        cloneCU.setPackageDeclaration(packageName);\n+        String className = \"KiePMMLRegressionTableClassification\" + classArity.addAndGet(1);\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName, KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA, KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE);\n+        ClassOrInterfaceDeclaration tableTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n         final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod = REGRESSION_NORMALIZATION_METHOD.byName(normalizationMethod.value());\n         final OP_TYPE op_type = opType != null ? OP_TYPE.byName(opType.value()) : null;\n-        ClassOrInterfaceDeclaration tableTemplate = cloneCU.getClassByName(KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE)\n-                .orElseThrow(() -> new RuntimeException(MAIN_CLASS_NOT_FOUND));\n-        String className = \"KiePMMLRegressionTableClassification\" + classArity.addAndGet(1);\n-        tableTemplate.setName(className);\n         populateGetProbabilityMapMethod(normalizationMethod, tableTemplate);\n         populateOutputFieldsMap(tableTemplate, outputFields);\n         populateIsBinaryMethod(opType, regressionTablesMap.size(), tableTemplate);\n         final ConstructorDeclaration constructorDeclaration = tableTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(\"Missing default constructor in ClassOrInterfaceDeclaration %s \", tableTemplate.getName())));\n         setConstructor(constructorDeclaration, tableTemplate.getName(), targetField, regressionNormalizationMethod, op_type);\n         addMapPopulation(constructorDeclaration.getBody(), regressionTablesMap);\n         populateGetTargetCategory(tableTemplate, null);\n-        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());\n+//        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java\nindex 1c5a91d878..634502f018 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java\n\n@@ -80,22 +81,21 @@ public class KiePMMLRegressionTableClassificationFactory {\n         return toReturn;\n     }\n \n-    public static Map.Entry<String, String> getRegressionTable(final Map<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName) throws IOException {\n+    public static Map.Entry<String, String> getRegressionTable(final Map<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName) {\n         logger.trace(\"getRegressionTable {}\", regressionTablesMap);\n         String className = \"KiePMMLRegressionTableClassification\" + classArity.addAndGet(1);\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName, KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA, KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE);\n         ClassOrInterfaceDeclaration tableTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n         final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod = REGRESSION_NORMALIZATION_METHOD.byName(normalizationMethod.value());\n-        final OP_TYPE op_type = opType != null ? OP_TYPE.byName(opType.value()) : null;\n+        final OP_TYPE opTypePmml = opType != null ? OP_TYPE.byName(opType.value()) : null;\n         populateGetProbabilityMapMethod(normalizationMethod, tableTemplate);\n         populateOutputFieldsMap(tableTemplate, outputFields);\n         populateIsBinaryMethod(opType, regressionTablesMap.size(), tableTemplate);\n-        final ConstructorDeclaration constructorDeclaration = tableTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(\"Missing default constructor in ClassOrInterfaceDeclaration %s \", tableTemplate.getName())));\n-        setConstructor(constructorDeclaration, tableTemplate.getName(), targetField, regressionNormalizationMethod, op_type);\n+        final ConstructorDeclaration constructorDeclaration = tableTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, tableTemplate.getName())));\n+        setConstructor(constructorDeclaration, tableTemplate.getName(), targetField, regressionNormalizationMethod, opTypePmml);\n         addMapPopulation(constructorDeclaration.getBody(), regressionTablesMap);\n         populateGetTargetCategory(tableTemplate, null);\n-//        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());\n         return new AbstractMap.SimpleEntry<>(getFullClassName(cloneCU), cloneCU.toString());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNDk2Nw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469804967", "bodyText": "To be removed", "author": "danielezonca", "createdAt": "2020-08-13T09:02:10Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableRegressionFactory.java", "diffHunk": "@@ -107,7 +107,8 @@ private KiePMMLRegressionTableRegressionFactory() {\n         addMapPopulation(predictorTermsMap, body, \"predictorTermsFunctionMap\");\n         populateGetTargetCategory(tableTemplate, regressionTable.getTargetCategory());\n         populateUpdateResult(tableTemplate, normalizationMethod);\n-        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());\n+//        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableRegressionFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableRegressionFactory.java\nindex 33e0997f45..459c99ba8e 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableRegressionFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableRegressionFactory.java\n\n@@ -107,7 +108,6 @@ public class KiePMMLRegressionTableRegressionFactory {\n         addMapPopulation(predictorTermsMap, body, \"predictorTermsFunctionMap\");\n         populateGetTargetCategory(tableTemplate, regressionTable.getTargetCategory());\n         populateUpdateResult(tableTemplate, normalizationMethod);\n-//        return new AbstractMap.SimpleEntry<>(className, cloneCU.toString());\n         return new AbstractMap.SimpleEntry<>(getFullClassName(cloneCU), cloneCU.toString());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNjI4NQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469806285", "bodyText": "Is this needed? The test fails even if you just throws the Exception so why wrap it in a fail?\nDon't you want to print the stacktrace?", "author": "danielezonca", "createdAt": "2020-08-13T09:04:30Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java", "diffHunk": "@@ -46,8 +52,33 @@ public void getKiePMMLModel() throws Exception {\n         assertNotNull(pmml);\n         assertEquals(1, pmml.getModels().size());\n         assertTrue(pmml.getModels().get(0) instanceof RegressionModel);\n-        final KiePMMLRegressionModel kiePMMLModel = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(), pmml.getTransformationDictionary(), (RegressionModel) pmml.getModels().get(0), RELEASE_ID);\n-        assertNotNull(kiePMMLModel);\n+        final KiePMMLRegressionModel retrieved = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(), pmml.getTransformationDictionary(), (RegressionModel) pmml.getModels().get(0), RELEASE_ID);\n+        assertNotNull(retrieved);\n+    }\n+\n+    @Test\n+    public void getKiePMMLModelFromPlugin() throws Exception {\n+        final PMML pmml = TestUtils.loadFromFile(SOURCE_1);\n+        assertNotNull(pmml);\n+        assertEquals(1, pmml.getModels().size());\n+        assertTrue(pmml.getModels().get(0) instanceof RegressionModel);\n+        final String packageName = \"packagename\";\n+        final KiePMMLRegressionModel retrieved = PROVIDER.getKiePMMLModelFromPlugin(\n+                packageName,\n+                pmml.getDataDictionary(),\n+                pmml.getTransformationDictionary(),\n+                (RegressionModel) pmml.getModels().get(0), RELEASE_ID);\n+        assertNotNull(retrieved);\n+        assertTrue(retrieved instanceof KiePMMLRegressionModelWithSources);\n+        KiePMMLRegressionModelWithSources retrievedWithSources = (KiePMMLRegressionModelWithSources)retrieved;\n+        final Map<String, String> sourcesMap = retrievedWithSources.getSourcesMap();\n+        assertNotNull(sourcesMap);\n+        assertFalse(sourcesMap.isEmpty());\n+        try {\n+            KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n+        } catch (Exception e) {\n+            fail(e.getMessage());", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NTEwOA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475495108", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T10:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwNjI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java\nindex 626f6f7865..034bca74d9 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/executor/RegressionModelImplementationProviderTest.java\n\n@@ -74,11 +74,7 @@ public class RegressionModelImplementationProviderTest {\n         final Map<String, String> sourcesMap = retrievedWithSources.getSourcesMap();\n         assertNotNull(sourcesMap);\n         assertFalse(sourcesMap.isEmpty());\n-        try {\n-            KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n-        } catch (Exception e) {\n-            fail(e.getMessage());\n-        }\n+        KieMemoryCompiler.compile(sourcesMap, Thread.currentThread().getContextClassLoader());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgwODkzNg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469808936", "bodyText": "To be re enabled?", "author": "danielezonca", "createdAt": "2020-08-13T09:08:38Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-tests/src/test/java/org/kie/pmml/mining/tests/MixedMiningTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.mining.tests;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+\n+@RunWith(Parameterized.class)\n+public class MixedMiningTest extends AbstractPMMLMiningTest {\n+\n+    private static final String MODEL_NAME = \"MixedMining\";\n+    private static final String TARGET_FIELD = \"categoricalResult\";\n+    private static PMMLRuntime pmmlRuntime;\n+\n+    private String categoricalX;\n+    private String categoricalY;\n+    private double age;\n+    private String occupation;\n+    private String residenceState;\n+    private boolean validLicense;\n+    private double expectedResult;\n+\n+    public MixedMiningTest(String categoricalX,\n+                           String categoricalY,\n+                           double age,\n+                           String occupation,\n+                           String residenceState,\n+                           boolean validLicense,\n+                           double expectedResult) {\n+        this.categoricalX = categoricalX;\n+        this.categoricalY = categoricalY;\n+        this.age = age;\n+        this.occupation = occupation;\n+        this.residenceState = residenceState;\n+        this.validLicense = validLicense;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        pmmlRuntime = getPMMLRuntime(MODEL_NAME);\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {\"red\", \"classA\", 25.0, \"ASTRONAUT\", \"AP\", true, 2.3724999999999987},\n+//                {\"blue\", \"classA\", 2.3, \"PROGRAMMER\", \"KN\", true, 8.122499999999999},\n+//                {\"yellow\", \"classC\", 333.56, \"INSTRUCTOR\", \"TN\", false, -21.502499999999998},\n+//                {\"orange\", \"classB\", 0.12, \"ASTRONAUT\", \"KN\", true, 7.3725},\n+//                {\"green\", \"classC\", 122.12, \"TEACHER\", \"TN\", false, 36.1225},\n+//                {\"green\", \"classB\", 11.33, \"INSTRUCTOR\", \"AP\", false, 21.1225},\n+//                {\"orange\", \"classB\", 423.2, \"SKYDIVER\", \"KN\", true, 14.872499999999999},", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-tests/src/test/java/org/kie/pmml/mining/tests/MixedMiningTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-tests/src/test/java/org/kie/pmml/mining/tests/MixedMiningTest.java\nindex eb5fd32798..9fad9af98f 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-tests/src/test/java/org/kie/pmml/mining/tests/MixedMiningTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-tests/src/test/java/org/kie/pmml/mining/tests/MixedMiningTest.java\n\n@@ -69,12 +69,12 @@ public class MixedMiningTest extends AbstractPMMLMiningTest {\n     public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][]{\n                 {\"red\", \"classA\", 25.0, \"ASTRONAUT\", \"AP\", true, 2.3724999999999987},\n-//                {\"blue\", \"classA\", 2.3, \"PROGRAMMER\", \"KN\", true, 8.122499999999999},\n-//                {\"yellow\", \"classC\", 333.56, \"INSTRUCTOR\", \"TN\", false, -21.502499999999998},\n-//                {\"orange\", \"classB\", 0.12, \"ASTRONAUT\", \"KN\", true, 7.3725},\n-//                {\"green\", \"classC\", 122.12, \"TEACHER\", \"TN\", false, 36.1225},\n-//                {\"green\", \"classB\", 11.33, \"INSTRUCTOR\", \"AP\", false, 21.1225},\n-//                {\"orange\", \"classB\", 423.2, \"SKYDIVER\", \"KN\", true, 14.872499999999999},\n+                {\"blue\", \"classA\", 2.3, \"PROGRAMMER\", \"KN\", true, 8.122499999999999},\n+                {\"yellow\", \"classC\", 333.56, \"INSTRUCTOR\", \"TN\", false, -21.502499999999998},\n+                {\"orange\", \"classB\", 0.12, \"ASTRONAUT\", \"KN\", true, 7.3725},\n+                {\"green\", \"classC\", 122.12, \"TEACHER\", \"TN\", false, 36.1225},\n+                {\"green\", \"classB\", 11.33, \"INSTRUCTOR\", \"AP\", false, 21.1225},\n+                {\"orange\", \"classB\", 423.2, \"SKYDIVER\", \"KN\", true, 14.872499999999999},\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNzUyOA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469927528", "bodyText": "Debug?", "author": "danielezonca", "createdAt": "2020-08-13T12:52:04Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.BinaryOperator;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);\n+\n+    private final BOOLEAN_OPERATOR booleanOperator;\n+    private BinaryOperator<Boolean> operatorFunction;\n+    private List<KiePMMLPredicate> kiePMMLPredicates;\n+\n+    private KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n+        super(name, extensions);\n+        this.booleanOperator = booleanOperator;\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+        return new Builder(extensions, booleanOperator);\n+    }\n+\n+    @Override\n+    public boolean evaluate(Map<String, Object> values) {\n+        logger.info(\"{} valuate {}\", this, values);", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\nindex 5f0bc70a53..0077655187 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n\n@@ -52,15 +52,14 @@ public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n \n     @Override\n     public boolean evaluate(Map<String, Object> values) {\n-        logger.info(\"{} valuate {}\", this, values);\n         Boolean toReturn = null;\n         for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n             toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n         }\n-        logger.info(\"return {}\", toReturn);\n-        return toReturn != null ? toReturn : false;\n+        return toReturn != null && toReturn;\n     }\n \n+    @Override\n     public String getId() {\n         return id;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNzYyMA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469927620", "bodyText": "Debug?", "author": "danielezonca", "createdAt": "2020-08-13T12:52:14Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.BinaryOperator;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);\n+\n+    private final BOOLEAN_OPERATOR booleanOperator;\n+    private BinaryOperator<Boolean> operatorFunction;\n+    private List<KiePMMLPredicate> kiePMMLPredicates;\n+\n+    private KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n+        super(name, extensions);\n+        this.booleanOperator = booleanOperator;\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+        return new Builder(extensions, booleanOperator);\n+    }\n+\n+    @Override\n+    public boolean evaluate(Map<String, Object> values) {\n+        logger.info(\"{} valuate {}\", this, values);\n+        Boolean toReturn = null;\n+        for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n+            toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n+        }\n+        logger.info(\"return {}\", toReturn);", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\nindex 5f0bc70a53..0077655187 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n\n@@ -52,15 +52,14 @@ public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n \n     @Override\n     public boolean evaluate(Map<String, Object> values) {\n-        logger.info(\"{} valuate {}\", this, values);\n         Boolean toReturn = null;\n         for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n             toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n         }\n-        logger.info(\"return {}\", toReturn);\n-        return toReturn != null ? toReturn : false;\n+        return toReturn != null && toReturn;\n     }\n \n+    @Override\n     public String getId() {\n         return id;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyODg5Ng==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469928896", "bodyText": "What about change the name of Abstract_KiePMMLBase_? It sounds like KieBase even if it is not drools related", "author": "danielezonca", "createdAt": "2020-08-13T12:54:32Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLPredicate.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n+ */\n+public abstract class KiePMMLPredicate extends AbstractKiePMMLBase {", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NTY5OA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475495698", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T10:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyODg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLPredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLPredicate.java\nindex 1b11c8820e..afe25ebdd5 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLPredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLPredicate.java\n\n@@ -19,12 +19,12 @@ import java.util.List;\n import java.util.Map;\n \n import org.kie.pmml.commons.model.KiePMMLExtension;\n-import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLComponent;\n \n /**\n  * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n  */\n-public abstract class KiePMMLPredicate extends AbstractKiePMMLBase {\n+public abstract class KiePMMLPredicate extends AbstractKiePMMLComponent {\n \n     private static final long serialVersionUID = -1996390505352151403L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyOTE5OQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469929199", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-08-13T12:55:02Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.expr.AssignExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt;\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.DataField;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.dmg.pmml.True;\n+import org.kie.pmml.commons.exceptions.KieDataFieldException;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.enums.OPERATOR;\n+import org.kie.pmml.commons.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLFalsePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLSimplePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLTruePredicate;\n+import org.kie.pmml.compiler.commons.utils.JavaParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFullClassName;\n+\n+public class KiePMMLPredicateFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLPredicateFactory.class.getName());\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLSimplePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE = \"KiePMMLSimplePredicateTemplate\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLTruePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE = \"KiePMMLTruePredicateTemplate\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLFalsePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE = \"KiePMMLFalsePredicateTemplate\";\n+\n+\n+    private KiePMMLPredicateFactory() {\n+    }\n+\n+    public static List<KiePMMLPredicate> getPredicates(List<Predicate> predicates, DataDictionary dataDictionary) throws KiePMMLException {\n+        logger.info(\"getPredicates {}\", predicates);\n+        return predicates.stream().map(predicate -> getPredicate(predicate, dataDictionary)).collect(Collectors.toList());\n+    }\n+\n+    public static KiePMMLPredicate getPredicate(Predicate predicate, DataDictionary dataDictionary) {\n+        logger.info(\"getPredicate {}\", predicate);\n+        if (predicate instanceof SimplePredicate) {\n+            final DataType dataType = dataDictionary.getDataFields().stream()\n+                    .filter(dataField -> dataField.getName().getValue().equals(((SimplePredicate) predicate).getField().getValue()))\n+                    .map(DataField::getDataType)\n+                    .findFirst()\n+                    .orElseThrow(() -> new KiePMMLException(\"Failed to find DataField for predicate \" + ((SimplePredicate) predicate).getField().getValue()));\n+            return getKiePMMLSimplePredicate((SimplePredicate) predicate, dataType);\n+        } else if (predicate instanceof CompoundPredicate) {\n+            return getKiePMMLCompoundPredicate((CompoundPredicate) predicate, dataDictionary);\n+        } else if (predicate instanceof True) {\n+            return getKiePMMLTruePredicate((True) predicate);\n+        } else if (predicate instanceof False) {\n+            return getKiePMMLFalsePredicate((False) predicate);\n+        } else {\n+            throw new KiePMMLException(\"Predicate of type \" + predicate.getClass().getName() + \" not managed, yet\");\n+        }\n+    }\n+\n+    public static KiePMMLSimplePredicate getKiePMMLSimplePredicate(SimplePredicate predicate, DataType dataType)  {\n+        return KiePMMLSimplePredicate.builder(predicate.getField().getValue(), Collections.emptyList(), OPERATOR.byName(predicate.getOperator().value()))\n+                .withValue(getActualValue(predicate.getValue(), dataType))\n+                .build();\n+    }\n+\n+    public static KiePMMLCompoundPredicate getKiePMMLCompoundPredicate(CompoundPredicate predicate, DataDictionary dataDictionary) {\n+        return KiePMMLCompoundPredicate.builder(Collections.emptyList(), BOOLEAN_OPERATOR.byName(predicate.getBooleanOperator().value()))\n+                .withKiePMMLPredicates(getPredicates(predicate.getPredicates(), dataDictionary))\n+                .build();\n+    }\n+\n+    public static KiePMMLTruePredicate getKiePMMLTruePredicate(True predicate) throws KiePMMLException {\n+        return KiePMMLTruePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static KiePMMLFalsePredicate getKiePMMLFalsePredicate(False predicate) throws KiePMMLException {\n+        return KiePMMLFalsePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static Map<String, String> getPredicateSourcesMap(final KiePMMLPredicate kiePMMLPredicate,\n+                                                             final String packageName) {\n+        logger.info(\"getPredicateSourcesMap {}\", kiePMMLPredicate);\n+        if (kiePMMLPredicate instanceof KiePMMLSimplePredicate) {\n+            return getKiePMMLSimplePredicateSourcesMap((KiePMMLSimplePredicate) kiePMMLPredicate, packageName);\n+//        } else if (predicate instanceof CompoundPredicate) {\n+//            return getKiePMMLCompoundPredicate((CompoundPredicate) predicate, dataDictionary);", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxODI5OQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475518299", "bodyText": "@danielezonca\nimplemented", "author": "gitgabrio", "createdAt": "2020-08-24T10:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyOTE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\nindex 43bb121527..c5b5092dc1 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n\n@@ -15,9 +15,6 @@\n  */\n package org.kie.pmml.compiler.commons.factories;\n \n-import java.time.LocalDate;\n-import java.time.LocalDateTime;\n-import java.time.LocalTime;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMDQyMw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469930423", "bodyText": "Can you replace these assertions with others?", "author": "danielezonca", "createdAt": "2020-08-13T12:57:06Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetrieverTest.java", "diffHunk": "@@ -43,8 +43,6 @@ public void getFromCommonDataAndTransformationDictionaryAndModelWithProvider() t\n         pmmlModel = KiePMMLUtil.load(getFileInputStream(MULTIPLE_TARGETS_SOURCE), MULTIPLE_TARGETS_SOURCE);\n         final Optional<KiePMMLModel> retrieved = getFromCommonDataAndTransformationDictionaryAndModel(pmmlModel.getDataDictionary(), pmmlModel.getTransformationDictionary(), pmmlModel.getModels().get(0), null);\n         assertNotNull(retrieved);\n-        assertTrue(retrieved.isPresent());\n-        assertTrue(retrieved.get() instanceof KiePMMLTestingModel);", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDc2NA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475524764", "bodyText": "@danielezonca\nPreviously, TestingModelImplementationProvider was mapped to RegressionModel, so those tests returned a \"KiePMMLTestingModel\" (sort of a mock).\nBut with MiningModel tests (that needs all the real ModelImplementationProviders), having two ModelImplementationProviders mapped to the same model (Regression) may lead to error. So TestingModelImplementationProvider currently is mapped to a (fake) model, but then those methods returns an empty Optional. I have to find a proper fix for that", "author": "gitgabrio", "createdAt": "2020-08-24T11:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMDQyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMDY0Mg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469930642", "bodyText": "Can you please replace these assertions with others?", "author": "danielezonca", "createdAt": "2020-08-13T12:57:27Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetrieverTest.java", "diffHunk": "@@ -56,12 +54,10 @@ public void getFromCommonDataAndTransformationDictionaryAndModelWithoutProvider(\n     }\n \n     @Test\n-    public void getFromCommonDataAndTransformationDictionaryAndModelFromPluginlWithProvider() throws Exception {\n+    public void getFromCommonDataAndTransformationDictionaryAndModelFromPluginWithProvider() throws Exception {\n         pmmlModel = KiePMMLUtil.load(getFileInputStream(MULTIPLE_TARGETS_SOURCE), MULTIPLE_TARGETS_SOURCE);\n         final Optional<KiePMMLModel> retrieved = getFromCommonDataAndTransformationDictionaryAndModelFromPlugin(PACKAGE_NAME, pmmlModel.getDataDictionary(), pmmlModel.getTransformationDictionary(), pmmlModel.getModels().get(0), null);\n         assertNotNull(retrieved);\n-        assertTrue(retrieved.isPresent());\n-        assertTrue(retrieved.get() instanceof KiePMMLTestingModel);", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNDkwNQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475524905", "bodyText": "@danielezonca\nsee above", "author": "gitgabrio", "createdAt": "2020-08-24T11:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMDY0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMTI4NQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469931285", "bodyText": "Revert?", "author": "danielezonca", "createdAt": "2020-08-13T12:58:26Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java", "diffHunk": "@@ -113,4 +113,6 @@ static void setSuperInvocation(final Scorecard scorecard, final ConstructorDecla\n             }\n         });\n     }\n+\n+", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java\nindex ecc7d9ceb2..1ea2fbedaa 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/main/java/org/kie/pmml/models/drools/scorecard/compiler/factories/KiePMMLScorecardModelFactory.java\n\n@@ -102,16 +101,8 @@ public class KiePMMLScorecardModelFactory {\n         return KiePMMLScorecardModelASTFactory.getKiePMMLDroolsAST(dataDictionary, model, fieldTypeMap, types);\n     }\n \n-    static void setSuperInvocation(final Scorecard scorecard, final ConstructorDeclaration constructorDeclaration, final SimpleName tableName) {\n-        constructorDeclaration.setName(tableName);\n-        final BlockStmt body = constructorDeclaration.getBody();\n-        body.getStatements().iterator().forEachRemaining(statement -> {\n-            if (statement instanceof ExplicitConstructorInvocationStmt) {\n-                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n-                NameExpr modelNameExpr = (NameExpr) superStatement.getArgument(0);\n-                modelNameExpr.setName(String.format(\"\\\"%s\\\"\", scorecard.getModelName()));\n-            }\n-        });\n+    static void setConstructor(final Scorecard scorecard, final ConstructorDeclaration constructorDeclaration, final SimpleName modelName) {\n+        setConstructorSuperNameInvocation(modelName.asString(), constructorDeclaration, scorecard.getModelName());\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMTg0MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469931840", "bodyText": "Why a new ignored test? If you plan to fix it later please create a ticket and refer it here", "author": "danielezonca", "createdAt": "2020-08-13T12:59:17Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProviderTest.java", "diffHunk": "@@ -41,11 +45,33 @@ public void getPMMLModelType() {\n \n     @Test\n     public void getKiePMMLModel() throws Exception {\n-        final PMML pmml = TestUtils.loadFromFile(SOURCE_1);\n-        assertNotNull(pmml);\n-        assertEquals(1, pmml.getModels().size());\n-        assertTrue(pmml.getModels().get(0) instanceof Scorecard);\n-        final KiePMMLScorecardModel kiePMMLModel = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(), pmml.getTransformationDictionary(), (Scorecard) pmml.getModels().get(0), KNOWLEDGE_BUILDER);\n+        final PMML pmml = getPMML(SOURCE_1);\n+        final KiePMMLScorecardModel kiePMMLModel = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(),\n+                                                                            pmml.getTransformationDictionary(),\n+                                                                            (Scorecard) pmml.getModels().get(0),\n+                                                                            KNOWLEDGE_BUILDER);\n         assertNotNull(kiePMMLModel);\n     }\n+\n+    @Ignore", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProviderTest.java\nindex d24720f4bf..35b70153c4 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProviderTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-scorecard/kie-pmml-models-drools-scorecard-compiler/src/test/java/org/kie/pmml/models/drools/scorecard/compiler/executor/ScorecardModelImplementationProviderTest.java\n\n@@ -53,16 +53,15 @@ public class ScorecardModelImplementationProviderTest {\n         assertNotNull(kiePMMLModel);\n     }\n \n-    @Ignore\n     @Test\n     public void getKiePMMLModelFromPlugin() throws Exception {\n         final PMML pmml = getPMML(SOURCE_1);\n         KnowledgeBuilderImpl knowledgeBuilder = new KnowledgeBuilderImpl();\n-        final KiePMMLScorecardModel retrieved = PROVIDER.getKiePMMLModelFromPlugin(\"PACKAGE_NAME\",\n-                                                                                   pmml.getDataDictionary(),\n-                                                                                   pmml.getTransformationDictionary(),\n-                                                                                   (Scorecard) pmml.getModels().get(0),\n-                                                                                   knowledgeBuilder);\n+        final KiePMMLDroolsModel retrieved = PROVIDER.getKiePMMLModelFromPlugin(\"PACKAGE_NAME\",\n+                                                                                pmml.getDataDictionary(),\n+                                                                                pmml.getTransformationDictionary(),\n+                                                                                (Scorecard) pmml.getModels().get(0),\n+                                                                                knowledgeBuilder);\n         assertNotNull(retrieved);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMjA0Mg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469932042", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-08-13T12:59:36Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProviderTest.java", "diffHunk": "@@ -41,11 +49,30 @@ public void getPMMLModelType() {\n \n     @Test\n     public void getKiePMMLModel() throws Exception {\n-        final PMML pmml = TestUtils.loadFromFile(SOURCE_1);\n-        assertNotNull(pmml);\n-        assertEquals(1, pmml.getModels().size());\n-        assertTrue(pmml.getModels().get(0) instanceof TreeModel);\n+        final PMML pmml = getPMML(SOURCE_1);\n         final KiePMMLTreeModel kiePMMLModel = PROVIDER.getKiePMMLModel(pmml.getDataDictionary(), pmml.getTransformationDictionary(), (TreeModel) pmml.getModels().get(0), KNOWLEDGE_BUILDER);\n         assertNotNull(kiePMMLModel);\n     }\n+\n+    @Ignore", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProviderTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProviderTest.java\nindex c0047e9ad1..b0a1799bab 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProviderTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-compiler/src/test/java/org/kie/pmml/models/drools/tree/compiler/executor/TreeModelImplementationProviderTest.java\n\n@@ -54,12 +50,11 @@ public class TreeModelImplementationProviderTest {\n         assertNotNull(kiePMMLModel);\n     }\n \n-    @Ignore\n     @Test\n     public void getKiePMMLModelFromPlugin() throws Exception {\n         final PMML pmml = getPMML(SOURCE_1);\n         KnowledgeBuilderImpl knowledgeBuilder = new KnowledgeBuilderImpl();\n-        final KiePMMLTreeModel retrieved = PROVIDER.getKiePMMLModelFromPlugin(\"PACKAGE_NAME\",\n+        final KiePMMLDroolsModel retrieved = PROVIDER.getKiePMMLModelFromPlugin(\"PACKAGE_NAME\",\n                                                                                 pmml.getDataDictionary(),\n                                                                                 pmml.getTransformationDictionary(),\n                                                                                 (TreeModel) pmml.getModels().get(0),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMzkyNg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469933926", "bodyText": "I think this check is duplicated: it is already done inside validate", "author": "danielezonca", "createdAt": "2020-08-13T13:02:41Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/main/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluator.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.mining.evaluator;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import org.drools.core.RuleBaseConfiguration;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.drools.core.util.StringUtils;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.KiePackage;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieRuntimeFactory;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+import org.kie.pmml.commons.model.tuples.KiePMMLValueWeight;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluator;\n+import org.kie.pmml.models.mining.model.KiePMMLMiningModel;\n+import org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD;\n+import org.kie.pmml.models.mining.model.segmentation.KiePMMLSegment;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.enums.ResultCode.OK;\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+/**\n+ * Default <code>PMMLModelExecutor</code> for <b>Mining</b>\n+ */\n+public class PMMLMiningModelEvaluator implements PMMLModelEvaluator {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PMMLMiningModelEvaluator.class.getName());\n+    private static final String EXPECTED_A_KIE_PMMLMINING_MODEL_RECEIVED = \"Expected a KiePMMLMiningModel, received \" +\n+            \"%s \";\n+    private static final String TARGET_FIELD_REQUIRED_RETRIEVED = \"TargetField required, retrieved %s\";\n+    private static final Map<String, InternalKnowledgeBase> MAPPED_KIEBASES = new HashMap<>();\n+\n+    @Override\n+    public PMML_MODEL getPMMLModelType() {\n+        return PMML_MODEL.MINING_MODEL;\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(final KieBase knowledgeBase,\n+                                final KiePMMLModel model,\n+                                final PMMLContext pmmlContext) {\n+        validate(model);\n+        if (!(model instanceof KiePMMLMiningModel)) {", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/main/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluator.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/main/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluator.java\nindex e5946e08cb..01294ded6e 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/main/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluator.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/main/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluator.java\n\n@@ -21,7 +21,6 @@ import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.function.BiConsumer;\n \n import org.drools.core.RuleBaseConfiguration;\n import org.drools.core.impl.InternalKnowledgeBase;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNzgzMg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469937832", "bodyText": "To be implemented?", "author": "danielezonca", "createdAt": "2020-08-13T13:08:52Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/KiePMMLMiningModel.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.mining.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.kie.pmml.commons.model.HasNestedModels;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.mining.model.segmentation.KiePMMLSegment;\n+import org.kie.pmml.models.mining.model.segmentation.KiePMMLSegmentation;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-3/MultipleModels.html>MiningModel</a>\n+ */\n+public class KiePMMLMiningModel extends KiePMMLModel implements HasNestedModels {\n+\n+    public static final PMML_MODEL PMML_MODEL_TYPE = PMML_MODEL.MINING_MODEL;\n+\n+    protected String algorithmName;\n+    protected boolean scorable = true;\n+    protected KiePMMLSegmentation segmentation;\n+\n+    protected KiePMMLMiningModel(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions, MINING_FUNCTION miningFunction) {\n+        return new Builder(name, extensions, miningFunction);\n+    }\n+\n+    @Override\n+    public Object evaluate(final Object knowledgeBase, final Map<String, Object> requestData) {\n+        return null;", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/KiePMMLMiningModel.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/KiePMMLMiningModel.java\nindex e0f763f64f..a4242b50ab 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/KiePMMLMiningModel.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/KiePMMLMiningModel.java\n\n@@ -20,6 +20,7 @@ import java.util.Map;\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.HasNestedModels;\n import org.kie.pmml.commons.model.KiePMMLExtension;\n import org.kie.pmml.commons.model.KiePMMLModel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTM1OQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469941359", "bodyText": "Please add more tests", "author": "danielezonca", "createdAt": "2020-08-13T13:14:14Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/test/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package  org.kie.pmml.models.mining.evaluator;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class PMMLMiningModelEvaluatorTest {", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2333bcb163020bb0ba531adf61fd3060e3ef9c1", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/test/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluatorTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/test/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluatorTest.java\nindex dac7b06cff..4e783247a5 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/test/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluatorTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-evaluator/src/test/java/org/kie/pmml/models/mining/evaluator/PMMLMiningModelEvaluatorTest.java\n\n@@ -13,26 +13,290 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package  org.kie.pmml.models.mining.evaluator;\n+package org.kie.pmml.models.mining.evaluator;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.stream.IntStream;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieServices;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+import org.kie.pmml.commons.model.tuples.KiePMMLValueWeight;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.models.mining.model.KiePMMLMiningModel;\n+import org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD;\n+import org.kie.pmml.models.mining.model.segmentation.KiePMMLSegmentation;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.kie.pmml.commons.enums.ResultCode.OK;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.AVERAGE;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.MAJORITY_VOTE;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.MAX;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.MEDIAN;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.MODEL_CHAIN;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.SELECT_ALL;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.SELECT_FIRST;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.SUM;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.WEIGHTED_AVERAGE;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.WEIGHTED_MAJORITY_VOTE;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.WEIGHTED_MEDIAN;\n+import static org.kie.pmml.models.mining.model.enums.MULTIPLE_MODEL_METHOD.WEIGHTED_SUM;\n \n public class PMMLMiningModelEvaluatorTest {\n \n+    private final static List<MULTIPLE_MODEL_METHOD> RAW_OBJECT_METHODS = Arrays.asList(MAJORITY_VOTE,\n+                                                                                        SELECT_ALL,\n+                                                                                        SELECT_FIRST);\n+    private final static List<MULTIPLE_MODEL_METHOD> VALUE_WEIGHT_METHODS = Arrays.asList(MAX,\n+                                                                                          SUM,\n+                                                                                          MEDIAN,\n+                                                                                          AVERAGE,\n+                                                                                          WEIGHTED_SUM,\n+                                                                                          WEIGHTED_MEDIAN,\n+                                                                                          WEIGHTED_AVERAGE);\n+    private final static List<MULTIPLE_MODEL_METHOD> NOT_IMPLEMENTED_METHODS = Arrays.asList(MODEL_CHAIN,\n+                                                                                             WEIGHTED_MAJORITY_VOTE);\n     private PMMLMiningModelEvaluator evaluator;\n \n     @Before\n-    public void setUp(){\n+    public void setUp() {\n         evaluator = new PMMLMiningModelEvaluator();\n     }\n \n     @Test\n-    public void getPMMLModelType(){\n+    public void getPMMLModelType() {\n         assertEquals(PMML_MODEL.MINING_MODEL, evaluator.getPMMLModelType());\n     }\n \n+    @Test\n+    public void getPMML4Result() {\n+        String name = \"NAME\";\n+        String targetField = \"TARGET\";\n+        String prediction = \"FIRST_VALUE\";\n+        final Map<String, Object> outputFieldsMap = new HashMap<>();\n+        IntStream.range(0,3).forEach(index -> {\n+            outputFieldsMap.put(\"KEY_\" + index, \"OBJECT_\" + index);\n+        });\n+        KiePMMLSegmentation kiePMMLSegmentation = KiePMMLSegmentation.builder(\"SEGM_1\", Collections.emptyList(), SELECT_FIRST).build();\n+        KiePMMLMiningModel kiePMMLMiningModel = KiePMMLMiningModel.builder(name, Collections.emptyList(),\n+                                                                           MINING_FUNCTION.ASSOCIATION_RULES)\n+                .withTargetField(targetField)\n+                .withSegmentation(kiePMMLSegmentation)\n+                .withOutputFieldsMap(outputFieldsMap)\n+                .build();\n+        final LinkedHashMap<String, KiePMMLNameValue> inputData = new LinkedHashMap<>();\n+        inputData.put(\"FIRST_KEY\", new KiePMMLNameValue(\"FIRST_NAME\", prediction));\n+        inputData.put(\"SECOND_KEY\", new KiePMMLNameValue(\"SECOND_NAME\", \"SECOND_VALUE\"));\n+        PMML4Result retrieved = evaluator.getPMML4Result(kiePMMLMiningModel, inputData);\n+        assertNotNull(retrieved);\n+        assertEquals(OK.getName(), retrieved.getResultCode());\n+        assertEquals(targetField, retrieved.getResultObjectName());\n+        final Map<String, Object> resultVariables = retrieved.getResultVariables();\n+        assertTrue(resultVariables.containsKey(targetField));\n+        assertEquals(prediction, resultVariables.get(targetField));\n+        outputFieldsMap.forEach((key, value) -> {\n+            assertTrue(resultVariables.containsKey(key));\n+            assertEquals(value, resultVariables.get(key));\n+        });\n+    }\n+\n+    @Test\n+    public void getPMMLRuntime() {\n+        final KieServices kieServices = KieServices.Factory.get();\n+        final KieContainer kieContainer = kieServices.newKieClasspathContainer();\n+        final KieBase kieBase = kieContainer.getKieBase();\n+        String kModulePackageName = \"kModulePackageNameA\";\n+        String containerModelName = \"containerModelNameA\";\n+        PMMLRuntime retrieved = evaluator.getPMMLRuntime(kModulePackageName, kieBase, containerModelName);\n+        assertNotNull(retrieved);\n+        PMMLRuntime secondRetrieved = evaluator.getPMMLRuntime(kModulePackageName, kieBase, containerModelName);\n+        assertEquals(retrieved.getKnowledgeBase(), secondRetrieved.getKnowledgeBase());\n+        kModulePackageName = \"kModulePackageNameB\";\n+        containerModelName = \"containerModelNameB\";\n+        PMMLRuntime thirdRetrieved = evaluator.getPMMLRuntime(kModulePackageName, kieBase, containerModelName);\n+        assertNotNull(thirdRetrieved);\n+        assertNotEquals(retrieved.getKnowledgeBase(), thirdRetrieved.getKnowledgeBase());\n+    }\n+\n+    @Test\n+    public void getKiePMMLNameRawObject() {\n+        final Object rawObject = \"OBJ\";\n+        final PMML4Result pmml4Result = getPMML4Result(rawObject);\n+        RAW_OBJECT_METHODS.forEach(multipleModelMethod -> {\n+            KiePMMLNameValue retrieved = evaluator.getKiePMMLNameValue(pmml4Result, multipleModelMethod, 34.2);\n+            assertEquals(pmml4Result.getResultObjectName(), retrieved.getName());\n+            assertNotNull(retrieved.getValue());\n+            assertEquals(rawObject, retrieved.getValue());\n+        });\n+    }\n+\n+    @Test\n+    public void getKiePMMLNameValueValueWeightNumber() {\n+        final Integer rawObject = 24;\n+        final PMML4Result pmml4Result = getPMML4Result(rawObject);\n+        final double weight = 2.23;\n+        double expected = rawObject.doubleValue();\n+        VALUE_WEIGHT_METHODS.forEach(multipleModelMethod -> {\n+            KiePMMLNameValue retrieved = evaluator.getKiePMMLNameValue(pmml4Result, multipleModelMethod, weight);\n+            assertNotNull(retrieved);\n+            assertEquals(pmml4Result.getResultObjectName(), retrieved.getName());\n+            assertNotNull(retrieved.getValue());\n+            assertTrue(retrieved.getValue() instanceof KiePMMLValueWeight);\n+            KiePMMLValueWeight kiePMMLValueWeight = (KiePMMLValueWeight) retrieved.getValue();\n+            assertEquals(expected, kiePMMLValueWeight.getValue(), 0.0);\n+            assertEquals(weight, kiePMMLValueWeight.getWeight(), 0.0);\n+        });\n+    }\n+\n+    @Test\n+    public void getKiePMMLNameValueWeightNoNumber() {\n+        final PMML4Result pmml4Result = getPMML4Result(\"OBJ\");\n+        VALUE_WEIGHT_METHODS.forEach(multipleModelMethod -> {\n+            try {\n+                evaluator.getKiePMMLNameValue(pmml4Result, multipleModelMethod, 34.2);\n+                fail(multipleModelMethod + \" is supposed to throw exception because raw object is not a number\");\n+            } catch (KiePMMLException e) {\n+                // expected\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void getKiePMMLNameValueNotImplemented() {\n+        final PMML4Result pmml4Result = getPMML4Result(\"OBJ\");\n+        NOT_IMPLEMENTED_METHODS.forEach(multipleModelMethod -> {\n+            try {\n+                evaluator.getKiePMMLNameValue(pmml4Result, multipleModelMethod, 34.2);\n+                fail(multipleModelMethod + \" is supposed to throw exception because not implemented\");\n+            } catch (KiePMMLException e) {\n+                // expected\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void getEventuallyWeightedResultRawObject() {\n+        final Object rawObject = \"OBJ\";\n+        RAW_OBJECT_METHODS.forEach(multipleModelMethod -> {\n+            Object retrieved = evaluator.getEventuallyWeightedResult(rawObject, multipleModelMethod, 34.2);\n+            assertNotNull(retrieved);\n+            assertEquals(rawObject, retrieved);\n+        });\n+    }\n+\n+    @Test\n+    public void getEventuallyWeightedResultValueWeightNumber() {\n+        final Integer rawObject = 24;\n+        final double weight = 2.23;\n+        VALUE_WEIGHT_METHODS.forEach(multipleModelMethod -> {\n+            Object retrieved = evaluator.getEventuallyWeightedResult(rawObject, multipleModelMethod, weight);\n+            assertNotNull(retrieved);\n+            assertTrue(retrieved instanceof KiePMMLValueWeight);\n+            KiePMMLValueWeight kiePMMLValueWeight = (KiePMMLValueWeight) retrieved;\n+            assertEquals(rawObject.doubleValue(), kiePMMLValueWeight.getValue(), 0.0);\n+            assertEquals(weight, kiePMMLValueWeight.getWeight(), 0.0);\n+        });\n+    }\n+\n+    @Test\n+    public void getEventuallyWeightedResultValueWeightNoNumber() {\n+        VALUE_WEIGHT_METHODS.forEach(multipleModelMethod -> {\n+            try {\n+                evaluator.getEventuallyWeightedResult(\"OBJ\", multipleModelMethod, 34.2);\n+                fail(multipleModelMethod + \" is supposed to throw exception because raw object is not a number\");\n+            } catch (KiePMMLException e) {\n+                // expected\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void getEventuallyWeightedResultNotImplemented() {\n+        NOT_IMPLEMENTED_METHODS.forEach(multipleModelMethod -> {\n+            try {\n+                evaluator.getEventuallyWeightedResult(\"OBJ\", multipleModelMethod, 34.2);\n+                fail(multipleModelMethod + \" is supposed to throw exception because not implemented\");\n+            } catch (KiePMMLException e) {\n+                // expected\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void validateKiePMMLMiningModel() {\n+        String name = \"NAME\";\n+        KiePMMLMiningModel kiePMMLMiningModel = KiePMMLMiningModel.builder(name, Collections.emptyList(),\n+                                                                           MINING_FUNCTION.ASSOCIATION_RULES)\n+                .withTargetField(\"TARGET\")\n+                .build();\n+        evaluator.validate(kiePMMLMiningModel);\n+    }\n+\n+    @Test(expected = KiePMMLModelException.class)\n+    public void validateNoKiePMMLMiningModel() {\n+        String name = \"NAME\";\n+        KiePMMLModel kiePMMLModel = new KiePMMLModel(name, Collections.emptyList()) {\n+            @Override\n+            public Object evaluate(Object knowledgeBase, Map<String, Object> requestData) {\n+                return null;\n+            }\n+        };\n+        evaluator.validate(kiePMMLModel);\n+    }\n+\n+    @Test\n+    public void validateMiningTargetField() {\n+        String name = \"NAME\";\n+        KiePMMLMiningModel kiePMMLMiningModel = KiePMMLMiningModel.builder(name, Collections.emptyList(),\n+                                                                           MINING_FUNCTION.ASSOCIATION_RULES)\n+                .withTargetField(\"TARGET\")\n+                .build();\n+        evaluator.validateMining(kiePMMLMiningModel);\n+    }\n+\n+    @Test(expected = KiePMMLInternalException.class)\n+    public void validateMiningEmptyTargetField() {\n+        String name = \"NAME\";\n+        KiePMMLMiningModel kiePMMLMiningModel = KiePMMLMiningModel.builder(name, Collections.emptyList(),\n+                                                                           MINING_FUNCTION.ASSOCIATION_RULES)\n+                .withTargetField(\"     \")\n+                .build();\n+        evaluator.validateMining(kiePMMLMiningModel);\n+    }\n+\n+    @Test(expected = KiePMMLInternalException.class)\n+    public void validateMiningNoTargetField() {\n+        String name = \"NAME\";\n+        KiePMMLMiningModel kiePMMLMiningModel = KiePMMLMiningModel.builder(name, Collections.emptyList(),\n+                                                                           MINING_FUNCTION.ASSOCIATION_RULES).build();\n+        evaluator.validateMining(kiePMMLMiningModel);\n+    }\n+\n+    private PMML4Result getPMML4Result(Object rawObject) {\n+        final String resultObjectName = \"RESULT\";\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.addResultVariable(resultObjectName, rawObject);\n+        toReturn.setResultObjectName(resultObjectName);\n+        return toReturn;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NDQ5Nw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r469944497", "bodyText": "General comment related to this class: it should be better to implement different functions as for loop instead of stream for performance. Wdyt?\nFeel free to create a ticket and consider this change for the future", "author": "danielezonca", "createdAt": "2020-08-13T13:19:10Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/enums/MULTIPLE_MODEL_METHOD.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.kie.pmml.models.mining.model.enums;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.OptionalDouble;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.DoubleStream;\n+import java.util.stream.Stream;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.tuples.KiePMMLNameValue;\n+import org.kie.pmml.commons.model.tuples.KiePMMLValueWeight;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MultipleModels.html#xsdType_MULTIPLE-MODEL-METHOD>MULTIPLE-MODEL-METHOD</a>\n+ */\n+public enum MULTIPLE_MODEL_METHOD {", "originalCommit": "7156fd4086c74609bdf25f73eefa5069064ce44f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4OTE2MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475489160", "bodyText": "@danielezonca\nhttps://issues.redhat.com/browse/DROOLS-5593", "author": "gitgabrio", "createdAt": "2020-08-24T10:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NDQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "124f2431748ac56cef3569838aac882ab65fc357", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/enums/MULTIPLE_MODEL_METHOD.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/enums/MULTIPLE_MODEL_METHOD.java\nindex 7317333ffd..49d26a87e8 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/enums/MULTIPLE_MODEL_METHOD.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-model/src/main/java/org/kie/pmml/models/mining/model/enums/MULTIPLE_MODEL_METHOD.java\n\n@@ -40,10 +40,8 @@ public enum MULTIPLE_MODEL_METHOD {\n     WEIGHTED_MAJORITY_VOTE(\"weightedMajorityVote\", inputData -> {\n         throw new KieEnumException(\"WEIGHTED_MAJORITY_VOTE not implemented, yet\");\n     }),\n-    AVERAGE(\"average\", inputData -> {\n-        return doubleStream(inputData.values().stream(), \"AVERAGE\")\n-                .average().orElseThrow(() -> new KieEnumException(\"Failed to get AVERAGE\"));\n-    }),\n+    AVERAGE(\"average\", inputData -> doubleStream(inputData.values().stream(), \"AVERAGE\")\n+                .average().orElseThrow(() -> new KieEnumException(\"Failed to get AVERAGE\"))),\n     WEIGHTED_AVERAGE(\"weightedAverage\", inputData -> {\n         AtomicReference<Double> weightedSum = new AtomicReference<>(0.0);\n         AtomicReference<Double> weights = new AtomicReference<>(0.0);\n"}}, {"oid": "124f2431748ac56cef3569838aac882ab65fc357", "url": "https://github.com/kiegroup/drools/commit/124f2431748ac56cef3569838aac882ab65fc357", "message": "[DROOLS-5143] Fixed Sonarcloud \"complaints\"", "committedDate": "2020-08-13T14:51:20Z", "type": "commit"}, {"oid": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "url": "https://github.com/kiegroup/drools/commit/3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "message": "[DROOLS-5143] Fixed as per PR review", "committedDate": "2020-08-13T15:00:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MzY2MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r471383660", "bodyText": "Is it possible? Log message?", "author": "danielezonca", "createdAt": "2020-08-17T10:22:17Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java", "diffHunk": "@@ -130,25 +137,26 @@ static void populateConstructor(final String generatedClassName,\n                                             final String modelName) {\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n         objectCreationExpr.setType(nestedTable);\n-        constructorDeclaration.setName(generatedClassName);\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n         final BlockStmt body = constructorDeclaration.getBody();\n-        body.getStatements().iterator().forEachRemaining(statement -> {\n-            if (statement instanceof ExplicitConstructorInvocationStmt) {\n-                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n-                NameExpr modelNameExpr = (NameExpr) superStatement.getArgument(0);\n-                modelNameExpr.setName(String.format(\"\\\"%s\\\"\", modelName));\n-            }\n-        });\n         final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n         assignExprs.forEach(assignExpr -> {\n-            if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"regressionTable\")) {\n-                assignExpr.setValue(objectCreationExpr);\n-            } else if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"targetField\")) {\n-                assignExpr.setValue(new StringLiteralExpr(targetField));\n-            } else if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"miningFunction\")) {\n-                assignExpr.setValue(new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n-            } else if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"pmmlMODEL\")) {\n-                assignExpr.setValue(new NameExpr(PMML_MODEL.REGRESSION_MODEL.getClass().getName() + \".\" + PMML_MODEL.REGRESSION_MODEL.name()));\n+            final String assignExprName = assignExpr.getTarget().asNameExpr().getNameAsString();\n+            switch (assignExprName) {\n+                case \"regressionTable\":\n+                    assignExpr.setValue(objectCreationExpr);\n+                    break;\n+                case \"targetField\":\n+                    assignExpr.setValue(new StringLiteralExpr(targetField));\n+                    break;\n+                case \"miningFunction\":\n+                    assignExpr.setValue(new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+                    break;\n+                case \"pmmlMODEL\":\n+                    assignExpr.setValue(new NameExpr(PMML_MODEL.REGRESSION_MODEL.getClass().getName() + \".\" + PMML_MODEL.REGRESSION_MODEL.name()));\n+                    break;\n+                default:\n+                    // NOOP", "originalCommit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0Mjg3Mg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475442872", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T08:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java\nindex b45a6bde68..5351259f99 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactory.java\n\n@@ -156,7 +157,7 @@ public class KiePMMLRegressionModelFactory {\n                     assignExpr.setValue(new NameExpr(PMML_MODEL.REGRESSION_MODEL.getClass().getName() + \".\" + PMML_MODEL.REGRESSION_MODEL.name()));\n                     break;\n                 default:\n-                    // NOOP\n+                    logger.debug(UNCHANGED_VARIABLE_IN_CONSTRUCTOR, assignExprName, constructorDeclaration.toString());\n             }\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NDI5Ng==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r471384296", "bodyText": "Can you please create a ticket for this?", "author": "danielezonca", "createdAt": "2020-08-17T10:23:21Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.BinaryOperator;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);\n+\n+    private final BOOLEAN_OPERATOR booleanOperator;\n+    private BinaryOperator<Boolean> operatorFunction;\n+    private List<KiePMMLPredicate> kiePMMLPredicates;\n+\n+    private KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n+        super(name, extensions);\n+        this.booleanOperator = booleanOperator;\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+        return new Builder(extensions, booleanOperator);\n+    }\n+\n+    @Override\n+    public boolean evaluate(Map<String, Object> values) {\n+        Boolean toReturn = null;\n+        for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n+            toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n+        }\n+        return toReturn != null && toReturn;\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public BOOLEAN_OPERATOR getBooleanOperator() {\n+        return booleanOperator;\n+    }\n+\n+    public List<KiePMMLPredicate> getKiePMMLPredicates() {\n+        return kiePMMLPredicates;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"KiePMMLCompoundPredicate{\" +\n+                \"booleanOperator=\" + booleanOperator +\n+                \", operatorFunction=\" + operatorFunction +\n+                \", kiePMMLPredicates=\" + kiePMMLPredicates +\n+                \", extensions=\" + extensions +\n+                \", id='\" + id + '\\'' +\n+                \", parentId='\" + parentId + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+        KiePMMLCompoundPredicate that = (KiePMMLCompoundPredicate) o;\n+        return booleanOperator == that.booleanOperator &&\n+                Objects.equals(operatorFunction, that.operatorFunction) &&\n+                Objects.equals(kiePMMLPredicates, that.kiePMMLPredicates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), booleanOperator, operatorFunction, kiePMMLPredicates);\n+    }\n+\n+    public static class Builder extends KiePMMLPredicate.Builder<KiePMMLCompoundPredicate> {\n+\n+        private Builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+            super(\"CompoundPredicate-\", () -> new KiePMMLCompoundPredicate(\"CompoundPredicate\", extensions, booleanOperator));\n+            toBuild.operatorFunction = getInnerBinaryOperator(booleanOperator);\n+        }\n+\n+        public KiePMMLCompoundPredicate.Builder withKiePMMLPredicates(List<KiePMMLPredicate> kiePMMLPredicates) {\n+            kiePMMLPredicates.forEach(predicate -> predicate.setParentId(toBuild.id));\n+            toBuild.kiePMMLPredicates = kiePMMLPredicates;\n+            return this;\n+        }\n+\n+        private BinaryOperator<Boolean> getInnerBinaryOperator(BOOLEAN_OPERATOR booleanOperator) {\n+            switch (booleanOperator) {\n+                // logic here is\n+                // first boolean may be null (initial evaluation) so we start taking the second boolean\n+                case OR:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean || aBoolean2 : aBoolean2;\n+                case AND:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean && aBoolean2 : aBoolean2;\n+                case XOR:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean ^ aBoolean2 : aBoolean2;\n+                // TODO {gcardosi} How to manage?", "originalCommit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMzQwNg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475513406", "bodyText": "@danielezonca\nhttps://issues.redhat.com/browse/DROOLS-5594", "author": "gitgabrio", "createdAt": "2020-08-24T10:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NDI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "413eff7c5106c0cc07ae6fb091f5695c16389e96", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\nindex 0077655187..5ba9e85545 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n\n@@ -37,7 +37,7 @@ public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n     private BinaryOperator<Boolean> operatorFunction;\n     private List<KiePMMLPredicate> kiePMMLPredicates;\n \n-    private KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n+    protected KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n         super(name, extensions);\n         this.booleanOperator = booleanOperator;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNzk2Nw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r471607967", "bodyText": "Is it possible? Log message?", "author": "danielezonca", "createdAt": "2020-08-17T16:48:55Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtils.java", "diffHunk": "@@ -106,48 +108,24 @@ static void setConstructor(final Model model, final ConstructorDeclaration const\n         final BlockStmt body = constructorDeclaration.getBody();\n         final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n         assignExprs.forEach(assignExpr -> {\n-            if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"targetField\")) {\n-                assignExpr.setValue(new StringLiteralExpr(targetField));\n-            } else if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"miningFunction\")) {\n-                assignExpr.setValue(new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n-            } else if (assignExpr.getTarget().asNameExpr().getNameAsString().equals(\"pmmlMODEL\")) {\n-                PMML_MODEL pmmlModel = PMML_MODEL.byName(model.getClass().getSimpleName());\n-                assignExpr.setValue(new NameExpr(pmmlModel.getClass().getName() + \".\" + pmmlModel.name()));\n+            final String assignExprName = assignExpr.getTarget().asNameExpr().getNameAsString();\n+            switch (assignExprName) {\n+                case \"targetField\":\n+                    assignExpr.setValue(new StringLiteralExpr(targetField));\n+                    break;\n+                case \"miningFunction\":\n+                    assignExpr.setValue(new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+                    break;\n+                case \"pmmlMODEL\":\n+                    PMML_MODEL pmmlModel = PMML_MODEL.byName(model.getClass().getSimpleName());\n+                    assignExpr.setValue(new NameExpr(pmmlModel.getClass().getName() + \".\" + pmmlModel.name()));\n+                    break;\n+                default:\n+                    // NOOP", "originalCommit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzOTM3Ng==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475439376", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T08:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNzk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtils.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtils.java\nindex d6b8a45409..6e69ba73e0 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtils.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLDroolsModelFactoryUtils.java\n\n@@ -103,7 +104,11 @@ public class KiePMMLDroolsModelFactoryUtils {\n      * @param targetField\n      * @param miningFunction\n      */\n-    static void setConstructor(final Model model, final ConstructorDeclaration constructorDeclaration, final SimpleName tableName, final String targetField, MINING_FUNCTION miningFunction) {\n+    static void setConstructor(final Model model,\n+                               final ConstructorDeclaration constructorDeclaration,\n+                               final SimpleName tableName,\n+                               final String targetField,\n+                               final MINING_FUNCTION miningFunction) {\n         constructorDeclaration.setName(tableName);\n         final BlockStmt body = constructorDeclaration.getBody();\n         final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwODgyNw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r471608827", "bodyText": "Is it possible? Log message?", "author": "danielezonca", "createdAt": "2020-08-17T16:50:27Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.mining.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.expr.AssignExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.TransformationDictionary;\n+import org.dmg.pmml.mining.MiningModel;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.compiler.commons.utils.JavaParserUtils;\n+import org.kie.pmml.models.mining.model.KiePMMLMiningModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLExtensionFactory.getKiePMMLExtensions;\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLOutputFieldFactory.getOutputFields;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFullClassName;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.addOutputFieldsPopulation;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.addTransformationsInClassOrInterfaceDeclaration;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.setConstructorSuperNameInvocation;\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetFieldName;\n+import static org.kie.pmml.models.mining.compiler.factories.KiePMMLSegmentationFactory.getSegmentation;\n+import static org.kie.pmml.models.mining.compiler.factories.KiePMMLSegmentationFactory.getSegmentationSourcesMap;\n+\n+public class KiePMMLMiningModelFactory {\n+\n+    static final String SEGMENTATIONNAME_TEMPLATE = \"%s_Segmentation\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLMiningModelFactory.class.getName());\n+    static final String KIE_PMML_MINING_MODEL_TEMPLATE_JAVA = \"KiePMMLMiningModelTemplate.tmpl\";\n+    static final String KIE_PMML_MINING_MODEL_TEMPLATE = \"KiePMMLMiningModelTemplate\";\n+\n+\n+    private KiePMMLMiningModelFactory() {\n+        // Avoid instantiation\n+    }\n+\n+    public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary dataDictionary,\n+                                                           final TransformationDictionary transformationDictionary,\n+                                                           final MiningModel model,\n+                                                           final KnowledgeBuilder kBuilder) {\n+        logger.debug(\"getKiePMMLMiningModel {}\", model);\n+        String name = model.getModelName();\n+        Optional<String> targetFieldName = getTargetFieldName(dataDictionary, model);\n+        List<KiePMMLExtension> extensions = getKiePMMLExtensions(model.getExtensions());\n+        return KiePMMLMiningModel.builder(name, extensions, MINING_FUNCTION.byName(model.getMiningFunction().value()))\n+                .withAlgorithmName(model.getAlgorithmName())\n+                .withScorable(model.isScorable())\n+                .withSegmentation(getSegmentation(dataDictionary,\n+                                                  transformationDictionary,\n+                                                  model.getSegmentation(),\n+                                                  String.format(SEGMENTATIONNAME_TEMPLATE, model.getModelName()),\n+                                                  kBuilder))\n+                .withTargetField(targetFieldName.orElse(null))\n+                .build();\n+    }\n+\n+    public static Map<String, String> getKiePMMLMiningModelSourcesMap(final DataDictionary dataDictionary,\n+                                                                      final TransformationDictionary transformationDictionary,\n+                                                                      final MiningModel model,\n+                                                                      final String parentPackageName,\n+                                                                      final KnowledgeBuilder kBuilder) {\n+        logger.trace(\"getKiePMMLMiningModelSourcesMap {} {} {}\", dataDictionary, model, parentPackageName);\n+        final String segmentationName = String.format(SEGMENTATIONNAME_TEMPLATE, model.getModelName());\n+        final Map<String, String> toReturn = getSegmentationSourcesMap(parentPackageName,\n+                                                                       dataDictionary,\n+                                                                       transformationDictionary,\n+                                                                       model.getSegmentation(),\n+                                                                       segmentationName,\n+                                                                       kBuilder);\n+        String segmentationClass = getSanitizedPackageName(parentPackageName + \".\" + segmentationName) + \".\" + getSanitizedClassName(segmentationName);\n+        if (!toReturn.containsKey(segmentationClass)) {\n+            throw new KiePMMLException(\"Expected generated class \" + segmentationClass + \" not found\");\n+        }\n+        String className = getSanitizedClassName(model.getModelName());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n+        ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        String modelName = model.getModelName();\n+        String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n+        List<KiePMMLOutputField> outputFields = getOutputFields(model);\n+        final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n+        setConstructor(className,\n+                       constructorDeclaration,\n+                       targetFieldName,\n+                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n+                       modelName,\n+                       segmentationClass);\n+        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n+        toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n+        return toReturn;\n+    }\n+\n+    static void setConstructor(final String generatedClassName,\n+                               final ConstructorDeclaration constructorDeclaration,\n+                               final String targetField,\n+                               final MINING_FUNCTION miningFunction,\n+                               final String modelName,\n+                               final String segmentationClass) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n+        final BlockStmt body = constructorDeclaration.getBody();\n+        final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n+        assignExprs.forEach(assignExpr -> {\n+            final String assignExprName = assignExpr.getTarget().asNameExpr().getNameAsString();\n+            switch (assignExprName) {\n+                case \"targetField\":\n+                    assignExpr.setValue(new StringLiteralExpr(targetField));\n+                    break;\n+                case \"miningFunction\":\n+                    assignExpr.setValue(new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+                break;\n+                case \"pmmlMODEL\":\n+                    assignExpr.setValue(new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n+                    break;\n+                case \"segmentation\":\n+                    ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n+                    ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+                    objectCreationExpr.setType(kiePMMLSegmentationClass);\n+                    assignExpr.setValue(objectCreationExpr);\n+                    break;\n+                default:\n+                    // NOOP", "originalCommit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNTE3Nw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475435177", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T08:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwODgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\nindex dfc0d6f665..f3014e7ab8 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n\n@@ -45,6 +45,7 @@ import org.slf4j.LoggerFactory;\n \n import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.Constants.UNCHANGED_VARIABLE_IN_CONSTRUCTOR;\n import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n import static org.kie.pmml.compiler.commons.factories.KiePMMLExtensionFactory.getKiePMMLExtensions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwODk5OA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r471608998", "bodyText": "Is it possible? Log message?", "author": "danielezonca", "createdAt": "2020-08-17T16:50:44Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactory.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.mining.compiler.factories;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.expr.AssignExpr;\n+import com.github.javaparser.ast.expr.DoubleLiteralExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.TransformationDictionary;\n+import org.dmg.pmml.mining.Segment;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.HasSourcesMap;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.compiler.commons.utils.JavaParserUtils;\n+import org.kie.pmml.models.mining.model.segmentation.KiePMMLSegment;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLExtensionFactory.getKiePMMLExtensions;\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLPredicateFactory.getPredicate;\n+import static org.kie.pmml.compiler.commons.factories.KiePMMLPredicateFactory.getPredicateSourcesMap;\n+import static org.kie.pmml.compiler.commons.implementations.KiePMMLModelRetriever.getFromCommonDataAndTransformationDictionaryAndModel;\n+import static org.kie.pmml.compiler.commons.implementations.KiePMMLModelRetriever.getFromCommonDataAndTransformationDictionaryAndModelFromPlugin;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFullClassName;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.setConstructorSuperNameInvocation;\n+\n+public class KiePMMLSegmentFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLSegmentFactory.class.getName());\n+    static final String KIE_PMML_SEGMENT_TEMPLATE_JAVA = \"KiePMMLSegmentTemplate.tmpl\";\n+    static final String KIE_PMML_SEGMENT_TEMPLATE = \"KiePMMLSegmentTemplate\";\n+\n+    private KiePMMLSegmentFactory() {\n+    }\n+\n+    public static List<KiePMMLSegment> getSegments(final DataDictionary dataDictionary,\n+                                                   final TransformationDictionary transformationDictionary,\n+                                                   final List<Segment> segments,\n+                                                   final KnowledgeBuilder kBuilder) {\n+        logger.debug(\"getSegments {}\", segments);\n+        return segments.stream().map(segment -> getSegment(dataDictionary, transformationDictionary, segment,\n+                                                           kBuilder)).collect(Collectors.toList());\n+    }\n+\n+    public static KiePMMLSegment getSegment(final DataDictionary dataDictionary,\n+                                            final TransformationDictionary transformationDictionary,\n+                                            final Segment segment,\n+                                            final KnowledgeBuilder kBuilder) {\n+        logger.debug(\"getSegment {}\", segment);\n+        return KiePMMLSegment.builder(segment.getId(),\n+                                      getKiePMMLExtensions(segment.getExtensions()),\n+                                      getPredicate(segment.getPredicate(), dataDictionary),\n+                                      getFromCommonDataAndTransformationDictionaryAndModel(dataDictionary,\n+                                                                                           transformationDictionary,\n+                                                                                           segment.getModel(),\n+                                                                                           kBuilder).orElseThrow(() -> new KiePMMLException(\"Failed to get the KiePMMLModel for segment \" + segment.getModel().getModelName())))\n+                .withWeight(segment.getWeight().doubleValue())\n+                .build();\n+    }\n+\n+    public static Map<String, String> getSegmentsSourcesMap(final String parentPackageName,\n+                                                            final DataDictionary dataDictionary,\n+                                                            final TransformationDictionary transformationDictionary,\n+                                                            final List<Segment> segments,\n+                                                            final KnowledgeBuilder kBuilder) {\n+        logger.debug(\"getSegments {}\", segments);\n+        final Map<String, String> toReturn = new HashMap<>();\n+        segments.forEach(segment -> toReturn.putAll(getSegmentSourcesMap(parentPackageName,\n+                                                                         dataDictionary,\n+                                                                         transformationDictionary, segment,\n+                                                                         kBuilder)));\n+\n+        return toReturn;\n+    }\n+\n+    public static Map<String, String> getSegmentSourcesMap(\n+            final String parentPackageName,\n+            final DataDictionary dataDictionary,\n+            final TransformationDictionary transformationDictionary,\n+            final Segment segment,\n+            final KnowledgeBuilder kBuilder) {\n+        logger.debug(\"getSegment {}\", segment);\n+        final String packageName = getSanitizedPackageName(parentPackageName + \".\" + segment.getId());\n+        KiePMMLModel kiePmmlModel = getFromCommonDataAndTransformationDictionaryAndModelFromPlugin(\n+                packageName,\n+                dataDictionary,\n+                transformationDictionary,\n+                segment.getModel(),\n+                kBuilder)\n+                .orElseThrow(() -> new KiePMMLException(\"Failed to get the KiePMMLModel for segment \" + segment.getModel().getModelName()));\n+        if (!(kiePmmlModel instanceof HasSourcesMap)) {\n+            throw new KiePMMLException(\"Retrieved KiePMMLModel for segment \" + segment.getModel().getModelName() + \" \" +\n+                                               \"does not implement HasSources\");\n+        }\n+        final Map<String, String> toReturn = new HashMap<>(((HasSourcesMap) kiePmmlModel).getSourcesMap());\n+        String kiePMMLModelClass = packageName + \".\" + getSanitizedClassName(segment.getModel().getModelName());\n+        if (!toReturn.containsKey(kiePMMLModelClass)) {\n+            throw new KiePMMLException(\"Expected generated class \" + kiePMMLModelClass + \" not found\");\n+        }\n+        final String className = getSanitizedClassName(segment.getId());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName, KIE_PMML_SEGMENT_TEMPLATE_JAVA, KIE_PMML_SEGMENT_TEMPLATE);\n+        ClassOrInterfaceDeclaration segmentTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = segmentTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, segmentTemplate.getName())));\n+        KiePMMLPredicate predicate = getPredicate(segment.getPredicate(), dataDictionary);\n+        toReturn.putAll(getPredicateSourcesMap(predicate, packageName));\n+        String predicateClassName = packageName + \".\" + predicate.getName();\n+        setConstructor(segment.getId(), className, constructorDeclaration, predicateClassName,  kiePMMLModelClass, segment.getWeight().doubleValue());\n+        toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n+        return toReturn;\n+    }\n+\n+    static void setConstructor(final String segmentName,\n+                               final String generatedClassName,\n+                               final ConstructorDeclaration constructorDeclaration,\n+                               final String predicateClassName,\n+                               final String kiePMMLModelClass,\n+                               final double weight) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, segmentName);\n+        final BlockStmt body = constructorDeclaration.getBody();\n+        body.getStatements().iterator().forEachRemaining(statement -> {\n+            if (statement instanceof ExplicitConstructorInvocationStmt) {\n+                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n+                NameExpr nameExprs = (NameExpr) superStatement.getArgument(2);\n+                ClassOrInterfaceType classOrInterfaceType = parseClassOrInterfaceType(predicateClassName);\n+                ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+                objectCreationExpr.setType(classOrInterfaceType);\n+                nameExprs.setName(objectCreationExpr.toString());\n+                nameExprs = (NameExpr) superStatement.getArgument(3);\n+                classOrInterfaceType = parseClassOrInterfaceType(kiePMMLModelClass);\n+                objectCreationExpr = new ObjectCreationExpr();\n+                objectCreationExpr.setType(classOrInterfaceType);\n+                nameExprs.setName(objectCreationExpr.toString());\n+            }\n+        });\n+        final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n+        assignExprs.forEach(assignExpr -> {\n+            final String assignExprName = assignExpr.getTarget().asNameExpr().getNameAsString();\n+            switch (assignExprName) {\n+                case \"weight\":\n+                    assignExpr.setValue(new DoubleLiteralExpr(weight));\n+                    break;\n+                case \"id\":\n+                    assignExpr.setValue(new StringLiteralExpr(segmentName));\n+                    break;\n+                default:\n+                    // NOOP", "originalCommit": "3dbaa45fe0723e7d6e234ae9b2e5b03a79cc9ce7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNTIzMw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r475435233", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-08-24T08:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwODk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactory.java\nindex 6d2579aeb1..6d991bde7f 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLSegmentFactory.java\n\n@@ -47,6 +47,7 @@ import org.slf4j.LoggerFactory;\n \n import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.Constants.UNCHANGED_VARIABLE_IN_CONSTRUCTOR;\n import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n import static org.kie.pmml.compiler.commons.factories.KiePMMLExtensionFactory.getKiePMMLExtensions;\n"}}, {"oid": "dc9d5d3257677aa501ec016844904b8c0b418fdc", "url": "https://github.com/kiegroup/drools/commit/dc9d5d3257677aa501ec016844904b8c0b418fdc", "message": "[DROOLS-5143] Fix as per PR suggestion", "committedDate": "2020-08-24T10:21:49Z", "type": "commit"}, {"oid": "5c8c911ee7bcf8d6cae25c5874a46dbf857f3f1e", "url": "https://github.com/kiegroup/drools/commit/5c8c911ee7bcf8d6cae25c5874a46dbf857f3f1e", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-24T10:22:42Z", "type": "commit"}, {"oid": "e2861db173b80a691d80f98b4c1b727e22d1b557", "url": "https://github.com/kiegroup/drools/commit/e2861db173b80a691d80f98b4c1b727e22d1b557", "message": "[DROOLS-5143] Fixed version", "committedDate": "2020-08-24T10:39:33Z", "type": "commit"}, {"oid": "413eff7c5106c0cc07ae6fb091f5695c16389e96", "url": "https://github.com/kiegroup/drools/commit/413eff7c5106c0cc07ae6fb091f5695c16389e96", "message": "[DROOLS-5143] Fix as per PR suggestion", "committedDate": "2020-08-24T11:16:02Z", "type": "commit"}, {"oid": "b2333bcb163020bb0ba531adf61fd3060e3ef9c1", "url": "https://github.com/kiegroup/drools/commit/b2333bcb163020bb0ba531adf61fd3060e3ef9c1", "message": "[DROOLS-5143] Add unit tests.", "committedDate": "2020-08-25T09:34:14Z", "type": "commit"}, {"oid": "7713dfe6e2614430ae70259f29019c56d0c3c42f", "url": "https://github.com/kiegroup/drools/commit/7713dfe6e2614430ae70259f29019c56d0c3c42f", "message": "[DROOLS-5143] Add unit tests. Excluding models from sonar analysis", "committedDate": "2020-08-25T12:14:38Z", "type": "commit"}, {"oid": "326ee7d69627b9a2e923e4baf38efbc5138e5037", "url": "https://github.com/kiegroup/drools/commit/326ee7d69627b9a2e923e4baf38efbc5138e5037", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-25T12:23:43Z", "type": "commit"}, {"oid": "55b387b49b4efce437cd4ac45ca28e455d9a4a57", "url": "https://github.com/kiegroup/drools/commit/55b387b49b4efce437cd4ac45ca28e455d9a4a57", "message": "[DROOLS-5143] Add unit tests.", "committedDate": "2020-08-25T14:52:40Z", "type": "commit"}, {"oid": "fe293fcf0b965fae08d6f22f35e9b0f461ea6b1a", "url": "https://github.com/kiegroup/drools/commit/fe293fcf0b965fae08d6f22f35e9b0f461ea6b1a", "message": "[DROOLS-5143] Refactored AssignExpr management. Add/refactored tests", "committedDate": "2020-08-26T09:40:02Z", "type": "commit"}, {"oid": "7936ecb4324eb88fc77b724c711462eed1c76255", "url": "https://github.com/kiegroup/drools/commit/7936ecb4324eb88fc77b724c711462eed1c76255", "message": "[DROOLS-5143] Implemented SimpleSetPredicate. Add tests", "committedDate": "2020-08-26T16:41:26Z", "type": "commit"}, {"oid": "30637bd66adeec9a22088560c559a3aed69cf965", "url": "https://github.com/kiegroup/drools/commit/30637bd66adeec9a22088560c559a3aed69cf965", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5143", "committedDate": "2020-08-27T07:37:59Z", "type": "commit"}, {"oid": "52801990de7002c74109aea1c61dd73463246240", "url": "https://github.com/kiegroup/drools/commit/52801990de7002c74109aea1c61dd73463246240", "message": "[DROOLS-5143] Implemented integration test with predicates. Returning \"null\" when MULTIPLE_METHOD_EVALUATION throws KieEnumException. Add tests", "committedDate": "2020-08-27T09:09:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2Mzc1MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478363750", "bodyText": "Do we want to use Java serialization for Exceptions? I think serialization is considered more or less deprecated these days. What is the reason behind this?", "author": "jiripetrlik", "createdAt": "2020-08-27T12:00:37Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "diffHunk": "@@ -20,10 +20,16 @@\n  */\n public class KiePMMLException extends RuntimeException {\n \n+    private static final long serialVersionUID = -6638828457762000141L;", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM4MzUzMg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478383532", "bodyText": "@jiripetrlik\nThrowable (the root of all exception) is Serialiazable - I just add the serialVersionUID as per SONAR complaint", "author": "gitgabrio", "createdAt": "2020-08-27T12:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2Mzc1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NTQ1Nw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478365457", "bodyText": "Is there something like default binary operator? Shouldn't we rather throw an exception.", "author": "jiripetrlik", "createdAt": "2020-08-27T12:03:20Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.BinaryOperator;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);\n+\n+    private final BOOLEAN_OPERATOR booleanOperator;\n+    private BinaryOperator<Boolean> operatorFunction;\n+    protected List<KiePMMLPredicate> kiePMMLPredicates;\n+\n+    protected KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n+        super(name, extensions);\n+        this.booleanOperator = booleanOperator;\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+        return new Builder(extensions, booleanOperator);\n+    }\n+\n+    @Override\n+    public boolean evaluate(Map<String, Object> values) {\n+        Boolean toReturn = null;\n+        for (KiePMMLPredicate kiePMMLPredicate : kiePMMLPredicates) {\n+            toReturn = operatorFunction.apply(toReturn, kiePMMLPredicate.evaluate(values));\n+        }\n+        return toReturn != null && toReturn;\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public BOOLEAN_OPERATOR getBooleanOperator() {\n+        return booleanOperator;\n+    }\n+\n+    public List<KiePMMLPredicate> getKiePMMLPredicates() {\n+        return kiePMMLPredicates;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"KiePMMLCompoundPredicate{\" +\n+                \"booleanOperator=\" + booleanOperator +\n+                \", operatorFunction=\" + operatorFunction +\n+                \", kiePMMLPredicates=\" + kiePMMLPredicates +\n+                \", extensions=\" + extensions +\n+                \", id='\" + id + '\\'' +\n+                \", parentId='\" + parentId + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+        KiePMMLCompoundPredicate that = (KiePMMLCompoundPredicate) o;\n+        return booleanOperator == that.booleanOperator &&\n+                Objects.equals(operatorFunction, that.operatorFunction) &&\n+                Objects.equals(kiePMMLPredicates, that.kiePMMLPredicates);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), booleanOperator, operatorFunction, kiePMMLPredicates);\n+    }\n+\n+    public static class Builder extends KiePMMLPredicate.Builder<KiePMMLCompoundPredicate> {\n+\n+        private Builder(List<KiePMMLExtension> extensions, BOOLEAN_OPERATOR booleanOperator) {\n+            super(\"CompoundPredicate-\", () -> new KiePMMLCompoundPredicate(\"CompoundPredicate\", extensions, booleanOperator));\n+            toBuild.operatorFunction = getInnerBinaryOperator(booleanOperator);\n+        }\n+\n+        public KiePMMLCompoundPredicate.Builder withKiePMMLPredicates(List<KiePMMLPredicate> kiePMMLPredicates) {\n+            kiePMMLPredicates.forEach(predicate -> predicate.setParentId(toBuild.id));\n+            toBuild.kiePMMLPredicates = kiePMMLPredicates;\n+            return this;\n+        }\n+\n+        private BinaryOperator<Boolean> getInnerBinaryOperator(BOOLEAN_OPERATOR booleanOperator) {\n+            switch (booleanOperator) {\n+                // logic here is\n+                // first boolean may be null (initial evaluation) so we start taking the second boolean\n+                case OR:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean || aBoolean2 : aBoolean2;\n+                case AND:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean && aBoolean2 : aBoolean2;\n+                case XOR:\n+                    return (aBoolean, aBoolean2) -> aBoolean != null ? aBoolean ^ aBoolean2 : aBoolean2;\n+                case SURROGATE:\n+                    // TODO {gcardosi} DROOLS-5594\n+                default:\n+                    return (aBoolean, aBoolean2) -> aBoolean;", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5MDQwNw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478390407", "bodyText": "@jiripetrlik\nRemoved - throwing exceptions", "author": "gitgabrio", "createdAt": "2020-08-27T12:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dbd29e5d777b274af95de84160de6a86c9e11c7d", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\nindex 7fa74e377c..91567c2581 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicate.java\n\n@@ -34,7 +34,7 @@ public class KiePMMLCompoundPredicate extends KiePMMLPredicate {\n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLCompoundPredicate.class);\n \n     private final BOOLEAN_OPERATOR booleanOperator;\n-    private BinaryOperator<Boolean> operatorFunction;\n+    protected BinaryOperator<Boolean> operatorFunction;\n     protected List<KiePMMLPredicate> kiePMMLPredicates;\n \n     protected KiePMMLCompoundPredicate(final String name, final List<KiePMMLExtension> extensions, final BOOLEAN_OPERATOR booleanOperator) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NjUwNg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478366506", "bodyText": "Do we serialize this?", "author": "jiripetrlik", "createdAt": "2020-08-27T12:05:14Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLSimplePredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5MDkxNQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478390915", "bodyText": "@jiripetrlik\nremoved", "author": "gitgabrio", "createdAt": "2020-08-27T12:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NjUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "fd82983818c40b772eaf79312d6ade59205062be", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\nindex 2891ec4f4b..c45da79e7d 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\n\n@@ -19,17 +19,19 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLExtension;\n import org.kie.pmml.commons.model.enums.OPERATOR;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR.SURROGATE;\n+\n /**\n  * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n  */\n public class KiePMMLSimplePredicate extends KiePMMLPredicate {\n \n-    private static final long serialVersionUID = -1996390505352151403L;\n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLSimplePredicate.class);\n \n     private final OPERATOR operator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NjkwNw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478366907", "bodyText": "Why default true?", "author": "jiripetrlik", "createdAt": "2020-08-27T12:05:54Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n+ */\n+public class KiePMMLSimplePredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLSimplePredicate.class);\n+\n+    private final OPERATOR operator;\n+    protected Object value;\n+\n+    protected KiePMMLSimplePredicate(final String name, final List<KiePMMLExtension> extensions, final OPERATOR operator) {\n+        super(name, extensions);\n+        this.operator = operator;\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions, OPERATOR operator) {\n+        return new Builder(name, extensions, operator);\n+    }\n+\n+    @Override\n+    public boolean evaluate(Map<String, Object> values) {\n+        boolean toReturn = false;\n+        if (values.containsKey(name)) {\n+            logger.debug(\"found matching parameter, evaluating... \");\n+            toReturn = evaluation(values.get(name));\n+        }\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public OPERATOR getOperator() {\n+        return operator;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"KiePMMLSimplePredicate{\" +\n+                \"operator=\" + operator +\n+                \", name='\" + name + '\\'' +\n+                \", value=\" + value +\n+                \", extensions=\" + extensions +\n+                \", id='\" + id + '\\'' +\n+                \", parentId='\" + parentId + '\\'' +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        if (!super.equals(o)) {\n+            return false;\n+        }\n+        KiePMMLSimplePredicate that = (KiePMMLSimplePredicate) o;\n+        return operator == that.operator &&\n+                Objects.equals(name, that.name) &&\n+                Objects.equals(value, that.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), operator, name, value);\n+    }\n+\n+    protected boolean evaluation(Object inputValue) {\n+        switch (operator) {\n+            case EQUAL:\n+                return value.equals(inputValue);\n+            case NOT_EQUAL:\n+                return !value.equals(inputValue);\n+            case LESS_THAN:\n+                if (inputValue instanceof Number && value instanceof Number) {\n+                    return ((Number) inputValue).doubleValue() < ((Number) value).doubleValue();\n+                } else {\n+                    return false;\n+                }\n+            case LESS_OR_EQUAL:\n+                if (inputValue instanceof Number && value instanceof Number) {\n+                    return ((Number) inputValue).doubleValue() <= ((Number) value).doubleValue();\n+                } else {\n+                    return false;\n+                }\n+            case GREATER_THAN:\n+                if (inputValue instanceof Number && value instanceof Number) {\n+                    return ((Number) inputValue).doubleValue() > ((Number) value).doubleValue();\n+                } else {\n+                    return false;\n+                }\n+            case GREATER_OR_EQUAL:\n+                if (inputValue instanceof Number && value instanceof Number) {\n+                    return ((Number) inputValue).doubleValue() >= ((Number) value).doubleValue();\n+                } else {\n+                    return false;\n+                }\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                return true;", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5Njk4MA==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478396980", "bodyText": "@jiripetrlik\nRemoved - throwing exceptions\nsee https://issues.redhat.com/browse/DROOLS-5604", "author": "gitgabrio", "createdAt": "2020-08-27T12:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NjkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "fd82983818c40b772eaf79312d6ade59205062be", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\nindex 2891ec4f4b..c45da79e7d 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLSimplePredicate.java\n\n@@ -19,17 +19,19 @@ import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n import org.kie.pmml.commons.model.KiePMMLExtension;\n import org.kie.pmml.commons.model.enums.OPERATOR;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR.SURROGATE;\n+\n /**\n  * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate>SimplePredicate</a>\n  */\n public class KiePMMLSimplePredicate extends KiePMMLPredicate {\n \n-    private static final long serialVersionUID = -1996390505352151403L;\n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLSimplePredicate.class);\n \n     private final OPERATOR operator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NzE3Mw==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478367173", "bodyText": "Remove new lines.", "author": "jiripetrlik", "createdAt": "2020-08-27T12:06:24Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLTruePredicate.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_True>True</a>\n+ */\n+public class KiePMMLTruePredicate extends KiePMMLPredicate {\n+\n+    private static final long serialVersionUID = -1996390505352151403L;\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTruePredicate.class);\n+\n+    private static final String TRUE = \"True\";\n+\n+    protected KiePMMLTruePredicate(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(List<KiePMMLExtension> extensions) {\n+        return new Builder(extensions);\n+    }\n+", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5Nzc5OQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478397799", "bodyText": "@jiripetrlik\ndone", "author": "gitgabrio", "createdAt": "2020-08-27T12:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NzE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fd82983818c40b772eaf79312d6ade59205062be", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLTruePredicate.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLTruePredicate.java\nindex 2ee1c7160d..a4a71a0e3c 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLTruePredicate.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/predicates/KiePMMLTruePredicate.java\n\n@@ -28,7 +28,6 @@ import org.slf4j.LoggerFactory;\n  */\n public class KiePMMLTruePredicate extends KiePMMLPredicate {\n \n-    private static final long serialVersionUID = -1996390505352151403L;\n     private static final Logger logger = LoggerFactory.getLogger(KiePMMLTruePredicate.class);\n \n     private static final String TRUE = \"True\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2Nzg5NQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478367895", "bodyText": "Remove new lines.", "author": "jiripetrlik", "createdAt": "2020-08-27T12:07:36Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.commons.model.predicates;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.enums.ARRAY_TYPE;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.commons.model.enums.IN_NOTIN;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class KiePMMLCompoundPredicateTest {\n+\n+    private final String COMPOUND_PREDICATE_NAME = \"COMPOUNDPREDICATENAME\";\n+    private final String SIMPLE_SET_PREDICATE_STRING_NAME = \"SIMPLESETPREDICATESTRINGNAME\";\n+    private final String SIMPLE_SET_PREDICATE_INT_NAME = \"SIMPLESETPREDICATEINTNAME\";\n+\n+    @Test\n+    public void evaluateCompoundPredicateSinglePredicate() {\n+        ARRAY_TYPE arrayType = ARRAY_TYPE.STRING;\n+        List<Object> stringValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateString = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_STRING_NAME,\n+                                                                                                 stringValues,\n+                                                                                                 arrayType,\n+                                                                                                 IN_NOTIN.IN);\n+        KiePMMLCompoundPredicate kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.AND, Collections.singletonList(kiePMMLSimpleSetPredicateString));\n+        Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n+        assertFalse(kiePMMLCompoundPredicate.evaluate(inputData));\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, stringValues.get(0));\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        arrayType = ARRAY_TYPE.INT;\n+        List<Object> intValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateInt = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_INT_NAME,\n+                                                                                              intValues,\n+                                                                                              arrayType,\n+                                                                                              IN_NOTIN.NOT_IN);\n+        kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.AND, Collections.singletonList(kiePMMLSimpleSetPredicateInt));\n+        inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n+        assertFalse(kiePMMLCompoundPredicate.evaluate(inputData));\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, \"234\");\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+    }\n+\n+    @Test\n+    public void evaluateCompoundPredicateAnd() {\n+        ARRAY_TYPE arrayType = ARRAY_TYPE.STRING;\n+        List<Object> stringValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateString = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_STRING_NAME,\n+                                                                                                 stringValues,\n+                                                                                                 arrayType,\n+                                                                                                 IN_NOTIN.IN);\n+        arrayType = ARRAY_TYPE.INT;\n+        List<Object> intValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateInt = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_INT_NAME,\n+                                                                                              intValues,\n+                                                                                              arrayType,\n+                                                                                              IN_NOTIN.NOT_IN);\n+        KiePMMLCompoundPredicate kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.AND,\n+                                                                                        Arrays.asList(kiePMMLSimpleSetPredicateString, kiePMMLSimpleSetPredicateInt));\n+        Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, stringValues.get(0));\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n+        assertFalse(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, \"234\");\n+        assertFalse(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, stringValues.get(0));\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, \"234\");\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+    }\n+\n+    @Test\n+    public void evaluateCompoundPredicateOr() {\n+        ARRAY_TYPE arrayType = ARRAY_TYPE.STRING;\n+        List<Object> stringValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateString = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_STRING_NAME,\n+                                                                                                 stringValues,\n+                                                                                                 arrayType,\n+                                                                                                 IN_NOTIN.IN);\n+        arrayType = ARRAY_TYPE.INT;\n+        List<Object> intValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateInt = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_INT_NAME,\n+                                                                                              intValues,\n+                                                                                              arrayType,\n+                                                                                              IN_NOTIN.NOT_IN);\n+        KiePMMLCompoundPredicate kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.OR,\n+                                                                                        Arrays.asList(kiePMMLSimpleSetPredicateString, kiePMMLSimpleSetPredicateInt));\n+        Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n+        assertFalse(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, stringValues.get(0));\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, \"234\");\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+\n+        inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, stringValues.get(0));\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, \"234\");\n+        assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n+    }\n+", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM5ODMwMQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478398301", "bodyText": "@jiripetrlik\ndone", "author": "gitgabrio", "createdAt": "2020-08-27T12:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2Nzg5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd82983818c40b772eaf79312d6ade59205062be", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java b/kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java\nindex 1d4694b2d9..0701b5538c 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/test/java/org/kie/pmml/commons/model/predicates/KiePMMLCompoundPredicateTest.java\n\n@@ -137,7 +137,27 @@ public class KiePMMLCompoundPredicateTest {\n         assertTrue(kiePMMLCompoundPredicate.evaluate(inputData));\n     }\n \n-\n+    @Test(expected = IllegalArgumentException.class)\n+    public void evaluateCompoundPredicateSurrogate() {\n+        ARRAY_TYPE arrayType = ARRAY_TYPE.STRING;\n+        List<Object> stringValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateString = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_STRING_NAME,\n+                                                                                                 stringValues,\n+                                                                                                 arrayType,\n+                                                                                                 IN_NOTIN.IN);\n+        arrayType = ARRAY_TYPE.INT;\n+        List<Object> intValues = getObjects(arrayType, 4);\n+        KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicateInt = getKiePMMLSimpleSetPredicate(SIMPLE_SET_PREDICATE_INT_NAME,\n+                                                                                              intValues,\n+                                                                                              arrayType,\n+                                                                                              IN_NOTIN.NOT_IN);\n+        KiePMMLCompoundPredicate kiePMMLCompoundPredicate = getKiePMMLCompoundPredicate(BOOLEAN_OPERATOR.SURROGATE,\n+                                                                                        Arrays.asList(kiePMMLSimpleSetPredicateString, kiePMMLSimpleSetPredicateInt));\n+        Map<String, Object> inputData = new HashMap<>();\n+        inputData.put(SIMPLE_SET_PREDICATE_STRING_NAME, \"NOT\");\n+        inputData.put(SIMPLE_SET_PREDICATE_INT_NAME, intValues.get(0));\n+        kiePMMLCompoundPredicate.evaluate(inputData);\n+    }\n \n     private KiePMMLCompoundPredicate getKiePMMLCompoundPredicate(final BOOLEAN_OPERATOR booleanOperator,\n                                                                    final List<KiePMMLPredicate> kiePMMLPredicates) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2OTQxNQ==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478369415", "bodyText": "Can we make these static methods private?", "author": "jiripetrlik", "createdAt": "2020-08-27T12:10:11Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.expr.AssignExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Array;\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.DataField;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.dmg.pmml.SimpleSetPredicate;\n+import org.dmg.pmml.True;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.enums.ARRAY_TYPE;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.enums.IN_NOTIN;\n+import org.kie.pmml.commons.model.enums.OPERATOR;\n+import org.kie.pmml.commons.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLFalsePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLSimplePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLSimpleSetPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLTruePredicate;\n+import org.kie.pmml.compiler.commons.utils.CommonCodegenUtils;\n+import org.kie.pmml.compiler.commons.utils.JavaParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.Constants.MISSING_VARIABLE_IN_BODY;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFullClassName;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.setConstructorSuperNameInvocation;\n+\n+public class KiePMMLPredicateFactory {\n+\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLSimplePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE = \"KiePMMLSimplePredicateTemplate\";\n+    static final String KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE_JAVA = \"KiePMMLSimpleSetPredicateTemplate.tmpl\";\n+    static final String KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE = \"KiePMMLSimpleSetPredicateTemplate\";\n+    static final String KIE_PMML_COMPOUND_PREDICATE_TEMPLATE_JAVA = \"KiePMMLCompoundPredicateTemplate.tmpl\";\n+    static final String KIE_PMML_COMPOUND_PREDICATE_TEMPLATE = \"KiePMMLCompoundPredicateTemplate\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLTruePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE = \"KiePMMLTruePredicateTemplate\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLFalsePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE = \"KiePMMLFalsePredicateTemplate\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLPredicateFactory.class.getName());\n+\n+    private KiePMMLPredicateFactory() {\n+    }\n+\n+    public static List<KiePMMLPredicate> getPredicates(List<Predicate> predicates, DataDictionary dataDictionary) {\n+        logger.info(\"getPredicates {}\", predicates);\n+        return predicates.stream().map(predicate -> getPredicate(predicate, dataDictionary)).collect(Collectors.toList());\n+    }\n+\n+    public static KiePMMLPredicate getPredicate(Predicate predicate, DataDictionary dataDictionary) {\n+        logger.info(\"getPredicate {}\", predicate);\n+        if (predicate instanceof SimplePredicate) {\n+            final DataType dataType = dataDictionary.getDataFields().stream()\n+                    .filter(dataField -> dataField.getName().getValue().equals(((SimplePredicate) predicate).getField().getValue()))\n+                    .map(DataField::getDataType)\n+                    .findFirst()\n+                    .orElseThrow(() -> new KiePMMLException(\"Failed to find DataField for predicate \" + ((SimplePredicate) predicate).getField().getValue()));\n+            return getKiePMMLSimplePredicate((SimplePredicate) predicate, dataType);\n+        } else if (predicate instanceof SimpleSetPredicate) {\n+            return getKiePMMLSimpleSetPredicate((SimpleSetPredicate) predicate);\n+        } else if (predicate instanceof CompoundPredicate) {\n+            return getKiePMMLCompoundPredicate((CompoundPredicate) predicate, dataDictionary);\n+        } else if (predicate instanceof True) {\n+            return getKiePMMLTruePredicate();\n+        } else if (predicate instanceof False) {\n+            return getKiePMMLFalsePredicate();\n+        } else {\n+            throw new KiePMMLException(\"Predicate of type \" + predicate.getClass().getName() + \" not managed, yet\");\n+        }\n+    }\n+\n+    public static KiePMMLSimplePredicate getKiePMMLSimplePredicate(SimplePredicate predicate, DataType dataType) {\n+        return KiePMMLSimplePredicate.builder(predicate.getField().getValue(), Collections.emptyList(),\n+                                              OPERATOR.byName(predicate.getOperator().value()))\n+                .withValue(getActualValue(predicate.getValue(), dataType))\n+                .build();\n+    }\n+\n+    public static KiePMMLSimpleSetPredicate getKiePMMLSimpleSetPredicate(SimpleSetPredicate predicate) {\n+        List<Object> values = getObjectsFromArray(predicate.getArray());\n+        return KiePMMLSimpleSetPredicate.builder(predicate.getField().getValue(),\n+                                                 Collections.emptyList(),\n+                                                 ARRAY_TYPE.byName(predicate.getArray().getType().value()),\n+                                                 IN_NOTIN.byName(predicate.getBooleanOperator().value()))\n+                .withValues(values)\n+                .build();\n+    }\n+\n+    public static KiePMMLCompoundPredicate getKiePMMLCompoundPredicate(CompoundPredicate predicate,\n+                                                                       DataDictionary dataDictionary) {\n+        return KiePMMLCompoundPredicate.builder(Collections.emptyList(),\n+                                                BOOLEAN_OPERATOR.byName(predicate.getBooleanOperator().value()))\n+                .withKiePMMLPredicates(getPredicates(predicate.getPredicates(), dataDictionary))\n+                .build();\n+    }\n+\n+    public static KiePMMLTruePredicate getKiePMMLTruePredicate() {\n+        return KiePMMLTruePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static KiePMMLFalsePredicate getKiePMMLFalsePredicate() {\n+        return KiePMMLFalsePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static Map<String, String> getPredicateSourcesMap(final KiePMMLPredicate kiePMMLPredicate,\n+                                                             final String packageName) {\n+        logger.info(\"getPredicateSourcesMap {}\", kiePMMLPredicate);\n+        if (kiePMMLPredicate instanceof KiePMMLSimplePredicate) {\n+            return getKiePMMLSimplePredicateSourcesMap((KiePMMLSimplePredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLSimpleSetPredicate) {\n+            return getKiePMMLSimpleSetPredicateSourcesMap((KiePMMLSimpleSetPredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLCompoundPredicate) {\n+            return getKiePMMLCompoundPredicateSourcesMap((KiePMMLCompoundPredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLTruePredicate) {\n+            return getKiePMMLTruePredicateSourcesMap((KiePMMLTruePredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLFalsePredicate) {\n+            return getKiePMMLFalsePredicateSourcesMap((KiePMMLFalsePredicate) kiePMMLPredicate, packageName);\n+        } else {\n+            throw new KiePMMLException(\"Predicate of type \" + kiePMMLPredicate.getClass().getName() + \" not managed, \" +\n+                                               \"yet\");\n+        }\n+    }\n+\n+    static Map<String, String> getKiePMMLSimplePredicateSourcesMap(final KiePMMLSimplePredicate kiePMMLSimplePredicate, final String packageName) {", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQwMDA4Ng==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478400086", "bodyText": "@jiripetrlik\nWherever I put the  default (package) modifier, it is for testing purpose", "author": "gitgabrio", "createdAt": "2020-08-27T13:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2OTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dbd29e5d777b274af95de84160de6a86c9e11c7d", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\nindex 70afdc3f50..4884a340cd 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n\n@@ -28,6 +28,7 @@ import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.NodeList;\n import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.AssignExpr;\n import com.github.javaparser.ast.expr.Expression;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzNg==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478370136", "bodyText": "Please consider to add some default with exception,", "author": "jiripetrlik", "createdAt": "2020-08-27T12:11:24Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java", "diffHunk": "@@ -0,0 +1,403 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.github.javaparser.ast.CompilationUnit;\n+import com.github.javaparser.ast.NodeList;\n+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n+import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.expr.AssignExpr;\n+import com.github.javaparser.ast.expr.Expression;\n+import com.github.javaparser.ast.expr.MethodCallExpr;\n+import com.github.javaparser.ast.expr.NameExpr;\n+import com.github.javaparser.ast.expr.ObjectCreationExpr;\n+import com.github.javaparser.ast.expr.StringLiteralExpr;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt;\n+import com.github.javaparser.ast.stmt.ExpressionStmt;\n+import com.github.javaparser.ast.type.ClassOrInterfaceType;\n+import org.dmg.pmml.Array;\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.DataField;\n+import org.dmg.pmml.DataType;\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.dmg.pmml.SimpleSetPredicate;\n+import org.dmg.pmml.True;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.enums.ARRAY_TYPE;\n+import org.kie.pmml.commons.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.commons.model.enums.IN_NOTIN;\n+import org.kie.pmml.commons.model.enums.OPERATOR;\n+import org.kie.pmml.commons.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLFalsePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLSimplePredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLSimpleSetPredicate;\n+import org.kie.pmml.commons.model.predicates.KiePMMLTruePredicate;\n+import org.kie.pmml.compiler.commons.utils.CommonCodegenUtils;\n+import org.kie.pmml.compiler.commons.utils.JavaParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static com.github.javaparser.StaticJavaParser.parseClassOrInterfaceType;\n+import static org.kie.pmml.commons.Constants.MISSING_DEFAULT_CONSTRUCTOR;\n+import static org.kie.pmml.commons.Constants.MISSING_VARIABLE_IN_BODY;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedClassName;\n+import static org.kie.pmml.commons.utils.KiePMMLModelUtils.getSanitizedPackageName;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.MAIN_CLASS_NOT_FOUND;\n+import static org.kie.pmml.compiler.commons.utils.JavaParserUtils.getFullClassName;\n+import static org.kie.pmml.compiler.commons.utils.KiePMMLModelFactoryUtils.setConstructorSuperNameInvocation;\n+\n+public class KiePMMLPredicateFactory {\n+\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLSimplePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_SIMPLE_PREDICATE_TEMPLATE = \"KiePMMLSimplePredicateTemplate\";\n+    static final String KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE_JAVA = \"KiePMMLSimpleSetPredicateTemplate.tmpl\";\n+    static final String KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE = \"KiePMMLSimpleSetPredicateTemplate\";\n+    static final String KIE_PMML_COMPOUND_PREDICATE_TEMPLATE_JAVA = \"KiePMMLCompoundPredicateTemplate.tmpl\";\n+    static final String KIE_PMML_COMPOUND_PREDICATE_TEMPLATE = \"KiePMMLCompoundPredicateTemplate\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLTruePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_TRUE_PREDICATE_TEMPLATE = \"KiePMMLTruePredicateTemplate\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE_JAVA = \"KiePMMLFalsePredicateTemplate.tmpl\";\n+    static final String KIE_PMML_FALSE_PREDICATE_TEMPLATE = \"KiePMMLFalsePredicateTemplate\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLPredicateFactory.class.getName());\n+\n+    private KiePMMLPredicateFactory() {\n+    }\n+\n+    public static List<KiePMMLPredicate> getPredicates(List<Predicate> predicates, DataDictionary dataDictionary) {\n+        logger.info(\"getPredicates {}\", predicates);\n+        return predicates.stream().map(predicate -> getPredicate(predicate, dataDictionary)).collect(Collectors.toList());\n+    }\n+\n+    public static KiePMMLPredicate getPredicate(Predicate predicate, DataDictionary dataDictionary) {\n+        logger.info(\"getPredicate {}\", predicate);\n+        if (predicate instanceof SimplePredicate) {\n+            final DataType dataType = dataDictionary.getDataFields().stream()\n+                    .filter(dataField -> dataField.getName().getValue().equals(((SimplePredicate) predicate).getField().getValue()))\n+                    .map(DataField::getDataType)\n+                    .findFirst()\n+                    .orElseThrow(() -> new KiePMMLException(\"Failed to find DataField for predicate \" + ((SimplePredicate) predicate).getField().getValue()));\n+            return getKiePMMLSimplePredicate((SimplePredicate) predicate, dataType);\n+        } else if (predicate instanceof SimpleSetPredicate) {\n+            return getKiePMMLSimpleSetPredicate((SimpleSetPredicate) predicate);\n+        } else if (predicate instanceof CompoundPredicate) {\n+            return getKiePMMLCompoundPredicate((CompoundPredicate) predicate, dataDictionary);\n+        } else if (predicate instanceof True) {\n+            return getKiePMMLTruePredicate();\n+        } else if (predicate instanceof False) {\n+            return getKiePMMLFalsePredicate();\n+        } else {\n+            throw new KiePMMLException(\"Predicate of type \" + predicate.getClass().getName() + \" not managed, yet\");\n+        }\n+    }\n+\n+    public static KiePMMLSimplePredicate getKiePMMLSimplePredicate(SimplePredicate predicate, DataType dataType) {\n+        return KiePMMLSimplePredicate.builder(predicate.getField().getValue(), Collections.emptyList(),\n+                                              OPERATOR.byName(predicate.getOperator().value()))\n+                .withValue(getActualValue(predicate.getValue(), dataType))\n+                .build();\n+    }\n+\n+    public static KiePMMLSimpleSetPredicate getKiePMMLSimpleSetPredicate(SimpleSetPredicate predicate) {\n+        List<Object> values = getObjectsFromArray(predicate.getArray());\n+        return KiePMMLSimpleSetPredicate.builder(predicate.getField().getValue(),\n+                                                 Collections.emptyList(),\n+                                                 ARRAY_TYPE.byName(predicate.getArray().getType().value()),\n+                                                 IN_NOTIN.byName(predicate.getBooleanOperator().value()))\n+                .withValues(values)\n+                .build();\n+    }\n+\n+    public static KiePMMLCompoundPredicate getKiePMMLCompoundPredicate(CompoundPredicate predicate,\n+                                                                       DataDictionary dataDictionary) {\n+        return KiePMMLCompoundPredicate.builder(Collections.emptyList(),\n+                                                BOOLEAN_OPERATOR.byName(predicate.getBooleanOperator().value()))\n+                .withKiePMMLPredicates(getPredicates(predicate.getPredicates(), dataDictionary))\n+                .build();\n+    }\n+\n+    public static KiePMMLTruePredicate getKiePMMLTruePredicate() {\n+        return KiePMMLTruePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static KiePMMLFalsePredicate getKiePMMLFalsePredicate() {\n+        return KiePMMLFalsePredicate.builder(Collections.emptyList())\n+                .build();\n+    }\n+\n+    public static Map<String, String> getPredicateSourcesMap(final KiePMMLPredicate kiePMMLPredicate,\n+                                                             final String packageName) {\n+        logger.info(\"getPredicateSourcesMap {}\", kiePMMLPredicate);\n+        if (kiePMMLPredicate instanceof KiePMMLSimplePredicate) {\n+            return getKiePMMLSimplePredicateSourcesMap((KiePMMLSimplePredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLSimpleSetPredicate) {\n+            return getKiePMMLSimpleSetPredicateSourcesMap((KiePMMLSimpleSetPredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLCompoundPredicate) {\n+            return getKiePMMLCompoundPredicateSourcesMap((KiePMMLCompoundPredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLTruePredicate) {\n+            return getKiePMMLTruePredicateSourcesMap((KiePMMLTruePredicate) kiePMMLPredicate, packageName);\n+        } else if (kiePMMLPredicate instanceof KiePMMLFalsePredicate) {\n+            return getKiePMMLFalsePredicateSourcesMap((KiePMMLFalsePredicate) kiePMMLPredicate, packageName);\n+        } else {\n+            throw new KiePMMLException(\"Predicate of type \" + kiePMMLPredicate.getClass().getName() + \" not managed, \" +\n+                                               \"yet\");\n+        }\n+    }\n+\n+    static Map<String, String> getKiePMMLSimplePredicateSourcesMap(final KiePMMLSimplePredicate kiePMMLSimplePredicate, final String packageName) {\n+        String className = getSanitizedClassName(kiePMMLSimplePredicate.getName());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName,\n+                                                                                 KIE_PMML_SIMPLE_PREDICATE_TEMPLATE_JAVA, KIE_PMML_SIMPLE_PREDICATE_TEMPLATE);\n+        ClassOrInterfaceDeclaration predicateTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = predicateTemplate.getDefaultConstructor()\n+                .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR,\n+                                                                              predicateTemplate.getName())));\n+        setSimplePredicateConstructor(className,\n+                                      kiePMMLSimplePredicate.getName(),\n+                                      constructorDeclaration,\n+                                      kiePMMLSimplePredicate.getOperator(),\n+                                      kiePMMLSimplePredicate.getValue());\n+        return Collections.singletonMap(getFullClassName(cloneCU), cloneCU.toString());\n+    }\n+\n+    static Map<String, String> getKiePMMLSimpleSetPredicateSourcesMap(final KiePMMLSimpleSetPredicate kiePMMLSimpleSetPredicate,\n+                                                                      final String packageName) {\n+        String className = getSanitizedClassName(kiePMMLSimpleSetPredicate.getName());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName,\n+                                                                                 KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE_JAVA, KIE_PMML_SIMPLE_SET_PREDICATE_TEMPLATE);\n+        ClassOrInterfaceDeclaration predicateTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = predicateTemplate.getDefaultConstructor()\n+                .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR,\n+                                                                              predicateTemplate.getName())));\n+        setSimpleSetPredicateConstructor(className,\n+                                         kiePMMLSimpleSetPredicate.getName(),\n+                                         constructorDeclaration,\n+                                         kiePMMLSimpleSetPredicate.getArrayType(),\n+                                         kiePMMLSimpleSetPredicate.getInNotIn(),\n+                                         kiePMMLSimpleSetPredicate.getValues());\n+        return Collections.singletonMap(getFullClassName(cloneCU), cloneCU.toString());\n+    }\n+\n+    static Map<String, String> getKiePMMLCompoundPredicateSourcesMap(final KiePMMLCompoundPredicate kiePMMLCompoundPredicate, final String packageName) {\n+        String className = getSanitizedClassName(kiePMMLCompoundPredicate.getName());\n+        final Map<String, String> toReturn = new HashMap<>();\n+        if (kiePMMLCompoundPredicate.getKiePMMLPredicates() != null) {\n+            kiePMMLCompoundPredicate.getKiePMMLPredicates().forEach(kiePMMLPredicate -> toReturn.putAll(getPredicateSourcesMap(kiePMMLPredicate, packageName)));\n+        }\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName,\n+                                                                                 KIE_PMML_COMPOUND_PREDICATE_TEMPLATE_JAVA, KIE_PMML_COMPOUND_PREDICATE_TEMPLATE);\n+        ClassOrInterfaceDeclaration predicateTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = predicateTemplate.getDefaultConstructor()\n+                .orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR,\n+                                                                              predicateTemplate.getName())));\n+        Set<String> predicatesClasses = new HashSet<>();\n+        if (kiePMMLCompoundPredicate.getKiePMMLPredicates() != null) {\n+            predicatesClasses = kiePMMLCompoundPredicate.getKiePMMLPredicates().stream()\n+                    .map(predicate ->  packageName + \".\" + getSanitizedClassName(predicate.getName()))\n+                    .collect(Collectors.toSet());\n+        }\n+        if (!toReturn.keySet().containsAll(predicatesClasses)) {\n+            String missingClasses = String.join(\", \", predicatesClasses);\n+            throw new KiePMMLException(\"Expected generated class \" + missingClasses + \" not found\");\n+        }\n+        setCompoundPredicateConstructor(className,\n+                                        kiePMMLCompoundPredicate.getName(),\n+                                        constructorDeclaration,\n+                                        kiePMMLCompoundPredicate.getBooleanOperator(),\n+                                        predicatesClasses);\n+        toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n+        return toReturn;\n+    }\n+\n+    static Map<String, String> getKiePMMLTruePredicateSourcesMap(final KiePMMLTruePredicate kiePMMLTruePredicate,\n+                                                                 final String packageName) {\n+        String className = getSanitizedClassName(kiePMMLTruePredicate.getName());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName,\n+                                                                                 KIE_PMML_TRUE_PREDICATE_TEMPLATE_JAVA, KIE_PMML_TRUE_PREDICATE_TEMPLATE);\n+        ClassOrInterfaceDeclaration predicateTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = predicateTemplate.getDefaultConstructor()\n+                .orElseThrow(() -> new KiePMMLInternalException(String.format(\n+                        MISSING_DEFAULT_CONSTRUCTOR, predicateTemplate.getName())));\n+        setTrueFalsePredicateConstructor(className,\n+                                         kiePMMLTruePredicate.getName(),\n+                                         constructorDeclaration);\n+        return Collections.singletonMap(getFullClassName(cloneCU), cloneCU.toString());\n+    }\n+\n+    static Map<String, String> getKiePMMLFalsePredicateSourcesMap(final KiePMMLFalsePredicate kiePMMLFalsePredicate,\n+                                                                  final String packageName) {\n+        String className = getSanitizedClassName(kiePMMLFalsePredicate.getName());\n+        CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, packageName,\n+                                                                                 KIE_PMML_FALSE_PREDICATE_TEMPLATE_JAVA, KIE_PMML_FALSE_PREDICATE_TEMPLATE);\n+        ClassOrInterfaceDeclaration predicateTemplate = cloneCU.getClassByName(className)\n+                .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        final ConstructorDeclaration constructorDeclaration = predicateTemplate.getDefaultConstructor()\n+                .orElseThrow(() -> new KiePMMLInternalException(String.format(\n+                        MISSING_DEFAULT_CONSTRUCTOR, predicateTemplate.getName())));\n+        setTrueFalsePredicateConstructor(className,\n+                                         kiePMMLFalsePredicate.getName(),\n+                                         constructorDeclaration);\n+        return Collections.singletonMap(getFullClassName(cloneCU), cloneCU.toString());\n+    }\n+\n+    static void setSimplePredicateConstructor(final String generatedClassName,\n+                                              final String predicateName,\n+                                              final ConstructorDeclaration constructorDeclaration,\n+                                              final OPERATOR operator,\n+                                              final Object value) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, predicateName);\n+        final BlockStmt body = constructorDeclaration.getBody();\n+        body.getStatements().iterator().forEachRemaining(statement -> {\n+            if (statement instanceof ExplicitConstructorInvocationStmt) {\n+                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n+                NameExpr nameExpr = (NameExpr) superStatement.getArgument(2);\n+                nameExpr.setName(operator.getClass().getCanonicalName() + \".\" + operator.name());\n+            }\n+        });\n+        Expression expression = value instanceof String ? new StringLiteralExpr((String) value) : new NameExpr(value.toString());\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"value\", expression);\n+    }\n+\n+    static void setSimpleSetPredicateConstructor(final String generatedClassName,\n+                                                 final String predicateName,\n+                                                 final ConstructorDeclaration constructorDeclaration,\n+                                                 final ARRAY_TYPE arrayType,\n+                                                 final IN_NOTIN inNotIn,\n+                                                 final List<Object> values) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, predicateName);\n+        final BlockStmt body = constructorDeclaration.getBody();\n+        body.getStatements().iterator().forEachRemaining(statement -> {\n+            if (statement instanceof ExplicitConstructorInvocationStmt) {\n+                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n+                NameExpr nameExpr = (NameExpr) superStatement.getArgument(2);\n+                nameExpr.setName(arrayType.getClass().getCanonicalName() + \".\" + arrayType.name());\n+                nameExpr = (NameExpr) superStatement.getArgument(3);\n+                nameExpr.setName(inNotIn.getClass().getCanonicalName() + \".\" + inNotIn.name());\n+            }\n+        });\n+        AssignExpr assignExpr = CommonCodegenUtils\n+                .getAssignExpression(body, \"values\")\n+                .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_IN_BODY, \"values\", body)));\n+        ClassOrInterfaceType arrayClass = parseClassOrInterfaceType(ArrayList.class.getName());\n+        ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+        objectCreationExpr.setType(arrayClass);\n+        assignExpr.setValue(objectCreationExpr);\n+        for (Object value : values) {\n+            Expression valueExpression;\n+            if (arrayType == ARRAY_TYPE.STRING) {\n+                valueExpression = new StringLiteralExpr(value.toString());\n+            } else {\n+                valueExpression = new NameExpr(value.toString());\n+            }\n+            NodeList<Expression> arguments = NodeList.nodeList(valueExpression);\n+            MethodCallExpr methodCallExpr = new MethodCallExpr();\n+            methodCallExpr.setScope(assignExpr.getTarget().asNameExpr());\n+            methodCallExpr.setName(\"add\");\n+            methodCallExpr.setArguments(arguments);\n+            ExpressionStmt expressionStmt = new ExpressionStmt();\n+            expressionStmt.setExpression(methodCallExpr);\n+            body.addStatement(expressionStmt);\n+        }\n+    }\n+\n+    static void setCompoundPredicateConstructor(final String generatedClassName,\n+                                                final String predicateName,\n+                                                final ConstructorDeclaration constructorDeclaration,\n+                                                final BOOLEAN_OPERATOR booleanOperator,\n+                                                final Set<String> predicatesClasses) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, predicateName);\n+        final BlockStmt body = constructorDeclaration.getBody();\n+        body.getStatements().iterator().forEachRemaining(statement -> {\n+            if (statement instanceof ExplicitConstructorInvocationStmt) {\n+                ExplicitConstructorInvocationStmt superStatement = (ExplicitConstructorInvocationStmt) statement;\n+                NameExpr nameExpr = (NameExpr) superStatement.getArgument(2);\n+                nameExpr.setName(booleanOperator.getClass().getCanonicalName() + \".\" + booleanOperator.name());\n+            }\n+        });\n+        AssignExpr assignExpr = CommonCodegenUtils\n+                .getAssignExpression(body, \"kiePMMLPredicates\")\n+                .orElseThrow(() -> new KiePMMLException(String.format(MISSING_VARIABLE_IN_BODY, \"kiePMMLPredicates\", body)));\n+        ClassOrInterfaceType arrayClass = parseClassOrInterfaceType(ArrayList.class.getName());\n+        ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+        objectCreationExpr.setType(arrayClass);\n+        assignExpr.setValue(objectCreationExpr);\n+        for (String predicateClass : predicatesClasses) {\n+            ClassOrInterfaceType kiePMMLPredicateClass = parseClassOrInterfaceType(predicateClass);\n+            objectCreationExpr = new ObjectCreationExpr();\n+            objectCreationExpr.setType(kiePMMLPredicateClass);\n+            NodeList<Expression> arguments = NodeList.nodeList(objectCreationExpr);\n+            MethodCallExpr methodCallExpr = new MethodCallExpr();\n+            methodCallExpr.setScope(assignExpr.getTarget().asNameExpr());\n+            methodCallExpr.setName(\"add\");\n+            methodCallExpr.setArguments(arguments);\n+            ExpressionStmt expressionStmt = new ExpressionStmt();\n+            expressionStmt.setExpression(methodCallExpr);\n+            body.addStatement(expressionStmt);\n+        }\n+    }\n+\n+    static void setTrueFalsePredicateConstructor(final String generatedClassName,\n+                                                 final String predicateName,\n+                                                 final ConstructorDeclaration constructorDeclaration) {\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, predicateName);\n+    }\n+\n+    static List<Object> getObjectsFromArray(Array source) {\n+        Array.Type type = source.getType();\n+        List<Object> toReturn = new ArrayList<>();\n+        String stringValue = (String) source.getValue();\n+        String[] valuesArray = stringValue.split(\" \");\n+        for (String s : valuesArray) {\n+            switch (type) {\n+                case INT:\n+                    toReturn.add(Integer.valueOf(s));\n+                    break;\n+                case STRING:\n+                    toReturn.add(s);\n+                    break;\n+                case REAL:\n+                    toReturn.add(Double.valueOf(s));\n+                    break;", "originalCommit": "52801990de7002c74109aea1c61dd73463246240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQwMTQ3Ng==", "url": "https://github.com/kiegroup/drools/pull/3041#discussion_r478401476", "bodyText": "@jiripetrlik\ndone", "author": "gitgabrio", "createdAt": "2020-08-27T13:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "dbd29e5d777b274af95de84160de6a86c9e11c7d", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\nindex 70afdc3f50..4884a340cd 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLPredicateFactory.java\n\n@@ -28,6 +28,7 @@ import com.github.javaparser.ast.CompilationUnit;\n import com.github.javaparser.ast.NodeList;\n import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\n import com.github.javaparser.ast.body.ConstructorDeclaration;\n+import com.github.javaparser.ast.body.MethodDeclaration;\n import com.github.javaparser.ast.expr.AssignExpr;\n import com.github.javaparser.ast.expr.Expression;\n import com.github.javaparser.ast.expr.MethodCallExpr;\n"}}, {"oid": "dbd29e5d777b274af95de84160de6a86c9e11c7d", "url": "https://github.com/kiegroup/drools/commit/dbd29e5d777b274af95de84160de6a86c9e11c7d", "message": "[DROOLS-5143] Fixing code-generation - avoid class name clashing", "committedDate": "2020-08-27T12:16:47Z", "type": "commit"}, {"oid": "fd82983818c40b772eaf79312d6ade59205062be", "url": "https://github.com/kiegroup/drools/commit/fd82983818c40b772eaf79312d6ade59205062be", "message": "[DROOLS-5143] Fixed as per PR suggestion", "committedDate": "2020-08-27T13:04:47Z", "type": "commit"}, {"oid": "dc0c469f9a470d81971c5ca5c81113880e30515b", "url": "https://github.com/kiegroup/drools/commit/dc0c469f9a470d81971c5ca5c81113880e30515b", "message": "[DROOLS-5143] Fixed as per SONAR suggestion", "committedDate": "2020-08-27T15:28:07Z", "type": "commit"}, {"oid": "3dbecf3b9d9c2d30d888f65394e910923b10079c", "url": "https://github.com/kiegroup/drools/commit/3dbecf3b9d9c2d30d888f65394e910923b10079c", "message": "[DROOLS-4933] Scheleton implementation.", "committedDate": "2020-01-14T16:45:26Z", "type": "commit"}, {"oid": "d8d48091b32f272146d9a2957987371b22f1c659", "url": "https://github.com/kiegroup/drools/commit/d8d48091b32f272146d9a2957987371b22f1c659", "message": "[DROOLS-4933] Add UMLs", "committedDate": "2020-01-14T17:01:05Z", "type": "commit"}, {"oid": "925f1987f140893cb1322e539256872f2ccbeecd", "url": "https://github.com/kiegroup/drools/commit/925f1987f140893cb1322e539256872f2ccbeecd", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-15T12:03:01Z", "type": "commit"}, {"oid": "d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "url": "https://github.com/kiegroup/drools/commit/d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "message": "[DROOLS-4933] Refactor module layout to include KiePMMLRuntime implementation", "committedDate": "2020-01-16T13:02:50Z", "type": "commit"}, {"oid": "f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "url": "https://github.com/kiegroup/drools/commit/f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "message": "[DROOLS-4933] Refactoring", "committedDate": "2020-01-16T16:27:04Z", "type": "commit"}, {"oid": "a2e2db3f85353573027fef94ceb58c672fbb072e", "url": "https://github.com/kiegroup/drools/commit/a2e2db3f85353573027fef94ceb58c672fbb072e", "message": "[DROOLS_4933] Begin Regression model runtime implementation", "committedDate": "2020-01-21T13:20:08Z", "type": "commit"}, {"oid": "406f5aa611d29288414e56990b02cc1511fa922b", "url": "https://github.com/kiegroup/drools/commit/406f5aa611d29288414e56990b02cc1511fa922b", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-21T13:22:02Z", "type": "commit"}, {"oid": "acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "url": "https://github.com/kiegroup/drools/commit/acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "message": "[DROOLS-4933] Implemented regression model test", "committedDate": "2020-01-21T15:23:19Z", "type": "commit"}, {"oid": "46a55aeea38f0cff3394726e9d2a69fd27f29de3", "url": "https://github.com/kiegroup/drools/commit/46a55aeea38f0cff3394726e9d2a69fd27f29de3", "message": "[DROOLS-4933] Add models", "committedDate": "2020-01-21T15:28:35Z", "type": "commit"}, {"oid": "4804ecb09fa750cd3f9d55cd4862b31dc181e102", "url": "https://github.com/kiegroup/drools/commit/4804ecb09fa750cd3f9d55cd4862b31dc181e102", "message": "[DROOLS-4933] Add PMML compiler test", "committedDate": "2020-01-21T16:17:38Z", "type": "commit"}, {"oid": "f728a0545a1d660d4dcde290305e4c637b2302cd", "url": "https://github.com/kiegroup/drools/commit/f728a0545a1d660d4dcde290305e4c637b2302cd", "message": "[DROOLS-4933] Implemented compiler and assembler, with tests", "committedDate": "2020-01-22T18:28:39Z", "type": "commit"}, {"oid": "a6a17446ea7262bd11cde18697e67a7bc92a1213", "url": "https://github.com/kiegroup/drools/commit/a6a17446ea7262bd11cde18697e67a7bc92a1213", "message": "[DROOLS-4933] Switched version. Moved ResourceHelper to kie-test-util package", "committedDate": "2020-01-23T10:12:27Z", "type": "commit"}, {"oid": "7c1e01ec7a306f3d0253d261eca41867e86399c5", "url": "https://github.com/kiegroup/drools/commit/7c1e01ec7a306f3d0253d261eca41867e86399c5", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-23T10:30:10Z", "type": "commit"}, {"oid": "212bfb68a5ad7db74ad36f0c1387a967f40cff57", "url": "https://github.com/kiegroup/drools/commit/212bfb68a5ad7db74ad36f0c1387a967f40cff57", "message": "[DROOLS-4933] Implemented integration test module. Full roundtrip test for linear regression", "committedDate": "2020-01-23T12:24:20Z", "type": "commit"}, {"oid": "5e53facd07bdeef8aeef9e181e8db381b71568ff", "url": "https://github.com/kiegroup/drools/commit/5e53facd07bdeef8aeef9e181e8db381b71568ff", "message": "[DROOLS-4933] Implementing full roundtrip test with full kie integration - test not working", "committedDate": "2020-01-23T15:16:34Z", "type": "commit"}, {"oid": "c052f3939c806f06ba9da81d8a458306fdf821d1", "url": "https://github.com/kiegroup/drools/commit/c052f3939c806f06ba9da81d8a458306fdf821d1", "message": "[DROOLS-4933] Implementing PMMLWeaverService. Fixing integration test setup", "committedDate": "2020-01-23T17:59:13Z", "type": "commit"}, {"oid": "85c248d9f9bb20102002da13b80f30ae2c349280", "url": "https://github.com/kiegroup/drools/commit/85c248d9f9bb20102002da13b80f30ae2c349280", "message": "[DROOLS-4933] Begin implementation of drools-based Tree model", "committedDate": "2020-01-24T09:50:45Z", "type": "commit"}, {"oid": "daec25864ebfb41a5d5b24fb767a5f34018bf57a", "url": "https://github.com/kiegroup/drools/commit/daec25864ebfb41a5d5b24fb767a5f34018bf57a", "message": "[DROOLS-4933] Fixing old KieBaseTest", "committedDate": "2020-01-24T09:56:54Z", "type": "commit"}, {"oid": "414dfb3bf8436958e7ad9d2a6450cef56bd66267", "url": "https://github.com/kiegroup/drools/commit/414dfb3bf8436958e7ad9d2a6450cef56bd66267", "message": "[DROOLS-4933] Begin implementation of Tree model with tests", "committedDate": "2020-01-24T16:00:23Z", "type": "commit"}, {"oid": "4b55f05acc849c76130d70bc796fe1a395e103f4", "url": "https://github.com/kiegroup/drools/commit/4b55f05acc849c76130d70bc796fe1a395e103f4", "message": "[DROOLS-4933] Keep going with implementation of Tree model and tests", "committedDate": "2020-01-27T08:12:46Z", "type": "commit"}, {"oid": "2ea39606d4becc5dc01226cab8412f598490a1d0", "url": "https://github.com/kiegroup/drools/commit/2ea39606d4becc5dc01226cab8412f598490a1d0", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-27T08:13:07Z", "type": "commit"}, {"oid": "cbb1d77ac080712959f51271a356ebad6063b390", "url": "https://github.com/kiegroup/drools/commit/cbb1d77ac080712959f51271a356ebad6063b390", "message": "[DROOLS-4933] Renaming previous implementation to kie-pmml-legacy. Updating dependant modules to reflect that", "committedDate": "2020-01-27T15:58:41Z", "type": "commit"}, {"oid": "7e22de0c5d1b6dd260f93be2839f5254794a87ff", "url": "https://github.com/kiegroup/drools/commit/7e22de0c5d1b6dd260f93be2839f5254794a87ff", "message": "[DROOLS-4933] Fixing linear regression roundtrip test. Implementing finder", "committedDate": "2020-01-27T15:59:49Z", "type": "commit"}, {"oid": "a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "url": "https://github.com/kiegroup/drools/commit/a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "message": "[DROOLS-4933] Commenting execution logic from Tree model. Begin model test implementation", "committedDate": "2020-01-28T09:25:11Z", "type": "commit"}, {"oid": "6c42ce09ac28ed51ad9e6060f980685de7d06c42", "url": "https://github.com/kiegroup/drools/commit/6c42ce09ac28ed51ad9e6060f980685de7d06c42", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-28T09:25:18Z", "type": "commit"}, {"oid": "e483c8c449cac316f8310afe45b8ba7f31f503c2", "url": "https://github.com/kiegroup/drools/commit/e483c8c449cac316f8310afe45b8ba7f31f503c2", "message": "[DROOLS-4933] Done TreeModelImplementationProviderTest stub. Add True/False predicates.", "committedDate": "2020-01-28T10:55:43Z", "type": "commit"}, {"oid": "98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "url": "https://github.com/kiegroup/drools/commit/98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "message": "[DROOLS-4933] First TreeModel (drools) iteration done with empty rule", "committedDate": "2020-01-28T13:50:07Z", "type": "commit"}, {"oid": "d59116f44ded7f430ed3597ff3fa718271aa8a5a", "url": "https://github.com/kiegroup/drools/commit/d59116f44ded7f430ed3597ff3fa718271aa8a5a", "message": "[DROOLS-4933] TreeModel (drools) iteration done with golfing model example test", "committedDate": "2020-01-30T12:29:19Z", "type": "commit"}, {"oid": "a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "url": "https://github.com/kiegroup/drools/commit/a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "message": "[DROOLS-4933] Refactored builders. Begin MiningModel implementation", "committedDate": "2020-01-30T16:35:26Z", "type": "commit"}, {"oid": "19ff28abb0f692680a866b94fe2452e9e9b8b836", "url": "https://github.com/kiegroup/drools/commit/19ff28abb0f692680a866b94fe2452e9e9b8b836", "message": "[DROOLS-4933] Keep working on MiningModel implementation", "committedDate": "2020-01-31T07:36:23Z", "type": "commit"}, {"oid": "c85bd66afb70ce59af3ae6c55800dd1b55389b84", "url": "https://github.com/kiegroup/drools/commit/c85bd66afb70ce59af3ae6c55800dd1b55389b84", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-31T07:36:56Z", "type": "commit"}, {"oid": "8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "url": "https://github.com/kiegroup/drools/commit/8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "message": "[DROOLS-4933] Begin kie-pmml-mining model", "committedDate": "2020-01-31T09:03:12Z", "type": "commit"}, {"oid": "921b348434bd8348345973588725c623cc2f4173", "url": "https://github.com/kiegroup/drools/commit/921b348434bd8348345973588725c623cc2f4173", "message": "[DROOLS-4933] Cleanup poms", "committedDate": "2020-01-31T09:47:17Z", "type": "commit"}, {"oid": "713668504dd2fb49b9d52db00a34ea926765b21e", "url": "https://github.com/kiegroup/drools/commit/713668504dd2fb49b9d52db00a34ea926765b21e", "message": "[DROOLS-4933] Created pmml-models archetype", "committedDate": "2020-01-31T14:39:19Z", "type": "commit"}, {"oid": "edeeedbc693b49984609d0a178434c641b546d54", "url": "https://github.com/kiegroup/drools/commit/edeeedbc693b49984609d0a178434c641b546d54", "message": "[DROOLS-4933] Created pmml-model-mining", "committedDate": "2020-01-31T14:40:17Z", "type": "commit"}, {"oid": "459f819de6be5cf254c40942bf016eb5dfce5d4e", "url": "https://github.com/kiegroup/drools/commit/459f819de6be5cf254c40942bf016eb5dfce5d4e", "message": "[DROOLS-4933] Refactoring", "committedDate": "2020-01-31T14:52:40Z", "type": "commit"}, {"oid": "4c47c3f367473464803ed1d568c5067763442c8a", "url": "https://github.com/kiegroup/drools/commit/4c47c3f367473464803ed1d568c5067763442c8a", "message": "[DROOLS-4933] Created pmml-runtime archetype", "committedDate": "2020-01-31T15:28:33Z", "type": "commit"}, {"oid": "e3fd656e4750327cfc639ad1e3a531ac01711dc3", "url": "https://github.com/kiegroup/drools/commit/e3fd656e4750327cfc639ad1e3a531ac01711dc3", "message": "[DROOLS-4933] Created pmml-runtime-mining", "committedDate": "2020-01-31T15:29:29Z", "type": "commit"}, {"oid": "50b56a83a99b42615d75c09c8fe80892f34f69f2", "url": "https://github.com/kiegroup/drools/commit/50b56a83a99b42615d75c09c8fe80892f34f69f2", "message": "[DROOLS-4933] Implemented library-commons module", "committedDate": "2020-01-31T17:12:39Z", "type": "commit"}, {"oid": "98f66e40313bee5cf66397060cf0a8255eaa7216", "url": "https://github.com/kiegroup/drools/commit/98f66e40313bee5cf66397060cf0a8255eaa7216", "message": "[DROOLS-4933] Refactored log. Keep working on mining model.", "committedDate": "2020-02-06T09:34:57Z", "type": "commit"}, {"oid": "53c428bb16df9c3fb532619ce6d03b1375fff6c0", "url": "https://github.com/kiegroup/drools/commit/53c428bb16df9c3fb532619ce6d03b1375fff6c0", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-06T09:35:35Z", "type": "commit"}, {"oid": "03a4b4ddb940bf244976035b4e5a81aa490932e3", "url": "https://github.com/kiegroup/drools/commit/03a4b4ddb940bf244976035b4e5a81aa490932e3", "message": "[DROOLS-4933] Fixing archetypes' poms", "committedDate": "2020-02-06T10:03:27Z", "type": "commit"}, {"oid": "0a143a6ffe27414701ded12c9c79b611c1738491", "url": "https://github.com/kiegroup/drools/commit/0a143a6ffe27414701ded12c9c79b611c1738491", "message": "[DROOLS-4933] Add Tree model overall implementation strategy description", "committedDate": "2020-02-06T10:51:08Z", "type": "commit"}, {"oid": "a8187bbf36f4f72c35d48af1cadd94209b4e3704", "url": "https://github.com/kiegroup/drools/commit/a8187bbf36f4f72c35d48af1cadd94209b4e3704", "message": "[DROOLS-4933] Refactored log. Updated implementation.md", "committedDate": "2020-02-06T11:18:27Z", "type": "commit"}, {"oid": "7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "url": "https://github.com/kiegroup/drools/commit/7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "message": "[DROOLS-4933] First implmentation of KiePMMLDescrFactory", "committedDate": "2020-02-07T14:00:51Z", "type": "commit"}, {"oid": "0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "url": "https://github.com/kiegroup/drools/commit/0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "message": "[DROOLS-4933] Refactoring - reorganizing modules", "committedDate": "2020-02-07T14:42:45Z", "type": "commit"}, {"oid": "d44b449c659787092a93d8f45f4629bb03f9e16c", "url": "https://github.com/kiegroup/drools/commit/d44b449c659787092a93d8f45f4629bb03f9e16c", "message": "[DROOLS-4933] Fixed refactoring - Tree runtime broken", "committedDate": "2020-02-07T15:10:25Z", "type": "commit"}, {"oid": "a20e82e3baa8e74ff854ad163beeed608399d4ae", "url": "https://github.com/kiegroup/drools/commit/a20e82e3baa8e74ff854ad163beeed608399d4ae", "message": "[DROOLS-4933] Keep refactoring - moved models", "committedDate": "2020-02-07T15:59:02Z", "type": "commit"}, {"oid": "6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "url": "https://github.com/kiegroup/drools/commit/6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "message": "[DROOLS-4933] Adapting archetype. Not completely working", "committedDate": "2020-02-10T08:43:57Z", "type": "commit"}, {"oid": "ba41cc61bff3b65558d299472952593e4c968dcb", "url": "https://github.com/kiegroup/drools/commit/ba41cc61bff3b65558d299472952593e4c968dcb", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-10T08:44:33Z", "type": "commit"}, {"oid": "afc30bd72eca48f9b574ec70519d96bf6f5e604a", "url": "https://github.com/kiegroup/drools/commit/afc30bd72eca48f9b574ec70519d96bf6f5e604a", "message": "[DROOLS-4933] Renamed kie-pmml to kie-pmml-refactoring", "committedDate": "2020-02-10T17:32:10Z", "type": "commit"}, {"oid": "83bb9948d4d287964841584e03ee6be1ca0fe394", "url": "https://github.com/kiegroup/drools/commit/83bb9948d4d287964841584e03ee6be1ca0fe394", "message": "[DROOLS-4933] Restored kie-pmml-legacy to kie-pmml", "committedDate": "2020-02-10T17:46:48Z", "type": "commit"}, {"oid": "5c5b637d10f0a2249ecc693380e5e8ebe688143a", "url": "https://github.com/kiegroup/drools/commit/5c5b637d10f0a2249ecc693380e5e8ebe688143a", "message": "[DROOLS-4933] Create PMML refactoring skeleton", "committedDate": "2020-02-10T18:09:27Z", "type": "commit"}, {"oid": "67c28bfe7ced36b439175e9eba671aed5c9fb80f", "url": "https://github.com/kiegroup/drools/commit/67c28bfe7ced36b439175e9eba671aed5c9fb80f", "message": "[DROOLS-4933] Add test utility methods. Fixed pom", "committedDate": "2020-02-10T18:15:50Z", "type": "commit"}, {"oid": "6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "url": "https://github.com/kiegroup/drools/commit/6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "message": "[DROOLS-3339] Begin refactoring of regression model with new architecture", "committedDate": "2020-02-10T18:33:01Z", "type": "commit"}, {"oid": "1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "url": "https://github.com/kiegroup/drools/commit/1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "message": "[DROOLS-4933] Add tests to kie-test-util", "committedDate": "2020-02-11T08:56:44Z", "type": "commit"}, {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "url": "https://github.com/kiegroup/drools/commit/1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "message": "[DROOLS-4933] Add assertions to tests inside kie-test-util", "committedDate": "2020-02-11T09:03:08Z", "type": "commit"}, {"oid": "413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "url": "https://github.com/kiegroup/drools/commit/413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "message": "[DROOLS-3339] Begin Regression model implementation", "committedDate": "2020-02-11T09:39:24Z", "type": "commit"}, {"oid": "97726c0778e26fb7815b3ad35fec88ec63ebabfe", "url": "https://github.com/kiegroup/drools/commit/97726c0778e26fb7815b3ad35fec88ec63ebabfe", "message": "[DROOLS-3339] Add tests to IsRegressionModel. Make KiePMMLRegressionModel constructor protected", "committedDate": "2020-02-11T10:02:36Z", "type": "commit"}, {"oid": "47c187638b8be2d807e6d187e7627e20432b4d1a", "url": "https://github.com/kiegroup/drools/commit/47c187638b8be2d807e6d187e7627e20432b4d1a", "message": "[DROOLS-3339] Add some fixes as per sonar suggestion", "committedDate": "2020-02-11T10:20:22Z", "type": "commit"}, {"oid": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "url": "https://github.com/kiegroup/drools/commit/2959221c665ee2eda43afaa8b89baf75829f9f8f", "message": "[DROOLS-4933] Format", "committedDate": "2020-02-12T10:27:46Z", "type": "commit"}, {"oid": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "url": "https://github.com/kiegroup/drools/commit/68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "message": "[DROOLS-4933] Moving kie-pmml-api to kie-pmml-commons", "committedDate": "2020-02-12T11:02:17Z", "type": "commit"}, {"oid": "a163b2d51d89d7e02401f198939201edc1123bd7", "url": "https://github.com/kiegroup/drools/commit/a163b2d51d89d7e02401f198939201edc1123bd7", "message": "[DROOLS-4933] Renamed kie-pmml-refactoring to kie-pmml-new", "committedDate": "2020-02-12T11:28:09Z", "type": "commit"}, {"oid": "6ef20f048ff6935f8b928c966440e33d4af8f127", "url": "https://github.com/kiegroup/drools/commit/6ef20f048ff6935f8b928c966440e33d4af8f127", "message": "[WIP] Renamed modules", "committedDate": "2020-02-12T11:44:16Z", "type": "commit"}, {"oid": "35439483900cb2905876ccf0bb1104b4950613f9", "url": "https://github.com/kiegroup/drools/commit/35439483900cb2905876ccf0bb1104b4950613f9", "message": "Merge branch 'DROOLS-4933' into PMML-REF-WIP\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/test/java/org/kie/pmml/api/model/TestUtils.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProviderFinder.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLExtensionFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLFieldRefFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/ModelImplementationProviderFinderImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/utils/KiePMMLUtil.java\n#\tkie-pmml-new/kie-pmml-library/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/container/PMMLPackage.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/exceptions/KiePMMLModelException.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLContext.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/PMMLWeaverService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/container/PMMLPackageImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/PMMLContextImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutor.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutorFinderImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java\n#\tkie-pmml-new/kie-pmml-runtime/pom.xml\n#\tkie-pmml-new/pom.xml\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/FileUtils.java\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/ResourceHelper.java", "committedDate": "2020-02-12T11:46:04Z", "type": "commit"}, {"oid": "84ddf7046f3f597262b7cea67a3c67975ae15de2", "url": "https://github.com/kiegroup/drools/commit/84ddf7046f3f597262b7cea67a3c67975ae15de2", "message": "[WIP] Keep renaming/refactoring", "committedDate": "2020-02-12T12:01:48Z", "type": "commit"}, {"oid": "d973ddb6be6da1b7adb0b29544cf1917aa324291", "url": "https://github.com/kiegroup/drools/commit/d973ddb6be6da1b7adb0b29544cf1917aa324291", "message": "[DROOLS-3339] Begin test implementation", "committedDate": "2020-02-12T13:07:25Z", "type": "commit"}, {"oid": "67f86b39b1294731de1a4f8afe34a1368a3f97ac", "url": "https://github.com/kiegroup/drools/commit/67f86b39b1294731de1a4f8afe34a1368a3f97ac", "message": "Merge remote-tracking branch 'gitgabrio/PMML-REF-WIP' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingFunction.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java", "committedDate": "2020-02-12T13:09:26Z", "type": "commit"}, {"oid": "e7a381245ae84c30b84e445cc203293d9f79aeac", "url": "https://github.com/kiegroup/drools/commit/e7a381245ae84c30b84e445cc203293d9f79aeac", "message": "[DROOLS-3339] Merge refactoring", "committedDate": "2020-02-12T13:26:28Z", "type": "commit"}, {"oid": "49777dd997b3c78dc5da7b5cede42280c4133b5d", "url": "https://github.com/kiegroup/drools/commit/49777dd997b3c78dc5da7b5cede42280c4133b5d", "message": "[DROOLS-3339] Merge refactoring", "committedDate": "2020-02-12T13:44:04Z", "type": "commit"}, {"oid": "fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "url": "https://github.com/kiegroup/drools/commit/fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "message": "[DROOLS-3339] Begin integrationg of tests from previous implementation. Refactoring predictors.", "committedDate": "2020-02-13T08:09:54Z", "type": "commit"}, {"oid": "1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "url": "https://github.com/kiegroup/drools/commit/1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "message": "[DROOLS-3339] Reorganizing resources in integration test. Fixing broken pmmls", "committedDate": "2020-02-13T14:27:37Z", "type": "commit"}, {"oid": "432b11e4facce1ff204aae5fa3c776132ff00eb1", "url": "https://github.com/kiegroup/drools/commit/432b11e4facce1ff204aae5fa3c776132ff00eb1", "message": "[DROOLS-3339] Fixed regression. Begin fixing classification. Add outputfields", "committedDate": "2020-02-13T17:30:34Z", "type": "commit"}, {"oid": "eefbc4f4f97343d54ef9915083817935bdd1aef4", "url": "https://github.com/kiegroup/drools/commit/eefbc4f4f97343d54ef9915083817935bdd1aef4", "message": "[DROOLS-3339] Fixed classification and add some whole-model test. Start increasing unittesting", "committedDate": "2020-02-14T13:49:39Z", "type": "commit"}, {"oid": "a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "url": "https://github.com/kiegroup/drools/commit/a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "message": "[DROOLS-3339] Updated name refactoring", "committedDate": "2020-02-17T14:57:27Z", "type": "commit"}, {"oid": "bb8cd4540266533d6f5365851b74a0bd45aa0e64", "url": "https://github.com/kiegroup/drools/commit/bb8cd4540266533d6f5365851b74a0bd45aa0e64", "message": "[DROOLS-3339] Changed log level.", "committedDate": "2020-02-18T08:13:11Z", "type": "commit"}, {"oid": "66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "url": "https://github.com/kiegroup/drools/commit/66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "message": "[DROOLS-3339] Sync with base pr", "committedDate": "2020-02-18T11:09:55Z", "type": "commit"}, {"oid": "ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "url": "https://github.com/kiegroup/drools/commit/ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-18T11:11:08Z", "type": "commit"}, {"oid": "d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "url": "https://github.com/kiegroup/drools/commit/d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "message": "[DROOLS-3339] Update version", "committedDate": "2020-02-18T11:12:30Z", "type": "commit"}, {"oid": "3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "url": "https://github.com/kiegroup/drools/commit/3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/.gitignore\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensioned.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLNamed.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-api/src/main/java/org/kie/pmml/evaluator/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/pom.xml", "committedDate": "2020-02-19T09:19:57Z", "type": "commit"}, {"oid": "0252db264590eab9cb09d736af61422c60598d13", "url": "https://github.com/kiegroup/drools/commit/0252db264590eab9cb09d736af61422c60598d13", "message": "[DROOLS-3339] Merging master", "committedDate": "2020-02-19T09:25:50Z", "type": "commit"}, {"oid": "be10d13c9c11387678bd9b952e3f755d8997f058", "url": "https://github.com/kiegroup/drools/commit/be10d13c9c11387678bd9b952e3f755d8997f058", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:30:45Z", "type": "commit"}, {"oid": "1dfcd04225406cf68c56c831f0cefdad5dc15989", "url": "https://github.com/kiegroup/drools/commit/1dfcd04225406cf68c56c831f0cefdad5dc15989", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:36:15Z", "type": "commit"}, {"oid": "08ba9803a700031577e4ff7b916a6c491eb4257b", "url": "https://github.com/kiegroup/drools/commit/08ba9803a700031577e4ff7b916a6c491eb4257b", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:39:10Z", "type": "commit"}, {"oid": "f13d63392567162e43a735e023b96b803f055720", "url": "https://github.com/kiegroup/drools/commit/f13d63392567162e43a735e023b96b803f055720", "message": "[DROOLS-3339] Fix merge with master", "committedDate": "2020-02-19T09:45:59Z", "type": "commit"}, {"oid": "d006f75f08f11c53dd9070c63d563d0b3e49363d", "url": "https://github.com/kiegroup/drools/commit/d006f75f08f11c53dd9070c63d563d0b3e49363d", "message": "[DROOLS-3339] Fix merge with master", "committedDate": "2020-02-19T09:58:13Z", "type": "commit"}, {"oid": "f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "url": "https://github.com/kiegroup/drools/commit/f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T10:05:10Z", "type": "commit"}, {"oid": "c7f8b89211ee5b049037e45a53485c623debcfb8", "url": "https://github.com/kiegroup/drools/commit/c7f8b89211ee5b049037e45a53485c623debcfb8", "message": "Example of simple test for whole model", "committedDate": "2020-02-19T15:24:19Z", "type": "commit"}, {"oid": "eb91454321ab75ec4ce011e7a255e62939bc3095", "url": "https://github.com/kiegroup/drools/commit/eb91454321ab75ec4ce011e7a255e62939bc3095", "message": "[DROOLS-3339] Implementing factories unit tests", "committedDate": "2020-02-20T11:49:29Z", "type": "commit"}, {"oid": "c8e359bbdf01bdaf471233bd554c4d9976a46246", "url": "https://github.com/kiegroup/drools/commit/c8e359bbdf01bdaf471233bd554c4d9976a46246", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339", "committedDate": "2020-02-20T11:49:59Z", "type": "commit"}, {"oid": "c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "url": "https://github.com/kiegroup/drools/commit/c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "message": "[DROOLS-3339] Changed outputfield - target field to Optional", "committedDate": "2020-02-20T12:10:16Z", "type": "commit"}, {"oid": "c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "url": "https://github.com/kiegroup/drools/commit/c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "message": "[DROOLS-3339] Add tests", "committedDate": "2020-02-20T13:22:04Z", "type": "commit"}, {"oid": "60ac6321fca21660851f05c8ea01d652119579f9", "url": "https://github.com/kiegroup/drools/commit/60ac6321fca21660851f05c8ea01d652119579f9", "message": "[DROOLS-3339] Refactoring kie-pmml-models-regression-api -> kie-pmml-models-regression-model", "committedDate": "2020-02-20T13:54:01Z", "type": "commit"}, {"oid": "37d423724f3e36ff1464a3b46014c0331244bb83", "url": "https://github.com/kiegroup/drools/commit/37d423724f3e36ff1464a3b46014c0331244bb83", "message": "Parameterize and polish NumericVariablesLinearRegressionTest", "committedDate": "2020-02-20T14:19:00Z", "type": "commit"}, {"oid": "5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "url": "https://github.com/kiegroup/drools/commit/5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "message": "[DROOLS-3339] Keep testing", "committedDate": "2020-02-21T09:37:55Z", "type": "commit"}, {"oid": "1178cffc04dd79b8ec0db806bd75e435dc8fc138", "url": "https://github.com/kiegroup/drools/commit/1178cffc04dd79b8ec0db806bd75e435dc8fc138", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339", "committedDate": "2020-02-21T09:38:42Z", "type": "commit"}, {"oid": "86523713cb68d5b422553f9649e046279682a4bc", "url": "https://github.com/kiegroup/drools/commit/86523713cb68d5b422553f9649e046279682a4bc", "message": "Change package name for PMML regression tests", "committedDate": "2020-02-21T09:50:28Z", "type": "commit"}, {"oid": "564492a1ff343a8faf391e2bd30bba51abcaa66e", "url": "https://github.com/kiegroup/drools/commit/564492a1ff343a8faf391e2bd30bba51abcaa66e", "message": "[DROOLS-3339] Fixing/refactoring ClassificationModelEvaluator. Implemented tests", "committedDate": "2020-02-21T13:24:48Z", "type": "commit"}, {"oid": "29c29482c09c29a88360f73764d9e68d9f736d7a", "url": "https://github.com/kiegroup/drools/commit/29c29482c09c29a88360f73764d9e68d9f736d7a", "message": "[DROOLS-5099] PMML tests for regression with numeric inputs", "committedDate": "2020-02-21T13:27:41Z", "type": "commit"}, {"oid": "0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "url": "https://github.com/kiegroup/drools/commit/0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "message": "[DROOLS-3339] Done ClassificationModelEvaluator tests", "committedDate": "2020-02-21T14:20:16Z", "type": "commit"}]}