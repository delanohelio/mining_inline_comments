{"pr_number": 2908, "pr_title": "[DROOLS-5348] Lambda predicate is not externalized when a binding var\u2026", "pr_createdAt": "2020-05-21T08:52:51Z", "pr_url": "https://github.com/kiegroup/drools/pull/2908", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r429205168", "bodyText": "Sorry, but I don't understand why you needed to do this. Can you please clarify a bit? Also maybe adding a comment in the code could be helpful so we won't forget in future..", "author": "mariofusco", "createdAt": "2020-05-22T11:59:20Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {", "originalCommit": "1f6447cfc6459658e4e234d7f450411773af6331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzgzMA==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r429813830", "bodyText": "!decl.isPresent() means rootNodeName was not resolved to a declaration. It means that rootNodeName is not a variable but a class with its static method. I apply this logic (= change clazz) only for the static method case.\nBecause, for example, in AccumulateTest#testAccumulateWithMax(), rootNodeName \"$time\" is Date. It's not the pattern type StockTick. So we shouldn't change clazz. (In this case, the \"_this\" is eventually converted to StockTick by AccumulateVisitorFlowDSL.composeTwoBindings)", "author": "tkobayas", "createdAt": "2020-05-25T08:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1ODc5MA==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r430258790", "bodyText": "@mariofusco If you have any doubt, feel free to let me know. I'm not fully sure about the ramification of changing clazz (= patternType for drlxParse()). But in this case (= class with static method), the method is properly resolved even if I change the clazz from Duration to AccumulateTest$Interval", "author": "tkobayas", "createdAt": "2020-05-26T08:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwNTE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "9891beb461a773ab003bc2833fe394b6a4af060b", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\nindex c8e5cc5c54..daf984c83b 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\n\n@@ -271,15 +271,20 @@ public abstract class AccumulateVisitor {\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n-        if (!decl.isPresent() && input instanceof PatternDescr) {\n-            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(((PatternDescr)input).getIdentifier());\n-            if (accumulateClassDeclOpt.isPresent()) {\n-                clazz = accumulateClassDeclOpt.get().getDeclarationClass();\n+        String paramExprBindingId = rootNodeName;\n+        Class<?> patternType = clazz;\n+        if (input instanceof PatternDescr) {\n+            String inputId = ((PatternDescr)input).getIdentifier();\n+            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(inputId);\n+            if (!decl.isPresent() && accumulateClassDeclOpt.isPresent()) {\n+                // when static method is used in accumulate function, \"_this\" is a pattern input\n+                paramExprBindingId = inputId;\n+                patternType = accumulateClassDeclOpt.get().getDeclarationClass();\n             }\n         }\n \n         SingleDrlxParseSuccess drlxParseResult = (SingleDrlxParseSuccess) new ConstraintParser(context, context.getPackageModel())\n-                .drlxParse(clazz, decl.isPresent() ? rootNodeName : null, printConstraint(parameterConverted));\n+                .drlxParse(patternType, paramExprBindingId, printConstraint(parameterConverted));\n \n         if (!decl.isPresent() && input instanceof PatternDescr) {\n             drlxParseResult.setAccumulateBinding( ((PatternDescr)input).getIdentifier() );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r428532735", "bodyText": "@lucamolteni This check (if patternClass is Object.class, don't use it. So the type of \"_this\" will be UnknownType) comes from your commit. Do you remember why this check is required? I tested without the check but unit tests seemed to work.\n0ac6d1d#diff-d29bcd88c3edecef8fa6351facea3f55R473", "author": "tkobayas", "createdAt": "2020-05-21T09:01:23Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -477,26 +477,64 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n                                                              Expression expr,\n                                                              boolean skipFirstParamAsThis,\n                                                              Optional<Class<?>> patternClass) {\n+        return generateLambdaWithoutParameters(usedDeclarations, expr, skipFirstParamAsThis, patternClass, null);\n+    }\n+    public static Expression generateLambdaWithoutParameters(Collection<String> usedDeclarations,\n+                                                             Expression expr,\n+                                                             boolean skipFirstParamAsThis,\n+                                                             Optional<Class<?>> patternClass,\n+                                                             RuleContext ruleContext) {\n         DrlxParseUtil.transformDrlNameExprToNameExpr(expr);\n         if (skipFirstParamAsThis && usedDeclarations.isEmpty()) {\n             return expr;\n         }\n         LambdaExpr lambdaExpr = new LambdaExpr();\n-        lambdaExpr.setEnclosingParameters( true );\n+        lambdaExpr.setEnclosingParameters(true);\n+\n+        // Only when we can resolve all parameter types, do it\n+        boolean canResolve = canResolveAllParameterTypes(usedDeclarations, skipFirstParamAsThis, patternClass, ruleContext);\n         if (!skipFirstParamAsThis) {\n             Type type;\n-            if(patternClass.isPresent() && usedDeclarations.isEmpty() && patternClass.filter(c -> !Object.class.equals(c)).isPresent()) {\n+            if (canResolve) {\n                 type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n             } else {\n                 type = new UnknownType();\n             }\n             lambdaExpr.addParameter(new Parameter(type, THIS_PLACEHOLDER));\n         }\n-        usedDeclarations.stream().map( s -> new Parameter( new UnknownType(), s ) ).forEach( lambdaExpr::addParameter );\n-        lambdaExpr.setBody( new ExpressionStmt(expr) );\n+        usedDeclarations.stream()\n+                        .map(s -> {\n+                            if (canResolve) {\n+                                return new Parameter(getDelarationType(ruleContext, s), s);\n+                            } else {\n+                                return new Parameter(new UnknownType(), s);\n+                            }\n+                        })\n+                        .forEach(lambdaExpr::addParameter);\n+\n+        lambdaExpr.setBody(new ExpressionStmt(expr));\n         return lambdaExpr;\n     }\n \n+    private static boolean canResolveAllParameterTypes(Collection<String> usedDeclarations, boolean skipFirstParamAsThis, Optional<Class<?>> patternClass, RuleContext ruleContext) {\n+        if (!skipFirstParamAsThis && (!patternClass.isPresent() || patternClass.get().equals(Object.class))) {", "originalCommit": "1f6447cfc6459658e4e234d7f450411773af6331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDc2OA==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r432284768", "bodyText": "It's probably unused code then, you can remove it thanks!", "author": "lucamolteni", "createdAt": "2020-05-29T06:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0NjY3NA==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r433146674", "bodyText": "Thanks, removed.", "author": "tkobayas", "createdAt": "2020-06-01T10:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "499e6f0c5aa082f06f9038860082b543428036c6", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java\nindex 9d4304e68d..8417a160cc 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java\n\n@@ -517,7 +517,7 @@ public class DrlxParseUtil {\n     }\n \n     private static boolean canResolveAllParameterTypes(Collection<String> usedDeclarations, boolean skipFirstParamAsThis, Optional<Class<?>> patternClass, RuleContext ruleContext) {\n-        if (!skipFirstParamAsThis && (!patternClass.isPresent() || patternClass.get().equals(Object.class))) {\n+        if (!skipFirstParamAsThis && !patternClass.isPresent()) {\n             return false;\n         }\n         if (usedDeclarations.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNjEwNw==", "url": "https://github.com/kiegroup/drools/pull/2908#discussion_r428536107", "bodyText": "@mariofusco I added this code because AccumulateTest.testAccumulateOnStaticMethod failed with my PR. Without this code, SingleDrlxParseSuccess.patternType is \"java.time.Duration\" in the test. My PR expects \"patternType\" to be a Type of \"_this\" (Or this expectation is wrong?). So in the test, the type should be \"org.drools.modelcompiler.AccumulateTest$Interval\". I'm not very sure if this is the right way to fix. Please share your thought on this.", "author": "tkobayas", "createdAt": "2020-05-21T09:08:30Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java", "diffHunk": "@@ -271,6 +271,13 @@ private void methodCallExprParameter(AccumulateDescr.AccumulateFunctionCallDescr\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n+        if (!decl.isPresent() && input instanceof PatternDescr) {\n+            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(((PatternDescr)input).getIdentifier());\n+            if (accumulateClassDeclOpt.isPresent()) {\n+                clazz = accumulateClassDeclOpt.get().getDeclarationClass();\n+            }\n+        }\n+", "originalCommit": "1f6447cfc6459658e4e234d7f450411773af6331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9891beb461a773ab003bc2833fe394b6a4af060b", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\nindex c8e5cc5c54..daf984c83b 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java\n\n@@ -271,15 +271,20 @@ public abstract class AccumulateVisitor {\n         final Class accumulateFunctionResultType = accumulateFunction.getResultType();\n         final String bindExpressionVariable = context.getExprId(accumulateFunctionResultType, typedExpression.toString());\n \n-        if (!decl.isPresent() && input instanceof PatternDescr) {\n-            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(((PatternDescr)input).getIdentifier());\n-            if (accumulateClassDeclOpt.isPresent()) {\n-                clazz = accumulateClassDeclOpt.get().getDeclarationClass();\n+        String paramExprBindingId = rootNodeName;\n+        Class<?> patternType = clazz;\n+        if (input instanceof PatternDescr) {\n+            String inputId = ((PatternDescr)input).getIdentifier();\n+            Optional<DeclarationSpec> accumulateClassDeclOpt = context.getDeclarationById(inputId);\n+            if (!decl.isPresent() && accumulateClassDeclOpt.isPresent()) {\n+                // when static method is used in accumulate function, \"_this\" is a pattern input\n+                paramExprBindingId = inputId;\n+                patternType = accumulateClassDeclOpt.get().getDeclarationClass();\n             }\n         }\n \n         SingleDrlxParseSuccess drlxParseResult = (SingleDrlxParseSuccess) new ConstraintParser(context, context.getPackageModel())\n-                .drlxParse(clazz, decl.isPresent() ? rootNodeName : null, printConstraint(parameterConverted));\n+                .drlxParse(patternType, paramExprBindingId, printConstraint(parameterConverted));\n \n         if (!decl.isPresent() && input instanceof PatternDescr) {\n             drlxParseResult.setAccumulateBinding( ((PatternDescr)input).getIdentifier() );\n"}}, {"oid": "9891beb461a773ab003bc2833fe394b6a4af060b", "url": "https://github.com/kiegroup/drools/commit/9891beb461a773ab003bc2833fe394b6a4af060b", "message": "[DROOLS-5348] Lambda predicate is not externalized when a binding variable is involved", "committedDate": "2020-06-01T09:20:03Z", "type": "commit"}, {"oid": "cbede71bc88b35090197d21a8bd22068b3ee9c23", "url": "https://github.com/kiegroup/drools/commit/cbede71bc88b35090197d21a8bd22068b3ee9c23", "message": "- add code comment", "committedDate": "2020-06-01T09:23:13Z", "type": "commit"}, {"oid": "8fd8633a9a8cdf23ebdbc1699770dc588e2e7fdb", "url": "https://github.com/kiegroup/drools/commit/8fd8633a9a8cdf23ebdbc1699770dc588e2e7fdb", "message": "- Predicate method need to have throws Exception because a function may throw", "committedDate": "2020-06-01T09:23:13Z", "type": "commit"}, {"oid": "499e6f0c5aa082f06f9038860082b543428036c6", "url": "https://github.com/kiegroup/drools/commit/499e6f0c5aa082f06f9038860082b543428036c6", "message": "- remove Object check", "committedDate": "2020-06-01T09:56:05Z", "type": "commit"}, {"oid": "499e6f0c5aa082f06f9038860082b543428036c6", "url": "https://github.com/kiegroup/drools/commit/499e6f0c5aa082f06f9038860082b543428036c6", "message": "- remove Object check", "committedDate": "2020-06-01T09:56:05Z", "type": "forcePushed"}]}