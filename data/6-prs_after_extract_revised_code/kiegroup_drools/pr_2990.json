{"pr_number": 2990, "pr_title": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "pr_createdAt": "2020-07-14T16:55:18Z", "pr_url": "https://github.com/kiegroup/drools/pull/2990", "timeline": [{"oid": "42d1e74b798c96ed155118eaa9d9c36340884974", "url": "https://github.com/kiegroup/drools/commit/42d1e74b798c96ed155118eaa9d9c36340884974", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-15T08:00:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjQxMA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852410", "bodyText": "If the connector is not one that the Guided Rule Model supports, this defaults to predicate.", "author": "Rikkola", "createdAt": "2020-07-15T07:37:00Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d1e74b798c96ed155118eaa9d9c36340884974", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\nindex 8ad44fe6a8..f01733ca13 100644\n--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\n+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\n\n@@ -4355,9 +4355,9 @@ public class RuleModelDRLPersistenceImpl\n \n                 final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n                 comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-                for (final Expr expr : subExprs) {\n-                    comp.addConstraint(expr.asFieldConstraint(m,\n-                                                              factPattern));\n+                for (final Expr subExpr : subExprs) {\n+                    comp.addConstraint(subExpr.asFieldConstraint(m,\n+                                                                 factPattern));\n                 }\n                 convertLegacyMatchesToNewFormat(comp);\n                 return comp;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjY2OA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852668", "bodyText": "Separated this method so it can be overwritten.", "author": "Rikkola", "createdAt": "2020-07-15T07:37:29Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -1124,6 +1122,14 @@ private void generateSingleFieldConstraint(final SingleFieldConstraint constr,\n             }\n         }\n \n+        protected void generatePredicateSingleFieldConstraint(final SingleFieldConstraint constr,", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzE1Nw==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853157", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.", "author": "Rikkola", "createdAt": "2020-07-15T07:38:24Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java", "diffHunk": "@@ -249,6 +249,11 @@ private void visitRuleModel(final RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(final SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42d1e74b798c96ed155118eaa9d9c36340884974", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java\nindex e558a55a22..1b65b58859 100644\n--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java\n+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java\n\n@@ -249,34 +237,26 @@ public class GeneratorContextRuleModelVisitor {\n     }\n \n     private void visitSingleFieldConstraint(final SingleFieldConstraint sfc) {\n-        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()) {\n             parseStringPattern(sfc.getValue());\n             return;\n         }\n \n-        final InterpolationVariable var = new InterpolationVariable(sfc.getValue(),\n-                                                                    sfc.getFieldType(),\n-                                                                    (factPattern == null ? \"\" : factPattern.getFactType()),\n-                                                                    sfc.getFieldName());\n-        if (BaseSingleFieldConstraint.TYPE_TEMPLATE == sfc.getConstraintValueType() && !vars.contains(var)) {\n-            vars.add(var);\n-        } else {\n-            hasNonTemplateOutput = true;\n-        }\n+        manageTemplateVariable(new InterpolationVariable(sfc.getValue(),\n+                                                         sfc.getFieldType(),\n+                                                         (factPattern == null ? \"\" : factPattern.getFactType()),\n+                                                         sfc.getFieldName()),\n+                               sfc.getConstraintValueType());\n \n         //Visit Connection constraints\n         if (sfc.getConnectives() != null) {\n             for (int i = 0; i < sfc.getConnectives().length; i++) {\n                 final ConnectiveConstraint cc = sfc.getConnectives()[i];\n-                InterpolationVariable ccVar = new InterpolationVariable(cc.getValue(),\n-                                                                        cc.getFieldType(),\n-                                                                        (factPattern == null ? \"\" : factPattern.getFactType()),\n-                                                                        cc.getFieldName());\n-                if (BaseSingleFieldConstraint.TYPE_TEMPLATE == cc.getConstraintValueType() && !vars.contains(ccVar)) {\n-                    vars.add(ccVar);\n-                } else {\n-                    hasNonTemplateOutput = true;\n-                }\n+                manageTemplateVariable(new InterpolationVariable(cc.getValue(),\n+                                                                 cc.getFieldType(),\n+                                                                 (factPattern == null ? \"\" : factPattern.getFactType()),\n+                                                                 cc.getFieldName()),\n+                                       cc.getConstraintValueType());\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzQ3MA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853470", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.\nA bit of redundancy here, but getting rid of it is likely a huge and risky task.", "author": "Rikkola", "createdAt": "2020-07-15T07:39:01Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java", "diffHunk": "@@ -255,6 +255,11 @@ private void visitRuleModel(RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "937c6018d012370386e2c086b3811b46e17bf187", "url": "https://github.com/kiegroup/drools/commit/937c6018d012370386e2c086b3811b46e17bf187", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-16T09:21:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457077930", "bodyText": "Shouldn't we implement as return new EvalExpr(expr).asFieldConstraint(m, factPattern); ?\nAsking because that EvalExpr seems be implemented exactly in same way.", "author": "jomarko", "createdAt": "2020-07-20T05:57:16Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {\n+\n+                final SingleFieldConstraint con = new SingleFieldConstraint();\n+                con.setConstraintValueType(SingleFieldConstraint.TYPE_PREDICATE);\n+                con.setValue(expr);\n+                return con;", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MjEyNA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457142124", "bodyText": "I'll try this out.", "author": "Rikkola", "createdAt": "2020-07-20T07:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1ODYzOQ==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457158639", "bodyText": "@jomarko Well spotted. Works and less redundancy.", "author": "Rikkola", "createdAt": "2020-07-20T08:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\nindex f01733ca13..7aade9ed65 100644\n--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\n+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java\n\n@@ -4346,11 +4346,7 @@ public class RuleModelDRLPersistenceImpl\n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n             if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {\n-\n-                final SingleFieldConstraint con = new SingleFieldConstraint();\n-                con.setConstraintValueType(SingleFieldConstraint.TYPE_PREDICATE);\n-                con.setValue(expr);\n-                return con;\n+                return new EvalExpr(expr).asFieldConstraint(m, factPattern);\n             } else {\n \n                 final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457101390", "bodyText": "I saw in some if we were checking && and || operators. I am wondering if test like below should pass then.\n    @Test\n    public void testMoreComplexExpressionLogicAnd() {\n\n        final String drl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( ( age != null ) == true && ( name == null ) == false )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n\n        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\n        final RuleModel m = ruleModelPersistence.unmarshal(drl,\n                                                           Collections.EMPTY_LIST,\n                                                           dmo);\n        final String resultDrl = ruleModelPersistence.marshal(m);\n\n        final String expectedDrl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( eval( ( age != null ) == true ) && eval( ( name == null ) == false ) )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n    }", "author": "jomarko", "createdAt": "2020-07-20T06:42:58Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -5104,4 +5103,32 @@ public void testMatchesLegacyToNewVersion() {\n         assertEquals(\"matches\", right.getOperator());\n         assertEquals(\"P.*\", right.getValue());\n     }\n+\n+    @Test\n+    /**\n+     * The GRE can not produce this, but the Persistence class is also used by XLS->GDST->XLS conversions.\n+     */\n+    public void testMoreComplexExpression() {", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MzEyOA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143128", "bodyText": "This and several more DRL snippets will fail. What we support should probably be limited to what the Guider Rule Editor components can produce, and like in this case, what we want to be able to migrate from XLS to GDST.", "author": "Rikkola", "createdAt": "2020-07-20T07:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "da641782ac497e5b1ab6a5162181d28c111dd370", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java\nindex bc35e6406f..c63e485e03 100644\n--- a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java\n+++ b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java\n\n@@ -5131,4 +5131,29 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {\n                 \"end\\n\";\n         assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n     }\n+\n+    @Test\n+    public void testTwoPredicates() {\n+\n+        final String drl = \"rule \\\"r0\\\"\\n\" +\n+                \"dialect \\\"mvel\\\"\\n\" +\n+                \"when\\n\" +\n+                \"Person( ( age != null ) == true, ( name == null ) == false )\\n\" +\n+                \"then\\n\" +\n+                \"end\\n\";\n+\n+        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\n+        final RuleModel m = ruleModelPersistence.unmarshal(drl,\n+                                                           Collections.EMPTY_LIST,\n+                                                           dmo);\n+        final String resultDrl = ruleModelPersistence.marshal(m);\n+\n+        final String expectedDrl = \"rule \\\"r0\\\"\\n\" +\n+                \"dialect \\\"mvel\\\"\\n\" +\n+                \"when\\n\" +\n+                \"Person( eval( ( age != null ) == true ), eval( ( name == null ) == false ))\\n\" +\n+                \"then\\n\" +\n+                \"end\\n\";\n+        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457106423", "bodyText": "If a boolean is expected as param1 value, shouldn't this line be rather         singleFieldConstraint.setValue(\"(age != null) == @{param1}\"); ?", "author": "jomarko", "createdAt": "2020-07-20T06:51:39Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitorTest.java", "diffHunk": "@@ -71,6 +72,27 @@ public void visitSingleFieldConstraint() {\n         assertEquals(\"==\", interpolationVariable.getOperator());\n     }\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+\n+        Map<InterpolationVariable, Integer> variableMap = new HashMap<>();\n+        RuleModelVisitor visitor = new RuleModelVisitor(variableMap);\n+\n+        SingleFieldConstraint singleFieldConstraint = new SingleFieldConstraint();\n+        singleFieldConstraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        singleFieldConstraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0Mzc3OA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143778", "bodyText": "I would keep it with quotes. The GRE components tend to add the quotes since they rely on the fact that MVEL is used.", "author": "Rikkola", "createdAt": "2020-07-20T07:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzMxMQ==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457107311", "bodyText": "similar question as above", "author": "jomarko", "createdAt": "2020-07-20T06:53:11Z", "path": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTBRDRLPersistenceTest.java", "diffHunk": "@@ -21,19 +21,51 @@\n import java.util.Collection;\n import java.util.function.Function;\n \n+import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;\n+import org.drools.workbench.models.datamodel.rule.FactPattern;\n import org.drools.workbench.models.datamodel.rule.IAction;\n import org.drools.workbench.models.datamodel.rule.InterpolationVariable;\n import org.drools.workbench.models.datamodel.rule.PluggableIAction;\n import org.drools.workbench.models.datamodel.rule.RuleModel;\n+import org.drools.workbench.models.datamodel.rule.SingleFieldConstraint;\n import org.drools.workbench.models.datamodel.rule.TemplateAware;\n import org.drools.workbench.models.guided.dtable.backend.util.GuidedDTBRDRLPersistence;\n import org.junit.Test;\n import org.kie.soup.project.datamodel.oracle.DataType;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n public class GuidedDTBRDRLPersistenceTest {\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+        final GuidedDTBRDRLPersistence persistence = new GuidedDTBRDRLPersistence((key) -> \"true\");\n+\n+        final RuleModel ruleModel = new RuleModel();\n+        ruleModel.name = \"Template aware\";\n+\n+        ruleModel.addRhsItem(new TemplateAwareIAction(\"initialValue\"));\n+        final FactPattern factPattern = new FactPattern(\"Person\");\n+        final SingleFieldConstraint constraint = new SingleFieldConstraint();\n+        constraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        constraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-20T08:09:39Z", "type": "commit"}, {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-20T08:09:39Z", "type": "forcePushed"}, {"oid": "da641782ac497e5b1ab6a5162181d28c111dd370", "url": "https://github.com/kiegroup/drools/commit/da641782ac497e5b1ab6a5162181d28c111dd370", "message": "DROOLS-5507: Increase coverage", "committedDate": "2020-07-21T08:51:11Z", "type": "commit"}]}