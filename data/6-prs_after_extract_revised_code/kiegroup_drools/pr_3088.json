{"pr_number": 3088, "pr_title": "[DROOLS-5486] CEP doesn't evaluate correctly when a bind variable is \u2026", "pr_createdAt": "2020-09-10T07:54:41Z", "pr_url": "https://github.com/kiegroup/drools/pull/3088", "timeline": [{"oid": "1ca9283944b2546663bc65c5b8d3e2627028ad90", "url": "https://github.com/kiegroup/drools/commit/1ca9283944b2546663bc65c5b8d3e2627028ad90", "message": "[DROOLS-5486] CEP doesn't evaluate correctly when a bind variable is used as the first temporal parameter in executable model", "committedDate": "2020-09-10T09:53:05Z", "type": "forcePushed"}, {"oid": "e63b4f0d8f8fb047eaf508670414adc2aa7cadf3", "url": "https://github.com/kiegroup/drools/commit/e63b4f0d8f8fb047eaf508670414adc2aa7cadf3", "message": "[DROOLS-5486] CEP doesn't evaluate correctly when a bind variable is used as the first temporal parameter in executable model", "committedDate": "2020-09-11T02:41:54Z", "type": "commit"}, {"oid": "e63b4f0d8f8fb047eaf508670414adc2aa7cadf3", "url": "https://github.com/kiegroup/drools/commit/e63b4f0d8f8fb047eaf508670414adc2aa7cadf3", "message": "[DROOLS-5486] CEP doesn't evaluate correctly when a bind variable is used as the first temporal parameter in executable model", "committedDate": "2020-09-11T02:41:54Z", "type": "forcePushed"}, {"oid": "2f378b3c245076a9290e1ebb8d5f48b721ccedc5", "url": "https://github.com/kiegroup/drools/commit/2f378b3c245076a9290e1ebb8d5f48b721ccedc5", "message": "- add thisOnRight to TemporalPredicate", "committedDate": "2020-09-15T10:30:42Z", "type": "commit"}, {"oid": "27cfaa94a92a6443ffa431d134424b7b8401f932", "url": "https://github.com/kiegroup/drools/commit/27cfaa94a92a6443ffa431d134424b7b8401f932", "message": "- Fixed externalized lambda issue\n- Fixed code smells", "committedDate": "2020-09-16T03:38:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNzI3MQ==", "url": "https://github.com/kiegroup/drools/pull/3088#discussion_r489317271", "bodyText": "I inverse the arguments here rather than doing it inside each temporalPredicate evaluate method because this approach is concise and less error-prone, I think.", "author": "tkobayas", "createdAt": "2020-09-16T10:00:45Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/constraints/TemporalConstraintEvaluator.java", "diffHunk": "@@ -51,7 +51,12 @@ public boolean evaluate( InternalFactHandle handle, Tuple tuple, InternalWorking\n         long start2 = getStartTimestamp( fhs[1], workingMemory, getDeclarations()[1], temporalConstraint.getF2() );\n         long duration2 = getDuration( fhs[1] );\n         long end2 = start2 + duration2;\n-        return temporalConstraint.getTemporalPredicate().evaluate( start1, duration1, end1, start2, duration2, end2);\n+        TemporalPredicate temporalPredicate = temporalConstraint.getTemporalPredicate();\n+        if (temporalPredicate.isThisOnRight()) {\n+            return temporalPredicate.evaluate( start2, duration2, end2, start1, duration1, end1);\n+        } else {\n+            return temporalPredicate.evaluate( start1, duration1, end1, start2, duration2, end2);\n+        }", "originalCommit": "27cfaa94a92a6443ffa431d134424b7b8401f932", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}