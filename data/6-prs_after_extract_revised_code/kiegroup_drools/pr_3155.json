{"pr_number": 3155, "pr_title": "DROOLS-5714 DMN produce programmatically OAS first iteration", "pr_createdAt": "2020-10-09T13:40:05Z", "pr_url": "https://github.com/kiegroup/drools/pull/3155", "timeline": [{"oid": "bcacbd32140d25a299dbed1985845a072aa15598", "url": "https://github.com/kiegroup/drools/commit/bcacbd32140d25a299dbed1985845a072aa15598", "message": "initial commit", "committedDate": "2020-10-06T09:56:48Z", "type": "commit"}, {"oid": "4c773e61a2af9e23310cc4e3302ccb417ef3a4bd", "url": "https://github.com/kiegroup/drools/commit/4c773e61a2af9e23310cc4e3302ccb417ef3a4bd", "message": "wip", "committedDate": "2020-10-06T12:55:44Z", "type": "commit"}, {"oid": "edfd6e1d123883156f53d02fe63d6fc64a3a821a", "url": "https://github.com/kiegroup/drools/commit/edfd6e1d123883156f53d02fe63d6fc64a3a821a", "message": "wip", "committedDate": "2020-10-08T08:03:28Z", "type": "commit"}, {"oid": "fc9d9044cc44fbc06dbf0f97d7742afdb6a6159a", "url": "https://github.com/kiegroup/drools/commit/fc9d9044cc44fbc06dbf0f97d7742afdb6a6159a", "message": "remove alternative implementation", "committedDate": "2020-10-08T08:06:38Z", "type": "commit"}, {"oid": "8be06a4265c2918191fbcf2ad367a202ec4ffb1e", "url": "https://github.com/kiegroup/drools/commit/8be06a4265c2918191fbcf2ad367a202ec4ffb1e", "message": "refactoring", "committedDate": "2020-10-08T09:03:42Z", "type": "commit"}, {"oid": "1f4bbd75510a41ff8acbe57e6068b16b111216e5", "url": "https://github.com/kiegroup/drools/commit/1f4bbd75510a41ff8acbe57e6068b16b111216e5", "message": "with model validation (basic checks)", "committedDate": "2020-10-08T10:33:50Z", "type": "commit"}, {"oid": "f2c48ce472b97bc7fefae4858942002d4a85a11d", "url": "https://github.com/kiegroup/drools/commit/f2c48ce472b97bc7fefae4858942002d4a85a11d", "message": "refactorings", "committedDate": "2020-10-08T11:21:13Z", "type": "commit"}, {"oid": "f9bdca281f5929b6c92f6af2177003349a4937dc", "url": "https://github.com/kiegroup/drools/commit/f9bdca281f5929b6c92f6af2177003349a4937dc", "message": "support for type name containing spaces", "committedDate": "2020-10-08T12:02:43Z", "type": "commit"}, {"oid": "ac9b087b15ae4b5ec2c43058354b7930a44aad88", "url": "https://github.com/kiegroup/drools/commit/ac9b087b15ae4b5ec2c43058354b7930a44aad88", "message": "collection support and anonymous innner type collection of base type", "committedDate": "2020-10-08T12:37:11Z", "type": "commit"}, {"oid": "95ba246b91f60ed2e87c0afcc5edcacc0384b5dc", "url": "https://github.com/kiegroup/drools/commit/95ba246b91f60ed2e87c0afcc5edcacc0384b5dc", "message": "Refactoring", "committedDate": "2020-10-08T12:49:16Z", "type": "commit"}, {"oid": "6488671fb47699e907c19e202b895e748f68a2fc", "url": "https://github.com/kiegroup/drools/commit/6488671fb47699e907c19e202b895e748f68a2fc", "message": "Refactoring", "committedDate": "2020-10-08T12:50:43Z", "type": "commit"}, {"oid": "73f7365e25ebe84e9f4ed8fadf99f379e83b9651", "url": "https://github.com/kiegroup/drools/commit/73f7365e25ebe84e9f4ed8fadf99f379e83b9651", "message": "Refactoring", "committedDate": "2020-10-08T13:01:14Z", "type": "commit"}, {"oid": "fe5607a0f863e20fd96dd8083d9db0dfa54e0978", "url": "https://github.com/kiegroup/drools/commit/fe5607a0f863e20fd96dd8083d9db0dfa54e0978", "message": "SLF4j logging", "committedDate": "2020-10-08T13:07:38Z", "type": "commit"}, {"oid": "08a38772fd685689d85e7301cb4d6b34e0e7d888", "url": "https://github.com/kiegroup/drools/commit/08a38772fd685689d85e7301cb4d6b34e0e7d888", "message": "Refactoring", "committedDate": "2020-10-08T13:08:59Z", "type": "commit"}, {"oid": "86010c72d0b14b80dc20ebadeae223c1ecee5004", "url": "https://github.com/kiegroup/drools/commit/86010c72d0b14b80dc20ebadeae223c1ecee5004", "message": "refactoring", "committedDate": "2020-10-08T13:09:34Z", "type": "commit"}, {"oid": "3540e5f3e44bf1d15cb2c3368350cf3f25f93991", "url": "https://github.com/kiegroup/drools/commit/3540e5f3e44bf1d15cb2c3368350cf3f25f93991", "message": ".", "committedDate": "2020-10-08T13:10:09Z", "type": "commit"}, {"oid": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "url": "https://github.com/kiegroup/drools/commit/bdd9fa2a4b54e8605436225146b57d29ab043c41", "message": "finalize pom.xml", "committedDate": "2020-10-09T13:38:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxOTgyMQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502519821", "bodyText": "This value is always overridden, I think you can directly return both inside try and catch blocks just declare the variable as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String namePart = type.getName();\n          \n          \n            \n                    String namePart;", "author": "danielezonca", "createdAt": "2020-10-09T15:45:22Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.net.URI;\n+\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.core.impl.BaseDMNTypeImpl;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DefaultNamingPolicy implements NamingPolicy {\n+\n+    @Override\n+    public String getName(DMNType type) {\n+        String name = type.getName();\n+        DMNType belongingType = ((BaseDMNTypeImpl) type).getBelongingType(); // internals for anonymous inner types.\n+        while (belongingType != null) {\n+            name = belongingType.getName() + \"_\" + name;\n+            belongingType = ((BaseDMNTypeImpl) belongingType).getBelongingType();\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getRef(DMNType type) {\n+        String namePart = type.getName();", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIzOTg1NA==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503239854", "bodyText": "yes well spotted, I missed that as I refactored.", "author": "tarilabs", "createdAt": "2020-10-12T11:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxOTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "chunk": "diff --git a/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java b/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java\nindex f7a5ef5b18..bb833afd5d 100644\n--- a/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java\n+++ b/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DefaultNamingPolicy.java\n\n@@ -37,7 +37,7 @@ public class DefaultNamingPolicy implements NamingPolicy {\n \n     @Override\n     public String getRef(DMNType type) {\n-        String namePart = type.getName();\n+        String namePart;\n         try {\n             URI uri = new URI(null, null, getName(type), null);\n             namePart = uri.toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTI4Mg==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502521282", "bodyText": "As far as I can see only ioSets is actually used. What about a TODO/remove the unused fields?", "author": "danielezonca", "createdAt": "2020-10-09T15:47:56Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNOASResult.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DMNOASResult {\n+\n+    public final ObjectNode jsonSchemaNode;\n+    public final List<DMNModelIOSets> ioSets;\n+    public final Map<DMNType, Schema> schemas;\n+    public final NamingPolicy namingPolicy;", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MDM5OA==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503240398", "bodyText": "Here you missed also jsonSchemaNode and namingPolicy are actually used.\nSo this comment is not valid.\nBut we can always refactor in future iterations \ud83d\udc4d", "author": "tarilabs", "createdAt": "2020-10-12T11:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTI4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMjgyNg==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502522826", "bodyText": "What about convert ioSets as Map<DMNModel, DMNModelIOSets>  directly in the constructor (or Map<DMNModel, List<DMNModelIOSets>> if you want to preserve the possibility to have multiple DMNModelIOSets for each DMNModel)?", "author": "danielezonca", "createdAt": "2020-10-09T15:50:39Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNOASResult.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.openapi.NamingPolicy;\n+\n+public class DMNOASResult {\n+\n+    public final ObjectNode jsonSchemaNode;\n+    public final List<DMNModelIOSets> ioSets;\n+    public final Map<DMNType, Schema> schemas;\n+    public final NamingPolicy namingPolicy;\n+\n+    public DMNOASResult(ObjectNode jsonSchemaNode, List<DMNModelIOSets> ioSets, Map<DMNType, Schema> schemas, NamingPolicy namingPolicy) {\n+        this.jsonSchemaNode = jsonSchemaNode.deepCopy();\n+        this.ioSets = Collections.unmodifiableList(ioSets);\n+        this.schemas = Collections.unmodifiableMap(schemas);\n+        this.namingPolicy = namingPolicy;\n+    }\n+\n+    public DMNModelIOSets lookupIOSetsByModel(DMNModel model) {\n+        return ioSets.stream().filter(ioset -> ioset.getModel().equals(model)).findFirst().orElseThrow(IllegalArgumentException::new);", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MDg3NQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503240875", "bodyText": "currently I will have only 1 DMNModelIOSets per DMN model, so I guess is fine as-is.", "author": "tarilabs", "createdAt": "2020-10-12T11:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMjgyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMzQxOA==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502523418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                            LOG.error(e);", "author": "danielezonca", "createdAt": "2020-10-09T15:51:41Z", "path": "kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JacksonUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JacksonUtils.class);\n+\n+    public static void printoutJSON(Object tree) {\n+        if (LOG.isDebugEnabled()) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            try {\n+                LOG.debug(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree));\n+            } catch (Exception e) {\n+                e.printStackTrace();", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MTQ4Nw==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503241487", "bodyText": "this proposal does not compile\nthis is a test method\nanyway, applied with valid code variant \ud83d\udc4d", "author": "tarilabs", "createdAt": "2020-10-12T11:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMzQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "chunk": "diff --git a/kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java b/kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java\nindex 64a080ac7a..fdcc9779a1 100644\n--- a/kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java\n+++ b/kie-dmn/kie-dmn-openapi/src/test/java/org/kie/dmn/openapi/JacksonUtils.java\n\n@@ -30,7 +30,7 @@ public class JacksonUtils {\n             try {\n                 LOG.debug(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(tree));\n             } catch (Exception e) {\n-                e.printStackTrace();\n+                LOG.error(\"error with Jackson serialization\", e);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzEzNQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502527135", "bodyText": "Can you please add a javadoc?", "author": "danielezonca", "createdAt": "2020-10-09T15:58:00Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi;\n+\n+import org.kie.dmn.openapi.model.DMNOASResult;\n+\n+public interface DMNOASGenerator {", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MTk2NQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503241965", "bodyText": "doing it", "author": "tarilabs", "createdAt": "2020-10-12T11:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyNzEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "chunk": "diff --git a/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java b/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java\nindex 7d529637b0..0aa9a47a8b 100644\n--- a/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java\n+++ b/kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/DMNOASGenerator.java\n\n@@ -18,6 +18,9 @@ package org.kie.dmn.openapi;\n \n import org.kie.dmn.openapi.model.DMNOASResult;\n \n+/**\n+ * Internal utility to generate OpenAPI (OAS) schema and related metadata information\n+ */\n public interface DMNOASGenerator {\n \n     DMNOASResult build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MTc0OA==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502541748", "bodyText": "I like this idea to create an aggregated type to represent the whole input/output \ud83d\udc4d", "author": "danielezonca", "createdAt": "2020-10-09T16:24:36Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/model/DMNModelIOSets.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.model;\n+\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.api.core.ast.DecisionNode;\n+import org.kie.dmn.api.core.ast.InputDataNode;\n+import org.kie.dmn.core.impl.CompositeTypeImpl;\n+\n+public class DMNModelIOSets {\n+\n+    private final DMNModel model;\n+    private CompositeTypeImpl inputSet;\n+    private CompositeTypeImpl outputSet;\n+\n+    public DMNModelIOSets(DMNModel model) {\n+        this.model = model;\n+        buildInputSet();\n+        buildOutputSet();\n+    }\n+\n+    private void buildOutputSet() {\n+        CompositeTypeImpl is = new CompositeTypeImpl(model.getNamespace(), \"<temp>\", model.getDefinitions().getId() + \"OutputSet\");\n+        for (DecisionNode dn : model.getDecisions()) {\n+            DMNType idnType = dn.getResultType();\n+            is.addField(dn.getName(), idnType);\n+        }\n+        for (InputDataNode idn : model.getInputs()) {\n+            DMNType idnType = idn.getType();\n+            is.addField(idn.getName(), idnType);\n+        }\n+        this.outputSet = is;\n+    }\n+\n+    private void buildInputSet() {\n+        CompositeTypeImpl is = new CompositeTypeImpl(model.getNamespace(), \"<temp>\", model.getDefinitions().getId() + \"InputSet\");\n+        for (InputDataNode idn : model.getInputs()) {\n+            DMNType idnType = idn.getType();\n+            is.addField(idn.getName(), idnType);\n+        }\n+        this.inputSet = is;\n+    }\n+\n+    public DMNModel getModel() {\n+        return model;\n+    }\n+\n+    public DMNType getInputSet() {\n+        return inputSet;\n+    }\n+\n+    public DMNType getOutputSet() {\n+        return outputSet;\n+    }", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MjA1NQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503242055", "bodyText": "\ud83d\udc4d", "author": "tarilabs", "createdAt": "2020-10-12T11:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MTc0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MjA3Nw==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r502542077", "bodyText": "Is this cast safe?", "author": "danielezonca", "createdAt": "2020-10-09T16:25:09Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/FEELSchemaEnum.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.kie.dmn.api.core.DMNUnaryTest;\n+import org.kie.dmn.feel.FEEL;\n+import org.kie.dmn.feel.runtime.UnaryTestImpl;\n+\n+public class FEELSchemaEnum {\n+\n+    public static void parseAllowedValuesIntoSchema(Schema schema, List<DMNUnaryTest> list) {\n+        try {\n+            FEEL SimpleFEEL = FEEL.newInstance();\n+            List<Object> expectLiterals = list.stream().map(UnaryTestImpl.class::cast)", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MjE1OA==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503242158", "bodyText": "affirmative \ud83d\udc4d", "author": "tarilabs", "createdAt": "2020-10-12T11:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0MjA3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwODI5OQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503208299", "bodyText": "Considering that typesIndex is immutable why don't populate a Map<DMNType, Schema> map in the constructor to be returned here?", "author": "danielezonca", "createdAt": "2020-10-12T10:47:38Z", "path": "kie-dmn/kie-dmn-openapi/src/main/java/org/kie/dmn/openapi/impl/DMNTypeSchemas.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.openapi.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.eclipse.microprofile.openapi.OASFactory;\n+import org.eclipse.microprofile.openapi.models.media.Schema;\n+import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;\n+import org.kie.dmn.api.core.DMNType;\n+import org.kie.dmn.core.impl.BaseDMNTypeImpl;\n+import org.kie.dmn.core.impl.CompositeTypeImpl;\n+import org.kie.dmn.core.impl.SimpleTypeImpl;\n+import org.kie.dmn.openapi.NamingPolicy;\n+import org.kie.dmn.openapi.model.DMNModelIOSets;\n+import org.kie.dmn.typesafe.DMNTypeUtils;\n+\n+public class DMNTypeSchemas {\n+\n+    private final List<DMNModelIOSets> ioSets;\n+    private final Set<DMNType> typesIndex;\n+    private final NamingPolicy namingPolicy;\n+\n+    public DMNTypeSchemas(List<DMNModelIOSets> ioSets, Set<DMNType> typesIndex, NamingPolicy namingPolicy) {\n+        this.ioSets = Collections.unmodifiableList(ioSets);\n+        this.typesIndex = Collections.unmodifiableSet(typesIndex);\n+        this.namingPolicy = namingPolicy;\n+    }\n+\n+    public Map<DMNType, Schema> generateSchemas() {\n+        Map<DMNType, Schema> schemas = new HashMap<>();\n+        for (DMNType t : typesIndex) {\n+            Schema schema = schemaFromType(t);\n+            schemas.put(t, schema);\n+        }\n+        return schemas;", "originalCommit": "bdd9fa2a4b54e8605436225146b57d29ab043c41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI0MjY2OQ==", "url": "https://github.com/kiegroup/drools/pull/3155#discussion_r503242669", "bodyText": "order of operation/phase matters here.\nI cannot do it in the constructor since the naming policy is required first,\nand naming policy is part of the overall \"build\" operation.\nWill leave as-is.", "author": "tarilabs", "createdAt": "2020-10-12T11:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwODI5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "url": "https://github.com/kiegroup/drools/commit/96731da2b4e5feb4af65d2c1f94ccd5f30f81e1b", "message": "Implement code review feedback", "committedDate": "2020-10-12T11:53:21Z", "type": "commit"}]}