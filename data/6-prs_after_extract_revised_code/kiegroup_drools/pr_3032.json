{"pr_number": 3032, "pr_title": "[DROOLS-5517] Enhance DMNResult/DMNContext to be able to return stron\u2026", "pr_createdAt": "2020-08-05T08:40:07Z", "pr_url": "https://github.com/kiegroup/drools/pull/3032", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDgxNQ==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r466434815", "bodyText": "I am not sure we need for a context to hold reference for an input Vs output, given this would lead to a different design and semantic.\nI believe it should be possible to keep DMNContextFPAImpl as is.\nI also believe it should be possible to keep DMNResultImpl without any need for an additional specialization, but this less of a concern to me.\nWhen the DMNRuntimeImpl creates the DMNResultImpl, it should be possible to supply a DMNContext which has for the wrapped FEELPropertyAccessible fpa the full list of inputs,decisions,bkms, etc.\nWhat do you think?", "author": "tarilabs", "createdAt": "2020-08-06T14:01:31Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java", "diffHunk": "@@ -29,12 +29,20 @@\n \n public class DMNContextFPAImpl implements DMNContext {\n \n-    private final FEELPropertyAccessible fpa;\n+    private final FEELPropertyAccessible inputSet;\n+    private final FEELPropertyAccessible outputSet;", "originalCommit": "27a29f8a54e8f82ef80b2ad0bba6a87689a9803b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec05a85067c99b9ca788bb3b9d123d6f0196708", "chunk": "diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\nindex 3656034f96..aaf42511e0 100644\n--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\n+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\n\n@@ -26,39 +28,78 @@ import org.kie.dmn.api.core.DMNContext;\n import org.kie.dmn.api.core.DMNMetadata;\n import org.kie.dmn.api.core.FEELPropertyAccessible;\n import org.kie.dmn.core.impl.DMNContextImpl.ScopeReference;\n+import org.kie.dmn.feel.util.EvalHelper.PropertyValueResult;\n+import org.kie.dmn.typesafe.DMNTypeSafeException;\n \n public class DMNContextFPAImpl implements DMNContext {\n \n-    private final FEELPropertyAccessible inputSet;\n-    private final FEELPropertyAccessible outputSet;\n+    private final FEELPropertyAccessible fpa;\n     private Deque<ScopeReference> stack = new LinkedList<>();\n     private DMNMetadataImpl metadata;\n \n-    public DMNContextFPAImpl(FEELPropertyAccessible inputSet) {\n-        this.inputSet = inputSet;\n-        this.outputSet = null;\n+    private Map<String, Object> fallbackMap; // store runtime variables which are not defined in strongly typed fpa\n+\n+    public DMNContextFPAImpl(FEELPropertyAccessible bean) {\n+        this.fpa = bean;\n         this.metadata = new DMNMetadataImpl();\n+        this.fallbackMap = new LinkedHashMap<>();\n     }\n \n-    public DMNContextFPAImpl(FEELPropertyAccessible inputSet, FEELPropertyAccessible outputSet) {\n-        this.inputSet = inputSet;\n-        this.outputSet = outputSet;\n-        this.metadata = new DMNMetadataImpl();\n+    public DMNContextFPAImpl(FEELPropertyAccessible bean, Map<String, Object> metadata) {\n+        this.fpa = bean;\n+        this.metadata = new DMNMetadataImpl(metadata);\n+        this.fallbackMap = new LinkedHashMap<>();\n+    }\n+\n+    public DMNContextFPAImpl(FEELPropertyAccessible bean, Map<String, Object> metadata, Map<String, Object> fallbackMap) {\n+        this.fpa = bean;\n+        this.metadata = new DMNMetadataImpl(metadata);\n+        this.fallbackMap = new LinkedHashMap<>(fallbackMap);\n     }\n \n     @Override\n     public Object set(String name, Object value) {\n-        throw new UnsupportedOperationException();\n+        if (stack.isEmpty()) {\n+            PropertyValueResult propValueResult = (PropertyValueResult) this.fpa.getFEELProperty(name);\n+            if (propValueResult.isDefined()) {\n+                if (!this.fpa.getFEELProperty(name).toOptional().isPresent()) {\n+                    // fromMap can handle Map/Collection rather than setFEELProperty\n+                    Map<String, Object> compositeValue = new HashMap<>();\n+                    compositeValue.put(name, value);\n+                    fpa.fromMap(compositeValue);\n+                }\n+                return this.fpa.getFEELProperty(name).toOptional().orElse(null);\n+            } else {\n+                return fallbackMap.put(name, value);\n+            }\n+        } else {\n+            return stack.peek().getRef().put(name, value);\n+        }\n     }\n \n     @Override\n     public Object get(String name) {\n-        return inputSet.getFEELProperty(name).toOptional().orElse(null);\n+        if (stack.isEmpty()) {\n+            PropertyValueResult propValueResult = (PropertyValueResult)this.fpa.getFEELProperty(name);\n+            if (propValueResult.isDefined()) {\n+                return fpa.getFEELProperty(name).toOptional().orElse(null);\n+            } else {\n+                return fallbackMap.get(name);\n+            }\n+        } else {\n+            return stack.peek().getRef().get(name);\n+        }\n+    }\n+\n+    public FEELPropertyAccessible getFpa() {\n+        return fpa;\n     }\n \n     private Map<String, Object> getCurrentEntries() {\n         if (stack.isEmpty()) {\n-            return inputSet.allFEELProperties();\n+            Map<String, Object> mergedMap = new HashMap<>(fpa.allFEELProperties());\n+            mergedMap.putAll(fallbackMap);\n+            return mergedMap;\n         } else {\n             return stack.peek().getRef(); // Intentional, symbol resolution in scope should limit at the top of the stack (for DMN semantic).\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NjIwMw==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r466946203", "bodyText": "Here I supply OutputSet class.", "author": "tkobayas", "createdAt": "2020-08-07T10:03:49Z", "path": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/stronglytyped/DMNRuntimeTypesTest.java", "diffHunk": "@@ -98,7 +99,8 @@ public void testOneOfEachType() {\n         assertThat(dmnResult.getDecisionResultByName(\"DecisionTime\").getResult(), is(LocalTime.of(10, 0)));\n \n         if (isTypeSafe()) {\n-            FEELPropertyAccessible outputSet = convertToOutputSet(dmnModel, dmnResult);\n+            DMNContextTypeSafeImpl resultContext = (DMNContextTypeSafeImpl)dmnResult.getContext();\n+            FEELPropertyAccessible outputSet = resultContext.getFpa(getOutputSetClass(dmnModel));", "originalCommit": "5c3708685e1526fddf9c4e00bbc6294c3d786709", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec05a85067c99b9ca788bb3b9d123d6f0196708", "chunk": "diff --git a/kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/stronglytyped/DMNRuntimeTypesTest.java b/kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/stronglytyped/DMNRuntimeTypesTest.java\nindex 6b69c3a633..a777615a63 100644\n--- a/kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/stronglytyped/DMNRuntimeTypesTest.java\n+++ b/kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/stronglytyped/DMNRuntimeTypesTest.java\n\n@@ -99,8 +117,7 @@ public class DMNRuntimeTypesTest extends BaseVariantTest {\n         assertThat(dmnResult.getDecisionResultByName(\"DecisionTime\").getResult(), is(LocalTime.of(10, 0)));\n \n         if (isTypeSafe()) {\n-            DMNContextTypeSafeImpl resultContext = (DMNContextTypeSafeImpl)dmnResult.getContext();\n-            FEELPropertyAccessible outputSet = resultContext.getFpa(getOutputSetClass(dmnModel));\n+            FEELPropertyAccessible outputSet = ((DMNContextFPAImpl)dmnResult.getContext()).getFpa();\n             Map<String, Object> allProperties = outputSet.allFEELProperties();\n             assertThat(allProperties.get(\"DecisionString\"), is(\"Hello, John Doe\"));\n             assertThat(allProperties.get(\"DecisionNumber\"), is(new BigDecimal(2)));\n"}}, {"oid": "5ec05a85067c99b9ca788bb3b9d123d6f0196708", "url": "https://github.com/kiegroup/drools/commit/5ec05a85067c99b9ca788bb3b9d123d6f0196708", "message": "- set Collection", "committedDate": "2020-08-24T07:14:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODkwOA==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r478308908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DMNContextFPAImpl newCtx = new DMNContextFPAImpl(newFpa, metadata.asMap(), fallbackMap);\n          \n          \n            \n                    DMNContextFPAImpl newCtx = new DMNContextFPAImpl(newFpa, metadata.asMap(), fallbackMap.clone());\n          \n      \n    \n    \n  \n\nI assume?", "author": "tarilabs", "createdAt": "2020-08-27T10:12:50Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java", "diffHunk": "@@ -93,7 +149,15 @@ public DMNMetadata getMetadata() {\n \n     @Override\n     public DMNContext clone() {\n-        DMNContextImpl newCtx = new DMNContextImpl(fpa.allFEELProperties(), metadata.asMap());\n+        FEELPropertyAccessible newFpa;\n+        try {\n+            newFpa = fpa.getClass().getDeclaredConstructor().newInstance();\n+        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\n+                | NoSuchMethodException | SecurityException e) {\n+                    throw new DMNTypeSafeException(\"Exception while instantiating \" + fpa.getClass(), e);\n+        }\n+        newFpa.fromMap(fpa.allFEELProperties());\n+        DMNContextFPAImpl newCtx = new DMNContextFPAImpl(newFpa, metadata.asMap(), fallbackMap);", "originalCommit": "5ec05a85067c99b9ca788bb3b9d123d6f0196708", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ec873ad0fa579486c6e9f09dd97fdebd6b3005f", "chunk": "diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\nindex aaf42511e0..6f2324363a 100644\n--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\n+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNContextFPAImpl.java\n\n@@ -149,15 +104,7 @@ public class DMNContextFPAImpl implements DMNContext {\n \n     @Override\n     public DMNContext clone() {\n-        FEELPropertyAccessible newFpa;\n-        try {\n-            newFpa = fpa.getClass().getDeclaredConstructor().newInstance();\n-        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\n-                | NoSuchMethodException | SecurityException e) {\n-                    throw new DMNTypeSafeException(\"Exception while instantiating \" + fpa.getClass(), e);\n-        }\n-        newFpa.fromMap(fpa.allFEELProperties());\n-        DMNContextFPAImpl newCtx = new DMNContextFPAImpl(newFpa, metadata.asMap(), fallbackMap);\n+        DMNContextImpl newCtx = new DMNContextImpl(fpa.allFEELProperties(), metadata.asMap());\n         for (ScopeReference e : stack) {\n             newCtx.pushScope(e.getName(), e.getNamespace());\n         }\n"}}, {"oid": "7ec873ad0fa579486c6e9f09dd97fdebd6b3005f", "url": "https://github.com/kiegroup/drools/commit/7ec873ad0fa579486c6e9f09dd97fdebd6b3005f", "message": "[DROOLS-5517] Enhance DMNResult/DMNContext to be able to return strongly typed OutputSet", "committedDate": "2020-09-01T06:46:00Z", "type": "commit"}, {"oid": "7ec873ad0fa579486c6e9f09dd97fdebd6b3005f", "url": "https://github.com/kiegroup/drools/commit/7ec873ad0fa579486c6e9f09dd97fdebd6b3005f", "message": "[DROOLS-5517] Enhance DMNResult/DMNContext to be able to return strongly typed OutputSet", "committedDate": "2020-09-01T06:46:00Z", "type": "forcePushed"}, {"oid": "9b92f3b33028f019c58e7de7c172e958c7226e95", "url": "https://github.com/kiegroup/drools/commit/9b92f3b33028f019c58e7de7c172e958c7226e95", "message": "- cover evaluateById and evaluateByName", "committedDate": "2020-09-03T09:37:34Z", "type": "commit"}, {"oid": "0d6d49910fd615817a5a2bc4df888ba383685243", "url": "https://github.com/kiegroup/drools/commit/0d6d49910fd615817a5a2bc4df888ba383685243", "message": "- Move conversion to the test infrastructure", "committedDate": "2020-09-05T01:33:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTE2Mw==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r485385163", "bodyText": "just to be sure I understood the latest modifications. This extraFields is used to store the DefinedKeySetField which is a Set<String> of the properties which have been set on the Input/Output Set pojo. However, this is not really \"used\" so far, since DMNRuntimeImpl uses the Map-backed DMNContextImpl. Correct?\nIt's fine I just wanted to check the intention :)", "author": "tarilabs", "createdAt": "2020-09-09T07:06:55Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/typesafe/AbstractDMNSetType.java", "diffHunk": "@@ -32,7 +32,8 @@\n \n abstract class AbstractDMNSetType implements TypeDefinition {\n \n-    List<DMNDeclaredField> fields = new ArrayList<>();\n+    List<DMNDeclaredField> dmnFields = new ArrayList<>();\n+    List<FieldDefinition> extraFields = new ArrayList<>();", "originalCommit": "0d6d49910fd615817a5a2bc4df888ba383685243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0MjE2OQ==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r486042169", "bodyText": "@tarilabs\nDefinedKeySetField is actually used now. When we start strongly typed DMN, we instantiate DMNContextFPAImpl with an OutputSet instance. Then, DMNContextFPAImpl is converted to DMNContextImpl for evaluation. At this point, we call fpa.allFEELProperties() inside DMNContextImpl.clone() to convert the FPA fields to a Map. Here, we need to distinguish between \"undefined\" (= don't put in the Map) and \"explicit null\" (= put the key with null value). So DefinedKeySetField mechanism is required.\nIf we use InputSet for the first DMNContextFPAImpl, we don't need this mechanism because InputSet doesn't have Decision node fields so we can always assume \"null\" is \"explicit null\". So... if we decide back to the approach \"Instantiate DMNContextFPAImpl with an InputSet instance first. Then convert the result to OutputSet\", I can remove the DefinedKeySetField. WDYT?", "author": "tkobayas", "createdAt": "2020-09-10T03:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1MjMyMQ==", "url": "https://github.com/kiegroup/drools/pull/3032#discussion_r486152321", "bodyText": "oh I see now, thanks @tkobayas for the explanation, makes sense.\nI would say please leave this as-is.\nThis can be helpful for supporting the use case when for instance on Kogito, we want to supply pre-evaluated-decision via kogito scaffolding.\nGiven inputset and outputset are infrastructural classes and emerging by the design of the DMN model itself, I believe it is good we have this utility method to distinguish the cases, as you pointed out. I just wanted to be sure if it was actually used, and now I see how :)\nThanks!", "author": "tarilabs", "createdAt": "2020-09-10T08:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NTE2Mw=="}], "type": "inlineReview", "revised_code": null}]}