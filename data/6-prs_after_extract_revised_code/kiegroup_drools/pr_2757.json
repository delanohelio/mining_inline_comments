{"pr_number": 2757, "pr_title": "Drools 4933 - Setup PMML refactoring implementation", "pr_createdAt": "2020-02-10T18:18:22Z", "pr_url": "https://github.com/kiegroup/drools/pull/2757", "timeline": [{"oid": "5c5b637d10f0a2249ecc693380e5e8ebe688143a", "url": "https://github.com/kiegroup/drools/commit/5c5b637d10f0a2249ecc693380e5e8ebe688143a", "message": "[DROOLS-4933] Create PMML refactoring skeleton", "committedDate": "2020-02-10T18:09:27Z", "type": "commit"}, {"oid": "67c28bfe7ced36b439175e9eba671aed5c9fb80f", "url": "https://github.com/kiegroup/drools/commit/67c28bfe7ced36b439175e9eba671aed5c9fb80f", "message": "[DROOLS-4933] Add test utility methods. Fixed pom", "committedDate": "2020-02-10T18:15:50Z", "type": "commit"}, {"oid": "1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "url": "https://github.com/kiegroup/drools/commit/1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "message": "[DROOLS-4933] Add tests to kie-test-util", "committedDate": "2020-02-11T08:56:44Z", "type": "commit"}, {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "url": "https://github.com/kiegroup/drools/commit/1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "message": "[DROOLS-4933] Add assertions to tests inside kie-test-util", "committedDate": "2020-02-11T09:03:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377661660", "bodyText": "Do we need this class to be serializable. Is there some use case which requires serialization. There is already different serialization implemented in KIE.", "author": "jiripetrlik", "createdAt": "2020-02-11T14:19:12Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NTU1Mw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378175553", "bodyText": "This class is contained in models that - in turns - will be serialized during kjar compilation (not implemented yet). At the same time, this module (kie-pmml-new) should not depend in anyway from something more \"drools/kie\" specific - that's why I've used java standard \"Serializable\" interface", "author": "gitgabrio", "createdAt": "2020-02-12T10:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NzM0OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378197349", "bodyText": "Thank you for explanation!", "author": "jiripetrlik", "createdAt": "2020-02-12T11:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MTY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\nsimilarity index 97%\nrename from kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java\nrename to kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\nindex 0b2946bc8c..10ab58a5bd 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/KiePMMLExtension.java\n+++ b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.kie.pmml.api.model;\n+package org.kie.pmml.commons.model;\n \n import java.io.Serializable;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377663147", "bodyText": "Do we expect to compare objects of this class somewhere?", "author": "jiripetrlik", "createdAt": "2020-02-11T14:21:42Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+import java.util.List;\n+\n+import org.kie.pmml.api.model.KiePMMLExtension;\n+\n+public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+    protected final List<KiePMMLExtension> extensions;\n+\n+    public KiePMMLExtensionedNamed(String name, List<KiePMMLExtension> extensions) {\n+        super(name);\n+        this.extensions = extensions;\n+    }\n+\n+    public List<KiePMMLExtension> getExtensions() {\n+        return extensions;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4ODg2MA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378088860", "bodyText": "@jiripetrlik\nHi! All \"equals\" method of child classes have this snippet\n  if (!super.equals(o)) { return false; }\n\nso implementing \"equals\" on abstract/parent classes allow \"equals\" on children to also considering inherited fields.", "author": "gitgabrio", "createdAt": "2020-02-12T08:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5Mzc0MQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378093741", "bodyText": "Ok, but the question is why you need to compare children of this class? What is the example or use case for it?", "author": "jiripetrlik", "createdAt": "2020-02-12T08:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3MjQ3NQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378172475", "bodyText": "@jiripetrlik\nThis is part of models that will be put in set/map/list - so having the equals/hashmap will avoid clashing of instances.\nBeside that, IIRC it was suggested by Sonar. Last, I think it is a good practice to add such methods to DTOs because it add predictable behavior.", "author": "gitgabrio", "createdAt": "2020-02-12T10:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTMwMQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181301", "bodyText": "@jiripetrlik\nAll these models/pojos are defined to represent XML content and should be not changed. Implementing equals/hashCode give you the possibility to manage them as \"values\" easier (for example compare or add them to a Set).\nI don't think there is a specific use case for now because this PR is just a \"stub\" of the design that will be extended later with multiple model implementations so it is safer to already implement a meaningful equals.\nDoes this answer to your question?", "author": "danielezonca", "createdAt": "2020-02-12T11:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5NjkwMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378196902", "bodyText": "I'm probably fine with that. I still don't see your point why to define it without use case. But we can keep it there just for safety. Do you plan to use it as keys in HashMaps? Or why to store XMLs in sets? But I'm ok with it to keep it as it is.", "author": "jiripetrlik", "createdAt": "2020-02-12T11:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MzE0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensionedNamed.java\nsimilarity index 94%\nrename from kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java\nrename to kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensionedNamed.java\nindex 0a740270c1..9e4546e9c9 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLExtensionedNamed.java\n+++ b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensionedNamed.java\n\n@@ -13,11 +13,11 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.kie.pmml.api.model.abstracts;\n+package org.kie.pmml.commons.model.abstracts;\n \n import java.util.List;\n \n-import org.kie.pmml.api.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n \n public abstract class KiePMMLExtensionedNamed extends KiePMMLNamed {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDQyMA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377664420", "bodyText": "Please remove unnecessary new lines.", "author": "jiripetrlik", "createdAt": "2020-02-11T14:23:51Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model.abstracts;\n+\n+public abstract class KiePMMLTerm extends KiePMMLNamed {\n+\n+    private static final long serialVersionUID = 1452775408881599004L;\n+\n+    public KiePMMLTerm(String name) {\n+        super(name);\n+    }\n+\n+    public abstract Number getCoefficient();\n+", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java\nindex ca6316ad16..33742f9fb1 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java\n+++ b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/model/abstracts/KiePMMLTerm.java\n\n@@ -24,9 +24,4 @@ public abstract class KiePMMLTerm extends KiePMMLNamed {\n     }\n \n     public abstract Number getCoefficient();\n-\n-\n-\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667298", "bodyText": "I would suggest to do not add any test utils to API.", "author": "jiripetrlik", "createdAt": "2020-02-11T14:28:19Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.model;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestUtils {", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MTk3MQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378181971", "bodyText": "I think this module is more intended to be a -common more than API so I would suggest to rename it to -common.\n@gitgabrio wdyt?", "author": "danielezonca", "createdAt": "2020-02-12T11:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NjI1OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378186259", "bodyText": "@danielezonca @jiripetrlik\nRenamed to kie-pmml-commons -as it is actually used for", "author": "gitgabrio", "createdAt": "2020-02-12T11:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java b/kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java\nindex b32eb87c96..d149bef62a 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java\n+++ b/kie-pmml-refactoring/kie-pmml-api/src/test/java/org/kie/pmml/api/model/TestUtils.java\n\n@@ -42,5 +42,4 @@ public class TestUtils {\n             assertEquals(expectedValue, toEvaluate.get());\n         }\n     }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3Nzk2Mw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377677963", "bodyText": "Please remove unnecessary new lines.", "author": "jiripetrlik", "createdAt": "2020-02-11T14:44:48Z", "path": "kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.library.testutils;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import javax.xml.bind.JAXBException;\n+\n+import org.dmg.pmml.PMML;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.xml.sax.SAXException;\n+", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java b/kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\nindex 134f3b4c73..546af0fcd0 100644\n--- a/kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\n+++ b/kie-pmml-refactoring/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\n\n@@ -25,12 +25,8 @@ import org.dmg.pmml.PMML;\n import org.kie.test.util.filesystem.FileUtils;\n import org.xml.sax.SAXException;\n \n-\n-\n-\n public class TestUtils {\n \n-\n     /**\n      * Load a <code>PMML</code> from the given <b>file</b>\n      * @param fileName\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377714471", "bodyText": "I think it is not a proper place to add definition of functional interfaces here. API should serve for methods like loadModel, verifyModel, evaluateModel etc. and not for extending Java 8 implementation. If we really need these utils and interfaces we should move it to some \"common\" module.", "author": "jiripetrlik", "createdAt": "2020-02-11T15:38:09Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDQ4Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378090487", "bodyText": "@jiripetrlik\nHi! I may rename the \"api\" module to \"common\" - anyway I would like to avoid proliferation of unneeded modules: if I follow your logic, in that top-level module I should create a \"common\" package for shared methods/utils, a \"model\" package\" for models, and an api module for interfaces that has to be implemented - and all of them should always -anyway - be declared as dependency together.", "author": "gitgabrio", "createdAt": "2020-02-12T08:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMDQwMQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378100401", "bodyText": "I think API usually contains only interfaces which are supposed to be used by user. It is usually very stable and there should be no breaking changes with new versions. In PMML evaluator I would expect only methods or classes related directly to evalution of PMML in API. Such as loadPMML, evaluatePMML etc.\nIt is not good to use API to share the \"implementation\" with other modules. Users may start using these shared utils methods and it is not possible to change them in the future because of breaking contract. Utils classes etc. which are not supposed to be used directly by users are usually placed in commons modules. But maybe we can find some decomposition where these \"common\" modules will not be necessary.", "author": "jiripetrlik", "createdAt": "2020-02-12T08:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NjUwNQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378186505", "bodyText": "@danielezonca @jiripetrlik\nRenamed to kie-pmml-commons -as it is actually used for", "author": "gitgabrio", "createdAt": "2020-02-12T11:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java\nindex 1b0d002ddb..a9d0da4d41 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java\n+++ b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/functionals/FunctionUtils.java\n\n@@ -33,12 +33,10 @@ public class FunctionUtils {\n     }\n \n     /**\n-     *\n      * @param k1\n      * @param v1\n      * @param k2\n      * @param v2\n-     *\n      * @return\n      */\n     public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMTc1Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377721757", "bodyText": "Please remove newlines.", "author": "jiripetrlik", "createdAt": "2020-02-11T15:48:47Z", "path": "kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.runtime.core.utils;\n+\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.kie.api.pmml.ParameterInfo;\n+\n+/**\n+ * Class used to convert data to/from different formats\n+ */\n+public class Converter {\n+\n+    /**\n+     * <b>Extract</b> the objects from the <code>ParameterInfo</code> values of the given map.\n+     *\n+     * @param parameterMap\n+     * @return\n+     */\n+    public static Map<String, Object> getUnwrappedParametersMap(Map<String, ParameterInfo> parameterMap) {\n+        return parameterMap.entrySet()\n+                .stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey,\n+                                          e -> e.getValue().getValue()));\n+\n+    }\n+", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java b/kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\nindex 0c565806a6..0d7ab8b83e 100644\n--- a/kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n+++ b/kie-pmml-refactoring/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n\n@@ -27,7 +27,6 @@ public class Converter {\n \n     /**\n      * <b>Extract</b> the objects from the <code>ParameterInfo</code> values of the given map.\n-     *\n      * @param parameterMap\n      * @return\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMjI0OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377722248", "bodyText": "Please remove newlines.", "author": "jiripetrlik", "createdAt": "2020-02-11T15:49:30Z", "path": "kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.test.util.filesystem;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesByExtension;\n+import static org.kie.test.util.filesystem.ResourceHelper.getResourcesFromDirectory;\n+\n+public class ResourceHelperTest {\n+\n+    private static final String TEST_FILE = \"TestFile.txt\";\n+", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java b/kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java\nindex 7da3b2d19e..64fd7673e9 100644\n--- a/kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java\n+++ b/kie-test-util/src/test/java/org/kie/test/util/filesystem/ResourceHelperTest.java\n\n@@ -24,7 +24,10 @@ import java.util.stream.Stream;\n \n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n import static org.kie.test.util.filesystem.ResourceHelper.getResourcesByExtension;\n import static org.kie.test.util.filesystem.ResourceHelper.getResourcesFromDirectory;\n \n"}}, {"oid": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "url": "https://github.com/kiegroup/drools/commit/2959221c665ee2eda43afaa8b89baf75829f9f8f", "message": "[DROOLS-4933] Format", "committedDate": "2020-02-12T10:27:46Z", "type": "commit"}, {"oid": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "url": "https://github.com/kiegroup/drools/commit/68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "message": "[DROOLS-4933] Moving kie-pmml-api to kie-pmml-commons", "committedDate": "2020-02-12T11:02:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzU3NA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r377667574", "bodyText": "If this is used only by Drools implementation it should be in a implementation module and not here in the common API. Wdyt?", "author": "danielezonca", "createdAt": "2020-02-11T14:28:45Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+/**\n+ * Class used inside drools. Rules are fired based on the value of status", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMDcxOQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378210719", "bodyText": "@danielezonca\nMoved to \"drooled\" module", "author": "gitgabrio", "createdAt": "2020-02-12T12:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NzU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/KiePMMLStatusHolder.java\nsimilarity index 97%\nrename from kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java\nrename to kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/KiePMMLStatusHolder.java\nindex 6d31e2363f..2d71b47f86 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/KiePMMLStatusHolder.java\n+++ b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/KiePMMLStatusHolder.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.kie.pmml.api;\n+package org.kie.pmml.commons;\n \n /**\n  * Class used inside drools. Rules are fired based on the value of status\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjE2NA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378122164", "bodyText": "Can you please remove it? It is not used", "author": "danielezonca", "createdAt": "2020-02-12T09:14:13Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.annotations;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.RetentionPolicy.SOURCE;\n+\n+/**\n+ * Denotes that a parameter, field or method return value can be null.\n+ * <p>\n+ * When decorating a method call parameter, this denotes that the parameter can\n+ * legitimately be null and the method will gracefully deal with it. Typically\n+ * used on optional parameters.\n+ * <p>\n+ * When decorating a method, this denotes the method might legitimately return\n+ * null.\n+ * <p>\n+ * This is a marker annotation and it has no specific attributes.\n+ *\n+ * @paramDoc This value may be {@code null}.\n+ * @returnDoc This value may be {@code null}.\n+ * @hide\n+ */\n+@Retention(SOURCE)\n+@Target({METHOD, PARAMETER, FIELD})\n+public @interface Nullable {", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMDgxNw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378210817", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-02-12T12:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java\nindex 815e437556..90276d54c4 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java\n+++ b/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/annotations/Nullable.java\n\n@@ -34,7 +34,6 @@ import static java.lang.annotation.RetentionPolicy.SOURCE;\n  * null.\n  * <p>\n  * This is a marker annotation and it has no specific attributes.\n- *\n  * @paramDoc This value may be {@code null}.\n  * @returnDoc This value may be {@code null}.\n  * @hide\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r378177782", "bodyText": "Why Exception instead of RuntimeException? This change has as consequence a sort of \"duplication\" of many Java 8 interfaces (Stream and Function as first).\nIf your goal is to enforce user to manage the errors I would suggest to use one/more RuntimeException internally and then do a try/catch at public method level and generate the checked exception only there. In this way you should be able to avoid interface duplication. Wdyt?", "author": "danielezonca", "createdAt": "2020-02-12T10:55:44Z", "path": "kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.exceptions;\n+\n+public class KiePMMLException extends Exception {", "originalCommit": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4MTMwNQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379381305", "bodyText": "@danielezonca\nI'm not convinced of that. I understand your point, but at the same time it is not clear where such boundaries should be drawn. Putting them too \"deep\" would not change that much, but putting them too \"high\" would vanify the scope of the checked exception", "author": "gitgabrio", "createdAt": "2020-02-14T11:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTg1OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r379411858", "bodyText": "I would say that the boundary should be public (= end-user) API. My proposal is to limit this checked exception at PMMLRuntime level. It should be enough to try/catch runtime exceptions in PMMLRuntimeImpl and wrap them in the checked exception. Wdyt?\nEDIT: let me add that I'm not a fan of checked exception so I would like to remove them completely but I'm trying to preserve them without add too much overhead (= interface duplication)", "author": "danielezonca", "createdAt": "2020-02-14T12:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNzM3Mg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380137372", "bodyText": "@gitgabrio @danielezonca\nI have no strong opinion here. But I would also vote for avoiding of checked exceptions, because I also don't like them.\nFor example if I recall correctly it was also not recommended in Clean Code book, because:\nUsing checked exceptions comes with a cost - it breaks the open-closed principle: You have to declare the checked exception (in throws clause) in signatures of all methods between the throwing and catching the exception.\nBut I'm not sure. As I've said I have no strong opinion here.", "author": "jiripetrlik", "createdAt": "2020-02-17T11:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Nzc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "chunk": "diff --git a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\nsimilarity index 95%\nrename from kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java\nrename to kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\nindex e04e86b61c..ebf503a293 100644\n--- a/kie-pmml-refactoring/kie-pmml-api/src/main/java/org/kie/pmml/api/exceptions/KiePMMLException.java\n+++ b/kie-pmml-refactoring/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\n\n@@ -13,7 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.kie.pmml.api.exceptions;\n+package org.kie.pmml.commons.exceptions;\n \n public class KiePMMLException extends Exception {\n \n"}}, {"oid": "a163b2d51d89d7e02401f198939201edc1123bd7", "url": "https://github.com/kiegroup/drools/commit/a163b2d51d89d7e02401f198939201edc1123bd7", "message": "[DROOLS-4933] Renamed kie-pmml-refactoring to kie-pmml-new", "committedDate": "2020-02-12T11:28:09Z", "type": "commit"}, {"oid": "85f13b94096cb28081a72ddb75d9864088acf103", "url": "https://github.com/kiegroup/drools/commit/85f13b94096cb28081a72ddb75d9864088acf103", "message": "[DROOLS-4933] Fixed package in test. Removed KiePMMLStatusHolder.java", "committedDate": "2020-02-12T12:13:59Z", "type": "commit"}, {"oid": "19b58a8c38d85d7537398974de0738c77a8cf7ff", "url": "https://github.com/kiegroup/drools/commit/19b58a8c38d85d7537398974de0738c77a8cf7ff", "message": "[DROOLS-4933] Renamed library module to compiler", "committedDate": "2020-02-14T08:04:44Z", "type": "commit"}, {"oid": "75f692667aaa512fe92155c7800a47f0b25d9dc8", "url": "https://github.com/kiegroup/drools/commit/75f692667aaa512fe92155c7800a47f0b25d9dc8", "message": "[DROOLS-4933] Renamed runtime module to evaluator", "committedDate": "2020-02-14T08:10:27Z", "type": "commit"}, {"oid": "1b8fe153626fce559ef277bc23c00647476bdd19", "url": "https://github.com/kiegroup/drools/commit/1b8fe153626fce559ef277bc23c00647476bdd19", "message": "[DROOLS-4933] Renamed library package to compiler", "committedDate": "2020-02-14T08:18:49Z", "type": "commit"}, {"oid": "7ddd8fcdec57ddeae5aa89384963d10f93c1dd58", "url": "https://github.com/kiegroup/drools/commit/7ddd8fcdec57ddeae5aa89384963d10f93c1dd58", "message": "[DROOLS-4933] Renamed runtime package to evaluator", "committedDate": "2020-02-14T08:24:00Z", "type": "commit"}, {"oid": "40187e1ceb19143daaefeeed50010f1dfca7e7d3", "url": "https://github.com/kiegroup/drools/commit/40187e1ceb19143daaefeeed50010f1dfca7e7d3", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-14T08:25:02Z", "type": "commit"}, {"oid": "95b0a3c09b334321ea1d8d340d7412d98b6683d0", "url": "https://github.com/kiegroup/drools/commit/95b0a3c09b334321ea1d8d340d7412d98b6683d0", "message": "[DROOLS-4933] Moved dependency management to parent pom", "committedDate": "2020-02-14T11:13:26Z", "type": "commit"}, {"oid": "a3d979421ea8bcfcb5b16ce98b0586a99b24cbfc", "url": "https://github.com/kiegroup/drools/commit/a3d979421ea8bcfcb5b16ce98b0586a99b24cbfc", "message": "[DROOLS-4933] Reformat code", "committedDate": "2020-02-14T11:30:36Z", "type": "commit"}, {"oid": "79476275bb34a9dde4c25e5867febd926fa35e59", "url": "https://github.com/kiegroup/drools/commit/79476275bb34a9dde4c25e5867febd926fa35e59", "message": "[DROOLS-4933] Reorganized Exception management. Renamed groupId org.drools -> org.kie", "committedDate": "2020-02-17T10:25:49Z", "type": "commit"}, {"oid": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "url": "https://github.com/kiegroup/drools/commit/ebb66276a244d2cf18c951ebdc260b7b1f584da7", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-17T10:26:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148079", "bodyText": "Can we change also this to RuntimeException?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:15:03Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ */\n+public class ExternalException extends Exception {", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NDY5NQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380194695", "bodyText": "@jiripetrlik\nHi. Nope. This is meant exactly to be a checked exception.", "author": "gitgabrio", "createdAt": "2020-02-17T13:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzNjIxMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380536212", "bodyText": "@gitgabrio Checked exception are an outdated concept, no JVM language other than Java support them and since Java 8 they're practically deprecated also in Java since they play horribly with lambdas. Checked exception are useless verbosity in the best case and plain evil in the worst one. Please remove ALL checked exception from this pull request. Thanks.", "author": "mariofusco", "createdAt": "2020-02-18T09:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java\nindex 78d36077e5..cf73943340 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/ExternalException.java\n\n@@ -16,9 +16,9 @@\n package org.kie.pmml.commons.exceptions;\n \n /**\n- * Checked Exceptions wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n+ * <code>RuntimeException</code>s wrapping all <b>not-KiePMML</b> ones at <i>customer</i> API boundaries\n  */\n-public class ExternalException extends Exception {\n+public class ExternalException extends RuntimeException {\n \n     public ExternalException(String message, Throwable cause) {\n         super(message, cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODYwMw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380148603", "bodyText": "Can we change also this to RuntimeException?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:16:08Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.exceptions;\n+\n+/**\n+ * Checked Exceptions to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n+ */\n+public class KiePMMLException extends Exception {", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NDgzOA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380194838", "bodyText": "@jiripetrlik\nHi. Nope. This is meant exactly to be a checked exception.", "author": "gitgabrio", "createdAt": "2020-02-17T13:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\nindex 809eb8ade4..0d4bbe5037 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/exceptions/KiePMMLException.java\n\n@@ -16,9 +16,9 @@\n package org.kie.pmml.commons.exceptions;\n \n /**\n- * Checked Exceptions to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n+ * <code>RuntimeException</code>s to be wrapping to <b>unchecked</b> ones at <i>customer</i> API boundaries\n  */\n-public class KiePMMLException extends Exception {\n+public class KiePMMLException extends RuntimeException {\n \n     public KiePMMLException(String message, Throwable cause) {\n         super(message, cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380152532", "bodyText": "I'm not sure about adding these functional utils into code. Can't we use some library instead?\n@mariofusco\nWhat do you think? Can you help us to find some library with these functional utils?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:25:06Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMTIxMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380211212", "bodyText": "@jiripetrlik @mariofusco @danielezonca\nFine for me if there is already such functionality in the classpath.\nAnyway, a couple of things to keep in mind\n\nit must not add dependency on any other drools module\nit is a bad practice to put new libraries inside projects only to use one single feature of such libraries - duplicated code is not bad by itself, if it avoid creating/increasing coupling between otherwise unrelated code\nWatch carefully about \"functional monolith masked behind modular layout\"", "author": "gitgabrio", "createdAt": "2020-02-17T14:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjQwOQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380222409", "bodyText": "As I wrote. I'm not sure whether something like that exists. I've added it mostly as possible point for discussion.", "author": "jiripetrlik", "createdAt": "2020-02-17T14:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MjUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\ndeleted file mode 100644\nindex 627f20cb7b..0000000000\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\n+++ /dev/null\n\n@@ -1,85 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.commons.functionals;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class FunctionUtils {\n-\n-    /**\n-     * Returns an <code>HashMap</code> with the given key/value pairs\n-     * @param k1\n-     * @param v1\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @param k3\n-     * @param v3\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2, K k3, V v3) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-            put(k3, v3);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @param k3\n-     * @param v3\n-     * @param k4\n-     * @param v4\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-            put(k3, v3);\n-            put(k4, v4);\n-        }};\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380159552", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:41:25Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_INVALID-VALUE-TREATMENT-METHOD>INVALID-VALUE-TREATMENT-METHOD</a>\n+ */\n+public enum INVALID_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    INVALID_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static INVALID_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(INVALID_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNTM2OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380205369", "bodyText": "@jiripetrlik\nHi Jiri. What would you like to test? Those are five basic java calls in chain:\n\nENUM.values\nArrays.stream\nStream.filter\nStream.findFirst\nOptional.orElseThrow", "author": "gitgabrio", "createdAt": "2020-02-17T14:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDQxMA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380210410", "bodyText": "@gitgabrio\nWe can add some simple test whether it works as expected.\n\npositive example - if filter finds something\nnegative - if filter does not and exception is thrown", "author": "jiripetrlik", "createdAt": "2020-02-17T14:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNzgzMw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380227833", "bodyText": "@jiripetrlik\nHi Jiri. I understand you point, but I'm not fully convinced.\nBasically, behind all the \"wrapping\", the test you are proposing would just verify that String.equals(String) behave as expected. It is true that there are a series of method chained together, but each of them is a standard java invocation - the result of which is the argument for the next one.\nIMO, it is the client code that has to be tested in this situation - I mean if a \"compiler\" call this one, we should verify the \"caller\" is not invoking it with wrong value: wdyt ?\nAs a side note, what I'm gonna do is to replace that name.equals with Objects.equals", "author": "gitgabrio", "createdAt": "2020-02-17T14:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NjUyOA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380256528", "bodyText": "Agree with you. We will probably test this on different level.", "author": "jiripetrlik", "createdAt": "2020-02-17T15:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2OTcyMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380669722", "bodyText": "It is recommended that code has sufficient unit test coverage. What Jiri proposes is exactly that. \"Hi Jiri. What would you like to test? Those are five basic java calls in chain\" - exactly those 5 basic Java calls in a chain should be tested. In future, someone might change this so that it doesn't work correctly. Then we will miss the test. The code should have as big unit test coverage as possible. I know that it is sometimes a pain to write them, but they are useful, although they may not look like that.", "author": "baldimir", "createdAt": "2020-02-18T13:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java\nindex 4eddb6878d..27b19bd6f9 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/INVALID_VALUE_TREATMENT_METHOD.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDA4MQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160081", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:42:41Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_FIELD-USAGE-TYPE>FIELD-USAGE-TYPE</a>\n+ */\n+public enum FIELD_USAGE_TYPE {\n+\n+    ACTIVE(\"active\"),\n+    PREDICTED(\"predicted\"),\n+    TARGET(\"target\"),\n+    SUPPLEMENTARY(\"supplementary\"),\n+    GROUP(\"group\"),\n+    ORDER(\"order\"),\n+    FREQUENCY_WEIGHT(\"frequencyWeight\"),\n+    ANALYSIS_WEIGHT(\"analysisWeight\");\n+\n+    private String name;\n+\n+    FIELD_USAGE_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static FIELD_USAGE_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(FIELD_USAGE_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find FIELD_USAGE_TYPE with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java\nindex 262b162061..bbd0db2545 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/FIELD_USAGE_TYPE.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDEzMg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160132", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:42:48Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdType_MINING-FUNCTION>MINING-FUNCTION</a>\n+ */\n+public enum MINING_FUNCTION {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MINING_FUNCTION(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MINING_FUNCTION byName(String name) throws KieEnumException {\n+        return Arrays.stream(MINING_FUNCTION.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java\nindex bbca5594d2..4ca4db7c64 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MINING_FUNCTION.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDE3Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160177", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:42:54Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD>MISSING-VALUE_TREATMENT-METHOD</a>\n+ */\n+public enum MISSING_VALUE_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    MISSING_VALUE_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static MISSING_VALUE_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(MISSING_VALUE_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java\nindex 0ca70f8c25..fd43e2e6d0 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/MISSING_VALUE_TREATMENT_METHOD.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDIxOQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160219", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:43:00Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-2-1/DataDictionary.html#xsdType_OPTYPE>OPTYPE</a>\n+ */\n+public enum OP_TYPE {\n+\n+    CATEGORICAL(\"categorical\"),\n+    ORDINAL(\"ordinal\"),\n+    CONTINUOUS(\"continuous\");\n+\n+    private String name;\n+\n+    OP_TYPE(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OP_TYPE byName(String name) throws KieEnumException {\n+        return Arrays.stream(OP_TYPE.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java\nindex c48eaa3aa1..d991855aa1 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OP_TYPE.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDMxMw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160313", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:43:14Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_OUTLIER-TREATMENT-METHOD>OUTLIER-TREATMENT-METHOD</a>\n+ */\n+public enum OUTLIER_TREATMENT_METHOD {\n+\n+    ASSOCIATION_RULES(\"associationRules\"),\n+    SEQUENCES(\"sequences\"),\n+    CLASSIFICATION(\"classification\"),\n+    REGRESSION(\"regression\"),\n+    CLUSTERING(\"clustering\"),\n+    TIME_SERIES(\"timeSeries\"),\n+    MIXED(\"mixed\");\n+\n+    private String name;\n+\n+    OUTLIER_TREATMENT_METHOD(String name) {\n+        this.name = name;\n+    }\n+\n+    public static OUTLIER_TREATMENT_METHOD byName(String name) throws KieEnumException {\n+        return Arrays.stream(OUTLIER_TREATMENT_METHOD.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MINING_FUNCTION with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java\nindex 4702b983e1..0965a45bc3 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/OUTLIER_TREATMENT_METHOD.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDM0OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160348", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:43:19Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * PMML models\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdGroup_MODEL-ELEMENT>MODEL-ELEMENT</a>\n+ */\n+public enum PMML_MODEL {\n+\n+    ANOMALY_DETECTION_MODEL(\"AnomalyDetectionModel\"),\n+    ASSOCIATION_MODEL(\"AssociationModel\"),\n+    BAYESIAN_NETWORK_MODEL(\"BayesianNetworkModel\"),\n+    BASELINE_MODEL(\"BaselineModel\"),\n+    CLUSTERING_MODEL(\"ClusteringModel\"),\n+    GAUSSIAN_PROCESS_MODEL(\"GaussianProcessModel\"),\n+    GENERAL_REGRESSION_MODEL(\"GeneralRegressionModel\"),\n+    MINING_MODEL(\"MiningModel\"),\n+    NAIVEBAYES_MODEL(\"NaiveBayesModel\"),\n+    NEARESTNEIGHBOR_MODEL(\"NearestNeighborModel\"),\n+    NEURALNETWORK_MODEL(\"NeuralNetworkModel\"),\n+    REGRESSION_MODEL(\"RegressionModel\"),\n+    RULESET_MODEL(\"RulesetModel\"),\n+    SEQUENCE_MODEL(\"SequenceModel\"),\n+    SCORECARD_MODEL(\"ScorecardModel\"),\n+    SUPPORT_VECTOR_MACHINE_MODEL(\"SupportVectorMachineModel\"),\n+    TEXT_MODEL(\"TextModel\"),\n+    TIME_SERIES_MODEL(\"TimeSeriesModel\"),\n+    TREE_MODEL(\"TreeModel\");\n+\n+    private String name;\n+\n+    PMML_MODEL(String name) {\n+        this.name = name;\n+    }\n+\n+    public static PMML_MODEL byName(String name) throws KieEnumException {\n+        return Arrays.stream(PMML_MODEL.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find PMMLModelType with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java\nindex c511750eec..57c8212c51 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/PMML_MODEL.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDQzOQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160439", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:43:31Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/DataDictionary.html#xsdElement_Value>Value</a>\n+ */\n+public enum VALUE_PROPERTY {\n+\n+    VALID(\"valid\"),\n+    INVALID(\"invalid\"),\n+    MISSING(\"missing\");\n+\n+    private String name;\n+\n+    VALUE_PROPERTY(String name) {\n+        this.name = name;\n+    }\n+\n+    public static VALUE_PROPERTY byName(String name) throws KieEnumException {\n+        return Arrays.stream(VALUE_PROPERTY.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find VALUE_PROPERTY with name: \" + name));", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java\nindex 1a7634497f..4b742916fc 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/enums/VALUE_PROPERTY.java\n\n@@ -16,6 +16,7 @@\n package org.kie.pmml.commons.model.enums;\n \n import java.util.Arrays;\n+import java.util.Objects;\n \n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDc5OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160799", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:44:24Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/factories/KiePMMLExtensionFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.factories;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.Extension;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+\n+public class KiePMMLExtensionFactory {\n+\n+    private KiePMMLExtensionFactory() {\n+    }\n+\n+    public static List<KiePMMLExtension> getKiePMMLExtensions(List<Extension> extensions) {\n+        return extensions.stream().map(KiePMMLExtensionFactory::getKiePMMLExtension).collect(Collectors.toList());", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDk3MQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380160971", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:44:48Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.interfaces.FunctionalWrapperFactory.throwingFunctionWrapper;\n+\n+public class KiePMMLModelRetriever {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLModelRetriever.class.getName());\n+    private static final ModelImplementationProviderFinder modelImplementationProviderFinder = new ModelImplementationProviderFinderImpl();\n+\n+    /**\n+     * Read the given <code>DataDictionary</code> and <code>Model</code>> to returns a <code>Optional&lt;KiePMMLModel&gt;</code>\n+     * @param dataDictionary\n+     * @param model\n+     * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n+     * @return\n+     * @throws KiePMMLInternalException\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<KiePMMLModel> getFromDataDictionaryAndModel(DataDictionary dataDictionary, Model model, Object kBuilder) throws KiePMMLException {\n+        logger.info(\"getFromModel {}\", model);", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODgzNg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208836", "bodyText": "This would be an \"integration\" test. Without any real implementation, hard to see what/how to test.", "author": "gitgabrio", "createdAt": "2020-02-17T14:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MDk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4da0fde1e22a273635df59fdbaa58b8e26319911", "chunk": "diff --git a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\nindex 79cdcbb690..b435993aca 100644\n--- a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n+++ b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n\n@@ -44,9 +44,9 @@ public class KiePMMLModelRetriever {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Optional<KiePMMLModel> getFromDataDictionaryAndModel(DataDictionary dataDictionary, Model model, Object kBuilder) throws KiePMMLException {\n-        logger.info(\"getFromModel {}\", model);\n+        logger.debug(\"getFromDataDictionaryAndModel {}\", model);\n         final PMML_MODEL pmmlMODEL = PMML_MODEL.byName(model.getClass().getSimpleName());\n-        logger.info(\"pmmlModelType {}\", pmmlMODEL);\n+        logger.debug(\"pmmlModelType {}\", pmmlMODEL);\n         return modelImplementationProviderFinder.getImplementations(false)\n                 .stream()\n                 .filter(implementation -> pmmlMODEL.equals(implementation.getPMMLModelType()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTA4OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161088", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:45:03Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.info(\"getImplementations {}\", refresh);", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODA3Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208077", "bodyText": "@jiripetrlik\nThis would be an \"integration\" test to ServiceLoader.reload () and ServiceLoader.iterator(). I think it is already covered inside integration test module", "author": "gitgabrio", "createdAt": "2020-02-17T14:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "4da0fde1e22a273635df59fdbaa58b8e26319911", "chunk": "diff --git a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\nindex 5390b17e4e..41cb22fe6f 100644\n--- a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\n+++ b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\n\n@@ -37,12 +37,12 @@ public class ModelImplementationProviderFinderImpl implements ModelImplementatio\n     @Override\n     @SuppressWarnings(\"rawtypes\")\n     public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n-        logger.info(\"getImplementations {}\", refresh);\n+        logger.debug(\"getImplementations {}\", refresh);\n         List<ModelImplementationProvider> toReturn = new ArrayList<>();\n         Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n         providers.forEachRemaining(toReturn::add);\n-        logger.info(\"toReturn {} {}\", toReturn, toReturn.size());\n-        toReturn.forEach(provider -> logger.info(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n+        toReturn.forEach(provider -> logger.debug(\"{} : {}\", provider.getPMMLModelType(), provider));\n         return toReturn;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380161153", "bodyText": "Can we add test for this method?", "author": "jiripetrlik", "createdAt": "2020-02-17T12:45:13Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.utils;\n+\n+import java.util.Optional;\n+\n+import org.dmg.pmml.MiningField;\n+import org.dmg.pmml.Model;\n+\n+/**\n+ * Class to provide common methods to interact with <code>Model</code>\n+ */\n+public class ModelUtils {\n+\n+    /**\n+     * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n+     * <p>\n+     * While the xsd schema does not strictly enforce this, it seems that <b>by convention</b> majority of models has only one target.\n+     * <p>\n+     * (see https://github.com/jpmml/jpmml-evaluator/issues/64 discussion)\n+     * @param model\n+     * @return\n+     */\n+    public static Optional<String> getTargetField(Model model) {\n+        return model.getMiningSchema().getMiningFields().stream()", "originalCommit": "ebb66276a244d2cf18c951ebdc260b7b1f584da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwODE2Mg==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380208162", "bodyText": "Will do", "author": "gitgabrio", "createdAt": "2020-02-17T14:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MTE2NQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380291165", "bodyText": "@jiripetrlik\nHi! Just pushed tests for that class.", "author": "gitgabrio", "createdAt": "2020-02-17T16:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTE1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "658208fe9d7b1e357097b8d338a07966bd7c71f0", "chunk": "diff --git a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\nindex 9602cdf3ad..89ed65b8d7 100644\n--- a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\n+++ b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\n\n@@ -15,16 +15,28 @@\n  */\n package org.kie.pmml.compiler.commons.utils;\n \n+import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n \n+import org.dmg.pmml.DataDictionary;\n import org.dmg.pmml.MiningField;\n import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLNameOpType;\n+import org.kie.pmml.commons.model.enums.OP_TYPE;\n+\n+import static org.kie.pmml.commons.interfaces.FunctionalWrapperFactory.throwingFunctionWrapper;\n \n /**\n  * Class to provide common methods to interact with <code>Model</code>\n  */\n public class ModelUtils {\n \n+    private ModelUtils() {\n+    }\n+\n     /**\n      * Return an <code>Optional</code> with the name of the field whose <b>usageType</b> is <code>TARGET</code> or <code>PREDICTED</code>\n      * <p>\n"}}, {"oid": "1d304e0b98817608a0e1f049a19adb1d82bd2357", "url": "https://github.com/kiegroup/drools/commit/1d304e0b98817608a0e1f049a19adb1d82bd2357", "message": "[DROOLS-4933] Make use of Objects.equals inside enums", "committedDate": "2020-02-17T15:41:30Z", "type": "commit"}, {"oid": "658208fe9d7b1e357097b8d338a07966bd7c71f0", "url": "https://github.com/kiegroup/drools/commit/658208fe9d7b1e357097b8d338a07966bd7c71f0", "message": "[DROOLS-4933] Implemented KiePMMLNameOpType. Add tests for ModelUtils. Moved util class to compiler-commons", "committedDate": "2020-02-17T16:57:12Z", "type": "commit"}, {"oid": "4da0fde1e22a273635df59fdbaa58b8e26319911", "url": "https://github.com/kiegroup/drools/commit/4da0fde1e22a273635df59fdbaa58b8e26319911", "message": "[DROOLS-4933] Changed log level of messages printed out", "committedDate": "2020-02-18T06:53:28Z", "type": "commit"}, {"oid": "966683e9c6efac56d59136944963730afdf91910", "url": "https://github.com/kiegroup/drools/commit/966683e9c6efac56d59136944963730afdf91910", "message": "[DROOLS-4933] Add test to compiler", "committedDate": "2020-02-18T08:35:43Z", "type": "commit"}, {"oid": "cda10f9440b1b5bb604d83b17c93deec249ae7b0", "url": "https://github.com/kiegroup/drools/commit/cda10f9440b1b5bb604d83b17c93deec249ae7b0", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-18T08:40:30Z", "type": "commit"}, {"oid": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "url": "https://github.com/kiegroup/drools/commit/3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "message": "[DROOLS-4933] Updated version", "committedDate": "2020-02-18T08:47:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDU0NQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540545", "bodyText": "Is this useful? Even if it is please change the implementation: you're implicitly creating a subclass of HashMap at each invocation in this way.", "author": "mariofusco", "createdAt": "2020-02-18T09:11:15Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.functionals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FunctionUtils {\n+\n+    /**\n+     * Returns an <code>HashMap</code> with the given key/value pairs\n+     * @param k1\n+     * @param v1\n+     * @return\n+     */\n+    public static <K, V> Map<K, V> mapOf(K k1, V v1) {\n+        return new HashMap<K, V>() {{", "originalCommit": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\ndeleted file mode 100644\nindex 627f20cb7b..0000000000\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\n+++ /dev/null\n\n@@ -1,85 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.commons.functionals;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class FunctionUtils {\n-\n-    /**\n-     * Returns an <code>HashMap</code> with the given key/value pairs\n-     * @param k1\n-     * @param v1\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @param k3\n-     * @param v3\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2, K k3, V v3) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-            put(k3, v3);\n-        }};\n-    }\n-\n-    /**\n-     * @param k1\n-     * @param v1\n-     * @param k2\n-     * @param v2\n-     * @param k3\n-     * @param v3\n-     * @param k4\n-     * @param v4\n-     * @return\n-     */\n-    public static <K, V> Map<K, V> mapOf(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4) {\n-        return new HashMap<K, V>() {{\n-            put(k1, v1);\n-            put(k2, v2);\n-            put(k3, v3);\n-            put(k4, v4);\n-        }};\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MDg5OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380540898", "bodyText": "Demonstration that checked exceptions are bogus.", "author": "mariofusco", "createdAt": "2020-02-18T09:11:51Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleConsumer;\n+import java.util.function.Function;\n+import java.util.function.ToDoubleFunction;\n+\n+/**\n+ * Factory for <b>wrappers</b> around custom <b>exception-throwing</b> functional interfaces\n+ */\n+public class FunctionalWrapperFactory {\n+\n+    /**\n+     * <code>Function</code> <code>wrapper</code> for exception-throwing <code>Function</code>\n+     * @param throwingFunction\n+     * @param <T>\n+     * @param <R>\n+     * @param <E>\n+     * @return\n+     * @throws E\n+     */\n+    public static <T, R, E extends Exception> Function<T, R> throwingFunctionWrapper(ThrowingFunction<T, R, E> throwingFunction) throws E {\n+        return t -> {\n+            try {\n+                return throwingFunction.apply(t);\n+            } catch (Exception e) {", "originalCommit": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java\ndeleted file mode 100644\nindex 622b8d5a98..0000000000\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.commons.interfaces;\n-\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n-import java.util.function.DoubleConsumer;\n-import java.util.function.Function;\n-import java.util.function.ToDoubleFunction;\n-\n-/**\n- * Factory for <b>wrappers</b> around custom <b>exception-throwing</b> functional interfaces\n- */\n-public class FunctionalWrapperFactory {\n-\n-    /**\n-     * <code>Function</code> <code>wrapper</code> for exception-throwing <code>Function</code>\n-     * @param throwingFunction\n-     * @param <T>\n-     * @param <R>\n-     * @param <E>\n-     * @return\n-     * @throws E\n-     */\n-    public static <T, R, E extends Exception> Function<T, R> throwingFunctionWrapper(ThrowingFunction<T, R, E> throwingFunction) throws E {\n-        return t -> {\n-            try {\n-                return throwingFunction.apply(t);\n-            } catch (Exception e) {\n-                throwActualException(e);\n-                return null;\n-            }\n-        };\n-    }\n-\n-    /**\n-     * <code>Function</code> <code>wrapper</code> for exception-throwing <code>ToDoubleFunction</code>\n-     * @param throwingToDoubleFunction\n-     * @param <T>\n-     * @param <E>\n-     * @return\n-     * @throws E\n-     */\n-    public static <T, E extends Exception> ToDoubleFunction<T> throwingToDoubleFunctionWrapper(ThrowingToDoubleFunction<T, E> throwingToDoubleFunction) throws E {\n-        return t -> {\n-            try {\n-                return throwingToDoubleFunction.applyAsDouble(t);\n-            } catch (Exception e) {\n-                throwActualException(e);\n-                return -1;\n-            }\n-        };\n-    }\n-\n-    /**\n-     * <code>Consumer</code> <code>wrapper</code> for exception-throwing <code>Consumer</code>\n-     * @param throwingConsumer\n-     * @param <T>\n-     * @param <E>\n-     * @return\n-     * @throws E\n-     */\n-    public static <T, E extends Exception> Consumer<T> throwingConsumerWrapper(ThrowingConsumer<T, E> throwingConsumer) throws E {\n-        return t -> {\n-            try {\n-                throwingConsumer.accept(t);\n-            } catch (Exception e) {\n-                throwActualException(e);\n-            }\n-        };\n-    }\n-\n-    /**\n-     * <code>DoubleConsumer</code> <code>wrapper</code> for exception-throwing <code>DoubleConsumer</code>\n-     * @param throwingConsumer\n-     * @param <E>\n-     * @return\n-     * @throws E\n-     */\n-    public static <E extends Exception> DoubleConsumer throwingDoubleConsumerWrapper(ThrowingDoubleConsumer<E> throwingConsumer) throws E {\n-        return t -> {\n-            try {\n-                throwingConsumer.accept(t);\n-            } catch (Exception e) {\n-                throwActualException(e);\n-            }\n-        };\n-    }\n-\n-    /**\n-     * <code>BiConsumer</code> <code>wrapper</code> for exception-throwing <code>BiConsumer</code>\n-     * @param throwingBiConsumer\n-     * @param <T>\n-     * @param <U>\n-     * @param <E>\n-     * @return\n-     * @throws E\n-     */\n-    public static <T, U, E extends Exception> BiConsumer<T, U> throwingBiConsumerWrapper(ThrowingBiConsumer<T, U, E> throwingBiConsumer) throws E {\n-        return (t, u) -> {\n-            try {\n-                throwingBiConsumer.accept(t, u);\n-            } catch (Exception e) {\n-                throwActualException(e);\n-            }\n-        };\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static <E extends Exception> void throwActualException(Exception exception) throws E {\n-        throw (E) exception;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MTI3OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380541278", "bodyText": "At this point I want to die.", "author": "mariofusco", "createdAt": "2020-02-18T09:12:33Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.interfaces;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Exception-throwing <code>BiConsumer</code>\n+ */\n+@FunctionalInterface\n+public interface ThrowingBiConsumer<T, U, E extends Exception> {", "originalCommit": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java\ndeleted file mode 100644\nindex c9337674f9..0000000000\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingBiConsumer.java\n+++ /dev/null\n\n@@ -1,35 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.commons.interfaces;\n-\n-import java.util.Objects;\n-\n-/**\n- * Exception-throwing <code>BiConsumer</code>\n- */\n-@FunctionalInterface\n-public interface ThrowingBiConsumer<T, U, E extends Exception> {\n-\n-    void accept(T var1, U var2) throws E;\n-\n-    default ThrowingBiConsumer<T, U, E> andThen(ThrowingBiConsumer<? super T, ? super U, E> after) {\n-        Objects.requireNonNull(after);\n-        return (l, r) -> {\n-            this.accept(l, r);\n-            after.accept(l, r);\n-        };\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjExOQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380542119", "bodyText": "Should this be Serializable? If so you need an empty constructor. If not make all these fields final.", "author": "mariofusco", "createdAt": "2020-02-18T09:14:04Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.model;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension>Extension</a>\n+ */\n+public class KiePMMLExtension implements Serializable {\n+\n+    private static final long serialVersionUID = -5895956619311871049L;\n+    private String extender;", "originalCommit": "3f92688c07d1baeaf84844ca8bb0920f4b61c1b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MTY4Nw==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380551687", "bodyText": "@mariofusco\nFixed with last commit", "author": "gitgabrio", "createdAt": "2020-02-18T09:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0MjExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "67a31512025662961a5df697fdcbbafddbc01878", "chunk": "diff --git a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\nindex 10ab58a5bd..20db52e8a6 100644\n--- a/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n+++ b/kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n\n@@ -29,6 +29,10 @@ public class KiePMMLExtension implements Serializable {\n     private String value;\n     private List<Object> content;\n \n+    public KiePMMLExtension() {\n+        // Serialization\n+    }\n+\n     public KiePMMLExtension(String extender, String name, String value, List<Object> content) {\n         this.extender = extender;\n         this.name = name;\n"}}, {"oid": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "url": "https://github.com/kiegroup/drools/commit/8d2100bc3bf118fba39c99ee364279725b5d2d91", "message": "[DROOLS-4933] Unchecking all exceptions", "committedDate": "2020-02-18T09:23:17Z", "type": "commit"}, {"oid": "67a31512025662961a5df697fdcbbafddbc01878", "url": "https://github.com/kiegroup/drools/commit/67a31512025662961a5df697fdcbbafddbc01878", "message": "[DROOLS-4933] Adding empty constructor to Serialiazables", "committedDate": "2020-02-18T09:28:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzIyNQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553225", "bodyText": "This generic doesn't seem to be useful since you cannot use it on the call site and then obliges you to add those [at]SuppressWarning annotation.", "author": "mariofusco", "createdAt": "2020-02-18T09:33:02Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.api.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.exceptions.KiePMMLInternalException;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+/**\n+ * API for actual PMML model implementations\n+ */\n+public interface ModelImplementationProvider<T extends Model, E extends KiePMMLModel> {", "originalCommit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NjU1OA==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380586558", "bodyText": "@mariofusco\nReason for the generic at interface signature is to allow inside actual implementations  (e.g.):\npublic KiePMMLRegressionModel getKiePMMLModel(DataDictionary dataDictionary, RegressionModel model, Object kBuilder) (concrete types as returns and parameters)\nI could not find a proper/clean way to achieve that putting generic definition to the method itself. Could you please suggest one, if it is doable ? Thx.", "author": "gitgabrio", "createdAt": "2020-02-18T10:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzIyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MzY4OQ==", "url": "https://github.com/kiegroup/drools/pull/2757#discussion_r380553689", "bodyText": "If you remove the generic on the ModelImplementationProvider as I suggested above you can get rid of this annotation.", "author": "mariofusco", "createdAt": "2020-02-18T09:33:53Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.compiler.commons.implementations;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>ModelImplementationProviderFinder</code> using Java SPI\n+ */\n+public class ModelImplementationProviderFinderImpl implements ModelImplementationProviderFinder {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ModelImplementationProviderFinderImpl.class.getName());\n+\n+    private ServiceLoader<ModelImplementationProvider> loader = ServiceLoader.load(ModelImplementationProvider.class);\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public List<ModelImplementationProvider> getImplementations(boolean refresh) {\n+        logger.debug(\"getImplementations {}\", refresh);\n+        List<ModelImplementationProvider> toReturn = new ArrayList<>();\n+        Iterator<ModelImplementationProvider> providers = getProviders(refresh);\n+        providers.forEachRemaining(toReturn::add);\n+        logger.debug(\"toReturn {} {}\", toReturn, toReturn.size());\n+        toReturn.forEach(provider -> logger.debug(\"{} : {}\", provider.getPMMLModelType(), provider));\n+        return toReturn;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "originalCommit": "8d2100bc3bf118fba39c99ee364279725b5d2d91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d13258cf5e928c7d798c3504501f5fc3c231d51", "chunk": "diff --git a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\nindex 41cb22fe6f..18831cc8c9 100644\n--- a/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\n+++ b/kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/ModelImplementationProviderFinderImpl.java\n\n@@ -20,6 +20,8 @@ import java.util.Iterator;\n import java.util.List;\n import java.util.ServiceLoader;\n \n+import org.dmg.pmml.Model;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n import org.kie.pmml.compiler.api.provider.ModelImplementationProviderFinder;\n import org.slf4j.Logger;\n"}}, {"oid": "3d13258cf5e928c7d798c3504501f5fc3c231d51", "url": "https://github.com/kiegroup/drools/commit/3d13258cf5e928c7d798c3504501f5fc3c231d51", "message": "[DROOLS-4933] Reducing usage of SuppressWarnings", "committedDate": "2020-02-18T11:09:08Z", "type": "commit"}]}