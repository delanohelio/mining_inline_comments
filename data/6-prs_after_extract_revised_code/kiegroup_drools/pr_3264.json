{"pr_number": 3264, "pr_title": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events", "pr_createdAt": "2020-11-24T16:41:10Z", "pr_url": "https://github.com/kiegroup/drools/pull/3264", "timeline": [{"oid": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "url": "https://github.com/kiegroup/drools/commit/a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding listener for signal and messages", "committedDate": "2020-11-24T19:09:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzEwNA==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r530887104", "bodyText": "can be replaced with method reference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        notifyAllListeners(event, (l, e) -> l.onSignal(e));\n          \n          \n            \n                        notifyAllListeners(event, ProcessEventListener::onSignal);", "author": "afalhambra", "createdAt": "2020-11-26T09:28:20Z", "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "diffHunk": "@@ -143,6 +145,29 @@ public void fireAfterSLAViolated(final ProcessInstance instance, NodeInstance no\n         }\n     }\n \n+    public void fireOnSignal(final ProcessInstance instance,\n+                             NodeInstance nodeInstance,\n+                             KieRuntime kruntime,\n+                             String signalName,\n+                             Object signalObject) {\n+        if (hasListeners()) {\n+            final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n+            notifyAllListeners(event, (l, e) -> l.onSignal(e));", "originalCommit": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MjQ0OQ==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531152449", "bodyText": "good point", "author": "fjtirado", "createdAt": "2020-11-26T17:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java b/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\nindex 1fcc48c830..aaabf99454 100644\n--- a/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\n+++ b/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\n\n@@ -152,7 +152,7 @@ public class ProcessEventSupport extends AbstractEventSupport<ProcessEventListen\n                              Object signalObject) {\n         if (hasListeners()) {\n             final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n-            notifyAllListeners(event, (l, e) -> l.onSignal(e));\n+            notifyAllListeners(event, ProcessEventListener::onSignal);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4NzQ3Mw==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r530887473", "bodyText": "same as above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        notifyAllListeners(event, (l, e) -> l.onMessage(e));\n          \n          \n            \n                        notifyAllListeners(event, ProcessEventListener::onMessage);", "author": "afalhambra", "createdAt": "2020-11-26T09:28:49Z", "path": "drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java", "diffHunk": "@@ -143,6 +145,29 @@ public void fireAfterSLAViolated(final ProcessInstance instance, NodeInstance no\n         }\n     }\n \n+    public void fireOnSignal(final ProcessInstance instance,\n+                             NodeInstance nodeInstance,\n+                             KieRuntime kruntime,\n+                             String signalName,\n+                             Object signalObject) {\n+        if (hasListeners()) {\n+            final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n+            notifyAllListeners(event, (l, e) -> l.onSignal(e));\n+        }\n+    }\n+\n+    public void fireOnMessage(final ProcessInstance instance,\n+                              NodeInstance nodeInstance,\n+                              KieRuntime kruntime,\n+                              String messageName,\n+                              Object messageObject) {\n+        if (hasListeners()) {\n+            final MessageEvent event = new MessageEventImpl(instance, kruntime, nodeInstance, messageName,\n+                    messageObject);\n+            notifyAllListeners(event, (l, e) -> l.onMessage(e));", "originalCommit": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java b/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\nindex 1fcc48c830..aaabf99454 100644\n--- a/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\n+++ b/drools-core/src/main/java/org/drools/core/event/ProcessEventSupport.java\n\n@@ -152,7 +152,7 @@ public class ProcessEventSupport extends AbstractEventSupport<ProcessEventListen\n                              Object signalObject) {\n         if (hasListeners()) {\n             final SignalEvent event = new SignalEventImpl(instance, kruntime, nodeInstance, signalName, signalObject);\n-            notifyAllListeners(event, (l, e) -> l.onSignal(e));\n+            notifyAllListeners(event, ProcessEventListener::onSignal);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODQ4MQ==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531128481", "bodyText": "toString() method may be implemented to be similar to other classes that extend from ProcessEvent, wdyt?", "author": "gmunozfe", "createdAt": "2020-11-26T16:16:16Z", "path": "drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.MessageEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class MessageEventImpl extends ProcessEvent implements MessageEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String messageName;\n+    private Object messageObject;\n+\n+    public MessageEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String messageName, Object messageObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.messageName = messageName;\n+        this.messageObject = messageObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getMessageName() {\n+        return messageName;\n+    }\n+\n+    @Override\n+    public Object getMessage() {\n+        return messageObject;\n+    }", "originalCommit": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MzM5NA==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531153394", "bodyText": "done", "author": "fjtirado", "createdAt": "2020-11-26T17:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java b/drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java\nindex e7100e6dbb..f8d838b406 100644\n--- a/drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java\n+++ b/drools-core/src/main/java/org/drools/core/event/MessageEventImpl.java\n\n@@ -49,4 +49,10 @@ public class MessageEventImpl extends ProcessEvent implements MessageEvent {\n     public Object getMessage() {\n         return messageObject;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"MessageEventImpl [nodeInstance=\" + nodeInstance + \", messageName=\" + messageName + \", messageObject=\" +\n+               messageObject + \"]\";\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODc2Mw==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531128763", "bodyText": "Same here, implement toString()", "author": "gmunozfe", "createdAt": "2020-11-26T16:16:49Z", "path": "drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.drools.core.event;\n+\n+import org.kie.api.event.process.SignalEvent;\n+import org.kie.api.runtime.KieRuntime;\n+import org.kie.api.runtime.process.NodeInstance;\n+import org.kie.api.runtime.process.ProcessInstance;\n+\n+public class SignalEventImpl extends ProcessEvent implements SignalEvent {\n+\n+    private static final long serialVersionUID = 1L;\n+    private NodeInstance nodeInstance;\n+    private String signalName;\n+    private Object signalObject;\n+\n+    public SignalEventImpl(ProcessInstance instance, KieRuntime kruntime, NodeInstance nodeInstance,\n+                            String signalName, Object signalObject) {\n+        super(instance, kruntime);\n+        this.nodeInstance = nodeInstance;\n+        this.signalName = signalName;\n+        this.signalObject = signalObject;\n+    }\n+\n+    @Override\n+    public NodeInstance getNodeInstance() {\n+        return nodeInstance;\n+    }\n+\n+    @Override\n+    public String getSignalName() {\n+        return signalName;\n+    }\n+\n+    @Override\n+    public Object getSignal() {\n+        return signalObject;\n+    }", "originalCommit": "a8b8f4e27cd0e02e10b53da862663c54d5a66e7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1MzQ0OQ==", "url": "https://github.com/kiegroup/drools/pull/3264#discussion_r531153449", "bodyText": "done", "author": "fjtirado", "createdAt": "2020-11-26T17:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyODc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java b/drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java\nindex bc2910843b..c24bac32fc 100644\n--- a/drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java\n+++ b/drools-core/src/main/java/org/drools/core/event/SignalEventImpl.java\n\n@@ -49,4 +49,10 @@ public class SignalEventImpl extends ProcessEvent implements SignalEvent {\n     public Object getSignal() {\n         return signalObject;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"SignalEventImpl [nodeInstance=\" + nodeInstance + \", signalName=\" + signalName + \", signalObject=\" +\n+               signalObject + \"]\";\n+    }\n }\n"}}, {"oid": "7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "url": "https://github.com/kiegroup/drools/commit/7d6ef08bb059213f51227dea1a1ea49e0effdbf3", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding listener for signal and messages", "committedDate": "2020-11-26T17:08:11Z", "type": "forcePushed"}, {"oid": "5a99003199b272975b9b5034e55404db013f466f", "url": "https://github.com/kiegroup/drools/commit/5a99003199b272975b9b5034e55404db013f466f", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding listener for signal and messages", "committedDate": "2020-11-30T12:31:59Z", "type": "commit"}, {"oid": "5a99003199b272975b9b5034e55404db013f466f", "url": "https://github.com/kiegroup/drools/commit/5a99003199b272975b9b5034e55404db013f466f", "message": "[JBPM-9474] Produce events to Kafka by Signal or Messages Events\n\nAdding listener for signal and messages", "committedDate": "2020-11-30T12:31:59Z", "type": "forcePushed"}]}