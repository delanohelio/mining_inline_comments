{"pr_number": 3162, "pr_title": "[DROOLS-5688] Implement public API", "pr_createdAt": "2020-10-13T06:45:37Z", "pr_url": "https://github.com/kiegroup/drools/pull/3162", "timeline": [{"oid": "756527b16b59741fc16fc0cc8061755dc642ee1d", "url": "https://github.com/kiegroup/drools/commit/756527b16b59741fc16fc0cc8061755dc642ee1d", "message": "[DROOLS-5688] Public \"api\" classes", "committedDate": "2020-10-07T09:37:21Z", "type": "commit"}, {"oid": "43d7606e6d8ad10678c4ab853633f8eb33021ec7", "url": "https://github.com/kiegroup/drools/commit/43d7606e6d8ad10678c4ab853633f8eb33021ec7", "message": "[DROOLS-5688] Moving classes to new api module", "committedDate": "2020-10-07T09:38:21Z", "type": "commit"}, {"oid": "8c599eaefc6c750b107933a23533611f7a09da0d", "url": "https://github.com/kiegroup/drools/commit/8c599eaefc6c750b107933a23533611f7a09da0d", "message": "[DROOLS-5688] Moving classes to new \"api\" module", "committedDate": "2020-10-07T10:07:53Z", "type": "commit"}, {"oid": "622d438f4b906de2d968bed5fff11e7fe434def8", "url": "https://github.com/kiegroup/drools/commit/622d438f4b906de2d968bed5fff11e7fe434def8", "message": "[DROOLS-5688] Method rename", "committedDate": "2020-10-08T09:43:35Z", "type": "commit"}, {"oid": "b94a97641c3ece6c70677262e08251573d9922c5", "url": "https://github.com/kiegroup/drools/commit/b94a97641c3ece6c70677262e08251573d9922c5", "message": "[DROOLS-5688] Moving classes to new \"api\" module", "committedDate": "2020-10-08T13:47:13Z", "type": "commit"}, {"oid": "28e1f658525a2c183a6caed322c22c68e15ae76b", "url": "https://github.com/kiegroup/drools/commit/28e1f658525a2c183a6caed322c22c68e15ae76b", "message": "[DROOLS-5688] Populating MiningField/OutputField lists. Broken tests", "committedDate": "2020-10-09T12:11:26Z", "type": "commit"}, {"oid": "b3b38ede972d225e510d8a8e0875a93b2ab1f121", "url": "https://github.com/kiegroup/drools/commit/b3b38ede972d225e510d8a8e0875a93b2ab1f121", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5688", "committedDate": "2020-10-09T12:11:59Z", "type": "commit"}, {"oid": "6d057b05726ee569b3b45f54af806d3ed71b3936", "url": "https://github.com/kiegroup/drools/commit/6d057b05726ee569b3b45f54af806d3ed71b3936", "message": "[DROOLS-5688] Populating MiningField/OutputField lists. Broken tests", "committedDate": "2020-10-09T12:42:07Z", "type": "commit"}, {"oid": "a48623d421f451a4e64788ec911af3c51e7daf9c", "url": "https://github.com/kiegroup/drools/commit/a48623d421f451a4e64788ec911af3c51e7daf9c", "message": "[DROOLS-5720] make PMML to work without mvel", "committedDate": "2020-10-12T17:45:42Z", "type": "commit"}, {"oid": "2bec21e0870368fa18586e0aab7fa1141ec5a623", "url": "https://github.com/kiegroup/drools/commit/2bec21e0870368fa18586e0aab7fa1141ec5a623", "message": "[DROOLS-5688] Implemented public RuntimeFactory", "committedDate": "2020-10-13T05:53:31Z", "type": "commit"}, {"oid": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "url": "https://github.com/kiegroup/drools/commit/8c24beb25ae1a3d11f9856e12485a62a78a266b9", "message": "[DROOLS-5688] Fixing public API usage inside tests", "committedDate": "2020-10-13T06:22:38Z", "type": "commit"}, {"oid": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "url": "https://github.com/kiegroup/drools/commit/31bf55b4e1c36feeea67d8323d58716ab2a44b85", "message": "wip", "committedDate": "2020-10-13T09:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjA4MQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503716081", "bodyText": "To be removed? It is a mock", "author": "danielezonca", "createdAt": "2020-10-13T07:12:21Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.core.converters;\n+\n+import org.kie.pmml.api.models.PMMLModelImpl;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+\n+public class PMMLModelConverter {", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MzU3OA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504463578", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T07:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java\ndeleted file mode 100644\nindex 59c421c456..0000000000\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/converters/PMMLModelConverter.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.evaluator.core.converters;\n-\n-import org.kie.pmml.api.models.PMMLModelImpl;\n-import org.kie.pmml.commons.model.KiePMMLModel;\n-\n-public class PMMLModelConverter {\n-\n-    private PMMLModelConverter() {\n-        // Avoid instantiation\n-    }\n-\n-    public static PMMLModelImpl getPMMLModel(KiePMMLModel source) {\n-        return null;\n-    }\n-\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjYzNA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503716634", "bodyText": "Are you sure the generic should be PMMLRuntimeInternal and not PMMLRuntime?", "author": "danielezonca", "createdAt": "2020-10-13T07:13:27Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java", "diffHunk": "@@ -17,18 +17,18 @@\n \n import org.kie.api.KieBase;\n import org.kie.api.internal.runtime.KieRuntimeService;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntimeInternal;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n \n-public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntime> {\n+public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntimeInternal> {", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NzgyMg==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504467822", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T07:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java\nindex d8c34ef874..26f3469ab7 100644\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java\n+++ b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeService.java\n\n@@ -17,18 +17,18 @@ package org.kie.pmml.evaluator.core.service;\n \n import org.kie.api.KieBase;\n import org.kie.api.internal.runtime.KieRuntimeService;\n-import org.kie.pmml.evaluator.api.executor.PMMLRuntimeInternal;\n+import org.kie.pmml.evaluator.api.executor.PMMLRuntime;\n import org.kie.pmml.evaluator.core.executor.PMMLModelEvaluatorFinderImpl;\n \n-public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntimeInternal> {\n+public class PMMLRuntimeService implements KieRuntimeService<PMMLRuntime> {\n \n     @Override\n-    public PMMLRuntimeInternal newKieRuntime(KieBase kieBase) {\n-        return new PMMLRuntimeInternalImpl(kieBase, new PMMLModelEvaluatorFinderImpl());\n+    public PMMLRuntime newKieRuntime(KieBase kieBase) {\n+        return new PMMLRuntimeImpl(kieBase, new PMMLModelEvaluatorFinderImpl());\n     }\n \n     @Override\n     public Class getServiceInterface() {\n-        return PMMLRuntimeInternal.class;\n+        return PMMLRuntime.class;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxMg==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503721512", "bodyText": "To be reverted?", "author": "danielezonca", "createdAt": "2020-10-13T07:22:19Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java", "diffHunk": "@@ -151,7 +152,12 @@ public void getKiePMMLRegressionModelClasses() throws IOException, IllegalAccess\n     public void getKiePMMLRegressionModelSourcesMap() throws IOException {\n         Map<String, String> retrieved = KiePMMLRegressionModelFactory.getKiePMMLRegressionModelSourcesMap(dataDictionary, transformationDictionary, regressionModel, PACKAGE_NAME);\n         assertNotNull(retrieved);\n-        int expectedSize = regressionTables.size() + 2; // One for classification and one for the whole model\n+//        int miningFields = regressionModel.getMiningSchema() != null ? regressionModel.getMiningSchema().getMiningFields().size() : 0;\n+//        int outputFields = regressionModel.getOutput() != null ? regressionModel.getOutput().getOutputFields().size() : 0;\n+        int expectedSize = regressionTables.size()\n+//                + miningFields  // for each MiningField an \"add\" statement is created\n+//                + outputFields  // for each OutputField an \"add\" statement is created\n+                + 2; // One for classification and one for the whole model", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NDI2MQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504474261", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T07:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java\nindex 82fa3e3751..3844b9a9ba 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionModelFactoryTest.java\n\n@@ -152,12 +151,7 @@ public class KiePMMLRegressionModelFactoryTest {\n     public void getKiePMMLRegressionModelSourcesMap() throws IOException {\n         Map<String, String> retrieved = KiePMMLRegressionModelFactory.getKiePMMLRegressionModelSourcesMap(dataDictionary, transformationDictionary, regressionModel, PACKAGE_NAME);\n         assertNotNull(retrieved);\n-//        int miningFields = regressionModel.getMiningSchema() != null ? regressionModel.getMiningSchema().getMiningFields().size() : 0;\n-//        int outputFields = regressionModel.getOutput() != null ? regressionModel.getOutput().getOutputFields().size() : 0;\n-        int expectedSize = regressionTables.size()\n-//                + miningFields  // for each MiningField an \"add\" statement is created\n-//                + outputFields  // for each OutputField an \"add\" statement is created\n-                + 2; // One for classification and one for the whole model\n+        int expectedSize = regressionTables.size() + 2; // One for classification and one for the whole model\n         assertEquals(expectedSize, retrieved.size());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjQ3OA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503732478", "bodyText": "To be removed", "author": "danielezonca", "createdAt": "2020-10-13T07:39:53Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,\n                        targetFieldName,\n-                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n-                       modelName,\n                        segmentationClass);\n-        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addKiePMMLOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n         addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n         toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n         return toReturn;\n     }\n \n-    static void setConstructor(final String generatedClassName,\n+    static void setConstructor(final MiningModel miningModel,\n                                final ConstructorDeclaration constructorDeclaration,\n                                final String targetField,\n-                               final MINING_FUNCTION miningFunction,\n-                               final String modelName,\n                                final String segmentationClass) {\n-        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n+        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(miningModel.getMiningSchema());\n+        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(miningModel.getOutput());\n+        setKiePMMLModelConstructor(getSanitizedClassName(miningModel.getModelName()), constructorDeclaration, miningModel.getModelName(), miningFields, outputFields);\n+        Expression miningFunctionExpression;\n+        if (miningModel.getMiningFunction() != null) {\n+            MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(miningModel.getMiningFunction().value());\n+            miningFunctionExpression = new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name());\n+        } else {\n+            miningFunctionExpression = new NullLiteralExpr();\n+        }\n         final BlockStmt body = constructorDeclaration.getBody();\n         CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n-        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", miningFunctionExpression);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n         ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n         objectCreationExpr.setType(kiePMMLSegmentationClass);\n         CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n     }\n \n+//\n+//    static void setConstructor(final String generatedClassName,\n+//                               final ConstructorDeclaration constructorDeclaration,\n+//                               final String targetField,\n+//                               final MINING_FUNCTION miningFunction,\n+//                               final String modelName,\n+//                               final String segmentationClass) {\n+//        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(treeModel.getMiningSchema());\n+//        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(treeModel.getOutput());\n+//        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName, miningFields, outputFields);\n+//\n+////        setKiePMMLModelConstructor(generatedClassName, constructorDeclaration, modelName);\n+//        final BlockStmt body = constructorDeclaration.getBody();\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n+//        ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n+//        ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n+//        objectCreationExpr.setType(kiePMMLSegmentationClass);\n+//        CommonCodegenUtils.setAssignExpressionValue(body, \"segmentation\", objectCreationExpr);\n+//    }", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTA1Ng==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504475056", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T07:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\nindex 09b1a4e16e..f4df1542de 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n\n@@ -117,36 +114,32 @@ public class KiePMMLMiningModelFactory {\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(model,\n-                        constructorDeclaration,\n+        setConstructor(className,\n+                       constructorDeclaration,\n                        targetFieldName,\n+                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n+                       modelName,\n                        segmentationClass);\n-        addKiePMMLOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n         addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n         toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n         return toReturn;\n     }\n \n-    static void setConstructor(final MiningModel miningModel,\n+    static void setConstructor(final String generatedClassName,\n                                final ConstructorDeclaration constructorDeclaration,\n                                final String targetField,\n+                               final MINING_FUNCTION miningFunction,\n+                               final String modelName,\n                                final String segmentationClass) {\n-        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(miningModel.getMiningSchema());\n-        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(miningModel.getOutput());\n-        setKiePMMLModelConstructor(getSanitizedClassName(miningModel.getModelName()), constructorDeclaration, miningModel.getModelName(), miningFields, outputFields);\n-        Expression miningFunctionExpression;\n-        if (miningModel.getMiningFunction() != null) {\n-            MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(miningModel.getMiningFunction().value());\n-            miningFunctionExpression = new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name());\n-        } else {\n-            miningFunctionExpression = new NullLiteralExpr();\n-        }\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n         final BlockStmt body = constructorDeclaration.getBody();\n         CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n-        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", miningFunctionExpression);\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n         CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n         ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjY5Mw==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503732693", "bodyText": "Fix formatting", "author": "danielezonca", "createdAt": "2020-10-13T07:40:10Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java", "diffHunk": "@@ -114,37 +117,63 @@ public static KiePMMLMiningModel getKiePMMLMiningModel(final DataDictionary data\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n-        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(className,\n-                       constructorDeclaration,\n+        setConstructor(model,\n+                        constructorDeclaration,", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTU5MQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504475591", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T07:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\nindex 09b1a4e16e..f4df1542de 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-mining/kie-pmml-models-mining-compiler/src/main/java/org/kie/pmml/models/mining/compiler/factories/KiePMMLMiningModelFactory.java\n\n@@ -117,36 +114,32 @@ public class KiePMMLMiningModelFactory {\n         CompilationUnit cloneCU = JavaParserUtils.getKiePMMLModelCompilationUnit(className, parentPackageName, KIE_PMML_MINING_MODEL_TEMPLATE_JAVA, KIE_PMML_MINING_MODEL_TEMPLATE);\n         ClassOrInterfaceDeclaration modelTemplate = cloneCU.getClassByName(className)\n                 .orElseThrow(() -> new KiePMMLException(MAIN_CLASS_NOT_FOUND + \": \" + className));\n+        String modelName = model.getModelName();\n         String targetFieldName = getTargetFieldName(dataDictionary, model).orElse(null);\n         List<KiePMMLOutputField> outputFields = getOutputFields(model);\n         final ConstructorDeclaration constructorDeclaration = modelTemplate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, modelTemplate.getName())));\n-        setConstructor(model,\n-                        constructorDeclaration,\n+        setConstructor(className,\n+                       constructorDeclaration,\n                        targetFieldName,\n+                       MINING_FUNCTION.byName(model.getMiningFunction().value()),\n+                       modelName,\n                        segmentationClass);\n-        addKiePMMLOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n+        addOutputFieldsPopulation(constructorDeclaration.getBody(), outputFields);\n         addTransformationsInClassOrInterfaceDeclaration(modelTemplate, transformationDictionary, model.getLocalTransformations());\n         toReturn.put(getFullClassName(cloneCU), cloneCU.toString());\n         return toReturn;\n     }\n \n-    static void setConstructor(final MiningModel miningModel,\n+    static void setConstructor(final String generatedClassName,\n                                final ConstructorDeclaration constructorDeclaration,\n                                final String targetField,\n+                               final MINING_FUNCTION miningFunction,\n+                               final String modelName,\n                                final String segmentationClass) {\n-        final List<org.kie.pmml.api.models.MiningField> miningFields = ModelUtils.convertToKieMiningFieldList(miningModel.getMiningSchema());\n-        final List<org.kie.pmml.api.models.OutputField> outputFields = ModelUtils.convertToKieOutputFieldList(miningModel.getOutput());\n-        setKiePMMLModelConstructor(getSanitizedClassName(miningModel.getModelName()), constructorDeclaration, miningModel.getModelName(), miningFields, outputFields);\n-        Expression miningFunctionExpression;\n-        if (miningModel.getMiningFunction() != null) {\n-            MINING_FUNCTION miningFunction = MINING_FUNCTION.byName(miningModel.getMiningFunction().value());\n-            miningFunctionExpression = new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name());\n-        } else {\n-            miningFunctionExpression = new NullLiteralExpr();\n-        }\n+        setConstructorSuperNameInvocation(generatedClassName, constructorDeclaration, modelName);\n         final BlockStmt body = constructorDeclaration.getBody();\n         CommonCodegenUtils.setAssignExpressionValue(body, \"targetField\", new StringLiteralExpr(targetField));\n-        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", miningFunctionExpression);\n+        CommonCodegenUtils.setAssignExpressionValue(body, \"miningFunction\", new NameExpr(miningFunction.getClass().getName() + \".\" + miningFunction.name()));\n         CommonCodegenUtils.setAssignExpressionValue(body, \"pmmlMODEL\", new NameExpr(PMML_MODEL.MINING_MODEL.getClass().getName() + \".\" + PMML_MODEL.MINING_MODEL.name()));\n         ClassOrInterfaceType kiePMMLSegmentationClass = parseClassOrInterfaceType(segmentationClass);\n         ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzg1OQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503733859", "bodyText": "Where is this used?", "author": "danielezonca", "createdAt": "2020-10-13T07:42:02Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java", "diffHunk": "@@ -145,6 +160,17 @@ protected void executeTransformations(final KiePMMLModel model, final PMMLContex\n         });\n     }\n \n+    PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n+        String correlationId = \"CORRELATION_ID\";\n+        PMMLRequestDataBuilder pmmlRequestDataBuilder = new PMMLRequestDataBuilder(correlationId, modelName);\n+        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n+            Object pValue = entry.getValue();\n+            Class class1 = pValue.getClass();\n+            pmmlRequestDataBuilder.addParameter(entry.getKey(), pValue, class1);\n+        }\n+        return pmmlRequestDataBuilder.build();\n+    }", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODMyOQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504478329", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T08:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\nsimilarity index 79%\nrename from kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java\nrename to kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\nindex 6e06475e22..6c75bc474c 100644\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeInternalImpl.java\n+++ b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n\n@@ -160,17 +145,6 @@ public class PMMLRuntimeInternalImpl implements PMMLRuntimeInternal {\n         });\n     }\n \n-    PMMLRequestData getPMMLRequestData(String modelName, Map<String, Object> parameters) {\n-        String correlationId = \"CORRELATION_ID\";\n-        PMMLRequestDataBuilder pmmlRequestDataBuilder = new PMMLRequestDataBuilder(correlationId, modelName);\n-        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n-            Object pValue = entry.getValue();\n-            Class class1 = pValue.getClass();\n-            pmmlRequestDataBuilder.addParameter(entry.getKey(), pValue, class1);\n-        }\n-        return pmmlRequestDataBuilder.build();\n-    }\n-\n     /**\n      * Returns an <code>Optional&lt;PMMLModelExecutor&gt;</code> to allow\n      * incremental development of different model-specific executors\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503742995", "bodyText": "How is the user supposed to obtain an instance of this interface? Do you expect an explicit\nPMMLRuntimeFactory factory = new PMMLRuntimeFactoryImpl();\n?\nWhat about add a kie.conf for PMMLRuntimeFactoryImpl and then replicate the same mechanism of KieServices?", "author": "danielezonca", "createdAt": "2020-10-13T07:56:55Z", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjIyOQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504482229", "bodyText": "@danielezonca\nFor the moment being it is\nPMMLRuntimeFactory factory = new PMMLRuntimeFactoryImpl(); \nAgree about kie.conf, but it need some time to rewrite/test - moreover would break the \"encapsulation\" as it currently is, that I like", "author": "gitgabrio", "createdAt": "2020-10-14T08:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwODMxNw==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504608317", "bodyText": "Ok let's revisit it in another iteration", "author": "danielezonca", "createdAt": "2020-10-14T11:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0Mjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "31bf55b4e1c36feeea67d8323d58716ab2a44b85", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java\ndeleted file mode 100644\nindex 87fc7263ba..0000000000\n--- a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.api;\n-\n-import java.io.File;\n-\n-import org.kie.pmml.api.runtime.PMMLRuntime;\n-\n-public interface PMMLRuntimeFactory {\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the given <code><File</code>\n-     * @param modelName\n-     * @param pmmlFile\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile);\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the <code><File</code>\n-     * with the given <b>pmmlFileName</b>. Such file will be looked for in the classpath\n-     * (e.g. provided by <b>Maven</b> dependency)\n-     *\n-     * @param modelName\n-     * @param pmmlFileName\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName);\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the <code><File</code>\n-     * with the given <b>pmmlFileName</b>. Such file will be looked for in the <code>kjar</code>\n-     * loaded inside the <code>KieContainer</code>\n-     * with the given <b>gav</b>\n-     *\n-     * @param modelName\n-     * @param pmmlFileName\n-     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n-     * @param gav\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromKieContainer(String modelName, String kieBase, String pmmlFileName, String gav);\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjYzNg==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503866636", "bodyText": "What about overload this method with another one without kieBase parameter so that user can leverage on default kieBase if available? I expect most of the users might not be aware of the name of the kBase when there is a default", "author": "danielezonca", "createdAt": "2020-10-13T11:14:35Z", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api;\n+\n+import java.io.File;\n+\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+\n+public interface PMMLRuntimeFactory {\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the given <code><File</code>\n+     * @param modelName\n+     * @param pmmlFile\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the classpath\n+     * (e.g. provided by <b>Maven</b> dependency)\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName);\n+\n+    /**\n+     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n+     * with the given <b>modelName</b> that should be present in the <code><File</code>\n+     * with the given <b>pmmlFileName</b>. Such file will be looked for in the <code>kjar</code>\n+     * loaded inside the <code>KieContainer</code>\n+     * with the given <b>gav</b>\n+     *\n+     * @param modelName\n+     * @param pmmlFileName\n+     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n+     * @param gav\n+     * @return\n+     */\n+    PMMLRuntime getPMMLRuntimeFromKieContainer(String modelName, String kieBase, String pmmlFileName, String gav);", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzI1Nw==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504563257", "bodyText": "@danielezonca\ndone", "author": "gitgabrio", "createdAt": "2020-10-14T10:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java b/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java\ndeleted file mode 100644\nindex 87fc7263ba..0000000000\n--- a/kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/PMMLRuntimeFactory.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.kie.pmml.api;\n-\n-import java.io.File;\n-\n-import org.kie.pmml.api.runtime.PMMLRuntime;\n-\n-public interface PMMLRuntimeFactory {\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the given <code><File</code>\n-     * @param modelName\n-     * @param pmmlFile\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile);\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the <code><File</code>\n-     * with the given <b>pmmlFileName</b>. Such file will be looked for in the classpath\n-     * (e.g. provided by <b>Maven</b> dependency)\n-     *\n-     * @param modelName\n-     * @param pmmlFileName\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName);\n-\n-    /**\n-     * Retrieve a <code>PMMLRuntime</code> bound to the <code>org.dmg.pmml.Model</code>\n-     * with the given <b>modelName</b> that should be present in the <code><File</code>\n-     * with the given <b>pmmlFileName</b>. Such file will be looked for in the <code>kjar</code>\n-     * loaded inside the <code>KieContainer</code>\n-     * with the given <b>gav</b>\n-     *\n-     * @param modelName\n-     * @param pmmlFileName\n-     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n-     * @param gav\n-     * @return\n-     */\n-    PMMLRuntime getPMMLRuntimeFromKieContainer(String modelName, String kieBase, String pmmlFileName, String gav);\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NzYxMw==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503887613", "bodyText": "Where are these fields populated? Is it something that subclasses has to handle? If so I think is quite error prone because if I forget to do that, no error is thrown but the fields are not populated.\nWhat about an abstract method like populateMiningAndOutputFields() invoked in the constructor so that each subclass has to implement it?", "author": "danielezonca", "createdAt": "2020-10-13T11:52:14Z", "path": "kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java", "diffHunk": "@@ -39,6 +43,8 @@\n     protected Map<String, Object> missingValueReplacementMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> commonTransformationsMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> localTransformationsMap = new HashMap<>();\n+    protected List<MiningField> miningFields = new ArrayList<>();\n+    protected List<OutputField> outputFields = new ArrayList<>();", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5MjU5NA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504492594", "bodyText": "@danielezonca\nTo keep modifications at bare minimum those tow lists are populated in two different places:\n\nduring runtime compilation, inside KiePMMLModelRetriever, after the KiePMMLModel has been instantiated/populated by model-specific compilers\nduring codegen, inside model-specific codegen factories (see all methods invoking KiePMMLModelFactoryUtils.setKiePMMLModelConstructor)\n\nIt could be refactored, but it would take some time, so in another ticket", "author": "gitgabrio", "createdAt": "2020-10-14T08:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NzYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\nindex f02d8592ca..6bce1b14fa 100644\n--- a/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n+++ b/kie-pmml-trusty/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n\n@@ -43,8 +39,6 @@ public abstract class KiePMMLModel extends AbstractKiePMMLComponent implements P\n     protected Map<String, Object> missingValueReplacementMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> commonTransformationsMap = new HashMap<>();\n     protected Map<String, Function<List<KiePMMLNameValue>, Object>> localTransformationsMap = new HashMap<>();\n-    protected List<MiningField> miningFields = new ArrayList<>();\n-    protected List<OutputField> outputFields = new ArrayList<>();\n \n     protected KiePMMLModel(String name, List<KiePMMLExtension> extensions) {\n         super(name, extensions);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MDkzMQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503890931", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n          \n          \n            \n                            .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n          \n          \n            \n                                    , kBuilder))\n          \n          \n            \n                            .findFirst();\n          \n          \n            \n                    toReturn.ifPresent(kiePMMLModel ->\n          \n          \n            \n                                               populateWithPMMLModelFields(kiePMMLModel,\n          \n          \n            \n                                                                           model.getMiningSchema(),\n          \n          \n            \n                                                                           model.getOutput()));\n          \n          \n            \n                    return toReturn;\n          \n          \n            \n                    return getModelImplementationProviderStream(model)\n          \n          \n            \n                            .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n          \n          \n            \n                                    , kBuilder))\n          \n          \n            \n                            .peek(kiePMMLModel -> populateWithPMMLModelFields(kiePMMLModel, model.getMiningSchema(), model.getOutput()))\n          \n          \n            \n                            .findFirst();\n          \n      \n    \n    \n  \n\nNOTE: if you make populateWithPMMLModelFields returns KiePMMLModel you can replace peek with map", "author": "danielezonca", "createdAt": "2020-10-13T11:57:59Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java", "diffHunk": "@@ -53,13 +62,20 @@ private KiePMMLModelRetriever() {\n         logger.trace(\"getFromCommonDataAndTransformationDictionaryAndModel {}\", model);\n         final PMML_MODEL pmmlMODEL = PMML_MODEL.byName(model.getClass().getSimpleName());\n         logger.debug(\"pmmlModelType {}\", pmmlMODEL);\n-        return getModelImplementationProviderStream(model)\n-                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model, kBuilder))\n+        Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n+                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n+                        , kBuilder))\n                 .findFirst();\n+        toReturn.ifPresent(kiePMMLModel ->\n+                                   populateWithPMMLModelFields(kiePMMLModel,\n+                                                               model.getMiningSchema(),\n+                                                               model.getOutput()));\n+        return toReturn;", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NTE0MA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504495140", "bodyText": "@danielezonca\n\"Stream.peek\" should be used with caution\nCode smell Major java:S3864\nReplaced with map (returning the populated object)", "author": "gitgabrio", "createdAt": "2020-10-14T08:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\nindex e130fced25..f4b4356365 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/implementations/KiePMMLModelRetriever.java\n\n@@ -62,20 +53,13 @@ public class KiePMMLModelRetriever {\n         logger.trace(\"getFromCommonDataAndTransformationDictionaryAndModel {}\", model);\n         final PMML_MODEL pmmlMODEL = PMML_MODEL.byName(model.getClass().getSimpleName());\n         logger.debug(\"pmmlModelType {}\", pmmlMODEL);\n-        Optional<KiePMMLModel> toReturn = getModelImplementationProviderStream(model)\n-                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model\n-                        , kBuilder))\n+        return getModelImplementationProviderStream(model)\n+                .map(implementation -> implementation.getKiePMMLModel(dataDictionary, transformationDictionary, model, kBuilder))\n                 .findFirst();\n-        toReturn.ifPresent(kiePMMLModel ->\n-                                   populateWithPMMLModelFields(kiePMMLModel,\n-                                                               model.getMiningSchema(),\n-                                                               model.getOutput()));\n-        return toReturn;\n     }\n \n     /**\n-     * Read the given <code>DataDictionary</code> and <code>Model</code>> to return an <code>Optional&lt;\n-     * KiePMMLModel&gt;</code>\n+     * Read the given <code>DataDictionary</code> and <code>Model</code>> to return an <code>Optional&lt;KiePMMLModel&gt;</code>\n      * @param packageName the package into which put all the generated classes out of the given <code>InputStream</code>\n      * @param dataDictionary\n      * @param transformationDictionary\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MTk1NA==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r503891954", "bodyText": "?", "author": "danielezonca", "createdAt": "2020-10-13T11:59:44Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java", "diffHunk": "@@ -94,41 +125,118 @@ public static void addOutputFieldsPopulation(final BlockStmt body, final List<Ki\n                 builder = new MethodCallExpr(builder, \"withTargetField\", expressions);\n             }\n             if (outputField.getResultFeature() != null) {\n-                expressions = NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n+                expressions =\n+                        NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n                 builder = new MethodCallExpr(builder, \"withResultFeature\", expressions);\n             }\n             Expression newOutputField = new MethodCallExpr(builder, \"build\");\n             expressions = NodeList.nodeList(newOutputField);\n-            body.addStatement(new MethodCallExpr(new NameExpr(\"outputFields\"), \"add\", expressions));\n+            body.addStatement(new MethodCallExpr(new NameExpr(\"kiePMMLOutputFields\"), \"add\", expressions));\n         }\n     }\n \n     /**\n-     * Add <b>common</b> and <b>local</b> local transformations management inside the given <code>ClassOrInterfaceDeclaration</code>\n+     * Add <b>common</b> and <b>local</b> local transformations management inside the given\n+     * <code>ClassOrInterfaceDeclaration</code>\n      * @param toPopulate\n      * @param transformationDictionary\n      * @param localTransformations\n      */\n-    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate,\n+                                                                       final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n         final AtomicInteger arityCounter = new AtomicInteger(0);\n-        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap = (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ? getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap = (localTransformations != null && localTransformations.getDerivedFields() != null) ? getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) : Collections.emptyMap();\n-        final Map<String, MethodDeclaration> defineFunctionsMethodMap = (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ? getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) : Collections.emptyMap();\n+        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap =\n+                (localTransformations != null && localTransformations.getDerivedFields() != null) ?\n+                        getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) :\n+                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> defineFunctionsMethodMap =\n+                (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ?\n+                        getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) :\n+                        Collections.emptyMap();\n         populateMethodDeclarations(toPopulate, commonDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, localDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, defineFunctionsMethodMap.values());\n-        final ConstructorDeclaration constructorDeclaration = toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n-        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap, localDerivedFieldsMethodMap);\n+        final ConstructorDeclaration constructorDeclaration =\n+                toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n+        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap,\n+                                             localDerivedFieldsMethodMap);\n         //", "originalCommit": "8c24beb25ae1a3d11f9856e12485a62a78a266b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NzI2MQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504497261", "bodyText": "@danielezonca\nremoved", "author": "gitgabrio", "createdAt": "2020-10-14T08:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5MTk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java\nindex 1e72b96020..4124acf4e4 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/KiePMMLModelFactoryUtils.java\n\n@@ -125,118 +94,41 @@ public class KiePMMLModelFactoryUtils {\n                 builder = new MethodCallExpr(builder, \"withTargetField\", expressions);\n             }\n             if (outputField.getResultFeature() != null) {\n-                expressions =\n-                        NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n+                expressions = NodeList.nodeList(new NameExpr(RESULT_FEATURE.class.getName() + \".\" + outputField.getResultFeature().toString()));\n                 builder = new MethodCallExpr(builder, \"withResultFeature\", expressions);\n             }\n             Expression newOutputField = new MethodCallExpr(builder, \"build\");\n             expressions = NodeList.nodeList(newOutputField);\n-            body.addStatement(new MethodCallExpr(new NameExpr(\"kiePMMLOutputFields\"), \"add\", expressions));\n+            body.addStatement(new MethodCallExpr(new NameExpr(\"outputFields\"), \"add\", expressions));\n         }\n     }\n \n     /**\n-     * Add <b>common</b> and <b>local</b> local transformations management inside the given\n-     * <code>ClassOrInterfaceDeclaration</code>\n+     * Add <b>common</b> and <b>local</b> local transformations management inside the given <code>ClassOrInterfaceDeclaration</code>\n      * @param toPopulate\n      * @param transformationDictionary\n      * @param localTransformations\n      */\n-    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate,\n-                                                                       final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n+    public static void addTransformationsInClassOrInterfaceDeclaration(final ClassOrInterfaceDeclaration toPopulate, final TransformationDictionary transformationDictionary, final LocalTransformations localTransformations) {\n         final AtomicInteger arityCounter = new AtomicInteger(0);\n-        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap =\n-                (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ?\n-                        getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) :\n-                        Collections.emptyMap();\n-        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap =\n-                (localTransformations != null && localTransformations.getDerivedFields() != null) ?\n-                        getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) :\n-                        Collections.emptyMap();\n-        final Map<String, MethodDeclaration> defineFunctionsMethodMap =\n-                (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ?\n-                        getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) :\n-                        Collections.emptyMap();\n+        final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap = (transformationDictionary != null && transformationDictionary.getDerivedFields() != null) ? getDerivedFieldsMethodMap(transformationDictionary.getDerivedFields(), arityCounter) : Collections.emptyMap();\n+        final Map<String, MethodDeclaration> localDerivedFieldsMethodMap = (localTransformations != null && localTransformations.getDerivedFields() != null) ? getDerivedFieldsMethodMap(localTransformations.getDerivedFields(), arityCounter) : Collections.emptyMap();\n+        final Map<String, MethodDeclaration> defineFunctionsMethodMap = (transformationDictionary != null && transformationDictionary.getDefineFunctions() != null) ? getDefineFunctionsMethodMap(transformationDictionary.getDefineFunctions()) : Collections.emptyMap();\n         populateMethodDeclarations(toPopulate, commonDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, localDerivedFieldsMethodMap.values());\n         populateMethodDeclarations(toPopulate, defineFunctionsMethodMap.values());\n-        final ConstructorDeclaration constructorDeclaration =\n-                toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n-        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap,\n-                                             localDerivedFieldsMethodMap);\n+        final ConstructorDeclaration constructorDeclaration = toPopulate.getDefaultConstructor().orElseThrow(() -> new KiePMMLInternalException(String.format(MISSING_DEFAULT_CONSTRUCTOR, toPopulate.getName())));\n+        populateTransformationsInConstructor(constructorDeclaration, commonDerivedFieldsMethodMap, localDerivedFieldsMethodMap);\n         //\n     }\n \n     /**\n-     * Create a <code>List&lt;ObjectCreationExpr&gt;</code> for the given <code>List&lt;MiningField&gt;</code>\n-     * @param miningFields\n-     * @return\n-     */\n-    static List<ObjectCreationExpr> getMiningFieldsObjectCreations(final List<MiningField> miningFields) {\n-        return miningFields.stream()\n-                .map(miningField -> {\n-                    ObjectCreationExpr toReturn = new ObjectCreationExpr();\n-                    toReturn.setType(MiningField.class.getCanonicalName());\n-                    Expression name = miningField.getName() != null ?\n-                            new StringLiteralExpr(miningField.getName())\n-                            : new NullLiteralExpr();\n-                    FIELD_USAGE_TYPE fieldUsageType = miningField.getUsageType();\n-                    Expression usageType = fieldUsageType != null ?\n-                            new NameExpr(fieldUsageType.getClass().getName() + \".\" + fieldUsageType.name())\n-                            : new NullLiteralExpr();\n-                    OP_TYPE oPT = miningField.getOpType();\n-                    Expression opType = oPT != null ?\n-                            new NameExpr(oPT.getClass().getName() + \".\" + oPT.name())\n-                            : new NullLiteralExpr();\n-                    toReturn.setArguments(NodeList.nodeList(name, usageType, opType));\n-                    return toReturn;\n-                })\n-                .collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Create a <code>List&lt;ObjectCreationExpr&gt;</code> for the given <code>List&lt;OutputField&gt;</code>\n-     * @param outputFields\n-     * @return\n-     */\n-    static List<ObjectCreationExpr> getOutputFieldsObjectCreations(final List<OutputField> outputFields) {\n-        return outputFields.stream()\n-                .map(outputField -> {\n-                    ObjectCreationExpr toReturn = new ObjectCreationExpr();\n-                    toReturn.setType(OutputField.class.getCanonicalName());\n-                    Expression name = outputField.getName() != null ?\n-                            new StringLiteralExpr(outputField.getName())\n-                            : new NullLiteralExpr();\n-                    OP_TYPE oPT = outputField.getOpType();\n-                    Expression opType = oPT != null ?\n-                            new NameExpr(oPT.getClass().getName() + \".\" + oPT.name())\n-                            : new NullLiteralExpr();\n-                    DATA_TYPE datT = outputField.getDataType();\n-                    Expression dataType = datT != null ?\n-                            new NameExpr(datT.getClass().getName() + \".\" + datT.name())\n-                            : new NullLiteralExpr();\n-                    Expression targetField = outputField.getTargetField() != null ?\n-                            new StringLiteralExpr(outputField.getTargetField())\n-                            : new NullLiteralExpr();\n-                    RESULT_FEATURE rsltF = outputField.getResultFeature();\n-                    Expression resultFeature = rsltF != null ?\n-                            new NameExpr(rsltF.getClass().getName() + \".\" + rsltF.name())\n-                            : new NullLiteralExpr();\n-                    toReturn.setArguments(NodeList.nodeList(name, opType, dataType, targetField, resultFeature));\n-                    return toReturn;\n-                })\n-                .collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Populating the <b>commonTransformationsMap</b> and <b>localTransformationsMap</b> <code>Map&lt;String,\n-     * Function&lt;List&lt;KiePMMLNameValue&gt;, Object&gt;&gt;</code>>s inside the constructor\n+     * Populating the <b>commonTransformationsMap</b> and <b>localTransformationsMap</b> <code>Map&lt;String, Function&lt;List&lt;KiePMMLNameValue&gt;, Object&gt;&gt;</code>>s inside the constructor\n      * @param constructorDeclaration\n      * @param commonDerivedFieldsMethodMap\n      * @param localDerivedFieldsMethodMap\n      */\n-    static void populateTransformationsInConstructor(final ConstructorDeclaration constructorDeclaration,\n-                                                     final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap) {\n+    static void populateTransformationsInConstructor(final ConstructorDeclaration constructorDeclaration, final Map<String, MethodDeclaration> commonDerivedFieldsMethodMap, final Map<String, MethodDeclaration> localDerivedFieldsMethodMap) {\n         addMapPopulation(commonDerivedFieldsMethodMap, constructorDeclaration.getBody(), \"commonTransformationsMap\");\n         addMapPopulation(localDerivedFieldsMethodMap, constructorDeclaration.getBody(), \"localTransformationsMap\");\n     }\n"}}, {"oid": "2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "url": "https://github.com/kiegroup/drools/commit/2cd62767a0eee684a06b1ea7e0005ef99b733dc6", "message": "wip", "committedDate": "2020-10-13T17:17:36Z", "type": "commit"}, {"oid": "c8a9fcf636d5a6317fab8e2bffcfaf896ee946c9", "url": "https://github.com/kiegroup/drools/commit/c8a9fcf636d5a6317fab8e2bffcfaf896ee946c9", "message": "wip", "committedDate": "2020-10-14T06:46:51Z", "type": "commit"}, {"oid": "eb56e9575ebed0dd09b3a7bb7b25d531446e5814", "url": "https://github.com/kiegroup/drools/commit/eb56e9575ebed0dd09b3a7bb7b25d531446e5814", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5688", "committedDate": "2020-10-14T07:05:59Z", "type": "commit"}, {"oid": "70a49d8ced70fee192d88b9b2b619099a9a50c46", "url": "https://github.com/kiegroup/drools/commit/70a49d8ced70fee192d88b9b2b619099a9a50c46", "message": "[DROOLS-5688] Fixed as per PR suggestion", "committedDate": "2020-10-14T10:19:23Z", "type": "commit"}, {"oid": "f575a3a5bd582af6400ee6e1206de79958fd5eef", "url": "https://github.com/kiegroup/drools/commit/f575a3a5bd582af6400ee6e1206de79958fd5eef", "message": "Merge remote-tracking branch 'mariofusco/d5720' into DROOLS-5688\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLTrustyInvocationEvaluator.java\n#\tkie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryInternal.java", "committedDate": "2020-10-14T10:38:34Z", "type": "commit"}, {"oid": "ece4afc23595fb741d32079946ce223354903c4a", "url": "https://github.com/kiegroup/drools/commit/ece4afc23595fb741d32079946ce223354903c4a", "message": "[DROOLS-5688] Merged with d5720. API cleanup", "committedDate": "2020-10-14T11:19:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODY1NQ==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504568655", "bodyText": "Unused import", "author": "danielezonca", "createdAt": "2020-10-14T10:25:25Z", "path": "kie-pmml-trusty/kie-pmml-api/src/main/java/org/kie/pmml/api/runtime/PMMLRuntime.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.api.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.pmml.api.models.PMMLModel;\n+import org.kie.pmml.api.models.PMMLModelImpl;", "originalCommit": "70a49d8ced70fee192d88b9b2b619099a9a50c46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTU1Mg==", "url": "https://github.com/kiegroup/drools/pull/3162#discussion_r504569552", "bodyText": "To be removed", "author": "danielezonca", "createdAt": "2020-10-14T10:27:06Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.evaluator.assembler.factories;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.compiler.kie.builder.impl.KieContainerImpl;\n+import org.drools.compiler.kproject.ReleaseIdImpl;\n+import org.drools.core.io.internal.InternalResource;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.pmml.api.PMMLRuntimeFactory;\n+import org.kie.pmml.api.exceptions.ExternalException;\n+import org.kie.pmml.api.runtime.PMMLRuntime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.commons.io.FileUtils.getFile;\n+\n+public class PMMLRuntimeFactoryImpl implements PMMLRuntimeFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeFactoryImpl.class);\n+    private static  final KieServices KIE_SERVICES = KieServices.get();\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile) {\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName) {\n+        File pmmlFile = getPMMLFileFromClasspath(pmmlFileName);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByKieBase(String modelName, String kieBase, String pmmlFileName, String gav) {\n+        ReleaseId releaseId = new ReleaseIdImpl(gav);\n+        File pmmlFile = getPMMLFileFromKieContainerByKieBase(pmmlFileName, kieBase, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+    }\n+\n+    @Override\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByDefaultKieBase(String modelName, String pmmlFileName, String gav) {\n+        ReleaseId releaseId = new ReleaseIdImpl(gav);\n+        File pmmlFile = getPMMLFileFromKieContainerByDefaultKieBase(pmmlFileName, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+    }\n+\n+    /**\n+     * Load a <code>File</code> with the given <b>pmmlFileName</b> from the\n+     * current <code>Classloader</code>\n+     *\n+     * @param pmmlFileName\n+     * @return\n+     */\n+    private File getPMMLFileFromClasspath(final String pmmlFileName) {\n+        return getFile(pmmlFileName);\n+    }\n+\n+    /**\n+     * Load a <code>File</code> with the given <b>pmmlFileName</b> from the <code>kjar</code> contained in the\n+     * <code>KieContainer</code> with the given <code>ReleaseId</code>\n+     *\n+     * @param pmmlFileName\n+     * @param kieBase the name of the Kiebase configured inside the <b>kmodule.xml</b> of the loaded <b>kjar</b>\n+     * @param releaseId\n+     * @return\n+     */\n+    private File getPMMLFileFromKieContainerByKieBase(final String pmmlFileName, final String kieBase, final ReleaseId releaseId) {\n+        //kieContainer.getKieProject().getDefaultKieBaseModel().getName()", "originalCommit": "70a49d8ced70fee192d88b9b2b619099a9a50c46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ece4afc23595fb741d32079946ce223354903c4a", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java\nindex d125691add..560cacefb5 100644\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java\n+++ b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryImpl.java\n\n@@ -39,28 +39,28 @@ public class PMMLRuntimeFactoryImpl implements PMMLRuntimeFactory {\n     private static  final KieServices KIE_SERVICES = KieServices.get();\n \n     @Override\n-    public PMMLRuntime getPMMLRuntimeFromFile(String modelName, File pmmlFile) {\n-        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+    public PMMLRuntime getPMMLRuntimeFromFile(File pmmlFile) {\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(pmmlFile);\n     }\n \n     @Override\n-    public PMMLRuntime getPMMLRuntimeFromClasspath(String modelName, String pmmlFileName) {\n+    public PMMLRuntime getPMMLRuntimeFromClasspath(String pmmlFileName) {\n         File pmmlFile = getPMMLFileFromClasspath(pmmlFileName);\n-        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(pmmlFile);\n     }\n \n     @Override\n-    public PMMLRuntime getPMMLRuntimeFromKieContainerByKieBase(String modelName, String kieBase, String pmmlFileName, String gav) {\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByKieBase( String kieBase, String pmmlFileName, String gav) {\n         ReleaseId releaseId = new ReleaseIdImpl(gav);\n         File pmmlFile = getPMMLFileFromKieContainerByKieBase(pmmlFileName, kieBase, releaseId);\n-        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(pmmlFile, releaseId);\n     }\n \n     @Override\n-    public PMMLRuntime getPMMLRuntimeFromKieContainerByDefaultKieBase(String modelName, String pmmlFileName, String gav) {\n+    public PMMLRuntime getPMMLRuntimeFromKieContainerByDefaultKieBase(String pmmlFileName, String gav) {\n         ReleaseId releaseId = new ReleaseIdImpl(gav);\n         File pmmlFile = getPMMLFileFromKieContainerByDefaultKieBase(pmmlFileName, releaseId);\n-        return PMMLRuntimeFactoryInternal.getPMMLRuntime(modelName, pmmlFile, releaseId);\n+        return PMMLRuntimeFactoryInternal.getPMMLRuntime(pmmlFile, releaseId);\n     }\n \n     /**\n"}}, {"oid": "bcd758b49cbeeba7bb8474cd469ffb6077029505", "url": "https://github.com/kiegroup/drools/commit/bcd758b49cbeeba7bb8474cd469ffb6077029505", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5688\n\n# Conflicts:\n#\tkie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/pmml/DMNKiePMMLTrustyInvocationEvaluator.java\n#\tkie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/factories/PMMLRuntimeFactoryInternal.java", "committedDate": "2020-10-14T13:47:37Z", "type": "commit"}, {"oid": "2175dd33d873127f31538a8f66b0dd6a2190aeb2", "url": "https://github.com/kiegroup/drools/commit/2175dd33d873127f31538a8f66b0dd6a2190aeb2", "message": "[DROOLS-5688] Fixed consistent use of PMMLRuntime", "committedDate": "2020-10-14T16:00:01Z", "type": "commit"}, {"oid": "fa7027dd61b0a31e977d86f5872f787d60a3751a", "url": "https://github.com/kiegroup/drools/commit/fa7027dd61b0a31e977d86f5872f787d60a3751a", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5688", "committedDate": "2020-10-15T07:51:12Z", "type": "commit"}]}