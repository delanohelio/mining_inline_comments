{"pr_number": 3193, "pr_title": "[KOGITO-2836] Math predicates not processed correctly when null and bad error messaging", "pr_createdAt": "2020-10-27T10:55:14Z", "pr_url": "https://github.com/kiegroup/drools/pull/3193", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDg3Ng==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512674876", "bodyText": "I think it is better to be consistent: always wrap originalException or never. Now it is possible to have different stack traces for the same type of error. Wdyt?", "author": "danielezonca", "createdAt": "2020-10-27T13:06:40Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.model.functions;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Used to generate a better error message when constraints fail\n+ */\n+public class PredicateInformation {\n+\n+    public static final PredicateInformation EMPTY_PREDICATE_INFORMATION =\n+            new PredicateInformation(\"\", \"\", \"\");\n+\n+\n+    // Used to generate a significant error message\n+    private final String stringConstraint;\n+    private final String ruleName;\n+    private final String ruleFileName;\n+\n+    public PredicateInformation(String stringConstraint, String ruleName, String ruleFileName) {\n+        this.stringConstraint = defaultToEmptyString(stringConstraint);\n+        this.ruleName = defaultToEmptyString(ruleName);\n+        this.ruleFileName = defaultToEmptyString(ruleFileName);\n+    }\n+\n+    private String defaultToEmptyString(String stringConstraint) {\n+        return Optional.ofNullable(stringConstraint).orElse(\"\");\n+    }\n+\n+    public RuntimeException betterErrorMessage(RuntimeException originalException) {\n+        if(\"\".equals(stringConstraint)) {\n+            return originalException;\n+        }\n+\n+        String errorMessage = String.format(\n+                \"Error evaluating constraint '%s' in [Rule %s in %s]\",\n+                stringConstraint,\n+                ruleName,\n+                ruleFileName);\n+        return new RuntimeException(errorMessage, originalException);\n+    }", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNDk4Mw==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513224983", "bodyText": "When we don't have the debug information (the original constraint) to me it doesn't make sense to wrap the original exception with a \ufffdRuntImeException and I wound't know which error message to put", "author": "lucamolteni", "createdAt": "2020-10-28T07:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java b/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java\ndeleted file mode 100644\nindex 20d616793e..0000000000\n--- a/drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/PredicateInformation.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.drools.model.functions;\n-\n-import java.util.Objects;\n-import java.util.Optional;\n-\n-/**\n- * Used to generate a better error message when constraints fail\n- */\n-public class PredicateInformation {\n-\n-    public static final PredicateInformation EMPTY_PREDICATE_INFORMATION =\n-            new PredicateInformation(\"\", \"\", \"\");\n-\n-\n-    // Used to generate a significant error message\n-    private final String stringConstraint;\n-    private final String ruleName;\n-    private final String ruleFileName;\n-\n-    public PredicateInformation(String stringConstraint, String ruleName, String ruleFileName) {\n-        this.stringConstraint = defaultToEmptyString(stringConstraint);\n-        this.ruleName = defaultToEmptyString(ruleName);\n-        this.ruleFileName = defaultToEmptyString(ruleFileName);\n-    }\n-\n-    private String defaultToEmptyString(String stringConstraint) {\n-        return Optional.ofNullable(stringConstraint).orElse(\"\");\n-    }\n-\n-    public RuntimeException betterErrorMessage(RuntimeException originalException) {\n-        if(\"\".equals(stringConstraint)) {\n-            return originalException;\n-        }\n-\n-        String errorMessage = String.format(\n-                \"Error evaluating constraint '%s' in [Rule %s in %s]\",\n-                stringConstraint,\n-                ruleName,\n-                ruleFileName);\n-        return new RuntimeException(errorMessage, originalException);\n-    }\n-\n-    public String getStringConstraint() {\n-        return stringConstraint;\n-    }\n-\n-    public String getRuleName() {\n-        return ruleName;\n-    }\n-\n-    public String getRuleFileName() {\n-        return ruleFileName;\n-    }\n-\n-    public boolean isEmpty() {\n-        return EMPTY_PREDICATE_INFORMATION.equals(this);\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-        PredicateInformation that = (PredicateInformation) o;\n-        return Objects.equals(stringConstraint, that.stringConstraint) &&\n-                Objects.equals(ruleName, that.ruleName) &&\n-                Objects.equals(ruleFileName, that.ruleFileName);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(stringConstraint, ruleName, ruleFileName);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"PredicateInformation{\" +\n-                \"stringConstraint='\" + stringConstraint + '\\'' +\n-                \", ruleName='\" + ruleName + '\\'' +\n-                \", ruleFileName='\" + ruleFileName + '\\'' +\n-                '}';\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNDIzMQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512714231", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-10-27T13:58:15Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java", "diffHunk": "@@ -27,12 +28,13 @@ public void convertPatternLambda() throws Exception {\n         CompilationUnit inputCU = parseResource(\"org/drools/modelcompiler/util/lambdareplace/PatternTestHarness.java\");\n         CompilationUnit clone = inputCU.clone();\n \n-        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), clone).convertLambdas();\n+        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), new HashMap<>(), clone).convertLambdas();\n \n         String PATTERN_HARNESS = \"PatternTestHarness\";\n         MethodDeclaration expectedResult = getMethodChangingName(inputCU, PATTERN_HARNESS, \"expectedOutput\");\n         MethodDeclaration actual = getMethodChangingName(clone, PATTERN_HARNESS, \"inputMethod\");\n \n+//        assertEquals(expectedResult, actual); // better diff - fails on String equals", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNTg1MA==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513225850", "bodyText": "The assertEquals on the JavaParser AST produces a much better diff when the twos are different, therefore it's really useful to fix this kind of test. Unfortunately it can't be used for the assertion as it requires the node of the AST to be identical, so it pretty much fails all the time. That's why I used the assertion on the string. After five minutes of trying to understand the diff between the strings I remembered this diff is far much better so I think it could be useful the next time we have to fix it.\nAny suggestions are welcome though :)", "author": "lucamolteni", "createdAt": "2020-10-28T07:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNDIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java\nindex 06b7c80a0f..a4829a1324 100644\n--- a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java\n+++ b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessorTest.java\n\n@@ -28,13 +27,12 @@ public class ExecModelLambdaPostProcessorTest {\n         CompilationUnit inputCU = parseResource(\"org/drools/modelcompiler/util/lambdareplace/PatternTestHarness.java\");\n         CompilationUnit clone = inputCU.clone();\n \n-        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), new HashMap<>(), clone).convertLambdas();\n+        new ExecModelLambdaPostProcessor(new HashMap<>(), \"mypackage\", \"rulename\", new ArrayList<>(), new ArrayList<>(), new HashMap<>(), clone).convertLambdas();\n \n         String PATTERN_HARNESS = \"PatternTestHarness\";\n         MethodDeclaration expectedResult = getMethodChangingName(inputCU, PATTERN_HARNESS, \"expectedOutput\");\n         MethodDeclaration actual = getMethodChangingName(clone, PATTERN_HARNESS, \"inputMethod\");\n \n-//        assertEquals(expectedResult, actual); // better diff - fails on String equals\n         assertThat(actual.toString(), equalToIgnoringWhiteSpace(expectedResult.toString()));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NDY3Ng==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512744676", "bodyText": "What about a different method name to highlight that this is not a plain getter but it does some side effect on indexing too?", "author": "danielezonca", "createdAt": "2020-10-27T14:33:56Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()\n+        ));\n+        return exprId;\n+    }", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\nindex 3f3739e751..f928423354 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\n\n@@ -421,15 +420,4 @@ public abstract class AbstractExpressionBuilder {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n-\n-    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n-        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n-\n-        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n-                drlxParseResult.getOriginalDrlConstraint(),\n-                context.getRuleName(),\n-                context.getRuleName()\n-        ));\n-        return exprId;\n-    }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MzY3Mw==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512753673", "bodyText": "To be removed?", "author": "danielezonca", "createdAt": "2020-10-27T14:44:31Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java", "diffHunk": "@@ -56,6 +63,7 @@ public void createClassWithTwoParameters() {\n                 \"        }\\n\" +\n                 \"    }\\n\";\n \n+//        assertEquals(StaticJavaParser.parse(expectedResult), aClass.getCompilationUnit()); // Better diff", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjg4OQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513226889", "bodyText": "Same as before, it's the \"better diff\" comment", "author": "lucamolteni", "createdAt": "2020-10-28T07:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MzY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java\nindex 607fdc494d..9a8437e8c4 100644\n--- a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java\n+++ b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicateTest.java\n\n@@ -63,7 +56,6 @@ public class MaterializedLambdaPredicateTest {\n                 \"        }\\n\" +\n                 \"    }\\n\";\n \n-//        assertEquals(StaticJavaParser.parse(expectedResult), aClass.getCompilationUnit()); // Better diff\n         assertThat(aClass.getCompilationUnitAsString(), equalToIgnoringWhiteSpace(expectedResult));\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTMyMQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void testMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createTestMethod(EnumDeclaration classDeclaration) {", "author": "danielezonca", "createdAt": "2020-10-27T14:51:05Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -43,7 +50,14 @@ String getPrefix() {\n     }\n \n     @Override\n-    void createMethodDeclaration(EnumDeclaration classDeclaration) {\n+    void createMethodsDeclaration(EnumDeclaration classDeclaration) {\n+        testMethod(classDeclaration);\n+        if(!predicateInformation.isEmpty()) {\n+            predicateInformationMethod(classDeclaration);\n+        }\n+    }\n+\n+    private void testMethod(EnumDeclaration classDeclaration) {", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\nindex c920fa0ee7..0396df2b19 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\n\n@@ -50,14 +43,7 @@ public class MaterializedLambdaPredicate extends MaterializedLambda {\n     }\n \n     @Override\n-    void createMethodsDeclaration(EnumDeclaration classDeclaration) {\n-        testMethod(classDeclaration);\n-        if(!predicateInformation.isEmpty()) {\n-            predicateInformationMethod(classDeclaration);\n-        }\n-    }\n-\n-    private void testMethod(EnumDeclaration classDeclaration) {\n+    void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         MethodDeclaration methodDeclaration = classDeclaration.addMethod(\"test\", Modifier.Keyword.PUBLIC);\n         methodDeclaration.setThrownExceptions(NodeList.nodeList(parseClassOrInterfaceType(\"java.lang.Exception\")));\n         methodDeclaration.addAnnotation(\"Override\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1OTY4NQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512759685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void predicateInformationMethod(EnumDeclaration classDeclaration) {\n          \n          \n            \n                private void createPredicateInformationMethod(EnumDeclaration classDeclaration) {", "author": "danielezonca", "createdAt": "2020-10-27T14:51:30Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java", "diffHunk": "@@ -55,6 +69,20 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         methodDeclaration.setBody(new BlockStmt(NodeList.nodeList(new ReturnStmt(clone.getExpression()))));\n     }\n \n+    private void predicateInformationMethod(EnumDeclaration classDeclaration) {", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\nindex c920fa0ee7..0396df2b19 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaPredicate.java\n\n@@ -69,20 +55,6 @@ public class MaterializedLambdaPredicate extends MaterializedLambda {\n         methodDeclaration.setBody(new BlockStmt(NodeList.nodeList(new ReturnStmt(clone.getExpression()))));\n     }\n \n-    private void predicateInformationMethod(EnumDeclaration classDeclaration) {\n-        MethodDeclaration methodDeclaration = classDeclaration.addMethod(\"predicateInformation\", Modifier.Keyword.PUBLIC);\n-        methodDeclaration.addAnnotation(\"Override\");\n-        ClassOrInterfaceType predicateInformationType = (ClassOrInterfaceType) parseType(PredicateInformation.class.getCanonicalName());\n-        methodDeclaration.setType(predicateInformationType);\n-\n-        ObjectCreationExpr newPredicateInformation = new ObjectCreationExpr(null, predicateInformationType, NodeList.nodeList(\n-            new StringLiteralExpr().setString(predicateInformation.getStringConstraint()),\n-            new StringLiteralExpr().setString(predicateInformation.getRuleName()),\n-            new StringLiteralExpr().setString(predicateInformation.getRuleFileName())\n-        ));\n-        methodDeclaration.setBody(new BlockStmt(NodeList.nodeList(new ReturnStmt(newPredicateInformation))));\n-    }\n-\n     @Override\n     protected ClassOrInterfaceType functionType() {\n         String type = \"Predicate\" + lambdaParameters.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MjAwNA==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512762004", "bodyText": "It seems not used. Can you please double check?", "author": "danielezonca", "createdAt": "2020-10-27T14:54:21Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java", "diffHunk": "@@ -65,4 +65,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return Objects.hash(compilationUnit, className, packageName);\n     }\n+\n+    public CompilationUnit getCompilationUnit() {\n+        return compilationUnit;\n+    }", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java\nindex f01535f025..c271bd38b6 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/CreatedClass.java\n\n@@ -65,8 +65,4 @@ public class CreatedClass {\n     public int hashCode() {\n         return Objects.hash(compilationUnit, className, packageName);\n     }\n-\n-    public CompilationUnit getCompilationUnit() {\n-        return compilationUnit;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2MzA3NQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512763075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return allConstraintsMap;\n          \n          \n            \n                    return java.util.Collections.unmodifiableMap(allConstraintsMap);", "author": "danielezonca", "createdAt": "2020-10-27T14:55:32Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "diffHunk": "@@ -858,4 +862,16 @@ public String getDomainClassesMetadataSource() {\n     public Map<LambdaExpr, java.lang.reflect.Type> getLambdaReturnTypes() {\n         return lambdaReturnTypes;\n     }\n+\n+    public void indexConstraint(String exprId, PredicateInformation predicateInformation) {\n+        allConstraintsMap.put(exprId, predicateInformation);\n+    }\n+\n+    public Optional<PredicateInformation> findConstraintWithExprId(String exprId) {\n+        return Optional.ofNullable(allConstraintsMap.get(exprId));\n+    }\n+\n+    public Map<String, PredicateInformation> getAllConstraintsMap() {\n+        return allConstraintsMap;", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java\nindex 5c43d31cd9..b68574e5d0 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java\n\n@@ -862,16 +858,4 @@ public class PackageModel {\n     public Map<LambdaExpr, java.lang.reflect.Type> getLambdaReturnTypes() {\n         return lambdaReturnTypes;\n     }\n-\n-    public void indexConstraint(String exprId, PredicateInformation predicateInformation) {\n-        allConstraintsMap.put(exprId, predicateInformation);\n-    }\n-\n-    public Optional<PredicateInformation> findConstraintWithExprId(String exprId) {\n-        return Optional.ofNullable(allConstraintsMap.get(exprId));\n-    }\n-\n-    public Map<String, PredicateInformation> getAllConstraintsMap() {\n-        return allConstraintsMap;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDYyMA==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r512764620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = java.util.Collections.unmodifiableMap(pkgModel.getAllConstraintsMap());\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n          \n          \n            \n                    this.debugPredicateInformation = new HashMap<>(pkgModel.getAllConstraintsMap());", "author": "danielezonca", "createdAt": "2020-10-27T14:57:16Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -88,6 +92,7 @@ public ExecModelLambdaPostProcessor(PackageModel pkgModel,\n         this.imports = pkgModel.getImports();\n         this.staticImports = pkgModel.getStaticImports();\n         this.lambdaReturnTypes = pkgModel.getLambdaReturnTypes();\n+        this.debugPredicateInformation = pkgModel.getAllConstraintsMap();", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzQxMw==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513227413", "bodyText": "if getAllConstraintsMap returns a new unmodifiableMap each time does it make sense to wrap it again here? I'd wrap it only once in the actual getter", "author": "lucamolteni", "createdAt": "2020-10-28T07:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java\nindex 06fe062700..eb65e44cfe 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java\n\n@@ -92,7 +88,6 @@ public class ExecModelLambdaPostProcessor {\n         this.imports = pkgModel.getImports();\n         this.staticImports = pkgModel.getStaticImports();\n         this.lambdaReturnTypes = pkgModel.getLambdaReturnTypes();\n-        this.debugPredicateInformation = pkgModel.getAllConstraintsMap();\n         this.clone = clone;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513164349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            context.getRuleName()\n          \n          \n            \n                            context.getRuleDescr().getResource().getSourcePath()\n          \n      \n    \n    \n  \n\nHow about this for the latter parameter (ruleFileName)? I'm not fully sure if RuleDescr always has Resource so null check may be required.", "author": "tkobayas", "createdAt": "2020-10-28T03:50:56Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java", "diffHunk": "@@ -420,4 +421,15 @@ protected boolean containsThis(TypedExpression typedExpression) {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n+\n+    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n+        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n+\n+        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n+                drlxParseResult.getOriginalDrlConstraint(),\n+                context.getRuleName(),\n+                context.getRuleName()", "originalCommit": "653fd3f05e553a8352d2d6e22dd628f13c006911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzY4OA==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513227688", "bodyText": "Let me try it, thanks for the suggestion!", "author": "lucamolteni", "createdAt": "2020-10-28T07:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzMjAwOQ==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r513232009", "bodyText": "it works and now the error message is identical to the DRL one. Impressive thanks!", "author": "lucamolteni", "createdAt": "2020-10-28T07:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NDM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1b299430449bb306f1a54382f713221271484bbf", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\nindex 3f3739e751..f928423354 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/expression/AbstractExpressionBuilder.java\n\n@@ -421,15 +420,4 @@ public abstract class AbstractExpressionBuilder {\n         }\n         return opt.get().equals(THIS_PLACEHOLDER);\n     }\n-\n-    protected String getExprId(SingleDrlxParseSuccess drlxParseResult) {\n-        String exprId = drlxParseResult.getExprId(context.getPackageModel().getExprIdGenerator());\n-\n-        context.getPackageModel().indexConstraint(exprId, new PredicateInformation(\n-                drlxParseResult.getOriginalDrlConstraint(),\n-                context.getRuleName(),\n-                context.getRuleName()\n-        ));\n-        return exprId;\n-    }\n }\n\\ No newline at end of file\n"}}, {"oid": "1b299430449bb306f1a54382f713221271484bbf", "url": "https://github.com/kiegroup/drools/commit/1b299430449bb306f1a54382f713221271484bbf", "message": "Test for KOGITO-2836", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "174d95549190ca6da5f97af0f9c80f159f5dc5ee", "url": "https://github.com/kiegroup/drools/commit/174d95549190ca6da5f97af0f9c80f159f5dc5ee", "message": "Add information regarding the original constraint to executable model constraint for error reporting", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "f549de0de8179d83eae4cb71410ada5f2d26eccc", "url": "https://github.com/kiegroup/drools/commit/f549de0de8179d83eae4cb71410ada5f2d26eccc", "message": "Fix ExecModelLambdaPostProcessorTest", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "5a81c48ffbb723d09d3028e43a84c0bdc5dab053", "url": "https://github.com/kiegroup/drools/commit/5a81c48ffbb723d09d3028e43a84c0bdc5dab053", "message": "MaterializedLambdaPredicateTest", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "1e9f084e4943c0d82a61681dcfb515ef025f740e", "url": "https://github.com/kiegroup/drools/commit/1e9f084e4943c0d82a61681dcfb515ef025f740e", "message": "Pass expr Id as argument to generate the materialized lambda", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "d08429c868ef9bd41a8b7e3d9e18496bb3e871f0", "url": "https://github.com/kiegroup/drools/commit/d08429c868ef9bd41a8b7e3d9e18496bb3e871f0", "message": "Global map of exprId => rawconstraint", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "5517b036752395f03bae35dd4463af3be227a658", "url": "https://github.com/kiegroup/drools/commit/5517b036752395f03bae35dd4463af3be227a658", "message": "Correct quoting on predicate information", "committedDate": "2020-10-28T07:18:32Z", "type": "commit"}, {"oid": "8ace50eba083b4d6c8d18348ff2e40289623a371", "url": "https://github.com/kiegroup/drools/commit/8ace50eba083b4d6c8d18348ff2e40289623a371", "message": "Fixed NPE on testAfterWithAnd", "committedDate": "2020-10-28T07:18:33Z", "type": "commit"}, {"oid": "782d043b1e3bee3ee30f61cf373b955bffe456d0", "url": "https://github.com/kiegroup/drools/commit/782d043b1e3bee3ee30f61cf373b955bffe456d0", "message": "All predicates delegate", "committedDate": "2020-10-28T07:18:33Z", "type": "commit"}, {"oid": "14f991b54e2c34202f3206a53570dedd648ee293", "url": "https://github.com/kiegroup/drools/commit/14f991b54e2c34202f3206a53570dedd648ee293", "message": "First review", "committedDate": "2020-10-28T07:18:33Z", "type": "commit"}, {"oid": "dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "url": "https://github.com/kiegroup/drools/commit/dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "message": "Review", "committedDate": "2020-10-28T07:39:31Z", "type": "commit"}, {"oid": "dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "url": "https://github.com/kiegroup/drools/commit/dad4ebda27e1b2096f2e0f7f156b4fc4224e8d55", "message": "Review", "committedDate": "2020-10-28T07:39:31Z", "type": "forcePushed"}, {"oid": "9a15690f473c9fd9f3cd75466daaa4765830ab7a", "url": "https://github.com/kiegroup/drools/commit/9a15690f473c9fd9f3cd75466daaa4765830ab7a", "message": "Better assertion method", "committedDate": "2020-10-28T15:27:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2OTEzMw==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r514269133", "bodyText": "Minor: wouldn't be better to have a Predicate interface, make all PredicateX interfaces to extend it and put this method only there?", "author": "mariofusco", "createdAt": "2020-10-29T13:45:06Z", "path": "drools-model/drools-canonical-model/src/main/java/org/drools/model/functions/Predicate1.java", "diffHunk": "@@ -26,6 +26,8 @@\n         return a -> !test( a );\n     }\n \n+    default PredicateInformation predicateInformation() { return PredicateInformation.EMPTY_PREDICATE_INFORMATION; }", "originalCommit": "9a15690f473c9fd9f3cd75466daaa4765830ab7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3NDkyNw==", "url": "https://github.com/kiegroup/drools/pull/3193#discussion_r514274927", "bodyText": "I guess yes, but I followed the non-polymorphic design we did in the first place", "author": "lucamolteni", "createdAt": "2020-10-29T13:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2OTEzMw=="}], "type": "inlineReview", "revised_code": null}]}