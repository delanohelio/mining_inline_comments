{"pr_number": 3221, "pr_title": "[DROOLS-5786] fix NPE with a double accumulate", "pr_createdAt": "2020-11-05T16:19:58Z", "pr_url": "https://github.com/kiegroup/drools/pull/3221", "timeline": [{"oid": "b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "url": "https://github.com/kiegroup/drools/commit/b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "message": "[DROOLS-5786] fix NPE with a double accumulate", "committedDate": "2020-11-05T16:19:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwNzQ1Mw==", "url": "https://github.com/kiegroup/drools/pull/3221#discussion_r518207453", "bodyText": "Looking at the code, the entire process arg incl. the inner class can be removed.\nIt is not necessary in this latest version of the test.", "author": "triceo", "createdAt": "2020-11-05T16:58:23Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/AccumulateTest.java", "diffHunk": "@@ -2593,4 +2594,114 @@ public void testAccumulateNumberFromSum() {\n         assertEquals(1, results.size());\n         assertEquals(8 * 60L, results.iterator().next().getValue());\n     }\n+\n+    private static int switchMachinesInAssignments(KieSession session, MrProcessAssignment left,\n+                                                   MrProcessAssignment right) {\n+        FactHandle leftHandle = session.getFactHandle(left);\n+        FactHandle rightHandle = session.getFactHandle(right);\n+        MrMachine original = left.getMachine();\n+        left.setMachine(right.getMachine());\n+        right.setMachine(original);\n+        session.update(leftHandle, left);\n+        session.update(rightHandle, right);\n+        return session.fireAllRules();\n+    }\n+\n+    @Test\n+    public void testDoubleAccumulateNPE() {\n+        // Prepare reproducing data.\n+        MrMachine machine2 = new MrMachine();\n+        MrMachine machine3 = new MrMachine();\n+        MrProcessAssignment assignment1 = new MrProcessAssignment(new MrProcess(), machine3, machine3);", "originalCommit": "b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwODExNQ==", "url": "https://github.com/kiegroup/drools/pull/3221#discussion_r518208115", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"        $a: MrProcessAssignment(machine != null, this.isMoved() == true),\\n\" +\n          \n          \n            \n                            \"        $a: MrProcessAssignment(machine != null, machine != originalMachine),\\n\" +", "author": "triceo", "createdAt": "2020-11-05T16:59:19Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/AccumulateTest.java", "diffHunk": "@@ -2593,4 +2594,114 @@ public void testAccumulateNumberFromSum() {\n         assertEquals(1, results.size());\n         assertEquals(8 * 60L, results.iterator().next().getValue());\n     }\n+\n+    private static int switchMachinesInAssignments(KieSession session, MrProcessAssignment left,\n+                                                   MrProcessAssignment right) {\n+        FactHandle leftHandle = session.getFactHandle(left);\n+        FactHandle rightHandle = session.getFactHandle(right);\n+        MrMachine original = left.getMachine();\n+        left.setMachine(right.getMachine());\n+        right.setMachine(original);\n+        session.update(leftHandle, left);\n+        session.update(rightHandle, right);\n+        return session.fireAllRules();\n+    }\n+\n+    @Test\n+    public void testDoubleAccumulateNPE() {\n+        // Prepare reproducing data.\n+        MrMachine machine2 = new MrMachine();\n+        MrMachine machine3 = new MrMachine();\n+        MrProcessAssignment assignment1 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+        MrProcessAssignment assignment2 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment3 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment4 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+\n+        String rule = \"import \" + MrProcessAssignment.class.getCanonicalName() + \";\\n\" +\n+                \"import \" + List.class.getCanonicalName() + \";\\n\" +\n+                \"rule R1\\n\" +\n+                \"when\\n\" +\n+                \"   $assignments: List(size > 0) from accumulate(\\n\" +\n+                \"        $a: MrProcessAssignment(machine != null, this.isMoved() == true),\\n\" +", "originalCommit": "b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwODQ3Mg==", "url": "https://github.com/kiegroup/drools/pull/3221#discussion_r518208472", "bodyText": "May be removed if the suggestion above is accepted.", "author": "triceo", "createdAt": "2020-11-05T16:59:47Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/AccumulateTest.java", "diffHunk": "@@ -2593,4 +2594,114 @@ public void testAccumulateNumberFromSum() {\n         assertEquals(1, results.size());\n         assertEquals(8 * 60L, results.iterator().next().getValue());\n     }\n+\n+    private static int switchMachinesInAssignments(KieSession session, MrProcessAssignment left,\n+                                                   MrProcessAssignment right) {\n+        FactHandle leftHandle = session.getFactHandle(left);\n+        FactHandle rightHandle = session.getFactHandle(right);\n+        MrMachine original = left.getMachine();\n+        left.setMachine(right.getMachine());\n+        right.setMachine(original);\n+        session.update(leftHandle, left);\n+        session.update(rightHandle, right);\n+        return session.fireAllRules();\n+    }\n+\n+    @Test\n+    public void testDoubleAccumulateNPE() {\n+        // Prepare reproducing data.\n+        MrMachine machine2 = new MrMachine();\n+        MrMachine machine3 = new MrMachine();\n+        MrProcessAssignment assignment1 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+        MrProcessAssignment assignment2 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment3 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment4 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+\n+        String rule = \"import \" + MrProcessAssignment.class.getCanonicalName() + \";\\n\" +\n+                \"import \" + List.class.getCanonicalName() + \";\\n\" +\n+                \"rule R1\\n\" +\n+                \"when\\n\" +\n+                \"   $assignments: List(size > 0) from accumulate(\\n\" +\n+                \"        $a: MrProcessAssignment(machine != null, this.isMoved() == true),\\n\" +\n+                \"        collectList($a)\\n\" +\n+                \"   )\\n\" +\n+                \"    accumulate(\\n\" +\n+                \"        $a2: MrProcessAssignment() from $assignments,\\n\" +\n+                \"        $count: count($a2)\\n\" +\n+                \"    )\\n\" +\n+                \"then\\n\" +\n+                \"    System.out.println($count);\\n\" +\n+                \"end;\";\n+        KieSession kieSession = getKieSession(rule);\n+\n+        // Insert facts into the session.\n+        kieSession.insert(assignment1);\n+        kieSession.insert(assignment2);\n+        kieSession.insert(assignment3);\n+        kieSession.insert(assignment4);\n+        int fired = kieSession.fireAllRules();\n+        assertEquals(0, fired);\n+\n+        // Execute the sequence of session events that triggers the exception.\n+        fired = switchMachinesInAssignments(kieSession, assignment1, assignment2);\n+        assertEquals(1, fired);\n+\n+        fired = switchMachinesInAssignments(kieSession, assignment1, assignment2);\n+        assertEquals(0, fired);\n+\n+        fired = switchMachinesInAssignments(kieSession, assignment4, assignment3);\n+        assertEquals(1, fired);\n+\n+        kieSession.dispose();\n+    }\n+\n+    public static class MrProcess {\n+\n+    }\n+\n+    public static class MrProcessAssignment {\n+\n+        private MrProcess process;\n+        private MrMachine originalMachine;\n+        private MrMachine machine;\n+\n+        public MrProcessAssignment(MrProcess process, MrMachine originalMachine, MrMachine machine) {\n+            this.process = process;\n+            this.originalMachine = originalMachine;\n+            this.machine = machine;\n+        }\n+\n+        public MrProcess getProcess() {\n+            return process;\n+        }\n+\n+        public MrMachine getOriginalMachine() {\n+            return originalMachine;\n+        }\n+\n+        public MrMachine getMachine() {\n+            return machine;\n+        }\n+\n+        public void setMachine(MrMachine machine) {\n+            this.machine = machine;\n+        }\n+\n+        // ************************************************************************\n+        // Complex methods\n+        // ************************************************************************\n+\n+        public boolean isMoved() {\n+            if (machine == null) {\n+                return false;\n+            }\n+            return !Objects.equals(originalMachine, machine);\n+        }", "originalCommit": "b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwOTY2Nw==", "url": "https://github.com/kiegroup/drools/pull/3221#discussion_r518209667", "bodyText": "The field is not necessary in this latest version of the test.", "author": "triceo", "createdAt": "2020-11-05T17:01:34Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/AccumulateTest.java", "diffHunk": "@@ -2593,4 +2594,114 @@ public void testAccumulateNumberFromSum() {\n         assertEquals(1, results.size());\n         assertEquals(8 * 60L, results.iterator().next().getValue());\n     }\n+\n+    private static int switchMachinesInAssignments(KieSession session, MrProcessAssignment left,\n+                                                   MrProcessAssignment right) {\n+        FactHandle leftHandle = session.getFactHandle(left);\n+        FactHandle rightHandle = session.getFactHandle(right);\n+        MrMachine original = left.getMachine();\n+        left.setMachine(right.getMachine());\n+        right.setMachine(original);\n+        session.update(leftHandle, left);\n+        session.update(rightHandle, right);\n+        return session.fireAllRules();\n+    }\n+\n+    @Test\n+    public void testDoubleAccumulateNPE() {\n+        // Prepare reproducing data.\n+        MrMachine machine2 = new MrMachine();\n+        MrMachine machine3 = new MrMachine();\n+        MrProcessAssignment assignment1 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+        MrProcessAssignment assignment2 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment3 = new MrProcessAssignment(new MrProcess(), machine2, machine2);\n+        MrProcessAssignment assignment4 = new MrProcessAssignment(new MrProcess(), machine3, machine3);\n+\n+        String rule = \"import \" + MrProcessAssignment.class.getCanonicalName() + \";\\n\" +\n+                \"import \" + List.class.getCanonicalName() + \";\\n\" +\n+                \"rule R1\\n\" +\n+                \"when\\n\" +\n+                \"   $assignments: List(size > 0) from accumulate(\\n\" +\n+                \"        $a: MrProcessAssignment(machine != null, this.isMoved() == true),\\n\" +\n+                \"        collectList($a)\\n\" +\n+                \"   )\\n\" +\n+                \"    accumulate(\\n\" +\n+                \"        $a2: MrProcessAssignment() from $assignments,\\n\" +\n+                \"        $count: count($a2)\\n\" +\n+                \"    )\\n\" +\n+                \"then\\n\" +\n+                \"    System.out.println($count);\\n\" +\n+                \"end;\";\n+        KieSession kieSession = getKieSession(rule);\n+\n+        // Insert facts into the session.\n+        kieSession.insert(assignment1);\n+        kieSession.insert(assignment2);\n+        kieSession.insert(assignment3);\n+        kieSession.insert(assignment4);\n+        int fired = kieSession.fireAllRules();\n+        assertEquals(0, fired);\n+\n+        // Execute the sequence of session events that triggers the exception.\n+        fired = switchMachinesInAssignments(kieSession, assignment1, assignment2);\n+        assertEquals(1, fired);\n+\n+        fired = switchMachinesInAssignments(kieSession, assignment1, assignment2);\n+        assertEquals(0, fired);\n+\n+        fired = switchMachinesInAssignments(kieSession, assignment4, assignment3);\n+        assertEquals(1, fired);\n+\n+        kieSession.dispose();\n+    }\n+\n+    public static class MrProcess {\n+\n+    }\n+\n+    public static class MrProcessAssignment {\n+\n+        private MrProcess process;", "originalCommit": "b0f3ce5a4c5899ec7f41e58c3e0272b9aa873e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}